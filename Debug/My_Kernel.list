
My_Kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b848  0800b848  00020488  2**0
                  CONTENTS
  4 .ARM          00000008  0800b848  0800b848  0001b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b850  0800b850  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b850  0800b850  0001b850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b854  0800b854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .slPtr        00000004  20000000  0800b858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000484  20000004  0800b85c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00014a9c  20000488  0800bce0  00020488  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20014f24  0800bce0  00024f24  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 13 .lfs          000e0000  08020000  08020000  00030000  2**0
                  ALLOC
 14 .debug_info   00038d9c  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000071b0  00000000  00000000  00059254  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000012c0  00000000  00000000  00060408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002993b  00000000  00000000  000616c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001bbc0  00000000  00000000  0008b003  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d0acb  00000000  00000000  000a6bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017768e  2**0
                  CONTENTS, READONLY
 21 .debug_loc    00014154  00000000  00000000  00177709  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00002e80  00000000  00000000  0018b860  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  000045d8  00000000  00000000  0018e6e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000488 	.word	0x20000488
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2c8 	.word	0x0800a2c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000048c 	.word	0x2000048c
 80001cc:	0800a2c8 	.word	0x0800a2c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b986 	b.w	80005c4 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9e08      	ldr	r6, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	4688      	mov	r8, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14b      	bne.n	800039e <__udivmoddi4+0xa6>
 8000306:	428a      	cmp	r2, r1
 8000308:	4615      	mov	r5, r2
 800030a:	d967      	bls.n	80003dc <__udivmoddi4+0xe4>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b14a      	cbz	r2, 8000326 <__udivmoddi4+0x2e>
 8000312:	f1c2 0720 	rsb	r7, r2, #32
 8000316:	fa01 f302 	lsl.w	r3, r1, r2
 800031a:	fa20 f707 	lsr.w	r7, r0, r7
 800031e:	4095      	lsls	r5, r2
 8000320:	ea47 0803 	orr.w	r8, r7, r3
 8000324:	4094      	lsls	r4, r2
 8000326:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000330:	fa1f fc85 	uxth.w	ip, r5
 8000334:	fb0e 8817 	mls	r8, lr, r7, r8
 8000338:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800033c:	fb07 f10c 	mul.w	r1, r7, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x60>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f107 30ff 	add.w	r0, r7, #4294967295
 800034a:	f080 811b 	bcs.w	8000584 <__udivmoddi4+0x28c>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 8118 	bls.w	8000584 <__udivmoddi4+0x28c>
 8000354:	3f02      	subs	r7, #2
 8000356:	442b      	add	r3, r5
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000368:	fb00 fc0c 	mul.w	ip, r0, ip
 800036c:	45a4      	cmp	ip, r4
 800036e:	d909      	bls.n	8000384 <__udivmoddi4+0x8c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	f080 8107 	bcs.w	8000588 <__udivmoddi4+0x290>
 800037a:	45a4      	cmp	ip, r4
 800037c:	f240 8104 	bls.w	8000588 <__udivmoddi4+0x290>
 8000380:	3802      	subs	r0, #2
 8000382:	442c      	add	r4, r5
 8000384:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000388:	eba4 040c 	sub.w	r4, r4, ip
 800038c:	2700      	movs	r7, #0
 800038e:	b11e      	cbz	r6, 8000398 <__udivmoddi4+0xa0>
 8000390:	40d4      	lsrs	r4, r2
 8000392:	2300      	movs	r3, #0
 8000394:	e9c6 4300 	strd	r4, r3, [r6]
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	428b      	cmp	r3, r1
 80003a0:	d909      	bls.n	80003b6 <__udivmoddi4+0xbe>
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	f000 80eb 	beq.w	800057e <__udivmoddi4+0x286>
 80003a8:	2700      	movs	r7, #0
 80003aa:	e9c6 0100 	strd	r0, r1, [r6]
 80003ae:	4638      	mov	r0, r7
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	fab3 f783 	clz	r7, r3
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d147      	bne.n	800044e <__udivmoddi4+0x156>
 80003be:	428b      	cmp	r3, r1
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xd0>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 80fa 	bhi.w	80005bc <__udivmoddi4+0x2c4>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb61 0303 	sbc.w	r3, r1, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4698      	mov	r8, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d0e0      	beq.n	8000398 <__udivmoddi4+0xa0>
 80003d6:	e9c6 4800 	strd	r4, r8, [r6]
 80003da:	e7dd      	b.n	8000398 <__udivmoddi4+0xa0>
 80003dc:	b902      	cbnz	r2, 80003e0 <__udivmoddi4+0xe8>
 80003de:	deff      	udf	#255	; 0xff
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f040 808f 	bne.w	8000508 <__udivmoddi4+0x210>
 80003ea:	1b49      	subs	r1, r1, r5
 80003ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f0:	fa1f f885 	uxth.w	r8, r5
 80003f4:	2701      	movs	r7, #1
 80003f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80003fa:	0c23      	lsrs	r3, r4, #16
 80003fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb08 f10c 	mul.w	r1, r8, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x124>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x122>
 8000414:	4299      	cmp	r1, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2bc>
 800041a:	4684      	mov	ip, r0
 800041c:	1a59      	subs	r1, r3, r1
 800041e:	b2a3      	uxth	r3, r4
 8000420:	fbb1 f0fe 	udiv	r0, r1, lr
 8000424:	fb0e 1410 	mls	r4, lr, r0, r1
 8000428:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800042c:	fb08 f800 	mul.w	r8, r8, r0
 8000430:	45a0      	cmp	r8, r4
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x14c>
 8000434:	192c      	adds	r4, r5, r4
 8000436:	f100 33ff 	add.w	r3, r0, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x14a>
 800043c:	45a0      	cmp	r8, r4
 800043e:	f200 80b6 	bhi.w	80005ae <__udivmoddi4+0x2b6>
 8000442:	4618      	mov	r0, r3
 8000444:	eba4 0408 	sub.w	r4, r4, r8
 8000448:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800044c:	e79f      	b.n	800038e <__udivmoddi4+0x96>
 800044e:	f1c7 0c20 	rsb	ip, r7, #32
 8000452:	40bb      	lsls	r3, r7
 8000454:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000458:	ea4e 0e03 	orr.w	lr, lr, r3
 800045c:	fa01 f407 	lsl.w	r4, r1, r7
 8000460:	fa20 f50c 	lsr.w	r5, r0, ip
 8000464:	fa21 f30c 	lsr.w	r3, r1, ip
 8000468:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800046c:	4325      	orrs	r5, r4
 800046e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	fb08 3319 	mls	r3, r8, r9, r3
 8000478:	fa1f fa8e 	uxth.w	sl, lr
 800047c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000480:	fb09 f40a 	mul.w	r4, r9, sl
 8000484:	429c      	cmp	r4, r3
 8000486:	fa02 f207 	lsl.w	r2, r2, r7
 800048a:	fa00 f107 	lsl.w	r1, r0, r7
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b0>
 8000490:	eb1e 0303 	adds.w	r3, lr, r3
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	f080 8087 	bcs.w	80005aa <__udivmoddi4+0x2b2>
 800049c:	429c      	cmp	r4, r3
 800049e:	f240 8084 	bls.w	80005aa <__udivmoddi4+0x2b2>
 80004a2:	f1a9 0902 	sub.w	r9, r9, #2
 80004a6:	4473      	add	r3, lr
 80004a8:	1b1b      	subs	r3, r3, r4
 80004aa:	b2ad      	uxth	r5, r5
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004bc:	45a2      	cmp	sl, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1da>
 80004c0:	eb1e 0404 	adds.w	r4, lr, r4
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d26b      	bcs.n	80005a2 <__udivmoddi4+0x2aa>
 80004ca:	45a2      	cmp	sl, r4
 80004cc:	d969      	bls.n	80005a2 <__udivmoddi4+0x2aa>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4474      	add	r4, lr
 80004d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	eba4 040a 	sub.w	r4, r4, sl
 80004de:	454c      	cmp	r4, r9
 80004e0:	46c2      	mov	sl, r8
 80004e2:	464b      	mov	r3, r9
 80004e4:	d354      	bcc.n	8000590 <__udivmoddi4+0x298>
 80004e6:	d051      	beq.n	800058c <__udivmoddi4+0x294>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d069      	beq.n	80005c0 <__udivmoddi4+0x2c8>
 80004ec:	ebb1 050a 	subs.w	r5, r1, sl
 80004f0:	eb64 0403 	sbc.w	r4, r4, r3
 80004f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	40fc      	lsrs	r4, r7
 80004fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000500:	e9c6 5400 	strd	r5, r4, [r6]
 8000504:	2700      	movs	r7, #0
 8000506:	e747      	b.n	8000398 <__udivmoddi4+0xa0>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f703 	lsr.w	r7, r0, r3
 8000510:	4095      	lsls	r5, r2
 8000512:	fa01 f002 	lsl.w	r0, r1, r2
 8000516:	fa21 f303 	lsr.w	r3, r1, r3
 800051a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800051e:	4338      	orrs	r0, r7
 8000520:	0c01      	lsrs	r1, r0, #16
 8000522:	fbb3 f7fe 	udiv	r7, r3, lr
 8000526:	fa1f f885 	uxth.w	r8, r5
 800052a:	fb0e 3317 	mls	r3, lr, r7, r3
 800052e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000532:	fb07 f308 	mul.w	r3, r7, r8
 8000536:	428b      	cmp	r3, r1
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x256>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f107 3cff 	add.w	ip, r7, #4294967295
 8000544:	d22f      	bcs.n	80005a6 <__udivmoddi4+0x2ae>
 8000546:	428b      	cmp	r3, r1
 8000548:	d92d      	bls.n	80005a6 <__udivmoddi4+0x2ae>
 800054a:	3f02      	subs	r7, #2
 800054c:	4429      	add	r1, r5
 800054e:	1acb      	subs	r3, r1, r3
 8000550:	b281      	uxth	r1, r0
 8000552:	fbb3 f0fe 	udiv	r0, r3, lr
 8000556:	fb0e 3310 	mls	r3, lr, r0, r3
 800055a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055e:	fb00 f308 	mul.w	r3, r0, r8
 8000562:	428b      	cmp	r3, r1
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x27e>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f100 3cff 	add.w	ip, r0, #4294967295
 800056c:	d217      	bcs.n	800059e <__udivmoddi4+0x2a6>
 800056e:	428b      	cmp	r3, r1
 8000570:	d915      	bls.n	800059e <__udivmoddi4+0x2a6>
 8000572:	3802      	subs	r0, #2
 8000574:	4429      	add	r1, r5
 8000576:	1ac9      	subs	r1, r1, r3
 8000578:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800057c:	e73b      	b.n	80003f6 <__udivmoddi4+0xfe>
 800057e:	4637      	mov	r7, r6
 8000580:	4630      	mov	r0, r6
 8000582:	e709      	b.n	8000398 <__udivmoddi4+0xa0>
 8000584:	4607      	mov	r7, r0
 8000586:	e6e7      	b.n	8000358 <__udivmoddi4+0x60>
 8000588:	4618      	mov	r0, r3
 800058a:	e6fb      	b.n	8000384 <__udivmoddi4+0x8c>
 800058c:	4541      	cmp	r1, r8
 800058e:	d2ab      	bcs.n	80004e8 <__udivmoddi4+0x1f0>
 8000590:	ebb8 0a02 	subs.w	sl, r8, r2
 8000594:	eb69 020e 	sbc.w	r2, r9, lr
 8000598:	3801      	subs	r0, #1
 800059a:	4613      	mov	r3, r2
 800059c:	e7a4      	b.n	80004e8 <__udivmoddi4+0x1f0>
 800059e:	4660      	mov	r0, ip
 80005a0:	e7e9      	b.n	8000576 <__udivmoddi4+0x27e>
 80005a2:	4618      	mov	r0, r3
 80005a4:	e795      	b.n	80004d2 <__udivmoddi4+0x1da>
 80005a6:	4667      	mov	r7, ip
 80005a8:	e7d1      	b.n	800054e <__udivmoddi4+0x256>
 80005aa:	4681      	mov	r9, r0
 80005ac:	e77c      	b.n	80004a8 <__udivmoddi4+0x1b0>
 80005ae:	3802      	subs	r0, #2
 80005b0:	442c      	add	r4, r5
 80005b2:	e747      	b.n	8000444 <__udivmoddi4+0x14c>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	442b      	add	r3, r5
 80005ba:	e72f      	b.n	800041c <__udivmoddi4+0x124>
 80005bc:	4638      	mov	r0, r7
 80005be:	e708      	b.n	80003d2 <__udivmoddi4+0xda>
 80005c0:	4637      	mov	r7, r6
 80005c2:	e6e9      	b.n	8000398 <__udivmoddi4+0xa0>

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <cli_is_terminator>:
/**********************************************
 * PRIVATE FUNCTIONS
 *********************************************/
 
static inline bool cli_is_terminator(cliElement_t const * const e){
    if(e == NULL) return false;
 80005c8:	b178      	cbz	r0, 80005ea <cli_is_terminator+0x22>
    return (e->name == NULL && e->action == NULL && e->args == NULL && e->desc == NULL && e->argsDesc == NULL);
 80005ca:	6803      	ldr	r3, [r0, #0]
 80005cc:	b953      	cbnz	r3, 80005e4 <cli_is_terminator+0x1c>
 80005ce:	6882      	ldr	r2, [r0, #8]
 80005d0:	b942      	cbnz	r2, 80005e4 <cli_is_terminator+0x1c>
 80005d2:	68c3      	ldr	r3, [r0, #12]
 80005d4:	b933      	cbnz	r3, 80005e4 <cli_is_terminator+0x1c>
 80005d6:	6902      	ldr	r2, [r0, #16]
 80005d8:	b932      	cbnz	r2, 80005e8 <cli_is_terminator+0x20>
 80005da:	6940      	ldr	r0, [r0, #20]
 80005dc:	fab0 f080 	clz	r0, r0
 80005e0:	0940      	lsrs	r0, r0, #5
 80005e2:	4770      	bx	lr
 80005e4:	2000      	movs	r0, #0
 80005e6:	4770      	bx	lr
 80005e8:	4618      	mov	r0, r3
}
 80005ea:	4770      	bx	lr

080005ec <cli_arg_str_len>:
    DBG_PRINTLN("%s", ret == NULL ? "Not found" : "Sub menu or action found" );
    
    return ret;
}

static int32_t cli_arg_str_len(char* arg){
 80005ec:	b510      	push	{r4, lr}
    if(arg ==  NULL) return -1;
 80005ee:	b330      	cbz	r0, 800063e <cli_arg_str_len+0x52>
    
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 80005f0:	7801      	ldrb	r1, [r0, #0]
 80005f2:	297b      	cmp	r1, #123	; 0x7b
 80005f4:	d014      	beq.n	8000620 <cli_arg_str_len+0x34>
 80005f6:	f1a1 0322 	sub.w	r3, r1, #34	; 0x22
 80005fa:	425a      	negs	r2, r3
 80005fc:	415a      	adcs	r2, r3
 80005fe:	4402      	add	r2, r0
    
    while(1){
        switch(arg[0]){
 8000600:	2922      	cmp	r1, #34	; 0x22
 8000602:	eba2 0300 	sub.w	r3, r2, r0
 8000606:	f812 4b01 	ldrb.w	r4, [r2], #1
 800060a:	d001      	beq.n	8000610 <cli_arg_str_len+0x24>
 800060c:	297b      	cmp	r1, #123	; 0x7b
 800060e:	d112      	bne.n	8000636 <cli_arg_str_len+0x4a>
            
            case '{' :
            case '"' : {
                if(arg[i] == '\0') return -1;
 8000610:	b1ac      	cbz	r4, 800063e <cli_arg_str_len+0x52>
                
                if(arg[0] == '{' && arg[i] == '}'){
 8000612:	297b      	cmp	r1, #123	; 0x7b
 8000614:	d106      	bne.n	8000624 <cli_arg_str_len+0x38>
 8000616:	2c7d      	cmp	r4, #125	; 0x7d
 8000618:	d1f2      	bne.n	8000600 <cli_arg_str_len+0x14>
                    return i+1;
                }
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
                    return i+1;
 800061a:	3301      	adds	r3, #1
        
        i++;
    }
    
    return -1;
}
 800061c:	4618      	mov	r0, r3
 800061e:	bd10      	pop	{r4, pc}
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 8000620:	2201      	movs	r2, #1
 8000622:	e7ec      	b.n	80005fe <cli_arg_str_len+0x12>
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
 8000624:	2922      	cmp	r1, #34	; 0x22
 8000626:	d1eb      	bne.n	8000600 <cli_arg_str_len+0x14>
 8000628:	2c22      	cmp	r4, #34	; 0x22
 800062a:	d1e9      	bne.n	8000600 <cli_arg_str_len+0x14>
 800062c:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8000630:	2c5c      	cmp	r4, #92	; 0x5c
 8000632:	d0e5      	beq.n	8000600 <cli_arg_str_len+0x14>
 8000634:	e7f1      	b.n	800061a <cli_arg_str_len+0x2e>
                if(arg[i] == ' ' || arg[i] == '\0') return i;
 8000636:	f014 0fdf 	tst.w	r4, #223	; 0xdf
 800063a:	d1e1      	bne.n	8000600 <cli_arg_str_len+0x14>
 800063c:	e7ee      	b.n	800061c <cli_arg_str_len+0x30>
    if(arg ==  NULL) return -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	e7eb      	b.n	800061c <cli_arg_str_len+0x30>

08000644 <cli_go_to_next_argument>:

static char* cli_go_to_next_argument(char* arg){
 8000644:	b510      	push	{r4, lr}
    if(arg == NULL) return NULL;
 8000646:	4604      	mov	r4, r0
 8000648:	b148      	cbz	r0, 800065e <cli_go_to_next_argument+0x1a>
    
    int32_t size = cli_arg_str_len(arg);
 800064a:	f7ff ffcf 	bl	80005ec <cli_arg_str_len>
    
    if(size == -1) return NULL;
 800064e:	1c43      	adds	r3, r0, #1
 8000650:	d007      	beq.n	8000662 <cli_go_to_next_argument+0x1e>
    
    arg += size;
 8000652:	4420      	add	r0, r4
 8000654:	4604      	mov	r4, r0
 8000656:	3001      	adds	r0, #1
    
    while(arg[0] != '\0'){ 
        //if(arg[0] == '-' || arg[0] == '{' || arg[0] == '"' || ('0' <= arg[0] && arg[0] <= '9')) break;
        if(arg[0] != ' ') break;
 8000658:	7823      	ldrb	r3, [r4, #0]
 800065a:	2b20      	cmp	r3, #32
 800065c:	d0fa      	beq.n	8000654 <cli_go_to_next_argument+0x10>
        arg++;
    }
    
    return arg;
}
 800065e:	4620      	mov	r0, r4
 8000660:	bd10      	pop	{r4, pc}
    if(arg == NULL) return NULL;
 8000662:	2400      	movs	r4, #0
 8000664:	e7fb      	b.n	800065e <cli_go_to_next_argument+0x1a>

08000666 <cli_buff_element_is_hex>:
    
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
    cli_print_menu(currentMenu);
}

static bool cli_buff_element_is_hex(char* base, size_t argLen){
 8000666:	b570      	push	{r4, r5, r6, lr}
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 8000668:	7803      	ldrb	r3, [r0, #0]
 800066a:	2b30      	cmp	r3, #48	; 0x30
static bool cli_buff_element_is_hex(char* base, size_t argLen){
 800066c:	4604      	mov	r4, r0
 800066e:	460e      	mov	r6, r1
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 8000670:	d004      	beq.n	800067c <cli_buff_element_is_hex+0x16>
 8000672:	4426      	add	r6, r4
    
    for(size_t i = 0; i < argLen; i++){
 8000674:	42b4      	cmp	r4, r6
 8000676:	d110      	bne.n	800069a <cli_buff_element_is_hex+0x34>
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
    }
    
    return false;
 8000678:	2000      	movs	r0, #0
 800067a:	e00d      	b.n	8000698 <cli_buff_element_is_hex+0x32>
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 800067c:	7845      	ldrb	r5, [r0, #1]
 800067e:	f008 fb97 	bl	8008db0 <__locale_ctype_ptr>
 8000682:	4428      	add	r0, r5
 8000684:	462b      	mov	r3, r5
 8000686:	7842      	ldrb	r2, [r0, #1]
 8000688:	f002 0203 	and.w	r2, r2, #3
 800068c:	2a01      	cmp	r2, #1
 800068e:	bf08      	it	eq
 8000690:	3320      	addeq	r3, #32
 8000692:	2b78      	cmp	r3, #120	; 0x78
 8000694:	d1ed      	bne.n	8000672 <cli_buff_element_is_hex+0xc>
 8000696:	2001      	movs	r0, #1
}
 8000698:	bd70      	pop	{r4, r5, r6, pc}
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
 800069a:	7825      	ldrb	r5, [r4, #0]
 800069c:	f008 fb88 	bl	8008db0 <__locale_ctype_ptr>
 80006a0:	4428      	add	r0, r5
 80006a2:	462b      	mov	r3, r5
 80006a4:	7842      	ldrb	r2, [r0, #1]
 80006a6:	f002 0203 	and.w	r2, r2, #3
 80006aa:	2a01      	cmp	r2, #1
 80006ac:	bf08      	it	eq
 80006ae:	3320      	addeq	r3, #32
 80006b0:	2b60      	cmp	r3, #96	; 0x60
 80006b2:	dc01      	bgt.n	80006b8 <cli_buff_element_is_hex+0x52>
 80006b4:	3401      	adds	r4, #1
 80006b6:	e7dd      	b.n	8000674 <cli_buff_element_is_hex+0xe>
 80006b8:	7825      	ldrb	r5, [r4, #0]
 80006ba:	f008 fb79 	bl	8008db0 <__locale_ctype_ptr>
 80006be:	4428      	add	r0, r5
 80006c0:	462b      	mov	r3, r5
 80006c2:	7842      	ldrb	r2, [r0, #1]
 80006c4:	f002 0203 	and.w	r2, r2, #3
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	bf08      	it	eq
 80006cc:	3320      	addeq	r3, #32
 80006ce:	2b66      	cmp	r3, #102	; 0x66
 80006d0:	dcf0      	bgt.n	80006b4 <cli_buff_element_is_hex+0x4e>
 80006d2:	e7e0      	b.n	8000696 <cli_buff_element_is_hex+0x30>

080006d4 <cli_verify_int.isra.2>:
static bool cli_verify_int(char* tkn, bool isUnsigned, bool printEn){
 80006d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006d8:	4607      	mov	r7, r0
 80006da:	460e      	mov	r6, r1
    int32_t len = cli_arg_str_len(tkn);
 80006dc:	f7ff ff86 	bl	80005ec <cli_arg_str_len>
 80006e0:	4680      	mov	r8, r0
    if(isUnsigned == false && tkn[0] == '-'){
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d170      	bne.n	80007c8 <cli_verify_int.isra.2+0xf4>
 80006e6:	783b      	ldrb	r3, [r7, #0]
 80006e8:	2b2d      	cmp	r3, #45	; 0x2d
 80006ea:	d170      	bne.n	80007ce <cli_verify_int.isra.2+0xfa>
        if(len == 1) {
 80006ec:	2801      	cmp	r0, #1
 80006ee:	d171      	bne.n	80007d4 <cli_verify_int.isra.2+0x100>
            return false;
 80006f0:	2000      	movs	r0, #0
}
 80006f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 80006f6:	7825      	ldrb	r5, [r4, #0]
 80006f8:	f008 fb5a 	bl	8008db0 <__locale_ctype_ptr>
 80006fc:	4428      	add	r0, r5
 80006fe:	462b      	mov	r3, r5
 8000700:	7842      	ldrb	r2, [r0, #1]
 8000702:	f002 0203 	and.w	r2, r2, #3
 8000706:	2a01      	cmp	r2, #1
 8000708:	bf08      	it	eq
 800070a:	3320      	addeq	r3, #32
 800070c:	2b78      	cmp	r3, #120	; 0x78
 800070e:	d00a      	beq.n	8000726 <cli_verify_int.isra.2+0x52>
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000710:	7825      	ldrb	r5, [r4, #0]
 8000712:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8000716:	2b09      	cmp	r3, #9
 8000718:	d82d      	bhi.n	8000776 <cli_verify_int.isra.2+0xa2>
 800071a:	3401      	adds	r4, #1
    while(i < len){
 800071c:	1be3      	subs	r3, r4, r7
 800071e:	4598      	cmp	r8, r3
 8000720:	dce9      	bgt.n	80006f6 <cli_verify_int.isra.2+0x22>
    return true;
 8000722:	2001      	movs	r0, #1
 8000724:	e7e5      	b.n	80006f2 <cli_verify_int.isra.2+0x1e>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000726:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800072a:	2b30      	cmp	r3, #48	; 0x30
 800072c:	d1e0      	bne.n	80006f0 <cli_verify_int.isra.2+0x1c>
 800072e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8000732:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8000736:	d1db      	bne.n	80006f0 <cli_verify_int.isra.2+0x1c>
 8000738:	7865      	ldrb	r5, [r4, #1]
 800073a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800073e:	2b09      	cmp	r3, #9
 8000740:	d9e6      	bls.n	8000710 <cli_verify_int.isra.2+0x3c>
 8000742:	f008 fb35 	bl	8008db0 <__locale_ctype_ptr>
 8000746:	4428      	add	r0, r5
 8000748:	462b      	mov	r3, r5
 800074a:	7842      	ldrb	r2, [r0, #1]
 800074c:	f002 0203 	and.w	r2, r2, #3
 8000750:	2a01      	cmp	r2, #1
 8000752:	bf08      	it	eq
 8000754:	3320      	addeq	r3, #32
 8000756:	2b60      	cmp	r3, #96	; 0x60
 8000758:	ddca      	ble.n	80006f0 <cli_verify_int.isra.2+0x1c>
 800075a:	7865      	ldrb	r5, [r4, #1]
 800075c:	f008 fb28 	bl	8008db0 <__locale_ctype_ptr>
 8000760:	4428      	add	r0, r5
 8000762:	462b      	mov	r3, r5
 8000764:	7842      	ldrb	r2, [r0, #1]
 8000766:	f002 0203 	and.w	r2, r2, #3
 800076a:	2a01      	cmp	r2, #1
 800076c:	bf08      	it	eq
 800076e:	3320      	addeq	r3, #32
 8000770:	2b66      	cmp	r3, #102	; 0x66
 8000772:	ddcd      	ble.n	8000710 <cli_verify_int.isra.2+0x3c>
 8000774:	e7bc      	b.n	80006f0 <cli_verify_int.isra.2+0x1c>
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000776:	2e00      	cmp	r6, #0
 8000778:	d1ba      	bne.n	80006f0 <cli_verify_int.isra.2+0x1c>
 800077a:	f008 fb19 	bl	8008db0 <__locale_ctype_ptr>
 800077e:	4428      	add	r0, r5
 8000780:	462b      	mov	r3, r5
 8000782:	7842      	ldrb	r2, [r0, #1]
 8000784:	f002 0203 	and.w	r2, r2, #3
 8000788:	2a01      	cmp	r2, #1
 800078a:	bf08      	it	eq
 800078c:	3320      	addeq	r3, #32
 800078e:	2b60      	cmp	r3, #96	; 0x60
 8000790:	dc0d      	bgt.n	80007ae <cli_verify_int.isra.2+0xda>
 8000792:	7825      	ldrb	r5, [r4, #0]
 8000794:	f008 fb0c 	bl	8008db0 <__locale_ctype_ptr>
 8000798:	4428      	add	r0, r5
 800079a:	462b      	mov	r3, r5
 800079c:	7842      	ldrb	r2, [r0, #1]
 800079e:	f002 0203 	and.w	r2, r2, #3
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	d100      	bne.n	80007a8 <cli_verify_int.isra.2+0xd4>
 80007a6:	3320      	adds	r3, #32
 80007a8:	2b78      	cmp	r3, #120	; 0x78
 80007aa:	d0b6      	beq.n	800071a <cli_verify_int.isra.2+0x46>
 80007ac:	e7a0      	b.n	80006f0 <cli_verify_int.isra.2+0x1c>
 80007ae:	7825      	ldrb	r5, [r4, #0]
 80007b0:	f008 fafe 	bl	8008db0 <__locale_ctype_ptr>
 80007b4:	4428      	add	r0, r5
 80007b6:	7843      	ldrb	r3, [r0, #1]
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	2b01      	cmp	r3, #1
 80007be:	bf08      	it	eq
 80007c0:	3520      	addeq	r5, #32
 80007c2:	2d66      	cmp	r5, #102	; 0x66
 80007c4:	dce5      	bgt.n	8000792 <cli_verify_int.isra.2+0xbe>
 80007c6:	e7a8      	b.n	800071a <cli_verify_int.isra.2+0x46>
    int32_t i = 0;
 80007c8:	2400      	movs	r4, #0
        is_negative = true;
 80007ca:	4626      	mov	r6, r4
 80007cc:	e000      	b.n	80007d0 <cli_verify_int.isra.2+0xfc>
    int32_t i = 0;
 80007ce:	4634      	mov	r4, r6
 80007d0:	443c      	add	r4, r7
 80007d2:	e7a3      	b.n	800071c <cli_verify_int.isra.2+0x48>
        i++;
 80007d4:	2401      	movs	r4, #1
 80007d6:	e7f8      	b.n	80007ca <cli_verify_int.isra.2+0xf6>

080007d8 <cli_verify_buffer.isra.3>:
static bool cli_verify_buffer(char* tkn, bool printEn){
 80007d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(tkn == NULL) return false;
 80007dc:	4605      	mov	r5, r0
 80007de:	b910      	cbnz	r0, 80007e6 <cli_verify_buffer.isra.3+0xe>
 80007e0:	2000      	movs	r0, #0
}
 80007e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(tkn[0] != '"' && tkn[0] != '{') {
 80007e6:	7804      	ldrb	r4, [r0, #0]
 80007e8:	2c22      	cmp	r4, #34	; 0x22
 80007ea:	d001      	beq.n	80007f0 <cli_verify_buffer.isra.3+0x18>
 80007ec:	2c7b      	cmp	r4, #123	; 0x7b
 80007ee:	d1f7      	bne.n	80007e0 <cli_verify_buffer.isra.3+0x8>
    int32_t len = cli_arg_str_len(tkn);
 80007f0:	4628      	mov	r0, r5
 80007f2:	f7ff fefb 	bl	80005ec <cli_arg_str_len>
    if(len == -1) {
 80007f6:	1c43      	adds	r3, r0, #1
    int32_t len = cli_arg_str_len(tkn);
 80007f8:	4607      	mov	r7, r0
    if(len == -1) {
 80007fa:	d0f1      	beq.n	80007e0 <cli_verify_buffer.isra.3+0x8>
    if(tkn[0] == '"') return true;
 80007fc:	2c22      	cmp	r4, #34	; 0x22
 80007fe:	d16f      	bne.n	80008e0 <cli_verify_buffer.isra.3+0x108>
 8000800:	2001      	movs	r0, #1
 8000802:	e7ee      	b.n	80007e2 <cli_verify_buffer.isra.3+0xa>
        if(tkn[i] == '}') break; 
 8000804:	5d2e      	ldrb	r6, [r5, r4]
 8000806:	2e7d      	cmp	r6, #125	; 0x7d
 8000808:	d0fa      	beq.n	8000800 <cli_verify_buffer.isra.3+0x28>
        if(tkn[i] == ' ') continue;
 800080a:	2e20      	cmp	r6, #32
 800080c:	d103      	bne.n	8000816 <cli_verify_buffer.isra.3+0x3e>
    for(i = 1; i < len; i++){
 800080e:	3401      	adds	r4, #1
 8000810:	42a7      	cmp	r7, r4
 8000812:	dcf7      	bgt.n	8000804 <cli_verify_buffer.isra.3+0x2c>
 8000814:	e7f4      	b.n	8000800 <cli_verify_buffer.isra.3+0x28>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000816:	f008 facb 	bl	8008db0 <__locale_ctype_ptr>
 800081a:	4430      	add	r0, r6
 800081c:	4633      	mov	r3, r6
 800081e:	7842      	ldrb	r2, [r0, #1]
 8000820:	f002 0203 	and.w	r2, r2, #3
 8000824:	2a01      	cmp	r2, #1
 8000826:	bf08      	it	eq
 8000828:	3320      	addeq	r3, #32
 800082a:	2b78      	cmp	r3, #120	; 0x78
 800082c:	d01e      	beq.n	800086c <cli_verify_buffer.isra.3+0x94>
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 800082e:	5d2e      	ldrb	r6, [r5, r4]
 8000830:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8000834:	2b09      	cmp	r3, #9
 8000836:	d9ea      	bls.n	800080e <cli_verify_buffer.isra.3+0x36>
 8000838:	f008 faba 	bl	8008db0 <__locale_ctype_ptr>
 800083c:	4430      	add	r0, r6
 800083e:	4633      	mov	r3, r6
 8000840:	7842      	ldrb	r2, [r0, #1]
 8000842:	f002 0203 	and.w	r2, r2, #3
 8000846:	2a01      	cmp	r2, #1
 8000848:	bf08      	it	eq
 800084a:	3320      	addeq	r3, #32
 800084c:	2b60      	cmp	r3, #96	; 0x60
 800084e:	dc3a      	bgt.n	80008c6 <cli_verify_buffer.isra.3+0xee>
 8000850:	5d2e      	ldrb	r6, [r5, r4]
 8000852:	f008 faad 	bl	8008db0 <__locale_ctype_ptr>
 8000856:	4430      	add	r0, r6
 8000858:	4633      	mov	r3, r6
 800085a:	7842      	ldrb	r2, [r0, #1]
 800085c:	f002 0203 	and.w	r2, r2, #3
 8000860:	2a01      	cmp	r2, #1
 8000862:	d100      	bne.n	8000866 <cli_verify_buffer.isra.3+0x8e>
 8000864:	3320      	adds	r3, #32
 8000866:	2b78      	cmp	r3, #120	; 0x78
 8000868:	d0d1      	beq.n	800080e <cli_verify_buffer.isra.3+0x36>
 800086a:	e7b9      	b.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 800086c:	eb05 0804 	add.w	r8, r5, r4
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000870:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8000874:	2b30      	cmp	r3, #48	; 0x30
 8000876:	d1b3      	bne.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 8000878:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 800087c:	2b20      	cmp	r3, #32
 800087e:	d001      	beq.n	8000884 <cli_verify_buffer.isra.3+0xac>
 8000880:	2b7b      	cmp	r3, #123	; 0x7b
 8000882:	d1ad      	bne.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 8000884:	f898 6001 	ldrb.w	r6, [r8, #1]
 8000888:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800088c:	2b09      	cmp	r3, #9
 800088e:	d9ce      	bls.n	800082e <cli_verify_buffer.isra.3+0x56>
 8000890:	f008 fa8e 	bl	8008db0 <__locale_ctype_ptr>
 8000894:	4430      	add	r0, r6
 8000896:	4633      	mov	r3, r6
 8000898:	7842      	ldrb	r2, [r0, #1]
 800089a:	f002 0203 	and.w	r2, r2, #3
 800089e:	2a01      	cmp	r2, #1
 80008a0:	bf08      	it	eq
 80008a2:	3320      	addeq	r3, #32
 80008a4:	2b60      	cmp	r3, #96	; 0x60
 80008a6:	dd9b      	ble.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 80008a8:	f898 6001 	ldrb.w	r6, [r8, #1]
 80008ac:	f008 fa80 	bl	8008db0 <__locale_ctype_ptr>
 80008b0:	4430      	add	r0, r6
 80008b2:	4633      	mov	r3, r6
 80008b4:	7842      	ldrb	r2, [r0, #1]
 80008b6:	f002 0203 	and.w	r2, r2, #3
 80008ba:	2a01      	cmp	r2, #1
 80008bc:	bf08      	it	eq
 80008be:	3320      	addeq	r3, #32
 80008c0:	2b66      	cmp	r3, #102	; 0x66
 80008c2:	ddb4      	ble.n	800082e <cli_verify_buffer.isra.3+0x56>
 80008c4:	e78c      	b.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 80008c6:	5d2e      	ldrb	r6, [r5, r4]
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 80008c8:	f008 fa72 	bl	8008db0 <__locale_ctype_ptr>
 80008cc:	4430      	add	r0, r6
 80008ce:	7843      	ldrb	r3, [r0, #1]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	bf08      	it	eq
 80008d8:	3620      	addeq	r6, #32
 80008da:	2e66      	cmp	r6, #102	; 0x66
 80008dc:	dcb8      	bgt.n	8000850 <cli_verify_buffer.isra.3+0x78>
 80008de:	e796      	b.n	800080e <cli_verify_buffer.isra.3+0x36>
    for(i = 1; i < len; i++){
 80008e0:	2401      	movs	r4, #1
 80008e2:	e795      	b.n	8000810 <cli_verify_buffer.isra.3+0x38>

080008e4 <cli_verify_args_str.isra.1.constprop.6>:
static int64_t cli_verify_args_str(cliElement_t const * const e, bool* elipsisPresent){
 80008e4:	b538      	push	{r3, r4, r5, lr}
 80008e6:	460d      	mov	r5, r1
    if(e->args == NULL) return -1;
 80008e8:	4604      	mov	r4, r0
 80008ea:	b918      	cbnz	r0, 80008f4 <cli_verify_args_str.isra.1.constprop.6+0x10>
                return -1;
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	4601      	mov	r1, r0
 80008f2:	e01e      	b.n	8000932 <cli_verify_args_str.isra.1.constprop.6+0x4e>
    size_t len = strlen(e->args);
 80008f4:	f7ff fc76 	bl	80001e4 <strlen>
    *elipsisPresent = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	702b      	strb	r3, [r5, #0]
    for(int i = 0; i < len; i++){
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d017      	beq.n	8000930 <cli_verify_args_str.isra.1.constprop.6+0x4c>
        switch(e->args[i]){
 8000900:	5ce2      	ldrb	r2, [r4, r3]
 8000902:	2a62      	cmp	r2, #98	; 0x62
 8000904:	d01c      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 8000906:	d815      	bhi.n	8000934 <cli_verify_args_str.isra.1.constprop.6+0x50>
 8000908:	2a2a      	cmp	r2, #42	; 0x2a
 800090a:	d019      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 800090c:	2a2e      	cmp	r2, #46	; 0x2e
 800090e:	d1ed      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                if(len < i + 2 || e->args[i + 1] != '.' || e->args[i + 2] != '.'){
 8000910:	1c9a      	adds	r2, r3, #2
 8000912:	4290      	cmp	r0, r2
 8000914:	d3ea      	bcc.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
 8000916:	441c      	add	r4, r3
 8000918:	7862      	ldrb	r2, [r4, #1]
 800091a:	2a2e      	cmp	r2, #46	; 0x2e
 800091c:	d1e6      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
 800091e:	78a2      	ldrb	r2, [r4, #2]
 8000920:	2a2e      	cmp	r2, #46	; 0x2e
 8000922:	d1e3      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                if(len > i + 3){
 8000924:	1cda      	adds	r2, r3, #3
 8000926:	4290      	cmp	r0, r2
 8000928:	d8e0      	bhi.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                *elipsisPresent = 1;
 800092a:	2201      	movs	r2, #1
 800092c:	702a      	strb	r2, [r5, #0]
                return argsLen++;
 800092e:	4618      	mov	r0, r3
    return argsLen;
 8000930:	2100      	movs	r1, #0
}
 8000932:	bd38      	pop	{r3, r4, r5, pc}
        switch(e->args[i]){
 8000934:	2a73      	cmp	r2, #115	; 0x73
 8000936:	d003      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 8000938:	2a75      	cmp	r2, #117	; 0x75
 800093a:	d001      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 800093c:	2a69      	cmp	r2, #105	; 0x69
 800093e:	d1d5      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                argsLen++;
 8000940:	3301      	adds	r3, #1
 8000942:	e7db      	b.n	80008fc <cli_verify_args_str.isra.1.constprop.6+0x18>

08000944 <cli_get_int_arg.constprop.5>:

static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	b085      	sub	sp, #20
 800094a:	e9cd 2100 	strd	r2, r1, [sp]
    if(currEl == NULL || argsStr == NULL) {
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <cli_get_int_arg.constprop.5+0xb8>)
 8000950:	6816      	ldr	r6, [r2, #0]
static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 8000952:	4607      	mov	r7, r0
    if(currEl == NULL || argsStr == NULL) {
 8000954:	b91e      	cbnz	r6, 800095e <cli_get_int_arg.constprop.5+0x1a>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 8000956:	2000      	movs	r0, #0
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
        
    *res = strtol(argBase, NULL, num_base);

    return true;
}
 8000958:	b005      	add	sp, #20
 800095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(currEl == NULL || argsStr == NULL) {
 800095e:	4928      	ldr	r1, [pc, #160]	; (8000a00 <cli_get_int_arg.constprop.5+0xbc>)
 8000960:	680c      	ldr	r4, [r1, #0]
 8000962:	2c00      	cmp	r4, #0
 8000964:	d0f7      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    if(currEl->args == NULL) {
 8000966:	68f0      	ldr	r0, [r6, #12]
 8000968:	2800      	cmp	r0, #0
 800096a:	d0f4      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    bool elipsisPresent = false;
 800096c:	a904      	add	r1, sp, #16
 800096e:	2500      	movs	r5, #0
 8000970:	f801 5d01 	strb.w	r5, [r1, #-1]!
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000974:	f7ff ffb6 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(argNum >= len && !elipsisPresent) {
 8000978:	f04f 0b00 	mov.w	fp, #0
 800097c:	4287      	cmp	r7, r0
 800097e:	eb7b 0301 	sbcs.w	r3, fp, r1
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000982:	4680      	mov	r8, r0
 8000984:	4689      	mov	r9, r1
    if(argNum >= len && !elipsisPresent) {
 8000986:	46ba      	mov	sl, r7
 8000988:	db03      	blt.n	8000992 <cli_get_int_arg.constprop.5+0x4e>
 800098a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800098e:	2900      	cmp	r1, #0
 8000990:	d0e1      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    for(size_t i = 0; i < argNum; i++)
 8000992:	42af      	cmp	r7, r5
 8000994:	d12a      	bne.n	80009ec <cli_get_int_arg.constprop.5+0xa8>
    if(argBase[0] == '\0'){ 
 8000996:	7821      	ldrb	r1, [r4, #0]
 8000998:	2900      	cmp	r1, #0
 800099a:	d0dc      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 800099c:	45c2      	cmp	sl, r8
 800099e:	eb7b 0309 	sbcs.w	r3, fp, r9
 80009a2:	da07      	bge.n	80009b4 <cli_get_int_arg.constprop.5+0x70>
 80009a4:	68f2      	ldr	r2, [r6, #12]
 80009a6:	5dd3      	ldrb	r3, [r2, r7]
 80009a8:	9a00      	ldr	r2, [sp, #0]
 80009aa:	b32a      	cbz	r2, 80009f8 <cli_get_int_arg.constprop.5+0xb4>
 80009ac:	2b75      	cmp	r3, #117	; 0x75
 80009ae:	d007      	beq.n	80009c0 <cli_get_int_arg.constprop.5+0x7c>
 80009b0:	2b2a      	cmp	r3, #42	; 0x2a
 80009b2:	d1d0      	bne.n	8000956 <cli_get_int_arg.constprop.5+0x12>
        if(!cli_verify_int(argBase, isUnsigned, true)) return false;
 80009b4:	9900      	ldr	r1, [sp, #0]
 80009b6:	4620      	mov	r0, r4
 80009b8:	f7ff fe8c 	bl	80006d4 <cli_verify_int.isra.2>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d0ca      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    int32_t argLen = cli_arg_str_len(argBase);
 80009c0:	4620      	mov	r0, r4
 80009c2:	f7ff fe13 	bl	80005ec <cli_arg_str_len>
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
 80009c6:	4601      	mov	r1, r0
 80009c8:	4620      	mov	r0, r4
 80009ca:	f7ff fe4c 	bl	8000666 <cli_buff_element_is_hex>
 80009ce:	2800      	cmp	r0, #0
    *res = strtol(argBase, NULL, num_base);
 80009d0:	f04f 0100 	mov.w	r1, #0
 80009d4:	bf14      	ite	ne
 80009d6:	2210      	movne	r2, #16
 80009d8:	220a      	moveq	r2, #10
 80009da:	4620      	mov	r0, r4
 80009dc:	f008 fe48 	bl	8009670 <strtol>
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	17c1      	asrs	r1, r0, #31
 80009e4:	e9c3 0100 	strd	r0, r1, [r3]
    return true;
 80009e8:	2001      	movs	r0, #1
 80009ea:	e7b5      	b.n	8000958 <cli_get_int_arg.constprop.5+0x14>
        argBase = cli_go_to_next_argument(argBase);
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff fe29 	bl	8000644 <cli_go_to_next_argument>
    for(size_t i = 0; i < argNum; i++)
 80009f2:	3501      	adds	r5, #1
        argBase = cli_go_to_next_argument(argBase);
 80009f4:	4604      	mov	r4, r0
 80009f6:	e7cc      	b.n	8000992 <cli_get_int_arg.constprop.5+0x4e>
    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 80009f8:	2b69      	cmp	r3, #105	; 0x69
 80009fa:	e7d8      	b.n	80009ae <cli_get_int_arg.constprop.5+0x6a>
 80009fc:	200004ac 	.word	0x200004ac
 8000a00:	200004a4 	.word	0x200004a4

08000a04 <cli_get_buff_arg.constprop.4>:
    *res = pos;
    
    return err;
}

static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8000a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a08:	b087      	sub	sp, #28
 8000a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if(currEl == NULL || argsStr == NULL) {
 8000a0e:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <cli_get_buff_arg.constprop.4+0x1b4>)
static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8000a10:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
    if(currEl == NULL || argsStr == NULL) {
 8000a14:	f8d3 8000 	ldr.w	r8, [r3]
static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8000a18:	4606      	mov	r6, r0
 8000a1a:	460d      	mov	r5, r1
    if(currEl == NULL || argsStr == NULL) {
 8000a1c:	f1b8 0f00 	cmp.w	r8, #0
 8000a20:	d103      	bne.n	8000a2a <cli_get_buff_arg.constprop.4+0x26>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 8000a22:	2000      	movs	r0, #0
    else if(argBase[0] == '"')
        return cli_get_quotes(argBase, argLen, buff, buffLen, res, isString);
    
    ERR_PRINTLN("Buffer does not begin with \" nor {");
    return false;
}
 8000a24:	b007      	add	sp, #28
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(currEl == NULL || argsStr == NULL) {
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <cli_get_buff_arg.constprop.4+0x1b8>)
 8000a2c:	681c      	ldr	r4, [r3, #0]
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d0f7      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    if(currEl->args == NULL) {
 8000a32:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d0f3      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    bool elipsisPresent = false;
 8000a3a:	a906      	add	r1, sp, #24
 8000a3c:	f04f 0900 	mov.w	r9, #0
 8000a40:	f801 9d01 	strb.w	r9, [r1, #-1]!
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000a44:	f7ff ff4e 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(argNum >= len && !elipsisPresent) { 
 8000a48:	f04f 0b00 	mov.w	fp, #0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	4286      	cmp	r6, r0
 8000a50:	eb7b 0303 	sbcs.w	r3, fp, r3
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000a54:	e9cd 0100 	strd	r0, r1, [sp]
    if(argNum >= len && !elipsisPresent) { 
 8000a58:	46b2      	mov	sl, r6
 8000a5a:	db03      	blt.n	8000a64 <cli_get_buff_arg.constprop.4+0x60>
 8000a5c:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d0de      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    for(size_t i = 0; i < argNum; i++)
 8000a64:	454e      	cmp	r6, r9
 8000a66:	d12f      	bne.n	8000ac8 <cli_get_buff_arg.constprop.4+0xc4>
    if(argBase[0] == '\0') {
 8000a68:	7823      	ldrb	r3, [r4, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0d9      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8000a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000a72:	4592      	cmp	sl, r2
 8000a74:	eb7b 0303 	sbcs.w	r3, fp, r3
 8000a78:	da07      	bge.n	8000a8a <cli_get_buff_arg.constprop.4+0x86>
 8000a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000a7e:	5d9b      	ldrb	r3, [r3, r6]
 8000a80:	bb4f      	cbnz	r7, 8000ad6 <cli_get_buff_arg.constprop.4+0xd2>
 8000a82:	2b62      	cmp	r3, #98	; 0x62
 8000a84:	d004      	beq.n	8000a90 <cli_get_buff_arg.constprop.4+0x8c>
 8000a86:	2b2a      	cmp	r3, #42	; 0x2a
 8000a88:	d1cb      	bne.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
        cli_verify_buffer(argBase, true);
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fea4 	bl	80007d8 <cli_verify_buffer.isra.3>
    int32_t argLen = cli_arg_str_len(argBase);
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff fdab 	bl	80005ec <cli_arg_str_len>
    if(argLen == -1) { 
 8000a96:	1c43      	adds	r3, r0, #1
 8000a98:	d0c3      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    if(argBase[0] == '{') 
 8000a9a:	7823      	ldrb	r3, [r4, #0]
 8000a9c:	2b7b      	cmp	r3, #123	; 0x7b
 8000a9e:	d144      	bne.n	8000b2a <cli_get_buff_arg.constprop.4+0x126>
        if(pos >= buffLen - endString){
 8000aa0:	9b02      	ldr	r3, [sp, #8]
    for(int i = 1; i < argLen - 1; i++){
 8000aa2:	f04f 0801 	mov.w	r8, #1
	size_t pos = 0;
 8000aa6:	2600      	movs	r6, #0
    for(int i = 1; i < argLen - 1; i++){
 8000aa8:	f100 39ff 	add.w	r9, r0, #4294967295
        if(pos >= buffLen - endString){
 8000aac:	1bdb      	subs	r3, r3, r7
    for(int i = 1; i < argLen - 1; i++){
 8000aae:	45c8      	cmp	r8, r9
 8000ab0:	db13      	blt.n	8000ada <cli_get_buff_arg.constprop.4+0xd6>
    bool err = true;
 8000ab2:	2001      	movs	r0, #1
    if(isString && pos < buffLen) buff[pos++] = '\0';
 8000ab4:	b12f      	cbz	r7, 8000ac2 <cli_get_buff_arg.constprop.4+0xbe>
 8000ab6:	9b02      	ldr	r3, [sp, #8]
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	bf82      	ittt	hi
 8000abc:	2300      	movhi	r3, #0
 8000abe:	55ab      	strbhi	r3, [r5, r6]
 8000ac0:	3601      	addhi	r6, #1
    *res = pos;
 8000ac2:	9b03      	ldr	r3, [sp, #12]
 8000ac4:	601e      	str	r6, [r3, #0]
 8000ac6:	e7ad      	b.n	8000a24 <cli_get_buff_arg.constprop.4+0x20>
        argBase = cli_go_to_next_argument(argBase);
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff fdbb 	bl	8000644 <cli_go_to_next_argument>
    for(size_t i = 0; i < argNum; i++)
 8000ace:	f109 0901 	add.w	r9, r9, #1
        argBase = cli_go_to_next_argument(argBase);
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	e7c6      	b.n	8000a64 <cli_get_buff_arg.constprop.4+0x60>
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8000ad6:	2b73      	cmp	r3, #115	; 0x73
 8000ad8:	e7d4      	b.n	8000a84 <cli_get_buff_arg.constprop.4+0x80>
        if(base[i] == ' ') continue;
 8000ada:	f814 2008 	ldrb.w	r2, [r4, r8]
 8000ade:	2a20      	cmp	r2, #32
 8000ae0:	eb04 0a08 	add.w	sl, r4, r8
 8000ae4:	d01c      	beq.n	8000b20 <cli_get_buff_arg.constprop.4+0x11c>
        int32_t sz = cli_arg_str_len(&base[i]);
 8000ae6:	4650      	mov	r0, sl
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	f7ff fd7f 	bl	80005ec <cli_arg_str_len>
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 8000aee:	4601      	mov	r1, r0
        int32_t sz = cli_arg_str_len(&base[i]);
 8000af0:	4683      	mov	fp, r0
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 8000af2:	4650      	mov	r0, sl
 8000af4:	f7ff fdb7 	bl	8000666 <cli_buff_element_is_hex>
 8000af8:	2800      	cmp	r0, #0
        uint64_t num = (uint64_t)strtol(&base[i], NULL, num_base);
 8000afa:	bf0c      	ite	eq
 8000afc:	220a      	moveq	r2, #10
 8000afe:	2210      	movne	r2, #16
 8000b00:	2100      	movs	r1, #0
 8000b02:	4650      	mov	r0, sl
 8000b04:	f008 fdb4 	bl	8009670 <strtol>
 8000b08:	17c1      	asrs	r1, r0, #31
        if(num > 255){
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	bf08      	it	eq
 8000b0e:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
 8000b12:	d208      	bcs.n	8000b26 <cli_get_buff_arg.constprop.4+0x122>
        if(pos >= buffLen - endString){
 8000b14:	9b00      	ldr	r3, [sp, #0]
 8000b16:	42b3      	cmp	r3, r6
 8000b18:	d905      	bls.n	8000b26 <cli_get_buff_arg.constprop.4+0x122>
        buff[pos++] = (uint8_t) num;
 8000b1a:	55a8      	strb	r0, [r5, r6]
        i += sz;
 8000b1c:	44d8      	add	r8, fp
        buff[pos++] = (uint8_t) num;
 8000b1e:	3601      	adds	r6, #1
    for(int i = 1; i < argLen - 1; i++){
 8000b20:	f108 0801 	add.w	r8, r8, #1
 8000b24:	e7c3      	b.n	8000aae <cli_get_buff_arg.constprop.4+0xaa>
            err = false;
 8000b26:	2000      	movs	r0, #0
 8000b28:	e7c4      	b.n	8000ab4 <cli_get_buff_arg.constprop.4+0xb0>
    else if(argBase[0] == '"')
 8000b2a:	2b22      	cmp	r3, #34	; 0x22
 8000b2c:	f47f af79 	bne.w	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
        if(pos >= buffLen - endString){
 8000b30:	9902      	ldr	r1, [sp, #8]
    size_t endString = ( (isString == true) ? 1 : 0 );
 8000b32:	2300      	movs	r3, #0
    for(int i = 1; i < argLen - 1; i++){
 8000b34:	2201      	movs	r2, #1
 8000b36:	f100 3aff 	add.w	sl, r0, #4294967295
        if(pos >= buffLen - endString){
 8000b3a:	1bce      	subs	r6, r1, r7
                default   : buff[pos++] = '\\'; break;
 8000b3c:	f04f 0c5c 	mov.w	ip, #92	; 0x5c
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8000b40:	f04f 0e0a 	mov.w	lr, #10
                case 'r'  : buff[pos++] = '\r'; i++; break;
 8000b44:	f04f 080d 	mov.w	r8, #13
                case '0'  : buff[pos++] = '\0'; i++; break;
 8000b48:	4699      	mov	r9, r3
    for(int i = 1; i < argLen - 1; i++){
 8000b4a:	4552      	cmp	r2, sl
 8000b4c:	db0a      	blt.n	8000b64 <cli_get_buff_arg.constprop.4+0x160>
    bool err = true;
 8000b4e:	2001      	movs	r0, #1
    if(isString && pos < buffLen) buff[pos++] = '\0';
 8000b50:	b12f      	cbz	r7, 8000b5e <cli_get_buff_arg.constprop.4+0x15a>
 8000b52:	9a02      	ldr	r2, [sp, #8]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	bf82      	ittt	hi
 8000b58:	2200      	movhi	r2, #0
 8000b5a:	54ea      	strbhi	r2, [r5, r3]
 8000b5c:	3301      	addhi	r3, #1
    *res = pos;
 8000b5e:	9a03      	ldr	r2, [sp, #12]
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e75f      	b.n	8000a24 <cli_get_buff_arg.constprop.4+0x20>
        if(pos >= buffLen - endString){
 8000b64:	429e      	cmp	r6, r3
 8000b66:	d924      	bls.n	8000bb2 <cli_get_buff_arg.constprop.4+0x1ae>
        if(base[i] == '\\'){
 8000b68:	5ca1      	ldrb	r1, [r4, r2]
 8000b6a:	295c      	cmp	r1, #92	; 0x5c
 8000b6c:	f102 0001 	add.w	r0, r2, #1
 8000b70:	d11d      	bne.n	8000bae <cli_get_buff_arg.constprop.4+0x1aa>
            switch(base[i + 1]){
 8000b72:	18a1      	adds	r1, r4, r2
 8000b74:	7849      	ldrb	r1, [r1, #1]
 8000b76:	295c      	cmp	r1, #92	; 0x5c
 8000b78:	d00f      	beq.n	8000b9a <cli_get_buff_arg.constprop.4+0x196>
 8000b7a:	d807      	bhi.n	8000b8c <cli_get_buff_arg.constprop.4+0x188>
 8000b7c:	2922      	cmp	r1, #34	; 0x22
 8000b7e:	d00c      	beq.n	8000b9a <cli_get_buff_arg.constprop.4+0x196>
 8000b80:	2930      	cmp	r1, #48	; 0x30
 8000b82:	d00e      	beq.n	8000ba2 <cli_get_buff_arg.constprop.4+0x19e>
                default   : buff[pos++] = '\\'; break;
 8000b84:	f805 c003 	strb.w	ip, [r5, r3]
        buff[pos++] = base[i];
 8000b88:	4610      	mov	r0, r2
 8000b8a:	e007      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
            switch(base[i + 1]){
 8000b8c:	296e      	cmp	r1, #110	; 0x6e
 8000b8e:	d00b      	beq.n	8000ba8 <cli_get_buff_arg.constprop.4+0x1a4>
 8000b90:	2972      	cmp	r1, #114	; 0x72
 8000b92:	d1f7      	bne.n	8000b84 <cli_get_buff_arg.constprop.4+0x180>
                case 'r'  : buff[pos++] = '\r'; i++; break;
 8000b94:	f805 8003 	strb.w	r8, [r5, r3]
 8000b98:	e000      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
                case '"'  : buff[pos++] = '"';  i++; break;
 8000b9a:	54e9      	strb	r1, [r5, r3]
    for(int i = 1; i < argLen - 1; i++){
 8000b9c:	1c42      	adds	r2, r0, #1
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	e7d3      	b.n	8000b4a <cli_get_buff_arg.constprop.4+0x146>
                case '0'  : buff[pos++] = '\0'; i++; break;
 8000ba2:	f805 9003 	strb.w	r9, [r5, r3]
 8000ba6:	e7f9      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8000ba8:	f805 e003 	strb.w	lr, [r5, r3]
 8000bac:	e7f6      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
        buff[pos++] = base[i];
 8000bae:	54e9      	strb	r1, [r5, r3]
 8000bb0:	e7ea      	b.n	8000b88 <cli_get_buff_arg.constprop.4+0x184>
            err = false;
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	e7cc      	b.n	8000b50 <cli_get_buff_arg.constprop.4+0x14c>
 8000bb6:	bf00      	nop
 8000bb8:	200004ac 	.word	0x200004ac
 8000bbc:	200004a4 	.word	0x200004a4

08000bc0 <cli_get_int_argument>:

/**********************************************
 * PUBLIC FUNCTIONS
 *********************************************/

int64_t cli_get_int_argument(size_t argNum, bool *res){
 8000bc0:	b513      	push	{r0, r1, r4, lr}
    int64_t ret = 0;
 8000bc2:	2200      	movs	r2, #0
int64_t cli_get_int_argument(size_t argNum, bool *res){
 8000bc4:	460c      	mov	r4, r1
    int64_t ret = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	a902      	add	r1, sp, #8
 8000bca:	e961 2302 	strd	r2, r3, [r1, #-8]!
    bool success = cli_get_int_arg(argNum, &ret, false);
 8000bce:	f7ff feb9 	bl	8000944 <cli_get_int_arg.constprop.5>
    
    if(res != NULL) *res = success;
 8000bd2:	b104      	cbz	r4, 8000bd6 <cli_get_int_argument+0x16>
 8000bd4:	7020      	strb	r0, [r4, #0]
    
    return ret;
}
 8000bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd10      	pop	{r4, pc}

08000bde <cli_get_uint_argument>:

uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8000bde:	b513      	push	{r0, r1, r4, lr}
    uint64_t ret = 0;
 8000be0:	2200      	movs	r2, #0
uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8000be2:	460c      	mov	r4, r1
    uint64_t ret = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	a902      	add	r1, sp, #8
 8000be8:	e961 2302 	strd	r2, r3, [r1, #-8]!
    bool success = cli_get_int_arg(argNum, (int64_t*)&ret, true);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f7ff fea9 	bl	8000944 <cli_get_int_arg.constprop.5>
    
    if(res != NULL) *res = success;
 8000bf2:	b104      	cbz	r4, 8000bf6 <cli_get_uint_argument+0x18>
 8000bf4:	7020      	strb	r0, [r4, #0]
    
    return ret;
}
 8000bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd10      	pop	{r4, pc}

08000bfe <cli_get_buffer_argument>:
    
    return ret;
}
#endif

size_t cli_get_buffer_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8000bfe:	b530      	push	{r4, r5, lr}
 8000c00:	b085      	sub	sp, #20
 8000c02:	461c      	mov	r4, r3
    size_t bRead = 0;
 8000c04:	ab04      	add	r3, sp, #16
 8000c06:	2500      	movs	r5, #0
 8000c08:	f843 5d04 	str.w	r5, [r3, #-4]!
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, false);
 8000c0c:	9500      	str	r5, [sp, #0]
 8000c0e:	f7ff fef9 	bl	8000a04 <cli_get_buff_arg.constprop.4>
    
    if(res != NULL) *res = ret;
 8000c12:	b104      	cbz	r4, 8000c16 <cli_get_buffer_argument+0x18>
 8000c14:	7020      	strb	r0, [r4, #0]
    
    return bRead;
}
 8000c16:	9803      	ldr	r0, [sp, #12]
 8000c18:	b005      	add	sp, #20
 8000c1a:	bd30      	pop	{r4, r5, pc}

08000c1c <cli_get_string_argument>:
    if(res != NULL) *res = ret;
    
    return bRead;
}

size_t cli_get_string_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8000c1c:	b530      	push	{r4, r5, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	461c      	mov	r4, r3
    size_t bRead = 0;
 8000c22:	ab04      	add	r3, sp, #16
 8000c24:	2500      	movs	r5, #0
 8000c26:	f843 5d04 	str.w	r5, [r3, #-4]!
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, true);
 8000c2a:	2501      	movs	r5, #1
 8000c2c:	9500      	str	r5, [sp, #0]
 8000c2e:	f7ff fee9 	bl	8000a04 <cli_get_buff_arg.constprop.4>
    
    if(res != NULL) *res = ret;
 8000c32:	b104      	cbz	r4, 8000c36 <cli_get_string_argument+0x1a>
 8000c34:	7020      	strb	r0, [r4, #0]
    
    return bRead;
}
 8000c36:	9803      	ldr	r0, [sp, #12]
 8000c38:	b005      	add	sp, #20
 8000c3a:	bd30      	pop	{r4, r5, pc}

08000c3c <cli_insert_char>:

cli_status_e cli_insert_char(char cliBuffer[], size_t maxLen, char const c){
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	4616      	mov	r6, r2
    if(maxLen == 0) return CLI_ERR;
 8000c40:	460a      	mov	r2, r1
 8000c42:	b1f1      	cbz	r1, 8000c82 <cli_insert_char+0x46>
    if(cliBuffer == NULL) return CLI_ERR;
 8000c44:	b1e8      	cbz	r0, 8000c82 <cli_insert_char+0x46>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment){
 8000c46:	4f10      	ldr	r7, [pc, #64]	; (8000c88 <cli_insert_char+0x4c>)
 8000c48:	7839      	ldrb	r1, [r7, #0]
 8000c4a:	b9c1      	cbnz	r1, 8000c7e <cli_insert_char+0x42>
        ERR_PRINTLN("Command waiting for treatment");
        return CLI_WAITING_TREATMENT;
    }
#endif //CLI_POLLING_EN

    if(c == '\r') return CLI_CONTINUE;
 8000c4c:	2e0d      	cmp	r6, #13
 8000c4e:	d00a      	beq.n	8000c66 <cli_insert_char+0x2a>
 8000c50:	4d0e      	ldr	r5, [pc, #56]	; (8000c8c <cli_insert_char+0x50>)

    if(c != '\n'){
 8000c52:	2e0a      	cmp	r6, #10
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	d008      	beq.n	8000c6a <cli_insert_char+0x2e>
        cliBuffer[((len++)%maxLen)] = c;
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	6029      	str	r1, [r5, #0]
 8000c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c60:	fb02 3311 	mls	r3, r2, r1, r3
 8000c64:	54c6      	strb	r6, [r0, r3]
    if(c == '\r') return CLI_CONTINUE;
 8000c66:	2001      	movs	r0, #1
 8000c68:	e005      	b.n	8000c76 <cli_insert_char+0x3a>
        return CLI_CONTINUE;
    }
    
    if(len >= maxLen){
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d804      	bhi.n	8000c78 <cli_insert_char+0x3c>
        len = 0;
 8000c6e:	6029      	str	r1, [r5, #0]
        memset(cliBuffer, 0, maxLen);
 8000c70:	f008 f8d8 	bl	8008e24 <memset>
        ERR_PRINT("COMMAND TOO LARGE! Enter new command = ");
        return CLI_TOO_BIG;
 8000c74:	2003      	movs	r0, #3
    return CLI_COMMAND_RCV;
#else
    cli_cmd_waiting_treatment = true;
    return CLI_WAITING_TREATMENT;
#endif //CLI_POLLING_EN
}
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cliBuffer[len] = '\0';
 8000c78:	54c1      	strb	r1, [r0, r3]
    cli_cmd_waiting_treatment = true;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	703b      	strb	r3, [r7, #0]
        return CLI_WAITING_TREATMENT;
 8000c7e:	2004      	movs	r0, #4
 8000c80:	e7f9      	b.n	8000c76 <cli_insert_char+0x3a>
    if(maxLen == 0) return CLI_ERR;
 8000c82:	2006      	movs	r0, #6
 8000c84:	e7f7      	b.n	8000c76 <cli_insert_char+0x3a>
 8000c86:	bf00      	nop
 8000c88:	200004a8 	.word	0x200004a8
 8000c8c:	200004b0 	.word	0x200004b0

08000c90 <cli_printf>:

__attribute__((weak)) void cli_printf(char const * const str, ...){
 8000c90:	b40f      	push	{r0, r1, r2, r3}
 8000c92:	b507      	push	{r0, r1, r2, lr}
 8000c94:	a904      	add	r1, sp, #16
 8000c96:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    va_start(args, str);
 8000c9a:	9101      	str	r1, [sp, #4]
    vprintf(str, args);
 8000c9c:	f008 fcfe 	bl	800969c <viprintf>
    va_end(args);

}
 8000ca0:	b003      	add	sp, #12
 8000ca2:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
	...

08000cac <cli_treat_command>:
void cli_treat_command(char cliBuffer[], size_t maxLen){
 8000cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb0:	b08d      	sub	sp, #52	; 0x34
 8000cb2:	4683      	mov	fp, r0
    if(maxLen == 0) return;
 8000cb4:	9102      	str	r1, [sp, #8]
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	f000 824c 	beq.w	8001154 <cli_treat_command+0x4a8>
    if(cliBuffer == NULL) return;
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f000 8249 	beq.w	8001154 <cli_treat_command+0x4a8>
    if(cli_cmd_waiting_treatment == false) return;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	; (8000f44 <cli_treat_command+0x298>)
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f000 8244 	beq.w	8001154 <cli_treat_command+0x4a8>
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 8000ccc:	4d9e      	ldr	r5, [pc, #632]	; (8000f48 <cli_treat_command+0x29c>)
    cli_cmd_waiting_treatment = false; 
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 8000cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd4:	ac06      	add	r4, sp, #24
 8000cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cdc:	e884 0003 	stmia.w	r4, {r0, r1}
    char* tkn = strtok((char*)cliBuffer, " ");
 8000ce0:	499a      	ldr	r1, [pc, #616]	; (8000f4c <cli_treat_command+0x2a0>)
 8000ce2:	4658      	mov	r0, fp
 8000ce4:	f008 fbf4 	bl	80094d0 <strtok>
    cliElement_t* currentMenu = &init;
 8000ce8:	ad06      	add	r5, sp, #24
    char* tkn = strtok((char*)cliBuffer, " ");
 8000cea:	4680      	mov	r8, r0
    while(tkn != NULL){
 8000cec:	f1b8 0f00 	cmp.w	r8, #0
 8000cf0:	d003      	beq.n	8000cfa <cli_treat_command+0x4e>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000cf2:	686b      	ldr	r3, [r5, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 809c 	bne.w	8000e32 <cli_treat_command+0x186>
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
 8000cfa:	692a      	ldr	r2, [r5, #16]
 8000cfc:	6829      	ldr	r1, [r5, #0]
 8000cfe:	4894      	ldr	r0, [pc, #592]	; (8000f50 <cli_treat_command+0x2a4>)
 8000d00:	f7ff ffc6 	bl	8000c90 <cli_printf>
    if(e->subMenuRef == NULL){
 8000d04:	686b      	ldr	r3, [r5, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 81aa 	beq.w	8001060 <cli_treat_command+0x3b4>
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000d0c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8000f4c <cli_treat_command+0x2a0>
    if(e->subMenuRef == NULL){
 8000d10:	f04f 0800 	mov.w	r8, #0
    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 8000d14:	fa5f f388 	uxtb.w	r3, r8
 8000d18:	2118      	movs	r1, #24
 8000d1a:	686e      	ldr	r6, [r5, #4]
 8000d1c:	4359      	muls	r1, r3
 8000d1e:	1877      	adds	r7, r6, r1
 8000d20:	4638      	mov	r0, r7
 8000d22:	f7ff fc51 	bl	80005c8 <cli_is_terminator>
 8000d26:	4604      	mov	r4, r0
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f040 81d9 	bne.w	80010e0 <cli_treat_command+0x434>
    if(e == NULL) return;
 8000d2e:	b36f      	cbz	r7, 8000d8c <cli_treat_command+0xe0>
    return (e->subMenuRef != NULL);
 8000d30:	687a      	ldr	r2, [r7, #4]
    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000d32:	5876      	ldr	r6, [r6, r1]
 8000d34:	4b87      	ldr	r3, [pc, #540]	; (8000f54 <cli_treat_command+0x2a8>)
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000d36:	4888      	ldr	r0, [pc, #544]	; (8000f58 <cli_treat_command+0x2ac>)
    return (e->subMenuRef != NULL);
 8000d38:	f112 0a00 	adds.w	sl, r2, #0
 8000d3c:	bf18      	it	ne
 8000d3e:	f04f 0a01 	movne.w	sl, #1
    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	bf08      	it	eq
 8000d46:	461e      	moveq	r6, r3
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000d48:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <cli_treat_command+0x2b0>)
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	bf08      	it	eq
 8000d4e:	464b      	moveq	r3, r9
 8000d50:	461a      	mov	r2, r3
 8000d52:	4631      	mov	r1, r6
 8000d54:	f7ff ff9c 	bl	8000c90 <cli_printf>
    size_t len = (size_t)(strlen(name) + (size_t)(3 * is_sub_menu) + 1); //name length with '... '
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f7ff fa43 	bl	80001e4 <strlen>
 8000d5e:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8000d62:	eb00 030a 	add.w	r3, r0, sl
    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 8000d66:	f103 0617 	add.w	r6, r3, #23
 8000d6a:	2016      	movs	r0, #22
    spaces -= len;
 8000d6c:	43db      	mvns	r3, r3
    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 8000d6e:	fbb6 f6f0 	udiv	r6, r6, r0
    spaces -= len;
 8000d72:	fb00 3606 	mla	r6, r0, r6, r3
    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	f040 81e7 	bne.w	800114a <cli_treat_command+0x49e>
    MENU_PRINTLN("- %s", ( (e->desc == NULL) ? "NULL_DESC" : e->desc) );
 8000d7c:	6939      	ldr	r1, [r7, #16]
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <cli_treat_command+0x2b4>)
 8000d80:	4878      	ldr	r0, [pc, #480]	; (8000f64 <cli_treat_command+0x2b8>)
 8000d82:	2900      	cmp	r1, #0
 8000d84:	bf08      	it	eq
 8000d86:	4619      	moveq	r1, r3
 8000d88:	f7ff ff82 	bl	8000c90 <cli_printf>
 8000d8c:	f108 0801 	add.w	r8, r8, #1
 8000d90:	e7c0      	b.n	8000d14 <cli_treat_command+0x68>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000d92:	59ce      	ldr	r6, [r1, r7]
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d033      	beq.n	8000e00 <cli_treat_command+0x154>
    size_t const lenTkn = strlen(tkn);
 8000d98:	4640      	mov	r0, r8
 8000d9a:	f7ff fa23 	bl	80001e4 <strlen>
 8000d9e:	4682      	mov	sl, r0
    size_t const lenStr = strlen(str);
 8000da0:	4630      	mov	r0, r6
 8000da2:	f7ff fa1f 	bl	80001e4 <strlen>
    if(lenTkn == 0 || lenStr == 0) return false;
 8000da6:	f1ba 0f00 	cmp.w	sl, #0
 8000daa:	d029      	beq.n	8000e00 <cli_treat_command+0x154>
 8000dac:	b340      	cbz	r0, 8000e00 <cli_treat_command+0x154>
    if(lenTkn > lenStr) return false;
 8000dae:	4582      	cmp	sl, r0
 8000db0:	d826      	bhi.n	8000e00 <cli_treat_command+0x154>
 8000db2:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db6:	3e01      	subs	r6, #1
    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000db8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8000dbc:	b923      	cbnz	r3, 8000dc8 <cli_treat_command+0x11c>
        if(ret != NULL){
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d19b      	bne.n	8000cfa <cli_treat_command+0x4e>
        ret = (cliElement_t*) &currentMenu->subMenuRef[i];
 8000dc2:	686c      	ldr	r4, [r5, #4]
 8000dc4:	443c      	add	r4, r7
 8000dc6:	e01b      	b.n	8000e00 <cli_treat_command+0x154>
 8000dc8:	9300      	str	r3, [sp, #0]
        if(tolower(tkn[i]) != tolower(str[i])) return false;
 8000dca:	f007 fff1 	bl	8008db0 <__locale_ctype_ptr>
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	4418      	add	r0, r3
 8000dd2:	7842      	ldrb	r2, [r0, #1]
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	bf08      	it	eq
 8000ddc:	3320      	addeq	r3, #32
 8000dde:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	9200      	str	r2, [sp, #0]
 8000de6:	f007 ffe3 	bl	8008db0 <__locale_ctype_ptr>
 8000dea:	9a00      	ldr	r2, [sp, #0]
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	4410      	add	r0, r2
 8000df0:	7841      	ldrb	r1, [r0, #1]
 8000df2:	f001 0103 	and.w	r1, r1, #3
 8000df6:	2901      	cmp	r1, #1
 8000df8:	bf08      	it	eq
 8000dfa:	3220      	addeq	r2, #32
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d0db      	beq.n	8000db8 <cli_treat_command+0x10c>
 8000e00:	f109 0901 	add.w	r9, r9, #1
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000e04:	2318      	movs	r3, #24
 8000e06:	6869      	ldr	r1, [r5, #4]
 8000e08:	fa5f f789 	uxtb.w	r7, r9
 8000e0c:	435f      	muls	r7, r3
 8000e0e:	19c8      	adds	r0, r1, r7
 8000e10:	f7ff fbda 	bl	80005c8 <cli_is_terminator>
 8000e14:	4606      	mov	r6, r0
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d0bb      	beq.n	8000d92 <cli_treat_command+0xe6>
        if(e == NULL){
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	f43f af6d 	beq.w	8000cfa <cli_treat_command+0x4e>
        if(cli_is_sub_menu(e)){
 8000e20:	6865      	ldr	r5, [r4, #4]
 8000e22:	b155      	cbz	r5, 8000e3a <cli_treat_command+0x18e>
        tkn = strtok(NULL, " ");
 8000e24:	4949      	ldr	r1, [pc, #292]	; (8000f4c <cli_treat_command+0x2a0>)
 8000e26:	2000      	movs	r0, #0
 8000e28:	f008 fb52 	bl	80094d0 <strtok>
 8000e2c:	4625      	mov	r5, r4
 8000e2e:	4680      	mov	r8, r0
 8000e30:	e75c      	b.n	8000cec <cli_treat_command+0x40>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000e32:	f04f 0900 	mov.w	r9, #0
    cliElement_t* ret = NULL;
 8000e36:	464c      	mov	r4, r9
 8000e38:	e7e4      	b.n	8000e04 <cli_treat_command+0x158>
        else if(cli_is_action(e)){
 8000e3a:	68a3      	ldr	r3, [r4, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 810f 	beq.w	8001060 <cli_treat_command+0x3b4>
    if(e->args == NULL) {
 8000e42:	68e0      	ldr	r0, [r4, #12]
 8000e44:	2800      	cmp	r0, #0
 8000e46:	f000 810b 	beq.w	8001060 <cli_treat_command+0x3b4>
        bool elipsisPresent = false;
 8000e4a:	a90c      	add	r1, sp, #48	; 0x30
 8000e4c:	f801 5d1a 	strb.w	r5, [r1, #-26]!
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000e50:	f7ff fd48 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
        if(len == -1) return;
 8000e54:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000e58:	bf08      	it	eq
 8000e5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000e5e:	4680      	mov	r8, r0
 8000e60:	4689      	mov	r9, r1
        if(len == -1) return;
 8000e62:	f000 80fd 	beq.w	8001060 <cli_treat_command+0x3b4>
        argsStr = strtok(NULL, "\0");
 8000e66:	4628      	mov	r0, r5
 8000e68:	493f      	ldr	r1, [pc, #252]	; (8000f68 <cli_treat_command+0x2bc>)
 8000e6a:	4d40      	ldr	r5, [pc, #256]	; (8000f6c <cli_treat_command+0x2c0>)
 8000e6c:	f008 fb30 	bl	80094d0 <strtok>
        if(argsStr == NULL) argsStr = "";
 8000e70:	b140      	cbz	r0, 8000e84 <cli_treat_command+0x1d8>
        argsStr = strtok(NULL, "\0");
 8000e72:	6028      	str	r0, [r5, #0]
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	b91b      	cbnz	r3, 8000e80 <cli_treat_command+0x1d4>
 8000e78:	ea58 0309 	orrs.w	r3, r8, r9
 8000e7c:	f040 8083 	bne.w	8000f86 <cli_treat_command+0x2da>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000e80:	4f3b      	ldr	r7, [pc, #236]	; (8000f70 <cli_treat_command+0x2c4>)
 8000e82:	e01b      	b.n	8000ebc <cli_treat_command+0x210>
        if(argsStr == NULL) argsStr = "";
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <cli_treat_command+0x2c8>)
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	e7f4      	b.n	8000e74 <cli_treat_command+0x1c8>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000e8a:	f1aa 0322 	sub.w	r3, sl, #34	; 0x22
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b17      	cmp	r3, #23
 8000e92:	d803      	bhi.n	8000e9c <cli_treat_command+0x1f0>
 8000e94:	fa27 f303 	lsr.w	r3, r7, r3
 8000e98:	07db      	lsls	r3, r3, #31
 8000e9a:	d419      	bmi.n	8000ed0 <cli_treat_command+0x224>
 8000e9c:	f007 ff88 	bl	8008db0 <__locale_ctype_ptr>
 8000ea0:	4450      	add	r0, sl
 8000ea2:	7843      	ldrb	r3, [r0, #1]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	bf08      	it	eq
 8000eac:	f10a 0a20 	addeq.w	sl, sl, #32
 8000eb0:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000eb4:	dc36      	bgt.n	8000f24 <cli_treat_command+0x278>
            argsStr++;
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	602b      	str	r3, [r5, #0]
        while(argsStr != NULL && argsStr[0] != '\0') {
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	b13b      	cbz	r3, 8000ed0 <cli_treat_command+0x224>
 8000ec0:	f893 a000 	ldrb.w	sl, [r3]
 8000ec4:	f1ba 0f00 	cmp.w	sl, #0
 8000ec8:	d002      	beq.n	8000ed0 <cli_treat_command+0x224>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000eca:	f1ba 0f7b 	cmp.w	sl, #123	; 0x7b
 8000ece:	d1dc      	bne.n	8000e8a <cli_treat_command+0x1de>
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8000ed0:	f8d5 a000 	ldr.w	sl, [r5]
 8000ed4:	f1ba 0f00 	cmp.w	sl, #0
 8000ed8:	d14e      	bne.n	8000f78 <cli_treat_command+0x2cc>
    if(e->args == NULL) {
 8000eda:	68e0      	ldr	r0, [r4, #12]
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d052      	beq.n	8000f86 <cli_treat_command+0x2da>
    bool elipsisPresent = 0;
 8000ee0:	a90c      	add	r1, sp, #48	; 0x30
 8000ee2:	2700      	movs	r7, #0
 8000ee4:	f801 7d19 	strb.w	r7, [r1, #-25]!
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000ee8:	f7ff fcfc 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(len == -1){
 8000eec:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000ef0:	bf08      	it	eq
 8000ef2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000ef6:	4680      	mov	r8, r0
 8000ef8:	4689      	mov	r9, r1
    if(len == -1){
 8000efa:	d044      	beq.n	8000f86 <cli_treat_command+0x2da>
    for(i = 0; i < len; i++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	4547      	cmp	r7, r8
 8000f00:	eb73 0309 	sbcs.w	r3, r3, r9
 8000f04:	db6c      	blt.n	8000fe0 <cli_treat_command+0x334>
    if(elipsisPresent){
 8000f06:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 809e 	bne.w	800104c <cli_treat_command+0x3a0>
        if(argTkn != NULL && argTkn[0] != '\0'){
 8000f10:	f1ba 0f00 	cmp.w	sl, #0
 8000f14:	f000 80a1 	beq.w	800105a <cli_treat_command+0x3ae>
 8000f18:	f89a 3000 	ldrb.w	r3, [sl]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 809c 	beq.w	800105a <cli_treat_command+0x3ae>
 8000f22:	e030      	b.n	8000f86 <cli_treat_command+0x2da>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	f893 a000 	ldrb.w	sl, [r3]
 8000f2a:	f007 ff41 	bl	8008db0 <__locale_ctype_ptr>
 8000f2e:	4450      	add	r0, sl
 8000f30:	4653      	mov	r3, sl
 8000f32:	7842      	ldrb	r2, [r0, #1]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	2a01      	cmp	r2, #1
 8000f3a:	bf08      	it	eq
 8000f3c:	3320      	addeq	r3, #32
 8000f3e:	2b66      	cmp	r3, #102	; 0x66
 8000f40:	dcb9      	bgt.n	8000eb6 <cli_treat_command+0x20a>
 8000f42:	e7c5      	b.n	8000ed0 <cli_treat_command+0x224>
 8000f44:	200004a8 	.word	0x200004a8
 8000f48:	0800a2e0 	.word	0x0800a2e0
 8000f4c:	0800b6b6 	.word	0x0800b6b6
 8000f50:	0800a368 	.word	0x0800a368
 8000f54:	0800a34f 	.word	0x0800a34f
 8000f58:	0800a4a4 	.word	0x0800a4a4
 8000f5c:	0800a363 	.word	0x0800a363
 8000f60:	0800a359 	.word	0x0800a359
 8000f64:	0800a372 	.word	0x0800a372
 8000f68:	0800a2f8 	.word	0x0800a2f8
 8000f6c:	200004a4 	.word	0x200004a4
 8000f70:	00ffc801 	.word	0x00ffc801
 8000f74:	0800aad6 	.word	0x0800aad6
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8000f78:	f89a 3000 	ldrb.w	r3, [sl]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ac      	bne.n	8000eda <cli_treat_command+0x22e>
 8000f80:	ea58 0309 	orrs.w	r3, r8, r9
 8000f84:	d0a9      	beq.n	8000eda <cli_treat_command+0x22e>
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8000f86:	4875      	ldr	r0, [pc, #468]	; (800115c <cli_treat_command+0x4b0>)
    argsStr = NULL;
 8000f88:	2700      	movs	r7, #0
 8000f8a:	602f      	str	r7, [r5, #0]
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8000f8c:	f7ff fe80 	bl	8000c90 <cli_printf>
    MENU_PRINTLN("");
 8000f90:	4873      	ldr	r0, [pc, #460]	; (8001160 <cli_treat_command+0x4b4>)
 8000f92:	f7ff fe7d 	bl	8000c90 <cli_printf>
    if(e->args == NULL) {
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d061      	beq.n	8001060 <cli_treat_command+0x3b4>
    MENU_PRINTLN("Action '%s' - %s - usage :", ( (e->name == NULL) ? "NULL_NAME" : e->name), ( (e->desc == NULL) ? "NULL_DESC" : e->desc ) );
 8000f9c:	6922      	ldr	r2, [r4, #16]
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <cli_treat_command+0x4b8>)
 8000fa0:	6821      	ldr	r1, [r4, #0]
 8000fa2:	4871      	ldr	r0, [pc, #452]	; (8001168 <cli_treat_command+0x4bc>)
 8000fa4:	42ba      	cmp	r2, r7
 8000fa6:	bf08      	it	eq
 8000fa8:	461a      	moveq	r2, r3
 8000faa:	4b70      	ldr	r3, [pc, #448]	; (800116c <cli_treat_command+0x4c0>)
 8000fac:	42b9      	cmp	r1, r7
 8000fae:	bf08      	it	eq
 8000fb0:	4619      	moveq	r1, r3
 8000fb2:	f7ff fe6d 	bl	8000c90 <cli_printf>
    bool elipsisPresent = 0;
 8000fb6:	a90c      	add	r1, sp, #48	; 0x30
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000fb8:	68e0      	ldr	r0, [r4, #12]
    bool elipsisPresent = 0;
 8000fba:	f801 7d19 	strb.w	r7, [r1, #-25]!
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000fbe:	f7ff fc91 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(len == -1){
 8000fc2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000fc6:	bf08      	it	eq
 8000fc8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000fcc:	4680      	mov	r8, r0
 8000fce:	4689      	mov	r9, r1
    if(len == -1){
 8000fd0:	d046      	beq.n	8001060 <cli_treat_command+0x3b4>
    if(len == 0){
 8000fd2:	ea58 0309 	orrs.w	r3, r8, r9
 8000fd6:	d159      	bne.n	800108c <cli_treat_command+0x3e0>
        MENU_PRINTLN("   No arguments");
 8000fd8:	4865      	ldr	r0, [pc, #404]	; (8001170 <cli_treat_command+0x4c4>)
    MENU_PRINTLN("");
 8000fda:	f7ff fe59 	bl	8000c90 <cli_printf>
 8000fde:	e03f      	b.n	8001060 <cli_treat_command+0x3b4>
        if(argTkn == NULL) {
 8000fe0:	f1ba 0f00 	cmp.w	sl, #0
 8000fe4:	d0cf      	beq.n	8000f86 <cli_treat_command+0x2da>
        if(argTkn[0] == '\0'){
 8000fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0cb      	beq.n	8000f86 <cli_treat_command+0x2da>
        switch(e->args[i]){
 8000fee:	68e3      	ldr	r3, [r4, #12]
 8000ff0:	5ddb      	ldrb	r3, [r3, r7]
 8000ff2:	2b69      	cmp	r3, #105	; 0x69
 8000ff4:	d00e      	beq.n	8001014 <cli_treat_command+0x368>
 8000ff6:	d807      	bhi.n	8001008 <cli_treat_command+0x35c>
 8000ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8000ffa:	d017      	beq.n	800102c <cli_treat_command+0x380>
 8000ffc:	2b62      	cmp	r3, #98	; 0x62
 8000ffe:	d1c2      	bne.n	8000f86 <cli_treat_command+0x2da>
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 8001000:	4650      	mov	r0, sl
 8001002:	f7ff fbe9 	bl	80007d8 <cli_verify_buffer.isra.3>
 8001006:	e009      	b.n	800101c <cli_treat_command+0x370>
        switch(e->args[i]){
 8001008:	2b73      	cmp	r3, #115	; 0x73
 800100a:	d0f9      	beq.n	8001000 <cli_treat_command+0x354>
 800100c:	2b75      	cmp	r3, #117	; 0x75
 800100e:	d1ba      	bne.n	8000f86 <cli_treat_command+0x2da>
                if(cli_verify_int(argTkn, true, true)) break;
 8001010:	2101      	movs	r1, #1
 8001012:	e000      	b.n	8001016 <cli_treat_command+0x36a>
                if(cli_verify_int(argTkn, false, true)) break;
 8001014:	2100      	movs	r1, #0
 8001016:	4650      	mov	r0, sl
 8001018:	f7ff fb5c 	bl	80006d4 <cli_verify_int.isra.2>
 800101c:	2800      	cmp	r0, #0
 800101e:	d0b2      	beq.n	8000f86 <cli_treat_command+0x2da>
        argTkn = cli_go_to_next_argument(argTkn);
 8001020:	4650      	mov	r0, sl
 8001022:	f7ff fb0f 	bl	8000644 <cli_go_to_next_argument>
    for(i = 0; i < len; i++){
 8001026:	3701      	adds	r7, #1
        argTkn = cli_go_to_next_argument(argTkn);
 8001028:	4682      	mov	sl, r0
 800102a:	e767      	b.n	8000efc <cli_treat_command+0x250>
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 800102c:	2100      	movs	r1, #0
 800102e:	4650      	mov	r0, sl
 8001030:	f7ff fb50 	bl	80006d4 <cli_verify_int.isra.2>
 8001034:	2800      	cmp	r0, #0
 8001036:	d1f3      	bne.n	8001020 <cli_treat_command+0x374>
 8001038:	e7e2      	b.n	8001000 <cli_treat_command+0x354>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 800103a:	2100      	movs	r1, #0
 800103c:	4650      	mov	r0, sl
 800103e:	f7ff fb49 	bl	80006d4 <cli_verify_int.isra.2>
 8001042:	b1b8      	cbz	r0, 8001074 <cli_treat_command+0x3c8>
            argTkn = cli_go_to_next_argument(argTkn);
 8001044:	4650      	mov	r0, sl
 8001046:	f7ff fafd 	bl	8000644 <cli_go_to_next_argument>
 800104a:	4682      	mov	sl, r0
        while(argTkn != NULL && argTkn[0] != '\0'){
 800104c:	f1ba 0f00 	cmp.w	sl, #0
 8001050:	d003      	beq.n	800105a <cli_treat_command+0x3ae>
 8001052:	f89a 3000 	ldrb.w	r3, [sl]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1ef      	bne.n	800103a <cli_treat_command+0x38e>
        if(e->action == NULL) { 
 800105a:	68a3      	ldr	r3, [r4, #8]
 800105c:	b983      	cbnz	r3, 8001080 <cli_treat_command+0x3d4>
        argsStr = NULL;
 800105e:	602b      	str	r3, [r5, #0]
    len = 0;
 8001060:	4b44      	ldr	r3, [pc, #272]	; (8001174 <cli_treat_command+0x4c8>)
    memset(cliBuffer, 0, maxLen);
 8001062:	9a02      	ldr	r2, [sp, #8]
    len = 0;
 8001064:	2100      	movs	r1, #0
    memset(cliBuffer, 0, maxLen);
 8001066:	4658      	mov	r0, fp
    len = 0;
 8001068:	6019      	str	r1, [r3, #0]
}
 800106a:	b00d      	add	sp, #52	; 0x34
 800106c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(cliBuffer, 0, maxLen);
 8001070:	f007 bed8 	b.w	8008e24 <memset>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 8001074:	4650      	mov	r0, sl
 8001076:	f7ff fbaf 	bl	80007d8 <cli_verify_buffer.isra.3>
 800107a:	2800      	cmp	r0, #0
 800107c:	d1e2      	bne.n	8001044 <cli_treat_command+0x398>
 800107e:	e782      	b.n	8000f86 <cli_treat_command+0x2da>
        currEl = e;
 8001080:	4e3d      	ldr	r6, [pc, #244]	; (8001178 <cli_treat_command+0x4cc>)
 8001082:	6034      	str	r4, [r6, #0]
        e->action();
 8001084:	4798      	blx	r3
        currEl = NULL;
 8001086:	2300      	movs	r3, #0
 8001088:	6033      	str	r3, [r6, #0]
 800108a:	e7e8      	b.n	800105e <cli_treat_command+0x3b2>
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 800108c:	6963      	ldr	r3, [r4, #20]
 800108e:	b34b      	cbz	r3, 80010e4 <cli_treat_command+0x438>
 8001090:	681d      	ldr	r5, [r3, #0]
 8001092:	fab5 f585 	clz	r5, r5
 8001096:	096d      	lsrs	r5, r5, #5
 8001098:	2200      	movs	r2, #0
 800109a:	2300      	movs	r3, #0
 800109c:	e9cd 2300 	strd	r2, r3, [sp]
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 80010a0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8001198 <cli_treat_command+0x4ec>
    for(i = 0; i < len; i++){
 80010a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80010a8:	4542      	cmp	r2, r8
 80010aa:	eb73 0309 	sbcs.w	r3, r3, r9
 80010ae:	db1b      	blt.n	80010e8 <cli_treat_command+0x43c>
 80010b0:	4646      	mov	r6, r8
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	f179 0300 	sbcs.w	r3, r9, #0
    if(elipsisPresent){
 80010b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80010bc:	bfb8      	it	lt
 80010be:	2600      	movlt	r6, #0
 80010c0:	b173      	cbz	r3, 80010e0 <cli_treat_command+0x434>
        MENU_PRINTF("   < various > - ");
 80010c2:	482e      	ldr	r0, [pc, #184]	; (800117c <cli_treat_command+0x4d0>)
 80010c4:	f7ff fde4 	bl	8000c90 <cli_printf>
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 80010c8:	b93d      	cbnz	r5, 80010da <cli_treat_command+0x42e>
 80010ca:	6963      	ldr	r3, [r4, #20]
 80010cc:	b12b      	cbz	r3, 80010da <cli_treat_command+0x42e>
 80010ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
        if(!argsDescEnded) MENU_PRINTLN("%s", e->argsDesc[i]);
 80010d2:	b111      	cbz	r1, 80010da <cli_treat_command+0x42e>
 80010d4:	482a      	ldr	r0, [pc, #168]	; (8001180 <cli_treat_command+0x4d4>)
 80010d6:	f7ff fddb 	bl	8000c90 <cli_printf>
        MENU_PRINTLN("");
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <cli_treat_command+0x4b4>)
 80010dc:	f7ff fdd8 	bl	8000c90 <cli_printf>
    MENU_PRINTLN("");
 80010e0:	481f      	ldr	r0, [pc, #124]	; (8001160 <cli_treat_command+0x4b4>)
 80010e2:	e77a      	b.n	8000fda <cli_treat_command+0x32e>
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 80010e4:	2501      	movs	r5, #1
 80010e6:	e7d7      	b.n	8001098 <cli_treat_command+0x3ec>
        switch(e->args[i]){
 80010e8:	9f00      	ldr	r7, [sp, #0]
 80010ea:	68e3      	ldr	r3, [r4, #12]
 80010ec:	5ddb      	ldrb	r3, [r3, r7]
 80010ee:	2b69      	cmp	r3, #105	; 0x69
 80010f0:	d01f      	beq.n	8001132 <cli_treat_command+0x486>
 80010f2:	d805      	bhi.n	8001100 <cli_treat_command+0x454>
 80010f4:	2b2a      	cmp	r3, #42	; 0x2a
 80010f6:	d022      	beq.n	800113e <cli_treat_command+0x492>
 80010f8:	2b62      	cmp	r3, #98	; 0x62
 80010fa:	d01e      	beq.n	800113a <cli_treat_command+0x48e>
            default  : MENU_PRINTF("   < unknown > - "); break;
 80010fc:	4821      	ldr	r0, [pc, #132]	; (8001184 <cli_treat_command+0x4d8>)
 80010fe:	e004      	b.n	800110a <cli_treat_command+0x45e>
        switch(e->args[i]){
 8001100:	2b73      	cmp	r3, #115	; 0x73
 8001102:	d018      	beq.n	8001136 <cli_treat_command+0x48a>
 8001104:	2b75      	cmp	r3, #117	; 0x75
 8001106:	d1f9      	bne.n	80010fc <cli_treat_command+0x450>
            case 'u' : MENU_PRINTF("   < uint64  > - "); break;
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <cli_treat_command+0x4dc>)
            default  : MENU_PRINTF("   < unknown > - "); break;
 800110a:	f7ff fdc1 	bl	8000c90 <cli_printf>
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 800110e:	b925      	cbnz	r5, 800111a <cli_treat_command+0x46e>
 8001110:	6963      	ldr	r3, [r4, #20]
 8001112:	b113      	cbz	r3, 800111a <cli_treat_command+0x46e>
 8001114:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
        if(argsDescEnded){
 8001118:	b999      	cbnz	r1, 8001142 <cli_treat_command+0x496>
            MENU_PRINTLN("");
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <cli_treat_command+0x4b4>)
 800111c:	f7ff fdb8 	bl	8000c90 <cli_printf>
 8001120:	4635      	mov	r5, r6
 8001122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001126:	3201      	adds	r2, #1
 8001128:	f143 0300 	adc.w	r3, r3, #0
 800112c:	e9cd 2300 	strd	r2, r3, [sp]
 8001130:	e7b8      	b.n	80010a4 <cli_treat_command+0x3f8>
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 8001132:	4650      	mov	r0, sl
 8001134:	e7e9      	b.n	800110a <cli_treat_command+0x45e>
            case 's' : MENU_PRINTF("   < string  > - "); break;
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <cli_treat_command+0x4e0>)
 8001138:	e7e7      	b.n	800110a <cli_treat_command+0x45e>
            case 'b' : MENU_PRINTF("   < buffer  > - "); break;
 800113a:	4815      	ldr	r0, [pc, #84]	; (8001190 <cli_treat_command+0x4e4>)
 800113c:	e7e5      	b.n	800110a <cli_treat_command+0x45e>
            case '*' : MENU_PRINTF("   < any     > - "); break;
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <cli_treat_command+0x4e8>)
 8001140:	e7e3      	b.n	800110a <cli_treat_command+0x45e>
        MENU_PRINTLN("%s", e->argsDesc[i]);   
 8001142:	480f      	ldr	r0, [pc, #60]	; (8001180 <cli_treat_command+0x4d4>)
 8001144:	f7ff fda4 	bl	8000c90 <cli_printf>
 8001148:	e7eb      	b.n	8001122 <cli_treat_command+0x476>
    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 800114a:	4648      	mov	r0, r9
 800114c:	f7ff fda0 	bl	8000c90 <cli_printf>
 8001150:	3401      	adds	r4, #1
 8001152:	e610      	b.n	8000d76 <cli_treat_command+0xca>
}
 8001154:	b00d      	add	sp, #52	; 0x34
 8001156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115a:	bf00      	nop
 800115c:	0800a379 	.word	0x0800a379
 8001160:	0800aad4 	.word	0x0800aad4
 8001164:	0800a359 	.word	0x0800a359
 8001168:	0800a3f7 	.word	0x0800a3f7
 800116c:	0800a34f 	.word	0x0800a34f
 8001170:	0800a414 	.word	0x0800a414
 8001174:	200004b0 	.word	0x200004b0
 8001178:	200004ac 	.word	0x200004ac
 800117c:	0800a492 	.word	0x0800a492
 8001180:	0800aecc 	.word	0x0800aecc
 8001184:	0800a480 	.word	0x0800a480
 8001188:	0800a426 	.word	0x0800a426
 800118c:	0800a44a 	.word	0x0800a44a
 8001190:	0800a45c 	.word	0x0800a45c
 8001194:	0800a46e 	.word	0x0800a46e
 8001198:	0800a438 	.word	0x0800a438

0800119c <cli_rcv_char_cb_irq>:
 * CLI Receive char (IRQ)
 *
 * @brief This function receives a character and puts in the cli buffer
 *
 **********************************************************************/
void cli_rcv_char_cb_irq(){
 800119c:	b510      	push	{r4, lr}
	cli_insert_char(cliBuffer, sizeof(cliBuffer), cli_char);
 800119e:	4c06      	ldr	r4, [pc, #24]	; (80011b8 <cli_rcv_char_cb_irq+0x1c>)
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <cli_rcv_char_cb_irq+0x20>)
 80011a2:	7822      	ldrb	r2, [r4, #0]
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	f7ff fd49 	bl	8000c3c <cli_insert_char>
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 80011aa:	4621      	mov	r1, r4
 80011ac:	2201      	movs	r2, #1
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <cli_rcv_char_cb_irq+0x24>)
}
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 80011b4:	f007 bb72 	b.w	800889c <HAL_UART_Receive_IT>
 80011b8:	20000534 	.word	0x20000534
 80011bc:	200004b4 	.word	0x200004b4
 80011c0:	20014ebc 	.word	0x20014ebc

080011c4 <cli_init>:
 * CLI INIT
 *
 * @brief This function initializes the CLI
 *
 **********************************************************************/
void cli_init(){
 80011c4:	b510      	push	{r4, lr}
	memset(cliBuffer, 0, sizeof(cliBuffer));
	HAL_UART_Abort(&USART_CLI);
 80011c6:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <cli_init+0x2c>)
	memset(cliBuffer, 0, sizeof(cliBuffer));
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <cli_init+0x30>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	2100      	movs	r1, #0
 80011ce:	f007 fe29 	bl	8008e24 <memset>
	HAL_UART_Abort(&USART_CLI);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f007 fb89 	bl	80088ea <HAL_UART_Abort>
	HAL_UART_AbortReceive_IT(&USART_CLI);
 80011d8:	4620      	mov	r0, r4
 80011da:	f007 fd55 	bl	8008c88 <HAL_UART_AbortReceive_IT>
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 80011de:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 80011e0:	4905      	ldr	r1, [pc, #20]	; (80011f8 <cli_init+0x34>)
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 80011e2:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 80011e4:	4620      	mov	r0, r4
 80011e6:	2201      	movs	r2, #1
}
 80011e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 80011ec:	f007 bb56 	b.w	800889c <HAL_UART_Receive_IT>
 80011f0:	20014ebc 	.word	0x20014ebc
 80011f4:	200004b4 	.word	0x200004b4
 80011f8:	20000534 	.word	0x20000534

080011fc <cli_process>:
 *
 * @brief This function treats the command sent by CLI
 *
 **********************************************************************/
void cli_process(){
	cli_treat_command(cliBuffer, sizeof(cliBuffer));
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	4801      	ldr	r0, [pc, #4]	; (8001204 <cli_process+0x8>)
 8001200:	f7ff bd54 	b.w	8000cac <cli_treat_command>
 8001204:	200004b4 	.word	0x200004b4

08001208 <erase>:

static void erase(){

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 8001208:	2100      	movs	r1, #0
static void erase(){
 800120a:	b510      	push	{r4, lr}
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 800120c:	4608      	mov	r0, r1
 800120e:	f7ff fce6 	bl	8000bde <cli_get_uint_argument>
	uint32_t num = cli_get_uint32_argument(1, NULL);
 8001212:	2100      	movs	r1, #0
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 8001214:	4604      	mov	r4, r0
	uint32_t num = cli_get_uint32_argument(1, NULL);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fce1 	bl	8000bde <cli_get_uint_argument>

	/* Erase sectors
	 --------------------------------------------------*/
	int32_t erase = os_flash_erase(addrB, num);
 800121c:	4601      	mov	r1, r0
 800121e:	4620      	mov	r0, r4
 8001220:	f002 f940 	bl	80034a4 <os_flash_erase>
	ASSERT(erase >= 0);
 8001224:	1e04      	subs	r4, r0, #0
 8001226:	da04      	bge.n	8001232 <erase+0x2a>
 8001228:	225c      	movs	r2, #92	; 0x5c
 800122a:	4906      	ldr	r1, [pc, #24]	; (8001244 <erase+0x3c>)
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <erase+0x40>)
 800122e:	f008 f8c9 	bl	80093c4 <iprintf>

	/* Feedback
	 --------------------------------------------------*/
	PRINTLN("erase %ld sectors", erase);
 8001232:	4623      	mov	r3, r4
 8001234:	2260      	movs	r2, #96	; 0x60
 8001236:	4903      	ldr	r1, [pc, #12]	; (8001244 <erase+0x3c>)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <erase+0x44>)
}
 800123a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PRINTLN("erase %ld sectors", erase);
 800123e:	f008 b8c1 	b.w	80093c4 <iprintf>
 8001242:	bf00      	nop
 8001244:	0800a4bb 	.word	0x0800a4bb
 8001248:	0800a4c7 	.word	0x0800a4c7
 800124c:	0800a4e1 	.word	0x0800a4e1

08001250 <write>:
static void write(){
 8001250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001254:	2100      	movs	r1, #0
static void write(){
 8001256:	b0b4      	sub	sp, #208	; 0xd0
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001258:	4608      	mov	r0, r1
 800125a:	f7ff fcc0 	bl	8000bde <cli_get_uint_argument>
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 800125e:	ad02      	add	r5, sp, #8
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001260:	4604      	mov	r4, r0
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001262:	2300      	movs	r3, #0
 8001264:	22c8      	movs	r2, #200	; 0xc8
 8001266:	4629      	mov	r1, r5
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fcc8 	bl	8000bfe <cli_get_buffer_argument>
	int32_t writeB = os_flash_write(addr, buffer, realSize);
 800126e:	4629      	mov	r1, r5
 8001270:	4602      	mov	r2, r0
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001272:	4606      	mov	r6, r0
	int32_t writeB = os_flash_write(addr, buffer, realSize);
 8001274:	4620      	mov	r0, r4
 8001276:	f002 f84d 	bl	8003314 <os_flash_write>
	ASSERT(writeB >= 0);
 800127a:	1e04      	subs	r4, r0, #0
 800127c:	da04      	bge.n	8001288 <write+0x38>
 800127e:	2248      	movs	r2, #72	; 0x48
 8001280:	490e      	ldr	r1, [pc, #56]	; (80012bc <write+0x6c>)
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <write+0x70>)
 8001284:	f008 f89e 	bl	80093c4 <iprintf>
	PRINTLN("Write %ld bytes", writeB);
 8001288:	4623      	mov	r3, r4
 800128a:	224c      	movs	r2, #76	; 0x4c
 800128c:	490b      	ldr	r1, [pc, #44]	; (80012bc <write+0x6c>)
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <write+0x74>)
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001290:	4f0a      	ldr	r7, [pc, #40]	; (80012bc <write+0x6c>)
 8001292:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80012c8 <write+0x78>
	PRINTLN("Write %ld bytes", writeB);
 8001296:	f008 f895 	bl	80093c4 <iprintf>
	for(int i = 0; i < realSize; i++){
 800129a:	2400      	movs	r4, #0
 800129c:	42b4      	cmp	r4, r6
 800129e:	d102      	bne.n	80012a6 <write+0x56>
}
 80012a0:	b034      	add	sp, #208	; 0xd0
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 80012a6:	5d2b      	ldrb	r3, [r5, r4]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	224e      	movs	r2, #78	; 0x4e
 80012ac:	4623      	mov	r3, r4
 80012ae:	4639      	mov	r1, r7
 80012b0:	4640      	mov	r0, r8
 80012b2:	f008 f887 	bl	80093c4 <iprintf>
	for(int i = 0; i < realSize; i++){
 80012b6:	3401      	adds	r4, #1
 80012b8:	e7f0      	b.n	800129c <write+0x4c>
 80012ba:	bf00      	nop
 80012bc:	0800a4bb 	.word	0x0800a4bb
 80012c0:	0800a4c7 	.word	0x0800a4c7
 80012c4:	0800a5f4 	.word	0x0800a5f4
 80012c8:	0800a610 	.word	0x0800a610

080012cc <read>:
static void read(){
 80012cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 80012d0:	2100      	movs	r1, #0
 80012d2:	4608      	mov	r0, r1
 80012d4:	f7ff fc83 	bl	8000bde <cli_get_uint_argument>
	uint32_t len = cli_get_uint32_argument(1, NULL);
 80012d8:	2100      	movs	r1, #0
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 80012da:	4604      	mov	r4, r0
	uint32_t len = cli_get_uint32_argument(1, NULL);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff fc7e 	bl	8000bde <cli_get_uint_argument>
 80012e2:	4606      	mov	r6, r0
	uint8_t* buffer = (uint8_t*)os_heap_alloc(len);
 80012e4:	f000 fc06 	bl	8001af4 <os_heap_alloc>
	ASSERT(buffer != NULL);
 80012e8:	4605      	mov	r5, r0
 80012ea:	b920      	cbnz	r0, 80012f6 <read+0x2a>
 80012ec:	222c      	movs	r2, #44	; 0x2c
 80012ee:	491a      	ldr	r1, [pc, #104]	; (8001358 <read+0x8c>)
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <read+0x90>)
 80012f2:	f008 f867 	bl	80093c4 <iprintf>
	int32_t readB = os_flash_read(addr, buffer, len);
 80012f6:	4632      	mov	r2, r6
 80012f8:	4629      	mov	r1, r5
 80012fa:	4620      	mov	r0, r4
 80012fc:	f002 f8a6 	bl	800344c <os_flash_read>
	ASSERT(readB >= 0);
 8001300:	1e06      	subs	r6, r0, #0
 8001302:	da04      	bge.n	800130e <read+0x42>
 8001304:	2231      	movs	r2, #49	; 0x31
 8001306:	4914      	ldr	r1, [pc, #80]	; (8001358 <read+0x8c>)
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <read+0x90>)
 800130a:	f008 f85b 	bl	80093c4 <iprintf>
	PRINTLN("Read %ld bytes", readB);
 800130e:	4633      	mov	r3, r6
 8001310:	2235      	movs	r2, #53	; 0x35
 8001312:	4911      	ldr	r1, [pc, #68]	; (8001358 <read+0x8c>)
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <read+0x94>)
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001316:	4f10      	ldr	r7, [pc, #64]	; (8001358 <read+0x8c>)
 8001318:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001364 <read+0x98>
	PRINTLN("Read %ld bytes", readB);
 800131c:	f008 f852 	bl	80093c4 <iprintf>
	for(int i = 0; i < readB; i++){
 8001320:	2400      	movs	r4, #0
 8001322:	42b4      	cmp	r4, r6
 8001324:	db0b      	blt.n	800133e <read+0x72>
	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 8001326:	4628      	mov	r0, r5
 8001328:	f000 fc44 	bl	8001bb4 <os_heap_free>
 800132c:	b188      	cbz	r0, 8001352 <read+0x86>
 800132e:	490a      	ldr	r1, [pc, #40]	; (8001358 <read+0x8c>)
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <read+0x90>)
 8001332:	223a      	movs	r2, #58	; 0x3a
}
 8001334:	b002      	add	sp, #8
 8001336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 800133a:	f008 b843 	b.w	80093c4 <iprintf>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 800133e:	5d2b      	ldrb	r3, [r5, r4]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2237      	movs	r2, #55	; 0x37
 8001344:	4623      	mov	r3, r4
 8001346:	4639      	mov	r1, r7
 8001348:	4640      	mov	r0, r8
 800134a:	f008 f83b 	bl	80093c4 <iprintf>
	for(int i = 0; i < readB; i++){
 800134e:	3401      	adds	r4, #1
 8001350:	e7e7      	b.n	8001322 <read+0x56>
}
 8001352:	b002      	add	sp, #8
 8001354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001358:	0800a4bb 	.word	0x0800a4bb
 800135c:	0800a4c7 	.word	0x0800a4c7
 8001360:	0800a50c 	.word	0x0800a50c
 8001364:	0800a610 	.word	0x0800a610

08001368 <ls>:
	else{
		PRINTLN("Remove '%s' OK", name);
	}
}

static void ls(){
 8001368:	b570      	push	{r4, r5, r6, lr}

	/* Open current directory
	 --------------------------------------------------*/
	lfs_dir_t dir;
	int err = lfs_dir_open(&lfs, &dir, cur_dir);
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <ls+0x7c>)
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <ls+0x80>)
 800136e:	681a      	ldr	r2, [r3, #0]
static void ls(){
 8001370:	b0d2      	sub	sp, #328	; 0x148
	int err = lfs_dir_open(&lfs, &dir, cur_dir);
 8001372:	a903      	add	r1, sp, #12
 8001374:	f005 fcc0 	bl	8006cf8 <lfs_dir_open>
	if(err < 0){
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	db18      	blt.n	80013ae <ls+0x46>
	struct lfs_info info;
	while(1){

		/* Get its info
		 --------------------------------------------------*/
		err = lfs_dir_read(&lfs, &dir, &info);
 800137c:	4e1a      	ldr	r6, [pc, #104]	; (80013e8 <ls+0x80>)
		if(strlen(info.name) == 0)
			break;

		/* Print filename and size
		 --------------------------------------------------*/
		PRINTLN("[%s] %s, size = %lu", info.type == LFS_TYPE_REG ? "File" : "Dir", info.name, info.size);
 800137e:	4d1b      	ldr	r5, [pc, #108]	; (80013ec <ls+0x84>)
 8001380:	4c1b      	ldr	r4, [pc, #108]	; (80013f0 <ls+0x88>)
		err = lfs_dir_read(&lfs, &dir, &info);
 8001382:	aa10      	add	r2, sp, #64	; 0x40
 8001384:	a903      	add	r1, sp, #12
 8001386:	4630      	mov	r0, r6
 8001388:	f005 fd1a 	bl	8006dc0 <lfs_dir_read>
		if(err < 0){
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	da15      	bge.n	80013bc <ls+0x54>
			PRINTLN("Dir open err %d", err);
 8001390:	22bd      	movs	r2, #189	; 0xbd
 8001392:	4918      	ldr	r1, [pc, #96]	; (80013f4 <ls+0x8c>)
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <ls+0x90>)
 8001396:	f008 f815 	bl	80093c4 <iprintf>
	};

	/* Close directory
	 --------------------------------------------------*/
	err = lfs_dir_close(&lfs, &dir);
 800139a:	a903      	add	r1, sp, #12
 800139c:	4812      	ldr	r0, [pc, #72]	; (80013e8 <ls+0x80>)
 800139e:	f005 fd01 	bl	8006da4 <lfs_dir_close>
	if(err < 0){
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	da08      	bge.n	80013b8 <ls+0x50>
		PRINTLN("Dir close err %d", err);
 80013a6:	22cf      	movs	r2, #207	; 0xcf
 80013a8:	4912      	ldr	r1, [pc, #72]	; (80013f4 <ls+0x8c>)
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <ls+0x94>)
 80013ac:	e002      	b.n	80013b4 <ls+0x4c>
		PRINTLN("Dir open err %d", err);
 80013ae:	4911      	ldr	r1, [pc, #68]	; (80013f4 <ls+0x8c>)
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <ls+0x90>)
 80013b2:	22b0      	movs	r2, #176	; 0xb0
		PRINTLN("Dir close err %d", err);
 80013b4:	f008 f806 	bl	80093c4 <iprintf>
	}
}
 80013b8:	b052      	add	sp, #328	; 0x148
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen(info.name) == 0)
 80013bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0ea      	beq.n	800139a <ls+0x32>
		PRINTLN("[%s] %s, size = %lu", info.type == LFS_TYPE_REG ? "File" : "Dir", info.name, info.size);
 80013c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80013c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80013ca:	9201      	str	r2, [sp, #4]
 80013cc:	aa12      	add	r2, sp, #72	; 0x48
 80013ce:	9200      	str	r2, [sp, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	bf0c      	ite	eq
 80013d4:	462b      	moveq	r3, r5
 80013d6:	4623      	movne	r3, r4
 80013d8:	22c8      	movs	r2, #200	; 0xc8
 80013da:	4906      	ldr	r1, [pc, #24]	; (80013f4 <ls+0x8c>)
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <ls+0x98>)
 80013de:	f007 fff1 	bl	80093c4 <iprintf>
		err = lfs_dir_read(&lfs, &dir, &info);
 80013e2:	e7ce      	b.n	8001382 <ls+0x1a>
 80013e4:	200001cc 	.word	0x200001cc
 80013e8:	20014e00 	.word	0x20014e00
 80013ec:	0800a6a3 	.word	0x0800a6a3
 80013f0:	0800a6a8 	.word	0x0800a6a8
 80013f4:	0800a6ac 	.word	0x0800a6ac
 80013f8:	0800a6b6 	.word	0x0800a6b6
 80013fc:	0800a6f2 	.word	0x0800a6f2
 8001400:	0800a6d2 	.word	0x0800a6d2

08001404 <delete>:
static void delete(){
 8001404:	b500      	push	{lr}
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8001406:	2300      	movs	r3, #0
static void delete(){
 8001408:	b091      	sub	sp, #68	; 0x44
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 800140a:	2232      	movs	r2, #50	; 0x32
 800140c:	a903      	add	r1, sp, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fc04 	bl	8000c1c <cli_get_string_argument>
	int err = lfs_remove(&lfs, name);
 8001414:	a903      	add	r1, sp, #12
 8001416:	480b      	ldr	r0, [pc, #44]	; (8001444 <delete+0x40>)
 8001418:	f005 fb64 	bl	8006ae4 <lfs_remove>
	if(err < 0)
 800141c:	2800      	cmp	r0, #0
 800141e:	da09      	bge.n	8001434 <delete+0x30>
		PRINTLN("lfs remove '%s' error %d", name, err);
 8001420:	9000      	str	r0, [sp, #0]
 8001422:	ab03      	add	r3, sp, #12
 8001424:	22a3      	movs	r2, #163	; 0xa3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <delete+0x44>)
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <delete+0x48>)
 800142a:	f007 ffcb 	bl	80093c4 <iprintf>
}
 800142e:	b011      	add	sp, #68	; 0x44
 8001430:	f85d fb04 	ldr.w	pc, [sp], #4
		PRINTLN("Remove '%s' OK", name);
 8001434:	ab03      	add	r3, sp, #12
 8001436:	22a5      	movs	r2, #165	; 0xa5
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <delete+0x44>)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <delete+0x4c>)
 800143c:	f007 ffc2 	bl	80093c4 <iprintf>
}
 8001440:	e7f5      	b.n	800142e <delete+0x2a>
 8001442:	bf00      	nop
 8001444:	20014e00 	.word	0x20014e00
 8001448:	0800a6ac 	.word	0x0800a6ac
 800144c:	0800a663 	.word	0x0800a663
 8001450:	0800a688 	.word	0x0800a688

08001454 <read>:
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 8001454:	2100      	movs	r1, #0
static void read(){
 8001456:	b570      	push	{r4, r5, r6, lr}
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 8001458:	4608      	mov	r0, r1
 800145a:	f7ff fbc0 	bl	8000bde <cli_get_uint_argument>
 800145e:	4605      	mov	r5, r0
	uint8_t* buffer = os_heap_alloc(nBytes+1);
 8001460:	3001      	adds	r0, #1
 8001462:	f000 fb47 	bl	8001af4 <os_heap_alloc>
	buffer[nBytes] = '\0';
 8001466:	2600      	movs	r6, #0
 8001468:	5546      	strb	r6, [r0, r5]
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 800146a:	462b      	mov	r3, r5
 800146c:	4602      	mov	r2, r0
	uint8_t* buffer = os_heap_alloc(nBytes+1);
 800146e:	4604      	mov	r4, r0
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 8001470:	490d      	ldr	r1, [pc, #52]	; (80014a8 <read+0x54>)
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <read+0x58>)
 8001474:	f005 fbdc 	bl	8006c30 <lfs_file_read>
	if(err < 0)
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	da09      	bge.n	8001490 <read+0x3c>
		PRINTLN("lfs read error %ld", err);
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <read+0x5c>)
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <read+0x60>)
 8001480:	225c      	movs	r2, #92	; 0x5c
		PRINTLN("File : %s", buffer);
 8001482:	f007 ff9f 	bl	80093c4 <iprintf>
	os_heap_free(buffer);
 8001486:	4620      	mov	r0, r4
}
 8001488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	os_heap_free(buffer);
 800148c:	f000 bb92 	b.w	8001bb4 <os_heap_free>
		buffer[err] = '\0';
 8001490:	54e6      	strb	r6, [r4, r3]
		PRINTLN("Read %ld bytes", err);
 8001492:	2262      	movs	r2, #98	; 0x62
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <read+0x5c>)
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <read+0x64>)
 8001498:	f007 ff94 	bl	80093c4 <iprintf>
		PRINTLN("File : %s", buffer);
 800149c:	4623      	mov	r3, r4
 800149e:	2263      	movs	r2, #99	; 0x63
 80014a0:	4903      	ldr	r1, [pc, #12]	; (80014b0 <read+0x5c>)
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <read+0x68>)
 80014a4:	e7ed      	b.n	8001482 <read+0x2e>
 80014a6:	bf00      	nop
 80014a8:	20000538 	.word	0x20000538
 80014ac:	20014e00 	.word	0x20014e00
 80014b0:	0800a6ac 	.word	0x0800a6ac
 80014b4:	0800a74b 	.word	0x0800a74b
 80014b8:	0800a50c 	.word	0x0800a50c
 80014bc:	0800a76a 	.word	0x0800a76a

080014c0 <bRead>:
static void bRead(){
 80014c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 80014c4:	2100      	movs	r1, #0
 80014c6:	4608      	mov	r0, r1
 80014c8:	f7ff fb89 	bl	8000bde <cli_get_uint_argument>
 80014cc:	4606      	mov	r6, r0
	uint8_t* buffer = os_heap_alloc(nBytes);
 80014ce:	f000 fb11 	bl	8001af4 <os_heap_alloc>
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 80014d2:	4633      	mov	r3, r6
 80014d4:	4602      	mov	r2, r0
	uint8_t* buffer = os_heap_alloc(nBytes);
 80014d6:	4605      	mov	r5, r0
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 80014d8:	4912      	ldr	r1, [pc, #72]	; (8001524 <bRead+0x64>)
 80014da:	4813      	ldr	r0, [pc, #76]	; (8001528 <bRead+0x68>)
 80014dc:	f005 fba8 	bl	8006c30 <lfs_file_read>
	if(err < 0)
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	da0a      	bge.n	80014fa <bRead+0x3a>
		PRINTLN("lfs read error %ld", err);
 80014e4:	223d      	movs	r2, #61	; 0x3d
 80014e6:	4911      	ldr	r1, [pc, #68]	; (800152c <bRead+0x6c>)
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <bRead+0x70>)
 80014ea:	f007 ff6b 	bl	80093c4 <iprintf>
	os_heap_free(buffer);
 80014ee:	4628      	mov	r0, r5
}
 80014f0:	b002      	add	sp, #8
 80014f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	os_heap_free(buffer);
 80014f6:	f000 bb5d 	b.w	8001bb4 <os_heap_free>
		PRINTLN("Read %ld bytes", err);
 80014fa:	2241      	movs	r2, #65	; 0x41
 80014fc:	490b      	ldr	r1, [pc, #44]	; (800152c <bRead+0x6c>)
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <bRead+0x74>)
			PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001500:	4f0a      	ldr	r7, [pc, #40]	; (800152c <bRead+0x6c>)
 8001502:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001538 <bRead+0x78>
		PRINTLN("Read %ld bytes", err);
 8001506:	f007 ff5d 	bl	80093c4 <iprintf>
		for(int i = 0; i < nBytes; i++){
 800150a:	2400      	movs	r4, #0
 800150c:	42a6      	cmp	r6, r4
 800150e:	d9ee      	bls.n	80014ee <bRead+0x2e>
			PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001510:	5d2b      	ldrb	r3, [r5, r4]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2243      	movs	r2, #67	; 0x43
 8001516:	4623      	mov	r3, r4
 8001518:	4639      	mov	r1, r7
 800151a:	4640      	mov	r0, r8
 800151c:	f007 ff52 	bl	80093c4 <iprintf>
		for(int i = 0; i < nBytes; i++){
 8001520:	3401      	adds	r4, #1
 8001522:	e7f3      	b.n	800150c <bRead+0x4c>
 8001524:	20000538 	.word	0x20000538
 8001528:	20014e00 	.word	0x20014e00
 800152c:	0800a6ac 	.word	0x0800a6ac
 8001530:	0800a74b 	.word	0x0800a74b
 8001534:	0800a50c 	.word	0x0800a50c
 8001538:	0800a610 	.word	0x0800a610

0800153c <open>:
static void open(){
 800153c:	b500      	push	{lr}
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 800153e:	2300      	movs	r3, #0
static void open(){
 8001540:	b091      	sub	sp, #68	; 0x44
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	a903      	add	r1, sp, #12
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fb68 	bl	8000c1c <cli_get_string_argument>
	int err = lfs_file_open(&lfs, &lfs_file, name, LFS_O_CREAT | LFS_O_RDWR);
 800154c:	f240 1303 	movw	r3, #259	; 0x103
 8001550:	aa03      	add	r2, sp, #12
 8001552:	490b      	ldr	r1, [pc, #44]	; (8001580 <open+0x44>)
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <open+0x48>)
 8001556:	f005 fb35 	bl	8006bc4 <lfs_file_open>
	if(err < 0)
 800155a:	2800      	cmp	r0, #0
 800155c:	da09      	bge.n	8001572 <open+0x36>
		PRINTLN("lfs open '%s' error %d", name, err);
 800155e:	9000      	str	r0, [sp, #0]
 8001560:	ab03      	add	r3, sp, #12
 8001562:	2229      	movs	r2, #41	; 0x29
 8001564:	4908      	ldr	r1, [pc, #32]	; (8001588 <open+0x4c>)
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <open+0x50>)
 8001568:	f007 ff2c 	bl	80093c4 <iprintf>
}
 800156c:	b011      	add	sp, #68	; 0x44
 800156e:	f85d fb04 	ldr.w	pc, [sp], #4
		PRINTLN("Open '%s' OK", name);
 8001572:	ab03      	add	r3, sp, #12
 8001574:	222b      	movs	r2, #43	; 0x2b
 8001576:	4904      	ldr	r1, [pc, #16]	; (8001588 <open+0x4c>)
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <open+0x54>)
 800157a:	f007 ff23 	bl	80093c4 <iprintf>
}
 800157e:	e7f5      	b.n	800156c <open+0x30>
 8001580:	20000538 	.word	0x20000538
 8001584:	20014e00 	.word	0x20014e00
 8001588:	0800a6ac 	.word	0x0800a6ac
 800158c:	0800a70f 	.word	0x0800a70f
 8001590:	0800a732 	.word	0x0800a732

08001594 <xmodem>:

static void xmodem(){
 8001594:	b530      	push	{r4, r5, lr}
 8001596:	b093      	sub	sp, #76	; 0x4c

	/* Do not execute twice
	 --------------------------------------------------*/
	if(xModem_getState() == 1) return;
 8001598:	f005 fd46 	bl	8007028 <xModem_getState>
 800159c:	2801      	cmp	r0, #1
 800159e:	d01b      	beq.n	80015d8 <xmodem+0x44>

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	size_t len = cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 80015a0:	2300      	movs	r3, #0
 80015a2:	2232      	movs	r2, #50	; 0x32
 80015a4:	a905      	add	r1, sp, #20
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb38 	bl	8000c1c <cli_get_string_argument>

	/* Store name in heap
	 --------------------------------------------------*/
	char* arg = os_heap_alloc(len + 1);
 80015ac:	1c44      	adds	r4, r0, #1
 80015ae:	4620      	mov	r0, r4
 80015b0:	f000 faa0 	bl	8001af4 <os_heap_alloc>
	snprintf(arg, len + 1, "%s", name);
 80015b4:	ab05      	add	r3, sp, #20
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <xmodem+0x48>)
 80015b8:	4621      	mov	r1, r4
	char* arg = os_heap_alloc(len + 1);
 80015ba:	4605      	mov	r5, r0
	snprintf(arg, len + 1, "%s", name);
 80015bc:	f007 ff1a 	bl	80093f4 <sniprintf>

	/* Open file
	 --------------------------------------------------*/
	os_handle_t h;
	os_task_create(&h, "xmodem", (void*(*)(void*))xModem_rcv, OS_TASK_MODE_DELETE, 11, 5 * OS_DEFAULT_STACK_SIZE, arg);
 80015c0:	230b      	movs	r3, #11
 80015c2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80015c6:	e9cd 3200 	strd	r3, r2, [sp]
 80015ca:	9502      	str	r5, [sp, #8]
 80015cc:	2301      	movs	r3, #1
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <xmodem+0x4c>)
 80015d0:	4904      	ldr	r1, [pc, #16]	; (80015e4 <xmodem+0x50>)
 80015d2:	a804      	add	r0, sp, #16
 80015d4:	f001 fe16 	bl	8003204 <os_task_create>
}
 80015d8:	b013      	add	sp, #76	; 0x4c
 80015da:	bd30      	pop	{r4, r5, pc}
 80015dc:	0800a4a9 	.word	0x0800a4a9
 80015e0:	08007035 	.word	0x08007035
 80015e4:	0800a8d2 	.word	0x0800a8d2

080015e8 <close>:
static void close(){
 80015e8:	b510      	push	{r4, lr}
	int err = lfs_file_close(&lfs, &lfs_file);
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <close+0x2c>)
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <close+0x30>)
 80015ee:	f005 fb07 	bl	8006c00 <lfs_file_close>
	if(err < 0)
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	da06      	bge.n	8001604 <close+0x1c>
		PRINTLN("lfs close error %d", err);
 80015f6:	2292      	movs	r2, #146	; 0x92
 80015f8:	4908      	ldr	r1, [pc, #32]	; (800161c <close+0x34>)
 80015fa:	4809      	ldr	r0, [pc, #36]	; (8001620 <close+0x38>)
}
 80015fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("lfs close error %d", err);
 8001600:	f007 bee0 	b.w	80093c4 <iprintf>
		PRINTLN("Close OK");
 8001604:	2294      	movs	r2, #148	; 0x94
 8001606:	4905      	ldr	r1, [pc, #20]	; (800161c <close+0x34>)
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <close+0x3c>)
}
 800160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("Close OK");
 800160e:	f007 bed9 	b.w	80093c4 <iprintf>
 8001612:	bf00      	nop
 8001614:	20000538 	.word	0x20000538
 8001618:	20014e00 	.word	0x20014e00
 800161c:	0800a6ac 	.word	0x0800a6ac
 8001620:	0800a62f 	.word	0x0800a62f
 8001624:	0800a64e 	.word	0x0800a64e

08001628 <seek>:
	lfs_soff_t pos = (lfs_soff_t)cli_get_int32_argument(0, NULL);
 8001628:	2100      	movs	r1, #0
static void seek(){
 800162a:	b510      	push	{r4, lr}
	lfs_soff_t pos = (lfs_soff_t)cli_get_int32_argument(0, NULL);
 800162c:	4608      	mov	r0, r1
 800162e:	f7ff fac7 	bl	8000bc0 <cli_get_int_argument>
	lfs_soff_t err = lfs_file_seek(&lfs, &lfs_file, pos, LFS_SEEK_SET);
 8001632:	2300      	movs	r3, #0
 8001634:	4602      	mov	r2, r0
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <seek+0x38>)
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <seek+0x3c>)
 800163a:	f005 fb45 	bl	8006cc8 <lfs_file_seek>
	if(err < 0)
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	da06      	bge.n	8001650 <seek+0x28>
		PRINTLN("lfs seek error %ld", err);
 8001642:	2286      	movs	r2, #134	; 0x86
 8001644:	4908      	ldr	r1, [pc, #32]	; (8001668 <seek+0x40>)
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <seek+0x44>)
}
 8001648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("lfs seek error %ld", err);
 800164c:	f007 beba 	b.w	80093c4 <iprintf>
		PRINTLN("seek OK");
 8001650:	2288      	movs	r2, #136	; 0x88
 8001652:	4905      	ldr	r1, [pc, #20]	; (8001668 <seek+0x40>)
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <seek+0x48>)
}
 8001656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("seek OK");
 800165a:	f007 beb3 	b.w	80093c4 <iprintf>
 800165e:	bf00      	nop
 8001660:	20000538 	.word	0x20000538
 8001664:	20014e00 	.word	0x20014e00
 8001668:	0800a6ac 	.word	0x0800a6ac
 800166c:	0800a780 	.word	0x0800a780
 8001670:	0800a79f 	.word	0x0800a79f

08001674 <write>:
static void write(){
 8001674:	b500      	push	{lr}
	uint32_t nBytes = cli_get_string_argument(0, buffer, sizeof(buffer), NULL);
 8001676:	2300      	movs	r3, #0
static void write(){
 8001678:	b0b3      	sub	sp, #204	; 0xcc
	uint32_t nBytes = cli_get_string_argument(0, buffer, sizeof(buffer), NULL);
 800167a:	22c8      	movs	r2, #200	; 0xc8
 800167c:	4669      	mov	r1, sp
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff facc 	bl	8000c1c <cli_get_string_argument>
	lfs_ssize_t err = lfs_file_write(&lfs, &lfs_file, buffer, nBytes);
 8001684:	466a      	mov	r2, sp
 8001686:	4603      	mov	r3, r0
 8001688:	4909      	ldr	r1, [pc, #36]	; (80016b0 <write+0x3c>)
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <write+0x40>)
 800168c:	f005 fb04 	bl	8006c98 <lfs_file_write>
	if(err < 0)
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	da07      	bge.n	80016a4 <write+0x30>
		PRINTLN("lfs write error %ld", err);
 8001694:	2276      	movs	r2, #118	; 0x76
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <write+0x44>)
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <write+0x48>)
 800169a:	f007 fe93 	bl	80093c4 <iprintf>
}
 800169e:	b033      	add	sp, #204	; 0xcc
 80016a0:	f85d fb04 	ldr.w	pc, [sp], #4
		PRINTLN("write OK");
 80016a4:	2278      	movs	r2, #120	; 0x78
 80016a6:	4904      	ldr	r1, [pc, #16]	; (80016b8 <write+0x44>)
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <write+0x4c>)
 80016aa:	f007 fe8b 	bl	80093c4 <iprintf>
}
 80016ae:	e7f6      	b.n	800169e <write+0x2a>
 80016b0:	20000538 	.word	0x20000538
 80016b4:	20014e00 	.word	0x20014e00
 80016b8:	0800a6ac 	.word	0x0800a6ac
 80016bc:	0800a8d9 	.word	0x0800a8d9
 80016c0:	0800a8f9 	.word	0x0800a8f9

080016c4 <reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016c4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016c8:	4905      	ldr	r1, [pc, #20]	; (80016e0 <reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016cc:	68ca      	ldr	r2, [r1, #12]
 80016ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60cb      	str	r3, [r1, #12]
 80016d6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016da:	bf00      	nop
 80016dc:	e7fd      	b.n	80016da <reset+0x16>
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	05fa0004 	.word	0x05fa0004

080016e8 <exec>:
	else{
		PRINTLN("Task PID %d killed", pid);
	}
}

static void exec(){
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b08f      	sub	sp, #60	; 0x3c

	/* Count arguments
	 ------------------------------------------------------*/
	int argc = 0;
	bool resStr = true;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f88d 3002 	strb.w	r3, [sp, #2]
	bool resInt= true;
 80016f2:	f88d 3003 	strb.w	r3, [sp, #3]
	int argc = 0;
 80016f6:	2400      	movs	r4, #0
	char buffer[50];

	/* For each argument
	 ------------------------------------------------------*/
	while(resInt == true || resStr == true){
 80016f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80016fc:	b913      	cbnz	r3, 8001704 <exec+0x1c>
 80016fe:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001702:	b18b      	cbz	r3, 8001728 <exec+0x40>

		/* Get as string or int
		 ------------------------------------------------------*/
		cli_get_string_argument((size_t)argc, (uint8_t*)buffer, sizeof(buffer), &resStr);
 8001704:	f10d 0302 	add.w	r3, sp, #2
 8001708:	2232      	movs	r2, #50	; 0x32
 800170a:	a901      	add	r1, sp, #4
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff fa85 	bl	8000c1c <cli_get_string_argument>
		cli_get_int_argument((size_t)argc, &resInt);
 8001712:	f10d 0103 	add.w	r1, sp, #3
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff fa52 	bl	8000bc0 <cli_get_int_argument>

		/* if none, stop
		 ------------------------------------------------------*/
		if(!(resInt == true || resStr == true)) break;
 800171c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001720:	bb73      	cbnz	r3, 8001780 <exec+0x98>
 8001722:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001726:	bb5b      	cbnz	r3, 8001780 <exec+0x98>
	}


	/* Allocate argv vector
	 ------------------------------------------------------*/
	char** argv = (char**)os_heap_alloc( (uint32_t)(argc * (int)sizeof(char*)) );
 8001728:	00a0      	lsls	r0, r4, #2
 800172a:	f000 f9e3 	bl	8001af4 <os_heap_alloc>
		 ------------------------------------------------------*/
		else if(resInt){

			/* Transform integer into string, allocate string argument and copy buffer
			 ------------------------------------------------------*/
			snprintf(buffer, sizeof(buffer), "%ld", arg);
 800172e:	4e23      	ldr	r6, [pc, #140]	; (80017bc <exec+0xd4>)
	resStr = true;
 8001730:	2301      	movs	r3, #1
	char** argv = (char**)os_heap_alloc( (uint32_t)(argc * (int)sizeof(char*)) );
 8001732:	4605      	mov	r5, r0
	resStr = true;
 8001734:	f88d 3002 	strb.w	r3, [sp, #2]
	resInt= true;
 8001738:	f88d 3003 	strb.w	r3, [sp, #3]
	argc = 0;
 800173c:	2400      	movs	r4, #0
	while(resInt == true || resStr == true){
 800173e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001742:	b913      	cbnz	r3, 800174a <exec+0x62>
 8001744:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001748:	b1fb      	cbz	r3, 800178a <exec+0xa2>
		size_t len = cli_get_string_argument((size_t)argc, (uint8_t*)buffer, sizeof(buffer), &resStr);
 800174a:	f10d 0302 	add.w	r3, sp, #2
 800174e:	2232      	movs	r2, #50	; 0x32
 8001750:	a901      	add	r1, sp, #4
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fa62 	bl	8000c1c <cli_get_string_argument>
		int32_t arg = cli_get_int32_argument((size_t)argc, &resInt);
 8001758:	f10d 0103 	add.w	r1, sp, #3
		size_t len = cli_get_string_argument((size_t)argc, (uint8_t*)buffer, sizeof(buffer), &resStr);
 800175c:	4607      	mov	r7, r0
		int32_t arg = cli_get_int32_argument((size_t)argc, &resInt);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fa2e 	bl	8000bc0 <cli_get_int_argument>
		if(resStr){
 8001764:	f89d 2002 	ldrb.w	r2, [sp, #2]
		int32_t arg = cli_get_int32_argument((size_t)argc, &resInt);
 8001768:	4603      	mov	r3, r0
		if(resStr){
 800176a:	b15a      	cbz	r2, 8001784 <exec+0x9c>
			argv[argc] = (char*)os_heap_alloc( (len + 1) * sizeof(char) );
 800176c:	1c78      	adds	r0, r7, #1
			argv[argc] = (char*)os_heap_alloc( (strlen(buffer) + 1) * sizeof(char) );
 800176e:	f000 f9c1 	bl	8001af4 <os_heap_alloc>
			strcpy(argv[argc], buffer);
 8001772:	a901      	add	r1, sp, #4
			argv[argc] = (char*)os_heap_alloc( (strlen(buffer) + 1) * sizeof(char) );
 8001774:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
			strcpy(argv[argc], buffer);
 8001778:	f007 fe7d 	bl	8009476 <strcpy>
			break;
		}

		/* otherwise count and continue
		 ------------------------------------------------------*/
		argc++;
 800177c:	3401      	adds	r4, #1
 800177e:	e7de      	b.n	800173e <exec+0x56>
		argc++;
 8001780:	3401      	adds	r4, #1
 8001782:	e7b9      	b.n	80016f8 <exec+0x10>
		else if(resInt){
 8001784:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001788:	b96a      	cbnz	r2, 80017a6 <exec+0xbe>
	}

	/* Create process
	 ------------------------------------------------------*/
	os_err_e err = os_task_createProcess(argv[0], argc, argv);
 800178a:	462a      	mov	r2, r5
 800178c:	4621      	mov	r1, r4
 800178e:	6828      	ldr	r0, [r5, #0]
 8001790:	f001 fd48 	bl	8003224 <os_task_createProcess>
	if(err < 0){
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	da04      	bge.n	80017a2 <exec+0xba>
		PRINTLN("Error %ld", err);
 8001798:	229b      	movs	r2, #155	; 0x9b
 800179a:	4909      	ldr	r1, [pc, #36]	; (80017c0 <exec+0xd8>)
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <exec+0xdc>)
 800179e:	f007 fe11 	bl	80093c4 <iprintf>
	}
}
 80017a2:	b00f      	add	sp, #60	; 0x3c
 80017a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			snprintf(buffer, sizeof(buffer), "%ld", arg);
 80017a6:	4632      	mov	r2, r6
 80017a8:	2132      	movs	r1, #50	; 0x32
 80017aa:	a801      	add	r0, sp, #4
 80017ac:	f007 fe22 	bl	80093f4 <sniprintf>
			argv[argc] = (char*)os_heap_alloc( (strlen(buffer) + 1) * sizeof(char) );
 80017b0:	a801      	add	r0, sp, #4
 80017b2:	f7fe fd17 	bl	80001e4 <strlen>
 80017b6:	3001      	adds	r0, #1
 80017b8:	e7d9      	b.n	800176e <exec+0x86>
 80017ba:	bf00      	nop
 80017bc:	0800a921 	.word	0x0800a921
 80017c0:	0800a925 	.word	0x0800a925
 80017c4:	0800a930 	.word	0x0800a930

080017c8 <kill>:
	uint16_t pid = cli_get_uint16_argument(0, NULL);
 80017c8:	2100      	movs	r1, #0
static void kill(){
 80017ca:	b570      	push	{r4, r5, r6, lr}
	uint16_t pid = cli_get_uint16_argument(0, NULL);
 80017cc:	4608      	mov	r0, r1
 80017ce:	f7ff fa06 	bl	8000bde <cli_get_uint_argument>
 80017d2:	b284      	uxth	r4, r0
	os_handle_t h = os_task_getByPID(pid);
 80017d4:	4620      	mov	r0, r4
 80017d6:	f001 fbe3 	bl	8002fa0 <os_task_getByPID>
 80017da:	4605      	mov	r5, r0
	os_task_delete(h);
 80017dc:	f001 fada 	bl	8002d94 <os_task_delete>
		PRINTLN("Task PID %d not found", pid);
 80017e0:	4623      	mov	r3, r4
	if(h == NULL)
 80017e2:	b935      	cbnz	r5, 80017f2 <kill+0x2a>
		PRINTLN("Task PID %d not found", pid);
 80017e4:	4905      	ldr	r1, [pc, #20]	; (80017fc <kill+0x34>)
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <kill+0x38>)
 80017e8:	2242      	movs	r2, #66	; 0x42
}
 80017ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		PRINTLN("Task PID %d killed", pid);
 80017ee:	f007 bde9 	b.w	80093c4 <iprintf>
 80017f2:	2244      	movs	r2, #68	; 0x44
 80017f4:	4901      	ldr	r1, [pc, #4]	; (80017fc <kill+0x34>)
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <kill+0x3c>)
 80017f8:	e7f7      	b.n	80017ea <kill+0x22>
 80017fa:	bf00      	nop
 80017fc:	0800a925 	.word	0x0800a925
 8001800:	0800a946 	.word	0x0800a946
 8001804:	0800a968 	.word	0x0800a968

08001808 <top>:
static void top(){
 8001808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800180c:	b089      	sub	sp, #36	; 0x24
	os_heap_mon_t mon = os_heap_monitor();
 800180e:	a804      	add	r0, sp, #16
 8001810:	f000 fa1e 	bl	8001c50 <os_heap_monitor>
 8001814:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	os_list_cell_t* it = os_head.head.next;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <top+0x9c>)
	PRINTLN("");
 800181a:	4923      	ldr	r1, [pc, #140]	; (80018a8 <top+0xa0>)
 800181c:	4823      	ldr	r0, [pc, #140]	; (80018ac <top+0xa4>)
	os_list_cell_t* it = os_head.head.next;
 800181e:	681d      	ldr	r5, [r3, #0]
		PRINTLN("%05d, %-10s   %-11s %d", ((os_task_t*)it->element)->pid, ((os_task_t*)it->element)->obj.name == NULL ? "No name" : ((os_task_t*)it->element)->obj.name,
 8001820:	4f23      	ldr	r7, [pc, #140]	; (80018b0 <top+0xa8>)
 8001822:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80018a8 <top+0xa0>
	PRINTLN("");
 8001826:	2226      	movs	r2, #38	; 0x26
 8001828:	f007 fdcc 	bl	80093c4 <iprintf>
	PRINTLN("Memory usage, Used = %lu, Free = %lu, Total = %lu, Used Perc = %lu.%lu %%", mon.used_size, mon.total_size - mon.used_size, mon.total_size, mon.used_size * 100 / mon.total_size, mon.used_size * 10 / mon.total_size );
 800182c:	220a      	movs	r2, #10
 800182e:	4372      	muls	r2, r6
 8001830:	fbb2 f2f4 	udiv	r2, r2, r4
 8001834:	9203      	str	r2, [sp, #12]
 8001836:	2264      	movs	r2, #100	; 0x64
 8001838:	4372      	muls	r2, r6
 800183a:	fbb2 f2f4 	udiv	r2, r2, r4
 800183e:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8001842:	1ba4      	subs	r4, r4, r6
 8001844:	4633      	mov	r3, r6
 8001846:	2227      	movs	r2, #39	; 0x27
 8001848:	4917      	ldr	r1, [pc, #92]	; (80018a8 <top+0xa0>)
 800184a:	9400      	str	r4, [sp, #0]
 800184c:	4819      	ldr	r0, [pc, #100]	; (80018b4 <top+0xac>)
		PRINTLN("%05d, %-10s   %-11s %d", ((os_task_t*)it->element)->pid, ((os_task_t*)it->element)->obj.name == NULL ? "No name" : ((os_task_t*)it->element)->obj.name,
 800184e:	4e1a      	ldr	r6, [pc, #104]	; (80018b8 <top+0xb0>)
	PRINTLN("Memory usage, Used = %lu, Free = %lu, Total = %lu, Used Perc = %lu.%lu %%", mon.used_size, mon.total_size - mon.used_size, mon.total_size, mon.used_size * 100 / mon.total_size, mon.used_size * 10 / mon.total_size );
 8001850:	f007 fdb8 	bl	80093c4 <iprintf>
	PRINTLN("Curent Tasks : ");
 8001854:	2228      	movs	r2, #40	; 0x28
 8001856:	4914      	ldr	r1, [pc, #80]	; (80018a8 <top+0xa0>)
 8001858:	4818      	ldr	r0, [pc, #96]	; (80018bc <top+0xb4>)
 800185a:	f007 fdb3 	bl	80093c4 <iprintf>
	PRINTLN("PID,   name         state       priority");
 800185e:	2229      	movs	r2, #41	; 0x29
 8001860:	4911      	ldr	r1, [pc, #68]	; (80018a8 <top+0xa0>)
 8001862:	4817      	ldr	r0, [pc, #92]	; (80018c0 <top+0xb8>)
 8001864:	f007 fdae 	bl	80093c4 <iprintf>
	while(it != NULL){
 8001868:	b915      	cbnz	r5, 8001870 <top+0x68>
}
 800186a:	b009      	add	sp, #36	; 0x24
 800186c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PRINTLN("%05d, %-10s   %-11s %d", ((os_task_t*)it->element)->pid, ((os_task_t*)it->element)->obj.name == NULL ? "No name" : ((os_task_t*)it->element)->obj.name,
 8001870:	68a8      	ldr	r0, [r5, #8]
 8001872:	f8b0 902c 	ldrh.w	r9, [r0, #44]	; 0x2c
 8001876:	6844      	ldr	r4, [r0, #4]
 8001878:	f001 fb66 	bl	8002f48 <os_task_getState>
 800187c:	68ab      	ldr	r3, [r5, #8]
 800187e:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8001888:	480e      	ldr	r0, [pc, #56]	; (80018c4 <top+0xbc>)
 800188a:	2c00      	cmp	r4, #0
 800188c:	bf08      	it	eq
 800188e:	4634      	moveq	r4, r6
 8001890:	e9cd 4300 	strd	r4, r3, [sp]
 8001894:	222c      	movs	r2, #44	; 0x2c
 8001896:	464b      	mov	r3, r9
 8001898:	4641      	mov	r1, r8
 800189a:	f007 fd93 	bl	80093c4 <iprintf>
		it = it->next;
 800189e:	682d      	ldr	r5, [r5, #0]
 80018a0:	e7e2      	b.n	8001868 <top+0x60>
 80018a2:	bf00      	nop
 80018a4:	20014de0 	.word	0x20014de0
 80018a8:	0800a925 	.word	0x0800a925
 80018ac:	0800aa58 	.word	0x0800aa58
 80018b0:	0800aa3c 	.word	0x0800aa3c
 80018b4:	0800aa65 	.word	0x0800aa65
 80018b8:	0800aa50 	.word	0x0800aa50
 80018bc:	0800aabb 	.word	0x0800aabb
 80018c0:	0800aad7 	.word	0x0800aad7
 80018c4:	0800ab0c 	.word	0x0800ab0c

080018c8 <os_init_get>:
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
	return os_init_done;
}
 80018c8:	4b01      	ldr	r3, [pc, #4]	; (80018d0 <os_init_get+0x8>)
 80018ca:	7818      	ldrb	r0, [r3, #0]
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000058c 	.word	0x2000058c

080018d4 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 80018d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 80018d8:	4e1f      	ldr	r6, [pc, #124]	; (8001958 <os_init+0x84>)
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 80018da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80018dc:	461f      	mov	r7, r3
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 80018de:	7833      	ldrb	r3, [r6, #0]
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 80018e0:	4680      	mov	r8, r0
 80018e2:	4689      	mov	r9, r1
 80018e4:	4692      	mov	sl, r2
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d133      	bne.n	8001952 <os_init+0x7e>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <os_init+0x88>)
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 80018ec:	4c1c      	ldr	r4, [pc, #112]	; (8001960 <os_init+0x8c>)
	OS_FPU_ENABLE();			//Enable
 80018ee:	f8d3 2d80 	ldr.w	r2, [r3, #3456]	; 0xd80
 80018f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018f6:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001900:	6022      	str	r2, [r4, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001908:	6022      	str	r2, [r4, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 800190a:	689c      	ldr	r4, [r3, #8]
	OS_SYSTICK_SET_PRIO(14);
 800190c:	22e0      	movs	r2, #224	; 0xe0
	OS_SYSTICK_DISABLE();
 800190e:	f024 0401 	bic.w	r4, r4, #1
 8001912:	609c      	str	r4, [r3, #8]
	OS_SYSTICK_SET_PRIO(14);
 8001914:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 8001918:	22f0      	movs	r2, #240	; 0xf0
 800191a:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 800191e:	689c      	ldr	r4, [r3, #8]
 8001920:	f044 0401 	orr.w	r4, r4, #1
 8001924:	609c      	str	r4, [r3, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 8001926:	f000 f8dd 	bl	8001ae4 <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 800192a:	462b      	mov	r3, r5
 800192c:	4652      	mov	r2, sl
 800192e:	4649      	mov	r1, r9
 8001930:	4640      	mov	r0, r8
 8001932:	f001 f975 	bl	8002c20 <os_task_init>
	if(ret != OS_ERR_OK)
 8001936:	b948      	cbnz	r0, 800194c <os_init+0x78>
		return ret;

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 8001938:	2301      	movs	r3, #1

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, OS_TASK_MODE_DELETE, 0, idle_stack_size, NULL);
 800193a:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800193e:	9000      	str	r0, [sp, #0]
 8001940:	4a08      	ldr	r2, [pc, #32]	; (8001964 <os_init+0x90>)
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <os_init+0x94>)
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 8001944:	7033      	strb	r3, [r6, #0]
	return os_task_create(&idle_task, idle_name, os_idle_task_fn, OS_TASK_MODE_DELETE, 0, idle_stack_size, NULL);
 8001946:	4639      	mov	r1, r7
 8001948:	f001 fc5c 	bl	8003204 <os_task_create>
}
 800194c:	b004      	add	sp, #16
 800194e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8001952:	f06f 0004 	mvn.w	r0, #4
 8001956:	e7f9      	b.n	800194c <os_init+0x78>
 8001958:	2000058c 	.word	0x2000058c
 800195c:	e000e008 	.word	0xe000e008
 8001960:	e000ef34 	.word	0xe000ef34
 8001964:	08001971 	.word	0x08001971
 8001968:	20014ddc 	.word	0x20014ddc

0800196c <os_task_on_ready_cb>:
 *
 **********************************************************************/
__weak void os_task_on_ready_cb(os_handle_t h){
	UNUSED_ARG(h);
	return;
}
 800196c:	4770      	bx	lr

0800196e <os_task_on_block_cb>:
 800196e:	4770      	bx	lr

08001970 <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 8001970:	e7fe      	b.n	8001970 <os_idle_task_fn>

08001972 <os_no_task_ready_cb>:
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
	return;
}
 8001972:	4770      	bx	lr

08001974 <os_insufficient_heap_cb>:
 8001974:	4770      	bx	lr

08001976 <os_evt_objTake>:
	 ------------------------------------------------------*/
	os_evt_t* evt = (os_evt_t*)h;

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 8001976:	b158      	cbz	r0, 8001990 <os_evt_objTake+0x1a>
	if(h->type != OS_OBJ_EVT) return OS_ERR_BAD_ARG;
 8001978:	7803      	ldrb	r3, [r0, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d108      	bne.n	8001990 <os_evt_objTake+0x1a>
	if(evt->state == OS_EVT_STATE_RESET) return OS_ERR_BAD_ARG;
 800197e:	7e03      	ldrb	r3, [r0, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d005      	beq.n	8001990 <os_evt_objTake+0x1a>

	/* Reset event if auto mode
	 ------------------------------------------------------*/
	if(evt->mode == OS_EVT_MODE_AUTO) evt->state = OS_EVT_STATE_RESET;
 8001984:	7e43      	ldrb	r3, [r0, #25]
 8001986:	b90b      	cbnz	r3, 800198c <os_evt_objTake+0x16>
 8001988:	2201      	movs	r2, #1
 800198a:	7602      	strb	r2, [r0, #24]

	return OS_ERR_OK;
 800198c:	2000      	movs	r0, #0
}
 800198e:	4770      	bx	lr
	if(h == NULL) return OS_ERR_BAD_ARG;
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	4770      	bx	lr

08001996 <os_evt_getFreeCount>:
	if(h == NULL) return 0;
 8001996:	b160      	cbz	r0, 80019b2 <os_evt_getFreeCount+0x1c>
	if(h->type != OS_OBJ_EVT) return 0;
 8001998:	7803      	ldrb	r3, [r0, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d108      	bne.n	80019b0 <os_evt_getFreeCount+0x1a>
	if(evt->state == OS_EVT_STATE_SET){
 800199e:	7e03      	ldrb	r3, [r0, #24]
 80019a0:	b933      	cbnz	r3, 80019b0 <os_evt_getFreeCount+0x1a>
		if(evt->mode == OS_EVT_MODE_MANUAL){
 80019a2:	7e43      	ldrb	r3, [r0, #25]
 80019a4:	2b01      	cmp	r3, #1
			freeCount = OS_OBJ_COUNT_INF;
 80019a6:	bf14      	ite	ne
 80019a8:	2001      	movne	r0, #1
 80019aa:	f04f 30ff 	moveq.w	r0, #4294967295
 80019ae:	4770      	bx	lr
	if(h == NULL) return 0;
 80019b0:	2000      	movs	r0, #0
}
 80019b2:	4770      	bx	lr

080019b4 <os_evt_create>:
 * @param os_evt_reset_mode_e mode 	: [ in] Event reset mode. Auto means the first task that waits for it will reset it. Manual means that the event must be reset using the os_evt_reset API
 * @param char* name				: [ in] Event's name. If an event with the same name already exists, its reference is returned. A null name always creates a nameless event.
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_evt_create(os_handle_t* h, os_evt_reset_mode_e mode, char const * name){
 80019b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b8:	4688      	mov	r8, r1
 80019ba:	4616      	mov	r6, r2

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 						return OS_ERR_BAD_ARG;
 80019bc:	4605      	mov	r5, r0
 80019be:	2800      	cmp	r0, #0
 80019c0:	d03c      	beq.n	8001a3c <os_evt_create+0x88>
	if(mode >= __OS_EVT_MODE_INVALID) 	return OS_ERR_BAD_ARG;
 80019c2:	2901      	cmp	r1, #1
 80019c4:	d83a      	bhi.n	8001a3c <os_evt_create+0x88>
	if(os_init_get() == false)			return OS_ERR_NOT_READY;
 80019c6:	f7ff ff7f 	bl	80018c8 <os_init_get>
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d039      	beq.n	8001a42 <os_evt_create+0x8e>

	/* If event exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 80019ce:	b156      	cbz	r6, 80019e6 <os_evt_create+0x32>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_EVT, name);
 80019d0:	4632      	mov	r2, r6
 80019d2:	2104      	movs	r1, #4
 80019d4:	481c      	ldr	r0, [pc, #112]	; (8001a48 <os_evt_create+0x94>)
 80019d6:	f000 f9c4 	bl	8001d62 <os_handle_list_searchByName>
		if(obj != NULL){
 80019da:	b120      	cbz	r0, 80019e6 <os_evt_create+0x32>
			*h = obj->element;
 80019dc:	6883      	ldr	r3, [r0, #8]
 80019de:	602b      	str	r3, [r5, #0]
			return OS_ERR_OK;
 80019e0:	2000      	movs	r0, #0

	/* Return
	 ------------------------------------------------------*/
	*h = (os_handle_t)evt;
	return OS_ERR_OK;
}
 80019e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	os_evt_t* evt = (os_evt_t*)os_heap_alloc(sizeof(os_evt_t));
 80019e6:	201c      	movs	r0, #28
 80019e8:	f000 f884 	bl	8001af4 <os_heap_alloc>
	if(evt == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80019ec:	4604      	mov	r4, r0
 80019ee:	b198      	cbz	r0, 8001a18 <os_evt_create+0x64>
	evt->obj.type			= OS_OBJ_EVT;
 80019f0:	2304      	movs	r3, #4
 80019f2:	7003      	strb	r3, [r0, #0]
	evt->obj.getFreeCount	= os_evt_getFreeCount;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <os_evt_create+0x98>)
 80019f6:	60c3      	str	r3, [r0, #12]
	evt->obj.objUpdate		= 0;
 80019f8:	2700      	movs	r7, #0
	evt->obj.obj_take		= os_evt_objTake;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <os_evt_create+0x9c>)
 80019fc:	6103      	str	r3, [r0, #16]
	evt->obj.objUpdate		= 0;
 80019fe:	7207      	strb	r7, [r0, #8]
	evt->obj.blockList		= os_list_init();
 8001a00:	f000 f98b 	bl	8001d1a <os_list_init>
	evt->state				= OS_EVT_STATE_RESET;
 8001a04:	2301      	movs	r3, #1
	evt->obj.blockList		= os_list_init();
 8001a06:	6160      	str	r0, [r4, #20]
	evt->obj.name			= (char*)name;
 8001a08:	6066      	str	r6, [r4, #4]
	evt->state				= OS_EVT_STATE_RESET;
 8001a0a:	7623      	strb	r3, [r4, #24]
	evt->mode				= mode;
 8001a0c:	f884 8019 	strb.w	r8, [r4, #25]
	if(evt->obj.blockList == NULL){
 8001a10:	b928      	cbnz	r0, 8001a1e <os_evt_create+0x6a>
		os_heap_free(evt);
 8001a12:	4620      	mov	r0, r4
 8001a14:	f000 f8ce 	bl	8001bb4 <os_heap_free>
	if(evt == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8001a18:	f06f 0002 	mvn.w	r0, #2
 8001a1c:	e7e1      	b.n	80019e2 <os_evt_create+0x2e>
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) evt, OS_LIST_FIRST);
 8001a1e:	463a      	mov	r2, r7
 8001a20:	4621      	mov	r1, r4
 8001a22:	4809      	ldr	r0, [pc, #36]	; (8001a48 <os_evt_create+0x94>)
 8001a24:	f000 f9c3 	bl	8001dae <os_list_add>
	if(ret != OS_ERR_OK) {
 8001a28:	b130      	cbz	r0, 8001a38 <os_evt_create+0x84>
		os_heap_free(evt);
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f000 f8c2 	bl	8001bb4 <os_heap_free>
		os_list_clear(evt->obj.blockList);
 8001a30:	6960      	ldr	r0, [r4, #20]
 8001a32:	f000 fa40 	bl	8001eb6 <os_list_clear>
 8001a36:	e7ef      	b.n	8001a18 <os_evt_create+0x64>
	*h = (os_handle_t)evt;
 8001a38:	602c      	str	r4, [r5, #0]
	return OS_ERR_OK;
 8001a3a:	e7d2      	b.n	80019e2 <os_evt_create+0x2e>
	if(h == NULL) 						return OS_ERR_BAD_ARG;
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	e7cf      	b.n	80019e2 <os_evt_create+0x2e>
	if(os_init_get() == false)			return OS_ERR_NOT_READY;
 8001a42:	f06f 0003 	mvn.w	r0, #3
 8001a46:	e7cc      	b.n	80019e2 <os_evt_create+0x2e>
 8001a48:	20014dc0 	.word	0x20014dc0
 8001a4c:	08001997 	.word	0x08001997
 8001a50:	08001977 	.word	0x08001977

08001a54 <os_evt_set>:
 *
 * @param os_handle_t h   	: [ in] Pointer to the event to set
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_evt_set(os_handle_t h){
 8001a54:	b507      	push	{r0, r1, r2, lr}
	 ------------------------------------------------------*/
	os_evt_t* evt = (os_evt_t*) h;

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 8001a56:	b1f0      	cbz	r0, 8001a96 <os_evt_set+0x42>
	if(h->type != OS_OBJ_EVT) return OS_ERR_BAD_ARG;
 8001a58:	7803      	ldrb	r3, [r0, #0]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d11b      	bne.n	8001a96 <os_evt_set+0x42>
	if(evt->state == OS_EVT_STATE_SET) return OS_ERR_OK;
 8001a5e:	7e03      	ldrb	r3, [r0, #24]
 8001a60:	b1e3      	cbz	r3, 8001a9c <os_evt_set+0x48>

	/* Enter critical section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001a62:	f3ef 8310 	mrs	r3, PRIMASK
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	b672      	cpsid	i
 8001a6a:	f3bf 8f6f 	isb	sy

	/* Tag as set
	 ------------------------------------------------------*/
	evt->state = OS_EVT_STATE_SET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	7603      	strb	r3, [r0, #24]

	/* Update blocking list and check if we must yield
	 ------------------------------------------------------*/
	bool must_yield = os_handle_list_updateAndCheck( (os_handle_t)evt );
 8001a72:	f000 faf1 	bl	8002058 <os_handle_list_updateAndCheck>

	/* Yield if necessary
	 ------------------------------------------------------*/
	if(must_yield && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8001a76:	b128      	cbz	r0, 8001a84 <os_evt_set+0x30>
 8001a78:	f001 f8ca 	bl	8002c10 <os_scheduler_state_get>
 8001a7c:	2801      	cmp	r0, #1
 8001a7e:	d101      	bne.n	8001a84 <os_evt_set+0x30>
 8001a80:	f001 f960 	bl	8002d44 <os_task_yeild>

	/* Exit
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8001a84:	9b01      	ldr	r3, [sp, #4]
 8001a86:	f383 8810 	msr	PRIMASK, r3
 8001a8a:	f3bf 8f6f 	isb	sy

	return OS_ERR_OK;
 8001a8e:	2000      	movs	r0, #0
}
 8001a90:	b003      	add	sp, #12
 8001a92:	f85d fb04 	ldr.w	pc, [sp], #4
	if(h == NULL) return OS_ERR_BAD_ARG;
 8001a96:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9a:	e7f9      	b.n	8001a90 <os_evt_set+0x3c>
	if(evt->state == OS_EVT_STATE_SET) return OS_ERR_OK;
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	e7f7      	b.n	8001a90 <os_evt_set+0x3c>

08001aa0 <os_evt_delete>:
 *
 * @param os_handle_t h : [ in] Pointer to the event to delete
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_evt_delete(os_handle_t h){
 8001aa0:	b510      	push	{r4, lr}

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	b170      	cbz	r0, 8001ac4 <os_evt_delete+0x24>
	if(h->type != OS_OBJ_EVT) return OS_ERR_BAD_ARG;
 8001aa6:	7803      	ldrb	r3, [r0, #0]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d10b      	bne.n	8001ac4 <os_evt_delete+0x24>

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8001aac:	4601      	mov	r1, r0
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <os_evt_delete+0x2c>)
 8001ab0:	f000 f9b9 	bl	8001e26 <os_list_remove>

	/* Free memory
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8001ab4:	6960      	ldr	r0, [r4, #20]
 8001ab6:	f000 f9fe 	bl	8001eb6 <os_list_clear>

	return os_heap_free(h);
 8001aba:	4620      	mov	r0, r4
}
 8001abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return os_heap_free(h);
 8001ac0:	f000 b878 	b.w	8001bb4 <os_heap_free>
}
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	20014dc0 	.word	0x20014dc0

08001ad0 <os_heap_BlockGetSize>:
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
	if(p == NULL) return 0; //Avoid explosion
 8001ad0:	b110      	cbz	r0, 8001ad8 <os_heap_BlockGetSize+0x8>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	b10b      	cbz	r3, 8001ada <os_heap_BlockGetSize+0xa>
 8001ad6:	1a18      	subs	r0, r3, r0
}
 8001ad8:	4770      	bx	lr
	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 8001ada:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <os_heap_BlockGetSize+0x10>)
 8001adc:	e7fb      	b.n	8001ad6 <os_heap_BlockGetSize+0x6>
 8001ade:	bf00      	nop
 8001ae0:	20014590 	.word	0x20014590

08001ae4 <os_heap_clear>:
 **********************************************************************/
void os_heap_clear(){

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 8001ae4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4801      	ldr	r0, [pc, #4]	; (8001af0 <os_heap_clear+0xc>)
 8001aec:	f007 b99a 	b.w	8008e24 <memset>
 8001af0:	20000590 	.word	0x20000590

08001af4 <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 8001af4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 8001af6:	b348      	cbz	r0, 8001b4c <os_heap_alloc+0x58>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001af8:	f3ef 8310 	mrs	r3, PRIMASK
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	b672      	cpsid	i
 8001b00:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
	uint32_t min_size = 0xFFFFFFFF;
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 8001b04:	4c29      	ldr	r4, [pc, #164]	; (8001bac <os_heap_alloc+0xb8>)

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 8001b06:	3007      	adds	r0, #7
 8001b08:	f020 0107 	bic.w	r1, r0, #7
	uint32_t min_size = 0xFFFFFFFF;
 8001b0c:	f04f 35ff 	mov.w	r5, #4294967295
	os_heap_header_t* pBlock = NULL;
 8001b10:	2200      	movs	r2, #0
 8001b12:	4626      	mov	r6, r4
	while(p != NULL){

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ffdb 	bl	8001ad0 <os_heap_BlockGetSize>
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 8001b1a:	6863      	ldr	r3, [r4, #4]
 8001b1c:	b933      	cbnz	r3, 8001b2c <os_heap_alloc+0x38>
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 8001b1e:	3808      	subs	r0, #8
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 8001b20:	42a8      	cmp	r0, r5
 8001b22:	d203      	bcs.n	8001b2c <os_heap_alloc+0x38>
 8001b24:	4281      	cmp	r1, r0
 8001b26:	bf9c      	itt	ls
 8001b28:	4605      	movls	r5, r0
 8001b2a:	4622      	movls	r2, r4
			min_size = data_size;
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 8001b2c:	6824      	ldr	r4, [r4, #0]
	while(p != NULL){
 8001b2e:	2c00      	cmp	r4, #0
 8001b30:	d1f0      	bne.n	8001b14 <os_heap_alloc+0x20>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 8001b32:	42b2      	cmp	r2, r6
 8001b34:	d302      	bcc.n	8001b3c <os_heap_alloc+0x48>
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <os_heap_alloc+0xbc>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d909      	bls.n	8001b50 <os_heap_alloc+0x5c>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 8001b3c:	f7ff ff1a 	bl	8001974 <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 8001b40:	9b01      	ldr	r3, [sp, #4]
 8001b42:	f383 8810 	msr	PRIMASK, r3
 8001b46:	f3bf 8f6f 	isb	sy
		return NULL;
 8001b4a:	2000      	movs	r0, #0
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
	OS_EXIT_CRITICAL();
	return ret;

}
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 8001b50:	2931      	cmp	r1, #49	; 0x31
 8001b52:	d814      	bhi.n	8001b7e <os_heap_alloc+0x8a>
	if(p == NULL) return NULL;
 8001b54:	b332      	cbz	r2, 8001ba4 <os_heap_alloc+0xb0>
	if(size == 0) return NULL;
 8001b56:	b339      	cbz	r1, 8001ba8 <os_heap_alloc+0xb4>
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 8001b58:	f101 0008 	add.w	r0, r1, #8
	if(newBlock->addr_next != (uint32_t)newTopHead){
 8001b5c:	6811      	ldr	r1, [r2, #0]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 8001b5e:	1883      	adds	r3, r0, r2
	if(newBlock->addr_next != (uint32_t)newTopHead){
 8001b60:	428b      	cmp	r3, r1
		newTopHead->addr_next = newBlock->addr_next;
 8001b62:	bf1e      	ittt	ne
 8001b64:	5081      	strne	r1, [r0, r2]
		newBlock->addr_next	  = (uint32_t) newTopHead;
 8001b66:	6013      	strne	r3, [r2, #0]
		newTopHead->block_used = 0;
 8001b68:	605c      	strne	r4, [r3, #4]
	newBlock->block_used = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 8001b6e:	f102 0008 	add.w	r0, r2, #8
	OS_EXIT_CRITICAL();
 8001b72:	9b01      	ldr	r3, [sp, #4]
 8001b74:	f383 8810 	msr	PRIMASK, r3
 8001b78:	f3bf 8f6f 	isb	sy
	return ret;
 8001b7c:	e7e6      	b.n	8001b4c <os_heap_alloc+0x58>
	if(p == NULL) return NULL;
 8001b7e:	4610      	mov	r0, r2
	if(p == NULL) return NULL;
 8001b80:	2a00      	cmp	r2, #0
 8001b82:	d0f6      	beq.n	8001b72 <os_heap_alloc+0x7e>
	uint32_t block_size = os_heap_BlockGetSize(p);
 8001b84:	f7ff ffa4 	bl	8001ad0 <os_heap_BlockGetSize>
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 8001b88:	1a51      	subs	r1, r2, r1
 8001b8a:	4408      	add	r0, r1
 8001b8c:	f1a0 0308 	sub.w	r3, r0, #8
	if(newBlock != oldTopHead){
 8001b90:	429a      	cmp	r2, r3
		newBlock->addr_next = oldTopHead->addr_next;
 8001b92:	bf1e      	ittt	ne
 8001b94:	6811      	ldrne	r1, [r2, #0]
 8001b96:	f840 1c08 	strne.w	r1, [r0, #-8]
		oldTopHead->block_used = 0;
 8001b9a:	e9c2 3400 	strdne	r3, r4, [r2]
	newBlock->block_used = 1;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e7e6      	b.n	8001b72 <os_heap_alloc+0x7e>
	if(p == NULL) return NULL;
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	e7e4      	b.n	8001b72 <os_heap_alloc+0x7e>
 8001ba8:	4608      	mov	r0, r1
 8001baa:	e7e2      	b.n	8001b72 <os_heap_alloc+0x7e>
 8001bac:	20000590 	.word	0x20000590
 8001bb0:	2001458f 	.word	0x2001458f

08001bb4 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 8001bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 8001bb6:	b328      	cbz	r0, 8001c04 <os_heap_free+0x50>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <os_heap_free+0x94>)
 8001bba:	4298      	cmp	r0, r3
 8001bbc:	d322      	bcc.n	8001c04 <os_heap_free+0x50>
 8001bbe:	4d23      	ldr	r5, [pc, #140]	; (8001c4c <os_heap_free+0x98>)
 8001bc0:	42a8      	cmp	r0, r5
 8001bc2:	d81f      	bhi.n	8001c04 <os_heap_free+0x50>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001bc4:	f3ef 8210 	mrs	r2, PRIMASK
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	b672      	cpsid	i
 8001bcc:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 8001bd0:	3b08      	subs	r3, #8

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
	os_heap_header_t* pPrev = NULL;
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	461e      	mov	r6, r3
	bool BlockFound = false;
	while(1){

		/* Calculate if out of bounds of block found
		 ---------------------------------------------------*/
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 8001bd6:	42b3      	cmp	r3, r6
 8001bd8:	d312      	bcc.n	8001c00 <os_heap_free+0x4c>
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	bf8c      	ite	hi
 8001bde:	2400      	movhi	r4, #0
 8001be0:	2401      	movls	r4, #1
		BlockFound = (uint32_t)cur <= (uint32_t)p && (cur->addr_next == 0 || (uint32_t)p <= (uint32_t)cur->addr_next );
 8001be2:	4283      	cmp	r3, r0
 8001be4:	d811      	bhi.n	8001c0a <os_heap_free+0x56>
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	b1a2      	cbz	r2, 8001c14 <os_heap_free+0x60>
 8001bea:	4290      	cmp	r0, r2
 8001bec:	d80d      	bhi.n	8001c0a <os_heap_free+0x56>

		/* Break if we finished searching
		 ---------------------------------------------------*/
		if(!inBounds || BlockFound) break;
 8001bee:	b9ac      	cbnz	r4, 8001c1c <os_heap_free+0x68>
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if( !BlockFound || !inBounds ) {
		OS_EXIT_CRITICAL();
 8001bf0:	9b01      	ldr	r3, [sp, #4]
 8001bf2:	f383 8810 	msr	PRIMASK, r3
 8001bf6:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 8001bfa:	f06f 0001 	mvn.w	r0, #1
 8001bfe:	e020      	b.n	8001c42 <os_heap_free+0x8e>
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 8001c00:	2400      	movs	r4, #0
 8001c02:	e7ee      	b.n	8001be2 <os_heap_free+0x2e>
	if(p == NULL) return OS_ERR_BAD_ARG;
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	e01b      	b.n	8001c42 <os_heap_free+0x8e>
		if(!inBounds || BlockFound) break;
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <os_heap_free+0x3c>
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 8001c0e:	4619      	mov	r1, r3
		cur = (os_heap_header_t*) ( cur->addr_next );
 8001c10:	681b      	ldr	r3, [r3, #0]
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 8001c12:	e7e0      	b.n	8001bd6 <os_heap_free+0x22>
		if(!inBounds || BlockFound) break;
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	d0eb      	beq.n	8001bf0 <os_heap_free+0x3c>
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e006      	b.n	8001c2a <os_heap_free+0x76>
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	6058      	str	r0, [r3, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 8001c20:	6850      	ldr	r0, [r2, #4]
 8001c22:	b910      	cbnz	r0, 8001c2a <os_heap_free+0x76>
		cur->addr_next = pNext->addr_next;
 8001c24:	6814      	ldr	r4, [r2, #0]
 8001c26:	601c      	str	r4, [r3, #0]
		pNext->addr_next = 0; //For principle, but not necessary
 8001c28:	6010      	str	r0, [r2, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 8001c2a:	b121      	cbz	r1, 8001c36 <os_heap_free+0x82>
 8001c2c:	684a      	ldr	r2, [r1, #4]
 8001c2e:	b912      	cbnz	r2, 8001c36 <os_heap_free+0x82>
		pPrev->addr_next = cur->addr_next;
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	6008      	str	r0, [r1, #0]
		cur->addr_next = 0; //For principle, but not necessary
 8001c34:	601a      	str	r2, [r3, #0]
	}

	OS_EXIT_CRITICAL();
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	f383 8810 	msr	PRIMASK, r3
 8001c3c:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8001c40:	2000      	movs	r0, #0
}
 8001c42:	b002      	add	sp, #8
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
 8001c46:	bf00      	nop
 8001c48:	20000598 	.word	0x20000598
 8001c4c:	2001458f 	.word	0x2001458f

08001c50 <os_heap_monitor>:
 *
 * @brief This function returns data about the heap's utilization
 *
 * @return os_heap_mon_t : Struct containing heap info
 **********************************************************************/
os_heap_mon_t os_heap_monitor(){
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	b087      	sub	sp, #28

	/* Declare Return structure
	 ---------------------------------------------------*/
	os_heap_mon_t ret;
	memset(&ret, 0, sizeof(ret));
 8001c54:	2200      	movs	r2, #0
	ret.total_size = sizeof(os_heap);
 8001c56:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
os_heap_mon_t os_heap_monitor(){
 8001c5a:	4604      	mov	r4, r0
	memset(&ret, 0, sizeof(ret));
 8001c5c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8001c60:	9205      	str	r2, [sp, #20]
	ret.total_size = sizeof(os_heap);
 8001c62:	9302      	str	r3, [sp, #8]

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001c64:	f3ef 8310 	mrs	r3, PRIMASK
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	b672      	cpsid	i
 8001c6c:	f3bf 8f6f 	isb	sy

	/* Declare iterators
	 ---------------------------------------------------*/
	os_heap_header_t* pPrev = NULL;
	os_heap_header_t* pNext = NULL;
	os_heap_header_t* cur = (os_heap_header_t*)(&os_heap[0]);
 8001c70:	491e      	ldr	r1, [pc, #120]	; (8001cec <os_heap_monitor+0x9c>)
	 ---------------------------------------------------*/
	while(cur != NULL){

		/* Calculate block size
		 ---------------------------------------------------*/
		uint32_t block_sz = os_heap_BlockGetSize(cur);
 8001c72:	4608      	mov	r0, r1
 8001c74:	f7ff ff2c 	bl	8001ad0 <os_heap_BlockGetSize>

		/* Get reference to next block
		 ---------------------------------------------------*/
		pNext = (os_heap_header_t*) ( cur->addr_next );
 8001c78:	680b      	ldr	r3, [r1, #0]

		/* Calculate if next and previous blocks are used
		 ---------------------------------------------------*/
		uint8_t prev_block_used = ( (pPrev != NULL) && (pPrev->block_used == 1) );
 8001c7a:	b11a      	cbz	r2, 8001c84 <os_heap_monitor+0x34>
 8001c7c:	6852      	ldr	r2, [r2, #4]
 8001c7e:	1e57      	subs	r7, r2, #1
 8001c80:	427a      	negs	r2, r7
 8001c82:	417a      	adcs	r2, r7
		uint8_t next_block_used = ( (pNext != NULL) && (pNext->block_used == 1) );
 8001c84:	b36b      	cbz	r3, 8001ce2 <os_heap_monitor+0x92>
 8001c86:	685d      	ldr	r5, [r3, #4]
 8001c88:	1e6e      	subs	r6, r5, #1
 8001c8a:	4275      	negs	r5, r6
 8001c8c:	4175      	adcs	r5, r6

		/* Update return Data
		 ---------------------------------------------------*/
		ret.used_size += ( (cur->block_used == 1) ? block_sz : 0 );
 8001c8e:	684e      	ldr	r6, [r1, #4]
 8001c90:	9f03      	ldr	r7, [sp, #12]
		uint32_t block_sz = os_heap_BlockGetSize(cur);
 8001c92:	2e01      	cmp	r6, #1
 8001c94:	bf0c      	ite	eq
 8001c96:	4684      	moveq	ip, r0
 8001c98:	f04f 0c00 	movne.w	ip, #0
		ret.used_size += ( (cur->block_used == 1) ? block_sz : 0 );
 8001c9c:	4467      	add	r7, ip
 8001c9e:	9703      	str	r7, [sp, #12]
		ret.fragmented_size += ( ( (next_block_used == 1) && (prev_block_used == 1) && (cur->block_used == 0) ) ? block_sz : 0 );
 8001ca0:	9f05      	ldr	r7, [sp, #20]
 8001ca2:	b305      	cbz	r5, 8001ce6 <os_heap_monitor+0x96>
 8001ca4:	b1fa      	cbz	r2, 8001ce6 <os_heap_monitor+0x96>
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	bf0c      	ite	eq
 8001caa:	4602      	moveq	r2, r0
 8001cac:	2200      	movne	r2, #0
 8001cae:	443a      	add	r2, r7
		ret.biggest_block_size = ( (cur->block_used == 1) && (block_sz > ret.biggest_block_size) ? block_sz : ret.biggest_block_size );
 8001cb0:	2e01      	cmp	r6, #1
		ret.fragmented_size += ( ( (next_block_used == 1) && (prev_block_used == 1) && (cur->block_used == 0) ) ? block_sz : 0 );
 8001cb2:	9205      	str	r2, [sp, #20]
 8001cb4:	9a04      	ldr	r2, [sp, #16]
		ret.biggest_block_size = ( (cur->block_used == 1) && (block_sz > ret.biggest_block_size) ? block_sz : ret.biggest_block_size );
 8001cb6:	d102      	bne.n	8001cbe <os_heap_monitor+0x6e>
 8001cb8:	4282      	cmp	r2, r0
 8001cba:	bf38      	it	cc
 8001cbc:	4602      	movcc	r2, r0
 8001cbe:	9204      	str	r2, [sp, #16]
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	4619      	mov	r1, r3
	while(cur != NULL){
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1d4      	bne.n	8001c72 <os_heap_monitor+0x22>
		cur = pNext;
	}

	/* Return data
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	f383 8810 	msr	PRIMASK, r3
 8001cce:	f3bf 8f6f 	isb	sy
	return ret;
 8001cd2:	ab06      	add	r3, sp, #24
 8001cd4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8001cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001cdc:	4620      	mov	r0, r4
 8001cde:	b007      	add	sp, #28
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t next_block_used = ( (pNext != NULL) && (pNext->block_used == 1) );
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	e7d3      	b.n	8001c8e <os_heap_monitor+0x3e>
		ret.fragmented_size += ( ( (next_block_used == 1) && (prev_block_used == 1) && (cur->block_used == 0) ) ? block_sz : 0 );
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	e7e1      	b.n	8001cae <os_heap_monitor+0x5e>
 8001cea:	bf00      	nop
 8001cec:	20000590 	.word	0x20000590

08001cf0 <os_elf_memoryRecalc>:
 * @param os_elf_mapping_el_t map[]	: [ in] Array containing the old and new addresses of all segments
 * @param size_t map_size			: [ in] Size of the map array
 *
 * @return uint32_t : the new address or 0 if a problem occured
 **********************************************************************/
static uint32_t os_elf_memoryRecalc(uint32_t originalAddr, os_elf_mapping_el_t map[], size_t map_size){
 8001cf0:	b530      	push	{r4, r5, lr}
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	fb03 1202 	mla	r2, r3, r2, r1

	/* For each segment
	 ------------------------------------------------------*/
	for(int i = 0; i < map_size; i++){
 8001cf8:	4291      	cmp	r1, r2
 8001cfa:	d101      	bne.n	8001d00 <os_elf_memoryRecalc+0x10>
		if( sAddr <= originalAddr && originalAddr < eAddr ){
			return originalAddr - sAddr + vAddr;
		}
	}

	return 0;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e009      	b.n	8001d14 <os_elf_memoryRecalc+0x24>
		uint32_t sAddr = map[i].original_addr;
 8001d00:	680c      	ldr	r4, [r1, #0]
		if( sAddr <= originalAddr && originalAddr < eAddr ){
 8001d02:	4284      	cmp	r4, r0
		uint32_t vAddr = map[i].remapped_addr;
 8001d04:	e9d1 3501 	ldrd	r3, r5, [r1, #4]
		if( sAddr <= originalAddr && originalAddr < eAddr ){
 8001d08:	d805      	bhi.n	8001d16 <os_elf_memoryRecalc+0x26>
		uint32_t eAddr = map[i].original_addr + map[i].size;
 8001d0a:	4425      	add	r5, r4
		if( sAddr <= originalAddr && originalAddr < eAddr ){
 8001d0c:	4285      	cmp	r5, r0
 8001d0e:	d902      	bls.n	8001d16 <os_elf_memoryRecalc+0x26>
			return originalAddr - sAddr + vAddr;
 8001d10:	4418      	add	r0, r3
 8001d12:	1b00      	subs	r0, r0, r4
}
 8001d14:	bd30      	pop	{r4, r5, pc}
 8001d16:	310c      	adds	r1, #12
 8001d18:	e7ee      	b.n	8001cf8 <os_elf_memoryRecalc+0x8>

08001d1a <os_list_init>:
os_list_head_t* os_list_init(){
 8001d1a:	b508      	push	{r3, lr}
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 8001d1c:	201c      	movs	r0, #28
 8001d1e:	f7ff fee9 	bl	8001af4 <os_heap_alloc>
	if(ret == NULL) return NULL;
 8001d22:	b130      	cbz	r0, 8001d32 <os_list_init+0x18>
	ret->head.next = NULL;
 8001d24:	2300      	movs	r3, #0
	ret->head.prev = NULL;
 8001d26:	e9c0 3300 	strd	r3, r3, [r0]
	ret->last = NULL;
 8001d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	ret->head.element = NULL;
 8001d2e:	6083      	str	r3, [r0, #8]
	ret->listSize = 0;
 8001d30:	6183      	str	r3, [r0, #24]
}
 8001d32:	bd08      	pop	{r3, pc}

08001d34 <os_list_search>:
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 8001d34:	b082      	sub	sp, #8
	if(el == NULL) return NULL;
 8001d36:	b191      	cbz	r1, 8001d5e <os_list_search+0x2a>
	if(head == NULL) return NULL;
 8001d38:	b178      	cbz	r0, 8001d5a <os_list_search+0x26>
	OS_ENTER_CRITICAL();
 8001d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	b672      	cpsid	i
 8001d42:	f3bf 8f6f 	isb	sy
		it = it->next;
 8001d46:	6800      	ldr	r0, [r0, #0]
	while(it != NULL && it->element != el){
 8001d48:	b110      	cbz	r0, 8001d50 <os_list_search+0x1c>
 8001d4a:	6883      	ldr	r3, [r0, #8]
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d1fa      	bne.n	8001d46 <os_list_search+0x12>
	OS_EXIT_CRITICAL();
 8001d50:	9b01      	ldr	r3, [sp, #4]
 8001d52:	f383 8810 	msr	PRIMASK, r3
 8001d56:	f3bf 8f6f 	isb	sy
}
 8001d5a:	b002      	add	sp, #8
 8001d5c:	4770      	bx	lr
	if(el == NULL) return NULL;
 8001d5e:	4608      	mov	r0, r1
 8001d60:	e7fb      	b.n	8001d5a <os_list_search+0x26>

08001d62 <os_handle_list_searchByName>:
os_list_cell_t* os_handle_list_searchByName(os_list_head_t* head, os_obj_type_e type, char const * name){
 8001d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d64:	460e      	mov	r6, r1
 8001d66:	4615      	mov	r5, r2
	if(head == NULL) return NULL;
 8001d68:	b1e8      	cbz	r0, 8001da6 <os_handle_list_searchByName+0x44>
	if(name == NULL) return NULL;
 8001d6a:	b1f2      	cbz	r2, 8001daa <os_handle_list_searchByName+0x48>
	OS_ENTER_CRITICAL();
 8001d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	b672      	cpsid	i
 8001d74:	f3bf 8f6f 	isb	sy
	os_list_cell_t* it = head->head.next;
 8001d78:	6804      	ldr	r4, [r0, #0]
	while(it != NULL){
 8001d7a:	b93c      	cbnz	r4, 8001d8c <os_handle_list_searchByName+0x2a>
	OS_EXIT_CRITICAL();
 8001d7c:	9b01      	ldr	r3, [sp, #4]
 8001d7e:	f383 8810 	msr	PRIMASK, r3
 8001d82:	f3bf 8f6f 	isb	sy
}
 8001d86:	4620      	mov	r0, r4
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 8001d8c:	68a3      	ldr	r3, [r4, #8]
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	42b2      	cmp	r2, r6
 8001d92:	d106      	bne.n	8001da2 <os_handle_list_searchByName+0x40>
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	b121      	cbz	r1, 8001da2 <os_handle_list_searchByName+0x40>
 8001d98:	4628      	mov	r0, r5
 8001d9a:	f7fe fa19 	bl	80001d0 <strcmp>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0ec      	beq.n	8001d7c <os_handle_list_searchByName+0x1a>
		it = it->next;
 8001da2:	6824      	ldr	r4, [r4, #0]
 8001da4:	e7e9      	b.n	8001d7a <os_handle_list_searchByName+0x18>
	if(head == NULL) return NULL;
 8001da6:	4604      	mov	r4, r0
 8001da8:	e7ed      	b.n	8001d86 <os_handle_list_searchByName+0x24>
 8001daa:	4614      	mov	r4, r2
 8001dac:	e7eb      	b.n	8001d86 <os_handle_list_searchByName+0x24>

08001dae <os_list_add>:
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 8001dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001db0:	4604      	mov	r4, r0
 8001db2:	460e      	mov	r6, r1
 8001db4:	4615      	mov	r5, r2
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8001db6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	b672      	cpsid	i
 8001dbe:	f3bf 8f6f 	isb	sy
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 8001dc2:	2010      	movs	r0, #16
 8001dc4:	f7ff fe96 	bl	8001af4 <os_heap_alloc>
	if(new == NULL) {
 8001dc8:	b940      	cbnz	r0, 8001ddc <os_list_add+0x2e>
		OS_EXIT_CRITICAL();
 8001dca:	9b01      	ldr	r3, [sp, #4]
 8001dcc:	f383 8810 	msr	PRIMASK, r3
 8001dd0:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 8001dd4:	f06f 0002 	mvn.w	r0, #2
}
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
	new->order  = head->listSize++;
 8001ddc:	69a3      	ldr	r3, [r4, #24]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	61a2      	str	r2, [r4, #24]
	new->element = el;
 8001de2:	e9c0 6302 	strd	r6, r3, [r0, #8]
	if(head->head.next == NULL) {
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	b95b      	cbnz	r3, 8001e02 <os_list_add+0x54>
		head->last = new;
 8001dea:	6160      	str	r0, [r4, #20]
		new->next = NULL;
 8001dec:	e9c0 3400 	strd	r3, r4, [r0]
		head->head.next = new;
 8001df0:	6020      	str	r0, [r4, #0]
			head->first = new;
 8001df2:	6120      	str	r0, [r4, #16]
	OS_EXIT_CRITICAL();
 8001df4:	9b01      	ldr	r3, [sp, #4]
 8001df6:	f383 8810 	msr	PRIMASK, r3
 8001dfa:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e7ea      	b.n	8001dd8 <os_list_add+0x2a>
		if(pos == OS_LIST_FIRST){
 8001e02:	b93d      	cbnz	r5, 8001e14 <os_list_add+0x66>
			new->prev = head->first->prev;
 8001e04:	6923      	ldr	r3, [r4, #16]
 8001e06:	685a      	ldr	r2, [r3, #4]
			new->next = head->first;
 8001e08:	e9c0 3200 	strd	r3, r2, [r0]
			head->first->prev->next = new;
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	6010      	str	r0, [r2, #0]
			head->first->prev = new;
 8001e10:	6058      	str	r0, [r3, #4]
 8001e12:	e7ee      	b.n	8001df2 <os_list_add+0x44>
		if(pos == OS_LIST_LAST){
 8001e14:	2d01      	cmp	r5, #1
 8001e16:	d1ed      	bne.n	8001df4 <os_list_add+0x46>
			new->next  = head->last->next;
 8001e18:	6963      	ldr	r3, [r4, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
			new->prev  = head->last;
 8001e1c:	e9c0 2300 	strd	r2, r3, [r0]
			head->last->next = new;
 8001e20:	6018      	str	r0, [r3, #0]
			head->last = new;
 8001e22:	6160      	str	r0, [r4, #20]
 8001e24:	e7e6      	b.n	8001df4 <os_list_add+0x46>

08001e26 <os_list_remove>:
os_err_e os_list_remove(os_list_head_t* head, void* el){
 8001e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e28:	4602      	mov	r2, r0
	if(t == NULL) return OS_ERR_BAD_ARG;
 8001e2a:	460e      	mov	r6, r1
 8001e2c:	2900      	cmp	r1, #0
 8001e2e:	d03b      	beq.n	8001ea8 <os_list_remove+0x82>
	os_list_cell_t* pCell = os_list_search(head, el);
 8001e30:	f7ff ff80 	bl	8001d34 <os_list_search>
	if(pCell == NULL) return OS_ERR_INVALID;
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d03b      	beq.n	8001eb0 <os_list_remove+0x8a>
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8001e38:	f3ef 8310 	mrs	r3, PRIMASK
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	b672      	cpsid	i
 8001e40:	f3bf 8f6f 	isb	sy
	os_list_cell_t* pPrev = NULL;
 8001e44:	2100      	movs	r1, #0
	os_list_cell_t* it = &head->head;
 8001e46:	4615      	mov	r5, r2
	while(it->next != NULL){
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	bb03      	cbnz	r3, 8001e8e <os_list_remove+0x68>
	if(pCell == head->first){
 8001e4c:	6913      	ldr	r3, [r2, #16]
 8001e4e:	4283      	cmp	r3, r0
		head->first = head->first->next;
 8001e50:	bf04      	itt	eq
 8001e52:	6803      	ldreq	r3, [r0, #0]
 8001e54:	6113      	streq	r3, [r2, #16]
	if(pCell == head->last){
 8001e56:	6953      	ldr	r3, [r2, #20]
 8001e58:	4283      	cmp	r3, r0
 8001e5a:	d104      	bne.n	8001e66 <os_list_remove+0x40>
		head->last = (head->last->prev == &head->head) ? NULL : head->last->prev;
 8001e5c:	6843      	ldr	r3, [r0, #4]
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	bf08      	it	eq
 8001e62:	2300      	moveq	r3, #0
 8001e64:	6153      	str	r3, [r2, #20]
	pPrev->next = pPrev->next->next;
 8001e66:	680b      	ldr	r3, [r1, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	600b      	str	r3, [r1, #0]
	if(pCell->next != NULL) pCell->next->prev = pCell->prev;
 8001e6c:	6803      	ldr	r3, [r0, #0]
 8001e6e:	b10b      	cbz	r3, 8001e74 <os_list_remove+0x4e>
 8001e70:	6841      	ldr	r1, [r0, #4]
 8001e72:	6059      	str	r1, [r3, #4]
	head->listSize--;
 8001e74:	6993      	ldr	r3, [r2, #24]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6193      	str	r3, [r2, #24]
	OS_EXIT_CRITICAL();
 8001e7a:	9b01      	ldr	r3, [sp, #4]
 8001e7c:	f383 8810 	msr	PRIMASK, r3
 8001e80:	f3bf 8f6f 	isb	sy
}
 8001e84:	b003      	add	sp, #12
 8001e86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return os_heap_free(pCell);
 8001e8a:	f7ff be93 	b.w	8001bb4 <os_heap_free>
		if(it->next->order > pCell->order) it->next->order--;
 8001e8e:	68dc      	ldr	r4, [r3, #12]
 8001e90:	68c7      	ldr	r7, [r0, #12]
 8001e92:	42bc      	cmp	r4, r7
 8001e94:	bf84      	itt	hi
 8001e96:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8001e9a:	60dc      	strhi	r4, [r3, #12]
		if(it->next->element == el) pPrev = it;
 8001e9c:	689c      	ldr	r4, [r3, #8]
 8001e9e:	42b4      	cmp	r4, r6
 8001ea0:	bf08      	it	eq
 8001ea2:	4629      	moveq	r1, r5
 8001ea4:	461d      	mov	r5, r3
 8001ea6:	e7cf      	b.n	8001e48 <os_list_remove+0x22>
	if(t == NULL) return OS_ERR_BAD_ARG;
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001eac:	b003      	add	sp, #12
 8001eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(pCell == NULL) return OS_ERR_INVALID;
 8001eb0:	f06f 0001 	mvn.w	r0, #1
 8001eb4:	e7fa      	b.n	8001eac <os_list_remove+0x86>

08001eb6 <os_list_clear>:
void os_list_clear(os_list_head_t* head){
 8001eb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(head == NULL) return;
 8001eb8:	4604      	mov	r4, r0
 8001eba:	b198      	cbz	r0, 8001ee4 <os_list_clear+0x2e>
	OS_CRITICAL_SECTION(
 8001ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	b672      	cpsid	i
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	6805      	ldr	r5, [r0, #0]
 8001eca:	f7ff fe73 	bl	8001bb4 <os_heap_free>
 8001ece:	4628      	mov	r0, r5
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <os_list_clear+0x12>
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff fe6d 	bl	8001bb4 <os_heap_free>
 8001eda:	9b01      	ldr	r3, [sp, #4]
 8001edc:	f383 8810 	msr	PRIMASK, r3
 8001ee0:	f3bf 8f6f 	isb	sy
}
 8001ee4:	b003      	add	sp, #12
 8001ee6:	bd30      	pop	{r4, r5, pc}

08001ee8 <os_task_list_sort>:
void os_task_list_sort(os_list_head_t* head){
 8001ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(head == NULL) return;
 8001eea:	4604      	mov	r4, r0
 8001eec:	b190      	cbz	r0, 8001f14 <os_task_list_sort+0x2c>
	OS_ENTER_CRITICAL();
 8001eee:	f3ef 8310 	mrs	r3, PRIMASK
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	b672      	cpsid	i
 8001ef6:	f3bf 8f6f 	isb	sy
	os_list_cell_t* p = head->head.next;
 8001efa:	6805      	ldr	r5, [r0, #0]
	while(p != NULL){
 8001efc:	b965      	cbnz	r5, 8001f18 <os_task_list_sort+0x30>
	os_list_cell_t* it_slow = &head->head;
 8001efe:	4625      	mov	r5, r4
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	b113      	cbz	r3, 8001f0a <os_task_list_sort+0x22>
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d130      	bne.n	8001f6c <os_task_list_sort+0x84>
	OS_EXIT_CRITICAL();
 8001f0a:	9b01      	ldr	r3, [sp, #4]
 8001f0c:	f383 8810 	msr	PRIMASK, r3
 8001f10:	f3bf 8f6f 	isb	sy
}
 8001f14:	b003      	add	sp, #12
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 8001f18:	68ae      	ldr	r6, [r5, #8]
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	f000 ffdc 	bl	8002ed8 <os_task_getPrio>
 8001f20:	f886 004c 	strb.w	r0, [r6, #76]	; 0x4c
		p = p->next;
 8001f24:	682d      	ldr	r5, [r5, #0]
 8001f26:	e7e9      	b.n	8001efc <os_task_list_sort+0x14>
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8001f28:	688b      	ldr	r3, [r1, #8]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8001f2a:	68d7      	ldr	r7, [r2, #12]
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8001f2c:	f993 e04c 	ldrsb.w	lr, [r3, #76]	; 0x4c
 8001f30:	6893      	ldr	r3, [r2, #8]
 8001f32:	f993 c04c 	ldrsb.w	ip, [r3, #76]	; 0x4c
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8001f36:	68cb      	ldr	r3, [r1, #12]
 8001f38:	42bb      	cmp	r3, r7
 8001f3a:	bf94      	ite	ls
 8001f3c:	2300      	movls	r3, #0
 8001f3e:	2301      	movhi	r3, #1
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8001f40:	45e6      	cmp	lr, ip
 8001f42:	bf18      	it	ne
 8001f44:	2300      	movne	r3, #0
 8001f46:	bfb8      	it	lt
 8001f48:	f043 0301 	orrlt.w	r3, r3, #1
			if(swap){
 8001f4c:	b123      	cbz	r3, 8001f58 <os_task_list_sort+0x70>
				it_fast->next = pN2;
 8001f4e:	6002      	str	r2, [r0, #0]
				pN1->next = pN2->next;
 8001f50:	6816      	ldr	r6, [r2, #0]
 8001f52:	600e      	str	r6, [r1, #0]
				pN2->next = pN1;
 8001f54:	6011      	str	r1, [r2, #0]
				changeMade = 1;
 8001f56:	461e      	mov	r6, r3
			it_fast = it_fast->next;
 8001f58:	6800      	ldr	r0, [r0, #0]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8001f5a:	6801      	ldr	r1, [r0, #0]
 8001f5c:	b111      	cbz	r1, 8001f64 <os_task_list_sort+0x7c>
 8001f5e:	680a      	ldr	r2, [r1, #0]
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d1e1      	bne.n	8001f28 <os_task_list_sort+0x40>
		if(changeMade == 0) break;
 8001f64:	2e00      	cmp	r6, #0
 8001f66:	d0d0      	beq.n	8001f0a <os_task_list_sort+0x22>
		it_slow = it_slow->next;
 8001f68:	682d      	ldr	r5, [r5, #0]
 8001f6a:	e7c9      	b.n	8001f00 <os_task_list_sort+0x18>
		os_list_cell_t* it_fast = &head->head;
 8001f6c:	4620      	mov	r0, r4
		bool changeMade = 0;
 8001f6e:	2600      	movs	r6, #0
 8001f70:	e7f3      	b.n	8001f5a <os_task_list_sort+0x72>
	...

08001f74 <os_handle_list_getObjToUpdate>:
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <os_handle_list_getObjToUpdate+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b90b      	cbnz	r3, 8001f7e <os_handle_list_getObjToUpdate+0xa>
	return NULL;
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	e003      	b.n	8001f86 <os_handle_list_getObjToUpdate+0x12>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 8001f7e:	6898      	ldr	r0, [r3, #8]
 8001f80:	7a02      	ldrb	r2, [r0, #8]
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d0f7      	beq.n	8001f76 <os_handle_list_getObjToUpdate+0x2>
}
 8001f86:	4770      	bx	lr
 8001f88:	20014dc0 	.word	0x20014dc0

08001f8c <os_task_list_isObjFreeOnTask>:
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 8001f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f90:	4606      	mov	r6, r0
 8001f92:	4689      	mov	r9, r1
	OS_ENTER_CRITICAL();
 8001f94:	f3ef 8310 	mrs	r3, PRIMASK
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	b672      	cpsid	i
 8001f9c:	f3bf 8f6f 	isb	sy
	uint32_t freeCount = obj->getFreeCount(obj);
 8001fa0:	68c3      	ldr	r3, [r0, #12]
 8001fa2:	4798      	blx	r3
	if(freeCount == 0) {
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	b928      	cbnz	r0, 8001fb4 <os_task_list_isObjFreeOnTask+0x28>
			OS_EXIT_CRITICAL();
 8001fa8:	9b01      	ldr	r3, [sp, #4]
 8001faa:	f383 8810 	msr	PRIMASK, r3
 8001fae:	f3bf 8f6f 	isb	sy
			return 0;
 8001fb2:	e00b      	b.n	8001fcc <os_task_list_isObjFreeOnTask+0x40>
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 8001fb4:	6970      	ldr	r0, [r6, #20]
 8001fb6:	6983      	ldr	r3, [r0, #24]
 8001fb8:	42a3      	cmp	r3, r4
 8001fba:	d901      	bls.n	8001fc0 <os_task_list_isObjFreeOnTask+0x34>
 8001fbc:	1c63      	adds	r3, r4, #1
 8001fbe:	d109      	bne.n	8001fd4 <os_task_list_isObjFreeOnTask+0x48>
		OS_EXIT_CRITICAL();
 8001fc0:	9b01      	ldr	r3, [sp, #4]
 8001fc2:	f383 8810 	msr	PRIMASK, r3
 8001fc6:	f3bf 8f6f 	isb	sy
		return 1;
 8001fca:	2401      	movs	r4, #1
}
 8001fcc:	4620      	mov	r0, r4
 8001fce:	b003      	add	sp, #12
 8001fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	os_task_list_sort(obj->blockList);
 8001fd4:	f7ff ff88 	bl	8001ee8 <os_task_list_sort>
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8001fd8:	6973      	ldr	r3, [r6, #20]
 8001fda:	681f      	ldr	r7, [r3, #0]
 8001fdc:	b947      	cbnz	r7, 8001ff0 <os_task_list_isObjFreeOnTask+0x64>
	OS_EXIT_CRITICAL();
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	f383 8810 	msr	PRIMASK, r3
 8001fe4:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 8001fe8:	3400      	adds	r4, #0
 8001fea:	bf18      	it	ne
 8001fec:	2401      	movne	r4, #1
 8001fee:	e7ed      	b.n	8001fcc <os_task_list_isObjFreeOnTask+0x40>
		os_task_t* t = (os_task_t*) it->element;
 8001ff0:	68bd      	ldr	r5, [r7, #8]
		if(freeCount == 0) {
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d0d8      	beq.n	8001fa8 <os_task_list_isObjFreeOnTask+0x1c>
		if(it->element == task) break;
 8001ff6:	454d      	cmp	r5, r9
 8001ff8:	d0f1      	beq.n	8001fde <os_task_list_isObjFreeOnTask+0x52>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001ffa:	7e2b      	ldrb	r3, [r5, #24]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d028      	beq.n	8002052 <os_task_list_isObjFreeOnTask+0xc6>
 8002000:	2b01      	cmp	r3, #1
 8002002:	d026      	beq.n	8002052 <os_task_list_isObjFreeOnTask+0xc6>
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8002004:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8002008:	b973      	cbnz	r3, 8002028 <os_task_list_isObjFreeOnTask+0x9c>
			for(i = 0; i < t->sizeObjs; i++){
 800200a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800200c:	429a      	cmp	r2, r3
 800200e:	d104      	bne.n	800201a <os_task_list_isObjFreeOnTask+0x8e>
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 8002010:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002012:	429a      	cmp	r2, r3
 8002014:	d91d      	bls.n	8002052 <os_task_list_isObjFreeOnTask+0xc6>
			freeCount = getObjs ? freeCount - 1 : freeCount;
 8002016:	3c01      	subs	r4, #1
 8002018:	e01b      	b.n	8002052 <os_task_list_isObjFreeOnTask+0xc6>
				if(t->objWaited[i] == obj) break;
 800201a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800201c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002020:	42b1      	cmp	r1, r6
 8002022:	d0f5      	beq.n	8002010 <os_task_list_isObjFreeOnTask+0x84>
			for(i = 0; i < t->sizeObjs; i++){
 8002024:	3301      	adds	r3, #1
 8002026:	e7f1      	b.n	800200c <os_task_list_isObjFreeOnTask+0x80>
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8002028:	2b01      	cmp	r3, #1
 800202a:	d112      	bne.n	8002052 <os_task_list_isObjFreeOnTask+0xc6>
			for(size_t i = 0; i < t->sizeObjs; i++){
 800202c:	f04f 0800 	mov.w	r8, #0
 8002030:	e006      	b.n	8002040 <os_task_list_isObjFreeOnTask+0xb4>
				if(t->objWaited[i] == obj) continue;
 8002032:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002034:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002038:	42b0      	cmp	r0, r6
 800203a:	d105      	bne.n	8002048 <os_task_list_isObjFreeOnTask+0xbc>
			for(size_t i = 0; i < t->sizeObjs; i++){
 800203c:	f108 0801 	add.w	r8, r8, #1
 8002040:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002042:	4543      	cmp	r3, r8
 8002044:	d8f5      	bhi.n	8002032 <os_task_list_isObjFreeOnTask+0xa6>
 8002046:	e7e6      	b.n	8002016 <os_task_list_isObjFreeOnTask+0x8a>
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 8002048:	4629      	mov	r1, r5
 800204a:	f7ff ff9f 	bl	8001f8c <os_task_list_isObjFreeOnTask>
 800204e:	2800      	cmp	r0, #0
 8002050:	d1f4      	bne.n	800203c <os_task_list_isObjFreeOnTask+0xb0>
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8002052:	683f      	ldr	r7, [r7, #0]
 8002054:	e7c2      	b.n	8001fdc <os_task_list_isObjFreeOnTask+0x50>
	...

08002058 <os_handle_list_updateAndCheck>:
bool os_handle_list_updateAndCheck(os_handle_t h){
 8002058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205c:	4606      	mov	r6, r0
	OS_ENTER_CRITICAL();
 800205e:	f3ef 8310 	mrs	r3, PRIMASK
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	b672      	cpsid	i
 8002066:	f3bf 8f6f 	isb	sy
	int8_t maxPrio = -1;
 800206a:	f04f 38ff 	mov.w	r8, #4294967295
						t->objWaited[i]->objUpdate = 1;
 800206e:	f04f 0901 	mov.w	r9, #1
	while(h != NULL){
 8002072:	b9a6      	cbnz	r6, 800209e <os_handle_list_updateAndCheck+0x46>
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8002074:	f1b8 0f00 	cmp.w	r8, #0
 8002078:	f340 80ca 	ble.w	8002210 <os_handle_list_updateAndCheck+0x1b8>
 800207c:	4b65      	ldr	r3, [pc, #404]	; (8002214 <os_handle_list_updateAndCheck+0x1bc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6898      	ldr	r0, [r3, #8]
 8002082:	f000 ff29 	bl	8002ed8 <os_task_getPrio>
 8002086:	4540      	cmp	r0, r8
 8002088:	bfac      	ite	ge
 800208a:	2000      	movge	r0, #0
 800208c:	2001      	movlt	r0, #1
	OS_EXIT_CRITICAL();
 800208e:	9b01      	ldr	r3, [sp, #4]
 8002090:	f383 8810 	msr	PRIMASK, r3
 8002094:	f3bf 8f6f 	isb	sy
}
 8002098:	b003      	add	sp, #12
 800209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		os_task_list_sort(h->blockList);
 800209e:	6970      	ldr	r0, [r6, #20]
 80020a0:	f7ff ff22 	bl	8001ee8 <os_task_list_sort>
		uint32_t freeCount = h->getFreeCount(h);
 80020a4:	68f3      	ldr	r3, [r6, #12]
 80020a6:	4630      	mov	r0, r6
 80020a8:	4798      	blx	r3
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 80020aa:	6973      	ldr	r3, [r6, #20]
 80020ac:	f8d3 a000 	ldr.w	sl, [r3]
		uint32_t freeCount = h->getFreeCount(h);
 80020b0:	4607      	mov	r7, r0
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 80020b2:	f1ba 0f00 	cmp.w	sl, #0
 80020b6:	d105      	bne.n	80020c4 <os_handle_list_updateAndCheck+0x6c>
		h->objUpdate = 0;
 80020b8:	f886 a008 	strb.w	sl, [r6, #8]
		h = os_handle_list_getObjToUpdate();
 80020bc:	f7ff ff5a 	bl	8001f74 <os_handle_list_getObjToUpdate>
 80020c0:	4606      	mov	r6, r0
 80020c2:	e7d6      	b.n	8002072 <os_handle_list_updateAndCheck+0x1a>
			os_task_t* t = (os_task_t*)it->element;
 80020c4:	f8da 4008 	ldr.w	r4, [sl, #8]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80020c8:	7e23      	ldrb	r3, [r4, #24]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	f000 808a 	beq.w	80021e4 <os_handle_list_updateAndCheck+0x18c>
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	f000 8087 	beq.w	80021e4 <os_handle_list_updateAndCheck+0x18c>
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 80020d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80020da:	b9c3      	cbnz	r3, 800210e <os_handle_list_updateAndCheck+0xb6>
				for(i = 0; i < t->sizeObjs; i++){
 80020dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80020de:	429d      	cmp	r5, r3
 80020e0:	d11f      	bne.n	8002122 <os_handle_list_updateAndCheck+0xca>
 80020e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
				if(freeCount != 0){
 80020e4:	b327      	cbz	r7, 8002130 <os_handle_list_updateAndCheck+0xd8>
					if(i < t->objWanted){
 80020e6:	4283      	cmp	r3, r0
 80020e8:	d211      	bcs.n	800210e <os_handle_list_updateAndCheck+0xb6>
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 80020ea:	4285      	cmp	r5, r0
 80020ec:	bf84      	itt	hi
 80020ee:	6b61      	ldrhi	r1, [r4, #52]	; 0x34
 80020f0:	f851 1020 	ldrhi.w	r1, [r1, r0, lsl #2]
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 80020f4:	f107 37ff 	add.w	r7, r7, #4294967295
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 80020f8:	bf88      	it	hi
 80020fa:	f881 9008 	strbhi.w	r9, [r1, #8]
						t->objWanted = i;
 80020fe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002100:	1cba      	adds	r2, r7, #2
						t->state = OS_TASK_READY;
 8002102:	f04f 0302 	mov.w	r3, #2
 8002106:	7623      	strb	r3, [r4, #24]
 8002108:	bf08      	it	eq
 800210a:	f04f 37ff 	moveq.w	r7, #4294967295
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 800210e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002112:	2b01      	cmp	r3, #1
 8002114:	d15e      	bne.n	80021d4 <os_handle_list_updateAndCheck+0x17c>
				size_t last_objWanted = t->objWanted;
 8002116:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
				if(freeCount != 0){
 800211a:	2f00      	cmp	r7, #0
 800211c:	d065      	beq.n	80021ea <os_handle_list_updateAndCheck+0x192>
					for(size_t i = 0; i < t->sizeObjs; i++){
 800211e:	2500      	movs	r5, #0
 8002120:	e036      	b.n	8002190 <os_handle_list_updateAndCheck+0x138>
					if(t->objWaited[i] == h) break;
 8002122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002124:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002128:	42b1      	cmp	r1, r6
 800212a:	d0da      	beq.n	80020e2 <os_handle_list_updateAndCheck+0x8a>
				for(i = 0; i < t->sizeObjs; i++){
 800212c:	3301      	adds	r3, #1
 800212e:	e7d6      	b.n	80020de <os_handle_list_updateAndCheck+0x86>
					if(t->objWanted == i){
 8002130:	4283      	cmp	r3, r0
 8002132:	d1ec      	bne.n	800210e <os_handle_list_updateAndCheck+0xb6>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8002134:	f103 0b01 	add.w	fp, r3, #1
 8002138:	009d      	lsls	r5, r3, #2
 800213a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800213c:	455b      	cmp	r3, fp
 800213e:	d906      	bls.n	800214e <os_handle_list_updateAndCheck+0xf6>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8002140:	3504      	adds	r5, #4
 8002142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002144:	4621      	mov	r1, r4
 8002146:	5958      	ldr	r0, [r3, r5]
 8002148:	f7ff ff20 	bl	8001f8c <os_task_list_isObjFreeOnTask>
 800214c:	b1b8      	cbz	r0, 800217e <os_handle_list_updateAndCheck+0x126>
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800214e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8002150:	69e1      	ldr	r1, [r4, #28]
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 8002152:	455b      	cmp	r3, fp
 8002154:	bf94      	ite	ls
 8002156:	2003      	movls	r0, #3
 8002158:	2002      	movhi	r0, #2
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 800215a:	2900      	cmp	r1, #0
 800215c:	bf08      	it	eq
 800215e:	2002      	moveq	r0, #2
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8002160:	455b      	cmp	r3, fp
 8002162:	bf98      	it	ls
 8002164:	f04f 3bff 	movls.w	fp, #4294967295
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8002168:	455b      	cmp	r3, fp
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 800216a:	7620      	strb	r0, [r4, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 800216c:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8002170:	d9cd      	bls.n	800210e <os_handle_list_updateAndCheck+0xb6>
 8002172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002174:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002178:	f883 9008 	strb.w	r9, [r3, #8]
 800217c:	e7c7      	b.n	800210e <os_handle_list_updateAndCheck+0xb6>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 800217e:	f10b 0b01 	add.w	fp, fp, #1
 8002182:	e7da      	b.n	800213a <os_handle_list_updateAndCheck+0xe2>
						if(t->objWaited[i] == h) continue;
 8002184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800218a:	42b0      	cmp	r0, r6
 800218c:	d106      	bne.n	800219c <os_handle_list_updateAndCheck+0x144>
					for(size_t i = 0; i < t->sizeObjs; i++){
 800218e:	3501      	adds	r5, #1
 8002190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002192:	42ab      	cmp	r3, r5
 8002194:	d8f6      	bhi.n	8002184 <os_handle_list_updateAndCheck+0x12c>
					bool getObjs = 1;
 8002196:	2001      	movs	r0, #1
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 8002198:	2300      	movs	r3, #0
 800219a:	e006      	b.n	80021aa <os_handle_list_updateAndCheck+0x152>
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 800219c:	4621      	mov	r1, r4
 800219e:	f7ff fef5 	bl	8001f8c <os_task_list_isObjFreeOnTask>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d1f3      	bne.n	800218e <os_handle_list_updateAndCheck+0x136>
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	63e3      	str	r3, [r4, #60]	; 0x3c
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 80021ac:	69e3      	ldr	r3, [r4, #28]
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 80021ae:	2800      	cmp	r0, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2103      	moveq	r1, #3
 80021b4:	2102      	movne	r1, #2
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf08      	it	eq
 80021ba:	2102      	moveq	r1, #2
 80021bc:	7621      	strb	r1, [r4, #24]
					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 80021be:	b110      	cbz	r0, 80021c6 <os_handle_list_updateAndCheck+0x16e>
 80021c0:	1c7b      	adds	r3, r7, #1
 80021c2:	d000      	beq.n	80021c6 <os_handle_list_updateAndCheck+0x16e>
 80021c4:	3f01      	subs	r7, #1
				if(last_objWanted != t->objWanted){
 80021c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021c8:	455b      	cmp	r3, fp
 80021ca:	d003      	beq.n	80021d4 <os_handle_list_updateAndCheck+0x17c>
					for(size_t i = 0; i < t->sizeObjs; i++){
 80021cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021ce:	2300      	movs	r3, #0
 80021d0:	4298      	cmp	r0, r3
 80021d2:	d114      	bne.n	80021fe <os_handle_list_updateAndCheck+0x1a6>
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 80021d4:	7e23      	ldrb	r3, [r4, #24]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d104      	bne.n	80021e4 <os_handle_list_updateAndCheck+0x18c>
 80021da:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80021de:	4598      	cmp	r8, r3
 80021e0:	bfb8      	it	lt
 80021e2:	4698      	movlt	r8, r3
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 80021e4:	f8da a000 	ldr.w	sl, [sl]
 80021e8:	e763      	b.n	80020b2 <os_handle_list_updateAndCheck+0x5a>
					t->objWanted = 0xFFFFFFFF;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	63e3      	str	r3, [r4, #60]	; 0x3c
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 80021f0:	69e3      	ldr	r3, [r4, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2303      	movne	r3, #3
 80021f8:	2302      	moveq	r3, #2
 80021fa:	7623      	strb	r3, [r4, #24]
 80021fc:	e7e3      	b.n	80021c6 <os_handle_list_updateAndCheck+0x16e>
						if(t->objWaited[i] == h) continue;
 80021fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002200:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002204:	42b1      	cmp	r1, r6
						t->objWaited[i]->objUpdate = 1;
 8002206:	bf18      	it	ne
 8002208:	f881 9008 	strbne.w	r9, [r1, #8]
					for(size_t i = 0; i < t->sizeObjs; i++){
 800220c:	3301      	adds	r3, #1
 800220e:	e7df      	b.n	80021d0 <os_handle_list_updateAndCheck+0x178>
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8002210:	4630      	mov	r0, r6
 8002212:	e73c      	b.n	800208e <os_handle_list_updateAndCheck+0x36>
 8002214:	20014594 	.word	0x20014594

08002218 <os_msgQ_updateAndCheck>:
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8002218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(msgQ == NULL) return 0;
 800221a:	4604      	mov	r4, r0
 800221c:	2800      	cmp	r0, #0
 800221e:	d047      	beq.n	80022b0 <os_msgQ_updateAndCheck+0x98>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8002220:	7803      	ldrb	r3, [r0, #0]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d144      	bne.n	80022b0 <os_msgQ_updateAndCheck+0x98>
	OS_ENTER_CRITICAL();
 8002226:	f3ef 8310 	mrs	r3, PRIMASK
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	b672      	cpsid	i
 800222e:	f3bf 8f6f 	isb	sy
	os_task_list_sort(msgQ->obj.blockList);
 8002232:	6940      	ldr	r0, [r0, #20]
 8002234:	f7ff fe58 	bl	8001ee8 <os_task_list_sort>
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 8002238:	69a3      	ldr	r3, [r4, #24]
 800223a:	699a      	ldr	r2, [r3, #24]
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 800223c:	6963      	ldr	r3, [r4, #20]
	int8_t maxPrio = -1;
 800223e:	f04f 34ff 	mov.w	r4, #4294967295
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8002242:	6818      	ldr	r0, [r3, #0]
			t->objWanted = 0xFFFFFFFF;
 8002244:	4625      	mov	r5, r4
			t->objWanted = 0;
 8002246:	2600      	movs	r6, #0
			t->state = OS_TASK_READY;
 8002248:	2702      	movs	r7, #2
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 800224a:	b988      	cbnz	r0, 8002270 <os_msgQ_updateAndCheck+0x58>
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 800224c:	2c00      	cmp	r4, #0
 800224e:	dd08      	ble.n	8002262 <os_msgQ_updateAndCheck+0x4a>
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <os_msgQ_updateAndCheck+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6898      	ldr	r0, [r3, #8]
 8002256:	f000 fe3f 	bl	8002ed8 <os_task_getPrio>
 800225a:	4284      	cmp	r4, r0
 800225c:	bfd4      	ite	le
 800225e:	2000      	movle	r0, #0
 8002260:	2001      	movgt	r0, #1
	OS_EXIT_CRITICAL();
 8002262:	9b01      	ldr	r3, [sp, #4]
 8002264:	f383 8810 	msr	PRIMASK, r3
 8002268:	f3bf 8f6f 	isb	sy
}
 800226c:	b003      	add	sp, #12
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		os_task_t* t = (os_task_t*)it->element;
 8002270:	6883      	ldr	r3, [r0, #8]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002272:	7e19      	ldrb	r1, [r3, #24]
 8002274:	2904      	cmp	r1, #4
 8002276:	d011      	beq.n	800229c <os_msgQ_updateAndCheck+0x84>
 8002278:	2901      	cmp	r1, #1
 800227a:	d00f      	beq.n	800229c <os_msgQ_updateAndCheck+0x84>
		if(freeCount != 0){
 800227c:	b182      	cbz	r2, 80022a0 <os_msgQ_updateAndCheck+0x88>
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 800227e:	3a01      	subs	r2, #1
 8002280:	1c91      	adds	r1, r2, #2
			t->objWanted = 0;
 8002282:	63de      	str	r6, [r3, #60]	; 0x3c
			t->state = OS_TASK_READY;
 8002284:	761f      	strb	r7, [r3, #24]
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8002286:	bf08      	it	eq
 8002288:	f04f 32ff 	moveq.w	r2, #4294967295
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 800228c:	7e19      	ldrb	r1, [r3, #24]
 800228e:	2902      	cmp	r1, #2
 8002290:	d104      	bne.n	800229c <os_msgQ_updateAndCheck+0x84>
 8002292:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002296:	429c      	cmp	r4, r3
 8002298:	bfb8      	it	lt
 800229a:	461c      	movlt	r4, r3
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 800229c:	6800      	ldr	r0, [r0, #0]
 800229e:	e7d4      	b.n	800224a <os_msgQ_updateAndCheck+0x32>
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 80022a0:	69d9      	ldr	r1, [r3, #28]
			t->objWanted = 0xFFFFFFFF;
 80022a2:	63dd      	str	r5, [r3, #60]	; 0x3c
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 80022a4:	2900      	cmp	r1, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2102      	moveq	r1, #2
 80022aa:	2103      	movne	r1, #3
 80022ac:	7619      	strb	r1, [r3, #24]
 80022ae:	e7ed      	b.n	800228c <os_msgQ_updateAndCheck+0x74>
	if(msgQ == NULL) return 0;
 80022b0:	2000      	movs	r0, #0
 80022b2:	e7db      	b.n	800226c <os_msgQ_updateAndCheck+0x54>
 80022b4:	20014594 	.word	0x20014594

080022b8 <os_obj_updatePrio>:
void os_obj_updatePrio(os_handle_t h){
 80022b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022ba:	4604      	mov	r4, r0
	OS_ENTER_CRITICAL();
 80022bc:	f3ef 8310 	mrs	r3, PRIMASK
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	b672      	cpsid	i
 80022c4:	f3bf 8f6f 	isb	sy
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 80022c8:	7803      	ldrb	r3, [r0, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d10c      	bne.n	80022e8 <os_obj_updatePrio+0x30>
	os_list_cell_t* it = head->head.next;
 80022ce:	6943      	ldr	r3, [r0, #20]
	int8_t prev_max_prio = mutex->max_prio;
 80022d0:	f990 101d 	ldrsb.w	r1, [r0, #29]
	os_list_cell_t* it = head->head.next;
 80022d4:	681a      	ldr	r2, [r3, #0]
	int8_t maxPrio = -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
	while(it != NULL){
 80022da:	b97a      	cbnz	r2, 80022fc <os_obj_updatePrio+0x44>
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 80022dc:	4299      	cmp	r1, r3
	mutex->max_prio = maxPrio;
 80022de:	7763      	strb	r3, [r4, #29]
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 80022e0:	d005      	beq.n	80022ee <os_obj_updatePrio+0x36>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 80022e2:	69a0      	ldr	r0, [r4, #24]
 80022e4:	f7ff ffe8 	bl	80022b8 <os_obj_updatePrio>
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 80022e8:	7823      	ldrb	r3, [r4, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d00e      	beq.n	800230c <os_obj_updatePrio+0x54>
	OS_EXIT_CRITICAL();
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	f383 8810 	msr	PRIMASK, r3
 80022f4:	f3bf 8f6f 	isb	sy
}
 80022f8:	b002      	add	sp, #8
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 80022fc:	6890      	ldr	r0, [r2, #8]
		it = it->next;
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f990 004c 	ldrsb.w	r0, [r0, #76]	; 0x4c
 8002304:	4283      	cmp	r3, r0
 8002306:	bfb8      	it	lt
 8002308:	4603      	movlt	r3, r0
 800230a:	e7e6      	b.n	80022da <os_obj_updatePrio+0x22>
	int8_t prev_prio = tsk->priority;
 800230c:	f994 104c 	ldrsb.w	r1, [r4, #76]	; 0x4c
	int8_t maxPrio = tsk->basePriority;
 8002310:	f994 3019 	ldrsb.w	r3, [r4, #25]
	os_list_cell_t* it = head->head.next;
 8002314:	6962      	ldr	r2, [r4, #20]
		it = it->next;
 8002316:	6812      	ldr	r2, [r2, #0]
	while(it != NULL){
 8002318:	b9ea      	cbnz	r2, 8002356 <os_obj_updatePrio+0x9e>
	it = head->head.next;
 800231a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800231c:	6815      	ldr	r5, [r2, #0]
	while(it != NULL){
 800231e:	bb0d      	cbnz	r5, 8002364 <os_obj_updatePrio+0xac>
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8002320:	4299      	cmp	r1, r3
	tsk->priority = maxPrio;
 8002322:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8002326:	d0e2      	beq.n	80022ee <os_obj_updatePrio+0x36>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8002328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800232a:	42ab      	cmp	r3, r5
 800232c:	d9df      	bls.n	80022ee <os_obj_updatePrio+0x36>
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 800232e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002330:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002334:	7803      	ldrb	r3, [r0, #0]
 8002336:	3b01      	subs	r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800233e:	d801      	bhi.n	8002344 <os_obj_updatePrio+0x8c>
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 8002340:	f7ff ffba 	bl	80022b8 <os_obj_updatePrio>
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 8002344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002346:	5998      	ldr	r0, [r3, r6]
 8002348:	7803      	ldrb	r3, [r0, #0]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d101      	bne.n	8002352 <os_obj_updatePrio+0x9a>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 800234e:	f7ff ff63 	bl	8002218 <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8002352:	3501      	adds	r5, #1
 8002354:	e7e8      	b.n	8002328 <os_obj_updatePrio+0x70>
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8002356:	6890      	ldr	r0, [r2, #8]
 8002358:	f990 004c 	ldrsb.w	r0, [r0, #76]	; 0x4c
 800235c:	4283      	cmp	r3, r0
 800235e:	bfb8      	it	lt
 8002360:	4603      	movlt	r3, r0
 8002362:	e7d8      	b.n	8002316 <os_obj_updatePrio+0x5e>
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 8002364:	68aa      	ldr	r2, [r5, #8]
		it = it->next;
 8002366:	682d      	ldr	r5, [r5, #0]
 8002368:	f992 201d 	ldrsb.w	r2, [r2, #29]
 800236c:	4293      	cmp	r3, r2
 800236e:	bfb8      	it	lt
 8002370:	4613      	movlt	r3, r2
 8002372:	e7d4      	b.n	800231e <os_obj_updatePrio+0x66>

08002374 <os_elf_loadFile>:
 *
 * @param char* name : [ in] File name
 *
 * @return os_elf_prog_t : Necessary information to run a program
 **********************************************************************/
os_elf_prog_t os_elf_loadFile(char* file){
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	b0c7      	sub	sp, #284	; 0x11c
 800237a:	af00      	add	r7, sp, #0

	/* Open file
	 --------------------------------------------------*/
	os_elf_prog_t nullRet = {};
	lfs_file_t lfs_file;
	int err = lfs_file_open(&lfs, &lfs_file, file, LFS_O_RDONLY);
 800237c:	460a      	mov	r2, r1
os_elf_prog_t os_elf_loadFile(char* file){
 800237e:	4605      	mov	r5, r0
	int err = lfs_file_open(&lfs, &lfs_file, file, LFS_O_RDONLY);
 8002380:	2301      	movs	r3, #1
 8002382:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002386:	48be      	ldr	r0, [pc, #760]	; (8002680 <os_elf_loadFile+0x30c>)
 8002388:	f004 fc1c 	bl	8006bc4 <lfs_file_open>
	if(err < 0){
 800238c:	2800      	cmp	r0, #0
 800238e:	da0e      	bge.n	80023ae <os_elf_loadFile+0x3a>
		PRINTLN("Open Error");
 8002390:	49bc      	ldr	r1, [pc, #752]	; (8002684 <os_elf_loadFile+0x310>)
 8002392:	48bd      	ldr	r0, [pc, #756]	; (8002688 <os_elf_loadFile+0x314>)
 8002394:	f240 5246 	movw	r2, #1350	; 0x546

	/* Close file
	 --------------------------------------------------*/
	err = lfs_file_close(&lfs, &lfs_file);
	if(err < 0){
		PRINTLN("close Error");
 8002398:	f007 f814 	bl	80093c4 <iprintf>
		return nullRet;
 800239c:	2300      	movs	r3, #0
 800239e:	e9c5 3300 	strd	r3, r3, [r5]
	}

	return prg;
}
 80023a2:	4628      	mov	r0, r5
 80023a4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int err = lfs_file_seek(&lfs, lfs_file, 0, LFS_SEEK_SET);
 80023ae:	2300      	movs	r3, #0
 80023b0:	461a      	mov	r2, r3
 80023b2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80023b6:	48b2      	ldr	r0, [pc, #712]	; (8002680 <os_elf_loadFile+0x30c>)
 80023b8:	f004 fc86 	bl	8006cc8 <lfs_file_seek>
	if(err < 0){
 80023bc:	2800      	cmp	r0, #0
 80023be:	da0e      	bge.n	80023de <os_elf_loadFile+0x6a>
	os_elf_prog_t prg = {};
 80023c0:	2400      	movs	r4, #0
 80023c2:	46a0      	mov	r8, r4
	err = lfs_file_close(&lfs, &lfs_file);
 80023c4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80023c8:	48ad      	ldr	r0, [pc, #692]	; (8002680 <os_elf_loadFile+0x30c>)
 80023ca:	f004 fc19 	bl	8006c00 <lfs_file_close>
	if(err < 0){
 80023ce:	2800      	cmp	r0, #0
 80023d0:	f280 8153 	bge.w	800267a <os_elf_loadFile+0x306>
		PRINTLN("close Error");
 80023d4:	f240 5266 	movw	r2, #1382	; 0x566
 80023d8:	49aa      	ldr	r1, [pc, #680]	; (8002684 <os_elf_loadFile+0x310>)
 80023da:	48ac      	ldr	r0, [pc, #688]	; (800268c <os_elf_loadFile+0x318>)
 80023dc:	e7dc      	b.n	8002398 <os_elf_loadFile+0x24>
	err = lfs_file_read(&lfs, lfs_file, header, sizeof(*header));
 80023de:	2334      	movs	r3, #52	; 0x34
 80023e0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80023e4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80023e8:	48a5      	ldr	r0, [pc, #660]	; (8002680 <os_elf_loadFile+0x30c>)
 80023ea:	f004 fc21 	bl	8006c30 <lfs_file_read>
	if(err < 0){
 80023ee:	2800      	cmp	r0, #0
 80023f0:	dbe6      	blt.n	80023c0 <os_elf_loadFile+0x4c>
	if(header->e_ident.magic[0] != 0x7F || header->e_ident.magic[1] != 'E' || header->e_ident.magic[2] != 'L' || header->e_ident.magic[3] != 'F'){
 80023f2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80023f6:	2b7f      	cmp	r3, #127	; 0x7f
 80023f8:	d1e2      	bne.n	80023c0 <os_elf_loadFile+0x4c>
 80023fa:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023fe:	2b45      	cmp	r3, #69	; 0x45
 8002400:	d1de      	bne.n	80023c0 <os_elf_loadFile+0x4c>
 8002402:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8002406:	2b4c      	cmp	r3, #76	; 0x4c
 8002408:	d1da      	bne.n	80023c0 <os_elf_loadFile+0x4c>
 800240a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800240e:	2b46      	cmp	r3, #70	; 0x46
 8002410:	d1d6      	bne.n	80023c0 <os_elf_loadFile+0x4c>
	if(header->e_ident.class != 1 || header->e_ident.data != 1 || header->e_ident.version != 1){
 8002412:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002416:	2b01      	cmp	r3, #1
 8002418:	d1d2      	bne.n	80023c0 <os_elf_loadFile+0x4c>
 800241a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800241e:	2b01      	cmp	r3, #1
 8002420:	d1ce      	bne.n	80023c0 <os_elf_loadFile+0x4c>
 8002422:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002426:	2b01      	cmp	r3, #1
 8002428:	d1ca      	bne.n	80023c0 <os_elf_loadFile+0x4c>
	if(header->e_machine != 40 || header->e_version != 1){
 800242a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800242e:	2b28      	cmp	r3, #40	; 0x28
 8002430:	d1c6      	bne.n	80023c0 <os_elf_loadFile+0x4c>
 8002432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002436:	2b01      	cmp	r3, #1
 8002438:	d1c2      	bne.n	80023c0 <os_elf_loadFile+0x4c>
		os_elf_mapping_el_t map[header.e_phnum];
 800243a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
	if(os_elf_checkHeader(&header, &lfs_file) >= 0) {
 800243e:	f8c7 d004 	str.w	sp, [r7, #4]
		os_elf_mapping_el_t map[header.e_phnum];
 8002442:	230c      	movs	r3, #12
 8002444:	4353      	muls	r3, r2
 8002446:	330a      	adds	r3, #10
 8002448:	466a      	mov	r2, sp
 800244a:	08db      	lsrs	r3, r3, #3
 800244c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8002450:	469d      	mov	sp, r3
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8002452:	2400      	movs	r4, #0
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 8002454:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8002680 <os_elf_loadFile+0x30c>
		os_elf_mapping_el_t map[header.e_phnum];
 8002458:	466e      	mov	r6, sp
	uint32_t memToAlloc = 0;
 800245a:	46a0      	mov	r8, r4
	for(uint32_t i = 0; i < header->e_phnum; i++){
 800245c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002460:	429c      	cmp	r4, r3
 8002462:	d339      	bcc.n	80024d8 <os_elf_loadFile+0x164>
	uint8_t* segment = (uint8_t*) os_heap_alloc(memToAlloc);
 8002464:	4640      	mov	r0, r8
 8002466:	f7ff fb45 	bl	8001af4 <os_heap_alloc>
	if(segment == NULL)
 800246a:	4604      	mov	r4, r0
 800246c:	2800      	cmp	r0, #0
 800246e:	d04c      	beq.n	800250a <os_elf_loadFile+0x196>
	memset(segment, 0, memToAlloc);
 8002470:	4642      	mov	r2, r8
 8002472:	2100      	movs	r1, #0
 8002474:	f006 fcd6 	bl	8008e24 <memset>
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8002478:	f04f 0800 	mov.w	r8, #0
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 800247c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8002680 <os_elf_loadFile+0x30c>
	size_t pos = 0;
 8002480:	46c2      	mov	sl, r8
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8002482:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002486:	4598      	cmp	r8, r3
 8002488:	d34b      	bcc.n	8002522 <os_elf_loadFile+0x1ae>
	int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + (uint32_t)(header->e_shstrndx * header->e_shentsize) ), LFS_SEEK_SET); //Seek to the index of the section header that contains all names
 800248a:	f8b7 00be 	ldrh.w	r0, [r7, #190]	; 0xbe
 800248e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002492:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8002496:	2300      	movs	r3, #0
 8002498:	fb00 1202 	mla	r2, r0, r2, r1
 800249c:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024a0:	4877      	ldr	r0, [pc, #476]	; (8002680 <os_elf_loadFile+0x30c>)
 80024a2:	f004 fc11 	bl	8006cc8 <lfs_file_seek>
		err |= lfs_file_read(&lfs, lfs_file, &names, sizeof(names));
 80024a6:	2328      	movs	r3, #40	; 0x28
	int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + (uint32_t)(header->e_shstrndx * header->e_shentsize) ), LFS_SEEK_SET); //Seek to the index of the section header that contains all names
 80024a8:	4604      	mov	r4, r0
		err |= lfs_file_read(&lfs, lfs_file, &names, sizeof(names));
 80024aa:	f107 020c 	add.w	r2, r7, #12
 80024ae:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024b2:	4873      	ldr	r0, [pc, #460]	; (8002680 <os_elf_loadFile+0x30c>)
 80024b4:	f004 fbbc 	bl	8006c30 <lfs_file_read>
	if(err < 0){
 80024b8:	ea54 0300 	orrs.w	r3, r4, r0
 80024bc:	f100 80d5 	bmi.w	800266a <os_elf_loadFile+0x2f6>
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + i * header->e_shentsize), LFS_SEEK_SET); //Seek to the section header
 80024c0:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002680 <os_elf_loadFile+0x30c>
		if(strcmp(".got", sect_name) != 0)
 80024c4:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8002690 <os_elf_loadFile+0x31c>
	for(uint32_t i = 0; i < header->e_shnum; i++){
 80024c8:	2400      	movs	r4, #0
 80024ca:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80024ce:	429c      	cmp	r4, r3
 80024d0:	d36a      	bcc.n	80025a8 <os_elf_loadFile+0x234>
	os_elf_prog_t ret = {};
 80024d2:	2400      	movs	r4, #0
	bool gotFound = 0;
 80024d4:	46a0      	mov	r8, r4
 80024d6:	e0ab      	b.n	8002630 <os_elf_loadFile+0x2bc>
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 80024d8:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 80024dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024e0:	2300      	movs	r3, #0
 80024e2:	fb04 2201 	mla	r2, r4, r1, r2
 80024e6:	4648      	mov	r0, r9
 80024e8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024ec:	f004 fbec 	bl	8006cc8 <lfs_file_seek>
		    err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 80024f0:	2320      	movs	r3, #32
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 80024f2:	4682      	mov	sl, r0
		    err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 80024f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024f8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024fc:	4648      	mov	r0, r9
 80024fe:	f004 fb97 	bl	8006c30 <lfs_file_read>
		if(err < 0){
 8002502:	ea5a 0300 	orrs.w	r3, sl, r0
 8002506:	d502      	bpl.n	800250e <os_elf_loadFile+0x19a>
	os_elf_prog_t prg = {};
 8002508:	2400      	movs	r4, #0
 800250a:	46a0      	mov	r8, r4
 800250c:	e0b2      	b.n	8002674 <os_elf_loadFile+0x300>
		if(data.p_type != 1)
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	2b01      	cmp	r3, #1
		memToAlloc += (data.p_memsz + 7) & (~0x7UL);
 8002512:	bf01      	itttt	eq
 8002514:	6f3b      	ldreq	r3, [r7, #112]	; 0x70
 8002516:	3307      	addeq	r3, #7
 8002518:	f023 0307 	biceq.w	r3, r3, #7
 800251c:	4498      	addeq	r8, r3
	for(uint32_t i = 0; i < header->e_phnum; i++){
 800251e:	3401      	adds	r4, #1
 8002520:	e79c      	b.n	800245c <os_elf_loadFile+0xe8>
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 8002522:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 8002526:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800252a:	2300      	movs	r3, #0
 800252c:	fb08 2201 	mla	r2, r8, r1, r2
 8002530:	4648      	mov	r0, r9
 8002532:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002536:	f004 fbc7 	bl	8006cc8 <lfs_file_seek>
		 	err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 800253a:	2320      	movs	r3, #32
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 800253c:	4683      	mov	fp, r0
		 	err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 800253e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002542:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002546:	4648      	mov	r0, r9
 8002548:	f004 fb72 	bl	8006c30 <lfs_file_read>
		if(err < 0){
 800254c:	ea5b 0300 	orrs.w	r3, fp, r0
 8002550:	d503      	bpl.n	800255a <os_elf_loadFile+0x1e6>
			os_heap_free(segment);
 8002552:	4620      	mov	r0, r4
 8002554:	f7ff fb2e 	bl	8001bb4 <os_heap_free>
 8002558:	e7d6      	b.n	8002508 <os_elf_loadFile+0x194>
		if(data.p_type != 1)
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d120      	bne.n	80025a2 <os_elf_loadFile+0x22e>
		err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)data.p_offset, LFS_SEEK_SET); //Seek to the actual data
 8002560:	2300      	movs	r3, #0
 8002562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002564:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002568:	4648      	mov	r0, r9
 800256a:	f004 fbad 	bl	8006cc8 <lfs_file_seek>
		err |= lfs_file_read(&lfs, lfs_file, &segment[pos], data.p_filesz);
 800256e:	eb04 0b0a 	add.w	fp, r4, sl
		err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)data.p_offset, LFS_SEEK_SET); //Seek to the actual data
 8002572:	6038      	str	r0, [r7, #0]
		err |= lfs_file_read(&lfs, lfs_file, &segment[pos], data.p_filesz);
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	465a      	mov	r2, fp
 8002578:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800257c:	4648      	mov	r0, r9
 800257e:	f004 fb57 	bl	8006c30 <lfs_file_read>
		if(err < 0){
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	4303      	orrs	r3, r0
 8002586:	d4e4      	bmi.n	8002552 <os_elf_loadFile+0x1de>
		size_t segmentSize = (data.p_memsz + 7) & (~0x7UL);
 8002588:	6f3a      	ldr	r2, [r7, #112]	; 0x70
		map[i].original_addr = data.p_vaddr;
 800258a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800258c:	230c      	movs	r3, #12
 800258e:	fb03 f308 	mul.w	r3, r3, r8
		size_t segmentSize = (data.p_memsz + 7) & (~0x7UL);
 8002592:	3207      	adds	r2, #7
 8002594:	f022 0207 	bic.w	r2, r2, #7
		map[i].original_addr = data.p_vaddr;
 8002598:	50f1      	str	r1, [r6, r3]
 800259a:	4433      	add	r3, r6
		map[i].size = segmentSize;
 800259c:	e9c3 b201 	strd	fp, r2, [r3, #4]
		pos += segmentSize;
 80025a0:	4492      	add	sl, r2
	for(uint32_t i = 0; i < header->e_phnum; i++){
 80025a2:	f108 0801 	add.w	r8, r8, #1
 80025a6:	e76c      	b.n	8002482 <os_elf_loadFile+0x10e>
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + i * header->e_shentsize), LFS_SEEK_SET); //Seek to the section header
 80025a8:	f8b7 10be 	ldrh.w	r1, [r7, #190]	; 0xbe
 80025ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025b0:	2300      	movs	r3, #0
 80025b2:	fb04 2201 	mla	r2, r4, r1, r2
 80025b6:	4648      	mov	r0, r9
 80025b8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80025bc:	f004 fb84 	bl	8006cc8 <lfs_file_seek>
			err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 80025c0:	2328      	movs	r3, #40	; 0x28
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + i * header->e_shentsize), LFS_SEEK_SET); //Seek to the section header
 80025c2:	4680      	mov	r8, r0
			err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 80025c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025c8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80025cc:	4648      	mov	r0, r9
 80025ce:	f004 fb2f 	bl	8006c30 <lfs_file_read>
		if(err < 0){
 80025d2:	ea58 0300 	orrs.w	r3, r8, r0
 80025d6:	d448      	bmi.n	800266a <os_elf_loadFile+0x2f6>
		err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(data.sh_name + names.sh_offset), LFS_SEEK_SET); //Seek to the string position in the file
 80025d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	2300      	movs	r3, #0
 80025de:	440a      	add	r2, r1
 80025e0:	4648      	mov	r0, r9
 80025e2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80025e6:	f004 fb6f 	bl	8006cc8 <lfs_file_seek>
		err |= lfs_file_read(&lfs, lfs_file, sect_name, sizeof(sect_name));
 80025ea:	2332      	movs	r3, #50	; 0x32
		err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(data.sh_name + names.sh_offset), LFS_SEEK_SET); //Seek to the string position in the file
 80025ec:	4680      	mov	r8, r0
		err |= lfs_file_read(&lfs, lfs_file, sect_name, sizeof(sect_name));
 80025ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025f2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80025f6:	4648      	mov	r0, r9
 80025f8:	f004 fb1a 	bl	8006c30 <lfs_file_read>
		if(err < 0){
 80025fc:	ea58 0300 	orrs.w	r3, r8, r0
 8002600:	d433      	bmi.n	800266a <os_elf_loadFile+0x2f6>
		if(strcmp(".got", sect_name) != 0)
 8002602:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002606:	4650      	mov	r0, sl
 8002608:	f7fd fde2 	bl	80001d0 <strcmp>
 800260c:	4680      	mov	r8, r0
 800260e:	b108      	cbz	r0, 8002614 <os_elf_loadFile+0x2a0>
	for(uint32_t i = 0; i < header->e_shnum; i++){
 8002610:	3401      	adds	r4, #1
 8002612:	e75a      	b.n	80024ca <os_elf_loadFile+0x156>
		ret.gotBase = os_elf_memoryRecalc(data.sh_addr, map, header->e_phnum);
 8002614:	f8b7 90bc 	ldrh.w	r9, [r7, #188]	; 0xbc
 8002618:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800261a:	464a      	mov	r2, r9
 800261c:	4631      	mov	r1, r6
 800261e:	f7ff fb67 	bl	8001cf0 <os_elf_memoryRecalc>
		if(ret.gotBase == 0){
 8002622:	4604      	mov	r4, r0
 8002624:	b308      	cbz	r0, 800266a <os_elf_loadFile+0x2f6>
		for(int j = 0; j < data.sh_size; j+=4){ //Move in increments of 4 bytes
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	4543      	cmp	r3, r8
 800262a:	d811      	bhi.n	8002650 <os_elf_loadFile+0x2dc>
		gotFound = 1;
 800262c:	f04f 0801 	mov.w	r8, #1
	ret.entryPoint = (void*)os_elf_memoryRecalc(header->e_entry, map, header->e_phnum);
 8002630:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8002634:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002638:	4631      	mov	r1, r6
 800263a:	f7ff fb59 	bl	8001cf0 <os_elf_memoryRecalc>
	return gotFound == 1 ? ret : NullRet;
 800263e:	f1b8 0f00 	cmp.w	r8, #0
 8002642:	d012      	beq.n	800266a <os_elf_loadFile+0x2f6>
			if(prg.entryPoint == NULL || prg.gotBase == 0){
 8002644:	4680      	mov	r8, r0
 8002646:	b998      	cbnz	r0, 8002670 <os_elf_loadFile+0x2fc>
				os_heap_free((void*)map[0].remapped_addr);
 8002648:	6870      	ldr	r0, [r6, #4]
 800264a:	f7ff fab3 	bl	8001bb4 <os_heap_free>
 800264e:	e011      	b.n	8002674 <os_elf_loadFile+0x300>
			pGot[j/4] = os_elf_memoryRecalc(pGot[j/4], map, header->e_phnum); //Recalculate address
 8002650:	ea4f 0aa8 	mov.w	sl, r8, asr #2
 8002654:	464a      	mov	r2, r9
 8002656:	f854 002a 	ldr.w	r0, [r4, sl, lsl #2]
 800265a:	4631      	mov	r1, r6
 800265c:	f7ff fb48 	bl	8001cf0 <os_elf_memoryRecalc>
		for(int j = 0; j < data.sh_size; j+=4){ //Move in increments of 4 bytes
 8002660:	f108 0804 	add.w	r8, r8, #4
			pGot[j/4] = os_elf_memoryRecalc(pGot[j/4], map, header->e_phnum); //Recalculate address
 8002664:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8002668:	e7dd      	b.n	8002626 <os_elf_loadFile+0x2b2>
	return gotFound == 1 ? ret : NullRet;
 800266a:	2400      	movs	r4, #0
 800266c:	46a0      	mov	r8, r4
 800266e:	e7eb      	b.n	8002648 <os_elf_loadFile+0x2d4>
			if(prg.entryPoint == NULL || prg.gotBase == 0){
 8002670:	2c00      	cmp	r4, #0
 8002672:	d0e9      	beq.n	8002648 <os_elf_loadFile+0x2d4>
 8002674:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8002678:	e6a4      	b.n	80023c4 <os_elf_loadFile+0x50>
	return prg;
 800267a:	e9c5 8400 	strd	r8, r4, [r5]
 800267e:	e690      	b.n	80023a2 <os_elf_loadFile+0x2e>
 8002680:	20014e00 	.word	0x20014e00
 8002684:	0800ab2f 	.word	0x0800ab2f
 8002688:	0800ab3d 	.word	0x0800ab3d
 800268c:	0800ab59 	.word	0x0800ab59
 8002690:	0800ab54 	.word	0x0800ab54

08002694 <os_mutex_release>:
 *
 * @param os_handle_t h   	: [ in] Pointer to the mutex to release
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_mutex_release(os_handle_t h){
 8002694:	b513      	push	{r0, r1, r4, lr}
	 ------------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*) h;

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 8002696:	4604      	mov	r4, r0
 8002698:	b360      	cbz	r0, 80026f4 <os_mutex_release+0x60>
	if(h->type != OS_OBJ_MUTEX) return OS_ERR_BAD_ARG;
 800269a:	7803      	ldrb	r3, [r0, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d129      	bne.n	80026f4 <os_mutex_release+0x60>
	if(mutex->state == OS_MUTEX_STATE_UNLOCKED) return OS_ERR_FORBIDDEN;
 80026a0:	7f03      	ldrb	r3, [r0, #28]
 80026a2:	b353      	cbz	r3, 80026fa <os_mutex_release+0x66>
	if(mutex->owner != os_cur_task->element) return OS_ERR_FORBIDDEN;
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <os_mutex_release+0x6c>)
 80026a6:	6982      	ldr	r2, [r0, #24]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d124      	bne.n	80026fa <os_mutex_release+0x66>

	/* Enter critical section
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 80026b0:	f3ef 8310 	mrs	r3, PRIMASK
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	b672      	cpsid	i
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	6983      	ldr	r3, [r0, #24]
 80026be:	4601      	mov	r1, r0
 80026c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80026c2:	f7ff fbb0 	bl	8001e26 <os_list_remove>
 80026c6:	69a0      	ldr	r0, [r4, #24]
 80026c8:	f7ff fdf6 	bl	80022b8 <os_obj_updatePrio>
 80026cc:	2300      	movs	r3, #0
 80026ce:	7723      	strb	r3, [r4, #28]
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fcc1 	bl	8002058 <os_handle_list_updateAndCheck>
 80026d6:	b128      	cbz	r0, 80026e4 <os_mutex_release+0x50>
 80026d8:	f000 fa9a 	bl	8002c10 <os_scheduler_state_get>
 80026dc:	2801      	cmp	r0, #1
 80026de:	d101      	bne.n	80026e4 <os_mutex_release+0x50>
 80026e0:	f000 fb30 	bl	8002d44 <os_task_yeild>
 80026e4:	9b01      	ldr	r3, [sp, #4]
 80026e6:	f383 8810 	msr	PRIMASK, r3
 80026ea:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(must_yield && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();

	);

	return OS_ERR_OK;
 80026ee:	2000      	movs	r0, #0
}
 80026f0:	b002      	add	sp, #8
 80026f2:	bd10      	pop	{r4, pc}
	if(h == NULL) return OS_ERR_BAD_ARG;
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	e7fa      	b.n	80026f0 <os_mutex_release+0x5c>
	if(mutex->state == OS_MUTEX_STATE_UNLOCKED) return OS_ERR_FORBIDDEN;
 80026fa:	f06f 0004 	mvn.w	r0, #4
 80026fe:	e7f7      	b.n	80026f0 <os_mutex_release+0x5c>
 8002700:	20014594 	.word	0x20014594

08002704 <os_obj_wait>:
 * @param uint32_t timeout_ticks : [ in] Amount of time before a timeout is detected. If OS_WAIT_FOREVER, the task blocks forever. If OS_WAIT_NONE, the task returns immediately
 * @parem os_err_e* err			 : [out] Error code. Ignored if NULL.
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
static os_handle_t os_obj_wait(os_handle_t objList[], size_t objNum, os_obj_wait_e waitFlag, uint32_t timeout_ticks, os_err_e* err){
 8002704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002708:	b087      	sub	sp, #28

	/* Check for errors
	 ---------------------------------------------------*/
	bool error  = objList == NULL;
		 error |= objNum == 0;
 800270a:	1e4c      	subs	r4, r1, #1
static os_handle_t os_obj_wait(os_handle_t objList[], size_t objNum, os_obj_wait_e waitFlag, uint32_t timeout_ticks, os_err_e* err){
 800270c:	9200      	str	r2, [sp, #0]
		 error |= objNum == 0;
 800270e:	1ce2      	adds	r2, r4, #3
 8002710:	bf94      	ite	ls
 8002712:	2400      	movls	r4, #0
 8002714:	2401      	movhi	r4, #1
static os_handle_t os_obj_wait(os_handle_t objList[], size_t objNum, os_obj_wait_e waitFlag, uint32_t timeout_ticks, os_err_e* err){
 8002716:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002718:	468a      	mov	sl, r1
	bool error  = objList == NULL;
 800271a:	4605      	mov	r5, r0
 800271c:	2800      	cmp	r0, #0
 800271e:	bf08      	it	eq
 8002720:	2401      	moveq	r4, #1
 8002722:	4607      	mov	r7, r0
 8002724:	eb00 0181 	add.w	r1, r0, r1, lsl #2
		 error |= objNum == 0xFFFFFFFF;

	for(size_t i = 0; i < objNum; i++){
 8002728:	4681      	mov	r9, r0
 800272a:	4589      	cmp	r9, r1
 800272c:	d106      	bne.n	800273c <os_obj_wait+0x38>
		}
	}

	/* Return if error
	 ---------------------------------------------------*/
	if(error) {
 800272e:	b19c      	cbz	r4, 8002758 <os_obj_wait+0x54>
		if(err != NULL) *err = OS_ERR_BAD_ARG;
 8002730:	2e00      	cmp	r6, #0
 8002732:	d06d      	beq.n	8002810 <os_obj_wait+0x10c>
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
			}

			/* Return
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
			if(err != NULL) *err = OS_ERR_TIMEOUT;
 8002738:	6033      	str	r3, [r6, #0]
 800273a:	e069      	b.n	8002810 <os_obj_wait+0x10c>
		error |= objList[i] == NULL;
 800273c:	f859 2b04 	ldr.w	r2, [r9], #4
 8002740:	2a00      	cmp	r2, #0
 8002742:	bf08      	it	eq
 8002744:	f044 0401 	orreq.w	r4, r4, #1
		if(objList[i] != NULL){
 8002748:	d0ef      	beq.n	800272a <os_obj_wait+0x26>
			error |= objList[i]->type == OS_OBJ_MSGQ;
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	2a05      	cmp	r2, #5
 800274e:	bf08      	it	eq
 8002750:	f044 0401 	orreq.w	r4, r4, #1
 8002754:	b2e4      	uxtb	r4, r4
 8002756:	e7e8      	b.n	800272a <os_obj_wait+0x26>
	OS_ENTER_CRITICAL();
 8002758:	f3ef 8210 	mrs	r2, PRIMASK
 800275c:	9204      	str	r2, [sp, #16]
 800275e:	b672      	cpsid	i
 8002760:	f3bf 8f6f 	isb	sy
	register uint32_t volatile xPSR = 0;
 8002764:	9405      	str	r4, [sp, #20]
	__asm volatile("mrs %[out], xpsr" : [out] "=r" (xPSR));
 8002766:	f3ef 8203 	mrs	r2, PSR
			return NULL;
		}

		/* Save information on task structure
		 ---------------------------------------------------*/
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 800276a:	f8df b320 	ldr.w	fp, [pc, #800]	; 8002a8c <os_obj_wait+0x388>
	__asm volatile("mrs %[out], xpsr" : [out] "=r" (xPSR));
 800276e:	9205      	str	r2, [sp, #20]
			uint32_t freeCount = ( (objList[i]->getFreeCount != NULL) ? objList[i]->getFreeCount(objList[i]) : 1 );
 8002770:	46a8      	mov	r8, r5
		bool allObjFree = 1;
 8002772:	2201      	movs	r2, #1
		for(size_t i = 0; i < objNum; i++){
 8002774:	45c1      	cmp	r9, r8
 8002776:	d10b      	bne.n	8002790 <os_obj_wait+0x8c>
		if(waitFlag == OS_OBJ_WAIT_ALL && allObjFree == 1){
 8002778:	9900      	ldr	r1, [sp, #0]
 800277a:	2901      	cmp	r1, #1
 800277c:	f040 80be 	bne.w	80028fc <os_obj_wait+0x1f8>
 8002780:	2a00      	cmp	r2, #0
 8002782:	f000 80bb 	beq.w	80028fc <os_obj_wait+0x1f8>
			for(size_t i = 0; i < objNum; i++){
 8002786:	f04f 0900 	mov.w	r9, #0
				os_err_e retErr = (objList[i]->obj_take != NULL) ? objList[i]->obj_take(objList[i], os_cur_task->element) : OS_ERR_UNKNOWN;
 800278a:	f8df b300 	ldr.w	fp, [pc, #768]	; 8002a8c <os_obj_wait+0x388>
 800278e:	e053      	b.n	8002838 <os_obj_wait+0x134>
			uint32_t freeCount = ( (objList[i]->getFreeCount != NULL) ? objList[i]->getFreeCount(objList[i]) : 1 );
 8002790:	f8cd 8004 	str.w	r8, [sp, #4]
 8002794:	f858 0b04 	ldr.w	r0, [r8], #4
 8002798:	68c1      	ldr	r1, [r0, #12]
 800279a:	2900      	cmp	r1, #0
 800279c:	f000 8170 	beq.w	8002a80 <os_obj_wait+0x37c>
 80027a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027a4:	4788      	blx	r1
			if(waitFlag != OS_OBJ_WAIT_ONE || freeCount == 0) continue;
 80027a6:	9900      	ldr	r1, [sp, #0]
 80027a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027ac:	b909      	cbnz	r1, 80027b2 <os_obj_wait+0xae>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d164      	bne.n	800287c <os_obj_wait+0x178>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	bf08      	it	eq
 80027b6:	2200      	moveq	r2, #0
 80027b8:	e7dc      	b.n	8002774 <os_obj_wait+0x70>
				if( (xPSR & 0x1F) != 0 && objList[i]->type == OS_OBJ_MUTEX) {
 80027ba:	9a05      	ldr	r2, [sp, #20]
 80027bc:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 80027c0:	06d3      	lsls	r3, r2, #27
 80027c2:	d008      	beq.n	80027d6 <os_obj_wait+0xd2>
 80027c4:	7802      	ldrb	r2, [r0, #0]
 80027c6:	2a02      	cmp	r2, #2
 80027c8:	d105      	bne.n	80027d6 <os_obj_wait+0xd2>
			if(err != NULL) *err = OS_ERR_FORBIDDEN;
 80027ca:	2e00      	cmp	r6, #0
 80027cc:	f000 80bf 	beq.w	800294e <os_obj_wait+0x24a>
 80027d0:	f06f 0304 	mvn.w	r3, #4
 80027d4:	e0d8      	b.n	8002988 <os_obj_wait+0x284>
				os_err_e retErr = (objList[i]->obj_take != NULL) ? objList[i]->obj_take(objList[i], os_cur_task->element) : OS_ERR_UNKNOWN;
 80027d6:	6902      	ldr	r2, [r0, #16]
 80027d8:	b1e2      	cbz	r2, 8002814 <os_obj_wait+0x110>
 80027da:	f8db 1000 	ldr.w	r1, [fp]
 80027de:	6889      	ldr	r1, [r1, #8]
 80027e0:	4790      	blx	r2
				if(retErr != OS_ERR_OK){
 80027e2:	4602      	mov	r2, r0
 80027e4:	b1c8      	cbz	r0, 800281a <os_obj_wait+0x116>
 80027e6:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 80027ea:	e008      	b.n	80027fe <os_obj_wait+0xfa>
						if(objList[j]->type == OS_OBJ_MUTEX){
 80027ec:	f857 0b04 	ldr.w	r0, [r7], #4
 80027f0:	7803      	ldrb	r3, [r0, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d103      	bne.n	80027fe <os_obj_wait+0xfa>
 80027f6:	9200      	str	r2, [sp, #0]
							os_mutex_release(objList[j]);
 80027f8:	f7ff ff4c 	bl	8002694 <os_mutex_release>
 80027fc:	9a00      	ldr	r2, [sp, #0]
					for(int j = 0; j < i; j++){
 80027fe:	42af      	cmp	r7, r5
 8002800:	d1f4      	bne.n	80027ec <os_obj_wait+0xe8>
					OS_EXIT_CRITICAL();
 8002802:	9b04      	ldr	r3, [sp, #16]
 8002804:	f383 8810 	msr	PRIMASK, r3
 8002808:	f3bf 8f6f 	isb	sy
					if(err != NULL) *err = retErr;
 800280c:	b106      	cbz	r6, 8002810 <os_obj_wait+0x10c>
 800280e:	6032      	str	r2, [r6, #0]
		return NULL;
 8002810:	2000      	movs	r0, #0
 8002812:	e02b      	b.n	800286c <os_obj_wait+0x168>
				os_err_e retErr = (objList[i]->obj_take != NULL) ? objList[i]->obj_take(objList[i], os_cur_task->element) : OS_ERR_UNKNOWN;
 8002814:	f06f 0206 	mvn.w	r2, #6
 8002818:	e7e5      	b.n	80027e6 <os_obj_wait+0xe2>
				if(blocked) {
 800281a:	b15c      	cbz	r4, 8002834 <os_obj_wait+0x130>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 800281c:	f8db 1000 	ldr.w	r1, [fp]
 8002820:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
 8002824:	6889      	ldr	r1, [r1, #8]
 8002826:	6950      	ldr	r0, [r2, #20]
 8002828:	f7ff fafd 	bl	8001e26 <os_list_remove>
					os_obj_updatePrio(objList[i]);
 800282c:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 8002830:	f7ff fd42 	bl	80022b8 <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 8002834:	f109 0901 	add.w	r9, r9, #1
 8002838:	45ca      	cmp	sl, r9
 800283a:	d1be      	bne.n	80027ba <os_obj_wait+0xb6>
			os_obj_updatePrio(os_cur_task->element);
 800283c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8002a8c <os_obj_wait+0x388>
 8002840:	f8d9 3000 	ldr.w	r3, [r9]
 8002844:	6898      	ldr	r0, [r3, #8]
 8002846:	f7ff fd37 	bl	80022b8 <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 800284a:	45b8      	cmp	r8, r7
 800284c:	d111      	bne.n	8002872 <os_obj_wait+0x16e>
			OS_EXIT_CRITICAL();
 800284e:	9b04      	ldr	r3, [sp, #16]
 8002850:	f383 8810 	msr	PRIMASK, r3
 8002854:	f3bf 8f6f 	isb	sy
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 8002858:	b124      	cbz	r4, 8002864 <os_obj_wait+0x160>
 800285a:	f8d9 3000 	ldr.w	r3, [r9]
 800285e:	6898      	ldr	r0, [r3, #8]
 8002860:	f7ff f884 	bl	800196c <os_task_on_ready_cb>
			if(err != NULL) *err = OS_ERR_OK;
 8002864:	b10e      	cbz	r6, 800286a <os_obj_wait+0x166>
 8002866:	2300      	movs	r3, #0
 8002868:	6033      	str	r3, [r6, #0]
			return objList[0];
 800286a:	6828      	ldr	r0, [r5, #0]
	/* Return
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
	if(err != NULL) *err = OS_ERR_UNKNOWN;
	return NULL;
}
 800286c:	b007      	add	sp, #28
 800286e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				os_handle_list_updateAndCheck(objList[i]);
 8002872:	f857 0b04 	ldr.w	r0, [r7], #4
 8002876:	f7ff fbef 	bl	8002058 <os_handle_list_updateAndCheck>
 800287a:	e7e6      	b.n	800284a <os_obj_wait+0x146>
			if( (xPSR & 0x1F) != 0 && objList[takingPos]->type == OS_OBJ_MUTEX) {
 800287c:	9b05      	ldr	r3, [sp, #20]
 800287e:	9a01      	ldr	r2, [sp, #4]
 8002880:	06d9      	lsls	r1, r3, #27
 8002882:	6810      	ldr	r0, [r2, #0]
 8002884:	d002      	beq.n	800288c <os_obj_wait+0x188>
 8002886:	7803      	ldrb	r3, [r0, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d09e      	beq.n	80027ca <os_obj_wait+0xc6>
			os_err_e retErr = (objList[takingPos]->obj_take != NULL) ? objList[takingPos]->obj_take(objList[takingPos], os_cur_task->element) : OS_ERR_UNKNOWN;
 800288c:	6903      	ldr	r3, [r0, #16]
 800288e:	b1eb      	cbz	r3, 80028cc <os_obj_wait+0x1c8>
 8002890:	4d7e      	ldr	r5, [pc, #504]	; (8002a8c <os_obj_wait+0x388>)
 8002892:	682a      	ldr	r2, [r5, #0]
 8002894:	6891      	ldr	r1, [r2, #8]
 8002896:	4798      	blx	r3
			if(retErr != OS_ERR_OK){
 8002898:	b9d0      	cbnz	r0, 80028d0 <os_obj_wait+0x1cc>
			os_obj_updatePrio(os_cur_task->element);
 800289a:	682b      	ldr	r3, [r5, #0]
 800289c:	6898      	ldr	r0, [r3, #8]
 800289e:	f7ff fd0b 	bl	80022b8 <os_obj_updatePrio>
			if(blocked) {
 80028a2:	bb44      	cbnz	r4, 80028f6 <os_obj_wait+0x1f2>
			os_handle_list_updateAndCheck(objList[takingPos]);
 80028a4:	9b01      	ldr	r3, [sp, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	f7ff fbd6 	bl	8002058 <os_handle_list_updateAndCheck>
			OS_EXIT_CRITICAL();
 80028ac:	9b04      	ldr	r3, [sp, #16]
 80028ae:	f383 8810 	msr	PRIMASK, r3
 80028b2:	f3bf 8f6f 	isb	sy
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 80028b6:	b11c      	cbz	r4, 80028c0 <os_obj_wait+0x1bc>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	6898      	ldr	r0, [r3, #8]
 80028bc:	f7ff f856 	bl	800196c <os_task_on_ready_cb>
			if(err != NULL) *err = OS_ERR_OK;
 80028c0:	b10e      	cbz	r6, 80028c6 <os_obj_wait+0x1c2>
 80028c2:	2300      	movs	r3, #0
 80028c4:	6033      	str	r3, [r6, #0]
			return objList[takingPos];
 80028c6:	9b01      	ldr	r3, [sp, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	e7cf      	b.n	800286c <os_obj_wait+0x168>
			os_err_e retErr = (objList[takingPos]->obj_take != NULL) ? objList[takingPos]->obj_take(objList[takingPos], os_cur_task->element) : OS_ERR_UNKNOWN;
 80028cc:	f06f 0006 	mvn.w	r0, #6
				OS_EXIT_CRITICAL();
 80028d0:	9b04      	ldr	r3, [sp, #16]
 80028d2:	f383 8810 	msr	PRIMASK, r3
 80028d6:	f3bf 8f6f 	isb	sy
				if(err != NULL) *err = retErr;
 80028da:	2e00      	cmp	r6, #0
 80028dc:	d098      	beq.n	8002810 <os_obj_wait+0x10c>
 80028de:	6030      	str	r0, [r6, #0]
 80028e0:	e796      	b.n	8002810 <os_obj_wait+0x10c>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	682a      	ldr	r2, [r5, #0]
 80028e6:	6958      	ldr	r0, [r3, #20]
 80028e8:	6891      	ldr	r1, [r2, #8]
 80028ea:	f7ff fa9c 	bl	8001e26 <os_list_remove>
					os_obj_updatePrio(objList[i]);
 80028ee:	f857 0b04 	ldr.w	r0, [r7], #4
 80028f2:	f7ff fce1 	bl	80022b8 <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 80028f6:	454f      	cmp	r7, r9
 80028f8:	d1f3      	bne.n	80028e2 <os_obj_wait+0x1de>
 80028fa:	e7d3      	b.n	80028a4 <os_obj_wait+0x1a0>
		if(timeout_ticks <= OS_WAIT_NONE){
 80028fc:	b9fb      	cbnz	r3, 800293e <os_obj_wait+0x23a>
			if(blocked) {
 80028fe:	b9e4      	cbnz	r4, 800293a <os_obj_wait+0x236>
			OS_EXIT_CRITICAL();
 8002900:	9b04      	ldr	r3, [sp, #16]
 8002902:	f383 8810 	msr	PRIMASK, r3
 8002906:	f3bf 8f6f 	isb	sy
			if(err != NULL) *err = OS_ERR_TIMEOUT;
 800290a:	2e00      	cmp	r6, #0
 800290c:	d080      	beq.n	8002810 <os_obj_wait+0x10c>
 800290e:	f06f 0305 	mvn.w	r3, #5
 8002912:	e711      	b.n	8002738 <os_obj_wait+0x34>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6958      	ldr	r0, [r3, #20]
 800291a:	6891      	ldr	r1, [r2, #8]
 800291c:	f7ff fa83 	bl	8001e26 <os_list_remove>
					os_obj_updatePrio(objList[i]);
 8002920:	f855 0b04 	ldr.w	r0, [r5], #4
 8002924:	f7ff fcc8 	bl	80022b8 <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 8002928:	4545      	cmp	r5, r8
 800292a:	d1f3      	bne.n	8002914 <os_obj_wait+0x210>
				for(size_t i = 0; i < objNum; i++){
 800292c:	45b8      	cmp	r8, r7
 800292e:	d0e7      	beq.n	8002900 <os_obj_wait+0x1fc>
					os_handle_list_updateAndCheck(objList[i]);
 8002930:	f857 0b04 	ldr.w	r0, [r7], #4
 8002934:	f7ff fb90 	bl	8002058 <os_handle_list_updateAndCheck>
 8002938:	e7f8      	b.n	800292c <os_obj_wait+0x228>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 800293a:	4c54      	ldr	r4, [pc, #336]	; (8002a8c <os_obj_wait+0x388>)
 800293c:	e7f4      	b.n	8002928 <os_obj_wait+0x224>
 800293e:	9301      	str	r3, [sp, #4]
		if(os_scheduler_state_get() != OS_SCHEDULER_START) {
 8002940:	f000 f966 	bl	8002c10 <os_scheduler_state_get>
 8002944:	2801      	cmp	r0, #1
 8002946:	9b01      	ldr	r3, [sp, #4]
 8002948:	d020      	beq.n	800298c <os_obj_wait+0x288>
			if(blocked) {
 800294a:	b9cc      	cbnz	r4, 8002980 <os_obj_wait+0x27c>
			if(err != NULL) *err = OS_ERR_NOT_READY;
 800294c:	b9d6      	cbnz	r6, 8002984 <os_obj_wait+0x280>
			OS_EXIT_CRITICAL();
 800294e:	9b04      	ldr	r3, [sp, #16]
 8002950:	f383 8810 	msr	PRIMASK, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	e75a      	b.n	8002810 <os_obj_wait+0x10c>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	6958      	ldr	r0, [r3, #20]
 8002960:	6891      	ldr	r1, [r2, #8]
 8002962:	f7ff fa60 	bl	8001e26 <os_list_remove>
					os_obj_updatePrio(objList[i]);
 8002966:	f855 0b04 	ldr.w	r0, [r5], #4
 800296a:	f7ff fca5 	bl	80022b8 <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 800296e:	4545      	cmp	r5, r8
 8002970:	d1f3      	bne.n	800295a <os_obj_wait+0x256>
				for(size_t i = 0; i < objNum; i++){
 8002972:	45b8      	cmp	r8, r7
 8002974:	d0ea      	beq.n	800294c <os_obj_wait+0x248>
					os_handle_list_updateAndCheck(objList[i]);
 8002976:	f857 0b04 	ldr.w	r0, [r7], #4
 800297a:	f7ff fb6d 	bl	8002058 <os_handle_list_updateAndCheck>
 800297e:	e7f8      	b.n	8002972 <os_obj_wait+0x26e>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8002980:	4c42      	ldr	r4, [pc, #264]	; (8002a8c <os_obj_wait+0x388>)
 8002982:	e7f4      	b.n	800296e <os_obj_wait+0x26a>
			if(err != NULL) *err = OS_ERR_NOT_READY;
 8002984:	f06f 0303 	mvn.w	r3, #3
			if(err != NULL) *err = OS_ERR_FORBIDDEN;
 8002988:	6033      	str	r3, [r6, #0]
 800298a:	e7e0      	b.n	800294e <os_obj_wait+0x24a>
		if( (xPSR & 0x1F) != 0) {
 800298c:	9a05      	ldr	r2, [sp, #20]
 800298e:	06d2      	lsls	r2, r2, #27
 8002990:	f47f af1b 	bne.w	80027ca <os_obj_wait+0xc6>
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 8002994:	f8db 2000 	ldr.w	r2, [fp]
 8002998:	6892      	ldr	r2, [r2, #8]
		((os_task_t*)os_cur_task->element)->wakeCoutdown 	= timeout_ticks;
 800299a:	61d3      	str	r3, [r2, #28]
		((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 80029a0:	2103      	movs	r1, #3
		((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 80029a2:	63d3      	str	r3, [r2, #60]	; 0x3c
		((os_task_t*)os_cur_task->element)->waitFlag		= waitFlag;
 80029a4:	9b00      	ldr	r3, [sp, #0]
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 80029a6:	7611      	strb	r1, [r2, #24]
		((os_task_t*)os_cur_task->element)->sizeObjs		= objNum;
 80029a8:	e9c2 5a0d 	strd	r5, sl, [r2, #52]	; 0x34
		((os_task_t*)os_cur_task->element)->waitFlag		= waitFlag;
 80029ac:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if(!blocked){
 80029b0:	b9a4      	cbnz	r4, 80029dc <os_obj_wait+0x2d8>
			for(size_t i = 0; i < objNum; i++){
 80029b2:	45a2      	cmp	sl, r4
 80029b4:	d12d      	bne.n	8002a12 <os_obj_wait+0x30e>
 80029b6:	462c      	mov	r4, r5
			for(size_t i = 0; i < objNum; i++){
 80029b8:	45a0      	cmp	r8, r4
 80029ba:	d15c      	bne.n	8002a76 <os_obj_wait+0x372>
			OS_EXIT_CRITICAL();
 80029bc:	9b04      	ldr	r3, [sp, #16]
 80029be:	f383 8810 	msr	PRIMASK, r3
 80029c2:	f3bf 8f6f 	isb	sy
			os_task_on_block_cb(os_cur_task->element);
 80029c6:	f8db 3000 	ldr.w	r3, [fp]
 80029ca:	6898      	ldr	r0, [r3, #8]
 80029cc:	f7fe ffcf 	bl	800196e <os_task_on_block_cb>
			OS_ENTER_CRITICAL();
 80029d0:	f3ef 8310 	mrs	r3, PRIMASK
 80029d4:	9304      	str	r3, [sp, #16]
 80029d6:	b672      	cpsid	i
 80029d8:	f3bf 8f6f 	isb	sy
		OS_SET_PENDSV();
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <os_obj_wait+0x38c>)
 80029de:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
		__os_enable_irq();
 80029ea:	b662      	cpsie	i
		OS_ENTER_CRITICAL();
 80029ec:	f3ef 8310 	mrs	r3, PRIMASK
 80029f0:	9304      	str	r3, [sp, #16]
 80029f2:	b672      	cpsid	i
 80029f4:	f3bf 8f6f 	isb	sy
		timeout_ticks 									= ((os_task_t*)os_cur_task->element)->wakeCoutdown;
 80029f8:	f8db 3000 	ldr.w	r3, [fp]
 80029fc:	689a      	ldr	r2, [r3, #8]
		((os_task_t*)os_cur_task->element)->objWaited 	= NULL;
 80029fe:	2100      	movs	r1, #0
		timeout_ticks 									= ((os_task_t*)os_cur_task->element)->wakeCoutdown;
 8002a00:	69d3      	ldr	r3, [r2, #28]
		((os_task_t*)os_cur_task->element)->objWaited 	= NULL;
 8002a02:	6351      	str	r1, [r2, #52]	; 0x34
		((os_task_t*)os_cur_task->element)->wakeCoutdown = 0;
 8002a04:	61d1      	str	r1, [r2, #28]
		((os_task_t*)os_cur_task->element)->sizeObjs		= 0;
 8002a06:	6391      	str	r1, [r2, #56]	; 0x38
		((os_task_t*)os_cur_task->element)->objWanted	= 0xFFFFFFFF;
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	63d1      	str	r1, [r2, #60]	; 0x3c
		blocked = true;
 8002a0e:	2401      	movs	r4, #1
 8002a10:	e6ae      	b.n	8002770 <os_obj_wait+0x6c>
				os_err_e retErr = os_list_add(objList[i]->blockList, (os_handle_t)os_cur_task->element, OS_LIST_FIRST);
 8002a12:	f8db 1000 	ldr.w	r1, [fp]
 8002a16:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002a1a:	6889      	ldr	r1, [r1, #8]
 8002a1c:	6958      	ldr	r0, [r3, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f7ff f9c5 	bl	8001dae <os_list_add>
				if(retErr != OS_ERR_OK){
 8002a24:	b308      	cbz	r0, 8002a6a <os_obj_wait+0x366>
 8002a26:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8002a2a:	f8db 3000 	ldr.w	r3, [fp]
					for(size_t j = 0; j < i; j++){
 8002a2e:	42a7      	cmp	r7, r4
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	d114      	bne.n	8002a5e <os_obj_wait+0x35a>
					((os_task_t*)os_cur_task->element)->state 			= OS_TASK_READY;
 8002a34:	2302      	movs	r3, #2
					((os_task_t*)os_cur_task->element)->wakeCoutdown 	= 0;
 8002a36:	2000      	movs	r0, #0
					((os_task_t*)os_cur_task->element)->state 			= OS_TASK_READY;
 8002a38:	760b      	strb	r3, [r1, #24]
					((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	63cb      	str	r3, [r1, #60]	; 0x3c
					((os_task_t*)os_cur_task->element)->wakeCoutdown 	= 0;
 8002a40:	61c8      	str	r0, [r1, #28]
					((os_task_t*)os_cur_task->element)->sizeObjs		= 0;
 8002a42:	e9c1 000d 	strd	r0, r0, [r1, #52]	; 0x34
					OS_EXIT_CRITICAL();
 8002a46:	9b04      	ldr	r3, [sp, #16]
 8002a48:	f383 8810 	msr	PRIMASK, r3
 8002a4c:	f3bf 8f6f 	isb	sy
					if(err != NULL) *err = OS_ERR_INSUFFICIENT_HEAP;
 8002a50:	2e00      	cmp	r6, #0
 8002a52:	f43f aedd 	beq.w	8002810 <os_obj_wait+0x10c>
 8002a56:	f06f 0302 	mvn.w	r3, #2
 8002a5a:	6033      	str	r3, [r6, #0]
 8002a5c:	e706      	b.n	800286c <os_obj_wait+0x168>
						os_list_remove(objList[j]->blockList, (os_handle_t)os_cur_task->element);
 8002a5e:	f857 3b04 	ldr.w	r3, [r7], #4
 8002a62:	6958      	ldr	r0, [r3, #20]
 8002a64:	f7ff f9df 	bl	8001e26 <os_list_remove>
 8002a68:	e7df      	b.n	8002a2a <os_obj_wait+0x326>
				os_obj_updatePrio(objList[i]);
 8002a6a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8002a6e:	f7ff fc23 	bl	80022b8 <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 8002a72:	3401      	adds	r4, #1
 8002a74:	e79d      	b.n	80029b2 <os_obj_wait+0x2ae>
				os_handle_list_updateAndCheck(objList[i]);
 8002a76:	f854 0b04 	ldr.w	r0, [r4], #4
 8002a7a:	f7ff faed 	bl	8002058 <os_handle_list_updateAndCheck>
 8002a7e:	e79b      	b.n	80029b8 <os_obj_wait+0x2b4>
			if(waitFlag != OS_OBJ_WAIT_ONE || freeCount == 0) continue;
 8002a80:	9900      	ldr	r1, [sp, #0]
 8002a82:	2900      	cmp	r1, #0
 8002a84:	f43f aefa 	beq.w	800287c <os_obj_wait+0x178>
			uint32_t freeCount = ( (objList[i]->getFreeCount != NULL) ? objList[i]->getFreeCount(objList[i]) : 1 );
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e692      	b.n	80027b2 <os_obj_wait+0xae>
 8002a8c:	20014594 	.word	0x20014594
 8002a90:	e000e008 	.word	0xe000e008

08002a94 <os_obj_single_wait>:
 * @param uint32_t timeout_ticks : [ in] Amount of time before a timeout is detected. If OS_WAIT_FOREVER, the task blocks forever. If OS_WAIT_NONE, the task returns imediately
 * @parem os_err_e* err			 : [out] Error code. Ignored if NULL.
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
os_handle_t os_obj_single_wait(os_handle_t obj, uint32_t timeout_ticks, os_err_e* err){
 8002a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	/* Form array and call wait function
	 ---------------------------------------------------*/
	os_handle_t objList[] = { obj };
 8002a96:	ac04      	add	r4, sp, #16
	return os_obj_wait(objList, 1, OS_OBJ_WAIT_ONE, timeout_ticks, err);
 8002a98:	460b      	mov	r3, r1
	os_handle_t objList[] = { obj };
 8002a9a:	f844 0d04 	str.w	r0, [r4, #-4]!
	return os_obj_wait(objList, 1, OS_OBJ_WAIT_ONE, timeout_ticks, err);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f7ff fe2d 	bl	8002704 <os_obj_wait>
}
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd10      	pop	{r4, pc}
	...

08002ab0 <os_scheduler>:
 **********************************************************************/
__used static void os_scheduler(){

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <os_scheduler+0xcc>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
__used static void os_scheduler(){
 8002ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(state != OS_SCHEDULER_START) return;
 8002aba:	d13c      	bne.n	8002b36 <os_scheduler+0x86>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__os_disable_irq();
 8002abc:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9301      	str	r3, [sp, #4]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8002ac2:	f3ef 8309 	mrs	r3, PSP

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 8002ac6:	4c2e      	ldr	r4, [pc, #184]	; (8002b80 <os_scheduler+0xd0>)
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8002ac8:	9301      	str	r3, [sp, #4]
	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 8002aca:	f8d4 8000 	ldr.w	r8, [r4]
 8002ace:	f1b8 0f00 	cmp.w	r8, #0
 8002ad2:	d003      	beq.n	8002adc <os_scheduler+0x2c>
 8002ad4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002ad8:	9a01      	ldr	r2, [sp, #4]
 8002ada:	621a      	str	r2, [r3, #32]
	os_list_cell_t* it = os_head.head.next;
 8002adc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8002b84 <os_scheduler+0xd4>
 8002ae0:	f8da 7000 	ldr.w	r7, [sl]
	os_list_cell_t* it_low = os_cur_task;
 8002ae4:	6826      	ldr	r6, [r4, #0]
	os_list_cell_t* highSide= NULL;
 8002ae6:	2500      	movs	r5, #0
	int8_t highSidePrio = -1;
 8002ae8:	f04f 3bff 	mov.w	fp, #4294967295
	while(it != os_cur_task){
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	429f      	cmp	r7, r3
 8002af0:	d124      	bne.n	8002b3c <os_scheduler+0x8c>
	os_list_cell_t* lowSide = NULL;
 8002af2:	2700      	movs	r7, #0
	int8_t lowSidePrio = -1;
 8002af4:	f04f 39ff 	mov.w	r9, #4294967295
	while(it_low != NULL){
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d12b      	bne.n	8002b54 <os_scheduler+0xa4>
	if(lowSide == NULL && highSide == NULL) return NULL;
 8002afc:	2f00      	cmp	r7, #0
 8002afe:	d135      	bne.n	8002b6c <os_scheduler+0xbc>
 8002b00:	2d00      	cmp	r5, #0
 8002b02:	d135      	bne.n	8002b70 <os_scheduler+0xc0>
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 8002b04:	6025      	str	r5, [r4, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
			__os_enable_irq();
 8002b06:	b662      	cpsie	i
			os_no_task_ready_cb();
 8002b08:	f7fe ff33 	bl	8001972 <os_no_task_ready_cb>
			__os_disable_irq();
 8002b0c:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0e5      	beq.n	8002ae0 <os_scheduler+0x30>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	9301      	str	r3, [sp, #4]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 8002b20:	f1b8 0f00 	cmp.w	r8, #0
 8002b24:	d006      	beq.n	8002b34 <os_scheduler+0x84>
 8002b26:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002b2a:	7e03      	ldrb	r3, [r0, #24]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d101      	bne.n	8002b34 <os_scheduler+0x84>
 8002b30:	f000 f930 	bl	8002d94 <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__os_enable_irq();
 8002b34:	b662      	cpsie	i

}
 8002b36:	b003      	add	sp, #12
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 8002b3c:	68b8      	ldr	r0, [r7, #8]
 8002b3e:	7e03      	ldrb	r3, [r0, #24]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d105      	bne.n	8002b50 <os_scheduler+0xa0>
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 8002b44:	f000 f9c8 	bl	8002ed8 <os_task_getPrio>
			if(highSidePrio <= task_prio){
 8002b48:	4558      	cmp	r0, fp
 8002b4a:	bfa4      	itt	ge
 8002b4c:	463d      	movge	r5, r7
 8002b4e:	4683      	movge	fp, r0
		it = it->next;
 8002b50:	683f      	ldr	r7, [r7, #0]
 8002b52:	e7cb      	b.n	8002aec <os_scheduler+0x3c>
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 8002b54:	68b0      	ldr	r0, [r6, #8]
 8002b56:	7e03      	ldrb	r3, [r0, #24]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d105      	bne.n	8002b68 <os_scheduler+0xb8>
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 8002b5c:	f000 f9bc 	bl	8002ed8 <os_task_getPrio>
			if(lowSidePrio <= task_prio ){
 8002b60:	4548      	cmp	r0, r9
 8002b62:	bfa4      	itt	ge
 8002b64:	4637      	movge	r7, r6
 8002b66:	4681      	movge	r9, r0
		it_low = it_low->next;
 8002b68:	6836      	ldr	r6, [r6, #0]
 8002b6a:	e7c5      	b.n	8002af8 <os_scheduler+0x48>
	if(highSide == NULL && lowSide != NULL) return lowSide;
 8002b6c:	b915      	cbnz	r5, 8002b74 <os_scheduler+0xc4>
 8002b6e:	463d      	mov	r5, r7
		os_cur_task = os_round_robin();
 8002b70:	6025      	str	r5, [r4, #0]
 8002b72:	e7cc      	b.n	8002b0e <os_scheduler+0x5e>
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 8002b74:	45cb      	cmp	fp, r9
 8002b76:	dafb      	bge.n	8002b70 <os_scheduler+0xc0>
		os_cur_task = os_round_robin();
 8002b78:	6027      	str	r7, [r4, #0]
 8002b7a:	e7c8      	b.n	8002b0e <os_scheduler+0x5e>
 8002b7c:	20014590 	.word	0x20014590
 8002b80:	20014594 	.word	0x20014594
 8002b84:	20014de0 	.word	0x20014de0

08002b88 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8002b88:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8002b8c:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8002b90:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 8002b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 8002b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 8002b9a:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 8002b9e:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 8002ba0:	f7ff ff86 	bl	8002ab0 <os_scheduler>
	__asm volatile ("pop {lr}");
 8002ba4:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8002ba8:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 8002bac:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8002bb0:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8002bb4:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 8002bb6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 8002bba:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 8002bbe:	4770      	bx	lr

08002bc0 <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 8002bc0:	b507      	push	{r0, r1, r2, lr}

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 8002bc2:	f7fe fe81 	bl	80018c8 <os_init_get>
 8002bc6:	b1d8      	cbz	r0, 8002c00 <os_scheduler_start+0x40>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8002bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	b672      	cpsid	i
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <os_scheduler_start+0x48>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	f000 f987 	bl	8002eec <os_task_must_yeild>
 8002bde:	b130      	cbz	r0, 8002bee <os_scheduler_start+0x2e>
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <os_scheduler_start+0x4c>)
 8002be2:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 8002bee:	9b01      	ldr	r3, [sp, #4]
 8002bf0:	f383 8810 	msr	PRIMASK, r3
 8002bf4:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 8002bf8:	2000      	movs	r0, #0
}
 8002bfa:	b003      	add	sp, #12
 8002bfc:	f85d fb04 	ldr.w	pc, [sp], #4
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 8002c00:	f06f 0003 	mvn.w	r0, #3
 8002c04:	e7f9      	b.n	8002bfa <os_scheduler_start+0x3a>
 8002c06:	bf00      	nop
 8002c08:	20014590 	.word	0x20014590
 8002c0c:	e000e008 	.word	0xe000e008

08002c10 <os_scheduler_state_get>:
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
	return state;
}
 8002c10:	4b01      	ldr	r3, [pc, #4]	; (8002c18 <os_scheduler_state_get+0x8>)
 8002c12:	7818      	ldrb	r0, [r3, #0]
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20014590 	.word	0x20014590

08002c1c <os_task_objTake>:
static os_err_e os_task_objTake(os_handle_t h, os_handle_t takingTask){
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);

	return OS_ERR_OK;
}
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	4770      	bx	lr

08002c20 <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 8002c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 8002c22:	1e0e      	subs	r6, r1, #0
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 8002c24:	4607      	mov	r7, r0
 8002c26:	4614      	mov	r4, r2
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 8002c28:	db7c      	blt.n	8002d24 <os_task_init+0x104>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8002c2a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 8002c2e:	d379      	bcc.n	8002d24 <os_task_init+0x104>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8002c30:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c34:	d376      	bcc.n	8002d24 <os_task_init+0x104>
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7fe ff5c 	bl	8001af4 <os_heap_alloc>
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002c3c:	b920      	cbnz	r0, 8002c48 <os_task_init+0x28>
	 ------------------------------------------------------*/
	if(t->obj.blockList == NULL || t->ownedMutex == NULL){
		os_heap_free(t);
		os_list_clear(t->obj.blockList);
		os_list_clear(t->ownedMutex);
		return OS_ERR_INSUFFICIENT_HEAP;
 8002c3e:	f06f 0502 	mvn.w	r5, #2
	main_task = (os_handle_t) t;

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
}
 8002c42:	4628      	mov	r0, r5
 8002c44:	b003      	add	sp, #12
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 8002c48:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 8002c4a:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 8002c4e:	f386 8809 	msr	PSP, r6
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 8002c52:	4404      	add	r4, r0
 8002c54:	f024 0407 	bic.w	r4, r4, #7
 8002c58:	9401      	str	r4, [sp, #4]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 8002c5a:	9b01      	ldr	r3, [sp, #4]
 8002c5c:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 8002c5e:	f386 8808 	msr	MSP, r6
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 8002c62:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 8002c66:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 8002c6a:	f386 8814 	msr	CONTROL, r6
	__asm volatile ("pop {r6, lr}");
 8002c6e:	e8bd 4040 	ldmia.w	sp!, {r6, lr}
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8002c72:	2058      	movs	r0, #88	; 0x58
 8002c74:	f7fe ff3e 	bl	8001af4 <os_heap_alloc>
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002c78:	4604      	mov	r4, r0
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d0df      	beq.n	8002c3e <os_task_init+0x1e>
	t->obj.type				= OS_OBJ_TASK;
 8002c7e:	2301      	movs	r3, #1
	t->obj.objUpdate		= 0;
 8002c80:	2500      	movs	r5, #0
	t->obj.type				= OS_OBJ_TASK;
 8002c82:	7003      	strb	r3, [r0, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <os_task_init+0x10c>)
 8002c86:	60c3      	str	r3, [r0, #12]
	t->obj.objUpdate		= 0;
 8002c88:	7205      	strb	r5, [r0, #8]
	t->obj.blockList		= os_list_init();
 8002c8a:	f7ff f846 	bl	8001d1a <os_list_init>
	t->obj.obj_take			= &os_task_objTake;
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <os_task_init+0x110>)
 8002c90:	6123      	str	r3, [r4, #16]
	t->state	 			= OS_TASK_READY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	7623      	strb	r3, [r4, #24]
	t->obj.blockList		= os_list_init();
 8002c96:	6160      	str	r0, [r4, #20]
	t->obj.name 			= main_name;
 8002c98:	6067      	str	r7, [r4, #4]
	t->basePriority 		= main_task_priority;
 8002c9a:	7666      	strb	r6, [r4, #25]
	t->priority		    	= main_task_priority;
 8002c9c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	t->pid					= 0;
 8002ca0:	85a5      	strh	r5, [r4, #44]	; 0x2c
	t->wakeCoutdown  		= 0;
 8002ca2:	e9c4 5507 	strd	r5, r5, [r4, #28]
	t->stackBase	    	= 0;
 8002ca6:	62a5      	str	r5, [r4, #40]	; 0x28
	t->sizeObjs 			= 0;
 8002ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
	t->retVal				= NULL;
 8002cac:	64a5      	str	r5, [r4, #72]	; 0x48
	t->ownedMutex			= os_list_init();
 8002cae:	f7ff f834 	bl	8001d1a <os_list_init>
	if(t->obj.blockList == NULL || t->ownedMutex == NULL){
 8002cb2:	6963      	ldr	r3, [r4, #20]
	t->ownedMutex			= os_list_init();
 8002cb4:	6460      	str	r0, [r4, #68]	; 0x44
	t->argv					= NULL;
 8002cb6:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
	if(t->obj.blockList == NULL || t->ownedMutex == NULL){
 8002cba:	b103      	cbz	r3, 8002cbe <os_task_init+0x9e>
 8002cbc:	b948      	cbnz	r0, 8002cd2 <os_task_init+0xb2>
		os_heap_free(t);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7fe ff78 	bl	8001bb4 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8002cc4:	6960      	ldr	r0, [r4, #20]
 8002cc6:	f7ff f8f6 	bl	8001eb6 <os_list_clear>
		os_list_clear(t->ownedMutex);
 8002cca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002ccc:	f7ff f8f3 	bl	8001eb6 <os_list_clear>
 8002cd0:	e7b5      	b.n	8002c3e <os_task_init+0x1e>
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	4817      	ldr	r0, [pc, #92]	; (8002d34 <os_task_init+0x114>)
 8002cd8:	f7ff f869 	bl	8001dae <os_list_add>
	if(t->obj.blockList == NULL || t->ownedMutex == NULL || ret != OS_ERR_OK) {
 8002cdc:	6963      	ldr	r3, [r4, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ed      	beq.n	8002cbe <os_task_init+0x9e>
 8002ce2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ea      	beq.n	8002cbe <os_task_init+0x9e>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d1e8      	bne.n	8002cbe <os_task_init+0x9e>
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8002cec:	2200      	movs	r2, #0
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4811      	ldr	r0, [pc, #68]	; (8002d38 <os_task_init+0x118>)
 8002cf2:	f7ff f85c 	bl	8001dae <os_list_add>
	if(ret != OS_ERR_OK) {
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	b168      	cbz	r0, 8002d16 <os_task_init+0xf6>
		os_heap_free(t);
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7fe ff5a 	bl	8001bb4 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8002d00:	6960      	ldr	r0, [r4, #20]
 8002d02:	f7ff f8d8 	bl	8001eb6 <os_list_clear>
		os_list_clear(t->ownedMutex);
 8002d06:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002d08:	f7ff f8d5 	bl	8001eb6 <os_list_clear>
		os_list_remove(&os_head, (os_handle_t) t);
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	4809      	ldr	r0, [pc, #36]	; (8002d34 <os_task_init+0x114>)
 8002d10:	f7ff f889 	bl	8001e26 <os_list_remove>
		return ret;
 8002d14:	e795      	b.n	8002c42 <os_task_init+0x22>
	os_cur_task = os_head.head.next;
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <os_task_init+0x114>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <os_task_init+0x11c>)
 8002d1c:	601a      	str	r2, [r3, #0]
	main_task = (os_handle_t) t;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <os_task_init+0x120>)
 8002d20:	601c      	str	r4, [r3, #0]
	return ret;
 8002d22:	e78e      	b.n	8002c42 <os_task_init+0x22>
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 8002d24:	f04f 35ff 	mov.w	r5, #4294967295
 8002d28:	e78b      	b.n	8002c42 <os_task_init+0x22>
 8002d2a:	bf00      	nop
 8002d2c:	08002f7d 	.word	0x08002f7d
 8002d30:	08002c1d 	.word	0x08002c1d
 8002d34:	20014de0 	.word	0x20014de0
 8002d38:	20014dc0 	.word	0x20014dc0
 8002d3c:	20014594 	.word	0x20014594
 8002d40:	20014dfc 	.word	0x20014dfc

08002d44 <os_task_yeild>:
 **********************************************************************/
void os_task_yeild(){

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 8002d44:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <os_task_yeild+0x10>)
 8002d46:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 8002d52:	4770      	bx	lr
 8002d54:	e000e008 	.word	0xe000e008

08002d58 <os_task_return>:
os_err_e os_task_return(void* retVal){
 8002d58:	b513      	push	{r0, r1, r4, lr}
 8002d5a:	4604      	mov	r4, r0
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002d5c:	f7ff ff58 	bl	8002c10 <os_scheduler_state_get>
 8002d60:	2801      	cmp	r0, #1
 8002d62:	d111      	bne.n	8002d88 <os_task_return+0x30>
	OS_ENTER_CRITICAL();
 8002d64:	f3ef 8310 	mrs	r3, PRIMASK
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	b672      	cpsid	i
 8002d6c:	f3bf 8f6f 	isb	sy
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <os_task_return+0x38>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	7618      	strb	r0, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 8002d78:	649c      	str	r4, [r3, #72]	; 0x48
	os_handle_list_updateAndCheck(os_cur_task->element);
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f96c 	bl	8002058 <os_handle_list_updateAndCheck>
		os_task_yeild();
 8002d80:	f7ff ffe0 	bl	8002d44 <os_task_yeild>
		__os_enable_irq();
 8002d84:	b662      	cpsie	i
 8002d86:	e7fb      	b.n	8002d80 <os_task_return+0x28>
}
 8002d88:	f06f 0003 	mvn.w	r0, #3
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd10      	pop	{r4, pc}
 8002d90:	20014594 	.word	0x20014594

08002d94 <os_task_delete>:
os_err_e os_task_delete(os_handle_t h){
 8002d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d96:	4604      	mov	r4, r0
	os_list_cell_t* list = os_list_search(&os_head, h);
 8002d98:	4601      	mov	r1, r0
 8002d9a:	4848      	ldr	r0, [pc, #288]	; (8002ebc <os_task_delete+0x128>)
 8002d9c:	f7fe ffca 	bl	8001d34 <os_list_search>
	if(t == NULL) return OS_ERR_BAD_ARG;
 8002da0:	2c00      	cmp	r4, #0
 8002da2:	f000 8088 	beq.w	8002eb6 <os_task_delete+0x122>
	if(list == NULL) return OS_ERR_INVALID;
 8002da6:	2800      	cmp	r0, #0
 8002da8:	f000 8082 	beq.w	8002eb0 <os_task_delete+0x11c>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 8002dac:	7823      	ldrb	r3, [r4, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	f040 8081 	bne.w	8002eb6 <os_task_delete+0x122>
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002db4:	4d42      	ldr	r5, [pc, #264]	; (8002ec0 <os_task_delete+0x12c>)
 8002db6:	682a      	ldr	r2, [r5, #0]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	42a2      	cmp	r2, r4
 8002dbc:	d014      	beq.n	8002de8 <os_task_delete+0x54>
	OS_ENTER_CRITICAL();
 8002dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	b672      	cpsid	i
 8002dc6:	f3bf 8f6f 	isb	sy
	t->state = OS_TASK_ENDED;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	7623      	strb	r3, [r4, #24]
	os_handle_list_updateAndCheck(h);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff f942 	bl	8002058 <os_handle_list_updateAndCheck>
	if(h == os_cur_task->element){
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	42a3      	cmp	r3, r4
 8002dda:	d10c      	bne.n	8002df6 <os_task_delete+0x62>
		t->state = OS_TASK_DELETING;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	7623      	strb	r3, [r4, #24]
			os_task_yeild();
 8002de0:	f7ff ffb0 	bl	8002d44 <os_task_yeild>
			__os_enable_irq();
 8002de4:	b662      	cpsie	i
 8002de6:	e7fb      	b.n	8002de0 <os_task_delete+0x4c>
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002de8:	f7ff ff12 	bl	8002c10 <os_scheduler_state_get>
 8002dec:	2801      	cmp	r0, #1
 8002dee:	d0e6      	beq.n	8002dbe <os_task_delete+0x2a>
 8002df0:	f06f 0003 	mvn.w	r0, #3
 8002df4:	e038      	b.n	8002e68 <os_task_delete+0xd4>
	if( t->objWaited != NULL) {
 8002df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d14e      	bne.n	8002e9a <os_task_delete+0x106>
	os_list_remove(&os_obj_head, h);
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4831      	ldr	r0, [pc, #196]	; (8002ec4 <os_task_delete+0x130>)
 8002e00:	f7ff f811 	bl	8001e26 <os_list_remove>
	os_list_remove(&os_head, h);
 8002e04:	4621      	mov	r1, r4
 8002e06:	482d      	ldr	r0, [pc, #180]	; (8002ebc <os_task_delete+0x128>)
 8002e08:	f7ff f80d 	bl	8001e26 <os_list_remove>
	os_list_clear(h->blockList);
 8002e0c:	6960      	ldr	r0, [r4, #20]
 8002e0e:	f7ff f852 	bl	8001eb6 <os_list_clear>
	os_list_clear(t->ownedMutex);
 8002e12:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002e14:	f7ff f84f 	bl	8001eb6 <os_list_clear>
	if(t->argc > 0){
 8002e18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	dd0b      	ble.n	8002e36 <os_task_delete+0xa2>
		os_heap_free(t->fnPtr);
 8002e1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e20:	f7fe fec8 	bl	8001bb4 <os_heap_free>
		for(int i = 0; i < t->argc && t->argv != NULL; i++){
 8002e24:	2500      	movs	r5, #0
			t->argv[i] = NULL;
 8002e26:	462e      	mov	r6, r5
		for(int i = 0; i < t->argc && t->argv != NULL; i++){
 8002e28:	e9d4 3014 	ldrd	r3, r0, [r4, #80]	; 0x50
 8002e2c:	42ab      	cmp	r3, r5
 8002e2e:	dd00      	ble.n	8002e32 <os_task_delete+0x9e>
 8002e30:	bba8      	cbnz	r0, 8002e9e <os_task_delete+0x10a>
		os_heap_free(t->argv);
 8002e32:	f7fe febf 	bl	8001bb4 <os_heap_free>
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 8002e36:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8002e3a:	1ac0      	subs	r0, r0, r3
 8002e3c:	f7fe feba 	bl	8001bb4 <os_heap_free>
	t->objWaited = NULL;
 8002e40:	2500      	movs	r5, #0
	t->state = OS_TASK_ENDED;
 8002e42:	2301      	movs	r3, #1
 8002e44:	7623      	strb	r3, [r4, #24]
	t->sizeObjs = 0;
 8002e46:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
	t->pStack = 0;
 8002e4a:	6225      	str	r5, [r4, #32]
	t->stackSize = 0;
 8002e4c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	t->wakeCoutdown = 0;
 8002e50:	61e5      	str	r5, [r4, #28]
	t->argv = 0;
 8002e52:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
	os_heap_free(h);
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7fe feac 	bl	8001bb4 <os_heap_free>
	OS_EXIT_CRITICAL();
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	f383 8810 	msr	PRIMASK, r3
 8002e62:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8002e66:	4628      	mov	r0, r5
}
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
			if(t->objWaited[i] == NULL) continue;
 8002e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e6e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002e72:	b16b      	cbz	r3, 8002e90 <os_task_delete+0xfc>
			os_list_remove(t->objWaited[i]->blockList, h);
 8002e74:	4621      	mov	r1, r4
 8002e76:	6958      	ldr	r0, [r3, #20]
 8002e78:	f7fe ffd5 	bl	8001e26 <os_list_remove>
			os_obj_updatePrio(t->objWaited[i]);
 8002e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002e82:	f7ff fa19 	bl	80022b8 <os_obj_updatePrio>
			os_handle_list_updateAndCheck(t->objWaited[i]);
 8002e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002e8c:	f7ff f8e4 	bl	8002058 <os_handle_list_updateAndCheck>
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8002e90:	3501      	adds	r5, #1
 8002e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e94:	42ab      	cmp	r3, r5
 8002e96:	d8e9      	bhi.n	8002e6c <os_task_delete+0xd8>
 8002e98:	e7b0      	b.n	8002dfc <os_task_delete+0x68>
 8002e9a:	2500      	movs	r5, #0
 8002e9c:	e7f9      	b.n	8002e92 <os_task_delete+0xfe>
			os_heap_free(t->argv[i]);
 8002e9e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002ea2:	f7fe fe87 	bl	8001bb4 <os_heap_free>
			t->argv[i] = NULL;
 8002ea6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ea8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
		for(int i = 0; i < t->argc && t->argv != NULL; i++){
 8002eac:	3501      	adds	r5, #1
 8002eae:	e7bb      	b.n	8002e28 <os_task_delete+0x94>
	if(list == NULL) return OS_ERR_INVALID;
 8002eb0:	f06f 0001 	mvn.w	r0, #1
 8002eb4:	e7d8      	b.n	8002e68 <os_task_delete+0xd4>
	if(t == NULL) return OS_ERR_BAD_ARG;
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	e7d5      	b.n	8002e68 <os_task_delete+0xd4>
 8002ebc:	20014de0 	.word	0x20014de0
 8002ec0:	20014594 	.word	0x20014594
 8002ec4:	20014dc0 	.word	0x20014dc0

08002ec8 <os_task_end>:
	os_task_delete((os_handle_t) os_cur_task->element);
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <os_task_end+0xc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6898      	ldr	r0, [r3, #8]
 8002ece:	f7ff bf61 	b.w	8002d94 <os_task_delete>
 8002ed2:	bf00      	nop
 8002ed4:	20014594 	.word	0x20014594

08002ed8 <os_task_getPrio>:
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 8002ed8:	b128      	cbz	r0, 8002ee6 <os_task_getPrio+0xe>
	if(h->type != OS_OBJ_TASK) return -1;
 8002eda:	7803      	ldrb	r3, [r0, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <os_task_getPrio+0xe>

	return t->priority;
 8002ee0:	f990 004c 	ldrsb.w	r0, [r0, #76]	; 0x4c
 8002ee4:	4770      	bx	lr
	if(t == NULL) return -1;
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002eea:	4770      	bx	lr

08002eec <os_task_must_yeild>:
bool os_task_must_yeild(){
 8002eec:	b513      	push	{r0, r1, r4, lr}
	OS_CRITICAL_SECTION(
 8002eee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	b672      	cpsid	i
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <os_task_must_yeild+0x54>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <os_task_must_yeild+0x58>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b163      	cbz	r3, 8002f1e <os_task_must_yeild+0x32>
 8002f04:	6898      	ldr	r0, [r3, #8]
 8002f06:	f7ff ffe7 	bl	8002ed8 <os_task_getPrio>
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	b952      	cbnz	r2, 8002f24 <os_task_must_yeild+0x38>
 8002f0e:	9b01      	ldr	r3, [sp, #4]
 8002f10:	f383 8810 	msr	PRIMASK, r3
 8002f14:	f3bf 8f6f 	isb	sy
	return false;
 8002f18:	4610      	mov	r0, r2
}
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd10      	pop	{r4, pc}
	OS_CRITICAL_SECTION(
 8002f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f22:	e7f3      	b.n	8002f0c <os_task_must_yeild+0x20>
 8002f24:	6894      	ldr	r4, [r2, #8]
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff ffd6 	bl	8002ed8 <os_task_getPrio>
 8002f2c:	7e23      	ldrb	r3, [r4, #24]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d101      	bne.n	8002f36 <os_task_must_yeild+0x4a>
 8002f32:	4281      	cmp	r1, r0
 8002f34:	db01      	blt.n	8002f3a <os_task_must_yeild+0x4e>
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	e7e8      	b.n	8002f0c <os_task_must_yeild+0x20>
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e7ed      	b.n	8002f1a <os_task_must_yeild+0x2e>
 8002f3e:	bf00      	nop
 8002f40:	20014de0 	.word	0x20014de0
 8002f44:	20014594 	.word	0x20014594

08002f48 <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 8002f48:	b510      	push	{r4, lr}
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	b908      	cbnz	r0, 8002f52 <os_task_getState+0xa>
 8002f4e:	2000      	movs	r0, #0
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;

	return state;
}
 8002f50:	bd10      	pop	{r4, pc}
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 8002f52:	7803      	ldrb	r3, [r0, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d1fa      	bne.n	8002f4e <os_task_getState+0x6>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 8002f58:	4601      	mov	r1, r0
 8002f5a:	4807      	ldr	r0, [pc, #28]	; (8002f78 <os_task_getState+0x30>)
 8002f5c:	f7fe feea 	bl	8001d34 <os_list_search>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d0f4      	beq.n	8002f4e <os_task_getState+0x6>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 8002f64:	7e20      	ldrb	r0, [r4, #24]
 8002f66:	2804      	cmp	r0, #4
 8002f68:	d0f1      	beq.n	8002f4e <os_task_getState+0x6>
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	d1f0      	bne.n	8002f50 <os_task_getState+0x8>
 8002f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf18      	it	ne
 8002f74:	2003      	movne	r0, #3
 8002f76:	e7eb      	b.n	8002f50 <os_task_getState+0x8>
 8002f78:	20014de0 	.word	0x20014de0

08002f7c <os_task_getFreeCount>:
static uint32_t os_task_getFreeCount(os_handle_t h){
 8002f7c:	b508      	push	{r3, lr}
	if(h == NULL) return 0;
 8002f7e:	b160      	cbz	r0, 8002f9a <os_task_getFreeCount+0x1e>
	if(h->type != OS_OBJ_TASK) return 0;
 8002f80:	7803      	ldrb	r3, [r0, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d109      	bne.n	8002f9a <os_task_getFreeCount+0x1e>
	os_task_state_e state = os_task_getState(h);
 8002f86:	f7ff ffdf 	bl	8002f48 <os_task_getState>
	return task_ended ? OS_OBJ_COUNT_INF : 0;
 8002f8a:	2804      	cmp	r0, #4
 8002f8c:	bf18      	it	ne
 8002f8e:	2801      	cmpne	r0, #1
 8002f90:	bf94      	ite	ls
 8002f92:	2001      	movls	r0, #1
 8002f94:	2000      	movhi	r0, #0
 8002f96:	4240      	negs	r0, r0
}
 8002f98:	bd08      	pop	{r3, pc}
	if(h == NULL) return 0;
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e7fc      	b.n	8002f98 <os_task_getFreeCount+0x1c>
	...

08002fa0 <os_task_getByPID>:
 *
 * @param uint16_t pid : [in] PID of the searched task
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_handle_t os_task_getByPID(uint16_t pid){
 8002fa0:	b082      	sub	sp, #8

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	b672      	cpsid	i
 8002faa:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <os_task_getByPID+0x34>)
	while(it != NULL && ((os_task_t*)it->element)->pid != pid){
		it = it->next;
 8002fb0:	681b      	ldr	r3, [r3, #0]
	while(it != NULL && ((os_task_t*)it->element)->pid != pid){
 8002fb2:	b11b      	cbz	r3, 8002fbc <os_task_getByPID+0x1c>
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002fb8:	4282      	cmp	r2, r0
 8002fba:	d1f9      	bne.n	8002fb0 <os_task_getByPID+0x10>
	}

	OS_EXIT_CRITICAL();
 8002fbc:	9a01      	ldr	r2, [sp, #4]
 8002fbe:	f382 8810 	msr	PRIMASK, r2
 8002fc2:	f3bf 8f6f 	isb	sy
	return it == NULL ? NULL : it->element;
 8002fc6:	b113      	cbz	r3, 8002fce <os_task_getByPID+0x2e>
 8002fc8:	6898      	ldr	r0, [r3, #8]
}
 8002fca:	b002      	add	sp, #8
 8002fcc:	4770      	bx	lr
	return it == NULL ? NULL : it->element;
 8002fce:	4618      	mov	r0, r3
 8002fd0:	e7fb      	b.n	8002fca <os_task_getByPID+0x2a>
 8002fd2:	bf00      	nop
 8002fd4:	20014de0 	.word	0x20014de0

08002fd8 <os_task_start>:
static os_err_e os_task_start(os_handle_t* h, char const * name, void* (*fn)(void* i), os_task_mode_e mode, int8_t priority, uint32_t stack_size, void* argc, void* argv, uint32_t r9){
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	4617      	mov	r7, r2
 8002fe0:	9102      	str	r1, [sp, #8]
 8002fe2:	469a      	mov	sl, r3
 8002fe4:	f99d 8038 	ldrsb.w	r8, [sp, #56]	; 0x38
 8002fe8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 8002fea:	9001      	str	r0, [sp, #4]
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f000 80f4 	beq.w	80031da <os_task_start+0x202>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	f000 80f1 	beq.w	80031da <os_task_start+0x202>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 8002ff8:	f1b8 0f00 	cmp.w	r8, #0
 8002ffc:	f2c0 80ed 	blt.w	80031da <os_task_start+0x202>
	if(mode >= __OS_TASK_MODE_MAX) 			return OS_ERR_BAD_ARG;
 8003000:	f1ba 0f01 	cmp.w	sl, #1
 8003004:	f200 80e9 	bhi.w	80031da <os_task_start+0x202>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 8003008:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
 800300c:	f0c0 80e5 	bcc.w	80031da <os_task_start+0x202>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 8003010:	f7fe fc5a 	bl	80018c8 <os_init_get>
 8003014:	2800      	cmp	r0, #0
 8003016:	f000 80e3 	beq.w	80031e0 <os_task_start+0x208>
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 800301a:	2058      	movs	r0, #88	; 0x58
 800301c:	f7fe fd6a 	bl	8001af4 <os_heap_alloc>
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003020:	4683      	mov	fp, r0
 8003022:	b138      	cbz	r0, 8003034 <os_task_start+0x5c>
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 8003024:	4630      	mov	r0, r6
 8003026:	f7fe fd65 	bl	8001af4 <os_heap_alloc>
	if(stk == 0){
 800302a:	4605      	mov	r5, r0
 800302c:	b928      	cbnz	r0, 800303a <os_task_start+0x62>
		os_heap_free(t);
 800302e:	4658      	mov	r0, fp
 8003030:	f7fe fdc0 	bl	8001bb4 <os_heap_free>
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003034:	f06f 0402 	mvn.w	r4, #2
 8003038:	e09a      	b.n	8003170 <os_task_start+0x198>
	uint32_t attempts = 0;
 800303a:	f04f 0900 	mov.w	r9, #0
		uint32_t ms = os_getMsTick() + attempts;
 800303e:	f000 f911 	bl	8003264 <os_getMsTick>
 8003042:	4448      	add	r0, r9
		pid = (uint16_t)( (ms & 0xFF) ^ ((ms >> 16) & 0xFF) );
 8003044:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003048:	b2c4      	uxtb	r4, r0
		if(os_task_getByPID(pid) == NULL){
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff ffa8 	bl	8002fa0 <os_task_getByPID>
 8003050:	b110      	cbz	r0, 8003058 <os_task_start+0x80>
		attempts++;
 8003052:	f109 0901 	add.w	r9, r9, #1
	while(1){
 8003056:	e7f2      	b.n	800303e <os_task_start+0x66>
	t->obj.type			= OS_OBJ_TASK;
 8003058:	2101      	movs	r1, #1
 800305a:	f88b 1000 	strb.w	r1, [fp]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 800305e:	4962      	ldr	r1, [pc, #392]	; (80031e8 <os_task_start+0x210>)
 8003060:	f8cb 100c 	str.w	r1, [fp, #12]
	t->obj.objUpdate	= 0;
 8003064:	f88b 0008 	strb.w	r0, [fp, #8]
 8003068:	9003      	str	r0, [sp, #12]
	t->obj.blockList	= os_list_init();
 800306a:	f7fe fe56 	bl	8001d1a <os_list_init>
	t->obj.obj_take		= &os_task_objTake;
 800306e:	495f      	ldr	r1, [pc, #380]	; (80031ec <os_task_start+0x214>)
 8003070:	f8cb 1010 	str.w	r1, [fp, #16]
	t->state			= OS_TASK_READY;
 8003074:	2102      	movs	r1, #2
	t->wakeCoutdown	 	= 0;
 8003076:	9a03      	ldr	r2, [sp, #12]
	t->state			= OS_TASK_READY;
 8003078:	f88b 1018 	strb.w	r1, [fp, #24]
	t->stackBase		= (stk + stack_size);
 800307c:	19a9      	adds	r1, r5, r6
	t->obj.name			= (char*) name;
 800307e:	9b02      	ldr	r3, [sp, #8]
 8003080:	f8cb 3004 	str.w	r3, [fp, #4]
	t->stackSize 		= stack_size;
 8003084:	e9cb 6109 	strd	r6, r1, [fp, #36]	; 0x24
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 8003088:	f021 0107 	bic.w	r1, r1, #7
 800308c:	f8cb 1020 	str.w	r1, [fp, #32]
	t->pid				= pid;
 8003090:	f8ab 402c 	strh.w	r4, [fp, #44]	; 0x2c
	t->wakeCoutdown	 	= 0;
 8003094:	f8cb 201c 	str.w	r2, [fp, #28]
	t->sizeObjs 		= 0;
 8003098:	e9cb 220d 	strd	r2, r2, [fp, #52]	; 0x34
	t->retVal			= NULL;
 800309c:	f8cb 2048 	str.w	r2, [fp, #72]	; 0x48
	t->obj.blockList	= os_list_init();
 80030a0:	f8cb 0014 	str.w	r0, [fp, #20]
	t->fnPtr			= fn;
 80030a4:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
	t->basePriority		= priority;
 80030a8:	f88b 8019 	strb.w	r8, [fp, #25]
	t->priority		    = priority;
 80030ac:	f88b 804c 	strb.w	r8, [fp, #76]	; 0x4c
	t->retVal			= NULL;
 80030b0:	9202      	str	r2, [sp, #8]
	t->ownedMutex		= os_list_init();
 80030b2:	f7fe fe32 	bl	8001d1a <os_list_init>
	t->argc				= argv == NULL ? 0 : (int)argc;
 80030b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	t->ownedMutex		= os_list_init();
 80030b8:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
	t->argc				= argv == NULL ? 0 : (int)argc;
 80030bc:	2b00      	cmp	r3, #0
 80030be:	9b10      	ldr	r3, [sp, #64]	; 0x40
	*--t->pStack = (mode == OS_TASK_MODE_RETURN) ? (uint32_t) &os_task_return : (uint32_t) &os_task_end;  //LR
 80030c0:	4e4b      	ldr	r6, [pc, #300]	; (80031f0 <os_task_start+0x218>)
	*--t->pStack = (uint32_t) 0;				//R12
 80030c2:	9a02      	ldr	r2, [sp, #8]
	t->argc				= argv == NULL ? 0 : (int)argc;
 80030c4:	bf14      	ite	ne
 80030c6:	4619      	movne	r1, r3
 80030c8:	2100      	moveq	r1, #0
 80030ca:	f8cb 1050 	str.w	r1, [fp, #80]	; 0x50
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 80030ce:	f8db 1020 	ldr.w	r1, [fp, #32]
	t->argv				= argv;
 80030d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030d4:	f8cb 3054 	str.w	r3, [fp, #84]	; 0x54
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 80030d8:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*--t->pStack = (uint32_t) fn;				//Return
 80030dc:	e941 7402 	strd	r7, r4, [r1, #-8]
	*--t->pStack = (mode == OS_TASK_MODE_RETURN) ? (uint32_t) &os_task_return : (uint32_t) &os_task_end;  //LR
 80030e0:	4c44      	ldr	r4, [pc, #272]	; (80031f4 <os_task_start+0x21c>)
	*--t->pStack = (uint32_t) 0;			 	//R10
 80030e2:	f841 2c2c 	str.w	r2, [r1, #-44]
	*--t->pStack = (mode == OS_TASK_MODE_RETURN) ? (uint32_t) &os_task_return : (uint32_t) &os_task_end;  //LR
 80030e6:	f1ba 0f00 	cmp.w	sl, #0
 80030ea:	bf08      	it	eq
 80030ec:	4634      	moveq	r4, r6
	*--t->pStack = (uint32_t) r9; 			 	//R9
 80030ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
	*--t->pStack = (mode == OS_TASK_MODE_RETURN) ? (uint32_t) &os_task_return : (uint32_t) &os_task_end;  //LR
 80030f0:	f841 4c0c 	str.w	r4, [r1, #-12]
	*--t->pStack = (uint32_t) argv;			 	//R1 (argument 2)
 80030f4:	e941 3207 	strd	r3, r2, [r1, #-28]
	*--t->pStack = (uint32_t) 0;			 	//R8
 80030f8:	e941 260d 	strd	r2, r6, [r1, #-52]	; 0x34
	*--t->pStack = (uint32_t) argc;			 	//R0 (argument 1)
 80030fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030fe:	f841 3c20 	str.w	r3, [r1, #-32]
	*--t->pStack = (uint32_t) 0;				//R4
 8003102:	f1a1 0644 	sub.w	r6, r1, #68	; 0x44
	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 8003106:	f06f 0402 	mvn.w	r4, #2
	*--t->pStack = (uint32_t) 0;			 	//R3
 800310a:	e941 2205 	strd	r2, r2, [r1, #-20]
	*--t->pStack = (uint32_t) 0;			 	//R11
 800310e:	e941 240a 	strd	r2, r4, [r1, #-40]	; 0x28
	*--t->pStack = (uint32_t) 0;				//R6
 8003112:	e941 220f 	strd	r2, r2, [r1, #-60]	; 0x3c
	*--t->pStack = (uint32_t) 0;				//R5
 8003116:	f841 2c40 	str.w	r2, [r1, #-64]
	*--t->pStack = (uint32_t) 0;				//R4
 800311a:	f8cb 6020 	str.w	r6, [fp, #32]
 800311e:	f841 2c44 	str.w	r2, [r1, #-68]
	if(t->obj.blockList == NULL || t->ownedMutex == NULL){
 8003122:	f8db 1014 	ldr.w	r1, [fp, #20]
 8003126:	b101      	cbz	r1, 800312a <os_task_start+0x152>
 8003128:	b970      	cbnz	r0, 8003148 <os_task_start+0x170>
		os_heap_free(t);
 800312a:	4658      	mov	r0, fp
 800312c:	f7fe fd42 	bl	8001bb4 <os_heap_free>
		os_heap_free((void*)stk);
 8003130:	4628      	mov	r0, r5
 8003132:	f7fe fd3f 	bl	8001bb4 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8003136:	f8db 0014 	ldr.w	r0, [fp, #20]
 800313a:	f7fe febc 	bl	8001eb6 <os_list_clear>
		os_list_clear(t->ownedMutex);
 800313e:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
 8003142:	f7fe feb8 	bl	8001eb6 <os_list_clear>
 8003146:	e775      	b.n	8003034 <os_task_start+0x5c>
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8003148:	4659      	mov	r1, fp
 800314a:	482b      	ldr	r0, [pc, #172]	; (80031f8 <os_task_start+0x220>)
 800314c:	f7fe fe2f 	bl	8001dae <os_list_add>
	if(err != OS_ERR_OK) {
 8003150:	4602      	mov	r2, r0
 8003152:	b188      	cbz	r0, 8003178 <os_task_start+0x1a0>
		os_heap_free(t);
 8003154:	4658      	mov	r0, fp
 8003156:	f7fe fd2d 	bl	8001bb4 <os_heap_free>
		os_heap_free((void*)stk);
 800315a:	4628      	mov	r0, r5
 800315c:	f7fe fd2a 	bl	8001bb4 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8003160:	f8db 0014 	ldr.w	r0, [fp, #20]
 8003164:	f7fe fea7 	bl	8001eb6 <os_list_clear>
		os_list_clear(t->ownedMutex);
 8003168:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
 800316c:	f7fe fea3 	bl	8001eb6 <os_list_clear>
}
 8003170:	4620      	mov	r0, r4
 8003172:	b005      	add	sp, #20
 8003174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8003178:	4659      	mov	r1, fp
 800317a:	4820      	ldr	r0, [pc, #128]	; (80031fc <os_task_start+0x224>)
 800317c:	f7fe fe17 	bl	8001dae <os_list_add>
	if(ret != OS_ERR_OK) {
 8003180:	4604      	mov	r4, r0
		os_heap_free(t);
 8003182:	4658      	mov	r0, fp
	if(ret != OS_ERR_OK) {
 8003184:	b18c      	cbz	r4, 80031aa <os_task_start+0x1d2>
		os_heap_free(t);
 8003186:	f7fe fd15 	bl	8001bb4 <os_heap_free>
		os_heap_free((void*)stk);
 800318a:	4628      	mov	r0, r5
 800318c:	f7fe fd12 	bl	8001bb4 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8003190:	f8db 0014 	ldr.w	r0, [fp, #20]
 8003194:	f7fe fe8f 	bl	8001eb6 <os_list_clear>
		os_list_clear(t->ownedMutex);
 8003198:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
 800319c:	f7fe fe8b 	bl	8001eb6 <os_list_clear>
		os_list_remove(&os_head, (os_handle_t)t);
 80031a0:	4659      	mov	r1, fp
 80031a2:	4815      	ldr	r0, [pc, #84]	; (80031f8 <os_task_start+0x220>)
 80031a4:	f7fe fe3f 	bl	8001e26 <os_list_remove>
		return ret;
 80031a8:	e7e2      	b.n	8003170 <os_task_start+0x198>
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 80031aa:	f7ff fe95 	bl	8002ed8 <os_task_getPrio>
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <os_task_start+0x228>)
 80031b0:	6812      	ldr	r2, [r2, #0]
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 80031b2:	4601      	mov	r1, r0
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80031b4:	b172      	cbz	r2, 80031d4 <os_task_start+0x1fc>
 80031b6:	6890      	ldr	r0, [r2, #8]
 80031b8:	f7ff fe8e 	bl	8002ed8 <os_task_getPrio>
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 80031bc:	4288      	cmp	r0, r1
 80031be:	da05      	bge.n	80031cc <os_task_start+0x1f4>
 80031c0:	f7ff fd26 	bl	8002c10 <os_scheduler_state_get>
 80031c4:	2801      	cmp	r0, #1
 80031c6:	d101      	bne.n	80031cc <os_task_start+0x1f4>
 80031c8:	f7ff fdbc 	bl	8002d44 <os_task_yeild>
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 80031cc:	9b01      	ldr	r3, [sp, #4]
 80031ce:	f8c3 b000 	str.w	fp, [r3]
	return err;
 80031d2:	e7cd      	b.n	8003170 <os_task_start+0x198>
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	e7f0      	b.n	80031bc <os_task_start+0x1e4>
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 80031da:	f04f 34ff 	mov.w	r4, #4294967295
 80031de:	e7c7      	b.n	8003170 <os_task_start+0x198>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 80031e0:	f06f 0403 	mvn.w	r4, #3
 80031e4:	e7c4      	b.n	8003170 <os_task_start+0x198>
 80031e6:	bf00      	nop
 80031e8:	08002f7d 	.word	0x08002f7d
 80031ec:	08002c1d 	.word	0x08002c1d
 80031f0:	08002d59 	.word	0x08002d59
 80031f4:	08002ec9 	.word	0x08002ec9
 80031f8:	20014de0 	.word	0x20014de0
 80031fc:	20014dc0 	.word	0x20014dc0
 8003200:	20014594 	.word	0x20014594

08003204 <os_task_create>:
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), os_task_mode_e mode, int8_t priority, uint32_t stack_size, void* arg){
 8003204:	b510      	push	{r4, lr}
 8003206:	b086      	sub	sp, #24
	return os_task_start(h, name, fn, mode, priority, stack_size, arg, NULL, 0);
 8003208:	2400      	movs	r4, #0
 800320a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800320e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003210:	9402      	str	r4, [sp, #8]
 8003212:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003214:	9401      	str	r4, [sp, #4]
 8003216:	f99d 4020 	ldrsb.w	r4, [sp, #32]
 800321a:	9400      	str	r4, [sp, #0]
 800321c:	f7ff fedc 	bl	8002fd8 <os_task_start>
}
 8003220:	b006      	add	sp, #24
 8003222:	bd10      	pop	{r4, pc}

08003224 <os_task_createProcess>:
os_err_e os_task_createProcess(char* file, int argc, char* argv[]){
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	4604      	mov	r4, r0
 800322a:	460d      	mov	r5, r1
	os_elf_prog_t prog = os_elf_loadFile(file);
 800322c:	4601      	mov	r1, r0
 800322e:	a808      	add	r0, sp, #32
os_err_e os_task_createProcess(char* file, int argc, char* argv[]){
 8003230:	4616      	mov	r6, r2
	os_elf_prog_t prog = os_elf_loadFile(file);
 8003232:	f7ff f89f 	bl	8002374 <os_elf_loadFile>
 8003236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
	if(prog.entryPoint == NULL || prog.gotBase == 0)
 800323a:	b17a      	cbz	r2, 800325c <os_task_createProcess+0x38>
 800323c:	b173      	cbz	r3, 800325c <os_task_createProcess+0x38>
	return os_task_start(&h, file, prog.entryPoint, OS_TASK_MODE_DELETE, 10, 5 * OS_DEFAULT_STACK_SIZE, (void*) argc, argv, prog.gotBase);
 800323e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003242:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8003246:	230a      	movs	r3, #10
 8003248:	e9cd 3100 	strd	r3, r1, [sp]
 800324c:	9502      	str	r5, [sp, #8]
 800324e:	2301      	movs	r3, #1
 8003250:	4621      	mov	r1, r4
 8003252:	a807      	add	r0, sp, #28
 8003254:	f7ff fec0 	bl	8002fd8 <os_task_start>
}
 8003258:	b00a      	add	sp, #40	; 0x28
 800325a:	bd70      	pop	{r4, r5, r6, pc}
		return OS_ERR_UNKNOWN;
 800325c:	f06f 0006 	mvn.w	r0, #6
 8003260:	e7fa      	b.n	8003258 <os_task_createProcess+0x34>
	...

08003264 <os_getMsTick>:
 * @brief This function returns the OS' ms tick count
 *
 * @return uint32_t tick count
 **********************************************************************/
uint32_t os_getMsTick(){
	return os_ticks_ms;
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <os_getMsTick+0x8>)
 8003266:	6818      	ldr	r0, [r3, #0]
}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20014598 	.word	0x20014598

08003270 <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 8003270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003274:	4607      	mov	r7, r0

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	b672      	cpsid	i
 800327e:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <os_tick+0x98>)

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
	os_list_cell_t* it = os_head.head.next;
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8003284:	4d21      	ldr	r5, [pc, #132]	; (800330c <os_tick+0x9c>)
	os_ticks_ms += ms_inc;
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	4403      	add	r3, r0
 800328a:	6013      	str	r3, [r2, #0]
	os_list_cell_t* it = os_head.head.next;
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <os_tick+0xa0>)
 800328e:	681c      	ldr	r4, [r3, #0]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b1bb      	cbz	r3, 80032c4 <os_tick+0x54>
 8003294:	6898      	ldr	r0, [r3, #8]
 8003296:	f7ff fe1f 	bl	8002ed8 <os_task_getPrio>
 800329a:	4680      	mov	r8, r0
	uint8_t pend_req = 0;
 800329c:	2600      	movs	r6, #0
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 800329e:	f04f 0902 	mov.w	r9, #2
	while(it != NULL){
 80032a2:	b994      	cbnz	r4, 80032ca <os_tick+0x5a>
		it = it->next;
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 80032a4:	2e01      	cmp	r6, #1
 80032a6:	d105      	bne.n	80032b4 <os_tick+0x44>
 80032a8:	f7ff fcb2 	bl	8002c10 <os_scheduler_state_get>
 80032ac:	2801      	cmp	r0, #1
 80032ae:	d101      	bne.n	80032b4 <os_tick+0x44>
 80032b0:	f7ff fd48 	bl	8002d44 <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80032b4:	9b01      	ldr	r3, [sp, #4]
 80032b6:	f383 8810 	msr	PRIMASK, r3
 80032ba:	f3bf 8f6f 	isb	sy
	return;
}
 80032be:	b003      	add	sp, #12
 80032c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80032c4:	f04f 38ff 	mov.w	r8, #4294967295
 80032c8:	e7e8      	b.n	800329c <os_tick+0x2c>
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 80032ca:	68a0      	ldr	r0, [r4, #8]
 80032cc:	69c3      	ldr	r3, [r0, #28]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	3203      	adds	r2, #3
 80032d2:	d804      	bhi.n	80032de <os_tick+0x6e>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 80032d4:	42bb      	cmp	r3, r7
 80032d6:	bf2c      	ite	cs
 80032d8:	1bdb      	subcs	r3, r3, r7
 80032da:	2300      	movcc	r3, #0
 80032dc:	61c3      	str	r3, [r0, #28]
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 80032de:	69c3      	ldr	r3, [r0, #28]
 80032e0:	b923      	cbnz	r3, 80032ec <os_tick+0x7c>
 80032e2:	7e03      	ldrb	r3, [r0, #24]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	bf08      	it	eq
 80032e8:	f880 9018 	strbeq.w	r9, [r0, #24]
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 80032ec:	7e03      	ldrb	r3, [r0, #24]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d107      	bne.n	8003302 <os_tick+0x92>
			int8_t task_prio = os_task_getPrio(it->element);
 80032f2:	f7ff fdf1 	bl	8002ed8 <os_task_getPrio>
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 80032f6:	4580      	cmp	r8, r0
 80032f8:	dc03      	bgt.n	8003302 <os_tick+0x92>
 80032fa:	682b      	ldr	r3, [r5, #0]
 80032fc:	42a3      	cmp	r3, r4
 80032fe:	bf18      	it	ne
 8003300:	2601      	movne	r6, #1
		it = it->next;
 8003302:	6824      	ldr	r4, [r4, #0]
 8003304:	e7cd      	b.n	80032a2 <os_tick+0x32>
 8003306:	bf00      	nop
 8003308:	20014598 	.word	0x20014598
 800330c:	20014594 	.word	0x20014594
 8003310:	20014de0 	.word	0x20014de0

08003314 <os_flash_write>:
 * @param size_t len 		: [in] Size of the data buffer
 *
 * @return os_err_e : <0 if error. Otherwise the number of bytes written
 *
 **********************************************************************/
os_err_e os_flash_write(uint32_t addr, uint8_t buffer[], size_t len){
 8003314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003318:	4607      	mov	r7, r0
 800331a:	468a      	mov	sl, r1

	/* Check arguments
	 ------------------------------------------------------*/
	if(len == 0) return OS_ERR_BAD_ARG;
 800331c:	4616      	mov	r6, r2
 800331e:	b1da      	cbz	r2, 8003358 <os_flash_write+0x44>
	if(buffer == NULL) return OS_ERR_BAD_ARG;
 8003320:	b1d1      	cbz	r1, 8003358 <os_flash_write+0x44>
	if(addr < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 8003322:	4b45      	ldr	r3, [pc, #276]	; (8003438 <os_flash_write+0x124>)
 8003324:	4298      	cmp	r0, r3
 8003326:	d317      	bcc.n	8003358 <os_flash_write+0x44>
	if(addr >= FLASH_END_ADDR) return OS_ERR_BAD_ARG;
 8003328:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8003444 <os_flash_write+0x130>
 800332c:	4580      	cmp	r8, r0
 800332e:	d913      	bls.n	8003358 <os_flash_write+0x44>

	/* Wait for last operation
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8003330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003334:	f004 fc34 	bl	8007ba0 <FLASH_WaitForLastOperation>
	ASSERT(ret == HAL_OK);
 8003338:	b188      	cbz	r0, 800335e <os_flash_write+0x4a>
 800333a:	2227      	movs	r2, #39	; 0x27
		return OS_ERR_UNKNOWN;

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
	ASSERT(ret == HAL_OK);
 800333c:	493f      	ldr	r1, [pc, #252]	; (800343c <os_flash_write+0x128>)
 800333e:	4840      	ldr	r0, [pc, #256]	; (8003440 <os_flash_write+0x12c>)
 8003340:	f006 f840 	bl	80093c4 <iprintf>
	if(ret != HAL_OK)
		return OS_ERR_UNKNOWN;
 8003344:	f06f 0506 	mvn.w	r5, #6
	/* Lock flash again and return error or the amount of bytes
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Lock();
	ASSERT(ret == HAL_OK);
	return err == 1 ? OS_ERR_UNKNOWN : pos;
}
 8003348:	4628      	mov	r0, r5
 800334a:	b003      	add	sp, #12
 800334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(ret == HAL_OK);
 8003350:	222e      	movs	r2, #46	; 0x2e
 8003352:	e7f3      	b.n	800333c <os_flash_write+0x28>
	bool err = 0;
 8003354:	4626      	mov	r6, r4
 8003356:	e050      	b.n	80033fa <os_flash_write+0xe6>
	if(len == 0) return OS_ERR_BAD_ARG;
 8003358:	f04f 35ff 	mov.w	r5, #4294967295
 800335c:	e7f4      	b.n	8003348 <os_flash_write+0x34>
	ret = HAL_FLASH_Unlock();
 800335e:	f004 fc03 	bl	8007b68 <HAL_FLASH_Unlock>
	ASSERT(ret == HAL_OK);
 8003362:	2800      	cmp	r0, #0
 8003364:	d1f4      	bne.n	8003350 <os_flash_write+0x3c>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8003366:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8003448 <os_flash_write+0x134>
	int32_t pos = 0;
 800336a:	4605      	mov	r5, r0
		writePermitted = ( (addr + 1) <= FLASH_END_ADDR ) 				   ? 1 : writePermitted;
 800336c:	1c7c      	adds	r4, r7, #1
 800336e:	45a0      	cmp	r8, r4
 8003370:	bf34      	ite	cc
 8003372:	2400      	movcc	r4, #0
 8003374:	2401      	movcs	r4, #1
		writePermitted = ( (addr % 2) == 0 && addr + 2 <= FLASH_END_ADDR ) ? 2 : writePermitted;
 8003376:	07fa      	lsls	r2, r7, #31
 8003378:	d403      	bmi.n	8003382 <os_flash_write+0x6e>
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	4598      	cmp	r8, r3
 800337e:	bf28      	it	cs
 8003380:	2402      	movcs	r4, #2
		writePermitted = ( (addr % 4) == 0 && addr + 4 <= FLASH_END_ADDR ) ? 4 : writePermitted;
 8003382:	07bb      	lsls	r3, r7, #30
 8003384:	d103      	bne.n	800338e <os_flash_write+0x7a>
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4598      	cmp	r8, r3
 800338a:	bf28      	it	cs
 800338c:	2404      	movcs	r4, #4
		uint32_t lenToWrite = writePermitted < len ? writePermitted : len;
 800338e:	42b4      	cmp	r4, r6
 8003390:	bf28      	it	cs
 8003392:	4634      	movcs	r4, r6
		lenToWrite = lenToWrite == 3 ? 2 : lenToWrite;
 8003394:	2c03      	cmp	r4, #3
 8003396:	d03d      	beq.n	8003414 <os_flash_write+0x100>
		if(lenToWrite == 0 || len == 0) break;
 8003398:	2c00      	cmp	r4, #0
 800339a:	d0db      	beq.n	8003354 <os_flash_write+0x40>
 800339c:	b36e      	cbz	r6, 80033fa <os_flash_write+0xe6>
		writeFlag = lenToWrite == 2 ? FLASH_TYPEPROGRAM_HALFWORD : writeFlag;
 800339e:	2c02      	cmp	r4, #2
 80033a0:	d03b      	beq.n	800341a <os_flash_write+0x106>
 80033a2:	2c04      	cmp	r4, #4
 80033a4:	bf0c      	ite	eq
 80033a6:	f04f 0902 	moveq.w	r9, #2
 80033aa:	f04f 0900 	movne.w	r9, #0
		uint64_t data = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	a802      	add	r0, sp, #8
 80033b2:	2200      	movs	r2, #0
 80033b4:	e960 2302 	strd	r2, r3, [r0, #-8]!
		memcpy(&data, &buffer[pos], lenToWrite);
 80033b8:	eb0a 0105 	add.w	r1, sl, r5
 80033bc:	4622      	mov	r2, r4
 80033be:	f005 fd26 	bl	8008e0e <memcpy>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80033c2:	2201      	movs	r2, #1
 80033c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033c8:	4658      	mov	r0, fp
 80033ca:	f004 fdeb 	bl	8007fa4 <HAL_GPIO_WritePin>
		ret = HAL_FLASH_Program(writeFlag, addr, data);
 80033ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033d2:	4639      	mov	r1, r7
 80033d4:	4648      	mov	r0, r9
 80033d6:	f004 fc0d 	bl	8007bf4 <HAL_FLASH_Program>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80033da:	2200      	movs	r2, #0
		ret = HAL_FLASH_Program(writeFlag, addr, data);
 80033dc:	4681      	mov	r9, r0
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80033de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033e2:	4658      	mov	r0, fp
 80033e4:	f004 fdde 	bl	8007fa4 <HAL_GPIO_WritePin>
		ASSERT(ret == HAL_OK);
 80033e8:	f1b9 0f00 	cmp.w	r9, #0
 80033ec:	d018      	beq.n	8003420 <os_flash_write+0x10c>
 80033ee:	2258      	movs	r2, #88	; 0x58
		ASSERT(ret == HAL_OK);
 80033f0:	4912      	ldr	r1, [pc, #72]	; (800343c <os_flash_write+0x128>)
 80033f2:	4813      	ldr	r0, [pc, #76]	; (8003440 <os_flash_write+0x12c>)
 80033f4:	f005 ffe6 	bl	80093c4 <iprintf>
			err = 1;
 80033f8:	2601      	movs	r6, #1
	ret = HAL_FLASH_Lock();
 80033fa:	f004 fbc7 	bl	8007b8c <HAL_FLASH_Lock>
	ASSERT(ret == HAL_OK);
 80033fe:	b120      	cbz	r0, 800340a <os_flash_write+0xf6>
 8003400:	2271      	movs	r2, #113	; 0x71
 8003402:	490e      	ldr	r1, [pc, #56]	; (800343c <os_flash_write+0x128>)
 8003404:	480e      	ldr	r0, [pc, #56]	; (8003440 <os_flash_write+0x12c>)
 8003406:	f005 ffdd 	bl	80093c4 <iprintf>
	return err == 1 ? OS_ERR_UNKNOWN : pos;
 800340a:	2e00      	cmp	r6, #0
 800340c:	bf18      	it	ne
 800340e:	f06f 0506 	mvnne.w	r5, #6
 8003412:	e799      	b.n	8003348 <os_flash_write+0x34>
		if(lenToWrite == 0 || len == 0) break;
 8003414:	2e00      	cmp	r6, #0
 8003416:	d0f0      	beq.n	80033fa <os_flash_write+0xe6>
 8003418:	2402      	movs	r4, #2
 800341a:	f04f 0901 	mov.w	r9, #1
 800341e:	e7c6      	b.n	80033ae <os_flash_write+0x9a>
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8003420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		pos += (int32_t)lenToWrite; //Counts the number of bytes actually written
 8003424:	4425      	add	r5, r4
		addr += lenToWrite; //Moves to the next address
 8003426:	4427      	add	r7, r4
		len -= lenToWrite; //reduces length
 8003428:	1b36      	subs	r6, r6, r4
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 800342a:	f004 fbb9 	bl	8007ba0 <FLASH_WaitForLastOperation>
		ASSERT(ret == HAL_OK);
 800342e:	2800      	cmp	r0, #0
 8003430:	d09c      	beq.n	800336c <os_flash_write+0x58>
 8003432:	2267      	movs	r2, #103	; 0x67
 8003434:	e7dc      	b.n	80033f0 <os_flash_write+0xdc>
 8003436:	bf00      	nop
 8003438:	08000000 	.word	0x08000000
 800343c:	0800ab71 	.word	0x0800ab71
 8003440:	0800a4c7 	.word	0x0800a4c7
 8003444:	08100000 	.word	0x08100000
 8003448:	40020c00 	.word	0x40020c00

0800344c <os_flash_read>:
 * @param size_t len 		: [ in] Size of the data buffer
 *
 * @return os_err_e : <0 if error. Otherwise the number of read bytes
 *
 **********************************************************************/
os_err_e os_flash_read(uint32_t addr, uint8_t buffer[], size_t len){
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	4605      	mov	r5, r0
 8003450:	460e      	mov	r6, r1

	/* Argument check
	 ------------------------------------------------------*/
	if(len == 0) return OS_ERR_BAD_ARG;
 8003452:	4614      	mov	r4, r2
 8003454:	b1ea      	cbz	r2, 8003492 <os_flash_read+0x46>
	if(buffer == NULL) return OS_ERR_BAD_ARG;
 8003456:	b1e1      	cbz	r1, 8003492 <os_flash_read+0x46>
	if(addr < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <os_flash_read+0x4c>)
 800345a:	4298      	cmp	r0, r3
 800345c:	d319      	bcc.n	8003492 <os_flash_read+0x46>
	if(addr >= FLASH_END_ADDR) return OS_ERR_BAD_ARG;
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <os_flash_read+0x50>)
 8003460:	4283      	cmp	r3, r0
 8003462:	d916      	bls.n	8003492 <os_flash_read+0x46>

	/* Check border and calculates the amout of data to read
	 ------------------------------------------------------*/
	size_t readBytes = len;
	if(addr + len > FLASH_END_ADDR){
 8003464:	4402      	add	r2, r0
 8003466:	4293      	cmp	r3, r2
 8003468:	bf38      	it	cc
 800346a:	1a1c      	subcc	r4, r3, r0
		readBytes -= addr + len - FLASH_END_ADDR;
	}

	/* Copy data into buffer
	 ------------------------------------------------------*/
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800346c:	2201      	movs	r2, #1
 800346e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003472:	480b      	ldr	r0, [pc, #44]	; (80034a0 <os_flash_read+0x54>)
 8003474:	f004 fd96 	bl	8007fa4 <HAL_GPIO_WritePin>
	memcpy(buffer, (void*)addr, readBytes);
 8003478:	4622      	mov	r2, r4
 800347a:	4629      	mov	r1, r5
 800347c:	4630      	mov	r0, r6
 800347e:	f005 fcc6 	bl	8008e0e <memcpy>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8003482:	4807      	ldr	r0, [pc, #28]	; (80034a0 <os_flash_read+0x54>)
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800348a:	f004 fd8b 	bl	8007fa4 <HAL_GPIO_WritePin>

	/* Return the amount of bytes
	 ------------------------------------------------------*/
	return (int32_t)readBytes;
 800348e:	4620      	mov	r0, r4
}
 8003490:	bd70      	pop	{r4, r5, r6, pc}
	if(len == 0) return OS_ERR_BAD_ARG;
 8003492:	f04f 30ff 	mov.w	r0, #4294967295
 8003496:	e7fb      	b.n	8003490 <os_flash_read+0x44>
 8003498:	08000000 	.word	0x08000000
 800349c:	08100000 	.word	0x08100000
 80034a0:	40020c00 	.word	0x40020c00

080034a4 <os_flash_erase>:
 * @param uint32_t secNum   : [in] Number of sectors to erase
 *
 * @return os_err_e : <0 if error. Otherwise the number of sectors erased
 *
 **********************************************************************/
os_err_e os_flash_erase(uint32_t addrBeg, uint32_t secNum){
 80034a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Check arguments
	 ------------------------------------------------------*/
	if(addrBeg < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <os_flash_erase+0x148>)
 80034aa:	4298      	cmp	r0, r3
os_err_e os_flash_erase(uint32_t addrBeg, uint32_t secNum){
 80034ac:	b086      	sub	sp, #24
 80034ae:	460e      	mov	r6, r1
	if(addrBeg < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 80034b0:	d357      	bcc.n	8003562 <os_flash_erase+0xbe>
	if(addrBeg >= FLASH_END_ADDR) return OS_ERR_BAD_ARG;
 80034b2:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <os_flash_erase+0x14c>)
 80034b4:	4298      	cmp	r0, r3
 80034b6:	d254      	bcs.n	8003562 <os_flash_erase+0xbe>

	/* Select first sector
	 ------------------------------------------------------*/
	int firstSector = -1;

	if(addrBeg == 0x08000000) firstSector = FLASH_SECTOR_0;
 80034b8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80034bc:	d037      	beq.n	800352e <os_flash_erase+0x8a>
	if(addrBeg == 0x08004000) firstSector = FLASH_SECTOR_1;
 80034be:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <os_flash_erase+0x150>)
 80034c0:	4298      	cmp	r0, r3
 80034c2:	d036      	beq.n	8003532 <os_flash_erase+0x8e>
	if(addrBeg == 0x08008000) firstSector = FLASH_SECTOR_2;
 80034c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80034c8:	4298      	cmp	r0, r3
 80034ca:	d034      	beq.n	8003536 <os_flash_erase+0x92>
	if(addrBeg == 0x0800C000) firstSector = FLASH_SECTOR_3;
 80034cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80034d0:	4298      	cmp	r0, r3
 80034d2:	d032      	beq.n	800353a <os_flash_erase+0x96>
	if(addrBeg == 0x08010000) firstSector = FLASH_SECTOR_4;
 80034d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80034d8:	4298      	cmp	r0, r3
 80034da:	d030      	beq.n	800353e <os_flash_erase+0x9a>
	int firstSector = -1;
 80034dc:	f04f 34ff 	mov.w	r4, #4294967295
	if(addrBeg == 0x08020000) firstSector = FLASH_SECTOR_5;
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <os_flash_erase+0x154>)
 80034e2:	4298      	cmp	r0, r3
 80034e4:	d02d      	beq.n	8003542 <os_flash_erase+0x9e>
	if(addrBeg == 0x08040000) firstSector = FLASH_SECTOR_6;
 80034e6:	4b45      	ldr	r3, [pc, #276]	; (80035fc <os_flash_erase+0x158>)
 80034e8:	4298      	cmp	r0, r3
 80034ea:	d02c      	beq.n	8003546 <os_flash_erase+0xa2>
	if(addrBeg == 0x08060000) firstSector = FLASH_SECTOR_7;
 80034ec:	4b44      	ldr	r3, [pc, #272]	; (8003600 <os_flash_erase+0x15c>)
 80034ee:	4298      	cmp	r0, r3
 80034f0:	d02b      	beq.n	800354a <os_flash_erase+0xa6>
	if(addrBeg == 0x08080000) firstSector = FLASH_SECTOR_8;
 80034f2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80034f6:	4298      	cmp	r0, r3
 80034f8:	d029      	beq.n	800354e <os_flash_erase+0xaa>
	if(addrBeg == 0x080A0000) firstSector = FLASH_SECTOR_9;
 80034fa:	4b42      	ldr	r3, [pc, #264]	; (8003604 <os_flash_erase+0x160>)
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d028      	beq.n	8003552 <os_flash_erase+0xae>
	if(addrBeg == 0x080C0000) firstSector = FLASH_SECTOR_10;
 8003500:	4b41      	ldr	r3, [pc, #260]	; (8003608 <os_flash_erase+0x164>)
 8003502:	4298      	cmp	r0, r3
 8003504:	d027      	beq.n	8003556 <os_flash_erase+0xb2>
	if(addrBeg == 0x080E0000) firstSector = FLASH_SECTOR_11;
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <os_flash_erase+0x168>)
 8003508:	4298      	cmp	r0, r3
 800350a:	d026      	beq.n	800355a <os_flash_erase+0xb6>

	if(firstSector < 0)	return OS_ERR_BAD_ARG;
 800350c:	1c63      	adds	r3, r4, #1
 800350e:	d028      	beq.n	8003562 <os_flash_erase+0xbe>

	/* Wait for operation to end
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8003510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003514:	f004 fb44 	bl	8007ba0 <FLASH_WaitForLastOperation>
	ASSERT(ret == HAL_OK);
 8003518:	b330      	cbz	r0, 8003568 <os_flash_erase+0xc4>
 800351a:	22d5      	movs	r2, #213	; 0xd5
		return OS_ERR_UNKNOWN;

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
	ASSERT(ret == HAL_OK);
 800351c:	493c      	ldr	r1, [pc, #240]	; (8003610 <os_flash_erase+0x16c>)
 800351e:	483d      	ldr	r0, [pc, #244]	; (8003614 <os_flash_erase+0x170>)
 8003520:	f005 ff50 	bl	80093c4 <iprintf>
	if(ret != HAL_OK)
		return OS_ERR_UNKNOWN;
 8003524:	f06f 0006 	mvn.w	r0, #6
	if(ret != HAL_OK){
		error = 1;
	}

	return error == 1 ? OS_ERR_UNKNOWN : (int32_t)secNum;
}
 8003528:	b006      	add	sp, #24
 800352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(addrBeg == 0x08000000) firstSector = FLASH_SECTOR_0;
 800352e:	2400      	movs	r4, #0
 8003530:	e7d6      	b.n	80034e0 <os_flash_erase+0x3c>
	if(addrBeg == 0x08004000) firstSector = FLASH_SECTOR_1;
 8003532:	2401      	movs	r4, #1
 8003534:	e7d4      	b.n	80034e0 <os_flash_erase+0x3c>
	if(addrBeg == 0x08008000) firstSector = FLASH_SECTOR_2;
 8003536:	2402      	movs	r4, #2
 8003538:	e7d5      	b.n	80034e6 <os_flash_erase+0x42>
	if(addrBeg == 0x0800C000) firstSector = FLASH_SECTOR_3;
 800353a:	2403      	movs	r4, #3
 800353c:	e7d6      	b.n	80034ec <os_flash_erase+0x48>
	if(addrBeg == 0x08010000) firstSector = FLASH_SECTOR_4;
 800353e:	2404      	movs	r4, #4
 8003540:	e7db      	b.n	80034fa <os_flash_erase+0x56>
	if(addrBeg == 0x08020000) firstSector = FLASH_SECTOR_5;
 8003542:	2405      	movs	r4, #5
 8003544:	e7dc      	b.n	8003500 <os_flash_erase+0x5c>
	if(addrBeg == 0x08040000) firstSector = FLASH_SECTOR_6;
 8003546:	2406      	movs	r4, #6
 8003548:	e7dd      	b.n	8003506 <os_flash_erase+0x62>
	if(addrBeg == 0x08060000) firstSector = FLASH_SECTOR_7;
 800354a:	2407      	movs	r4, #7
 800354c:	e7e0      	b.n	8003510 <os_flash_erase+0x6c>
	if(addrBeg == 0x08080000) firstSector = FLASH_SECTOR_8;
 800354e:	2408      	movs	r4, #8
 8003550:	e7de      	b.n	8003510 <os_flash_erase+0x6c>
	if(addrBeg == 0x080A0000) firstSector = FLASH_SECTOR_9;
 8003552:	2409      	movs	r4, #9
 8003554:	e7dc      	b.n	8003510 <os_flash_erase+0x6c>
	if(addrBeg == 0x080C0000) firstSector = FLASH_SECTOR_10;
 8003556:	240a      	movs	r4, #10
 8003558:	e7da      	b.n	8003510 <os_flash_erase+0x6c>
	if(addrBeg == 0x080E0000) firstSector = FLASH_SECTOR_11;
 800355a:	240b      	movs	r4, #11
 800355c:	e7d8      	b.n	8003510 <os_flash_erase+0x6c>
	ASSERT(ret == HAL_OK);
 800355e:	22dc      	movs	r2, #220	; 0xdc
 8003560:	e7dc      	b.n	800351c <os_flash_erase+0x78>
	if(addrBeg < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 8003562:	f04f 30ff 	mov.w	r0, #4294967295
 8003566:	e7df      	b.n	8003528 <os_flash_erase+0x84>
	ret = HAL_FLASH_Unlock();
 8003568:	f004 fafe 	bl	8007b68 <HAL_FLASH_Unlock>
	ASSERT(ret == HAL_OK);
 800356c:	4607      	mov	r7, r0
 800356e:	2800      	cmp	r0, #0
 8003570:	d1f5      	bne.n	800355e <os_flash_erase+0xba>
	uint32_t sect_nb_max = (uint32_t) (11 - firstSector + 1);
 8003572:	f1c4 000c 	rsb	r0, r4, #12
	secNum = sect_nb_max < secNum ? sect_nb_max : secNum;
 8003576:	4286      	cmp	r6, r0
	FLASH_EraseInitTypeDef eraseConf = {
 8003578:	f04f 0801 	mov.w	r8, #1
	secNum = sect_nb_max < secNum ? sect_nb_max : secNum;
 800357c:	bf28      	it	cs
 800357e:	4606      	movcs	r6, r0
	FLASH_EraseInitTypeDef eraseConf = {
 8003580:	2302      	movs	r3, #2
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8003582:	4642      	mov	r2, r8
 8003584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003588:	4823      	ldr	r0, [pc, #140]	; (8003618 <os_flash_erase+0x174>)
	FLASH_EraseInitTypeDef eraseConf = {
 800358a:	9305      	str	r3, [sp, #20]
 800358c:	9701      	str	r7, [sp, #4]
 800358e:	e9cd 8402 	strd	r8, r4, [sp, #8]
 8003592:	9604      	str	r6, [sp, #16]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8003594:	f004 fd06 	bl	8007fa4 <HAL_GPIO_WritePin>
	ret = HAL_FLASHEx_Erase(&eraseConf, &SectorError);
 8003598:	4669      	mov	r1, sp
 800359a:	a801      	add	r0, sp, #4
 800359c:	f004 fbd4 	bl	8007d48 <HAL_FLASHEx_Erase>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80035a0:	463a      	mov	r2, r7
	ret = HAL_FLASHEx_Erase(&eraseConf, &SectorError);
 80035a2:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80035a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035a8:	481b      	ldr	r0, [pc, #108]	; (8003618 <os_flash_erase+0x174>)
 80035aa:	f004 fcfb 	bl	8007fa4 <HAL_GPIO_WritePin>
	ASSERT(ret == HAL_OK);
 80035ae:	b12d      	cbz	r5, 80035bc <os_flash_erase+0x118>
 80035b0:	22f6      	movs	r2, #246	; 0xf6
 80035b2:	4917      	ldr	r1, [pc, #92]	; (8003610 <os_flash_erase+0x16c>)
 80035b4:	4817      	ldr	r0, [pc, #92]	; (8003614 <os_flash_erase+0x170>)
 80035b6:	f005 ff05 	bl	80093c4 <iprintf>
		error = 1;
 80035ba:	4645      	mov	r5, r8
	ret = FLASH_WaitForLastOperation(1000);
 80035bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035c0:	f004 faee 	bl	8007ba0 <FLASH_WaitForLastOperation>
	ASSERT(ret == HAL_OK);
 80035c4:	b128      	cbz	r0, 80035d2 <os_flash_erase+0x12e>
 80035c6:	22fe      	movs	r2, #254	; 0xfe
 80035c8:	4911      	ldr	r1, [pc, #68]	; (8003610 <os_flash_erase+0x16c>)
 80035ca:	4812      	ldr	r0, [pc, #72]	; (8003614 <os_flash_erase+0x170>)
 80035cc:	f005 fefa 	bl	80093c4 <iprintf>
		error = 1;
 80035d0:	2501      	movs	r5, #1
	ret = HAL_FLASH_Lock();
 80035d2:	f004 fadb 	bl	8007b8c <HAL_FLASH_Lock>
	ASSERT(ret == HAL_OK);
 80035d6:	b110      	cbz	r0, 80035de <os_flash_erase+0x13a>
 80035d8:	f44f 7283 	mov.w	r2, #262	; 0x106
 80035dc:	e79e      	b.n	800351c <os_flash_erase+0x78>
	return error == 1 ? OS_ERR_UNKNOWN : (int32_t)secNum;
 80035de:	2d00      	cmp	r5, #0
 80035e0:	bf0c      	ite	eq
 80035e2:	4630      	moveq	r0, r6
 80035e4:	f06f 0006 	mvnne.w	r0, #6
 80035e8:	e79e      	b.n	8003528 <os_flash_erase+0x84>
 80035ea:	bf00      	nop
 80035ec:	08000000 	.word	0x08000000
 80035f0:	08100000 	.word	0x08100000
 80035f4:	08004000 	.word	0x08004000
 80035f8:	08020000 	.word	0x08020000
 80035fc:	08040000 	.word	0x08040000
 8003600:	08060000 	.word	0x08060000
 8003604:	080a0000 	.word	0x080a0000
 8003608:	080c0000 	.word	0x080c0000
 800360c:	080e0000 	.word	0x080e0000
 8003610:	0800ab71 	.word	0x0800ab71
 8003614:	0800a4c7 	.word	0x0800a4c7
 8003618:	40020c00 	.word	0x40020c00

0800361c <lfs_pair_isnull>:
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800361c:	6803      	ldr	r3, [r0, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	d004      	beq.n	800362c <lfs_pair_isnull+0x10>
 8003622:	6840      	ldr	r0, [r0, #4]
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	4258      	negs	r0, r3
 8003628:	4158      	adcs	r0, r3
 800362a:	4770      	bx	lr
 800362c:	2001      	movs	r0, #1
}
 800362e:	4770      	bx	lr

08003630 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003630:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003632:	680b      	ldr	r3, [r1, #0]
 8003634:	6804      	ldr	r4, [r0, #0]
 8003636:	429c      	cmp	r4, r3
 8003638:	d009      	beq.n	800364e <lfs_pair_cmp+0x1e>
 800363a:	6840      	ldr	r0, [r0, #4]
 800363c:	684a      	ldr	r2, [r1, #4]
 800363e:	4290      	cmp	r0, r2
 8003640:	d005      	beq.n	800364e <lfs_pair_cmp+0x1e>
 8003642:	4294      	cmp	r4, r2
 8003644:	d003      	beq.n	800364e <lfs_pair_cmp+0x1e>
 8003646:	1a18      	subs	r0, r3, r0
 8003648:	bf18      	it	ne
 800364a:	2001      	movne	r0, #1
             paira[0] == pairb[1] || paira[1] == pairb[0]);
}
 800364c:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800364e:	2000      	movs	r0, #0
 8003650:	e7fc      	b.n	800364c <lfs_pair_cmp+0x1c>

08003652 <lfs_tag_dsize>:
static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
    return !(tag & 0x80000000);
}

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003652:	f340 0309 	sbfx	r3, r0, #0, #10
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	bf08      	it	eq
 800365c:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
 800365e:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 8003662:	3004      	adds	r0, #4
 8003664:	4770      	bx	lr

08003666 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8003666:	b510      	push	{r4, lr}
 8003668:	1f03      	subs	r3, r0, #4
 800366a:	3904      	subs	r1, #4
 800366c:	3008      	adds	r0, #8
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800366e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8003672:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
 8003676:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8003678:	ea82 0204 	eor.w	r2, r2, r4
 800367c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800367e:	d1f6      	bne.n	800366e <lfs_gstate_xor+0x8>
    }
}
 8003680:	bd10      	pop	{r4, pc}

08003682 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	b933      	cbnz	r3, 8003694 <lfs_gstate_iszero+0x12>
 8003686:	6842      	ldr	r2, [r0, #4]
 8003688:	b922      	cbnz	r2, 8003694 <lfs_gstate_iszero+0x12>
 800368a:	6880      	ldr	r0, [r0, #8]
 800368c:	fab0 f080 	clz	r0, r0
 8003690:	0940      	lsrs	r0, r0, #5
 8003692:	4770      	bx	lr
            return false;
 8003694:	2000      	movs	r0, #0
 8003696:	4770      	bx	lr

08003698 <lfs_gstate_hasmovehere>:
    return lfs_tag_type1(a->tag);
}
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8003698:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800369e:	f413 63e0 	ands.w	r3, r3, #1792	; 0x700
 80036a2:	d006      	beq.n	80036b2 <lfs_gstate_hasmovehere+0x1a>
 80036a4:	3004      	adds	r0, #4
 80036a6:	f7ff ffc3 	bl	8003630 <lfs_pair_cmp>
 80036aa:	fab0 f080 	clz	r0, r0
 80036ae:	0940      	lsrs	r0, r0, #5
}
 80036b0:	bd08      	pop	{r3, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80036b2:	4618      	mov	r0, r3
 80036b4:	e7fc      	b.n	80036b0 <lfs_gstate_hasmovehere+0x18>

080036b6 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80036b6:	b900      	cbnz	r0, 80036ba <lfs_mlist_isopen+0x4>
 80036b8:	4770      	bx	lr
        if (*p == (struct lfs_mlist*)node) {
 80036ba:	4288      	cmp	r0, r1
 80036bc:	d001      	beq.n	80036c2 <lfs_mlist_isopen+0xc>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	e7f9      	b.n	80036b6 <lfs_mlist_isopen>
            return true;
 80036c2:	2001      	movs	r0, #1
        }
    }

    return false;
}
 80036c4:	4770      	bx	lr

080036c6 <lfs_alloc_lookahead>:
/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80036c6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
 80036d0:	fbb1 f3f2 	udiv	r3, r1, r2
 80036d4:	fb02 1113 	mls	r1, r2, r3, r1

    if (off < lfs->free.size) {
 80036d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80036da:	428b      	cmp	r3, r1
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80036dc:	b510      	push	{r4, lr}
    if (off < lfs->free.size) {
 80036de:	d90b      	bls.n	80036f8 <lfs_alloc_lookahead+0x32>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80036e0:	094c      	lsrs	r4, r1, #5
 80036e2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80036e4:	2301      	movs	r3, #1
 80036e6:	f001 011f 	and.w	r1, r1, #31
 80036ea:	fa03 f101 	lsl.w	r1, r3, r1
 80036ee:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80036f2:	430b      	orrs	r3, r1
 80036f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    }

    return 0;
}
 80036f8:	2000      	movs	r0, #0
 80036fa:	bd10      	pop	{r4, pc}

080036fc <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <lfs_dir_traverse_filter+0x60>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80036fe:	6803      	ldr	r3, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8003700:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003702:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8003706:	4c16      	ldr	r4, [pc, #88]	; (8003760 <lfs_dir_traverse_filter+0x64>)
    if ((mask & tag) == (mask & *filtertag) ||
 8003708:	ea83 0501 	eor.w	r5, r3, r1
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800370c:	bf18      	it	ne
 800370e:	4614      	movne	r4, r2
    if ((mask & tag) == (mask & *filtertag) ||
 8003710:	4225      	tst	r5, r4
 8003712:	d00d      	beq.n	8003730 <lfs_dir_traverse_filter+0x34>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003714:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 8003718:	3401      	adds	r4, #1
 800371a:	d009      	beq.n	8003730 <lfs_dir_traverse_filter+0x34>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800371c:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003720:	4a10      	ldr	r2, [pc, #64]	; (8003764 <lfs_dir_traverse_filter+0x68>)
 8003722:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003724:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
 8003728:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800372c:	4294      	cmp	r4, r2
 800372e:	d103      	bne.n	8003738 <lfs_dir_traverse_filter+0x3c>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003730:	2300      	movs	r3, #0
 8003732:	6003      	str	r3, [r0, #0]
        return true;
 8003734:	2001      	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
 8003736:	bd30      	pop	{r4, r5, pc}
    return (tag & 0x70000000) >> 20;
 8003738:	0d0a      	lsrs	r2, r1, #20
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800373a:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
 800373e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003742:	d109      	bne.n	8003758 <lfs_dir_traverse_filter+0x5c>
 8003744:	f3c3 2489 	ubfx	r4, r3, #10, #10
 8003748:	f3c1 2189 	ubfx	r1, r1, #10, #10
 800374c:	428c      	cmp	r4, r1
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800374e:	bf22      	ittt	cs
 8003750:	b252      	sxtbcs	r2, r2
 8003752:	eb03 2382 	addcs.w	r3, r3, r2, lsl #10
 8003756:	6003      	strcs	r3, [r0, #0]
    return false;
 8003758:	2000      	movs	r0, #0
 800375a:	e7ec      	b.n	8003736 <lfs_dir_traverse_filter+0x3a>
 800375c:	7ffffc00 	.word	0x7ffffc00
 8003760:	700ffc00 	.word	0x700ffc00
 8003764:	000ffc00 	.word	0x000ffc00

08003768 <lfs_dir_commit_size>:
    return 0;
}
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003768:	4602      	mov	r2, r0
 800376a:	b508      	push	{r3, lr}
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800376c:	4608      	mov	r0, r1
 800376e:	f7ff ff70 	bl	8003652 <lfs_tag_dsize>
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	4418      	add	r0, r3
 8003776:	6010      	str	r0, [r2, #0]
    return 0;
}
 8003778:	2000      	movs	r0, #0
 800377a:	bd08      	pop	{r3, pc}

0800377c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 800377c:	6803      	ldr	r3, [r0, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	6003      	str	r3, [r0, #0]
    return 0;
}
 8003782:	2000      	movs	r0, #0
 8003784:	4770      	bx	lr

08003786 <lfs_deinit>:
    if (!lfs->cfg->read_buffer) {
 8003786:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
static int lfs_deinit(lfs_t *lfs) {
 800378a:	b510      	push	{r4, lr}
 800378c:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 800378e:	b913      	cbnz	r3, 8003796 <lfs_deinit+0x10>
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    os_heap_free(p);
 8003790:	68c0      	ldr	r0, [r0, #12]
 8003792:	f7fe fa0f 	bl	8001bb4 <os_heap_free>
    if (!lfs->cfg->prog_buffer) {
 8003796:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379a:	b913      	cbnz	r3, 80037a2 <lfs_deinit+0x1c>
 800379c:	69e0      	ldr	r0, [r4, #28]
 800379e:	f7fe fa09 	bl	8001bb4 <os_heap_free>
    if (!lfs->cfg->lookahead_buffer) {
 80037a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	b913      	cbnz	r3, 80037ae <lfs_deinit+0x28>
 80037a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80037aa:	f7fe fa03 	bl	8001bb4 <os_heap_free>
}
 80037ae:	2000      	movs	r0, #0
 80037b0:	bd10      	pop	{r4, pc}

080037b2 <lfs_cache_zero.isra.17>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80037b2:	b510      	push	{r4, lr}
 80037b4:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80037b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80037b8:	68e0      	ldr	r0, [r4, #12]
 80037ba:	21ff      	movs	r1, #255	; 0xff
 80037bc:	f005 fb32 	bl	8008e24 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	6023      	str	r3, [r4, #0]
}
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80037c8:	b538      	push	{r3, r4, r5, lr}
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80037ca:	694d      	ldr	r5, [r1, #20]
    lfs->cfg = cfg;
 80037cc:	6681      	str	r1, [r0, #104]	; 0x68
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80037ce:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80037d0:	b935      	cbnz	r5, 80037e0 <lfs_init+0x18>
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <lfs_init+0x1a0>)
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <lfs_init+0x1a4>)
 80037d6:	f640 7147 	movw	r1, #3911	; 0xf47
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80037da:	4865      	ldr	r0, [pc, #404]	; (8003970 <lfs_init+0x1a8>)
 80037dc:	f005 fa8a 	bl	8008cf4 <__assert_func>
 80037e0:	698a      	ldr	r2, [r1, #24]
 80037e2:	b922      	cbnz	r2, 80037ee <lfs_init+0x26>
 80037e4:	4b63      	ldr	r3, [pc, #396]	; (8003974 <lfs_init+0x1ac>)
 80037e6:	4a61      	ldr	r2, [pc, #388]	; (800396c <lfs_init+0x1a4>)
 80037e8:	f640 7148 	movw	r1, #3912	; 0xf48
 80037ec:	e7f5      	b.n	80037da <lfs_init+0x12>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80037ee:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80037f0:	b920      	cbnz	r0, 80037fc <lfs_init+0x34>
 80037f2:	4b61      	ldr	r3, [pc, #388]	; (8003978 <lfs_init+0x1b0>)
 80037f4:	4a5d      	ldr	r2, [pc, #372]	; (800396c <lfs_init+0x1a4>)
 80037f6:	f640 7149 	movw	r1, #3913	; 0xf49
 80037fa:	e7ee      	b.n	80037da <lfs_init+0x12>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80037fc:	fbb0 f3f5 	udiv	r3, r0, r5
 8003800:	fb05 0313 	mls	r3, r5, r3, r0
 8003804:	b123      	cbz	r3, 8003810 <lfs_init+0x48>
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <lfs_init+0x1b4>)
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <lfs_init+0x1a4>)
 800380a:	f640 714d 	movw	r1, #3917	; 0xf4d
 800380e:	e7e4      	b.n	80037da <lfs_init+0x12>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8003810:	fbb0 f3f2 	udiv	r3, r0, r2
 8003814:	fb02 0313 	mls	r3, r2, r3, r0
 8003818:	b123      	cbz	r3, 8003824 <lfs_init+0x5c>
 800381a:	4b59      	ldr	r3, [pc, #356]	; (8003980 <lfs_init+0x1b8>)
 800381c:	4a53      	ldr	r2, [pc, #332]	; (800396c <lfs_init+0x1a4>)
 800381e:	f640 714e 	movw	r1, #3918	; 0xf4e
 8003822:	e7da      	b.n	80037da <lfs_init+0x12>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8003824:	69ca      	ldr	r2, [r1, #28]
 8003826:	fbb2 f3f0 	udiv	r3, r2, r0
 800382a:	fb00 2313 	mls	r3, r0, r3, r2
 800382e:	b123      	cbz	r3, 800383a <lfs_init+0x72>
 8003830:	4b54      	ldr	r3, [pc, #336]	; (8003984 <lfs_init+0x1bc>)
 8003832:	4a4e      	ldr	r2, [pc, #312]	; (800396c <lfs_init+0x1a4>)
 8003834:	f640 714f 	movw	r1, #3919	; 0xf4f
 8003838:	e7cf      	b.n	80037da <lfs_init+0x12>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800383a:	f1a2 0508 	sub.w	r5, r2, #8
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	fbb3 f3f5 	udiv	r3, r3, r5
    return (uint32_t)(32 - __builtin_clz(a-1));
 8003846:	3b01      	subs	r3, #1
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	f1c3 0320 	rsb	r3, r3, #32
 8003850:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8003854:	d204      	bcs.n	8003860 <lfs_init+0x98>
 8003856:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <lfs_init+0x1c0>)
 8003858:	4a44      	ldr	r2, [pc, #272]	; (800396c <lfs_init+0x1a4>)
 800385a:	f640 7153 	movw	r1, #3923	; 0xf53
 800385e:	e7bc      	b.n	80037da <lfs_init+0x12>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8003860:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003862:	b923      	cbnz	r3, 800386e <lfs_init+0xa6>
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <lfs_init+0x1c4>)
 8003866:	4a41      	ldr	r2, [pc, #260]	; (800396c <lfs_init+0x1a4>)
 8003868:	f640 715b 	movw	r1, #3931	; 0xf5b
 800386c:	e7b5      	b.n	80037da <lfs_init+0x12>
    if (lfs->cfg->read_buffer) {
 800386e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003870:	b1ab      	cbz	r3, 800389e <lfs_init+0xd6>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8003872:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 8003874:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003878:	b1e2      	cbz	r2, 80038b4 <lfs_init+0xec>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800387a:	61e2      	str	r2, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 800387c:	4621      	mov	r1, r4
 800387e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003880:	f7ff ff97 	bl	80037b2 <lfs_cache_zero.isra.17>
    lfs_cache_zero(lfs, &lfs->pcache);
 8003884:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003886:	f104 0110 	add.w	r1, r4, #16
 800388a:	f7ff ff92 	bl	80037b2 <lfs_cache_zero.isra.17>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800388e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003890:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003892:	b9b0      	cbnz	r0, 80038c2 <lfs_init+0xfa>
 8003894:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <lfs_init+0x1c8>)
 8003896:	4a35      	ldr	r2, [pc, #212]	; (800396c <lfs_init+0x1a4>)
 8003898:	f640 7179 	movw	r1, #3961	; 0xf79
 800389c:	e79d      	b.n	80037da <lfs_init+0x12>
    return os_heap_alloc(size);
 800389e:	f7fe f929 	bl	8001af4 <os_heap_alloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80038a2:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1e5      	bne.n	8003874 <lfs_init+0xac>
    lfs_deinit(lfs);
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff6c 	bl	8003786 <lfs_deinit>
    return err;
 80038ae:	f06f 000b 	mvn.w	r0, #11
 80038b2:	e058      	b.n	8003966 <lfs_init+0x19e>
 80038b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80038b6:	f7fe f91d 	bl	8001af4 <os_heap_alloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80038ba:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 80038bc:	2800      	cmp	r0, #0
 80038be:	d1dd      	bne.n	800387c <lfs_init+0xb4>
 80038c0:	e7f2      	b.n	80038a8 <lfs_init+0xe0>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80038c2:	0741      	lsls	r1, r0, #29
 80038c4:	d102      	bne.n	80038cc <lfs_init+0x104>
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	079a      	lsls	r2, r3, #30
 80038ca:	d004      	beq.n	80038d6 <lfs_init+0x10e>
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <lfs_init+0x1cc>)
 80038ce:	4a27      	ldr	r2, [pc, #156]	; (800396c <lfs_init+0x1a4>)
 80038d0:	f640 717b 	movw	r1, #3963	; 0xf7b
 80038d4:	e781      	b.n	80037da <lfs_init+0x12>
    if (lfs->cfg->lookahead_buffer) {
 80038d6:	b14b      	cbz	r3, 80038ec <lfs_init+0x124>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80038d8:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80038da:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80038dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038de:	2aff      	cmp	r2, #255	; 0xff
 80038e0:	d90a      	bls.n	80038f8 <lfs_init+0x130>
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <lfs_init+0x1d0>)
 80038e4:	4a21      	ldr	r2, [pc, #132]	; (800396c <lfs_init+0x1a4>)
 80038e6:	f640 7187 	movw	r1, #3975	; 0xf87
 80038ea:	e776      	b.n	80037da <lfs_init+0x12>
 80038ec:	f7fe f902 	bl	8001af4 <os_heap_alloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80038f0:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d1f1      	bne.n	80038da <lfs_init+0x112>
 80038f6:	e7d7      	b.n	80038a8 <lfs_init+0xe0>
    if (!lfs->name_max) {
 80038f8:	b142      	cbz	r2, 800390c <lfs_init+0x144>
        lfs->name_max = LFS_NAME_MAX;
 80038fa:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80038fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fe:	2a00      	cmp	r2, #0
 8003900:	da06      	bge.n	8003910 <lfs_init+0x148>
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <lfs_init+0x1d4>)
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <lfs_init+0x1a4>)
 8003906:	f640 718d 	movw	r1, #3981	; 0xf8d
 800390a:	e766      	b.n	80037da <lfs_init+0x12>
        lfs->name_max = LFS_NAME_MAX;
 800390c:	22ff      	movs	r2, #255	; 0xff
 800390e:	e7f4      	b.n	80038fa <lfs_init+0x132>
        lfs->file_max = LFS_FILE_MAX;
 8003910:	bf08      	it	eq
 8003912:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
 8003916:	6722      	str	r2, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8003918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800391e:	428a      	cmp	r2, r1
 8003920:	d904      	bls.n	800392c <lfs_init+0x164>
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <lfs_init+0x1d8>)
 8003924:	4a11      	ldr	r2, [pc, #68]	; (800396c <lfs_init+0x1a4>)
 8003926:	f640 7193 	movw	r1, #3987	; 0xf93
 800392a:	e756      	b.n	80037da <lfs_init+0x12>
    lfs->attr_max = lfs->cfg->attr_max;
 800392c:	2a00      	cmp	r2, #0
 800392e:	bf08      	it	eq
 8003930:	460a      	moveq	r2, r1
 8003932:	6762      	str	r2, [r4, #116]	; 0x74
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8003934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	429a      	cmp	r2, r3
 800393a:	d904      	bls.n	8003946 <lfs_init+0x17e>
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <lfs_init+0x1dc>)
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <lfs_init+0x1a4>)
 8003940:	f640 7199 	movw	r1, #3993	; 0xf99
 8003944:	e749      	b.n	80037da <lfs_init+0x12>
    lfs->mlist = NULL;
 8003946:	2000      	movs	r0, #0
    lfs->root[0] = LFS_BLOCK_NULL;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->root[1] = LFS_BLOCK_NULL;
 800394c:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->seed = 0;
 8003950:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
    lfs->gdisk = (lfs_gstate_t){0};
 8003954:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
    lfs->gstate = (lfs_gstate_t){0};
 8003958:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
    lfs->gdelta = (lfs_gstate_t){0};
 800395c:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    lfs->gdisk = (lfs_gstate_t){0};
 8003960:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
 8003962:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 8003964:	6520      	str	r0, [r4, #80]	; 0x50
}
 8003966:	bd38      	pop	{r3, r4, r5, pc}
 8003968:	0800b17a 	.word	0x0800b17a
 800396c:	0800ac2f 	.word	0x0800ac2f
 8003970:	0800b193 	.word	0x0800b193
 8003974:	0800b1ae 	.word	0x0800b1ae
 8003978:	0800b1c7 	.word	0x0800b1c7
 800397c:	0800b1e1 	.word	0x0800b1e1
 8003980:	0800b211 	.word	0x0800b211
 8003984:	0800b241 	.word	0x0800b241
 8003988:	0800b272 	.word	0x0800b272
 800398c:	0800b2be 	.word	0x0800b2be
 8003990:	0800b2da 	.word	0x0800b2da
 8003994:	0800b2f7 	.word	0x0800b2f7
 8003998:	0800b34b 	.word	0x0800b34b
 800399c:	0800b365 	.word	0x0800b365
 80039a0:	0800b386 	.word	0x0800b386
 80039a4:	0800b3a1 	.word	0x0800b3a1

080039a8 <lfs_bd_erase.isra.18>:
    LFS_ASSERT(block < lfs->cfg->block_count);
 80039a8:	6a02      	ldr	r2, [r0, #32]
 80039aa:	428a      	cmp	r2, r1
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80039ac:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
 80039ae:	d805      	bhi.n	80039bc <lfs_bd_erase.isra.18+0x14>
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <lfs_bd_erase.isra.18+0x28>)
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <lfs_bd_erase.isra.18+0x2c>)
 80039b4:	21fe      	movs	r1, #254	; 0xfe
    LFS_ASSERT(err <= 0);
 80039b6:	4808      	ldr	r0, [pc, #32]	; (80039d8 <lfs_bd_erase.isra.18+0x30>)
 80039b8:	f005 f99c 	bl	8008cf4 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80039bc:	68c3      	ldr	r3, [r0, #12]
 80039be:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 80039c0:	2800      	cmp	r0, #0
 80039c2:	dd04      	ble.n	80039ce <lfs_bd_erase.isra.18+0x26>
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <lfs_bd_erase.isra.18+0x34>)
 80039c6:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <lfs_bd_erase.isra.18+0x2c>)
 80039c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039cc:	e7f3      	b.n	80039b6 <lfs_bd_erase.isra.18+0xe>
}
 80039ce:	bd08      	pop	{r3, pc}
 80039d0:	0800ad21 	.word	0x0800ad21
 80039d4:	0800abad 	.word	0x0800abad
 80039d8:	0800b193 	.word	0x0800b193
 80039dc:	0800acd4 	.word	0x0800acd4

080039e0 <lfs_fs_preporphans.isra.20>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80039e0:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 80039e2:	6803      	ldr	r3, [r0, #0]
    return tag & 0x000003ff;
 80039e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 80039e8:	b942      	cbnz	r2, 80039fc <lfs_fs_preporphans.isra.20+0x1c>
 80039ea:	2900      	cmp	r1, #0
 80039ec:	da06      	bge.n	80039fc <lfs_fs_preporphans.isra.20+0x1c>
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <lfs_fs_preporphans.isra.20+0x38>)
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <lfs_fs_preporphans.isra.20+0x3c>)
 80039f2:	480b      	ldr	r0, [pc, #44]	; (8003a20 <lfs_fs_preporphans.isra.20+0x40>)
 80039f4:	f241 114d 	movw	r1, #4429	; 0x114d
 80039f8:	f005 f97c 	bl	8008cf4 <__assert_func>
    lfs->gstate.tag += orphans;
 80039fc:	4419      	add	r1, r3
    return tag & 0x000003ff;
 80039fe:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 8003a02:	3300      	adds	r3, #0
 8003a04:	bf18      	it	ne
 8003a06:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8003a08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003a0c:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8003a10:	6001      	str	r1, [r0, #0]
}
 8003a12:	2000      	movs	r0, #0
 8003a14:	bd08      	pop	{r3, pc}
 8003a16:	bf00      	nop
 8003a18:	0800b148 	.word	0x0800b148
 8003a1c:	0800ac38 	.word	0x0800ac38
 8003a20:	0800b193 	.word	0x0800b193

08003a24 <lfs_ctz_index.isra.22>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8003a26:	69c5      	ldr	r5, [r0, #28]
    lfs_off_t size = *off;
 8003a28:	680e      	ldr	r6, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8003a2a:	3d08      	subs	r5, #8
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8003a2c:	460f      	mov	r7, r1
    lfs_off_t i = size / b;
 8003a2e:	fbb6 f0f5 	udiv	r0, r6, r5
    if (i == 0) {
 8003a32:	b180      	cbz	r0, 8003a56 <lfs_ctz_index.isra.22+0x32>
    return (uint32_t)__builtin_popcount(a);
 8003a34:	3801      	subs	r0, #1
 8003a36:	f7fc fc4b 	bl	80002d0 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8003a3a:	1c84      	adds	r4, r0, #2
 8003a3c:	eba6 0484 	sub.w	r4, r6, r4, lsl #2
 8003a40:	fbb4 f4f5 	udiv	r4, r4, r5
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7fc fc43 	bl	80002d0 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
 8003a4a:	fb04 6515 	mls	r5, r4, r5, r6
 8003a4e:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 8003a52:	603d      	str	r5, [r7, #0]
    return i;
 8003a54:	4620      	mov	r0, r4
}
 8003a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a58 <lfs_bd_read.isra.23>:
static int lfs_bd_read(lfs_t *lfs,
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	4690      	mov	r8, r2
 8003a5e:	b085      	sub	sp, #20
    if (block >= lfs->cfg->block_count ||
 8003a60:	6802      	ldr	r2, [r0, #0]
static int lfs_bd_read(lfs_t *lfs,
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	e9dd 940e 	ldrd	r9, r4, [sp, #56]	; 0x38
    if (block >= lfs->cfg->block_count ||
 8003a68:	6a13      	ldr	r3, [r2, #32]
static int lfs_bd_read(lfs_t *lfs,
 8003a6a:	9002      	str	r0, [sp, #8]
    if (block >= lfs->cfg->block_count ||
 8003a6c:	454b      	cmp	r3, r9
static int lfs_bd_read(lfs_t *lfs,
 8003a6e:	468a      	mov	sl, r1
 8003a70:	e9dd 7610 	ldrd	r7, r6, [sp, #64]	; 0x40
    if (block >= lfs->cfg->block_count ||
 8003a74:	d903      	bls.n	8003a7e <lfs_bd_read.isra.23+0x26>
 8003a76:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
 8003a78:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d922      	bls.n	8003ac4 <lfs_bd_read.isra.23+0x6c>
        return LFS_ERR_CORRUPT;
 8003a7e:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003a82:	e063      	b.n	8003b4c <lfs_bd_read.isra.23+0xf4>
        if (pcache && block == pcache->block &&
 8003a84:	f1ba 0f00 	cmp.w	sl, #0
 8003a88:	d03f      	beq.n	8003b0a <lfs_bd_read.isra.23+0xb2>
 8003a8a:	f8da 3000 	ldr.w	r3, [sl]
 8003a8e:	4599      	cmp	r9, r3
 8003a90:	d13b      	bne.n	8003b0a <lfs_bd_read.isra.23+0xb2>
                off < pcache->off + pcache->size) {
 8003a92:	e9da 5301 	ldrd	r5, r3, [sl, #4]
 8003a96:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
 8003a9a:	45a3      	cmp	fp, r4
 8003a9c:	d935      	bls.n	8003b0a <lfs_bd_read.isra.23+0xb2>
            if (off >= pcache->off) {
 8003a9e:	42a5      	cmp	r5, r4
 8003aa0:	d814      	bhi.n	8003acc <lfs_bd_read.isra.23+0x74>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003aa2:	ebab 0b04 	sub.w	fp, fp, r4
    return (a < b) ? a : b;
 8003aa6:	45b3      	cmp	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003aa8:	f8da 100c 	ldr.w	r1, [sl, #12]
 8003aac:	bf28      	it	cs
 8003aae:	46b3      	movcs	fp, r6
 8003ab0:	1b65      	subs	r5, r4, r5
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	465a      	mov	r2, fp
 8003ab6:	4429      	add	r1, r5
 8003ab8:	f005 f9a9 	bl	8008e0e <memcpy>
                data += diff;
 8003abc:	445f      	add	r7, fp
                off += diff;
 8003abe:	445c      	add	r4, fp
                size -= diff;
 8003ac0:	eba6 060b 	sub.w	r6, r6, fp
    while (size > 0) {
 8003ac4:	2e00      	cmp	r6, #0
 8003ac6:	d1dd      	bne.n	8003a84 <lfs_bd_read.isra.23+0x2c>
    return 0;
 8003ac8:	4630      	mov	r0, r6
 8003aca:	e03f      	b.n	8003b4c <lfs_bd_read.isra.23+0xf4>
            diff = lfs_min(diff, pcache->off-off);
 8003acc:	1b2d      	subs	r5, r5, r4
 8003ace:	42b5      	cmp	r5, r6
 8003ad0:	bf28      	it	cs
 8003ad2:	4635      	movcs	r5, r6
        if (block == rcache->block &&
 8003ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad8:	4599      	cmp	r9, r3
 8003ada:	d11c      	bne.n	8003b16 <lfs_bd_read.isra.23+0xbe>
                off < rcache->off + rcache->size) {
 8003adc:	e9d8 1301 	ldrd	r1, r3, [r8, #4]
 8003ae0:	440b      	add	r3, r1
        if (block == rcache->block &&
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d217      	bcs.n	8003b16 <lfs_bd_read.isra.23+0xbe>
            if (off >= rcache->off) {
 8003ae6:	428c      	cmp	r4, r1
 8003ae8:	d311      	bcc.n	8003b0e <lfs_bd_read.isra.23+0xb6>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003aea:	1b1b      	subs	r3, r3, r4
 8003aec:	429d      	cmp	r5, r3
 8003aee:	bf28      	it	cs
 8003af0:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003af2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003af6:	1a61      	subs	r1, r4, r1
 8003af8:	462a      	mov	r2, r5
 8003afa:	4419      	add	r1, r3
 8003afc:	4638      	mov	r0, r7
 8003afe:	f005 f986 	bl	8008e0e <memcpy>
            data += diff;
 8003b02:	442f      	add	r7, r5
            off += diff;
 8003b04:	442c      	add	r4, r5
            size -= diff;
 8003b06:	1b76      	subs	r6, r6, r5
 8003b08:	e7dc      	b.n	8003ac4 <lfs_bd_read.isra.23+0x6c>
        if (pcache && block == pcache->block &&
 8003b0a:	4635      	mov	r5, r6
 8003b0c:	e7e2      	b.n	8003ad4 <lfs_bd_read.isra.23+0x7c>
            diff = lfs_min(diff, rcache->off-off);
 8003b0e:	1b09      	subs	r1, r1, r4
 8003b10:	428d      	cmp	r5, r1
 8003b12:	bf28      	it	cs
 8003b14:	460d      	movcs	r5, r1
 8003b16:	9b02      	ldr	r3, [sp, #8]
 8003b18:	6818      	ldr	r0, [r3, #0]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	42b3      	cmp	r3, r6
 8003b1e:	d818      	bhi.n	8003b52 <lfs_bd_read.isra.23+0xfa>
 8003b20:	6943      	ldr	r3, [r0, #20]
 8003b22:	fbb4 f2f3 	udiv	r2, r4, r3
 8003b26:	fb03 4212 	mls	r2, r3, r2, r4
 8003b2a:	b992      	cbnz	r2, 8003b52 <lfs_bd_read.isra.23+0xfa>
 8003b2c:	429e      	cmp	r6, r3
 8003b2e:	d310      	bcc.n	8003b52 <lfs_bd_read.isra.23+0xfa>
    return a - (a % alignment);
 8003b30:	fbb5 f2f3 	udiv	r2, r5, r3
 8003b34:	fb03 5312 	mls	r3, r3, r2, r5
 8003b38:	1aed      	subs	r5, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8003b3a:	9500      	str	r5, [sp, #0]
 8003b3c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8003b40:	463b      	mov	r3, r7
 8003b42:	4622      	mov	r2, r4
 8003b44:	4649      	mov	r1, r9
 8003b46:	47d8      	blx	fp
            if (err) {
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d0da      	beq.n	8003b02 <lfs_bd_read.isra.23+0xaa>
}
 8003b4c:	b005      	add	sp, #20
 8003b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(block < lfs->cfg->block_count);
 8003b52:	6a03      	ldr	r3, [r0, #32]
 8003b54:	4599      	cmp	r9, r3
 8003b56:	d305      	bcc.n	8003b64 <lfs_bd_read.isra.23+0x10c>
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <lfs_bd_read.isra.23+0x168>)
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <lfs_bd_read.isra.23+0x16c>)
 8003b5c:	216a      	movs	r1, #106	; 0x6a
        LFS_ASSERT(err <= 0);
 8003b5e:	481a      	ldr	r0, [pc, #104]	; (8003bc8 <lfs_bd_read.isra.23+0x170>)
 8003b60:	f005 f8c8 	bl	8008cf4 <__assert_func>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003b64:	6941      	ldr	r1, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 8003b66:	9d03      	ldr	r5, [sp, #12]
    return a - (a % alignment);
 8003b68:	fbb4 f2f1 	udiv	r2, r4, r1
    return lfs_aligndown(a + alignment-1, alignment);
 8003b6c:	1e4b      	subs	r3, r1, #1
 8003b6e:	442b      	add	r3, r5
 8003b70:	4423      	add	r3, r4
    return a - (a % alignment);
 8003b72:	fb01 4212 	mls	r2, r1, r2, r4
 8003b76:	fbb3 f5f1 	udiv	r5, r3, r1
 8003b7a:	fb01 3115 	mls	r1, r1, r5, r3
 8003b7e:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 8003b80:	69c1      	ldr	r1, [r0, #28]
        rcache->block = block;
 8003b82:	f8c8 9000 	str.w	r9, [r8]
    return a - (a % alignment);
 8003b86:	1aa2      	subs	r2, r4, r2
        rcache->size = lfs_min(
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	bf94      	ite	ls
 8003b8c:	ebc2 0303 	rsbls	r3, r2, r3
 8003b90:	ebc2 0301 	rsbhi	r3, r2, r1
    return (a < b) ? a : b;
 8003b94:	6a81      	ldr	r1, [r0, #40]	; 0x28
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003b96:	f8c8 2004 	str.w	r2, [r8, #4]
 8003b9a:	428b      	cmp	r3, r1
 8003b9c:	bf28      	it	cs
 8003b9e:	460b      	movcs	r3, r1
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003ba0:	9300      	str	r3, [sp, #0]
        rcache->size = lfs_min(
 8003ba2:	f8c8 3008 	str.w	r3, [r8, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003ba6:	6845      	ldr	r5, [r0, #4]
 8003ba8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003bac:	4649      	mov	r1, r9
 8003bae:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	dd03      	ble.n	8003bbc <lfs_bd_read.isra.23+0x164>
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <lfs_bd_read.isra.23+0x174>)
 8003bb6:	4a03      	ldr	r2, [pc, #12]	; (8003bc4 <lfs_bd_read.isra.23+0x16c>)
 8003bb8:	2175      	movs	r1, #117	; 0x75
 8003bba:	e7d0      	b.n	8003b5e <lfs_bd_read.isra.23+0x106>
        if (err) {
 8003bbc:	d082      	beq.n	8003ac4 <lfs_bd_read.isra.23+0x6c>
 8003bbe:	e7c5      	b.n	8003b4c <lfs_bd_read.isra.23+0xf4>
 8003bc0:	0800ad21 	.word	0x0800ad21
 8003bc4:	0800ab7c 	.word	0x0800ab7c
 8003bc8:	0800b193 	.word	0x0800b193
 8003bcc:	0800acd4 	.word	0x0800acd4

08003bd0 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
 8003bd6:	e9d1 6303 	ldrd	r6, r3, [r1, #12]
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	4607      	mov	r7, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003bde:	303c      	adds	r0, #60	; 0x3c
    lfs_tag_t ntag = dir->etag;
 8003be0:	9307      	str	r3, [sp, #28]
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003be2:	4688      	mov	r8, r1
 8003be4:	9205      	str	r2, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003be6:	f7ff fd57 	bl	8003698 <lfs_gstate_hasmovehere>
 8003bea:	9b05      	ldr	r3, [sp, #20]
 8003bec:	f3c3 2989 	ubfx	r9, r3, #10, #10
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d07e      	beq.n	8003cf2 <lfs_dir_getslice+0x122>
 8003bf4:	f1b9 0f00 	cmp.w	r9, #0
 8003bf8:	d07d      	beq.n	8003cf6 <lfs_dir_getslice+0x126>
    return (tag & 0x000ffc00) >> 10;
 8003bfa:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <lfs_dir_getslice+0x12c>)
            lfs_tag_id(gmask) != 0 &&
 8003bfe:	f3c4 2489 	ubfx	r4, r4, #10, #10
 8003c02:	f3ca 2089 	ubfx	r0, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
 8003c06:	4284      	cmp	r4, r0
 8003c08:	bf94      	ite	ls
 8003c0a:	461c      	movls	r4, r3
 8003c0c:	2400      	movhi	r4, #0
 8003c0e:	f107 0b68 	add.w	fp, r7, #104	; 0x68
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003c12:	9d07      	ldr	r5, [sp, #28]
 8003c14:	4628      	mov	r0, r5
 8003c16:	f7ff fd1c 	bl	8003652 <lfs_tag_dsize>
 8003c1a:	1d03      	adds	r3, r0, #4
 8003c1c:	42b3      	cmp	r3, r6
 8003c1e:	d833      	bhi.n	8003c88 <lfs_dir_getslice+0xb8>
        off -= lfs_tag_dsize(ntag);
 8003c20:	1a36      	subs	r6, r6, r0
        int err = lfs_bd_read(lfs,
 8003c22:	aa07      	add	r2, sp, #28
 8003c24:	2304      	movs	r3, #4
 8003c26:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8003c2a:	f8d8 2000 	ldr.w	r2, [r8]
 8003c2e:	9200      	str	r2, [sp, #0]
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	463a      	mov	r2, r7
 8003c34:	2100      	movs	r1, #0
 8003c36:	4658      	mov	r0, fp
 8003c38:	f7ff ff0e 	bl	8003a58 <lfs_bd_read.isra.23>
        if (err) {
 8003c3c:	bb30      	cbnz	r0, 8003c8c <lfs_dir_getslice+0xbc>
    return __builtin_bswap32(a);
 8003c3e:	9b07      	ldr	r3, [sp, #28]
 8003c40:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8003c42:	406b      	eors	r3, r5
 8003c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c48:	9307      	str	r3, [sp, #28]
        if (lfs_tag_id(gmask) != 0 &&
 8003c4a:	f1b9 0f00 	cmp.w	r9, #0
 8003c4e:	d023      	beq.n	8003c98 <lfs_dir_getslice+0xc8>
    return (tag & 0x70000000) >> 20;
 8003c50:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
 8003c52:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d11d      	bne.n	8003c98 <lfs_dir_getslice+0xc8>
 8003c5c:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003c60:	f3c3 2089 	ubfx	r0, r3, #10, #10
 8003c64:	f3c5 2189 	ubfx	r1, r5, #10, #10
 8003c68:	4288      	cmp	r0, r1
 8003c6a:	d315      	bcc.n	8003c98 <lfs_dir_getslice+0xc8>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8003c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c74:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c78:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8003c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c84:	42ab      	cmp	r3, r5
 8003c86:	d104      	bne.n	8003c92 <lfs_dir_getslice+0xc2>
                return LFS_ERR_NOENT;
 8003c88:	f06f 0001 	mvn.w	r0, #1
}
 8003c8c:	b009      	add	sp, #36	; 0x24
 8003c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003c92:	b252      	sxtb	r2, r2
 8003c94:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8003c98:	ebaa 0104 	sub.w	r1, sl, r4
 8003c9c:	9b05      	ldr	r3, [sp, #20]
 8003c9e:	4069      	eors	r1, r5
 8003ca0:	4019      	ands	r1, r3
 8003ca2:	d1b6      	bne.n	8003c12 <lfs_dir_getslice+0x42>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003ca4:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
 8003ca8:	3301      	adds	r3, #1
 8003caa:	d0ed      	beq.n	8003c88 <lfs_dir_getslice+0xb8>
    return (a < b) ? a : b;
 8003cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return tag & 0x000003ff;
 8003cae:	f3c5 0909 	ubfx	r9, r5, #0, #10
 8003cb2:	4599      	cmp	r9, r3
 8003cb4:	bf28      	it	cs
 8003cb6:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
 8003cb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003cba:	9302      	str	r3, [sp, #8]
 8003cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	441e      	add	r6, r3
 8003cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	9601      	str	r6, [sp, #4]
 8003cce:	464b      	mov	r3, r9
 8003cd0:	463a      	mov	r2, r7
 8003cd2:	4658      	mov	r0, fp
 8003cd4:	f7ff fec0 	bl	8003a58 <lfs_bd_read.isra.23>
            if (err) {
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1d7      	bne.n	8003c8c <lfs_dir_getslice+0xbc>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8003cdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cde:	eba3 0209 	sub.w	r2, r3, r9
 8003ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	eb03 0009 	add.w	r0, r3, r9
 8003cea:	f005 f89b 	bl	8008e24 <memset>
            return tag + gdiff;
 8003cee:	1960      	adds	r0, r4, r5
 8003cf0:	e7cc      	b.n	8003c8c <lfs_dir_getslice+0xbc>
    lfs_stag_t gdiff = 0;
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	e78b      	b.n	8003c0e <lfs_dir_getslice+0x3e>
 8003cf6:	464c      	mov	r4, r9
 8003cf8:	e789      	b.n	8003c0e <lfs_dir_getslice+0x3e>
 8003cfa:	bf00      	nop
 8003cfc:	fffffc00 	.word	0xfffffc00

08003d00 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8003d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
 8003d02:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8003d06:	9402      	str	r4, [sp, #8]
 8003d08:	9c06      	ldr	r4, [sp, #24]
 8003d0a:	9401      	str	r4, [sp, #4]
 8003d0c:	2400      	movs	r4, #0
 8003d0e:	9400      	str	r4, [sp, #0]
 8003d10:	f7ff ff5e 	bl	8003bd0 <lfs_dir_getslice>
}
 8003d14:	b004      	add	sp, #16
 8003d16:	bd10      	pop	{r4, pc}

08003d18 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 8003d18:	b530      	push	{r4, r5, lr}
 8003d1a:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003d1c:	ac03      	add	r4, sp, #12
        lfs_gstate_t *gstate) {
 8003d1e:	4615      	mov	r5, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003d20:	9400      	str	r4, [sp, #0]
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <lfs_dir_getgstate+0x2c>)
 8003d24:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <lfs_dir_getgstate+0x30>)
 8003d26:	f7ff ffeb 	bl	8003d00 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	da04      	bge.n	8003d38 <lfs_dir_getgstate+0x20>
 8003d2e:	1c83      	adds	r3, r0, #2
    return 0;
 8003d30:	bf08      	it	eq
 8003d32:	2000      	moveq	r0, #0
}
 8003d34:	b007      	add	sp, #28
 8003d36:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
 8003d38:	4628      	mov	r0, r5
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	f7ff fc93 	bl	8003666 <lfs_gstate_xor>
    return 0;
 8003d40:	2000      	movs	r0, #0
 8003d42:	e7f7      	b.n	8003d34 <lfs_dir_getgstate+0x1c>
 8003d44:	7ff0000c 	.word	0x7ff0000c
 8003d48:	7ff00000 	.word	0x7ff00000

08003d4c <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8003d4c:	b530      	push	{r4, r5, lr}
 8003d4e:	4613      	mov	r3, r2
 8003d50:	b087      	sub	sp, #28
    lfs_t *lfs = find->lfs;
 8003d52:	6802      	ldr	r2, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8003d54:	4605      	mov	r5, r0
    int err = lfs_bd_read(lfs,
 8003d56:	ac04      	add	r4, sp, #16
 8003d58:	2008      	movs	r0, #8
 8003d5a:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8003d5c:	9003      	str	r0, [sp, #12]
 8003d5e:	9402      	str	r4, [sp, #8]
 8003d60:	6858      	ldr	r0, [r3, #4]
 8003d62:	9001      	str	r0, [sp, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	69cb      	ldr	r3, [r1, #28]
 8003d6a:	f102 0068 	add.w	r0, r2, #104	; 0x68
 8003d6e:	f102 0110 	add.w	r1, r2, #16
 8003d72:	f7ff fe71 	bl	8003a58 <lfs_bd_read.isra.23>
    if (err) {
 8003d76:	b930      	cbnz	r0, 8003d86 <lfs_fs_parent_match+0x3a>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8003d78:	1d29      	adds	r1, r5, #4
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff fc58 	bl	8003630 <lfs_pair_cmp>
 8003d80:	3000      	adds	r0, #0
 8003d82:	bf18      	it	ne
 8003d84:	2001      	movne	r0, #1
}
 8003d86:	b007      	add	sp, #28
 8003d88:	bd30      	pop	{r4, r5, pc}
	...

08003d8c <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	b097      	sub	sp, #92	; 0x5c
 8003d92:	4616      	mov	r6, r2
 8003d94:	930b      	str	r3, [sp, #44]	; 0x2c
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003d9a:	6a12      	ldr	r2, [r2, #32]
 8003d9c:	4293      	cmp	r3, r2
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003d9e:	4607      	mov	r7, r0
 8003da0:	460c      	mov	r4, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8003da2:	f080 81e7 	bcs.w	8004174 <lfs_dir_fetchmatch+0x3e8>
 8003da6:	6871      	ldr	r1, [r6, #4]
 8003da8:	428a      	cmp	r2, r1
 8003daa:	f240 81e3 	bls.w	8004174 <lfs_dir_fetchmatch+0x3e8>
 8003dae:	f100 0268 	add.w	r2, r0, #104	; 0x68
    uint32_t revs[2] = {0, 0};
 8003db2:	2100      	movs	r1, #0
 8003db4:	9204      	str	r2, [sp, #16]
        int err = lfs_bd_read(lfs,
 8003db6:	f04f 0804 	mov.w	r8, #4
 8003dba:	aa10      	add	r2, sp, #64	; 0x40
 8003dbc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4643      	mov	r3, r8
 8003dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dca:	9804      	ldr	r0, [sp, #16]
    uint32_t revs[2] = {0, 0};
 8003dcc:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
        int err = lfs_bd_read(lfs,
 8003dd0:	f7ff fe42 	bl	8003a58 <lfs_bd_read.isra.23>
 8003dd4:	4643      	mov	r3, r8
        if (err && err != LFS_ERR_CORRUPT) {
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	b118      	cbz	r0, 8003de2 <lfs_dir_fetchmatch+0x56>
 8003dda:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003dde:	f040 818a 	bne.w	80040f6 <lfs_dir_fetchmatch+0x36a>
        int err = lfs_bd_read(lfs,
 8003de2:	9303      	str	r3, [sp, #12]
 8003de4:	f04f 0800 	mov.w	r8, #0
 8003de8:	ab11      	add	r3, sp, #68	; 0x44
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	f8cd 8004 	str.w	r8, [sp, #4]
 8003df0:	6873      	ldr	r3, [r6, #4]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	463a      	mov	r2, r7
 8003df6:	2304      	movs	r3, #4
 8003df8:	4641      	mov	r1, r8
 8003dfa:	9804      	ldr	r0, [sp, #16]
 8003dfc:	f7ff fe2c 	bl	8003a58 <lfs_bd_read.isra.23>
        if (err && err != LFS_ERR_CORRUPT) {
 8003e00:	4605      	mov	r5, r0
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d04e      	beq.n	8003ea4 <lfs_dir_fetchmatch+0x118>
 8003e06:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003e0a:	f040 8174 	bne.w	80040f6 <lfs_dir_fetchmatch+0x36a>
    dir->pair[0] = pair[(r+0)%2];
 8003e0e:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
 8003e12:	6023      	str	r3, [r4, #0]
    dir->pair[1] = pair[(r+1)%2];
 8003e14:	f088 0301 	eor.w	r3, r8, #1
 8003e18:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003e1e:	6063      	str	r3, [r4, #4]
    dir->rev = revs[(r+0)%2];
 8003e20:	ab16      	add	r3, sp, #88	; 0x58
 8003e22:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    dir->off = 0; // nonzero = found some commits
 8003e26:	2202      	movs	r2, #2
    dir->rev = revs[(r+0)%2];
 8003e28:	f858 3c18 	ldr.w	r3, [r8, #-24]
 8003e2c:	60a3      	str	r3, [r4, #8]
    dir->off = 0; // nonzero = found some commits
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60e3      	str	r3, [r4, #12]
 8003e32:	920a      	str	r2, [sp, #40]	; 0x28
    lfs_stag_t besttag = -1;
 8003e34:	f04f 35ff 	mov.w	r5, #4294967295
        bool tempsplit = false;
 8003e38:	9308      	str	r3, [sp, #32]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8003e3a:	4ab1      	ldr	r2, [pc, #708]	; (8004100 <lfs_dir_fetchmatch+0x374>)
 8003e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e40:	ab12      	add	r3, sp, #72	; 0x48
 8003e42:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003e46:	2204      	movs	r2, #4
 8003e48:	f104 0108 	add.w	r1, r4, #8
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	f003 f8ac 	bl	8006fac <lfs_crc>
        bool tempsplit = false;
 8003e54:	2300      	movs	r3, #0
 8003e56:	9307      	str	r3, [sp, #28]
        uint16_t tempcount = 0;
 8003e58:	9305      	str	r3, [sp, #20]
        lfs_tag_t ptag = 0xffffffff;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003e5e:	900d      	str	r0, [sp, #52]	; 0x34
 8003e60:	46a8      	mov	r8, r5
        lfs_tag_t ptag = 0xffffffff;
 8003e62:	9306      	str	r3, [sp, #24]
        lfs_off_t off = 0;
 8003e64:	f04f 0a00 	mov.w	sl, #0
            off += lfs_tag_dsize(ptag);
 8003e68:	9806      	ldr	r0, [sp, #24]
 8003e6a:	f7ff fbf2 	bl	8003652 <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
 8003e6e:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
            off += lfs_tag_dsize(ptag);
 8003e72:	4482      	add	sl, r0
            int err = lfs_bd_read(lfs,
 8003e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	9200      	str	r2, [sp, #0]
 8003e7a:	e9cd ab01 	strd	sl, fp, [sp, #4]
 8003e7e:	f04f 0904 	mov.w	r9, #4
 8003e82:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	9804      	ldr	r0, [sp, #16]
 8003e8a:	463a      	mov	r2, r7
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	f7ff fde3 	bl	8003a58 <lfs_bd_read.isra.23>
            if (err) {
 8003e92:	4606      	mov	r6, r0
 8003e94:	b1a8      	cbz	r0, 8003ec2 <lfs_dir_fetchmatch+0x136>
                    if (err == LFS_ERR_CORRUPT) {
 8003e96:	f116 0f54 	cmn.w	r6, #84	; 0x54
 8003e9a:	f040 812b 	bne.w	80040f4 <lfs_dir_fetchmatch+0x368>
                        dir->erased = false;
 8003e9e:	9b08      	ldr	r3, [sp, #32]
 8003ea0:	75a3      	strb	r3, [r4, #22]
 8003ea2:	e032      	b.n	8003f0a <lfs_dir_fetchmatch+0x17e>
    return (int)(unsigned)(a - b);
 8003ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ea8:	eba3 0802 	sub.w	r8, r3, r2
        if (err != LFS_ERR_CORRUPT &&
 8003eac:	f1b8 0f00 	cmp.w	r8, #0
 8003eb0:	bfd4      	ite	le
 8003eb2:	f04f 0800 	movle.w	r8, #0
 8003eb6:	f04f 0801 	movgt.w	r8, #1
 8003eba:	e7a8      	b.n	8003e0e <lfs_dir_fetchmatch+0x82>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec0:	e7bb      	b.n	8003e3a <lfs_dir_fetchmatch+0xae>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003ec2:	464a      	mov	r2, r9
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003ec8:	f003 f870 	bl	8006fac <lfs_crc>
    return __builtin_bswap32(a);
 8003ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            tag = lfs_frombe32(tag) ^ ptag;
 8003ece:	9a06      	ldr	r2, [sp, #24]
            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003ed0:	900d      	str	r0, [sp, #52]	; 0x34
 8003ed2:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
 8003ed4:	ea82 0b03 	eor.w	fp, r2, r3
            if (!lfs_tag_isvalid(tag)) {
 8003ed8:	f1bb 0f00 	cmp.w	fp, #0
            tag = lfs_frombe32(tag) ^ ptag;
 8003edc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
            if (!lfs_tag_isvalid(tag)) {
 8003ee0:	da2e      	bge.n	8003f40 <lfs_dir_fetchmatch+0x1b4>
    return (tag & 0x70000000) >> 20;
 8003ee2:	ea4f 5a12 	mov.w	sl, r2, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8003ee6:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
 8003eea:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
 8003eee:	d109      	bne.n	8003f04 <lfs_dir_fetchmatch+0x178>
                        dir->off % lfs->cfg->prog_size == 0);
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef2:	68e2      	ldr	r2, [r4, #12]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	fbb2 f6f3 	udiv	r6, r2, r3
 8003efa:	fb03 2616 	mls	r6, r3, r6, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8003efe:	fab6 f686 	clz	r6, r6
 8003f02:	0976      	lsrs	r6, r6, #5
 8003f04:	f006 0601 	and.w	r6, r6, #1
 8003f08:	75a6      	strb	r6, [r4, #22]
        if (dir->off > 0) {
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8119 	beq.w	8004144 <lfs_dir_fetchmatch+0x3b8>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003f12:	4621      	mov	r1, r4
 8003f14:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003f18:	f7ff fbbe 	bl	8003698 <lfs_gstate_hasmovehere>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f000 80fc 	beq.w	800411a <lfs_dir_fetchmatch+0x38e>
    return (tag & 0x000ffc00) >> 10;
 8003f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f24:	f3c5 2289 	ubfx	r2, r5, #10, #10
 8003f28:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	f040 80ed 	bne.w	800410c <lfs_dir_fetchmatch+0x380>
                    besttag |= 0x80000000;
 8003f32:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
            if (id) {
 8003f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 80f0 	bne.w	800411e <lfs_dir_fetchmatch+0x392>
 8003f3e:	e0f8      	b.n	8004132 <lfs_dir_fetchmatch+0x3a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8003f40:	4658      	mov	r0, fp
 8003f42:	f7ff fb86 	bl	8003652 <lfs_tag_dsize>
 8003f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4450      	add	r0, sl
 8003f4c:	4298      	cmp	r0, r3
 8003f4e:	d8a6      	bhi.n	8003e9e <lfs_dir_fetchmatch+0x112>
    return (tag & 0x70000000) >> 20;
 8003f50:	ea4f 521b 	mov.w	r2, fp, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8003f54:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f58:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003f5c:	d13d      	bne.n	8003fda <lfs_dir_fetchmatch+0x24e>
                err = lfs_bd_read(lfs,
 8003f5e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f60:	9202      	str	r2, [sp, #8]
 8003f62:	f10a 0204 	add.w	r2, sl, #4
 8003f66:	9201      	str	r2, [sp, #4]
 8003f68:	6822      	ldr	r2, [r4, #0]
 8003f6a:	9200      	str	r2, [sp, #0]
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f72:	463a      	mov	r2, r7
 8003f74:	9804      	ldr	r0, [sp, #16]
 8003f76:	f7ff fd6f 	bl	8003a58 <lfs_bd_read.isra.23>
                if (err) {
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d18a      	bne.n	8003e96 <lfs_dir_fetchmatch+0x10a>
                if (crc != dcrc) {
 8003f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d18a      	bne.n	8003e9e <lfs_dir_fetchmatch+0x112>
    return (tag & 0x0ff00000) >> 20;
 8003f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    return (tag & 0x0ff00000) >> 20;
 8003f8c:	0d1b      	lsrs	r3, r3, #20
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003f8e:	464a      	mov	r2, r9
 8003f90:	a90d      	add	r1, sp, #52	; 0x34
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003f92:	ea8b 7bc3 	eor.w	fp, fp, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003f96:	f003 f809 	bl	8006fac <lfs_crc>
 8003f9a:	62f8      	str	r0, [r7, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 8003f9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f9e:	f7ff fb58 	bl	8003652 <lfs_tag_dsize>
                dir->count = tempcount;
 8003fa2:	9b05      	ldr	r3, [sp, #20]
 8003fa4:	82a3      	strh	r3, [r4, #20]
                dir->tail[0] = temptail[0];
 8003fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fa8:	61a3      	str	r3, [r4, #24]
                dir->off = off + lfs_tag_dsize(tag);
 8003faa:	4450      	add	r0, sl
                dir->tail[1] = temptail[1];
 8003fac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003fae:	61e3      	str	r3, [r4, #28]
                dir->etag = ptag;
 8003fb0:	e9c4 0b03 	strd	r0, fp, [r4, #12]
                dir->split = tempsplit;
 8003fb4:	9b07      	ldr	r3, [sp, #28]
 8003fb6:	75e3      	strb	r3, [r4, #23]
                crc = 0xffffffff;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	930d      	str	r3, [sp, #52]	; 0x34
 8003fbe:	4643      	mov	r3, r8
 8003fc0:	4645      	mov	r5, r8
 8003fc2:	f8cd b018 	str.w	fp, [sp, #24]
 8003fc6:	4698      	mov	r8, r3
 8003fc8:	e74e      	b.n	8003e68 <lfs_dir_fetchmatch+0xdc>
                crc = lfs_crc(crc, &dat, 1);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	a90f      	add	r1, sp, #60	; 0x3c
 8003fce:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003fd0:	f002 ffec 	bl	8006fac <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003fd4:	f109 0901 	add.w	r9, r9, #1
                crc = lfs_crc(crc, &dat, 1);
 8003fd8:	900d      	str	r0, [sp, #52]	; 0x34
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003fda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003fdc:	f7ff fb39 	bl	8003652 <lfs_tag_dsize>
 8003fe0:	4548      	cmp	r0, r9
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	d916      	bls.n	8004014 <lfs_dir_fetchmatch+0x288>
                err = lfs_bd_read(lfs,
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fea:	9103      	str	r1, [sp, #12]
 8003fec:	a90f      	add	r1, sp, #60	; 0x3c
 8003fee:	9102      	str	r1, [sp, #8]
 8003ff0:	eb09 010a 	add.w	r1, r9, sl
 8003ff4:	e9cd 3100 	strd	r3, r1, [sp]
 8003ff8:	9804      	ldr	r0, [sp, #16]
 8003ffa:	69d3      	ldr	r3, [r2, #28]
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	463a      	mov	r2, r7
 8004000:	f7ff fd2a 	bl	8003a58 <lfs_bd_read.isra.23>
                if (err) {
 8004004:	4606      	mov	r6, r0
 8004006:	2800      	cmp	r0, #0
 8004008:	d0df      	beq.n	8003fca <lfs_dir_fetchmatch+0x23e>
                    if (err == LFS_ERR_CORRUPT) {
 800400a:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800400e:	d171      	bne.n	80040f4 <lfs_dir_fetchmatch+0x368>
                        dir->erased = false;
 8004010:	9b08      	ldr	r3, [sp, #32]
 8004012:	75a3      	strb	r3, [r4, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8004014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    return (tag & 0x70000000) >> 20;
 8004016:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8004018:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
 800401c:	d11e      	bne.n	800405c <lfs_dir_fetchmatch+0x2d0>
                if (lfs_tag_id(tag) >= tempcount) {
 800401e:	9a05      	ldr	r2, [sp, #20]
    return (tag & 0x000ffc00) >> 10;
 8004020:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 8004024:	429a      	cmp	r2, r3
 8004026:	d801      	bhi.n	800402c <lfs_dir_fetchmatch+0x2a0>
                    tempcount = lfs_tag_id(tag) + 1;
 8004028:	3301      	adds	r3, #1
 800402a:	9305      	str	r3, [sp, #20]
            if ((fmask & tag) == (fmask & ftag)) {
 800402c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800402e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004030:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	404a      	eors	r2, r1
 8004036:	4202      	tst	r2, r0
 8004038:	d10d      	bne.n	8004056 <lfs_dir_fetchmatch+0x2ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800403a:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
 800403c:	f10a 0304 	add.w	r3, sl, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004040:	9315      	str	r3, [sp, #84]	; 0x54
 8004042:	aa14      	add	r2, sp, #80	; 0x50
 8004044:	e9dd 3022 	ldrd	r3, r0, [sp, #136]	; 0x88
 8004048:	4798      	blx	r3
                if (res < 0) {
 800404a:	1e06      	subs	r6, r0, #0
 800404c:	f6ff af23 	blt.w	8003e96 <lfs_dir_fetchmatch+0x10a>
 8004050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                if (res == LFS_CMP_EQ) {
 8004052:	d13c      	bne.n	80040ce <lfs_dir_fetchmatch+0x342>
                    tempbesttag = tag;
 8004054:	4698      	mov	r8, r3
 8004056:	4643      	mov	r3, r8
 8004058:	46a8      	mov	r8, r5
 800405a:	e7b1      	b.n	8003fc0 <lfs_dir_fetchmatch+0x234>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800405c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004060:	d11c      	bne.n	800409c <lfs_dir_fetchmatch+0x310>
                tempcount += lfs_tag_splice(tag);
 8004062:	9905      	ldr	r1, [sp, #20]
    return (int8_t)lfs_tag_chunk(tag);
 8004064:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
 8004066:	4411      	add	r1, r2
 8004068:	b289      	uxth	r1, r1
 800406a:	9105      	str	r1, [sp, #20]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800406c:	4925      	ldr	r1, [pc, #148]	; (8004104 <lfs_dir_fetchmatch+0x378>)
 800406e:	ea08 0101 	and.w	r1, r8, r1
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8004072:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
 8004076:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800407a:	428b      	cmp	r3, r1
 800407c:	d102      	bne.n	8004084 <lfs_dir_fetchmatch+0x2f8>
                    tempbesttag |= 0x80000000;
 800407e:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
 8004082:	e7d3      	b.n	800402c <lfs_dir_fetchmatch+0x2a0>
                } else if (tempbesttag != -1 &&
 8004084:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004088:	d0d0      	beq.n	800402c <lfs_dir_fetchmatch+0x2a0>
 800408a:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800408e:	f3c8 2189 	ubfx	r1, r8, #10, #10
 8004092:	428b      	cmp	r3, r1
 8004094:	d8ca      	bhi.n	800402c <lfs_dir_fetchmatch+0x2a0>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004096:	eb08 2882 	add.w	r8, r8, r2, lsl #10
 800409a:	e7c7      	b.n	800402c <lfs_dir_fetchmatch+0x2a0>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800409c:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80040a0:	d1c4      	bne.n	800402c <lfs_dir_fetchmatch+0x2a0>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80040a2:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
 80040a6:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80040a8:	9307      	str	r3, [sp, #28]
                err = lfs_bd_read(lfs,
 80040aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ac:	9203      	str	r2, [sp, #12]
 80040ae:	aa12      	add	r2, sp, #72	; 0x48
 80040b0:	9202      	str	r2, [sp, #8]
 80040b2:	f10a 0204 	add.w	r2, sl, #4
 80040b6:	9201      	str	r2, [sp, #4]
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	9200      	str	r2, [sp, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	9804      	ldr	r0, [sp, #16]
 80040c0:	463a      	mov	r2, r7
 80040c2:	2100      	movs	r1, #0
 80040c4:	f7ff fcc8 	bl	8003a58 <lfs_bd_read.isra.23>
                    if (err == LFS_ERR_CORRUPT) {
 80040c8:	3054      	adds	r0, #84	; 0x54
 80040ca:	d1af      	bne.n	800402c <lfs_dir_fetchmatch+0x2a0>
 80040cc:	e6e7      	b.n	8003e9e <lfs_dir_fetchmatch+0x112>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <lfs_dir_fetchmatch+0x37c>)
 80040d0:	ea88 0203 	eor.w	r2, r8, r3
 80040d4:	420a      	tst	r2, r1
 80040d6:	d00a      	beq.n	80040ee <lfs_dir_fetchmatch+0x362>
                } else if (res == LFS_CMP_GT &&
 80040d8:	2e02      	cmp	r6, #2
 80040da:	d1bc      	bne.n	8004056 <lfs_dir_fetchmatch+0x2ca>
 80040dc:	f3c8 2289 	ubfx	r2, r8, #10, #10
 80040e0:	f3c3 2189 	ubfx	r1, r3, #10, #10
 80040e4:	428a      	cmp	r2, r1
 80040e6:	d3b6      	bcc.n	8004056 <lfs_dir_fetchmatch+0x2ca>
                    tempbesttag = tag | 0x80000000;
 80040e8:	f043 4800 	orr.w	r8, r3, #2147483648	; 0x80000000
 80040ec:	e7b3      	b.n	8004056 <lfs_dir_fetchmatch+0x2ca>
                    tempbesttag = -1;
 80040ee:	f04f 38ff 	mov.w	r8, #4294967295
 80040f2:	e7b0      	b.n	8004056 <lfs_dir_fetchmatch+0x2ca>
                return err;
 80040f4:	4635      	mov	r5, r6
}
 80040f6:	4628      	mov	r0, r5
 80040f8:	b017      	add	sp, #92	; 0x5c
 80040fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	0800a2fc 	.word	0x0800a2fc
 8004104:	000ffc00 	.word	0x000ffc00
 8004108:	7ffffc00 	.word	0x7ffffc00
                } else if (besttag != -1 &&
 800410c:	1c69      	adds	r1, r5, #1
 800410e:	f43f af12 	beq.w	8003f36 <lfs_dir_fetchmatch+0x1aa>
 8004112:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
 8004114:	bf88      	it	hi
 8004116:	f5a5 6580 	subhi.w	r5, r5, #1024	; 0x400
            if (id) {
 800411a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800411c:	b13b      	cbz	r3, 800412e <lfs_dir_fetchmatch+0x3a2>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800411e:	8aa2      	ldrh	r2, [r4, #20]
 8004120:	f3c5 2389 	ubfx	r3, r5, #10, #10
    return (a < b) ? a : b;
 8004124:	4293      	cmp	r3, r2
 8004126:	bf28      	it	cs
 8004128:	4613      	movcs	r3, r2
 800412a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800412c:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
 800412e:	2d00      	cmp	r5, #0
 8004130:	dae1      	bge.n	80040f6 <lfs_dir_fetchmatch+0x36a>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8004132:	8aa3      	ldrh	r3, [r4, #20]
 8004134:	f3c5 2589 	ubfx	r5, r5, #10, #10
                return LFS_ERR_NOENT;
 8004138:	42ab      	cmp	r3, r5
 800413a:	bf94      	ite	ls
 800413c:	2500      	movls	r5, #0
 800413e:	f06f 0501 	mvnhi.w	r5, #1
 8004142:	e7d8      	b.n	80040f6 <lfs_dir_fetchmatch+0x36a>
        dir->rev = revs[(r+1)%2];
 8004144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004146:	a816      	add	r0, sp, #88	; 0x58
 8004148:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    pair[0] = pair[1];
 800414c:	e9d4 2300 	ldrd	r2, r3, [r4]
        dir->rev = revs[(r+1)%2];
 8004150:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8004154:	60a1      	str	r1, [r4, #8]
    for (int i = 0; i < 2; i++) {
 8004156:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004158:	2901      	cmp	r1, #1
    pair[1] = t;
 800415a:	e9c4 3200 	strd	r3, r2, [r4]
    for (int i = 0; i < 2; i++) {
 800415e:	f47f aead 	bne.w	8003ebc <lfs_dir_fetchmatch+0x130>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8004162:	4906      	ldr	r1, [pc, #24]	; (800417c <lfs_dir_fetchmatch+0x3f0>)
 8004164:	4806      	ldr	r0, [pc, #24]	; (8004180 <lfs_dir_fetchmatch+0x3f4>)
 8004166:	e9cd 2100 	strd	r2, r1, [sp]
 800416a:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800416e:	4905      	ldr	r1, [pc, #20]	; (8004184 <lfs_dir_fetchmatch+0x3f8>)
 8004170:	f005 f928 	bl	80093c4 <iprintf>
        return LFS_ERR_CORRUPT;
 8004174:	f06f 0553 	mvn.w	r5, #83	; 0x53
 8004178:	e7bd      	b.n	80040f6 <lfs_dir_fetchmatch+0x36a>
 800417a:	bf00      	nop
 800417c:	0800aad6 	.word	0x0800aad6
 8004180:	0800ade2 	.word	0x0800ade2
 8004184:	0800b193 	.word	0x0800b193

08004188 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 8004188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
 800418c:	2301      	movs	r3, #1
 800418e:	2400      	movs	r4, #0
 8004190:	e9c2 4306 	strd	r4, r3, [r2, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8004194:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80041f8 <lfs_fs_parent+0x70>
 8004198:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80041fc <lfs_fs_parent+0x74>
 800419c:	f8df a060 	ldr.w	sl, [pc, #96]	; 8004200 <lfs_fs_parent+0x78>
        lfs_mdir_t *parent) {
 80041a0:	b088      	sub	sp, #32
 80041a2:	4606      	mov	r6, r0
 80041a4:	460f      	mov	r7, r1
 80041a6:	4615      	mov	r5, r2
    while (!lfs_pair_isnull(parent->tail)) {
 80041a8:	f105 0218 	add.w	r2, r5, #24
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7ff fa35 	bl	800361c <lfs_pair_isnull>
 80041b2:	b110      	cbz	r0, 80041ba <lfs_fs_parent+0x32>
    return LFS_ERR_NOENT;
 80041b4:	f06f 0001 	mvn.w	r0, #1
 80041b8:	e018      	b.n	80041ec <lfs_fs_parent+0x64>
        if (cycle >= lfs->cfg->block_count/2) {
 80041ba:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 80041c2:	d216      	bcs.n	80041f2 <lfs_fs_parent+0x6a>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	9306      	str	r3, [sp, #24]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80041cc:	ab05      	add	r3, sp, #20
 80041ce:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80041d2:	e9cd 9000 	strd	r9, r0, [sp]
 80041d6:	4653      	mov	r3, sl
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
        cycle += 1;
 80041dc:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80041de:	9605      	str	r6, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80041e0:	f7ff fdd4 	bl	8003d8c <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d0df      	beq.n	80041a8 <lfs_fs_parent+0x20>
 80041e8:	1c83      	adds	r3, r0, #2
 80041ea:	d0dd      	beq.n	80041a8 <lfs_fs_parent+0x20>
}
 80041ec:	b008      	add	sp, #32
 80041ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
 80041f2:	f06f 0053 	mvn.w	r0, #83	; 0x53
 80041f6:	e7f9      	b.n	80041ec <lfs_fs_parent+0x64>
 80041f8:	08003d4d 	.word	0x08003d4d
 80041fc:	20000008 	.word	0x20000008
 8004200:	7ff003ff 	.word	0x7ff003ff

08004204 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004206:	2300      	movs	r3, #0
 8004208:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	f7ff fdba 	bl	8003d8c <lfs_dir_fetchmatch>
}
 8004218:	b005      	add	sp, #20
 800421a:	f85d fb04 	ldr.w	pc, [sp], #4

0800421e <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800421e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	2400      	movs	r4, #0
 8004226:	e9c2 4306 	strd	r4, r3, [r2, #24]
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800422a:	4607      	mov	r7, r0
 800422c:	4688      	mov	r8, r1
 800422e:	4615      	mov	r5, r2
    while (!lfs_pair_isnull(pdir->tail)) {
 8004230:	f102 0618 	add.w	r6, r2, #24
 8004234:	4630      	mov	r0, r6
 8004236:	f7ff f9f1 	bl	800361c <lfs_pair_isnull>
 800423a:	b110      	cbz	r0, 8004242 <lfs_fs_pred+0x24>
    return LFS_ERR_NOENT;
 800423c:	f06f 0001 	mvn.w	r0, #1
 8004240:	e011      	b.n	8004266 <lfs_fs_pred+0x48>
        if (cycle >= lfs->cfg->block_count/2) {
 8004242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 800424a:	d20e      	bcs.n	800426a <lfs_fs_pred+0x4c>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800424c:	4641      	mov	r1, r8
 800424e:	4630      	mov	r0, r6
        cycle += 1;
 8004250:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8004252:	f7ff f9ed 	bl	8003630 <lfs_pair_cmp>
 8004256:	b130      	cbz	r0, 8004266 <lfs_fs_pred+0x48>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8004258:	4632      	mov	r2, r6
 800425a:	4629      	mov	r1, r5
 800425c:	4638      	mov	r0, r7
 800425e:	f7ff ffd1 	bl	8004204 <lfs_dir_fetch>
        if (err) {
 8004262:	2800      	cmp	r0, #0
 8004264:	d0e6      	beq.n	8004234 <lfs_fs_pred+0x16>
}
 8004266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
 800426a:	f06f 0053 	mvn.w	r0, #83	; 0x53
 800426e:	e7fa      	b.n	8004266 <lfs_fs_pred+0x48>

08004270 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	b08d      	sub	sp, #52	; 0x34
 8004276:	4680      	mov	r8, r0
 8004278:	460e      	mov	r6, r1
 800427a:	9206      	str	r2, [sp, #24]
    const char *name = *path;
 800427c:	6814      	ldr	r4, [r2, #0]
    if (id) {
 800427e:	9305      	str	r3, [sp, #20]
 8004280:	b11b      	cbz	r3, 800428a <lfs_dir_find+0x1a>
        *id = 0x3ff;
 8004282:	9a05      	ldr	r2, [sp, #20]
 8004284:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004288:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 800428a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800428e:	61b3      	str	r3, [r6, #24]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004290:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80043c0 <lfs_dir_find+0x150>
    dir->tail[1] = lfs->root[1];
 8004294:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8004298:	61f3      	str	r3, [r6, #28]
        name += strspn(name, "/");
 800429a:	4944      	ldr	r1, [pc, #272]	; (80043ac <lfs_dir_find+0x13c>)
 800429c:	4620      	mov	r0, r4
 800429e:	f005 f904 	bl	80094aa <strspn>
 80042a2:	1825      	adds	r5, r4, r0
 80042a4:	4682      	mov	sl, r0
        lfs_size_t namelen = strcspn(name, "/");
 80042a6:	4941      	ldr	r1, [pc, #260]	; (80043ac <lfs_dir_find+0x13c>)
 80042a8:	4628      	mov	r0, r5
 80042aa:	f005 f8ec 	bl	8009486 <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80042ae:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
 80042b0:	4607      	mov	r7, r0
 80042b2:	eb05 0900 	add.w	r9, r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80042b6:	d105      	bne.n	80042c4 <lfs_dir_find+0x54>
 80042b8:	f814 200a 	ldrb.w	r2, [r4, sl]
 80042bc:	2a2e      	cmp	r2, #46	; 0x2e
 80042be:	d10a      	bne.n	80042d6 <lfs_dir_find+0x66>
            name += namelen;
 80042c0:	464c      	mov	r4, r9
            goto nextname;
 80042c2:	e7ea      	b.n	800429a <lfs_dir_find+0x2a>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80042c4:	2802      	cmp	r0, #2
 80042c6:	d106      	bne.n	80042d6 <lfs_dir_find+0x66>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80042c8:	4602      	mov	r2, r0
 80042ca:	4939      	ldr	r1, [pc, #228]	; (80043b0 <lfs_dir_find+0x140>)
 80042cc:	4628      	mov	r0, r5
 80042ce:	f004 fd8f 	bl	8008df0 <memcmp>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d0f4      	beq.n	80042c0 <lfs_dir_find+0x50>
        const char *suffix = name + namelen;
 80042d6:	464c      	mov	r4, r9
        int depth = 1;
 80042d8:	f04f 0a01 	mov.w	sl, #1
            suffix += strspn(suffix, "/");
 80042dc:	4933      	ldr	r1, [pc, #204]	; (80043ac <lfs_dir_find+0x13c>)
 80042de:	4648      	mov	r0, r9
 80042e0:	f005 f8e3 	bl	80094aa <strspn>
 80042e4:	4481      	add	r9, r0
            sufflen = strcspn(suffix, "/");
 80042e6:	4931      	ldr	r1, [pc, #196]	; (80043ac <lfs_dir_find+0x13c>)
 80042e8:	4648      	mov	r0, r9
 80042ea:	f005 f8cc 	bl	8009486 <strcspn>
            if (sufflen == 0) {
 80042ee:	4603      	mov	r3, r0
 80042f0:	b198      	cbz	r0, 800431a <lfs_dir_find+0xaa>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80042f2:	2802      	cmp	r0, #2
 80042f4:	d10d      	bne.n	8004312 <lfs_dir_find+0xa2>
 80042f6:	4602      	mov	r2, r0
 80042f8:	9007      	str	r0, [sp, #28]
 80042fa:	492d      	ldr	r1, [pc, #180]	; (80043b0 <lfs_dir_find+0x140>)
 80042fc:	4648      	mov	r0, r9
 80042fe:	f004 fd77 	bl	8008df0 <memcmp>
 8004302:	9b07      	ldr	r3, [sp, #28]
 8004304:	b928      	cbnz	r0, 8004312 <lfs_dir_find+0xa2>
                if (depth == 0) {
 8004306:	f1ba 0a01 	subs.w	sl, sl, #1
 800430a:	d104      	bne.n	8004316 <lfs_dir_find+0xa6>
                    name = suffix + sufflen;
 800430c:	f109 0402 	add.w	r4, r9, #2
                    goto nextname;
 8004310:	e7c3      	b.n	800429a <lfs_dir_find+0x2a>
                depth += 1;
 8004312:	f10a 0a01 	add.w	sl, sl, #1
            suffix += sufflen;
 8004316:	4499      	add	r9, r3
            suffix += strspn(suffix, "/");
 8004318:	e7e0      	b.n	80042dc <lfs_dir_find+0x6c>
        if (name[0] == '\0') {
 800431a:	782a      	ldrb	r2, [r5, #0]
 800431c:	2a00      	cmp	r2, #0
 800431e:	d03e      	beq.n	800439e <lfs_dir_find+0x12e>
        *path = name;
 8004320:	9b06      	ldr	r3, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 8004322:	ea4f 521b 	mov.w	r2, fp, lsr #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004326:	2a02      	cmp	r2, #2
        *path = name;
 8004328:	601d      	str	r5, [r3, #0]
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800432a:	d13c      	bne.n	80043a6 <lfs_dir_find+0x136>
    return (tag & 0x000ffc00) >> 10;
 800432c:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 8004330:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004334:	4293      	cmp	r3, r2
 8004336:	f106 0918 	add.w	r9, r6, #24
 800433a:	d123      	bne.n	8004384 <lfs_dir_find+0x114>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800433c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004340:	212f      	movs	r1, #47	; 0x2f
 8004342:	4628      	mov	r0, r5
 8004344:	f005 f88a 	bl	800945c <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004348:	9b05      	ldr	r3, [sp, #20]
 800434a:	4a1a      	ldr	r2, [pc, #104]	; (80043b4 <lfs_dir_find+0x144>)
 800434c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004350:	2800      	cmp	r0, #0
 8004352:	bf18      	it	ne
 8004354:	2300      	movne	r3, #0
 8004356:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800435a:	9700      	str	r7, [sp, #0]
 800435c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004360:	464a      	mov	r2, r9
 8004362:	4631      	mov	r1, r6
 8004364:	4640      	mov	r0, r8
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004366:	e9cd 8509 	strd	r8, r5, [sp, #36]	; 0x24
 800436a:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800436c:	f7ff fd0e 	bl	8003d8c <lfs_dir_fetchmatch>
            if (tag < 0) {
 8004370:	f1b0 0b00 	subs.w	fp, r0, #0
 8004374:	db13      	blt.n	800439e <lfs_dir_find+0x12e>
            if (tag) {
 8004376:	d190      	bne.n	800429a <lfs_dir_find+0x2a>
            if (!dir->split) {
 8004378:	7df3      	ldrb	r3, [r6, #23]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e0      	bne.n	8004340 <lfs_dir_find+0xd0>
                return LFS_ERR_NOENT;
 800437e:	f06f 0b01 	mvn.w	fp, #1
 8004382:	e00c      	b.n	800439e <lfs_dir_find+0x12e>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004384:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <lfs_dir_find+0x148>)
 8004386:	f8cd 9000 	str.w	r9, [sp]
 800438a:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800438e:	4631      	mov	r1, r6
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <lfs_dir_find+0x14c>)
 8004392:	4640      	mov	r0, r8
 8004394:	f7ff fcb4 	bl	8003d00 <lfs_dir_get>
            if (res < 0) {
 8004398:	f1b0 0b00 	subs.w	fp, r0, #0
 800439c:	dace      	bge.n	800433c <lfs_dir_find+0xcc>
}
 800439e:	4658      	mov	r0, fp
 80043a0:	b00d      	add	sp, #52	; 0x34
 80043a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
 80043a6:	f06f 0b13 	mvn.w	fp, #19
 80043aa:	e7f8      	b.n	800439e <lfs_dir_find+0x12e>
 80043ac:	0800ae18 	.word	0x0800ae18
 80043b0:	0800a9bc 	.word	0x0800a9bc
 80043b4:	080049f3 	.word	0x080049f3
 80043b8:	20000008 	.word	0x20000008
 80043bc:	700ffc00 	.word	0x700ffc00
 80043c0:	002ffc00 	.word	0x002ffc00

080043c4 <lfs_ctz_traverse.part.25>:
static int lfs_ctz_traverse(lfs_t *lfs,
 80043c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	b088      	sub	sp, #32
 80043ca:	461e      	mov	r6, r3
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80043cc:	e9dd 3810 	ldrd	r3, r8, [sp, #64]	; 0x40
static int lfs_ctz_traverse(lfs_t *lfs,
 80043d0:	4689      	mov	r9, r1
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80043d2:	4607      	mov	r7, r0
 80043d4:	a908      	add	r1, sp, #32
 80043d6:	3b01      	subs	r3, #1
 80043d8:	f841 3d0c 	str.w	r3, [r1, #-12]!
 80043dc:	f857 0f68 	ldr.w	r0, [r7, #104]!
static int lfs_ctz_traverse(lfs_t *lfs,
 80043e0:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80043e2:	f7ff fb1f 	bl	8003a24 <lfs_ctz_index.isra.22>
 80043e6:	4605      	mov	r5, r0
        int err = cb(data, head);
 80043e8:	4631      	mov	r1, r6
 80043ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80043ec:	47c0      	blx	r8
        if (err) {
 80043ee:	4602      	mov	r2, r0
 80043f0:	bb10      	cbnz	r0, 8004438 <lfs_ctz_traverse.part.25+0x74>
        if (index == 0) {
 80043f2:	b30d      	cbz	r5, 8004438 <lfs_ctz_traverse.part.25+0x74>
        int count = 2 - (index & 1);
 80043f4:	f005 0401 	and.w	r4, r5, #1
 80043f8:	f1c4 0402 	rsb	r4, r4, #2
                pcache, rcache, count*sizeof(head),
 80043fc:	00a3      	lsls	r3, r4, #2
        err = lfs_bd_read(lfs,
 80043fe:	a906      	add	r1, sp, #24
 8004400:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004404:	4652      	mov	r2, sl
 8004406:	9303      	str	r3, [sp, #12]
 8004408:	9600      	str	r6, [sp, #0]
 800440a:	4649      	mov	r1, r9
 800440c:	4638      	mov	r0, r7
 800440e:	f7ff fb23 	bl	8003a58 <lfs_bd_read.isra.23>
        if (err) {
 8004412:	4602      	mov	r2, r0
 8004414:	b980      	cbnz	r0, 8004438 <lfs_ctz_traverse.part.25+0x74>
        for (int i = 0; i < count-1; i++) {
 8004416:	1e66      	subs	r6, r4, #1
 8004418:	4296      	cmp	r6, r2
 800441a:	dc06      	bgt.n	800442a <lfs_ctz_traverse.part.25+0x66>
        head = heads[count-1];
 800441c:	ab08      	add	r3, sp, #32
 800441e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        index -= count;
 8004422:	1b2d      	subs	r5, r5, r4
        head = heads[count-1];
 8004424:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8004428:	e7de      	b.n	80043e8 <lfs_ctz_traverse.part.25+0x24>
            err = cb(data, heads[i]);
 800442a:	9906      	ldr	r1, [sp, #24]
 800442c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800442e:	47c0      	blx	r8
        for (int i = 0; i < count-1; i++) {
 8004430:	2201      	movs	r2, #1
            if (err) {
 8004432:	2800      	cmp	r0, #0
 8004434:	d0f0      	beq.n	8004418 <lfs_ctz_traverse.part.25+0x54>
            err = cb(data, heads[i]);
 8004436:	4602      	mov	r2, r0
}
 8004438:	4610      	mov	r0, r2
 800443a:	b008      	add	sp, #32
 800443c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004440 <lfs_dir_getinfo.part.34>:
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	461c      	mov	r4, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8004444:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
 8004446:	b085      	sub	sp, #20
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8004448:	0296      	lsls	r6, r2, #10
 800444a:	3301      	adds	r3, #1
 800444c:	f104 0208 	add.w	r2, r4, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8004450:	9200      	str	r2, [sp, #0]
 8004452:	4333      	orrs	r3, r6
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <lfs_dir_getinfo.part.34+0x64>)
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
 8004456:	4605      	mov	r5, r0
 8004458:	460f      	mov	r7, r1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800445a:	f7ff fc51 	bl	8003d00 <lfs_dir_get>
    if (tag < 0) {
 800445e:	2800      	cmp	r0, #0
 8004460:	db16      	blt.n	8004490 <lfs_dir_getinfo.part.34+0x50>
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004462:	ab02      	add	r3, sp, #8
    return (tag & 0x7ff00000) >> 20;
 8004464:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
    info->type = lfs_tag_type3(tag);
 800446c:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800446e:	f043 0308 	orr.w	r3, r3, #8
 8004472:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <lfs_dir_getinfo.part.34+0x68>)
 8004474:	4639      	mov	r1, r7
 8004476:	4628      	mov	r0, r5
 8004478:	f7ff fc42 	bl	8003d00 <lfs_dir_get>
    if (tag < 0) {
 800447c:	2800      	cmp	r0, #0
 800447e:	db07      	blt.n	8004490 <lfs_dir_getinfo.part.34+0x50>
    return (tag & 0x7ff00000) >> 20;
 8004480:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8004482:	f240 2202 	movw	r2, #514	; 0x202
 8004486:	4293      	cmp	r3, r2
 8004488:	d104      	bne.n	8004494 <lfs_dir_getinfo.part.34+0x54>
        info->size = ctz.size;
 800448a:	9b03      	ldr	r3, [sp, #12]
 800448c:	6063      	str	r3, [r4, #4]
    return 0;
 800448e:	2000      	movs	r0, #0
}
 8004490:	b005      	add	sp, #20
 8004492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004494:	f240 2201 	movw	r2, #513	; 0x201
 8004498:	4293      	cmp	r3, r2
    return tag & 0x000003ff;
 800449a:	bf04      	itt	eq
 800449c:	f3c0 0009 	ubfxeq	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 80044a0:	6060      	streq	r0, [r4, #4]
 80044a2:	e7f4      	b.n	800448e <lfs_dir_getinfo.part.34+0x4e>
 80044a4:	780ffc00 	.word	0x780ffc00
 80044a8:	700ffc00 	.word	0x700ffc00

080044ac <lfs_ctz_find.constprop.35>:
static int lfs_ctz_find(lfs_t *lfs,
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	b089      	sub	sp, #36	; 0x24
 80044b2:	4605      	mov	r5, r0
 80044b4:	4689      	mov	r9, r1
 80044b6:	9205      	str	r2, [sp, #20]
 80044b8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (size == 0) {
 80044ba:	b943      	cbnz	r3, 80044ce <lfs_ctz_find.constprop.35+0x22>
        *block = LFS_BLOCK_NULL;
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	603a      	str	r2, [r7, #0]
    *off = pos;
 80044c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    return 0;
 80044c4:	2000      	movs	r0, #0
    *off = pos;
 80044c6:	6013      	str	r3, [r2, #0]
}
 80044c8:	b009      	add	sp, #36	; 0x24
 80044ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80044ce:	a908      	add	r1, sp, #32
 80044d0:	3b01      	subs	r3, #1
 80044d2:	f841 3d04 	str.w	r3, [r1, #-4]!
 80044d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80044d8:	f7ff faa4 	bl	8003a24 <lfs_ctz_index.isra.22>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044dc:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80044de:	4606      	mov	r6, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044e0:	f855 0f68 	ldr.w	r0, [r5, #104]!
 80044e4:	f7ff fa9e 	bl	8003a24 <lfs_ctz_index.isra.22>
        int err = lfs_bd_read(lfs,
 80044e8:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044ec:	4680      	mov	r8, r0
        int err = lfs_bd_read(lfs,
 80044ee:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
 80044f2:	45b0      	cmp	r8, r6
 80044f4:	9a05      	ldr	r2, [sp, #20]
 80044f6:	d302      	bcc.n	80044fe <lfs_ctz_find.constprop.35+0x52>
    *block = head;
 80044f8:	603a      	str	r2, [r7, #0]
    *off = pos;
 80044fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044fc:	e7e1      	b.n	80044c2 <lfs_ctz_find.constprop.35+0x16>
                lfs_npw2(current-target+1) - 1,
 80044fe:	eba6 0408 	sub.w	r4, r6, r8
    return (uint32_t)(32 - __builtin_clz(a-1));
 8004502:	fab4 f484 	clz	r4, r4
    return (uint32_t)__builtin_ctz(a);
 8004506:	fa96 f3a6 	rbit	r3, r6
 800450a:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
 800450e:	f1c4 041f 	rsb	r4, r4, #31
    return (a < b) ? a : b;
 8004512:	429c      	cmp	r4, r3
 8004514:	bf28      	it	cs
 8004516:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 8004518:	00a3      	lsls	r3, r4, #2
 800451a:	e9cd 2300 	strd	r2, r3, [sp]
 800451e:	e9cd ba02 	strd	fp, sl, [sp, #8]
 8004522:	2304      	movs	r3, #4
 8004524:	464a      	mov	r2, r9
 8004526:	2100      	movs	r1, #0
 8004528:	4628      	mov	r0, r5
 800452a:	f7ff fa95 	bl	8003a58 <lfs_bd_read.isra.23>
        if (err) {
 800452e:	2800      	cmp	r0, #0
 8004530:	d1ca      	bne.n	80044c8 <lfs_ctz_find.constprop.35+0x1c>
        current -= 1 << skip;
 8004532:	2301      	movs	r3, #1
 8004534:	fa03 f404 	lsl.w	r4, r3, r4
 8004538:	1b36      	subs	r6, r6, r4
 800453a:	e7da      	b.n	80044f2 <lfs_ctz_find.constprop.35+0x46>

0800453c <lfs_dir_getread.part.26.constprop.37>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	b087      	sub	sp, #28
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004542:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80045e8 <lfs_dir_getread.part.26.constprop.37+0xac>
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 8004546:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004548:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800454a:	4607      	mov	r7, r0
 800454c:	4688      	mov	r8, r1
 800454e:	4615      	mov	r5, r2
        rcache->block = LFS_BLOCK_INLINE;
 8004550:	f06f 0901 	mvn.w	r9, #1
    return lfs_aligndown(a + alignment-1, alignment);
 8004554:	f103 3aff 	add.w	sl, r3, #4294967295
    while (size > 0) {
 8004558:	b90e      	cbnz	r6, 800455e <lfs_dir_getread.part.26.constprop.37+0x22>
    return 0;
 800455a:	4630      	mov	r0, r6
 800455c:	e041      	b.n	80045e2 <lfs_dir_getread.part.26.constprop.37+0xa6>
        if (rcache->block == LFS_BLOCK_INLINE &&
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	68e8      	ldr	r0, [r5, #12]
 8004562:	3302      	adds	r3, #2
 8004564:	d118      	bne.n	8004598 <lfs_dir_getread.part.26.constprop.37+0x5c>
                off < rcache->off + rcache->size) {
 8004566:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 800456a:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 800456c:	429c      	cmp	r4, r3
 800456e:	d213      	bcs.n	8004598 <lfs_dir_getread.part.26.constprop.37+0x5c>
            if (off >= rcache->off) {
 8004570:	428c      	cmp	r4, r1
 8004572:	d311      	bcc.n	8004598 <lfs_dir_getread.part.26.constprop.37+0x5c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004574:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 8004576:	42b3      	cmp	r3, r6
 8004578:	bf28      	it	cs
 800457a:	4633      	movcs	r3, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800457c:	1a61      	subs	r1, r4, r1
 800457e:	461a      	mov	r2, r3
 8004580:	4401      	add	r1, r0
 8004582:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	f004 fc42 	bl	8008e0e <memcpy>
                data += diff;
 800458a:	9b05      	ldr	r3, [sp, #20]
 800458c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800458e:	441a      	add	r2, r3
 8004590:	9212      	str	r2, [sp, #72]	; 0x48
                off += diff;
 8004592:	441c      	add	r4, r3
                size -= diff;
 8004594:	1af6      	subs	r6, r6, r3
 8004596:	e7df      	b.n	8004558 <lfs_dir_getread.part.26.constprop.37+0x1c>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004598:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
        rcache->block = LFS_BLOCK_INLINE;
 800459c:	f8c5 9000 	str.w	r9, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80045a0:	f8dc 1014 	ldr.w	r1, [ip, #20]
    return a - (a % alignment);
 80045a4:	fbb4 f2f1 	udiv	r2, r4, r1
    return lfs_aligndown(a + alignment-1, alignment);
 80045a8:	eb0a 0301 	add.w	r3, sl, r1
 80045ac:	4423      	add	r3, r4
    return a - (a % alignment);
 80045ae:	fb01 4212 	mls	r2, r1, r2, r4
 80045b2:	fbb3 fef1 	udiv	lr, r3, r1
 80045b6:	fb01 311e 	mls	r1, r1, lr, r3
 80045ba:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 80045bc:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 80045c0:	428b      	cmp	r3, r1
 80045c2:	bf28      	it	cs
 80045c4:	460b      	movcs	r3, r1
    return a - (a % alignment);
 80045c6:	1aa2      	subs	r2, r4, r2
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80045c8:	e9cd 0301 	strd	r0, r3, [sp, #4]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80045cc:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80045ce:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80045d0:	9200      	str	r2, [sp, #0]
 80045d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045d4:	465a      	mov	r2, fp
 80045d6:	4641      	mov	r1, r8
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff faf9 	bl	8003bd0 <lfs_dir_getslice>
        if (err < 0) {
 80045de:	2800      	cmp	r0, #0
 80045e0:	daba      	bge.n	8004558 <lfs_dir_getread.part.26.constprop.37+0x1c>
}
 80045e2:	b007      	add	sp, #28
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	fff7fc00 	.word	0xfff7fc00

080045ec <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 80045ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f0:	4691      	mov	r9, r2
    if (file->pos >= file->ctz.size) {
 80045f2:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80045f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80045f6:	4296      	cmp	r6, r2
        void *buffer, lfs_size_t size) {
 80045f8:	b085      	sub	sp, #20
 80045fa:	4607      	mov	r7, r0
 80045fc:	460c      	mov	r4, r1
    if (file->pos >= file->ctz.size) {
 80045fe:	d264      	bcs.n	80046ca <lfs_file_flushedread+0xde>
    size = lfs_min(size, file->ctz.size - file->pos);
 8004600:	1b96      	subs	r6, r2, r6
    return (a < b) ? a : b;
 8004602:	429e      	cmp	r6, r3
 8004604:	bf28      	it	cs
 8004606:	461e      	movcs	r6, r3
            int err = lfs_dir_getread(lfs, &file->m,
 8004608:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80046d4 <lfs_file_flushedread+0xe8>
    nsize = size;
 800460c:	46b0      	mov	r8, r6
 800460e:	f101 0a40 	add.w	sl, r1, #64	; 0x40
    while (nsize > 0) {
 8004612:	f1b8 0f00 	cmp.w	r8, #0
 8004616:	d101      	bne.n	800461c <lfs_file_flushedread+0x30>
    return size;
 8004618:	4630      	mov	r0, r6
 800461a:	e018      	b.n	800464e <lfs_file_flushedread+0x62>
        if (!(file->flags & LFS_F_READING) ||
 800461c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800461e:	0351      	lsls	r1, r2, #13
 8004620:	d504      	bpl.n	800462c <lfs_file_flushedread+0x40>
                file->off == lfs->cfg->block_size) {
 8004622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
 8004624:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4299      	cmp	r1, r3
 800462a:	d11b      	bne.n	8004664 <lfs_file_flushedread+0x78>
            if (!(file->flags & LFS_F_INLINE)) {
 800462c:	02d2      	lsls	r2, r2, #11
 800462e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004630:	d410      	bmi.n	8004654 <lfs_file_flushedread+0x68>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8004632:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8004636:	9202      	str	r2, [sp, #8]
 8004638:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800463c:	e9cd 3200 	strd	r3, r2, [sp]
 8004640:	4651      	mov	r1, sl
 8004642:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004646:	4638      	mov	r0, r7
 8004648:	f7ff ff30 	bl	80044ac <lfs_ctz_find.constprop.35>
                if (err) {
 800464c:	b130      	cbz	r0, 800465c <lfs_file_flushedread+0x70>
}
 800464e:	b005      	add	sp, #20
 8004650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                file->block = LFS_BLOCK_INLINE;
 8004654:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
 8004658:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            file->flags |= LFS_F_READING;
 800465c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800465e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004662:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8004664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004666:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004668:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
 800466a:	6b21      	ldr	r1, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800466c:	1a9d      	subs	r5, r3, r2
 800466e:	4545      	cmp	r5, r8
 8004670:	bf28      	it	cs
 8004672:	4645      	movcs	r5, r8
        if (file->flags & LFS_F_INLINE) {
 8004674:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8004678:	d01c      	beq.n	80046b4 <lfs_file_flushedread+0xc8>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800467a:	88a0      	ldrh	r0, [r4, #4]
    if (off+size > lfs->cfg->block_size) {
 800467c:	eb02 0c05 	add.w	ip, r2, r5
 8004680:	4563      	cmp	r3, ip
            int err = lfs_dir_getread(lfs, &file->m,
 8004682:	f104 0108 	add.w	r1, r4, #8
 8004686:	ea4b 2080 	orr.w	r0, fp, r0, lsl #10
    if (off+size > lfs->cfg->block_size) {
 800468a:	d320      	bcc.n	80046ce <lfs_file_flushedread+0xe2>
 800468c:	e9cd 0200 	strd	r0, r2, [sp]
 8004690:	e9cd 9502 	strd	r9, r5, [sp, #8]
 8004694:	4652      	mov	r2, sl
 8004696:	4638      	mov	r0, r7
 8004698:	f7ff ff50 	bl	800453c <lfs_dir_getread.part.26.constprop.37>
            if (err) {
 800469c:	2800      	cmp	r0, #0
 800469e:	d1d6      	bne.n	800464e <lfs_file_flushedread+0x62>
        file->pos += diff;
 80046a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046a2:	442b      	add	r3, r5
 80046a4:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 80046a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046a8:	442b      	add	r3, r5
 80046aa:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 80046ac:	44a9      	add	r9, r5
        nsize -= diff;
 80046ae:	eba8 0805 	sub.w	r8, r8, r5
 80046b2:	e7ae      	b.n	8004612 <lfs_file_flushedread+0x26>
            int err = lfs_bd_read(lfs,
 80046b4:	9201      	str	r2, [sp, #4]
 80046b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046b8:	9200      	str	r2, [sp, #0]
 80046ba:	e9cd 9502 	strd	r9, r5, [sp, #8]
 80046be:	4652      	mov	r2, sl
 80046c0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80046c4:	f7ff f9c8 	bl	8003a58 <lfs_bd_read.isra.23>
 80046c8:	e7e8      	b.n	800469c <lfs_file_flushedread+0xb0>
        return 0;
 80046ca:	2000      	movs	r0, #0
 80046cc:	e7bf      	b.n	800464e <lfs_file_flushedread+0x62>
        return LFS_ERR_CORRUPT;
 80046ce:	f06f 0053 	mvn.w	r0, #83	; 0x53
 80046d2:	e7bc      	b.n	800464e <lfs_file_flushedread+0x62>
 80046d4:	20100000 	.word	0x20100000

080046d8 <lfs_dir_traverse.constprop.39>:
static int lfs_dir_traverse(lfs_t *lfs,
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	b0ab      	sub	sp, #172	; 0xac
 80046de:	469a      	mov	sl, r3
 80046e0:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 80046e4:	9305      	str	r3, [sp, #20]
    unsigned sp = 0;
 80046e6:	2600      	movs	r6, #0
static int lfs_dir_traverse(lfs_t *lfs,
 80046e8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80046ec:	f8bd 90dc 	ldrh.w	r9, [sp, #220]	; 0xdc
 80046f0:	9006      	str	r0, [sp, #24]
 80046f2:	468b      	mov	fp, r1
 80046f4:	9304      	str	r3, [sp, #16]
    unsigned sp = 0;
 80046f6:	4637      	mov	r7, r6
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80046f8:	4650      	mov	r0, sl
 80046fa:	f7fe ffaa 	bl	8003652 <lfs_tag_dsize>
 80046fe:	f8db 300c 	ldr.w	r3, [fp, #12]
 8004702:	eb00 0802 	add.w	r8, r0, r2
 8004706:	4598      	cmp	r8, r3
 8004708:	d238      	bcs.n	800477c <lfs_dir_traverse.constprop.39+0xa4>
                int err = lfs_bd_read(lfs,
 800470a:	aa09      	add	r2, sp, #36	; 0x24
 800470c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8004710:	2304      	movs	r3, #4
 8004712:	9303      	str	r3, [sp, #12]
 8004714:	f8db 2000 	ldr.w	r2, [fp]
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	9a06      	ldr	r2, [sp, #24]
 800471c:	4610      	mov	r0, r2
 800471e:	2100      	movs	r1, #0
 8004720:	3068      	adds	r0, #104	; 0x68
 8004722:	f7ff f999 	bl	8003a58 <lfs_bd_read.isra.23>
                if (err) {
 8004726:	2800      	cmp	r0, #0
 8004728:	f040 8122 	bne.w	8004970 <lfs_dir_traverse.constprop.39+0x298>
    return __builtin_bswap32(a);
 800472c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800472e:	ba1b      	rev	r3, r3
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8004730:	ea8a 0a03 	eor.w	sl, sl, r3
                disk.block = dir->pair[0];
 8004734:	f8db 3000 	ldr.w	r3, [fp]
 8004738:	930a      	str	r3, [sp, #40]	; 0x28
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800473a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
                disk.off = off+sizeof(lfs_tag_t);
 800473e:	f108 0304 	add.w	r3, r8, #4
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8004742:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                disk.off = off+sizeof(lfs_tag_t);
 8004746:	930b      	str	r3, [sp, #44]	; 0x2c
                buffer = &disk;
 8004748:	ad0a      	add	r5, sp, #40	; 0x28
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800474a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800474c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800474e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004752:	0d1b      	lsrs	r3, r3, #20
 8004754:	ea81 0407 	eor.w	r4, r1, r7
 8004758:	051b      	lsls	r3, r3, #20
 800475a:	401c      	ands	r4, r3
 800475c:	d151      	bne.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
            if (lfs_tag_id(tmask) != 0) {
 800475e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8004760:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a8 	beq.w	80048ba <lfs_dir_traverse.constprop.39+0x1e2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800476a:	2e02      	cmp	r6, #2
 800476c:	d916      	bls.n	800479c <lfs_dir_traverse.constprop.39+0xc4>
 800476e:	4b82      	ldr	r3, [pc, #520]	; (8004978 <lfs_dir_traverse.constprop.39+0x2a0>)
 8004770:	4a82      	ldr	r2, [pc, #520]	; (800497c <lfs_dir_traverse.constprop.39+0x2a4>)
 8004772:	4883      	ldr	r0, [pc, #524]	; (8004980 <lfs_dir_traverse.constprop.39+0x2a8>)
 8004774:	f240 314d 	movw	r1, #845	; 0x34d
 8004778:	f004 fabc 	bl	8008cf4 <__assert_func>
            } else if (attrcount > 0) {
 800477c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800477e:	2b00      	cmp	r3, #0
 8004780:	f340 80f4 	ble.w	800496c <lfs_dir_traverse.constprop.39+0x294>
                tag = attrs[0].tag;
 8004784:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	9309      	str	r3, [sp, #36]	; 0x24
                buffer = attrs[0].buffer;
 800478a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800478c:	685d      	ldr	r5, [r3, #4]
                attrs += 1;
 800478e:	3308      	adds	r3, #8
 8004790:	9334      	str	r3, [sp, #208]	; 0xd0
                attrcount -= 1;
 8004792:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8004794:	3b01      	subs	r3, #1
 8004796:	9335      	str	r3, [sp, #212]	; 0xd4
 8004798:	4690      	mov	r8, r2
 800479a:	e7d6      	b.n	800474a <lfs_dir_traverse.constprop.39+0x72>
                stack[sp] = (struct lfs_dir_traverse){
 800479c:	223c      	movs	r2, #60	; 0x3c
 800479e:	4372      	muls	r2, r6
 80047a0:	ab2a      	add	r3, sp, #168	; 0xa8
 80047a2:	4413      	add	r3, r2
 80047a4:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80047a6:	f843 0c6c 	str.w	r0, [r3, #-108]
 80047aa:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80047ac:	f843 0c68 	str.w	r0, [r3, #-104]
 80047b0:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80047b2:	f823 9c5c 	strh.w	r9, [r3, #-92]
 80047b6:	e943 0719 	strd	r0, r7, [r3, #-100]	; 0x64
 80047ba:	9805      	ldr	r0, [sp, #20]
 80047bc:	f823 0c5a 	strh.w	r0, [r3, #-90]
 80047c0:	9804      	ldr	r0, [sp, #16]
 80047c2:	f823 0c58 	strh.w	r0, [r3, #-88]
 80047c6:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80047c8:	f843 0c54 	str.w	r0, [r3, #-84]
 80047cc:	983b      	ldr	r0, [sp, #236]	; 0xec
 80047ce:	f843 ac70 	str.w	sl, [r3, #-112]
 80047d2:	e943 0114 	strd	r0, r1, [r3, #-80]	; 0x50
 80047d6:	a90a      	add	r1, sp, #40	; 0x28
 80047d8:	c903      	ldmia	r1, {r0, r1}
 80047da:	f843 5c48 	str.w	r5, [r3, #-72]
 80047de:	e943 b81e 	strd	fp, r8, [r3, #-120]	; 0x78
 80047e2:	3b44      	subs	r3, #68	; 0x44
 80047e4:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 80047e8:	ab2a      	add	r3, sp, #168	; 0xa8
 80047ea:	441a      	add	r2, r3
 80047ec:	f1a2 034c 	sub.w	r3, r2, #76	; 0x4c
                end = 0;
 80047f0:	e9cd 4404 	strd	r4, r4, [sp, #16]
                data = &stack[sp-1].tag;
 80047f4:	933b      	str	r3, [sp, #236]	; 0xec
                cb = lfs_dir_traverse_filter;
 80047f6:	4b63      	ldr	r3, [pc, #396]	; (8004984 <lfs_dir_traverse.constprop.39+0x2ac>)
                tmask = 0;
 80047f8:	9436      	str	r4, [sp, #216]	; 0xd8
                sp += 1;
 80047fa:	3601      	adds	r6, #1
                ttag = 0;
 80047fc:	4627      	mov	r7, r4
                cb = lfs_dir_traverse_filter;
 80047fe:	933a      	str	r3, [sp, #232]	; 0xe8
                begin = 0;
 8004800:	46a1      	mov	r9, r4
            off = 0;
 8004802:	4642      	mov	r2, r8
 8004804:	e778      	b.n	80046f8 <lfs_dir_traverse.constprop.39+0x20>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8004806:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800480a:	d11d      	bne.n	8004848 <lfs_dir_traverse.constprop.39+0x170>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800480c:	2400      	movs	r4, #0
 800480e:	9909      	ldr	r1, [sp, #36]	; 0x24
    return tag & 0x000003ff;
 8004810:	f3c1 0309 	ubfx	r3, r1, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004814:	429c      	cmp	r4, r3
 8004816:	d2f4      	bcs.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004818:	9b04      	ldr	r3, [sp, #16]
 800481a:	686a      	ldr	r2, [r5, #4]
 800481c:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8004820:	4419      	add	r1, r3
 8004822:	68ab      	ldr	r3, [r5, #8]
 8004824:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
 8004828:	782b      	ldrb	r3, [r5, #0]
 800482a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800482e:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
 8004832:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
 8004836:	4798      	blx	r3
                if (res < 0) {
 8004838:	2800      	cmp	r0, #0
 800483a:	f2c0 8099 	blt.w	8004970 <lfs_dir_traverse.constprop.39+0x298>
 800483e:	f105 050c 	add.w	r5, r5, #12
                if (res) {
 8004842:	d1de      	bne.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004844:	3401      	adds	r4, #1
 8004846:	e7e2      	b.n	800480e <lfs_dir_traverse.constprop.39+0x136>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8004848:	9904      	ldr	r1, [sp, #16]
 800484a:	462a      	mov	r2, r5
 800484c:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 8004850:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
 8004854:	4798      	blx	r3
            if (res < 0) {
 8004856:	2800      	cmp	r0, #0
 8004858:	f2c0 808a 	blt.w	8004970 <lfs_dir_traverse.constprop.39+0x298>
            if (res) {
 800485c:	d0d1      	beq.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
    if (sp > 0) {
 800485e:	2e00      	cmp	r6, #0
 8004860:	f000 8086 	beq.w	8004970 <lfs_dir_traverse.constprop.39+0x298>
        dir         = stack[sp-1].dir;
 8004864:	aa2a      	add	r2, sp, #168	; 0xa8
 8004866:	3e01      	subs	r6, #1
 8004868:	233c      	movs	r3, #60	; 0x3c
 800486a:	fb03 2306 	mla	r3, r3, r6, r2
        attrs       = stack[sp-1].attrs;
 800486e:	e953 a21c 	ldrd	sl, r2, [r3, #-112]	; 0x70
 8004872:	9234      	str	r2, [sp, #208]	; 0xd0
        attrcount   = stack[sp-1].attrcount;
 8004874:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8004878:	9235      	str	r2, [sp, #212]	; 0xd4
        tmask       = stack[sp-1].tmask;
 800487a:	f853 2c64 	ldr.w	r2, [r3, #-100]
 800487e:	9236      	str	r2, [sp, #216]	; 0xd8
        end         = stack[sp-1].end;
 8004880:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 8004884:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 8004886:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 800488a:	9204      	str	r2, [sp, #16]
        cb          = stack[sp-1].cb;
 800488c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004890:	923a      	str	r2, [sp, #232]	; 0xe8
        data        = stack[sp-1].data;
 8004892:	f853 2c50 	ldr.w	r2, [r3, #-80]
        ttag        = stack[sp-1].ttag;
 8004896:	f853 7c60 	ldr.w	r7, [r3, #-96]
        begin       = stack[sp-1].begin;
 800489a:	f833 9c5c 	ldrh.w	r9, [r3, #-92]
        buffer      = stack[sp-1].buffer;
 800489e:	f853 5c48 	ldr.w	r5, [r3, #-72]
        data        = stack[sp-1].data;
 80048a2:	923b      	str	r2, [sp, #236]	; 0xec
        off         = stack[sp-1].off;
 80048a4:	e953 b81e 	ldrd	fp, r8, [r3, #-120]	; 0x78
        tag         = stack[sp-1].tag;
 80048a8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80048ac:	9209      	str	r2, [sp, #36]	; 0x24
        disk        = stack[sp-1].disk;
 80048ae:	3b44      	subs	r3, #68	; 0x44
 80048b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048b4:	aa0a      	add	r2, sp, #40	; 0x28
 80048b6:	e882 0003 	stmia.w	r2, {r0, r1}
        if (lfs_tag_id(tmask) != 0 &&
 80048ba:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80048bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048be:	f3c2 2289 	ubfx	r2, r2, #10, #10
 80048c2:	b132      	cbz	r2, 80048d2 <lfs_dir_traverse.constprop.39+0x1fa>
    return (tag & 0x000ffc00) >> 10;
 80048c4:	f3c3 2289 	ubfx	r2, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 80048c8:	454a      	cmp	r2, r9
 80048ca:	d39a      	bcc.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80048cc:	9905      	ldr	r1, [sp, #20]
 80048ce:	428a      	cmp	r2, r1
 80048d0:	d297      	bcs.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
    return (tag & 0x7ff00000) >> 20;
 80048d2:	f3c3 520a 	ubfx	r2, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d093      	beq.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80048da:	f240 1101 	movw	r1, #257	; 0x101
 80048de:	428a      	cmp	r2, r1
 80048e0:	d191      	bne.n	8004806 <lfs_dir_traverse.constprop.39+0x12e>
 80048e2:	9307      	str	r3, [sp, #28]
            if (cb == lfs_dir_traverse_filter) {
 80048e4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b26      	ldr	r3, [pc, #152]	; (8004984 <lfs_dir_traverse.constprop.39+0x2ac>)
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d089      	beq.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
            stack[sp] = (struct lfs_dir_traverse){
 80048ee:	223c      	movs	r2, #60	; 0x3c
 80048f0:	ab2a      	add	r3, sp, #168	; 0xa8
 80048f2:	fb02 3406 	mla	r4, r2, r6, r3
 80048f6:	2100      	movs	r1, #0
 80048f8:	f1a4 0078 	sub.w	r0, r4, #120	; 0x78
 80048fc:	f004 fa92 	bl	8008e24 <memset>
 8004900:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8004902:	f844 3c6c 	str.w	r3, [r4, #-108]
 8004906:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8004908:	f844 3c68 	str.w	r3, [r4, #-104]
 800490c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800490e:	f824 9c5c 	strh.w	r9, [r4, #-92]
 8004912:	e944 3719 	strd	r3, r7, [r4, #-100]	; 0x64
 8004916:	9b05      	ldr	r3, [sp, #20]
 8004918:	f824 3c5a 	strh.w	r3, [r4, #-90]
 800491c:	9b04      	ldr	r3, [sp, #16]
 800491e:	f824 3c58 	strh.w	r3, [r4, #-88]
 8004922:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004924:	f844 3c54 	str.w	r3, [r4, #-84]
 8004928:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800492a:	f844 3c50 	str.w	r3, [r4, #-80]
            uint16_t fromid = lfs_tag_size(tag);
 800492e:	9b07      	ldr	r3, [sp, #28]
            stack[sp] = (struct lfs_dir_traverse){
 8004930:	f844 ac70 	str.w	sl, [r4, #-112]
            uint16_t fromid = lfs_tag_size(tag);
 8004934:	f3c3 0909 	ubfx	r9, r3, #0, #10
            end = fromid+1;
 8004938:	f109 0201 	add.w	r2, r9, #1
 800493c:	9205      	str	r2, [sp, #20]
    return (tag & 0x000ffc00) >> 10;
 800493e:	f3c3 2389 	ubfx	r3, r3, #10, #10
            diff = toid-fromid+diff;
 8004942:	9a04      	ldr	r2, [sp, #16]
 8004944:	eba3 0309 	sub.w	r3, r3, r9
 8004948:	4413      	add	r3, r2
 800494a:	b21b      	sxth	r3, r3
            attrcount = 0;
 800494c:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <lfs_dir_traverse.constprop.39+0x2b0>)
            diff = toid-fromid+diff;
 800494e:	9304      	str	r3, [sp, #16]
            attrcount = 0;
 8004950:	2300      	movs	r3, #0
            stack[sp] = (struct lfs_dir_traverse){
 8004952:	e944 b81e 	strd	fp, r8, [r4, #-120]	; 0x78
            sp += 1;
 8004956:	3601      	adds	r6, #1
            dir = buffer;
 8004958:	46ab      	mov	fp, r5
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800495a:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
            attrcount = 0;
 800495e:	e9cd 3235 	strd	r3, r2, [sp, #212]	; 0xd4
            attrs = NULL;
 8004962:	9334      	str	r3, [sp, #208]	; 0xd0
            ptag = 0xffffffff;
 8004964:	f04f 3aff 	mov.w	sl, #4294967295
            off = 0;
 8004968:	4698      	mov	r8, r3
 800496a:	e74a      	b.n	8004802 <lfs_dir_traverse.constprop.39+0x12a>
                res = 0;
 800496c:	2000      	movs	r0, #0
 800496e:	e776      	b.n	800485e <lfs_dir_traverse.constprop.39+0x186>
}
 8004970:	b02b      	add	sp, #172	; 0xac
 8004972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	0800af96 	.word	0x0800af96
 800497c:	0800abba 	.word	0x0800abba
 8004980:	0800b193 	.word	0x0800b193
 8004984:	080036fd 	.word	0x080036fd
 8004988:	600ffc00 	.word	0x600ffc00

0800498c <lfs_bd_cmp.constprop.41>:
static int lfs_bd_cmp(lfs_t *lfs,
 800498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	b087      	sub	sp, #28
 8004992:	4689      	mov	r9, r1
 8004994:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004996:	4692      	mov	sl, r2
 8004998:	461f      	mov	r7, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
 800499a:	2400      	movs	r4, #0
        int res = lfs_bd_read(lfs,
 800499c:	f100 0b68 	add.w	fp, r0, #104	; 0x68
 80049a0:	f10d 0810 	add.w	r8, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d801      	bhi.n	80049ac <lfs_bd_cmp.constprop.41+0x20>
    return LFS_CMP_EQ;
 80049a8:	2000      	movs	r0, #0
 80049aa:	e01b      	b.n	80049e4 <lfs_bd_cmp.constprop.41+0x58>
        diff = lfs_min(size-i, sizeof(dat));
 80049ac:	1b35      	subs	r5, r6, r4
        int res = lfs_bd_read(lfs,
 80049ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return (a < b) ? a : b;
 80049b0:	2d08      	cmp	r5, #8
 80049b2:	bf28      	it	cs
 80049b4:	2508      	movcs	r5, #8
 80049b6:	18e3      	adds	r3, r4, r3
 80049b8:	e9cd 7300 	strd	r7, r3, [sp]
 80049bc:	e9cd 8502 	strd	r8, r5, [sp, #8]
 80049c0:	ebaa 0304 	sub.w	r3, sl, r4
 80049c4:	464a      	mov	r2, r9
 80049c6:	2100      	movs	r1, #0
 80049c8:	4658      	mov	r0, fp
 80049ca:	f7ff f845 	bl	8003a58 <lfs_bd_read.isra.23>
        if (res) {
 80049ce:	b948      	cbnz	r0, 80049e4 <lfs_bd_cmp.constprop.41+0x58>
        res = memcmp(dat, data + i, diff);
 80049d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049d2:	462a      	mov	r2, r5
 80049d4:	1919      	adds	r1, r3, r4
 80049d6:	4640      	mov	r0, r8
 80049d8:	f004 fa0a 	bl	8008df0 <memcmp>
        if (res) {
 80049dc:	2800      	cmp	r0, #0
 80049de:	d004      	beq.n	80049ea <lfs_bd_cmp.constprop.41+0x5e>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80049e0:	db05      	blt.n	80049ee <lfs_bd_cmp.constprop.41+0x62>
 80049e2:	2002      	movs	r0, #2
}
 80049e4:	b007      	add	sp, #28
 80049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (lfs_off_t i = 0; i < size; i += diff) {
 80049ea:	442c      	add	r4, r5
 80049ec:	e7da      	b.n	80049a4 <lfs_bd_cmp.constprop.41+0x18>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80049ee:	2001      	movs	r0, #1
 80049f0:	e7f8      	b.n	80049e4 <lfs_bd_cmp.constprop.41+0x58>

080049f2 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 80049f2:	b530      	push	{r4, r5, lr}
 80049f4:	4604      	mov	r4, r0
    return tag & 0x000003ff;
 80049f6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80049fa:	68a3      	ldr	r3, [r4, #8]
    int res = lfs_bd_cmp(lfs,
 80049fc:	6821      	ldr	r1, [r4, #0]
        lfs_tag_t tag, const void *buffer) {
 80049fe:	b085      	sub	sp, #20
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	bf28      	it	cs
 8004a04:	462b      	movcs	r3, r5
 8004a06:	4610      	mov	r0, r2
    int res = lfs_bd_cmp(lfs,
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	6843      	ldr	r3, [r0, #4]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	6803      	ldr	r3, [r0, #0]
 8004a16:	4608      	mov	r0, r1
 8004a18:	f7ff ffb8 	bl	800498c <lfs_bd_cmp.constprop.41>
    if (res != LFS_CMP_EQ) {
 8004a1c:	b928      	cbnz	r0, 8004a2a <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	42ab      	cmp	r3, r5
 8004a22:	d002      	beq.n	8004a2a <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004a24:	bf2c      	ite	cs
 8004a26:	2002      	movcs	r0, #2
 8004a28:	2001      	movcc	r0, #1
}
 8004a2a:	b005      	add	sp, #20
 8004a2c:	bd30      	pop	{r4, r5, pc}
	...

08004a30 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a34:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004a36:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004a38:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004a3a:	1c8b      	adds	r3, r1, #2
 8004a3c:	2b01      	cmp	r3, #1
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004a3e:	b085      	sub	sp, #20
 8004a40:	4606      	mov	r6, r0
 8004a42:	4617      	mov	r7, r2
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004a44:	d93f      	bls.n	8004ac6 <lfs_bd_flush+0x96>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8004a46:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004a48:	6a03      	ldr	r3, [r0, #32]
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	d305      	bcc.n	8004a5a <lfs_bd_flush+0x2a>
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <lfs_bd_flush+0xa0>)
 8004a50:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <lfs_bd_flush+0xa4>)
 8004a52:	219d      	movs	r1, #157	; 0x9d
        LFS_ASSERT(err <= 0);
 8004a54:	4820      	ldr	r0, [pc, #128]	; (8004ad8 <lfs_bd_flush+0xa8>)
 8004a56:	f004 f94d 	bl	8008cf4 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8004a5a:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8004a5c:	68ac      	ldr	r4, [r5, #8]
 8004a5e:	4414      	add	r4, r2
 8004a60:	3c01      	subs	r4, #1
    return a - (a % alignment);
 8004a62:	fbb4 f3f2 	udiv	r3, r4, r2
 8004a66:	fb02 4313 	mls	r3, r2, r3, r4
 8004a6a:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8004a6c:	9400      	str	r4, [sp, #0]
 8004a6e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8004a72:	68eb      	ldr	r3, [r5, #12]
 8004a74:	686a      	ldr	r2, [r5, #4]
 8004a76:	47c8      	blx	r9
        LFS_ASSERT(err <= 0);
 8004a78:	f1b0 0900 	subs.w	r9, r0, #0
 8004a7c:	dd03      	ble.n	8004a86 <lfs_bd_flush+0x56>
 8004a7e:	4b17      	ldr	r3, [pc, #92]	; (8004adc <lfs_bd_flush+0xac>)
 8004a80:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <lfs_bd_flush+0xa4>)
 8004a82:	21a1      	movs	r1, #161	; 0xa1
 8004a84:	e7e6      	b.n	8004a54 <lfs_bd_flush+0x24>
        if (err) {
 8004a86:	d106      	bne.n	8004a96 <lfs_bd_flush+0x66>
        if (validate) {
 8004a88:	f1b8 0f00 	cmp.w	r8, #0
 8004a8c:	d107      	bne.n	8004a9e <lfs_bd_flush+0x6e>
        lfs_cache_zero(lfs, pcache);
 8004a8e:	4629      	mov	r1, r5
 8004a90:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004a92:	f7fe fe8e 	bl	80037b2 <lfs_cache_zero.isra.17>
}
 8004a96:	4648      	mov	r0, r9
 8004a98:	b005      	add	sp, #20
 8004a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rcache->block = LFS_BLOCK_NULL;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
 8004aa4:	68eb      	ldr	r3, [r5, #12]
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	686b      	ldr	r3, [r5, #4]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	9402      	str	r4, [sp, #8]
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff ff69 	bl	800498c <lfs_bd_cmp.constprop.41>
            if (res < 0) {
 8004aba:	2800      	cmp	r0, #0
 8004abc:	db06      	blt.n	8004acc <lfs_bd_flush+0x9c>
            if (res != LFS_CMP_EQ) {
 8004abe:	d0e6      	beq.n	8004a8e <lfs_bd_flush+0x5e>
                return LFS_ERR_CORRUPT;
 8004ac0:	f06f 0953 	mvn.w	r9, #83	; 0x53
 8004ac4:	e7e7      	b.n	8004a96 <lfs_bd_flush+0x66>
    return 0;
 8004ac6:	f04f 0900 	mov.w	r9, #0
 8004aca:	e7e4      	b.n	8004a96 <lfs_bd_flush+0x66>
 8004acc:	4681      	mov	r9, r0
 8004ace:	e7e2      	b.n	8004a96 <lfs_bd_flush+0x66>
 8004ad0:	0800acdd 	.word	0x0800acdd
 8004ad4:	0800ab88 	.word	0x0800ab88
 8004ad8:	0800b193 	.word	0x0800b193
 8004adc:	0800acd4 	.word	0x0800acd4

08004ae0 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 8004ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	e9dd 840c 	ldrd	r8, r4, [sp, #48]	; 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8004ae8:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
 8004aec:	4691      	mov	r9, r2
 8004aee:	4607      	mov	r7, r0
 8004af0:	460d      	mov	r5, r1
 8004af2:	469a      	mov	sl, r3
 8004af4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8004af6:	6e82      	ldr	r2, [r0, #104]	; 0x68
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8004af8:	d008      	beq.n	8004b0c <lfs_bd_prog+0x2c>
 8004afa:	6a13      	ldr	r3, [r2, #32]
 8004afc:	4543      	cmp	r3, r8
 8004afe:	d805      	bhi.n	8004b0c <lfs_bd_prog+0x2c>
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <lfs_bd_prog+0xd0>)
 8004b02:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <lfs_bd_prog+0xd4>)
 8004b04:	21d2      	movs	r1, #210	; 0xd2
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8004b06:	482c      	ldr	r0, [pc, #176]	; (8004bb8 <lfs_bd_prog+0xd8>)
 8004b08:	f004 f8f4 	bl	8008cf4 <__assert_func>
 8004b0c:	69d2      	ldr	r2, [r2, #28]
 8004b0e:	19a3      	adds	r3, r4, r6
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d804      	bhi.n	8004b1e <lfs_bd_prog+0x3e>
        pcache->size = 0;
 8004b14:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
 8004b18:	b92e      	cbnz	r6, 8004b26 <lfs_bd_prog+0x46>
    return 0;
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	e033      	b.n	8004b86 <lfs_bd_prog+0xa6>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8004b1e:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <lfs_bd_prog+0xdc>)
 8004b20:	4a24      	ldr	r2, [pc, #144]	; (8004bb4 <lfs_bd_prog+0xd4>)
 8004b22:	21d3      	movs	r1, #211	; 0xd3
 8004b24:	e7ef      	b.n	8004b06 <lfs_bd_prog+0x26>
        if (block == pcache->block &&
 8004b26:	682a      	ldr	r2, [r5, #0]
 8004b28:	4590      	cmp	r8, r2
 8004b2a:	d12f      	bne.n	8004b8c <lfs_bd_prog+0xac>
                off >= pcache->off &&
 8004b2c:	6868      	ldr	r0, [r5, #4]
        if (block == pcache->block &&
 8004b2e:	42a0      	cmp	r0, r4
 8004b30:	d82c      	bhi.n	8004b8c <lfs_bd_prog+0xac>
                off < pcache->off + lfs->cfg->cache_size) {
 8004b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	4403      	add	r3, r0
                off >= pcache->off &&
 8004b38:	429c      	cmp	r4, r3
 8004b3a:	d227      	bcs.n	8004b8c <lfs_bd_prog+0xac>
            lfs_size_t diff = lfs_min(size,
 8004b3c:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 8004b3e:	42b3      	cmp	r3, r6
 8004b40:	bf28      	it	cs
 8004b42:	4633      	movcs	r3, r6
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8004b44:	461a      	mov	r2, r3
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	68eb      	ldr	r3, [r5, #12]
 8004b4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b4c:	1a20      	subs	r0, r4, r0
 8004b4e:	4418      	add	r0, r3
 8004b50:	f004 f95d 	bl	8008e0e <memcpy>
            data += diff;
 8004b54:	9b01      	ldr	r3, [sp, #4]
 8004b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            off += diff;
 8004b58:	441c      	add	r4, r3
            data += diff;
 8004b5a:	441a      	add	r2, r3
            size -= diff;
 8004b5c:	1af6      	subs	r6, r6, r3
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004b5e:	686b      	ldr	r3, [r5, #4]
            data += diff;
 8004b60:	920e      	str	r2, [sp, #56]	; 0x38
    return (a > b) ? a : b;
 8004b62:	68aa      	ldr	r2, [r5, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004b64:	1ae3      	subs	r3, r4, r3
 8004b66:	4293      	cmp	r3, r2
 8004b68:	bf38      	it	cc
 8004b6a:	4613      	movcc	r3, r2
            if (pcache->size == lfs->cfg->cache_size) {
 8004b6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004b6e:	60ab      	str	r3, [r5, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8004b70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d1d0      	bne.n	8004b18 <lfs_bd_prog+0x38>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8004b76:	4653      	mov	r3, sl
 8004b78:	464a      	mov	r2, r9
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f7ff ff57 	bl	8004a30 <lfs_bd_flush>
                if (err) {
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d0c8      	beq.n	8004b18 <lfs_bd_prog+0x38>
}
 8004b86:	b003      	add	sp, #12
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8004b8c:	3201      	adds	r2, #1
 8004b8e:	d003      	beq.n	8004b98 <lfs_bd_prog+0xb8>
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <lfs_bd_prog+0xe0>)
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <lfs_bd_prog+0xd4>)
 8004b94:	21f0      	movs	r1, #240	; 0xf0
 8004b96:	e7b6      	b.n	8004b06 <lfs_bd_prog+0x26>
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8004b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        pcache->block = block;
 8004b9a:	f8c5 8000 	str.w	r8, [r5]
    return a - (a % alignment);
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	fbb4 f3f2 	udiv	r3, r4, r2
 8004ba4:	fb02 4313 	mls	r3, r2, r3, r4
 8004ba8:	1ae3      	subs	r3, r4, r3
        pcache->size = 0;
 8004baa:	e9c5 3b01 	strd	r3, fp, [r5, #4]
 8004bae:	e7b3      	b.n	8004b18 <lfs_bd_prog+0x38>
 8004bb0:	0800ad03 	.word	0x0800ad03
 8004bb4:	0800aba1 	.word	0x0800aba1
 8004bb8:	0800b193 	.word	0x0800b193
 8004bbc:	0800ad3f 	.word	0x0800ad3f
 8004bc0:	0800ad62 	.word	0x0800ad62

08004bc4 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
 8004bc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
 8004bcc:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 8004bce:	684b      	ldr	r3, [r1, #4]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	680b      	ldr	r3, [r1, #0]
 8004bd4:	9300      	str	r3, [sp, #0]
        const void *buffer, lfs_size_t size) {
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
 8004bda:	2300      	movs	r3, #0
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f100 0110 	add.w	r1, r0, #16
 8004be2:	f7ff ff7d 	bl	8004ae0 <lfs_bd_prog>
    if (err) {
 8004be6:	4606      	mov	r6, r0
 8004be8:	b940      	cbnz	r0, 8004bfc <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004bea:	462a      	mov	r2, r5
 8004bec:	4639      	mov	r1, r7
 8004bee:	68e0      	ldr	r0, [r4, #12]
 8004bf0:	f002 f9dc 	bl	8006fac <lfs_crc>
    commit->off += size;
 8004bf4:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004bf6:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 8004bf8:	442b      	add	r3, r5
 8004bfa:	6063      	str	r3, [r4, #4]
}
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	b005      	add	sp, #20
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c02 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 8004c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c06:	4680      	mov	r8, r0
 8004c08:	b089      	sub	sp, #36	; 0x24
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004c0a:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
 8004c0c:	4617      	mov	r7, r2
 8004c0e:	4699      	mov	r9, r3
 8004c10:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004c12:	f7fe fd1e 	bl	8003652 <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
 8004c16:	684b      	ldr	r3, [r1, #4]
 8004c18:	694a      	ldr	r2, [r1, #20]
 8004c1a:	4403      	add	r3, r0
 8004c1c:	4293      	cmp	r3, r2
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004c1e:	4606      	mov	r6, r0
    if (commit->off + dsize > commit->end) {
 8004c20:	d842      	bhi.n	8004ca8 <lfs_dir_commitattr+0xa6>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004c22:	688b      	ldr	r3, [r1, #8]
 8004c24:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8004c28:	aa08      	add	r2, sp, #32
 8004c2a:	ea8a 0303 	eor.w	r3, sl, r3
    return __builtin_bswap32(a);
 8004c2e:	ba1b      	rev	r3, r3
 8004c30:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004c34:	4640      	mov	r0, r8
 8004c36:	2304      	movs	r3, #4
 8004c38:	f7ff ffc4 	bl	8004bc4 <lfs_dir_commitprog>
    if (err) {
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b960      	cbnz	r0, 8004c5a <lfs_dir_commitattr+0x58>
    if (!(tag & 0x80000000)) {
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	f1a6 0604 	sub.w	r6, r6, #4
 8004c46:	db28      	blt.n	8004c9a <lfs_dir_commitattr+0x98>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004c48:	4633      	mov	r3, r6
 8004c4a:	464a      	mov	r2, r9
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4640      	mov	r0, r8
 8004c50:	f7ff ffb8 	bl	8004bc4 <lfs_dir_commitprog>
        if (err) {
 8004c54:	bb58      	cbnz	r0, 8004cae <lfs_dir_commitattr+0xac>
    commit->ptag = tag & 0x7fffffff;
 8004c56:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	b009      	add	sp, #36	; 0x24
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = lfs_bd_read(lfs,
 8004c62:	2301      	movs	r3, #1
 8004c64:	e9cd b302 	strd	fp, r3, [sp, #8]
 8004c68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004c6c:	9805      	ldr	r0, [sp, #20]
 8004c6e:	443b      	add	r3, r7
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	f8d9 3000 	ldr.w	r3, [r9]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4642      	mov	r2, r8
 8004c7a:	1bf3      	subs	r3, r6, r7
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	f7fe feeb 	bl	8003a58 <lfs_bd_read.isra.23>
            if (err) {
 8004c82:	b9a0      	cbnz	r0, 8004cae <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8004c84:	2301      	movs	r3, #1
 8004c86:	465a      	mov	r2, fp
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f7ff ff9a 	bl	8004bc4 <lfs_dir_commitprog>
            if (err) {
 8004c90:	b968      	cbnz	r0, 8004cae <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004c92:	3701      	adds	r7, #1
 8004c94:	42b7      	cmp	r7, r6
 8004c96:	d3e4      	bcc.n	8004c62 <lfs_dir_commitattr+0x60>
 8004c98:	e7dd      	b.n	8004c56 <lfs_dir_commitattr+0x54>
            err = lfs_bd_read(lfs,
 8004c9a:	f108 0368 	add.w	r3, r8, #104	; 0x68
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004c9e:	4607      	mov	r7, r0
            err = lfs_bd_read(lfs,
 8004ca0:	9305      	str	r3, [sp, #20]
 8004ca2:	f10d 0b1b 	add.w	fp, sp, #27
 8004ca6:	e7f5      	b.n	8004c94 <lfs_dir_commitattr+0x92>
        return LFS_ERR_NOSPC;
 8004ca8:	f06f 051b 	mvn.w	r5, #27
 8004cac:	e7d5      	b.n	8004c5a <lfs_dir_commitattr+0x58>
 8004cae:	4605      	mov	r5, r0
 8004cb0:	e7d3      	b.n	8004c5a <lfs_dir_commitattr+0x58>

08004cb2 <lfs_dir_commit_commit>:
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004cba:	f7ff bfa2 	b.w	8004c02 <lfs_dir_commitattr>
	...

08004cc0 <lfs_dir_commitcrc>:
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004cc0:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004cc6:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8004cc8:	684d      	ldr	r5, [r1, #4]
 8004cca:	4415      	add	r5, r2
 8004ccc:	3507      	adds	r5, #7
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004cce:	b08d      	sub	sp, #52	; 0x34
    return a - (a % alignment);
 8004cd0:	fbb5 f3f2 	udiv	r3, r5, r2
 8004cd4:	fb02 5313 	mls	r3, r2, r3, r5
 8004cd8:	1aed      	subs	r5, r5, r3
    uint32_t crc1 = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 8004cde:	469b      	mov	fp, r3
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004ce0:	f1a5 0308 	sub.w	r3, r5, #8
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	460e      	mov	r6, r1
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004ce8:	9306      	str	r3, [sp, #24]
    while (commit->off < end) {
 8004cea:	6874      	ldr	r4, [r6, #4]
 8004cec:	42ac      	cmp	r4, r5
 8004cee:	d319      	bcc.n	8004d24 <lfs_dir_commitcrc+0x64>
    rcache->block = LFS_BLOCK_NULL;
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f7ff fe96 	bl	8004a30 <lfs_bd_flush>
    if (err) {
 8004d04:	4680      	mov	r8, r0
 8004d06:	2800      	cmp	r0, #0
 8004d08:	f040 80bf 	bne.w	8004e8a <lfs_dir_commitcrc+0x1ca>
    err = lfs->cfg->sync(lfs->cfg);
 8004d0c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d0e:	6903      	ldr	r3, [r0, #16]
 8004d10:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 8004d12:	f1b0 0800 	subs.w	r8, r0, #0
 8004d16:	dd73      	ble.n	8004e00 <lfs_dir_commitcrc+0x140>
 8004d18:	4b5f      	ldr	r3, [pc, #380]	; (8004e98 <lfs_dir_commitcrc+0x1d8>)
 8004d1a:	4a60      	ldr	r2, [pc, #384]	; (8004e9c <lfs_dir_commitcrc+0x1dc>)
 8004d1c:	4860      	ldr	r0, [pc, #384]	; (8004ea0 <lfs_dir_commitcrc+0x1e0>)
 8004d1e:	21c7      	movs	r1, #199	; 0xc7
 8004d20:	f003 ffe8 	bl	8008cf4 <__assert_func>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8004d24:	f104 0a04 	add.w	sl, r4, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8004d28:	eba5 040a 	sub.w	r4, r5, sl
 8004d2c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004d30:	429c      	cmp	r4, r3
 8004d32:	bf94      	ite	ls
 8004d34:	4454      	addls	r4, sl
 8004d36:	eb0a 0403 	addhi.w	r4, sl, r3
        if (noff < end) {
 8004d3a:	42ac      	cmp	r4, r5
 8004d3c:	d203      	bcs.n	8004d46 <lfs_dir_commitcrc+0x86>
    return (a < b) ? a : b;
 8004d3e:	9b06      	ldr	r3, [sp, #24]
 8004d40:	429c      	cmp	r4, r3
 8004d42:	bf28      	it	cs
 8004d44:	461c      	movcs	r4, r3
        lfs_tag_t tag = 0xffffffff;
 8004d46:	aa0c      	add	r2, sp, #48	; 0x30
 8004d48:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4c:	f842 3d0c 	str.w	r3, [r2, #-12]!
        int err = lfs_bd_read(lfs,
 8004d50:	2304      	movs	r3, #4
 8004d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d56:	6832      	ldr	r2, [r6, #0]
 8004d58:	9200      	str	r2, [sp, #0]
 8004d5a:	9401      	str	r4, [sp, #4]
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8004d64:	f7fe fe78 	bl	8003a58 <lfs_bd_read.isra.23>
        if (err && err != LFS_ERR_CORRUPT) {
 8004d68:	4680      	mov	r8, r0
 8004d6a:	b118      	cbz	r0, 8004d74 <lfs_dir_commitcrc+0xb4>
 8004d6c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004d70:	f040 808b 	bne.w	8004e8a <lfs_dir_commitcrc+0x1ca>
    return __builtin_bswap32(a);
 8004d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004d76:	68f0      	ldr	r0, [r6, #12]
 8004d78:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
 8004d7a:	ea6f 0903 	mvn.w	r9, r3
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004d7e:	eba4 040a 	sub.w	r4, r4, sl
        bool reset = ~lfs_frombe32(tag) >> 31;
 8004d82:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004d86:	f444 247f 	orr.w	r4, r4, #1044480	; 0xff000
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8e:	f444 6440 	orr.w	r4, r4, #3072	; 0xc00
 8004d92:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004d96:	68b3      	ldr	r3, [r6, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004d98:	9409      	str	r4, [sp, #36]	; 0x24
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004d9a:	405c      	eors	r4, r3
 8004d9c:	ba23      	rev	r3, r4
 8004d9e:	ac0c      	add	r4, sp, #48	; 0x30
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004da0:	2204      	movs	r2, #4
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004da2:	f844 3d08 	str.w	r3, [r4, #-8]!
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004da6:	4621      	mov	r1, r4
 8004da8:	f002 f900 	bl	8006fac <lfs_crc>
        err = lfs_bd_prog(lfs,
 8004dac:	2308      	movs	r3, #8
 8004dae:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004db2:	6873      	ldr	r3, [r6, #4]
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	6833      	ldr	r3, [r6, #0]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004db8:	60f0      	str	r0, [r6, #12]
        footer[1] = lfs_tole32(commit->crc);
 8004dba:	900b      	str	r0, [sp, #44]	; 0x2c
        err = lfs_bd_prog(lfs,
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	463a      	mov	r2, r7
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f107 0110 	add.w	r1, r7, #16
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f7ff fe8a 	bl	8004ae0 <lfs_bd_prog>
        if (err) {
 8004dcc:	4680      	mov	r8, r0
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d15b      	bne.n	8004e8a <lfs_dir_commitcrc+0x1ca>
 8004dd2:	6871      	ldr	r1, [r6, #4]
        if (off1 == 0) {
 8004dd4:	f1bb 0f00 	cmp.w	fp, #0
 8004dd8:	d103      	bne.n	8004de2 <lfs_dir_commitcrc+0x122>
            crc1 = commit->crc;
 8004dda:	68f3      	ldr	r3, [r6, #12]
 8004ddc:	9305      	str	r3, [sp, #20]
            off1 = commit->off + sizeof(uint32_t);
 8004dde:	f101 0b04 	add.w	fp, r1, #4
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004de4:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
    return tag & 0x000003ff;
 8004de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004dec:	3204      	adds	r2, #4
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004dee:	ea89 0303 	eor.w	r3, r9, r3
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004df2:	440a      	add	r2, r1
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004df4:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004dfa:	6072      	str	r2, [r6, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8004dfc:	60f3      	str	r3, [r6, #12]
 8004dfe:	e774      	b.n	8004cea <lfs_dir_commitcrc+0x2a>
    if (err) {
 8004e00:	d143      	bne.n	8004e8a <lfs_dir_commitcrc+0x1ca>
            err = lfs_bd_read(lfs,
 8004e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
    lfs_off_t off = commit->begin;
 8004e06:	6934      	ldr	r4, [r6, #16]
            err = lfs_bd_read(lfs,
 8004e08:	9307      	str	r3, [sp, #28]
    while (off < end) {
 8004e0a:	46d9      	mov	r9, fp
 8004e0c:	42ac      	cmp	r4, r5
 8004e0e:	d23c      	bcs.n	8004e8a <lfs_dir_commitcrc+0x1ca>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004e10:	f109 0304 	add.w	r3, r9, #4
        uint32_t crc = 0xffffffff;
 8004e14:	f04f 3aff 	mov.w	sl, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004e18:	9306      	str	r3, [sp, #24]
 8004e1a:	e01a      	b.n	8004e52 <lfs_dir_commitcrc+0x192>
            if (i == off1 && crc != crc1) {
 8004e1c:	45a3      	cmp	fp, r4
 8004e1e:	d102      	bne.n	8004e26 <lfs_dir_commitcrc+0x166>
 8004e20:	9b05      	ldr	r3, [sp, #20]
 8004e22:	4553      	cmp	r3, sl
 8004e24:	d12e      	bne.n	8004e84 <lfs_dir_commitcrc+0x1c4>
            err = lfs_bd_read(lfs,
 8004e26:	2301      	movs	r3, #1
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	ab0a      	add	r3, sp, #40	; 0x28
 8004e2c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	9b06      	ldr	r3, [sp, #24]
 8004e36:	9807      	ldr	r0, [sp, #28]
 8004e38:	1b1b      	subs	r3, r3, r4
 8004e3a:	463a      	mov	r2, r7
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f7fe fe0b 	bl	8003a58 <lfs_bd_read.isra.23>
            if (err) {
 8004e42:	bb08      	cbnz	r0, 8004e88 <lfs_dir_commitcrc+0x1c8>
            crc = lfs_crc(crc, &dat, 1);
 8004e44:	4650      	mov	r0, sl
 8004e46:	2201      	movs	r2, #1
 8004e48:	a90a      	add	r1, sp, #40	; 0x28
 8004e4a:	f002 f8af 	bl	8006fac <lfs_crc>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004e4e:	3401      	adds	r4, #1
            crc = lfs_crc(crc, &dat, 1);
 8004e50:	4682      	mov	sl, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004e52:	9b06      	ldr	r3, [sp, #24]
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d8e1      	bhi.n	8004e1c <lfs_dir_commitcrc+0x15c>
        if (crc != 0) {
 8004e58:	f1ba 0f00 	cmp.w	sl, #0
 8004e5c:	d119      	bne.n	8004e92 <lfs_dir_commitcrc+0x1d2>
        off = lfs_min(end - noff, 0x3fe) + noff;
 8004e5e:	eba5 0409 	sub.w	r4, r5, r9
 8004e62:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004e66:	429c      	cmp	r4, r3
 8004e68:	bf94      	ite	ls
 8004e6a:	444c      	addls	r4, r9
 8004e6c:	eb09 0403 	addhi.w	r4, r9, r3
        if (off < end) {
 8004e70:	42ac      	cmp	r4, r5
 8004e72:	d204      	bcs.n	8004e7e <lfs_dir_commitcrc+0x1be>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8004e74:	f1a5 0308 	sub.w	r3, r5, #8
    return (a < b) ? a : b;
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	bf28      	it	cs
 8004e7c:	461c      	movcs	r4, r3
        noff = off + sizeof(uint32_t);
 8004e7e:	f104 0904 	add.w	r9, r4, #4
 8004e82:	e7c3      	b.n	8004e0c <lfs_dir_commitcrc+0x14c>
                return LFS_ERR_CORRUPT;
 8004e84:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8004e88:	4680      	mov	r8, r0
}
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	b00d      	add	sp, #52	; 0x34
 8004e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
 8004e92:	f06f 0853 	mvn.w	r8, #83	; 0x53
 8004e96:	e7f8      	b.n	8004e8a <lfs_dir_commitcrc+0x1ca>
 8004e98:	0800acd4 	.word	0x0800acd4
 8004e9c:	0800ab95 	.word	0x0800ab95
 8004ea0:	0800b193 	.word	0x0800b193

08004ea4 <lfs_fs_rawtraverse>:
        bool includeorphans) {
 8004ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea8:	b08f      	sub	sp, #60	; 0x3c
 8004eaa:	4604      	mov	r4, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	221c      	movs	r2, #28
 8004eb4:	a806      	add	r0, sp, #24
        bool includeorphans) {
 8004eb6:	4699      	mov	r9, r3
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004eb8:	f8df a138 	ldr.w	sl, [pc, #312]	; 8004ff4 <lfs_fs_rawtraverse+0x150>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004ebc:	f003 ffb2 	bl	8008e24 <memset>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	930d      	str	r3, [sp, #52]	; 0x34
    lfs_block_t cycle = 0;
 8004ec4:	f04f 0800 	mov.w	r8, #0
    while (!lfs_pair_isnull(dir.tail)) {
 8004ec8:	a80c      	add	r0, sp, #48	; 0x30
 8004eca:	f7fe fba7 	bl	800361c <lfs_pair_isnull>
 8004ece:	b120      	cbz	r0, 8004eda <lfs_fs_rawtraverse+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004ed0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	d158      	bne.n	8004f88 <lfs_fs_rawtraverse+0xe4>
    return 0;
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	e044      	b.n	8004f64 <lfs_fs_rawtraverse+0xc0>
        if (cycle >= lfs->cfg->block_count/2) {
 8004eda:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
 8004ee2:	f080 8082 	bcs.w	8004fea <lfs_fs_rawtraverse+0x146>
            int err = cb(data, dir.tail[i]);
 8004ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ee8:	4630      	mov	r0, r6
        cycle += 1;
 8004eea:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
 8004eee:	47a8      	blx	r5
            if (err) {
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d137      	bne.n	8004f64 <lfs_fs_rawtraverse+0xc0>
            int err = cb(data, dir.tail[i]);
 8004ef4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	47a8      	blx	r5
            if (err) {
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d132      	bne.n	8004f64 <lfs_fs_rawtraverse+0xc0>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8004efe:	aa0c      	add	r2, sp, #48	; 0x30
 8004f00:	a906      	add	r1, sp, #24
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7ff f97e 	bl	8004204 <lfs_dir_fetch>
        if (err) {
 8004f08:	bb60      	cbnz	r0, 8004f64 <lfs_fs_rawtraverse+0xc0>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f0a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8004ff8 <lfs_fs_rawtraverse+0x154>
 8004f0e:	4607      	mov	r7, r0
        for (uint16_t id = 0; id < dir.count; id++) {
 8004f10:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8004f14:	b2bb      	uxth	r3, r7
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d9d6      	bls.n	8004ec8 <lfs_fs_rawtraverse+0x24>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8004f1a:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <lfs_fs_rawtraverse+0x14c>)
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f1c:	aa04      	add	r2, sp, #16
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8004f1e:	ea03 2387 	and.w	r3, r3, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f22:	9200      	str	r2, [sp, #0]
 8004f24:	ea43 030b 	orr.w	r3, r3, fp
 8004f28:	4652      	mov	r2, sl
 8004f2a:	a906      	add	r1, sp, #24
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7fe fee7 	bl	8003d00 <lfs_dir_get>
            if (tag < 0) {
 8004f32:	2800      	cmp	r0, #0
 8004f34:	da03      	bge.n	8004f3e <lfs_fs_rawtraverse+0x9a>
                if (tag == LFS_ERR_NOENT) {
 8004f36:	1c83      	adds	r3, r0, #2
 8004f38:	d114      	bne.n	8004f64 <lfs_fs_rawtraverse+0xc0>
 8004f3a:	3701      	adds	r7, #1
 8004f3c:	e7e8      	b.n	8004f10 <lfs_fs_rawtraverse+0x6c>
    return (tag & 0x7ff00000) >> 20;
 8004f3e:	0d00      	lsrs	r0, r0, #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8004f40:	f240 2302 	movw	r3, #514	; 0x202
 8004f44:	4298      	cmp	r0, r3
 8004f46:	d110      	bne.n	8004f6a <lfs_fs_rawtraverse+0xc6>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8004f48:	9b05      	ldr	r3, [sp, #20]
    if (size == 0) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f5      	beq.n	8004f3a <lfs_fs_rawtraverse+0x96>
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004f54:	9b04      	ldr	r3, [sp, #16]
 8004f56:	4622      	mov	r2, r4
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff fa32 	bl	80043c4 <lfs_ctz_traverse.part.25>
                    if (err) {
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d0ea      	beq.n	8004f3a <lfs_fs_rawtraverse+0x96>
}
 8004f64:	b00f      	add	sp, #60	; 0x3c
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans &&
 8004f6a:	f1b9 0f00 	cmp.w	r9, #0
 8004f6e:	d0e4      	beq.n	8004f3a <lfs_fs_rawtraverse+0x96>
 8004f70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004f74:	d1e1      	bne.n	8004f3a <lfs_fs_rawtraverse+0x96>
                    err = cb(data, (&ctz.head)[i]);
 8004f76:	9904      	ldr	r1, [sp, #16]
 8004f78:	4630      	mov	r0, r6
 8004f7a:	47a8      	blx	r5
                    if (err) {
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1f1      	bne.n	8004f64 <lfs_fs_rawtraverse+0xc0>
                    err = cb(data, (&ctz.head)[i]);
 8004f80:	9905      	ldr	r1, [sp, #20]
 8004f82:	4630      	mov	r0, r6
 8004f84:	47a8      	blx	r5
 8004f86:	e7eb      	b.n	8004f60 <lfs_fs_rawtraverse+0xbc>
        if (f->type != LFS_TYPE_REG) {
 8004f88:	79bb      	ldrb	r3, [r7, #6]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <lfs_fs_rawtraverse+0xee>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004f8e:	683f      	ldr	r7, [r7, #0]
 8004f90:	e79f      	b.n	8004ed2 <lfs_fs_rawtraverse+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d015      	beq.n	8004fca <lfs_fs_rawtraverse+0x126>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 8004fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa8:	d1f1      	bne.n	8004f8e <lfs_fs_rawtraverse+0xea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    if (size == 0) {
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ee      	beq.n	8004f8e <lfs_fs_rawtraverse+0xea>
 8004fb0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	4622      	mov	r2, r4
 8004fba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f7ff fa00 	bl	80043c4 <lfs_ctz_traverse.part.25>
            if (err) {
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d0e2      	beq.n	8004f8e <lfs_fs_rawtraverse+0xea>
 8004fc8:	e7cc      	b.n	8004f64 <lfs_fs_rawtraverse+0xc0>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (size == 0) {
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0e6      	beq.n	8004f9e <lfs_fs_rawtraverse+0xfa>
 8004fd0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	4622      	mov	r2, r4
 8004fda:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff f9f0 	bl	80043c4 <lfs_ctz_traverse.part.25>
            if (err) {
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d0da      	beq.n	8004f9e <lfs_fs_rawtraverse+0xfa>
 8004fe8:	e7bc      	b.n	8004f64 <lfs_fs_rawtraverse+0xc0>
            return LFS_ERR_CORRUPT;
 8004fea:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8004fee:	e7b9      	b.n	8004f64 <lfs_fs_rawtraverse+0xc0>
 8004ff0:	03fffc00 	.word	0x03fffc00
 8004ff4:	700ffc00 	.word	0x700ffc00
 8004ff8:	20000008 	.word	0x20000008

08004ffc <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004ffc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8005000:	4d36      	ldr	r5, [pc, #216]	; (80050dc <lfs_alloc+0xe0>)
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8005002:	4604      	mov	r4, r0
 8005004:	460e      	mov	r6, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8005006:	2701      	movs	r7, #1
        while (lfs->free.i != lfs->free.size) {
 8005008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800500a:	e9d4 2117 	ldrd	r2, r1, [r4, #92]	; 0x5c
 800500e:	429a      	cmp	r2, r3
 8005010:	d10e      	bne.n	8005030 <lfs_alloc+0x34>
 8005012:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005014:	4413      	add	r3, r2
        if (lfs->free.ack == 0) {
 8005016:	2900      	cmp	r1, #0
 8005018:	d13a      	bne.n	8005090 <lfs_alloc+0x94>
            LFS_ERROR("No more free space %"PRIu32,
 800501a:	4a31      	ldr	r2, [pc, #196]	; (80050e0 <lfs_alloc+0xe4>)
 800501c:	9200      	str	r2, [sp, #0]
 800501e:	4931      	ldr	r1, [pc, #196]	; (80050e4 <lfs_alloc+0xe8>)
 8005020:	4831      	ldr	r0, [pc, #196]	; (80050e8 <lfs_alloc+0xec>)
 8005022:	f240 2247 	movw	r2, #583	; 0x247
 8005026:	f004 f9cd 	bl	80093c4 <iprintf>
            return LFS_ERR_NOSPC;
 800502a:	f06f 001b 	mvn.w	r0, #27
 800502e:	e026      	b.n	800507e <lfs_alloc+0x82>
            lfs->free.ack -= 1;
 8005030:	3901      	subs	r1, #1
            lfs->free.i += 1;
 8005032:	1c50      	adds	r0, r2, #1
            lfs->free.ack -= 1;
 8005034:	6621      	str	r1, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8005036:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800503a:	6e61      	ldr	r1, [r4, #100]	; 0x64
            lfs->free.i += 1;
 800503c:	65e0      	str	r0, [r4, #92]	; 0x5c
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800503e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8005042:	f002 001f 	and.w	r0, r2, #31
 8005046:	fa07 f000 	lsl.w	r0, r7, r0
 800504a:	ea10 0f0c 	tst.w	r0, ip
 800504e:	d1dc      	bne.n	800500a <lfs_alloc+0xe>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8005050:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005052:	441a      	add	r2, r3
 8005054:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005056:	6a18      	ldr	r0, [r3, #32]
 8005058:	fbb2 f3f0 	udiv	r3, r2, r0
 800505c:	fb00 2213 	mls	r2, r0, r3, r2
 8005060:	6032      	str	r2, [r6, #0]
                while (lfs->free.i != lfs->free.size &&
 8005062:	6da6      	ldr	r6, [r4, #88]	; 0x58
                            & (1U << (lfs->free.i % 32)))) {
 8005064:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
 8005066:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005068:	42b3      	cmp	r3, r6
 800506a:	d035      	beq.n	80050d8 <lfs_alloc+0xdc>
                        (lfs->free.buffer[lfs->free.i / 32]
 800506c:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
 800506e:	f003 001f 	and.w	r0, r3, #31
 8005072:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005076:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
 800507a:	4010      	ands	r0, r2
 800507c:	d102      	bne.n	8005084 <lfs_alloc+0x88>
}
 800507e:	b002      	add	sp, #8
 8005080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    lfs->free.i += 1;
 8005084:	3301      	adds	r3, #1
 8005086:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8005088:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800508a:	3b01      	subs	r3, #1
 800508c:	6623      	str	r3, [r4, #96]	; 0x60
 800508e:	e7ea      	b.n	8005066 <lfs_alloc+0x6a>
                % lfs->cfg->block_count;
 8005090:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005092:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8005096:	fbb3 f2fc 	udiv	r2, r3, ip
 800509a:	fb0c 3312 	mls	r3, ip, r2, r3
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800509e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80050a0:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.i = 0;
 80050a2:	f04f 0800 	mov.w	r8, #0
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80050a6:	00d3      	lsls	r3, r2, #3
 80050a8:	428b      	cmp	r3, r1
 80050aa:	bf94      	ite	ls
 80050ac:	65a3      	strls	r3, [r4, #88]	; 0x58
 80050ae:	65a1      	strhi	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 80050b0:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80050b4:	4641      	mov	r1, r8
 80050b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80050b8:	f003 feb4 	bl	8008e24 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80050bc:	2301      	movs	r3, #1
 80050be:	4622      	mov	r2, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff feee 	bl	8004ea4 <lfs_fs_rawtraverse>
        if (err) {
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d09d      	beq.n	8005008 <lfs_alloc+0xc>
    lfs->free.ack = lfs->cfg->block_count;
 80050cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	6623      	str	r3, [r4, #96]	; 0x60
    lfs->free.i = 0;
 80050d2:	e9c4 8816 	strd	r8, r8, [r4, #88]	; 0x58
 80050d6:	e7d2      	b.n	800507e <lfs_alloc+0x82>
                return 0;
 80050d8:	2000      	movs	r0, #0
 80050da:	e7d0      	b.n	800507e <lfs_alloc+0x82>
 80050dc:	080036c7 	.word	0x080036c7
 80050e0:	0800aad6 	.word	0x0800aad6
 80050e4:	0800b193 	.word	0x0800b193
 80050e8:	0800acac 	.word	0x0800acac

080050ec <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80050ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80050ee:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80050f0:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80050f2:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80050f4:	f7ff ff82 	bl	8004ffc <lfs_alloc>
        if (err) {
 80050f8:	4605      	mov	r5, r0
 80050fa:	bb98      	cbnz	r0, 8005164 <lfs_dir_alloc+0x78>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80050fc:	4621      	mov	r1, r4
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ff7c 	bl	8004ffc <lfs_alloc>
        if (err) {
 8005104:	4605      	mov	r5, r0
 8005106:	bb68      	cbnz	r0, 8005164 <lfs_dir_alloc+0x78>
    dir->rev = 0;
 8005108:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
 800510a:	2304      	movs	r3, #4
    dir->rev = 0;
 800510c:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
 8005110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	9001      	str	r0, [sp, #4]
 8005118:	9200      	str	r2, [sp, #0]
 800511a:	4601      	mov	r1, r0
 800511c:	4632      	mov	r2, r6
 800511e:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8005122:	f7fe fc99 	bl	8003a58 <lfs_bd_read.isra.23>
    if (err && err != LFS_ERR_CORRUPT) {
 8005126:	b110      	cbz	r0, 800512e <lfs_dir_alloc+0x42>
 8005128:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800512c:	d11d      	bne.n	800516a <lfs_dir_alloc+0x7e>
    if (lfs->cfg->block_cycles > 0) {
 800512e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005132:	2a00      	cmp	r2, #0
 8005134:	dd0b      	ble.n	800514e <lfs_dir_alloc+0x62>
    return lfs_aligndown(a + alignment-1, alignment);
 8005136:	68a3      	ldr	r3, [r4, #8]
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8005138:	3201      	adds	r2, #1
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	3b01      	subs	r3, #1
 8005140:	4413      	add	r3, r2
    return a - (a % alignment);
 8005142:	fbb3 f1f2 	udiv	r1, r3, r2
 8005146:	fb02 3211 	mls	r2, r2, r1, r3
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
 800514e:	f04f 32ff 	mov.w	r2, #4294967295
 8005152:	2304      	movs	r3, #4
    dir->tail[1] = LFS_BLOCK_NULL;
 8005154:	e9c4 2206 	strd	r2, r2, [r4, #24]
    dir->etag = 0xffffffff;
 8005158:	e9c4 3203 	strd	r3, r2, [r4, #12]
    dir->count = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	82a3      	strh	r3, [r4, #20]
    dir->erased = false;
 8005160:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 8005162:	75e3      	strb	r3, [r4, #23]
}
 8005164:	4628      	mov	r0, r5
 8005166:	b004      	add	sp, #16
 8005168:	bd70      	pop	{r4, r5, r6, pc}
 800516a:	4605      	mov	r5, r0
 800516c:	e7fa      	b.n	8005164 <lfs_dir_alloc+0x78>
	...

08005170 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                err = lfs_dir_getread(lfs, &file->m,
 8005174:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8005294 <lfs_file_relocate+0x124>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005178:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8005298 <lfs_file_relocate+0x128>
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800517c:	b087      	sub	sp, #28
 800517e:	4604      	mov	r4, r0
 8005180:	460d      	mov	r5, r1
        int err = lfs_alloc(lfs, &nblock);
 8005182:	a905      	add	r1, sp, #20
 8005184:	4620      	mov	r0, r4
 8005186:	f7ff ff39 	bl	8004ffc <lfs_alloc>
        if (err) {
 800518a:	4607      	mov	r7, r0
 800518c:	b948      	cbnz	r0, 80051a2 <lfs_file_relocate+0x32>
        err = lfs_bd_erase(lfs, nblock);
 800518e:	9905      	ldr	r1, [sp, #20]
 8005190:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005192:	f7fe fc09 	bl	80039a8 <lfs_bd_erase.isra.18>
        if (err) {
 8005196:	4607      	mov	r7, r0
 8005198:	2800      	cmp	r0, #0
 800519a:	d064      	beq.n	8005266 <lfs_file_relocate+0xf6>
            if (err == LFS_ERR_CORRUPT) {
 800519c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80051a0:	d067      	beq.n	8005272 <lfs_file_relocate+0x102>
}
 80051a2:	4638      	mov	r0, r7
 80051a4:	b007      	add	sp, #28
 80051a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
 80051aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80051ac:	02d2      	lsls	r2, r2, #11
 80051ae:	eba3 0306 	sub.w	r3, r3, r6
 80051b2:	d52b      	bpl.n	800520c <lfs_file_relocate+0x9c>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80051b4:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
 80051b6:	ea4a 2e82 	orr.w	lr, sl, r2, lsl #10
    if (off+size > lfs->cfg->block_size) {
 80051ba:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80051bc:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80051c0:	1c70      	adds	r0, r6, #1
 80051c2:	4584      	cmp	ip, r0
                err = lfs_dir_getread(lfs, &file->m,
 80051c4:	f105 0108 	add.w	r1, r5, #8
    if (off+size > lfs->cfg->block_size) {
 80051c8:	d34a      	bcc.n	8005260 <lfs_file_relocate+0xf0>
 80051ca:	2001      	movs	r0, #1
 80051cc:	9003      	str	r0, [sp, #12]
 80051ce:	f10d 0013 	add.w	r0, sp, #19
 80051d2:	e9cd 6001 	strd	r6, r0, [sp, #4]
 80051d6:	f8cd e000 	str.w	lr, [sp]
 80051da:	4642      	mov	r2, r8
 80051dc:	4620      	mov	r0, r4
 80051de:	f7ff f9ad 	bl	800453c <lfs_dir_getread.part.26.constprop.37>
                if (err) {
 80051e2:	b988      	cbnz	r0, 8005208 <lfs_file_relocate+0x98>
            err = lfs_bd_prog(lfs,
 80051e4:	f10d 0213 	add.w	r2, sp, #19
 80051e8:	2301      	movs	r3, #1
 80051ea:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80051ee:	9a05      	ldr	r2, [sp, #20]
 80051f0:	9200      	str	r2, [sp, #0]
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	4622      	mov	r2, r4
 80051f6:	f104 0110 	add.w	r1, r4, #16
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff fc70 	bl	8004ae0 <lfs_bd_prog>
            if (err) {
 8005200:	b190      	cbz	r0, 8005228 <lfs_file_relocate+0xb8>
                if (err == LFS_ERR_CORRUPT) {
 8005202:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005206:	d034      	beq.n	8005272 <lfs_file_relocate+0x102>
                    return err;
 8005208:	4607      	mov	r7, r0
 800520a:	e7ca      	b.n	80051a2 <lfs_file_relocate+0x32>
                err = lfs_bd_read(lfs,
 800520c:	2201      	movs	r2, #1
 800520e:	9203      	str	r2, [sp, #12]
 8005210:	f10d 0213 	add.w	r2, sp, #19
 8005214:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8005218:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800521a:	9200      	str	r2, [sp, #0]
 800521c:	4641      	mov	r1, r8
 800521e:	4622      	mov	r2, r4
 8005220:	4658      	mov	r0, fp
 8005222:	f7fe fc19 	bl	8003a58 <lfs_bd_read.isra.23>
 8005226:	e7dc      	b.n	80051e2 <lfs_file_relocate+0x72>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005228:	3601      	adds	r6, #1
 800522a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800522c:	42b3      	cmp	r3, r6
 800522e:	d8bc      	bhi.n	80051aa <lfs_file_relocate+0x3a>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005230:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005232:	69e1      	ldr	r1, [r4, #28]
 8005234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005236:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005238:	f003 fde9 	bl	8008e0e <memcpy>
        file->cache.block = lfs->pcache.block;
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8005240:	6963      	ldr	r3, [r4, #20]
 8005242:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005244:	69a3      	ldr	r3, [r4, #24]
 8005246:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005248:	f104 0110 	add.w	r1, r4, #16
 800524c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800524e:	f7fe fab0 	bl	80037b2 <lfs_cache_zero.isra.17>
        file->block = nblock;
 8005252:	9b05      	ldr	r3, [sp, #20]
 8005254:	63ab      	str	r3, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005256:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525c:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
 800525e:	e7a0      	b.n	80051a2 <lfs_file_relocate+0x32>
        return LFS_ERR_CORRUPT;
 8005260:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8005264:	e7d0      	b.n	8005208 <lfs_file_relocate+0x98>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005266:	4606      	mov	r6, r0
 8005268:	f105 0840 	add.w	r8, r5, #64	; 0x40
                err = lfs_bd_read(lfs,
 800526c:	f104 0b68 	add.w	fp, r4, #104	; 0x68
 8005270:	e7db      	b.n	800522a <lfs_file_relocate+0xba>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005272:	9b05      	ldr	r3, [sp, #20]
 8005274:	f8cd 9000 	str.w	r9, [sp]
 8005278:	f640 4211 	movw	r2, #3089	; 0xc11
 800527c:	4903      	ldr	r1, [pc, #12]	; (800528c <lfs_file_relocate+0x11c>)
 800527e:	4804      	ldr	r0, [pc, #16]	; (8005290 <lfs_file_relocate+0x120>)
 8005280:	f004 f8a0 	bl	80093c4 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 8005284:	f04f 33ff 	mov.w	r3, #4294967295
 8005288:	6123      	str	r3, [r4, #16]
    while (true) {
 800528a:	e77a      	b.n	8005182 <lfs_file_relocate+0x12>
 800528c:	0800b193 	.word	0x0800b193
 8005290:	0800b02e 	.word	0x0800b02e
 8005294:	20100000 	.word	0x20100000
 8005298:	0800aad6 	.word	0x0800aad6

0800529c <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a0:	b09b      	sub	sp, #108	; 0x6c
 80052a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    return (lfs->cfg->block_cycles > 0
 80052a6:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80052a8:	f8bd 8094 	ldrh.w	r8, [sp, #148]	; 0x94
    return (lfs->cfg->block_cycles > 0
 80052ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ae:	688b      	ldr	r3, [r1, #8]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80052b0:	f8bd b098 	ldrh.w	fp, [sp, #152]	; 0x98
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80052b4:	2a00      	cmp	r2, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80052b6:	4604      	mov	r4, r0
 80052b8:	460d      	mov	r5, r1
 80052ba:	f103 0301 	add.w	r3, r3, #1
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80052be:	dc03      	bgt.n	80052c8 <lfs_dir_compact+0x2c>
    dir->rev += 1;
 80052c0:	608b      	str	r3, [r1, #8]
 80052c2:	2600      	movs	r6, #0
    bool relocated = false;
 80052c4:	4637      	mov	r7, r6
 80052c6:	e014      	b.n	80052f2 <lfs_dir_compact+0x56>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80052c8:	3201      	adds	r2, #1
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80052d2:	fb02 3211 	mls	r2, r2, r1, r3
    dir->rev += 1;
 80052d6:	60ab      	str	r3, [r5, #8]
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d1f2      	bne.n	80052c2 <lfs_dir_compact+0x26>
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80052dc:	2601      	movs	r6, #1
 80052de:	a90b      	add	r1, sp, #44	; 0x2c
 80052e0:	4628      	mov	r0, r5
 80052e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80052e4:	960c      	str	r6, [sp, #48]	; 0x30
 80052e6:	f7fe f9a3 	bl	8003630 <lfs_pair_cmp>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	f040 80c3 	bne.w	8005476 <lfs_dir_compact+0x1da>
    bool relocated = false;
 80052f0:	4607      	mov	r7, r0
                .end = (lfs->cfg->metadata_max ?
 80052f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                .block = dir->pair[1],
 80052f4:	6869      	ldr	r1, [r5, #4]
            struct lfs_commit commit = {
 80052f6:	9114      	str	r1, [sp, #80]	; 0x50
 80052f8:	2300      	movs	r3, #0
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
 8005302:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
                .end = (lfs->cfg->metadata_max ?
 8005306:	6c83      	ldr	r3, [r0, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005308:	b1d3      	cbz	r3, 8005340 <lfs_dir_compact+0xa4>
 800530a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800530c:	9319      	str	r3, [sp, #100]	; 0x64
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800530e:	f7fe fb4b 	bl	80039a8 <lfs_bd_erase.isra.18>
            if (err) {
 8005312:	b1b8      	cbz	r0, 8005344 <lfs_dir_compact+0xa8>
                if (err == LFS_ERR_CORRUPT) {
 8005314:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005318:	f040 80aa 	bne.w	8005470 <lfs_dir_compact+0x1d4>
    rcache->block = LFS_BLOCK_NULL;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	6123      	str	r3, [r4, #16]
        if (!tired) {
 8005322:	2e00      	cmp	r6, #0
 8005324:	f040 80aa 	bne.w	800547c <lfs_dir_compact+0x1e0>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8005328:	4b67      	ldr	r3, [pc, #412]	; (80054c8 <lfs_dir_compact+0x22c>)
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	f240 725d 	movw	r2, #1885	; 0x75d
 8005330:	686b      	ldr	r3, [r5, #4]
 8005332:	4966      	ldr	r1, [pc, #408]	; (80054cc <lfs_dir_compact+0x230>)
 8005334:	4866      	ldr	r0, [pc, #408]	; (80054d0 <lfs_dir_compact+0x234>)
 8005336:	f004 f845 	bl	80093c4 <iprintf>
 800533a:	e09f      	b.n	800547c <lfs_dir_compact+0x1e0>
        tired = false;
 800533c:	4606      	mov	r6, r0
 800533e:	e7d8      	b.n	80052f2 <lfs_dir_compact+0x56>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005340:	69c3      	ldr	r3, [r0, #28]
 8005342:	e7e2      	b.n	800530a <lfs_dir_compact+0x6e>
            err = lfs_dir_commitprog(lfs, &commit,
 8005344:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8005348:	2304      	movs	r3, #4
 800534a:	f105 0208 	add.w	r2, r5, #8
 800534e:	4649      	mov	r1, r9
 8005350:	4620      	mov	r0, r4
 8005352:	f7ff fc37 	bl	8004bc4 <lfs_dir_commitprog>
            if (err) {
 8005356:	2800      	cmp	r0, #0
 8005358:	d1dc      	bne.n	8005314 <lfs_dir_compact+0x78>
            err = lfs_dir_traverse(lfs,
 800535a:	ab0d      	add	r3, sp, #52	; 0x34
 800535c:	9307      	str	r3, [sp, #28]
 800535e:	4b5d      	ldr	r3, [pc, #372]	; (80054d4 <lfs_dir_compact+0x238>)
 8005360:	9306      	str	r3, [sp, #24]
 8005362:	f1c8 0300 	rsb	r3, r8, #0
 8005366:	b21b      	sxth	r3, r3
 8005368:	e9cd b304 	strd	fp, r3, [sp, #16]
 800536c:	4b5a      	ldr	r3, [pc, #360]	; (80054d8 <lfs_dir_compact+0x23c>)
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	9b08      	ldr	r3, [sp, #32]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4602      	mov	r2, r0
 800537a:	f8cd 800c 	str.w	r8, [sp, #12]
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	9924      	ldr	r1, [sp, #144]	; 0x90
 8005384:	4620      	mov	r0, r4
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005386:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
            err = lfs_dir_traverse(lfs,
 800538a:	f7ff f9a5 	bl	80046d8 <lfs_dir_traverse.constprop.39>
            if (err) {
 800538e:	2800      	cmp	r0, #0
 8005390:	d1c0      	bne.n	8005314 <lfs_dir_compact+0x78>
            if (!lfs_pair_isnull(dir->tail)) {
 8005392:	f105 0118 	add.w	r1, r5, #24
 8005396:	4608      	mov	r0, r1
 8005398:	f7fe f940 	bl	800361c <lfs_pair_isnull>
 800539c:	b960      	cbnz	r0, 80053b8 <lfs_dir_compact+0x11c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800539e:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
 80053a0:	460b      	mov	r3, r1
 80053a2:	494e      	ldr	r1, [pc, #312]	; (80054dc <lfs_dir_compact+0x240>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80053a4:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 80053a8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 80053ac:	4620      	mov	r0, r4
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7ff fc27 	bl	8004c02 <lfs_dir_commitattr>
                if (err) {
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1ad      	bne.n	8005314 <lfs_dir_compact+0x78>
            lfs_gstate_t delta = {0};
 80053b8:	2300      	movs	r3, #0
 80053ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80053be:	9313      	str	r3, [sp, #76]	; 0x4c
            if (!relocated) {
 80053c0:	b94f      	cbnz	r7, 80053d6 <lfs_dir_compact+0x13a>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80053c2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80053c6:	a811      	add	r0, sp, #68	; 0x44
 80053c8:	f7fe f94d 	bl	8003666 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80053cc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80053d0:	a811      	add	r0, sp, #68	; 0x44
 80053d2:	f7fe f948 	bl	8003666 <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80053d6:	f104 0a48 	add.w	sl, r4, #72	; 0x48
 80053da:	4651      	mov	r1, sl
 80053dc:	a811      	add	r0, sp, #68	; 0x44
 80053de:	f7fe f942 	bl	8003666 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80053e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053e8:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80053ec:	aa11      	add	r2, sp, #68	; 0x44
 80053ee:	4629      	mov	r1, r5
 80053f0:	4620      	mov	r0, r4
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80053f2:	9311      	str	r3, [sp, #68]	; 0x44
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80053f4:	f7fe fc90 	bl	8003d18 <lfs_dir_getgstate>
            if (err) {
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d139      	bne.n	8005470 <lfs_dir_compact+0x1d4>
            if (!lfs_gstate_iszero(&delta)) {
 80053fc:	a811      	add	r0, sp, #68	; 0x44
 80053fe:	f7fe f940 	bl	8003682 <lfs_gstate_iszero>
 8005402:	b940      	cbnz	r0, 8005416 <lfs_dir_compact+0x17a>
                err = lfs_dir_commitattr(lfs, &commit,
 8005404:	ab11      	add	r3, sp, #68	; 0x44
 8005406:	4a36      	ldr	r2, [pc, #216]	; (80054e0 <lfs_dir_compact+0x244>)
 8005408:	4649      	mov	r1, r9
 800540a:	4620      	mov	r0, r4
 800540c:	f7ff fbf9 	bl	8004c02 <lfs_dir_commitattr>
                if (err) {
 8005410:	2800      	cmp	r0, #0
 8005412:	f47f af7f 	bne.w	8005314 <lfs_dir_compact+0x78>
            err = lfs_dir_commitcrc(lfs, &commit);
 8005416:	4649      	mov	r1, r9
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff fc51 	bl	8004cc0 <lfs_dir_commitcrc>
            if (err) {
 800541e:	2800      	cmp	r0, #0
 8005420:	f47f af78 	bne.w	8005314 <lfs_dir_compact+0x78>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005424:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005428:	6999      	ldr	r1, [r3, #24]
 800542a:	fbb2 f3f1 	udiv	r3, r2, r1
 800542e:	fb01 2313 	mls	r3, r1, r3, r2
 8005432:	b133      	cbz	r3, 8005442 <lfs_dir_compact+0x1a6>
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <lfs_dir_compact+0x248>)
 8005436:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <lfs_dir_compact+0x24c>)
 8005438:	4824      	ldr	r0, [pc, #144]	; (80054cc <lfs_dir_compact+0x230>)
 800543a:	f240 714b 	movw	r1, #1867	; 0x74b
 800543e:	f003 fc59 	bl	8008cf4 <__assert_func>
    pair[0] = pair[1];
 8005442:	e9d5 1000 	ldrd	r1, r0, [r5]
            dir->off = commit.off;
 8005446:	60ea      	str	r2, [r5, #12]
            dir->count = end - begin;
 8005448:	ebab 0808 	sub.w	r8, fp, r8
            dir->etag = commit.ptag;
 800544c:	9a16      	ldr	r2, [sp, #88]	; 0x58
            dir->count = end - begin;
 800544e:	f8a5 8014 	strh.w	r8, [r5, #20]
    pair[1] = t;
 8005452:	e9c5 0100 	strd	r0, r1, [r5]
            dir->etag = commit.ptag;
 8005456:	612a      	str	r2, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 8005458:	64a3      	str	r3, [r4, #72]	; 0x48
 800545a:	e9ca 3301 	strd	r3, r3, [sl, #4]
            if (!relocated) {
 800545e:	b937      	cbnz	r7, 800546e <lfs_dir_compact+0x1d2>
                lfs->gdisk = lfs->gstate;
 8005460:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005464:	3430      	adds	r4, #48	; 0x30
 8005466:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800546a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 800546e:	4638      	mov	r0, r7
}
 8005470:	b01b      	add	sp, #108	; 0x6c
 8005472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rcache->block = LFS_BLOCK_NULL;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295
 800547a:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800547c:	f04f 0900 	mov.w	r9, #0
 8005480:	2701      	movs	r7, #1
 8005482:	a90f      	add	r1, sp, #60	; 0x3c
 8005484:	4628      	mov	r0, r5
 8005486:	e9cd 970f 	strd	r9, r7, [sp, #60]	; 0x3c
 800548a:	f7fe f8d1 	bl	8003630 <lfs_pair_cmp>
 800548e:	b958      	cbnz	r0, 80054a8 <lfs_dir_compact+0x20c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8005490:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <lfs_dir_compact+0x22c>)
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	f240 7263 	movw	r2, #1891	; 0x763
 8005498:	686b      	ldr	r3, [r5, #4]
 800549a:	490c      	ldr	r1, [pc, #48]	; (80054cc <lfs_dir_compact+0x230>)
 800549c:	4813      	ldr	r0, [pc, #76]	; (80054ec <lfs_dir_compact+0x250>)
 800549e:	f003 ff91 	bl	80093c4 <iprintf>
            return LFS_ERR_NOSPC;
 80054a2:	f06f 001b 	mvn.w	r0, #27
 80054a6:	e7e3      	b.n	8005470 <lfs_dir_compact+0x1d4>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80054a8:	1d29      	adds	r1, r5, #4
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7ff fda6 	bl	8004ffc <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80054b0:	2800      	cmp	r0, #0
 80054b2:	f43f af43 	beq.w	800533c <lfs_dir_compact+0xa0>
 80054b6:	f110 0f1c 	cmn.w	r0, #28
 80054ba:	d1d9      	bne.n	8005470 <lfs_dir_compact+0x1d4>
 80054bc:	2e00      	cmp	r6, #0
 80054be:	d0d7      	beq.n	8005470 <lfs_dir_compact+0x1d4>
        relocated = true;
 80054c0:	4637      	mov	r7, r6
        tired = false;
 80054c2:	464e      	mov	r6, r9
 80054c4:	e715      	b.n	80052f2 <lfs_dir_compact+0x56>
 80054c6:	bf00      	nop
 80054c8:	0800aad6 	.word	0x0800aad6
 80054cc:	0800b193 	.word	0x0800b193
 80054d0:	0800b02e 	.word	0x0800b02e
 80054d4:	08004cb3 	.word	0x08004cb3
 80054d8:	400ffc00 	.word	0x400ffc00
 80054dc:	000ffc08 	.word	0x000ffc08
 80054e0:	7ffffc0c 	.word	0x7ffffc0c
 80054e4:	0800ad85 	.word	0x0800ad85
 80054e8:	0800abcb 	.word	0x0800abcb
 80054ec:	0800adab 	.word	0x0800adab

080054f0 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80054f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054f4:	b08d      	sub	sp, #52	; 0x34
 80054f6:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
 80054f8:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80054fa:	4605      	mov	r5, r0
 80054fc:	4617      	mov	r7, r2
 80054fe:	4698      	mov	r8, r3
 8005500:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 8005504:	f7ff fdf2 	bl	80050ec <lfs_dir_alloc>
    if (err) {
 8005508:	4606      	mov	r6, r0
 800550a:	bb38      	cbnz	r0, 800555c <lfs_dir_split+0x6c>
    tail.split = dir->split;
 800550c:	7de3      	ldrb	r3, [r4, #23]
 800550e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8005512:	69a3      	ldr	r3, [r4, #24]
 8005514:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8005516:	69e3      	ldr	r3, [r4, #28]
 8005518:	930b      	str	r3, [sp, #44]	; 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800551a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800551e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	463a      	mov	r2, r7
 8005528:	4643      	mov	r3, r8
 800552a:	a904      	add	r1, sp, #16
 800552c:	4628      	mov	r0, r5
 800552e:	f7ff feb5 	bl	800529c <lfs_dir_compact>
    if (res < 0) {
 8005532:	2800      	cmp	r0, #0
 8005534:	db16      	blt.n	8005564 <lfs_dir_split+0x74>
    dir->tail[0] = tail.pair[0];
 8005536:	f8dd 8010 	ldr.w	r8, [sp, #16]
    dir->tail[1] = tail.pair[1];
 800553a:	9f05      	ldr	r7, [sp, #20]
    dir->tail[0] = tail.pair[0];
 800553c:	f8c4 8018 	str.w	r8, [r4, #24]
    dir->split = true;
 8005540:	2301      	movs	r3, #1
    dir->tail[1] = tail.pair[1];
 8005542:	61e7      	str	r7, [r4, #28]
    dir->split = true;
 8005544:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8005546:	f105 0120 	add.w	r1, r5, #32
 800554a:	4620      	mov	r0, r4
 800554c:	f7fe f870 	bl	8003630 <lfs_pair_cmp>
 8005550:	b920      	cbnz	r0, 800555c <lfs_dir_split+0x6c>
 8005552:	f1b9 0f00 	cmp.w	r9, #0
 8005556:	d101      	bne.n	800555c <lfs_dir_split+0x6c>
        lfs->root[1] = tail.pair[1];
 8005558:	e9c5 8708 	strd	r8, r7, [r5, #32]
}
 800555c:	4630      	mov	r0, r6
 800555e:	b00d      	add	sp, #52	; 0x34
 8005560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005564:	4606      	mov	r6, r0
 8005566:	e7f9      	b.n	800555c <lfs_dir_split+0x6c>

08005568 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8005568:	b507      	push	{r0, r1, r2, lr}
    lfs_size_t size = 0;
 800556a:	aa02      	add	r2, sp, #8
 800556c:	2300      	movs	r3, #0
 800556e:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8005572:	4904      	ldr	r1, [pc, #16]	; (8005584 <lfs_fs_rawsize+0x1c>)
 8005574:	f7ff fc96 	bl	8004ea4 <lfs_fs_rawtraverse>
    if (err) {
 8005578:	b900      	cbnz	r0, 800557c <lfs_fs_rawsize+0x14>
        return err;
    }

    return size;
 800557a:	9801      	ldr	r0, [sp, #4]
}
 800557c:	b003      	add	sp, #12
 800557e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005582:	bf00      	nop
 8005584:	0800377d 	.word	0x0800377d

08005588 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	b097      	sub	sp, #92	; 0x5c
    for (int i = 0; i < attrcount; i++) {
 800558e:	2700      	movs	r7, #0
        lfs_mdir_t *pdir) {
 8005590:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005594:	9208      	str	r2, [sp, #32]
 8005596:	4606      	mov	r6, r0
 8005598:	460d      	mov	r5, r1
 800559a:	469b      	mov	fp, r3
    bool hasdelete = false;
 800559c:	4638      	mov	r0, r7
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800559e:	f240 4401 	movw	r4, #1025	; 0x401
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80055a2:	f240 4cff 	movw	ip, #1279	; 0x4ff
    for (int i = 0; i < attrcount; i++) {
 80055a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055a8:	429f      	cmp	r7, r3
 80055aa:	f040 8088 	bne.w	80056be <lfs_dir_relocatingcommit+0x136>
    if (hasdelete && dir->count == 0) {
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f040 80b1 	bne.w	8005716 <lfs_dir_relocatingcommit+0x18e>
    if (dir->erased) {
 80055b4:	7dab      	ldrb	r3, [r5, #22]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 80ce 	bne.w	8005758 <lfs_dir_relocatingcommit+0x1d0>
    rcache->block = LFS_BLOCK_NULL;
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80055c0:	f8b5 9014 	ldrh.w	r9, [r5, #20]
    rcache->block = LFS_BLOCK_NULL;
 80055c4:	6133      	str	r3, [r6, #16]
        lfs_size_t split = begin;
 80055c6:	f04f 0800 	mov.w	r8, #0
        while (end - split > 1) {
 80055ca:	eba9 0a08 	sub.w	sl, r9, r8
 80055ce:	f1ba 0f01 	cmp.w	sl, #1
 80055d2:	f200 8171 	bhi.w	80058b8 <lfs_dir_relocatingcommit+0x330>
        if (split == begin) {
 80055d6:	f1b8 0f00 	cmp.w	r8, #0
 80055da:	d01c      	beq.n	8005616 <lfs_dir_relocatingcommit+0x8e>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80055dc:	fa1f f888 	uxth.w	r8, r8
 80055e0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80055e4:	9500      	str	r5, [sp, #0]
 80055e6:	463b      	mov	r3, r7
 80055e8:	465a      	mov	r2, fp
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7ff ff7f 	bl	80054f0 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 80055f2:	4604      	mov	r4, r0
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f000 8146 	beq.w	8005886 <lfs_dir_relocatingcommit+0x2fe>
 80055fa:	f110 0f1c 	cmn.w	r0, #28
 80055fe:	d15a      	bne.n	80056b6 <lfs_dir_relocatingcommit+0x12e>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8005600:	4ba2      	ldr	r3, [pc, #648]	; (800588c <lfs_dir_relocatingcommit+0x304>)
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	686b      	ldr	r3, [r5, #4]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f240 72ad 	movw	r2, #1965	; 0x7ad
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	49a0      	ldr	r1, [pc, #640]	; (8005890 <lfs_dir_relocatingcommit+0x308>)
 8005610:	48a0      	ldr	r0, [pc, #640]	; (8005894 <lfs_dir_relocatingcommit+0x30c>)
 8005612:	f003 fed7 	bl	80093c4 <iprintf>
    return (lfs->cfg->block_cycles > 0
 8005616:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800561a:	2b00      	cmp	r3, #0
 800561c:	dd3f      	ble.n	800569e <lfs_dir_relocatingcommit+0x116>
 800561e:	68a9      	ldr	r1, [r5, #8]
 8005620:	3301      	adds	r3, #1
 8005622:	3101      	adds	r1, #1
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	fbb1 f2f3 	udiv	r2, r1, r3
 800562c:	fb03 1312 	mls	r3, r3, r2, r1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d134      	bne.n	800569e <lfs_dir_relocatingcommit+0x116>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005634:	9310      	str	r3, [sp, #64]	; 0x40
 8005636:	a910      	add	r1, sp, #64	; 0x40
 8005638:	2301      	movs	r3, #1
 800563a:	4628      	mov	r0, r5
 800563c:	9311      	str	r3, [sp, #68]	; 0x44
 800563e:	f7fd fff7 	bl	8003630 <lfs_pair_cmp>
 8005642:	4682      	mov	sl, r0
 8005644:	bb58      	cbnz	r0, 800569e <lfs_dir_relocatingcommit+0x116>
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8005646:	4630      	mov	r0, r6
 8005648:	f7ff ff8e 	bl	8005568 <lfs_fs_rawsize>
        if (size < 0) {
 800564c:	1e04      	subs	r4, r0, #0
 800564e:	db78      	blt.n	8005742 <lfs_dir_relocatingcommit+0x1ba>
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8005650:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8005658:	d221      	bcs.n	800569e <lfs_dir_relocatingcommit+0x116>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800565a:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800588c <lfs_dir_relocatingcommit+0x304>
 800565e:	68ab      	ldr	r3, [r5, #8]
 8005660:	498b      	ldr	r1, [pc, #556]	; (8005890 <lfs_dir_relocatingcommit+0x308>)
 8005662:	f8cd 8000 	str.w	r8, [sp]
 8005666:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800566a:	488b      	ldr	r0, [pc, #556]	; (8005898 <lfs_dir_relocatingcommit+0x310>)
 800566c:	f003 feaa 	bl	80093c4 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005670:	e9cd a901 	strd	sl, r9, [sp, #4]
 8005674:	9500      	str	r5, [sp, #0]
 8005676:	463b      	mov	r3, r7
 8005678:	465a      	mov	r2, fp
 800567a:	4629      	mov	r1, r5
 800567c:	4630      	mov	r0, r6
 800567e:	f7ff ff37 	bl	80054f0 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 8005682:	4604      	mov	r4, r0
 8005684:	2800      	cmp	r0, #0
 8005686:	f000 8153 	beq.w	8005930 <lfs_dir_relocatingcommit+0x3a8>
 800568a:	f110 0f1c 	cmn.w	r0, #28
 800568e:	d112      	bne.n	80056b6 <lfs_dir_relocatingcommit+0x12e>
                LFS_WARN("Unable to expand superblock");
 8005690:	4643      	mov	r3, r8
 8005692:	f240 72ca 	movw	r2, #1994	; 0x7ca
 8005696:	497e      	ldr	r1, [pc, #504]	; (8005890 <lfs_dir_relocatingcommit+0x308>)
 8005698:	4880      	ldr	r0, [pc, #512]	; (800589c <lfs_dir_relocatingcommit+0x314>)
 800569a:	f003 fe93 	bl	80093c4 <iprintf>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800569e:	2300      	movs	r3, #0
 80056a0:	e9cd 5300 	strd	r5, r3, [sp]
 80056a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80056a8:	463b      	mov	r3, r7
 80056aa:	465a      	mov	r2, fp
 80056ac:	4629      	mov	r1, r5
 80056ae:	4630      	mov	r0, r6
 80056b0:	f7ff fdf4 	bl	800529c <lfs_dir_compact>
 80056b4:	4604      	mov	r4, r0
    if (state < 0) {
 80056b6:	2c00      	cmp	r4, #0
 80056b8:	f280 80cd 	bge.w	8005856 <lfs_dir_relocatingcommit+0x2ce>
 80056bc:	e041      	b.n	8005742 <lfs_dir_relocatingcommit+0x1ba>
    return (tag & 0x7ff00000) >> 20;
 80056be:	f85b 3037 	ldr.w	r3, [fp, r7, lsl #3]
 80056c2:	0d1b      	lsrs	r3, r3, #20
 80056c4:	b299      	uxth	r1, r3
 80056c6:	f3c1 0e0a 	ubfx	lr, r1, #0, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80056ca:	45a6      	cmp	lr, r4
 80056cc:	d104      	bne.n	80056d8 <lfs_dir_relocatingcommit+0x150>
            dir->count += 1;
 80056ce:	8aab      	ldrh	r3, [r5, #20]
 80056d0:	3301      	adds	r3, #1
 80056d2:	82ab      	strh	r3, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
 80056d4:	3701      	adds	r7, #1
 80056d6:	e766      	b.n	80055a6 <lfs_dir_relocatingcommit+0x1e>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80056d8:	45e6      	cmp	lr, ip
 80056da:	d10c      	bne.n	80056f6 <lfs_dir_relocatingcommit+0x16e>
            LFS_ASSERT(dir->count > 0);
 80056dc:	8aab      	ldrh	r3, [r5, #20]
 80056de:	b933      	cbnz	r3, 80056ee <lfs_dir_relocatingcommit+0x166>
 80056e0:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <lfs_dir_relocatingcommit+0x318>)
 80056e2:	4a70      	ldr	r2, [pc, #448]	; (80058a4 <lfs_dir_relocatingcommit+0x31c>)
 80056e4:	f240 71e2 	movw	r1, #2018	; 0x7e2
        LFS_ASSERT(pdir);
 80056e8:	4869      	ldr	r0, [pc, #420]	; (8005890 <lfs_dir_relocatingcommit+0x308>)
 80056ea:	f003 fb03 	bl	8008cf4 <__assert_func>
            dir->count -= 1;
 80056ee:	3b01      	subs	r3, #1
 80056f0:	82ab      	strh	r3, [r5, #20]
            hasdelete = true;
 80056f2:	2001      	movs	r0, #1
 80056f4:	e7ee      	b.n	80056d4 <lfs_dir_relocatingcommit+0x14c>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80056f6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
 80056fa:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80056fe:	d1e9      	bne.n	80056d4 <lfs_dir_relocatingcommit+0x14c>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005700:	eb0b 01c7 	add.w	r1, fp, r7, lsl #3
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005704:	f003 0301 	and.w	r3, r3, #1
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005708:	684a      	ldr	r2, [r1, #4]
 800570a:	6811      	ldr	r1, [r2, #0]
 800570c:	61a9      	str	r1, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800570e:	6851      	ldr	r1, [r2, #4]
 8005710:	61e9      	str	r1, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005712:	75eb      	strb	r3, [r5, #23]
 8005714:	e7de      	b.n	80056d4 <lfs_dir_relocatingcommit+0x14c>
    if (hasdelete && dir->count == 0) {
 8005716:	8aab      	ldrh	r3, [r5, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f47f af4b 	bne.w	80055b4 <lfs_dir_relocatingcommit+0x2c>
        LFS_ASSERT(pdir);
 800571e:	f1b8 0f00 	cmp.w	r8, #0
 8005722:	d104      	bne.n	800572e <lfs_dir_relocatingcommit+0x1a6>
 8005724:	4b60      	ldr	r3, [pc, #384]	; (80058a8 <lfs_dir_relocatingcommit+0x320>)
 8005726:	4a5f      	ldr	r2, [pc, #380]	; (80058a4 <lfs_dir_relocatingcommit+0x31c>)
 8005728:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800572c:	e7dc      	b.n	80056e8 <lfs_dir_relocatingcommit+0x160>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800572e:	4642      	mov	r2, r8
 8005730:	4629      	mov	r1, r5
 8005732:	4630      	mov	r0, r6
 8005734:	f7fe fd73 	bl	800421e <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 8005738:	4604      	mov	r4, r0
 800573a:	b130      	cbz	r0, 800574a <lfs_dir_relocatingcommit+0x1c2>
 800573c:	1c83      	adds	r3, r0, #2
 800573e:	f43f af39 	beq.w	80055b4 <lfs_dir_relocatingcommit+0x2c>
}
 8005742:	4620      	mov	r0, r4
 8005744:	b017      	add	sp, #92	; 0x5c
 8005746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err != LFS_ERR_NOENT && pdir->split) {
 800574a:	f898 3017 	ldrb.w	r3, [r8, #23]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f43f af30 	beq.w	80055b4 <lfs_dir_relocatingcommit+0x2c>
            state = LFS_OK_DROPPED;
 8005754:	2402      	movs	r4, #2
 8005756:	e07e      	b.n	8005856 <lfs_dir_relocatingcommit+0x2ce>
            .off = dir->off,
 8005758:	68ea      	ldr	r2, [r5, #12]
            .end = (lfs->cfg->metadata_max ?
 800575a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
        struct lfs_commit commit = {
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	9310      	str	r3, [sp, #64]	; 0x40
 8005760:	f04f 31ff 	mov.w	r1, #4294967295
 8005764:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
            .end = (lfs->cfg->metadata_max ?
 8005768:	6c81      	ldr	r1, [r0, #72]	; 0x48
            .ptag = dir->etag,
 800576a:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
 800576c:	9211      	str	r2, [sp, #68]	; 0x44
 800576e:	9312      	str	r3, [sp, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005770:	b1f9      	cbz	r1, 80057b2 <lfs_dir_relocatingcommit+0x22a>
 8005772:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 8005774:	9115      	str	r1, [sp, #84]	; 0x54
        int err = lfs_dir_traverse(lfs,
 8005776:	a90b      	add	r1, sp, #44	; 0x2c
 8005778:	9107      	str	r1, [sp, #28]
 800577a:	494c      	ldr	r1, [pc, #304]	; (80058ac <lfs_dir_relocatingcommit+0x324>)
 800577c:	9106      	str	r1, [sp, #24]
 800577e:	2100      	movs	r1, #0
 8005780:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005784:	e9cd 1102 	strd	r1, r1, [sp, #8]
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005788:	f10d 0840 	add.w	r8, sp, #64	; 0x40
        int err = lfs_dir_traverse(lfs,
 800578c:	e9cd b700 	strd	fp, r7, [sp]
 8005790:	4629      	mov	r1, r5
 8005792:	4630      	mov	r0, r6
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005794:	960b      	str	r6, [sp, #44]	; 0x2c
 8005796:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
        int err = lfs_dir_traverse(lfs,
 800579a:	f7fe ff9d 	bl	80046d8 <lfs_dir_traverse.constprop.39>
        if (err) {
 800579e:	4604      	mov	r4, r0
 80057a0:	b148      	cbz	r0, 80057b6 <lfs_dir_relocatingcommit+0x22e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80057a2:	f114 0f1c 	cmn.w	r4, #28
 80057a6:	f43f af09 	beq.w	80055bc <lfs_dir_relocatingcommit+0x34>
 80057aa:	f114 0f54 	cmn.w	r4, #84	; 0x54
 80057ae:	d1c8      	bne.n	8005742 <lfs_dir_relocatingcommit+0x1ba>
 80057b0:	e704      	b.n	80055bc <lfs_dir_relocatingcommit+0x34>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80057b2:	69c1      	ldr	r1, [r0, #28]
 80057b4:	e7dd      	b.n	8005772 <lfs_dir_relocatingcommit+0x1ea>
        lfs_gstate_xor(&delta, &lfs->gstate);
 80057b6:	f106 0930 	add.w	r9, r6, #48	; 0x30
        lfs_gstate_t delta = {0};
 80057ba:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 80057be:	900f      	str	r0, [sp, #60]	; 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 80057c0:	4649      	mov	r1, r9
 80057c2:	a80d      	add	r0, sp, #52	; 0x34
 80057c4:	f7fd ff4f 	bl	8003666 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80057c8:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80057cc:	4619      	mov	r1, r3
 80057ce:	a80d      	add	r0, sp, #52	; 0x34
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80057d0:	f106 0a48 	add.w	sl, r6, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80057d4:	9309      	str	r3, [sp, #36]	; 0x24
 80057d6:	f7fd ff46 	bl	8003666 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80057da:	a80d      	add	r0, sp, #52	; 0x34
 80057dc:	4651      	mov	r1, sl
 80057de:	f7fd ff42 	bl	8003666 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80057e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057e8:	f023 0303 	bic.w	r3, r3, #3
        if (!lfs_gstate_iszero(&delta)) {
 80057ec:	a80d      	add	r0, sp, #52	; 0x34
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80057ee:	930d      	str	r3, [sp, #52]	; 0x34
        if (!lfs_gstate_iszero(&delta)) {
 80057f0:	f7fd ff47 	bl	8003682 <lfs_gstate_iszero>
 80057f4:	b980      	cbnz	r0, 8005818 <lfs_dir_relocatingcommit+0x290>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80057f6:	aa0d      	add	r2, sp, #52	; 0x34
 80057f8:	4629      	mov	r1, r5
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7fe fa8c 	bl	8003d18 <lfs_dir_getgstate>
            if (err) {
 8005800:	4604      	mov	r4, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	d19d      	bne.n	8005742 <lfs_dir_relocatingcommit+0x1ba>
            err = lfs_dir_commitattr(lfs, &commit,
 8005806:	ab0d      	add	r3, sp, #52	; 0x34
 8005808:	4a29      	ldr	r2, [pc, #164]	; (80058b0 <lfs_dir_relocatingcommit+0x328>)
 800580a:	4641      	mov	r1, r8
 800580c:	4630      	mov	r0, r6
 800580e:	f7ff f9f8 	bl	8004c02 <lfs_dir_commitattr>
            if (err) {
 8005812:	4604      	mov	r4, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d1c4      	bne.n	80057a2 <lfs_dir_relocatingcommit+0x21a>
        err = lfs_dir_commitcrc(lfs, &commit);
 8005818:	4641      	mov	r1, r8
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff fa50 	bl	8004cc0 <lfs_dir_commitcrc>
        if (err) {
 8005820:	4604      	mov	r4, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d1bd      	bne.n	80057a2 <lfs_dir_relocatingcommit+0x21a>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005826:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8005828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800582a:	6991      	ldr	r1, [r2, #24]
 800582c:	fbb3 f2f1 	udiv	r2, r3, r1
 8005830:	fb01 3212 	mls	r2, r1, r2, r3
 8005834:	b122      	cbz	r2, 8005840 <lfs_dir_relocatingcommit+0x2b8>
 8005836:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <lfs_dir_relocatingcommit+0x32c>)
 8005838:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <lfs_dir_relocatingcommit+0x31c>)
 800583a:	f640 0139 	movw	r1, #2105	; 0x839
 800583e:	e753      	b.n	80056e8 <lfs_dir_relocatingcommit+0x160>
        lfs->gdisk = lfs->gstate;
 8005840:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
        dir->off = commit.off;
 8005844:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
 8005846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005848:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
 800584a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005850:	64b4      	str	r4, [r6, #72]	; 0x48
 8005852:	e9ca 4401 	strd	r4, r4, [sl, #4]
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005856:	9b08      	ldr	r3, [sp, #32]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005858:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	930d      	str	r3, [sp, #52]	; 0x34
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	930e      	str	r3, [sp, #56]	; 0x38
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	f43f af6a 	beq.w	8005742 <lfs_dir_relocatingcommit+0x1ba>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800586e:	f108 0908 	add.w	r9, r8, #8
 8005872:	a90d      	add	r1, sp, #52	; 0x34
 8005874:	4648      	mov	r0, r9
 8005876:	f7fd fedb 	bl	8003630 <lfs_pair_cmp>
 800587a:	4682      	mov	sl, r0
 800587c:	2800      	cmp	r0, #0
 800587e:	d059      	beq.n	8005934 <lfs_dir_relocatingcommit+0x3ac>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005880:	f8d8 8000 	ldr.w	r8, [r8]
 8005884:	e7ef      	b.n	8005866 <lfs_dir_relocatingcommit+0x2de>
            end = split;
 8005886:	46c1      	mov	r9, r8
 8005888:	e69d      	b.n	80055c6 <lfs_dir_relocatingcommit+0x3e>
 800588a:	bf00      	nop
 800588c:	0800aad6 	.word	0x0800aad6
 8005890:	0800b193 	.word	0x0800b193
 8005894:	0800af0a 	.word	0x0800af0a
 8005898:	0800af39 	.word	0x0800af39
 800589c:	0800af6a 	.word	0x0800af6a
 80058a0:	0800aef6 	.word	0x0800aef6
 80058a4:	0800abdb 	.word	0x0800abdb
 80058a8:	0800af05 	.word	0x0800af05
 80058ac:	08004cb3 	.word	0x08004cb3
 80058b0:	7ffffc0c 	.word	0x7ffffc0c
 80058b4:	0800ad85 	.word	0x0800ad85
            lfs_size_t size = 0;
 80058b8:	ab16      	add	r3, sp, #88	; 0x58
 80058ba:	2200      	movs	r2, #0
 80058bc:	f843 2d18 	str.w	r2, [r3, #-24]!
            int err = lfs_dir_traverse(lfs,
 80058c0:	fa1f f288 	uxth.w	r2, r8
 80058c4:	9307      	str	r3, [sp, #28]
 80058c6:	4b4a      	ldr	r3, [pc, #296]	; (80059f0 <lfs_dir_relocatingcommit+0x468>)
 80058c8:	9306      	str	r3, [sp, #24]
 80058ca:	4253      	negs	r3, r2
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	e9cd 9304 	strd	r9, r3, [sp, #16]
 80058d2:	4b48      	ldr	r3, [pc, #288]	; (80059f4 <lfs_dir_relocatingcommit+0x46c>)
 80058d4:	9203      	str	r2, [sp, #12]
 80058d6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80058da:	f8cd b000 	str.w	fp, [sp]
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	2200      	movs	r2, #0
 80058e4:	4629      	mov	r1, r5
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7fe fef6 	bl	80046d8 <lfs_dir_traverse.constprop.39>
            if (err) {
 80058ec:	4604      	mov	r4, r0
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f47f aee1 	bne.w	80056b6 <lfs_dir_relocatingcommit+0x12e>
            if (end - split < 0xff
 80058f4:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
 80058f8:	d815      	bhi.n	8005926 <lfs_dir_relocatingcommit+0x39e>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80058fa:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 80058fc:	69d1      	ldr	r1, [r2, #28]
                            (lfs->cfg->metadata_max
 80058fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005900:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
 8005904:	b193      	cbz	r3, 800592c <lfs_dir_relocatingcommit+0x3a4>
 8005906:	0859      	lsrs	r1, r3, #1
 8005908:	6994      	ldr	r4, [r2, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800590a:	1e62      	subs	r2, r4, #1
 800590c:	1853      	adds	r3, r2, r1
    return a - (a % alignment);
 800590e:	fbb3 f2f4 	udiv	r2, r3, r4
 8005912:	fb04 3212 	mls	r2, r4, r2, r3
 8005916:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
 8005918:	4283      	cmp	r3, r0
 800591a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800591c:	bf28      	it	cs
 800591e:	4603      	movcs	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	f4bf ae58 	bcs.w	80055d6 <lfs_dir_relocatingcommit+0x4e>
            split = split + ((end - split) / 2);
 8005926:	eb08 085a 	add.w	r8, r8, sl, lsr #1
 800592a:	e64e      	b.n	80055ca <lfs_dir_relocatingcommit+0x42>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800592c:	0849      	lsrs	r1, r1, #1
 800592e:	e7eb      	b.n	8005908 <lfs_dir_relocatingcommit+0x380>
                end = begin;
 8005930:	4681      	mov	r9, r0
 8005932:	e6b4      	b.n	800569e <lfs_dir_relocatingcommit+0x116>
            d->m = *dir;
 8005934:	46ae      	mov	lr, r5
 8005936:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800593a:	46cc      	mov	ip, r9
 800593c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005940:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005944:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	4599      	cmp	r9, r3
 800594c:	d007      	beq.n	800595e <lfs_dir_relocatingcommit+0x3d6>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800594e:	f240 4001 	movw	r0, #1025	; 0x401
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005952:	f04f 31ff 	mov.w	r1, #4294967295
                for (int i = 0; i < attrcount; i++) {
 8005956:	4557      	cmp	r7, sl
 8005958:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800595c:	d117      	bne.n	800598e <lfs_dir_relocatingcommit+0x406>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800595e:	f108 0a20 	add.w	sl, r8, #32
            while (d->id >= d->m.count && d->m.split) {
 8005962:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005966:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 800596a:	4293      	cmp	r3, r2
 800596c:	d388      	bcc.n	8005880 <lfs_dir_relocatingcommit+0x2f8>
 800596e:	f898 101f 	ldrb.w	r1, [r8, #31]
 8005972:	2900      	cmp	r1, #0
 8005974:	d084      	beq.n	8005880 <lfs_dir_relocatingcommit+0x2f8>
                d->id -= d->m.count;
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800597c:	4652      	mov	r2, sl
 800597e:	4649      	mov	r1, r9
 8005980:	4630      	mov	r0, r6
 8005982:	f7fe fc3f 	bl	8004204 <lfs_dir_fetch>
                if (err) {
 8005986:	2800      	cmp	r0, #0
 8005988:	d0eb      	beq.n	8005962 <lfs_dir_relocatingcommit+0x3da>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800598a:	4604      	mov	r4, r0
 800598c:	e6d9      	b.n	8005742 <lfs_dir_relocatingcommit+0x1ba>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800598e:	f85b 203a 	ldr.w	r2, [fp, sl, lsl #3]
 8005992:	f240 4eff 	movw	lr, #1279	; 0x4ff
    return (tag & 0x7ff00000) >> 20;
 8005996:	f3c2 5c0a 	ubfx	ip, r2, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800599a:	45f4      	cmp	ip, lr
 800599c:	d116      	bne.n	80059cc <lfs_dir_relocatingcommit+0x444>
    return (tag & 0x000ffc00) >> 10;
 800599e:	f3c2 2289 	ubfx	r2, r2, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d104      	bne.n	80059b0 <lfs_dir_relocatingcommit+0x428>
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80059a6:	e9c8 1102 	strd	r1, r1, [r8, #8]
                for (int i = 0; i < attrcount; i++) {
 80059aa:	f10a 0a01 	add.w	sl, sl, #1
 80059ae:	e7d2      	b.n	8005956 <lfs_dir_relocatingcommit+0x3ce>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80059b0:	d9fb      	bls.n	80059aa <lfs_dir_relocatingcommit+0x422>
                        d->id -= 1;
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80059b8:	f898 3006 	ldrb.w	r3, [r8, #6]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d1f4      	bne.n	80059aa <lfs_dir_relocatingcommit+0x422>
                            ((lfs_dir_t*)d)->pos -= 1;
 80059c0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80059c4:	3b01      	subs	r3, #1
                            ((lfs_dir_t*)d)->pos += 1;
 80059c6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 80059ca:	e7ee      	b.n	80059aa <lfs_dir_relocatingcommit+0x422>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80059cc:	4584      	cmp	ip, r0
 80059ce:	d1ec      	bne.n	80059aa <lfs_dir_relocatingcommit+0x422>
 80059d0:	f3c2 2289 	ubfx	r2, r2, #10, #10
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d3e8      	bcc.n	80059aa <lfs_dir_relocatingcommit+0x422>
                        d->id += 1;
 80059d8:	3301      	adds	r3, #1
 80059da:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80059de:	f898 3006 	ldrb.w	r3, [r8, #6]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d1e1      	bne.n	80059aa <lfs_dir_relocatingcommit+0x422>
                            ((lfs_dir_t*)d)->pos += 1;
 80059e6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80059ea:	3301      	adds	r3, #1
 80059ec:	e7eb      	b.n	80059c6 <lfs_dir_relocatingcommit+0x43e>
 80059ee:	bf00      	nop
 80059f0:	08003769 	.word	0x08003769
 80059f4:	400ffc00 	.word	0x400ffc00

080059f8 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	b08f      	sub	sp, #60	; 0x3c
 80059fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
    if ((file->flags & LFS_F_INLINE) &&
 8005a02:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
 8005a04:	460c      	mov	r4, r1
    if ((file->flags & LFS_F_INLINE) &&
 8005a06:	02d9      	lsls	r1, r3, #11
        const void *buffer, lfs_size_t size) {
 8005a08:	4606      	mov	r6, r0
    if ((file->flags & LFS_F_INLINE) &&
 8005a0a:	d523      	bpl.n	8005a54 <lfs_file_flushedwrite+0x5c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005a0c:	9b06      	ldr	r3, [sp, #24]
 8005a0e:	6b65      	ldr	r5, [r4, #52]	; 0x34
                lfs->cfg->cache_size,
 8005a10:	6eb1      	ldr	r1, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005a12:	18e8      	adds	r0, r5, r3
    return (a > b) ? a : b;
 8005a14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_min(0x3fe, lfs_min(
 8005a16:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005a18:	4298      	cmp	r0, r3
 8005a1a:	bf38      	it	cc
 8005a1c:	4618      	movcc	r0, r3
                (lfs->cfg->metadata_max ?
 8005a1e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005a20:	b1fb      	cbz	r3, 8005a62 <lfs_file_flushedwrite+0x6a>
    return (a < b) ? a : b;
 8005a22:	f240 37fe 	movw	r7, #1022	; 0x3fe
 8005a26:	42ba      	cmp	r2, r7
 8005a28:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005a2c:	bf28      	it	cs
 8005a2e:	463a      	movcs	r2, r7
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bf28      	it	cs
 8005a34:	4613      	movcs	r3, r2
    if ((file->flags & LFS_F_INLINE) &&
 8005a36:	4283      	cmp	r3, r0
 8005a38:	d20c      	bcs.n	8005a54 <lfs_file_flushedwrite+0x5c>
    lfs->free.ack = lfs->cfg->block_count;
 8005a3a:	6a0b      	ldr	r3, [r1, #32]
    file->off = file->pos;
 8005a3c:	63e5      	str	r5, [r4, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
 8005a3e:	4621      	mov	r1, r4
    lfs->free.ack = lfs->cfg->block_count;
 8005a40:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff fb94 	bl	8005170 <lfs_file_relocate>
 8005a48:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if (err) {
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	bb68      	cbnz	r0, 8005aaa <lfs_file_flushedwrite+0xb2>
    file->flags &= ~LFS_F_INLINE;
 8005a4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a52:	6323      	str	r3, [r4, #48]	; 0x30
            for (lfs_off_t i = 0; i < skips; i++) {
 8005a54:	f8dd b018 	ldr.w	fp, [sp, #24]
    while (nsize > 0) {
 8005a58:	f1bb 0f00 	cmp.w	fp, #0
 8005a5c:	d103      	bne.n	8005a66 <lfs_file_flushedwrite+0x6e>
    return size;
 8005a5e:	9d06      	ldr	r5, [sp, #24]
 8005a60:	e026      	b.n	8005ab0 <lfs_file_flushedwrite+0xb8>
            lfs_min(0x3fe, lfs_min(
 8005a62:	69cb      	ldr	r3, [r1, #28]
 8005a64:	e7dd      	b.n	8005a22 <lfs_file_flushedwrite+0x2a>
        if (!(file->flags & LFS_F_WRITING) ||
 8005a66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a68:	f412 3100 	ands.w	r1, r2, #131072	; 0x20000
 8005a6c:	d004      	beq.n	8005a78 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8005a6e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
 8005a70:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	4298      	cmp	r0, r3
 8005a76:	d153      	bne.n	8005b20 <lfs_file_flushedwrite+0x128>
            if (!(file->flags & LFS_F_INLINE)) {
 8005a78:	02d2      	lsls	r2, r2, #11
 8005a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a7c:	f100 80f2 	bmi.w	8005c64 <lfs_file_flushedwrite+0x26c>
 8005a80:	f104 0a40 	add.w	sl, r4, #64	; 0x40
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005a84:	b9e1      	cbnz	r1, 8005ac0 <lfs_file_flushedwrite+0xc8>
 8005a86:	b1db      	cbz	r3, 8005ac0 <lfs_file_flushedwrite+0xc8>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a88:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8005a8c:	9202      	str	r2, [sp, #8]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8005a94:	9201      	str	r2, [sp, #4]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4651      	mov	r1, sl
 8005a9a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7fe fd04 	bl	80044ac <lfs_ctz_find.constprop.35>
                    if (err) {
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	b138      	cbz	r0, 8005ab8 <lfs_file_flushedwrite+0xc0>
                file->flags |= LFS_F_ERRED;
 8005aa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aae:	6323      	str	r3, [r4, #48]	; 0x30
}
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	b00f      	add	sp, #60	; 0x3c
 8005ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    lfs_cache_zero(lfs, &file->cache);
 8005ab8:	4651      	mov	r1, sl
 8005aba:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8005abc:	f7fd fe79 	bl	80037b2 <lfs_cache_zero.isra.17>
    lfs->free.ack = lfs->cfg->block_count;
 8005ac0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ac8:	9307      	str	r3, [sp, #28]
 8005aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005acc:	9304      	str	r3, [sp, #16]
        int err = lfs_alloc(lfs, &nblock);
 8005ace:	a90b      	add	r1, sp, #44	; 0x2c
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f7ff fa93 	bl	8004ffc <lfs_alloc>
        if (err) {
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d1e5      	bne.n	8005aa8 <lfs_file_flushedwrite+0xb0>
            err = lfs_bd_erase(lfs, nblock);
 8005adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ade:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8005ae0:	f7fd ff62 	bl	80039a8 <lfs_bd_erase.isra.18>
            if (err) {
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	b178      	cbz	r0, 8005b08 <lfs_file_flushedwrite+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 8005ae8:	f115 0f54 	cmn.w	r5, #84	; 0x54
 8005aec:	d1dc      	bne.n	8005aa8 <lfs_file_flushedwrite+0xb0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005aee:	4b66      	ldr	r3, [pc, #408]	; (8005c88 <lfs_file_flushedwrite+0x290>)
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	f640 22dd 	movw	r2, #2781	; 0xadd
 8005af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af8:	4964      	ldr	r1, [pc, #400]	; (8005c8c <lfs_file_flushedwrite+0x294>)
 8005afa:	4865      	ldr	r0, [pc, #404]	; (8005c90 <lfs_file_flushedwrite+0x298>)
 8005afc:	f003 fc62 	bl	80093c4 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	6423      	str	r3, [r4, #64]	; 0x40
 8005b06:	e7e2      	b.n	8005ace <lfs_file_flushedwrite+0xd6>
            if (size == 0) {
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d12c      	bne.n	8005b6a <lfs_file_flushedwrite+0x172>
                *block = nblock;
 8005b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b12:	63a3      	str	r3, [r4, #56]	; 0x38
                *off = 0;
 8005b14:	9b04      	ldr	r3, [sp, #16]
                file->off = file->pos;
 8005b16:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 8005b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1e:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005b20:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005b22:	69df      	ldr	r7, [r3, #28]
 8005b24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b26:	1aff      	subs	r7, r7, r3
 8005b28:	455f      	cmp	r7, fp
 8005b2a:	bf28      	it	cs
 8005b2c:	465f      	movcs	r7, fp
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005b2e:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8005b32:	9b05      	ldr	r3, [sp, #20]
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	9703      	str	r7, [sp, #12]
 8005b40:	2301      	movs	r3, #1
 8005b42:	4632      	mov	r2, r6
 8005b44:	4641      	mov	r1, r8
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7fe ffca 	bl	8004ae0 <lfs_bd_prog>
            if (err) {
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f000 808b 	beq.w	8005c6a <lfs_file_flushedwrite+0x272>
                if (err == LFS_ERR_CORRUPT) {
 8005b54:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005b58:	d1a6      	bne.n	8005aa8 <lfs_file_flushedwrite+0xb0>
            err = lfs_file_relocate(lfs, file);
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f7ff fb07 	bl	8005170 <lfs_file_relocate>
            if (err) {
 8005b62:	4605      	mov	r5, r0
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d0e4      	beq.n	8005b32 <lfs_file_flushedwrite+0x13a>
 8005b68:	e79e      	b.n	8005aa8 <lfs_file_flushedwrite+0xb0>
            lfs_size_t noff = size - 1;
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	a90e      	add	r1, sp, #56	; 0x38
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f841 3d08 	str.w	r3, [r1, #-8]!
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005b74:	f7fd ff56 	bl	8003a24 <lfs_ctz_index.isra.22>
            if (noff != lfs->cfg->block_size) {
 8005b78:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            noff = noff + 1;
 8005b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if (noff != lfs->cfg->block_size) {
 8005b7c:	69d2      	ldr	r2, [r2, #28]
            noff = noff + 1;
 8005b7e:	3301      	adds	r3, #1
            if (noff != lfs->cfg->block_size) {
 8005b80:	4293      	cmp	r3, r2
            noff = noff + 1;
 8005b82:	930c      	str	r3, [sp, #48]	; 0x30
            if (noff != lfs->cfg->block_size) {
 8005b84:	d155      	bne.n	8005c32 <lfs_file_flushedwrite+0x23a>
            index += 1;
 8005b86:	1c47      	adds	r7, r0, #1
    return (uint32_t)__builtin_ctz(a);
 8005b88:	fa97 f7a7 	rbit	r7, r7
 8005b8c:	fab7 f787 	clz	r7, r7
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005b90:	1c7b      	adds	r3, r7, #1
            lfs_block_t nhead = head;
 8005b92:	f10d 0938 	add.w	r9, sp, #56	; 0x38
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005b96:	9308      	str	r3, [sp, #32]
            lfs_block_t nhead = head;
 8005b98:	9b07      	ldr	r3, [sp, #28]
 8005b9a:	f849 3d04 	str.w	r3, [r9, #-4]!
            for (lfs_off_t i = 0; i < skips; i++) {
 8005b9e:	46a8      	mov	r8, r5
 8005ba0:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8005ba4:	9309      	str	r3, [sp, #36]	; 0x24
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8005bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4651      	mov	r1, sl
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7fe ff90 	bl	8004ae0 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 8005bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (err) {
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d18f      	bne.n	8005ae8 <lfs_file_flushedwrite+0xf0>
                if (i != skips-1) {
 8005bc8:	4547      	cmp	r7, r8
 8005bca:	d13a      	bne.n	8005c42 <lfs_file_flushedwrite+0x24a>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005bcc:	9b08      	ldr	r3, [sp, #32]
 8005bce:	f108 0801 	add.w	r8, r8, #1
 8005bd2:	4543      	cmp	r3, r8
 8005bd4:	d8e4      	bhi.n	8005ba0 <lfs_file_flushedwrite+0x1a8>
            *block = nblock;
 8005bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd8:	63a3      	str	r3, [r4, #56]	; 0x38
            *off = 4*skips;
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	e79a      	b.n	8005b16 <lfs_file_flushedwrite+0x11e>
                    err = lfs_bd_read(lfs,
 8005be0:	9a07      	ldr	r2, [sp, #28]
 8005be2:	9200      	str	r2, [sp, #0]
 8005be4:	e9cd 7902 	strd	r7, r9, [sp, #8]
 8005be8:	f8cd 8004 	str.w	r8, [sp, #4]
 8005bec:	eba3 0308 	sub.w	r3, r3, r8
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	9808      	ldr	r0, [sp, #32]
 8005bf6:	f7fd ff2f 	bl	8003a58 <lfs_bd_read.isra.23>
                    if (err) {
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f47f af53 	bne.w	8005aa8 <lfs_file_flushedwrite+0xb0>
                    err = lfs_bd_prog(lfs,
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	e9cd 7902 	strd	r7, r9, [sp, #8]
 8005c0a:	f8cd 8004 	str.w	r8, [sp, #4]
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4651      	mov	r1, sl
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7fe ff63 	bl	8004ae0 <lfs_bd_prog>
                    if (err) {
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f47f af63 	bne.w	8005ae8 <lfs_file_flushedwrite+0xf0>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005c22:	f108 0801 	add.w	r8, r8, #1
 8005c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c28:	4543      	cmp	r3, r8
 8005c2a:	d8d9      	bhi.n	8005be0 <lfs_file_flushedwrite+0x1e8>
                *block = nblock;
 8005c2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                file->block = LFS_BLOCK_INLINE;
 8005c2e:	63a2      	str	r2, [r4, #56]	; 0x38
 8005c30:	e771      	b.n	8005b16 <lfs_file_flushedwrite+0x11e>
                    err = lfs_bd_read(lfs,
 8005c32:	f106 0368 	add.w	r3, r6, #104	; 0x68
                for (lfs_off_t i = 0; i < noff; i++) {
 8005c36:	46a8      	mov	r8, r5
                    err = lfs_bd_read(lfs,
 8005c38:	9308      	str	r3, [sp, #32]
 8005c3a:	f04f 0901 	mov.w	r9, #1
 8005c3e:	af0d      	add	r7, sp, #52	; 0x34
 8005c40:	e7f1      	b.n	8005c26 <lfs_file_flushedwrite+0x22e>
                    err = lfs_bd_read(lfs,
 8005c42:	2204      	movs	r2, #4
 8005c44:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8005c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	e9cd 3200 	strd	r3, r2, [sp]
 8005c50:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8005c54:	2304      	movs	r3, #4
 8005c56:	4632      	mov	r2, r6
 8005c58:	f7fd fefe 	bl	8003a58 <lfs_bd_read.isra.23>
                    if (err) {
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d0b4      	beq.n	8005bcc <lfs_file_flushedwrite+0x1d4>
 8005c62:	e721      	b.n	8005aa8 <lfs_file_flushedwrite+0xb0>
                file->block = LFS_BLOCK_INLINE;
 8005c64:	f06f 0201 	mvn.w	r2, #1
 8005c68:	e7e1      	b.n	8005c2e <lfs_file_flushedwrite+0x236>
        file->pos += diff;
 8005c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c6c:	443b      	add	r3, r7
 8005c6e:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 8005c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c72:	443b      	add	r3, r7
 8005c74:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 8005c76:	9b05      	ldr	r3, [sp, #20]
 8005c78:	443b      	add	r3, r7
 8005c7a:	9305      	str	r3, [sp, #20]
    lfs->free.ack = lfs->cfg->block_count;
 8005c7c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	6633      	str	r3, [r6, #96]	; 0x60
        nsize -= diff;
 8005c82:	ebab 0b07 	sub.w	fp, fp, r7
 8005c86:	e6e7      	b.n	8005a58 <lfs_file_flushedwrite+0x60>
 8005c88:	0800aad6 	.word	0x0800aad6
 8005c8c:	0800b193 	.word	0x0800b193
 8005c90:	0800b02e 	.word	0x0800b02e

08005c94 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (file->flags & LFS_F_READING) {
 8005c98:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005c9a:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 8005c9c:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005c9e:	b099      	sub	sp, #100	; 0x64
 8005ca0:	4605      	mov	r5, r0
    if (file->flags & LFS_F_READING) {
 8005ca2:	d508      	bpl.n	8005cb6 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 8005ca4:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
 8005ca6:	bf58      	it	pl
 8005ca8:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
 8005cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
 8005cb0:	bf58      	it	pl
 8005cb2:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 8005cb4:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 8005cb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005cb8:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 8005cbc:	d039      	beq.n	8005d32 <lfs_file_flush+0x9e>
        if (!(file->flags & LFS_F_INLINE)) {
 8005cbe:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
 8005cc2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8005cc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
 8005cc6:	d14e      	bne.n	8005d66 <lfs_file_flush+0xd2>
            lfs_file_t orig = {
 8005cc8:	2254      	movs	r2, #84	; 0x54
 8005cca:	a803      	add	r0, sp, #12
 8005ccc:	f003 f8aa 	bl	8008e24 <memset>
 8005cd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cd2:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
 8005cdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ce0:	af13      	add	r7, sp, #76	; 0x4c
 8005ce2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 8005ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8005cea:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
 8005cec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005cee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d321      	bcc.n	8005d38 <lfs_file_flush+0xa4>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005cf4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8005d8c <lfs_file_flush+0xf8>
 8005cf8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005d90 <lfs_file_flush+0xfc>
 8005cfc:	4f22      	ldr	r7, [pc, #136]	; (8005d88 <lfs_file_flush+0xf4>)
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8005cfe:	2301      	movs	r3, #1
 8005d00:	462a      	mov	r2, r5
 8005d02:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7fe fe92 	bl	8004a30 <lfs_bd_flush>
                if (err) {
 8005d0c:	b378      	cbz	r0, 8005d6e <lfs_file_flush+0xda>
                    if (err == LFS_ERR_CORRUPT) {
 8005d0e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005d12:	d10e      	bne.n	8005d32 <lfs_file_flush+0x9e>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005d14:	4641      	mov	r1, r8
 8005d16:	f8cd 9000 	str.w	r9, [sp]
 8005d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d1c:	f44f 6246 	mov.w	r2, #3168	; 0xc60
 8005d20:	4638      	mov	r0, r7
 8005d22:	f003 fb4f 	bl	80093c4 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fa21 	bl	8005170 <lfs_file_relocate>
                if (err) {
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0e5      	beq.n	8005cfe <lfs_file_flush+0x6a>
}
 8005d32:	b019      	add	sp, #100	; 0x64
 8005d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f10d 020b 	add.w	r2, sp, #11
 8005d3e:	a903      	add	r1, sp, #12
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7fe fc53 	bl	80045ec <lfs_file_flushedread>
                if (res < 0) {
 8005d46:	2800      	cmp	r0, #0
 8005d48:	dbf3      	blt.n	8005d32 <lfs_file_flush+0x9e>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f10d 020b 	add.w	r2, sp, #11
 8005d50:	4621      	mov	r1, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f7ff fe50 	bl	80059f8 <lfs_file_flushedwrite>
                if (res < 0) {
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	dbea      	blt.n	8005d32 <lfs_file_flush+0x9e>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	d0c4      	beq.n	8005cec <lfs_file_flush+0x58>
    rcache->block = LFS_BLOCK_NULL;
 8005d62:	9713      	str	r7, [sp, #76]	; 0x4c
 8005d64:	e7c1      	b.n	8005cea <lfs_file_flush+0x56>
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005d66:	42be      	cmp	r6, r7
 8005d68:	bf2c      	ite	cs
 8005d6a:	6366      	strcs	r6, [r4, #52]	; 0x34
 8005d6c:	6367      	strcc	r7, [r4, #52]	; 0x34
        file->ctz.head = file->block;
 8005d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d70:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 8005d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d74:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005d76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        file->pos = pos;
 8005d80:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
    return 0;
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7d4      	b.n	8005d32 <lfs_file_flush+0x9e>
 8005d88:	0800b02e 	.word	0x0800b02e
 8005d8c:	0800aad6 	.word	0x0800aad6
 8005d90:	0800b193 	.word	0x0800b193

08005d94 <lfs_file_rawseek>:
        lfs_soff_t off, int whence) {
 8005d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d96:	4606      	mov	r6, r0
 8005d98:	460d      	mov	r5, r1
    lfs_off_t npos = file->pos;
 8005d9a:	6b48      	ldr	r0, [r1, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
 8005d9c:	b943      	cbnz	r3, 8005db0 <lfs_file_rawseek+0x1c>
        npos = off;
 8005d9e:	4614      	mov	r4, r2
    if (npos > lfs->file_max) {
 8005da0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	d308      	bcc.n	8005db8 <lfs_file_rawseek+0x24>
    if (file->pos == npos) {
 8005da6:	4284      	cmp	r4, r0
 8005da8:	d116      	bne.n	8005dd8 <lfs_file_rawseek+0x44>
    return npos;
 8005daa:	4620      	mov	r0, r4
}
 8005dac:	b003      	add	sp, #12
 8005dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d104      	bne.n	8005dbe <lfs_file_rawseek+0x2a>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005db4:	1884      	adds	r4, r0, r2
        if (res < 0) {
 8005db6:	d5f3      	bpl.n	8005da0 <lfs_file_rawseek+0xc>
            return LFS_ERR_INVAL;
 8005db8:	f06f 0015 	mvn.w	r0, #21
 8005dbc:	e7f6      	b.n	8005dac <lfs_file_rawseek+0x18>
    } else if (whence == LFS_SEEK_END) {
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d108      	bne.n	8005dd4 <lfs_file_rawseek+0x40>
    if (file->flags & LFS_F_WRITING) {
 8005dc2:	e9d1 430b 	ldrd	r4, r3, [r1, #44]	; 0x2c
 8005dc6:	0399      	lsls	r1, r3, #14
 8005dc8:	d502      	bpl.n	8005dd0 <lfs_file_rawseek+0x3c>
    return (a > b) ? a : b;
 8005dca:	4284      	cmp	r4, r0
 8005dcc:	bf38      	it	cc
 8005dce:	4604      	movcc	r4, r0
        if (res < 0) {
 8005dd0:	1914      	adds	r4, r2, r4
 8005dd2:	e7f0      	b.n	8005db6 <lfs_file_rawseek+0x22>
    lfs_off_t npos = file->pos;
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	e7e3      	b.n	8005da0 <lfs_file_rawseek+0xc>
        !(file->flags & LFS_F_WRITING)
 8005dd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    if (
 8005dda:	039b      	lsls	r3, r3, #14
 8005ddc:	d419      	bmi.n	8005e12 <lfs_file_rawseek+0x7e>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8005dde:	a902      	add	r1, sp, #8
 8005de0:	f841 0d08 	str.w	r0, [r1, #-8]!
 8005de4:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8005de6:	f7fd fe1d 	bl	8003a24 <lfs_ctz_index.isra.22>
        lfs_off_t noff = npos;
 8005dea:	a902      	add	r1, sp, #8
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8005dec:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 8005dee:	f841 4d04 	str.w	r4, [r1, #-4]!
        int nindex = lfs_ctz_index(lfs, &noff);
 8005df2:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8005df4:	f7fd fe16 	bl	8003a24 <lfs_ctz_index.isra.22>
        if (oindex == nindex
 8005df8:	4287      	cmp	r7, r0
 8005dfa:	d10a      	bne.n	8005e12 <lfs_file_rawseek+0x7e>
                && noff >= file->cache.off
 8005dfc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005dfe:	9a01      	ldr	r2, [sp, #4]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d806      	bhi.n	8005e12 <lfs_file_rawseek+0x7e>
                && noff < file->cache.off + file->cache.size) {
 8005e04:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005e06:	440b      	add	r3, r1
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d202      	bcs.n	8005e12 <lfs_file_rawseek+0x7e>
            file->pos = npos;
 8005e0c:	636c      	str	r4, [r5, #52]	; 0x34
            file->off = noff;
 8005e0e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8005e10:	e7cb      	b.n	8005daa <lfs_file_rawseek+0x16>
    int err = lfs_file_flush(lfs, file);
 8005e12:	4629      	mov	r1, r5
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff ff3d 	bl	8005c94 <lfs_file_flush>
    if (err) {
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1c6      	bne.n	8005dac <lfs_file_rawseek+0x18>
    file->pos = npos;
 8005e1e:	636c      	str	r4, [r5, #52]	; 0x34
 8005e20:	e7c3      	b.n	8005daa <lfs_file_rawseek+0x16>
	...

08005e24 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005e28:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
 8005e2a:	b0a5      	sub	sp, #148	; 0x94
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4688      	mov	r8, r1
 8005e30:	4691      	mov	r9, r2
 8005e32:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	d168      	bne.n	8005f0a <lfs_dir_orphaningcommit+0xe6>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005e38:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3c:	9306      	str	r3, [sp, #24]
    lfs_mdir_t ldir = *dir;
 8005e3e:	4646      	mov	r6, r8
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005e40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e44:	9307      	str	r3, [sp, #28]
    lfs_mdir_t ldir = *dir;
 8005e46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e48:	ad14      	add	r5, sp, #80	; 0x50
 8005e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e4c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005e50:	af14      	add	r7, sp, #80	; 0x50
 8005e52:	ae1c      	add	r6, sp, #112	; 0x70
    lfs_mdir_t ldir = *dir;
 8005e54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005e58:	e9cd a600 	strd	sl, r6, [sp]
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	4642      	mov	r2, r8
 8005e60:	4639      	mov	r1, r7
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff fb90 	bl	8005588 <lfs_dir_relocatingcommit>
    if (state < 0) {
 8005e68:	1e05      	subs	r5, r0, #0
 8005e6a:	db79      	blt.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8005e6c:	a906      	add	r1, sp, #24
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7fd fbde 	bl	8003630 <lfs_pair_cmp>
 8005e74:	b948      	cbnz	r0, 8005e8a <lfs_dir_orphaningcommit+0x66>
        *dir = ldir;
 8005e76:	46be      	mov	lr, r7
 8005e78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005e7c:	46c4      	mov	ip, r8
 8005e7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e82:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005e86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 8005e8a:	2d02      	cmp	r5, #2
 8005e8c:	d12c      	bne.n	8005ee8 <lfs_dir_orphaningcommit+0xc4>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8005e8e:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8005e92:	4641      	mov	r1, r8
 8005e94:	4620      	mov	r0, r4
 8005e96:	f7fd ff3f 	bl	8003d18 <lfs_dir_getgstate>
        if (err) {
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d15f      	bne.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
        lpair[0] = pdir.pair[0];
 8005ea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005ea2:	9306      	str	r3, [sp, #24]
        lpair[1] = pdir.pair[1];
 8005ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ea6:	9307      	str	r3, [sp, #28]
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005ea8:	f898 3017 	ldrb.w	r3, [r8, #23]
 8005eac:	9001      	str	r0, [sp, #4]
 8005eae:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8005eb2:	4bb1      	ldr	r3, [pc, #708]	; (8006178 <lfs_dir_orphaningcommit+0x354>)
 8005eb4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005eb8:	9308      	str	r3, [sp, #32]
        lfs_pair_tole32(dir->tail);
 8005eba:	f108 0318 	add.w	r3, r8, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	aa06      	add	r2, sp, #24
 8005ec6:	ab08      	add	r3, sp, #32
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff fb5c 	bl	8005588 <lfs_dir_relocatingcommit>
        if (state < 0) {
 8005ed0:	1e05      	subs	r5, r0, #0
 8005ed2:	db45      	blt.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
        ldir = pdir;
 8005ed4:	46b6      	mov	lr, r6
 8005ed6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005eda:	46bc      	mov	ip, r7
 8005edc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005ee0:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005ee4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            ldir = pdir;
 8005ee8:	2300      	movs	r3, #0
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8005eea:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8006198 <lfs_dir_orphaningcommit+0x374>
 8005eee:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8006194 <lfs_dir_orphaningcommit+0x370>
            ldir = pdir;
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	46a9      	mov	r9, r5
    while (state == LFS_OK_RELOCATED) {
 8005ef6:	f1b9 0f01 	cmp.w	r9, #1
 8005efa:	f000 80a7 	beq.w	800604c <lfs_dir_orphaningcommit+0x228>
    return orphans ? LFS_OK_ORPHANED : 0;
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf0c      	ite	eq
 8005f04:	2500      	moveq	r5, #0
 8005f06:	2503      	movne	r5, #3
 8005f08:	e02a      	b.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005f0a:	f106 0008 	add.w	r0, r6, #8
 8005f0e:	4540      	cmp	r0, r8
 8005f10:	d101      	bne.n	8005f16 <lfs_dir_orphaningcommit+0xf2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005f12:	6836      	ldr	r6, [r6, #0]
 8005f14:	e78e      	b.n	8005e34 <lfs_dir_orphaningcommit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005f16:	4641      	mov	r1, r8
 8005f18:	f7fd fb8a 	bl	8003630 <lfs_pair_cmp>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d1f8      	bne.n	8005f12 <lfs_dir_orphaningcommit+0xee>
 8005f20:	79b3      	ldrb	r3, [r6, #6]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d1f5      	bne.n	8005f12 <lfs_dir_orphaningcommit+0xee>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005f26:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005f28:	02da      	lsls	r2, r3, #11
 8005f2a:	d5f2      	bpl.n	8005f12 <lfs_dir_orphaningcommit+0xee>
                f->ctz.size > lfs->cfg->cache_size) {
 8005f2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005f2e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f32:	4291      	cmp	r1, r2
 8005f34:	d9ed      	bls.n	8005f12 <lfs_dir_orphaningcommit+0xee>
    file->off = file->pos;
 8005f36:	6b72      	ldr	r2, [r6, #52]	; 0x34
    lfs->free.ack = lfs->cfg->block_count;
 8005f38:	6a1b      	ldr	r3, [r3, #32]
    file->off = file->pos;
 8005f3a:	63f2      	str	r2, [r6, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
 8005f3c:	4631      	mov	r1, r6
    lfs->free.ack = lfs->cfg->block_count;
 8005f3e:	6623      	str	r3, [r4, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff f915 	bl	8005170 <lfs_file_relocate>
    if (err) {
 8005f46:	4605      	mov	r5, r0
 8005f48:	b950      	cbnz	r0, 8005f60 <lfs_dir_orphaningcommit+0x13c>
    file->flags &= ~LFS_F_INLINE;
 8005f4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005f4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f50:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
 8005f52:	4631      	mov	r1, r6
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff fe9d 	bl	8005c94 <lfs_file_flush>
            if (err) {
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d0d8      	beq.n	8005f12 <lfs_dir_orphaningcommit+0xee>
}
 8005f60:	4628      	mov	r0, r5
 8005f62:	b025      	add	sp, #148	; 0x94
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8005f68:	f105 0108 	add.w	r1, r5, #8
 8005f6c:	a806      	add	r0, sp, #24
 8005f6e:	f7fd fb5f 	bl	8003630 <lfs_pair_cmp>
 8005f72:	b908      	cbnz	r0, 8005f78 <lfs_dir_orphaningcommit+0x154>
                d->m.pair[1] = ldir.pair[1];
 8005f74:	e9c5 9802 	strd	r9, r8, [r5, #8]
            if (d->type == LFS_TYPE_DIR &&
 8005f78:	79ab      	ldrb	r3, [r5, #6]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d107      	bne.n	8005f8e <lfs_dir_orphaningcommit+0x16a>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8005f7e:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8005f82:	a806      	add	r0, sp, #24
 8005f84:	f7fd fb54 	bl	8003630 <lfs_pair_cmp>
            if (d->type == LFS_TYPE_DIR &&
 8005f88:	b908      	cbnz	r0, 8005f8e <lfs_dir_orphaningcommit+0x16a>
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8005f8a:	e9c5 980b 	strd	r9, r8, [r5, #44]	; 0x2c
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005f8e:	682d      	ldr	r5, [r5, #0]
 8005f90:	e076      	b.n	8006080 <lfs_dir_orphaningcommit+0x25c>
 8005f92:	f104 0330 	add.w	r3, r4, #48	; 0x30
            int err = lfs_fs_preporphans(lfs, +1);
 8005f96:	2101      	movs	r1, #1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	f7fd fd20 	bl	80039e0 <lfs_fs_preporphans.isra.20>
            if (err) {
 8005fa0:	4681      	mov	r9, r0
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f040 8098 	bne.w	80060d8 <lfs_dir_orphaningcommit+0x2b4>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005fa8:	9b05      	ldr	r3, [sp, #20]
 8005faa:	4631      	mov	r1, r6
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fd fb73 	bl	8003698 <lfs_gstate_hasmovehere>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f000 808a 	beq.w	80060cc <lfs_dir_orphaningcommit+0x2a8>
    return (tag & 0x000ffc00) >> 10;
 8005fb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
                LFS_DEBUG("Fixing move while relocating "
 8005fba:	4870      	ldr	r0, [pc, #448]	; (800617c <lfs_dir_orphaningcommit+0x358>)
    return (tag & 0x000ffc00) >> 10;
 8005fbc:	f3c3 2989 	ubfx	r9, r3, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 8005fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8005fc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005fca:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8005fce:	4659      	mov	r1, fp
 8005fd0:	f003 f9f8 	bl	80093c4 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005fd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	; (8006180 <lfs_dir_orphaningcommit+0x35c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8005fd8:	63a5      	str	r5, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005fda:	4013      	ands	r3, r2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8005fdc:	e9c4 350c 	strd	r3, r5, [r4, #48]	; 0x30
                if (moveid < lfs_tag_id(tag)) {
 8005fe0:	f3c8 2389 	ubfx	r3, r8, #10, #10
 8005fe4:	454b      	cmp	r3, r9
 8005fe6:	d975      	bls.n	80060d4 <lfs_dir_orphaningcommit+0x2b0>
                    tag -= LFS_MKTAG(0, 1, 0);
 8005fe8:	f5a8 6280 	sub.w	r2, r8, #1024	; 0x400
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8005fec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005fee:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ff2:	930b      	str	r3, [sp, #44]	; 0x2c
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8005ff4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005ff8:	4599      	cmp	r9, r3
 8005ffa:	bf18      	it	ne
 8005ffc:	4b61      	ldrne	r3, [pc, #388]	; (8006184 <lfs_dir_orphaningcommit+0x360>)
 8005ffe:	970f      	str	r7, [sp, #60]	; 0x3c
 8006000:	bf14      	ite	ne
 8006002:	ea43 2389 	orrne.w	r3, r3, r9, lsl #10
 8006006:	2300      	moveq	r3, #0
 8006008:	930c      	str	r3, [sp, #48]	; 0x30
 800600a:	2300      	movs	r3, #0
 800600c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	2302      	movs	r3, #2
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	aa0a      	add	r2, sp, #40	; 0x28
 8006018:	ab0c      	add	r3, sp, #48	; 0x30
 800601a:	4631      	mov	r1, r6
 800601c:	4620      	mov	r0, r4
 800601e:	f7ff fab3 	bl	8005588 <lfs_dir_relocatingcommit>
            if (state < 0) {
 8006022:	f1b0 0900 	subs.w	r9, r0, #0
 8006026:	db57      	blt.n	80060d8 <lfs_dir_orphaningcommit+0x2b4>
            if (state == LFS_OK_RELOCATED) {
 8006028:	f1b9 0f01 	cmp.w	r9, #1
 800602c:	d139      	bne.n	80060a2 <lfs_dir_orphaningcommit+0x27e>
                lpair[0] = ppair[0];
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	9306      	str	r3, [sp, #24]
                ldir = pdir;
 8006032:	46b4      	mov	ip, r6
                lpair[1] = ppair[1];
 8006034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006036:	9307      	str	r3, [sp, #28]
                ldir = pdir;
 8006038:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800603c:	463d      	mov	r5, r7
 800603e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006040:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006044:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                orphans = true;
 8006048:	f8cd 9010 	str.w	r9, [sp, #16]
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800604c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800604e:	9302      	str	r3, [sp, #8]
 8006050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	f8cd a00c 	str.w	sl, [sp, #12]
 8006062:	4659      	mov	r1, fp
 8006064:	4848      	ldr	r0, [pc, #288]	; (8006188 <lfs_dir_orphaningcommit+0x364>)
 8006066:	f003 f9ad 	bl	80093c4 <iprintf>
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800606a:	f104 0120 	add.w	r1, r4, #32
 800606e:	a806      	add	r0, sp, #24
 8006070:	f7fd fade 	bl	8003630 <lfs_pair_cmp>
 8006074:	e9dd 9814 	ldrd	r9, r8, [sp, #80]	; 0x50
 8006078:	b908      	cbnz	r0, 800607e <lfs_dir_orphaningcommit+0x25a>
            lfs->root[1] = ldir.pair[1];
 800607a:	e9c4 9808 	strd	r9, r8, [r4, #32]
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800607e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006080:	2d00      	cmp	r5, #0
 8006082:	f47f af71 	bne.w	8005f68 <lfs_dir_orphaningcommit+0x144>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8006086:	4632      	mov	r2, r6
 8006088:	a906      	add	r1, sp, #24
 800608a:	4620      	mov	r0, r4
 800608c:	f7fe f87c 	bl	8004188 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006090:	f1b0 0800 	subs.w	r8, r0, #0
 8006094:	f6bf af7d 	bge.w	8005f92 <lfs_dir_orphaningcommit+0x16e>
 8006098:	f118 0f02 	cmn.w	r8, #2
 800609c:	f040 8094 	bne.w	80061c8 <lfs_dir_orphaningcommit+0x3a4>
        state = 0;
 80060a0:	46a9      	mov	r9, r5
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80060a2:	4632      	mov	r2, r6
 80060a4:	a906      	add	r1, sp, #24
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7fe f8b9 	bl	800421e <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 80060ac:	4605      	mov	r5, r0
 80060ae:	b1a8      	cbz	r0, 80060dc <lfs_dir_orphaningcommit+0x2b8>
 80060b0:	1c83      	adds	r3, r0, #2
 80060b2:	f47f af55 	bne.w	8005f60 <lfs_dir_orphaningcommit+0x13c>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80060b6:	f118 0f02 	cmn.w	r8, #2
 80060ba:	f43f af1c 	beq.w	8005ef6 <lfs_dir_orphaningcommit+0xd2>
 80060be:	4b33      	ldr	r3, [pc, #204]	; (800618c <lfs_dir_orphaningcommit+0x368>)
 80060c0:	4a33      	ldr	r2, [pc, #204]	; (8006190 <lfs_dir_orphaningcommit+0x36c>)
 80060c2:	4834      	ldr	r0, [pc, #208]	; (8006194 <lfs_dir_orphaningcommit+0x370>)
 80060c4:	f640 1113 	movw	r1, #2323	; 0x913
 80060c8:	f002 fe14 	bl	8008cf4 <__assert_func>
 80060cc:	4642      	mov	r2, r8
            uint16_t moveid = 0x3ff;
 80060ce:	f240 39ff 	movw	r9, #1023	; 0x3ff
 80060d2:	e78b      	b.n	8005fec <lfs_dir_orphaningcommit+0x1c8>
 80060d4:	4642      	mov	r2, r8
 80060d6:	e789      	b.n	8005fec <lfs_dir_orphaningcommit+0x1c8>
                return err;
 80060d8:	464d      	mov	r5, r9
 80060da:	e741      	b.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
    return tag & 0x000003ff;
 80060dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e2:	f104 0930 	add.w	r9, r4, #48	; 0x30
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d13a      	bne.n	8006160 <lfs_dir_orphaningcommit+0x33c>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80060ea:	4631      	mov	r1, r6
 80060ec:	4648      	mov	r0, r9
 80060ee:	f7fd fad3 	bl	8003698 <lfs_gstate_hasmovehere>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d152      	bne.n	800619c <lfs_dir_orphaningcommit+0x378>
            uint16_t moveid = 0x3ff;
 80060f6:	f240 35ff 	movw	r5, #1023	; 0x3ff
            lpair[0] = pdir.pair[0];
 80060fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80060fc:	9306      	str	r3, [sp, #24]
            lpair[1] = pdir.pair[1];
 80060fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006100:	9307      	str	r3, [sp, #28]
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8006102:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006106:	429d      	cmp	r5, r3
 8006108:	bf1c      	itt	ne
 800610a:	4b1e      	ldrne	r3, [pc, #120]	; (8006184 <lfs_dir_orphaningcommit+0x360>)
 800610c:	ea43 2585 	orrne.w	r5, r3, r5, lsl #10
 8006110:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
 8006114:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8006118:	4b17      	ldr	r3, [pc, #92]	; (8006178 <lfs_dir_orphaningcommit+0x354>)
 800611a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800611e:	f04f 0100 	mov.w	r1, #0
 8006122:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
 8006126:	f04f 0302 	mov.w	r3, #2
 800612a:	bf08      	it	eq
 800612c:	2500      	moveq	r5, #0
 800612e:	9111      	str	r1, [sp, #68]	; 0x44
 8006130:	9101      	str	r1, [sp, #4]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	aa06      	add	r2, sp, #24
 8006136:	ab10      	add	r3, sp, #64	; 0x40
 8006138:	4631      	mov	r1, r6
 800613a:	4620      	mov	r0, r4
 800613c:	9510      	str	r5, [sp, #64]	; 0x40
 800613e:	f7ff fa23 	bl	8005588 <lfs_dir_relocatingcommit>
            if (state < 0) {
 8006142:	1e05      	subs	r5, r0, #0
 8006144:	f6ff af0c 	blt.w	8005f60 <lfs_dir_orphaningcommit+0x13c>
            ldir = pdir;
 8006148:	46b6      	mov	lr, r6
 800614a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800614e:	46bc      	mov	ip, r7
 8006150:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006154:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8006158:	46a9      	mov	r9, r5
 800615a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800615e:	e6ca      	b.n	8005ef6 <lfs_dir_orphaningcommit+0xd2>
        bool hasparent = (tag != LFS_ERR_NOENT);
 8006160:	f118 0102 	adds.w	r1, r8, #2
 8006164:	bf18      	it	ne
 8006166:	2101      	movne	r1, #1
                err = lfs_fs_preporphans(lfs, -hasparent);
 8006168:	4249      	negs	r1, r1
 800616a:	4648      	mov	r0, r9
 800616c:	f7fd fc38 	bl	80039e0 <lfs_fs_preporphans.isra.20>
                if (err) {
 8006170:	4605      	mov	r5, r0
 8006172:	2800      	cmp	r0, #0
 8006174:	d0b9      	beq.n	80060ea <lfs_dir_orphaningcommit+0x2c6>
 8006176:	e6f3      	b.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
 8006178:	000ffc08 	.word	0x000ffc08
 800617c:	0800ae8d 	.word	0x0800ae8d
 8006180:	800003ff 	.word	0x800003ff
 8006184:	4ff00000 	.word	0x4ff00000
 8006188:	0800ae50 	.word	0x0800ae50
 800618c:	0800aed1 	.word	0x0800aed1
 8006190:	0800abf4 	.word	0x0800abf4
 8006194:	0800b193 	.word	0x0800b193
 8006198:	0800aad6 	.word	0x0800aad6
    return (tag & 0x000ffc00) >> 10;
 800619c:	6b25      	ldr	r5, [r4, #48]	; 0x30
                LFS_DEBUG("Fixing move while relocating "
 800619e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061a0:	9300      	str	r3, [sp, #0]
    return (tag & 0x000ffc00) >> 10;
 80061a2:	f3c5 2589 	ubfx	r5, r5, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 80061a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80061a8:	4808      	ldr	r0, [pc, #32]	; (80061cc <lfs_dir_orphaningcommit+0x3a8>)
 80061aa:	f640 1226 	movw	r2, #2342	; 0x926
 80061ae:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 80061b2:	4659      	mov	r1, fp
 80061b4:	f003 f906 	bl	80093c4 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80061b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <lfs_dir_orphaningcommit+0x3ac>)
 80061bc:	4013      	ands	r3, r2
 80061be:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80061c0:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80061c2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80061c6:	e798      	b.n	80060fa <lfs_dir_orphaningcommit+0x2d6>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80061c8:	4645      	mov	r5, r8
 80061ca:	e6c9      	b.n	8005f60 <lfs_dir_orphaningcommit+0x13c>
 80061cc:	0800ae8d 	.word	0x0800ae8d
 80061d0:	800003ff 	.word	0x800003ff

080061d4 <lfs_fs_deorphan.part.29>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80061d8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8006370 <lfs_fs_deorphan.part.29+0x19c>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80061dc:	f8df a194 	ldr.w	sl, [pc, #404]	; 8006374 <lfs_fs_deorphan.part.29+0x1a0>
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80061e0:	b0a5      	sub	sp, #148	; 0x94
 80061e2:	4604      	mov	r4, r0
 80061e4:	4688      	mov	r8, r1
    int8_t found = 0;
 80061e6:	2600      	movs	r6, #0
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80061e8:	221c      	movs	r2, #28
 80061ea:	2100      	movs	r1, #0
 80061ec:	a80c      	add	r0, sp, #48	; 0x30
 80061ee:	f002 fe19 	bl	8008e24 <memset>
                        LFS_DEBUG("Fixing half-orphan "
 80061f2:	4f57      	ldr	r7, [pc, #348]	; (8006350 <lfs_fs_deorphan.part.29+0x17c>)
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80061f4:	2301      	movs	r3, #1
 80061f6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80061fa:	9313      	str	r3, [sp, #76]	; 0x4c
        while (!lfs_pair_isnull(pdir.tail)) {
 80061fc:	a812      	add	r0, sp, #72	; 0x48
 80061fe:	f7fd fa0d 	bl	800361c <lfs_pair_isnull>
 8006202:	b160      	cbz	r0, 800621e <lfs_fs_deorphan.part.29+0x4a>
    return (a < b) ? a : b;
 8006204:	4620      	mov	r0, r4
 8006206:	f810 1f30 	ldrb.w	r1, [r0, #48]!
 800620a:	428e      	cmp	r6, r1
 800620c:	bf28      	it	cs
 800620e:	460e      	movcs	r6, r1
    return lfs_fs_preporphans(lfs, -lfs_min(
 8006210:	4271      	negs	r1, r6
 8006212:	b249      	sxtb	r1, r1
 8006214:	f7fd fbe4 	bl	80039e0 <lfs_fs_preporphans.isra.20>
}
 8006218:	b025      	add	sp, #148	; 0x94
 800621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800621e:	aa12      	add	r2, sp, #72	; 0x48
 8006220:	a914      	add	r1, sp, #80	; 0x50
 8006222:	4620      	mov	r0, r4
 8006224:	f7fd ffee 	bl	8004204 <lfs_dir_fetch>
            if (err) {
 8006228:	2800      	cmp	r0, #0
 800622a:	d1f5      	bne.n	8006218 <lfs_fs_deorphan.part.29+0x44>
            if (!pdir.split) {
 800622c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 8081 	bne.w	8006338 <lfs_fs_deorphan.part.29+0x164>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006236:	aa1c      	add	r2, sp, #112	; 0x70
 8006238:	a912      	add	r1, sp, #72	; 0x48
 800623a:	4620      	mov	r0, r4
 800623c:	f7fd ffa4 	bl	8004188 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006240:	2800      	cmp	r0, #0
 8006242:	da2d      	bge.n	80062a0 <lfs_fs_deorphan.part.29+0xcc>
 8006244:	1c83      	adds	r3, r0, #2
 8006246:	d1e7      	bne.n	8006218 <lfs_fs_deorphan.part.29+0x44>
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006248:	f1b8 0f00 	cmp.w	r8, #0
 800624c:	d074      	beq.n	8006338 <lfs_fs_deorphan.part.29+0x164>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800624e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	f241 12a3 	movw	r2, #4515	; 0x11a3
 8006256:	493f      	ldr	r1, [pc, #252]	; (8006354 <lfs_fs_deorphan.part.29+0x180>)
 8006258:	9701      	str	r7, [sp, #4]
 800625a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800625c:	483e      	ldr	r0, [pc, #248]	; (8006358 <lfs_fs_deorphan.part.29+0x184>)
 800625e:	f003 f8b1 	bl	80093c4 <iprintf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006262:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8006266:	a914      	add	r1, sp, #80	; 0x50
 8006268:	4620      	mov	r0, r4
 800626a:	f7fd fd55 	bl	8003d18 <lfs_dir_getgstate>
                    if (err) {
 800626e:	2800      	cmp	r0, #0
 8006270:	d1d2      	bne.n	8006218 <lfs_fs_deorphan.part.29+0x44>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006272:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8006276:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800627a:	4b38      	ldr	r3, [pc, #224]	; (800635c <lfs_fs_deorphan.part.29+0x188>)
 800627c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006280:	9306      	str	r3, [sp, #24]
 8006282:	ab1a      	add	r3, sp, #104	; 0x68
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	aa06      	add	r2, sp, #24
 8006288:	2301      	movs	r3, #1
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800628a:	a90c      	add	r1, sp, #48	; 0x30
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff fdc9 	bl	8005e24 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 8006292:	2800      	cmp	r0, #0
 8006294:	dbc0      	blt.n	8006218 <lfs_fs_deorphan.part.29+0x44>
                        found += 1;
 8006296:	3601      	adds	r6, #1
                        if (state == LFS_OK_ORPHANED) {
 8006298:	2803      	cmp	r0, #3
                        found += 1;
 800629a:	b276      	sxtb	r6, r6
                        if (state == LFS_OK_ORPHANED) {
 800629c:	d0a4      	beq.n	80061e8 <lfs_fs_deorphan.part.29+0x14>
 800629e:	e7ad      	b.n	80061fc <lfs_fs_deorphan.part.29+0x28>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80062a0:	ad04      	add	r5, sp, #16
 80062a2:	4603      	mov	r3, r0
 80062a4:	9500      	str	r5, [sp, #0]
 80062a6:	464a      	mov	r2, r9
 80062a8:	a91c      	add	r1, sp, #112	; 0x70
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7fd fd28 	bl	8003d00 <lfs_dir_get>
                    if (state < 0) {
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dbb1      	blt.n	8006218 <lfs_fs_deorphan.part.29+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80062b4:	9904      	ldr	r1, [sp, #16]
 80062b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062b8:	9805      	ldr	r0, [sp, #20]
 80062ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062bc:	4299      	cmp	r1, r3
 80062be:	d11a      	bne.n	80062f6 <lfs_fs_deorphan.part.29+0x122>
 80062c0:	4290      	cmp	r0, r2
                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80062c2:	d039      	beq.n	8006338 <lfs_fs_deorphan.part.29+0x164>
                        LFS_DEBUG("Fixing half-orphan "
 80062c4:	e9cd 2100 	strd	r2, r1, [sp]
 80062c8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80062cc:	4921      	ldr	r1, [pc, #132]	; (8006354 <lfs_fs_deorphan.part.29+0x180>)
 80062ce:	4824      	ldr	r0, [pc, #144]	; (8006360 <lfs_fs_deorphan.part.29+0x18c>)
 80062d0:	f241 12ce 	movw	r2, #4558	; 0x11ce
 80062d4:	f003 f876 	bl	80093c4 <iprintf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80062d8:	a90c      	add	r1, sp, #48	; 0x30
 80062da:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80062de:	f7fd f9db 	bl	8003698 <lfs_gstate_hasmovehere>
 80062e2:	b960      	cbnz	r0, 80062fe <lfs_fs_deorphan.part.29+0x12a>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80062e4:	2300      	movs	r3, #0
 80062e6:	9308      	str	r3, [sp, #32]
 80062e8:	2300      	movs	r3, #0
 80062ea:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 80062ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80062f0:	2302      	movs	r3, #2
 80062f2:	aa08      	add	r2, sp, #32
 80062f4:	e7c9      	b.n	800628a <lfs_fs_deorphan.part.29+0xb6>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80062f6:	4291      	cmp	r1, r2
 80062f8:	d1e4      	bne.n	80062c4 <lfs_fs_deorphan.part.29+0xf0>
                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80062fa:	4283      	cmp	r3, r0
 80062fc:	e7e1      	b.n	80062c2 <lfs_fs_deorphan.part.29+0xee>
    return (tag & 0x000ffc00) >> 10;
 80062fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006300:	4914      	ldr	r1, [pc, #80]	; (8006354 <lfs_fs_deorphan.part.29+0x180>)
 8006302:	4818      	ldr	r0, [pc, #96]	; (8006364 <lfs_fs_deorphan.part.29+0x190>)
    return (tag & 0x000ffc00) >> 10;
 8006304:	f3c3 2b89 	ubfx	fp, r3, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	f241 12d8 	movw	r2, #4568	; 0x11d8
 8006310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006312:	e9cd b701 	strd	fp, r7, [sp, #4]
 8006316:	f003 f855 	bl	80093c4 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800631a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <lfs_fs_deorphan.part.29+0x194>)
 800631e:	4013      	ands	r3, r2
 8006320:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006322:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006324:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006328:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800632c:	459b      	cmp	fp, r3
 800632e:	d0d9      	beq.n	80062e4 <lfs_fs_deorphan.part.29+0x110>
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <lfs_fs_deorphan.part.29+0x198>)
 8006332:	ea43 238b 	orr.w	r3, r3, fp, lsl #10
 8006336:	e7d6      	b.n	80062e6 <lfs_fs_deorphan.part.29+0x112>
            pdir = dir;
 8006338:	ad14      	add	r5, sp, #80	; 0x50
 800633a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800633c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8006340:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006344:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006348:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800634c:	e756      	b.n	80061fc <lfs_fs_deorphan.part.29+0x28>
 800634e:	bf00      	nop
 8006350:	0800aad6 	.word	0x0800aad6
 8006354:	0800b193 	.word	0x0800b193
 8006358:	0800b05b 	.word	0x0800b05b
 800635c:	000ffc08 	.word	0x000ffc08
 8006360:	0800b089 	.word	0x0800b089
 8006364:	0800b0ce 	.word	0x0800b0ce
 8006368:	800003ff 	.word	0x800003ff
 800636c:	4ff00000 	.word	0x4ff00000
 8006370:	7ffffc00 	.word	0x7ffffc00
 8006374:	600ffc08 	.word	0x600ffc08

08006378 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 8006378:	b510      	push	{r4, lr}
 800637a:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800637c:	f7ff fd52 	bl	8005e24 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 8006380:	2800      	cmp	r0, #0
 8006382:	db0a      	blt.n	800639a <lfs_dir_commit+0x22>
    if (orphans) {
 8006384:	d009      	beq.n	800639a <lfs_dir_commit+0x22>
    return tag & 0x000003ff;
 8006386:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006388:	f3c0 0009 	ubfx	r0, r0, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800638c:	b128      	cbz	r0, 800639a <lfs_dir_commit+0x22>
 800638e:	4620      	mov	r0, r4
 8006390:	2100      	movs	r1, #0
}
 8006392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006396:	f7ff bf1d 	b.w	80061d4 <lfs_fs_deorphan.part.29>
 800639a:	bd10      	pop	{r4, pc}

0800639c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800639c:	b530      	push	{r4, r5, lr}
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800639e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 80063a0:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80063a2:	f412 6fe0 	tst.w	r2, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80063a6:	b08f      	sub	sp, #60	; 0x3c
 80063a8:	4604      	mov	r4, r0
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80063aa:	d106      	bne.n	80063ba <lfs_fs_forceconsistency+0x1e>
    return tag & 0x000003ff;
 80063ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80063ae:	f3c0 0009 	ubfx	r0, r0, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d12f      	bne.n	8006416 <lfs_fs_forceconsistency+0x7a>
}
 80063b6:	b00f      	add	sp, #60	; 0x3c
 80063b8:	bd30      	pop	{r4, r5, pc}
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80063ba:	4a19      	ldr	r2, [pc, #100]	; (8006420 <lfs_fs_forceconsistency+0x84>)
 80063bc:	9202      	str	r2, [sp, #8]
 80063be:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	4605      	mov	r5, r0
 80063ca:	f241 126a 	movw	r2, #4458	; 0x116a
 80063ce:	f855 3f40 	ldr.w	r3, [r5, #64]!
 80063d2:	4914      	ldr	r1, [pc, #80]	; (8006424 <lfs_fs_forceconsistency+0x88>)
 80063d4:	4814      	ldr	r0, [pc, #80]	; (8006428 <lfs_fs_forceconsistency+0x8c>)
 80063d6:	f002 fff5 	bl	80093c4 <iprintf>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80063da:	462a      	mov	r2, r5
 80063dc:	a906      	add	r1, sp, #24
 80063de:	4620      	mov	r0, r4
 80063e0:	f7fd ff10 	bl	8004204 <lfs_dir_fetch>
    if (err) {
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d1e6      	bne.n	80063b6 <lfs_fs_forceconsistency+0x1a>
    return (tag & 0x000ffc00) >> 10;
 80063e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80063ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80063ec:	63a0      	str	r0, [r4, #56]	; 0x38
    return (tag & 0x000ffc00) >> 10;
 80063ee:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <lfs_fs_forceconsistency+0x90>)
 80063f4:	400b      	ands	r3, r1
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80063f6:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <lfs_fs_forceconsistency+0x94>)
 80063fc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006400:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8006404:	aa04      	add	r2, sp, #16
 8006406:	2301      	movs	r3, #1
 8006408:	a906      	add	r1, sp, #24
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff ffb4 	bl	8006378 <lfs_dir_commit>
    if (err) {
 8006410:	2800      	cmp	r0, #0
 8006412:	d0cb      	beq.n	80063ac <lfs_fs_forceconsistency+0x10>
 8006414:	e7cf      	b.n	80063b6 <lfs_fs_forceconsistency+0x1a>
 8006416:	2101      	movs	r1, #1
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff fedb 	bl	80061d4 <lfs_fs_deorphan.part.29>
 800641e:	e7ca      	b.n	80063b6 <lfs_fs_forceconsistency+0x1a>
 8006420:	0800aad6 	.word	0x0800aad6
 8006424:	0800b193 	.word	0x0800b193
 8006428:	0800b116 	.word	0x0800b116
 800642c:	800003ff 	.word	0x800003ff
 8006430:	4ff00000 	.word	0x4ff00000

08006434 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8006434:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006436:	4614      	mov	r4, r2
 8006438:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800643a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800643e:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8006440:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8006442:	f7fd fc69 	bl	8003d18 <lfs_dir_getgstate>
    if (err) {
 8006446:	b970      	cbnz	r0, 8006466 <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8006448:	7de3      	ldrb	r3, [r4, #23]
 800644a:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <lfs_dir_drop+0x38>)
 8006450:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006454:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
 8006456:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8006458:	2301      	movs	r3, #1
 800645a:	466a      	mov	r2, sp
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	9401      	str	r4, [sp, #4]
 8006462:	f7ff ff89 	bl	8006378 <lfs_dir_commit>
}
 8006466:	b002      	add	sp, #8
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	bf00      	nop
 800646c:	000ffc08 	.word	0x000ffc08

08006470 <lfs_file_rawsync>:
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8006470:	b570      	push	{r4, r5, r6, lr}
    if (file->flags & LFS_F_ERRED) {
 8006472:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006474:	031e      	lsls	r6, r3, #12
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8006476:	b086      	sub	sp, #24
 8006478:	4605      	mov	r5, r0
 800647a:	460c      	mov	r4, r1
    if (file->flags & LFS_F_ERRED) {
 800647c:	d502      	bpl.n	8006484 <lfs_file_rawsync+0x14>
        return 0;
 800647e:	2000      	movs	r0, #0
}
 8006480:	b006      	add	sp, #24
 8006482:	bd70      	pop	{r4, r5, r6, pc}
    int err = lfs_file_flush(lfs, file);
 8006484:	f7ff fc06 	bl	8005c94 <lfs_file_flush>
 8006488:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (err) {
 800648a:	b118      	cbz	r0, 8006494 <lfs_file_rawsync+0x24>
        file->flags |= LFS_F_ERRED;
 800648c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006490:	6322      	str	r2, [r4, #48]	; 0x30
        return err;
 8006492:	e7f5      	b.n	8006480 <lfs_file_rawsync+0x10>
    if ((file->flags & LFS_F_DIRTY) &&
 8006494:	03d1      	lsls	r1, r2, #15
 8006496:	d5f2      	bpl.n	800647e <lfs_file_rawsync+0xe>
            !lfs_pair_isnull(file->m.pair)) {
 8006498:	f104 0608 	add.w	r6, r4, #8
 800649c:	4630      	mov	r0, r6
 800649e:	f7fd f8bd 	bl	800361c <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d1eb      	bne.n	800647e <lfs_file_rawsync+0xe>
        if (file->flags & LFS_F_INLINE) {
 80064a6:	02d3      	lsls	r3, r2, #11
 80064a8:	d51e      	bpl.n	80064e8 <lfs_file_rawsync+0x78>
            buffer = file->cache.buffer;
 80064aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            size = file->ctz.size;
 80064ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 80064ae:	f240 2001 	movw	r0, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80064b2:	88a1      	ldrh	r1, [r4, #4]
 80064b4:	0289      	lsls	r1, r1, #10
 80064b6:	430a      	orrs	r2, r1
 80064b8:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80064bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064c2:	6893      	ldr	r3, [r2, #8]
 80064c4:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80064c8:	430b      	orrs	r3, r1
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	6853      	ldr	r3, [r2, #4]
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	aa02      	add	r2, sp, #8
 80064d2:	2302      	movs	r3, #2
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7ff ff4e 	bl	8006378 <lfs_dir_commit>
 80064dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (err) {
 80064de:	b170      	cbz	r0, 80064fe <lfs_file_rawsync+0x8e>
            file->flags |= LFS_F_ERRED;
 80064e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
        file->flags &= ~LFS_F_DIRTY;
 80064e4:	6323      	str	r3, [r4, #48]	; 0x30
 80064e6:	e7cb      	b.n	8006480 <lfs_file_rawsync+0x10>
            ctz = file->ctz;
 80064e8:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80064ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064f0:	466b      	mov	r3, sp
 80064f2:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 80064f6:	2208      	movs	r2, #8
            type = LFS_TYPE_CTZSTRUCT;
 80064f8:	f240 2002 	movw	r0, #514	; 0x202
 80064fc:	e7d9      	b.n	80064b2 <lfs_file_rawsync+0x42>
        file->flags &= ~LFS_F_DIRTY;
 80064fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006502:	e7ef      	b.n	80064e4 <lfs_file_rawsync+0x74>

08006504 <lfs_file_rawclose>:
static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4605      	mov	r5, r0
 8006508:	460c      	mov	r4, r1
    int err = lfs_file_rawsync(lfs, file);
 800650a:	f7ff ffb1 	bl	8006470 <lfs_file_rawsync>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800650e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    int err = lfs_file_rawsync(lfs, file);
 8006510:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8006512:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8006516:	b11b      	cbz	r3, 8006520 <lfs_file_rawclose+0x1c>
        if (*p == mlist) {
 8006518:	429c      	cmp	r4, r3
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	d108      	bne.n	8006530 <lfs_file_rawclose+0x2c>
            *p = (*p)->next;
 800651e:	6011      	str	r1, [r2, #0]
    if (!file->cfg->buffer) {
 8006520:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	b913      	cbnz	r3, 800652c <lfs_file_rawclose+0x28>
    os_heap_free(p);
 8006526:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006528:	f7fb fb44 	bl	8001bb4 <os_heap_free>
}
 800652c:	4630      	mov	r0, r6
 800652e:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8006530:	461a      	mov	r2, r3
 8006532:	460b      	mov	r3, r1
 8006534:	e7ef      	b.n	8006516 <lfs_file_rawclose+0x12>
	...

08006538 <lfs_file_rawopencfg>:
        const struct lfs_file_config *cfg) {
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	b08a      	sub	sp, #40	; 0x28
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800653e:	f013 0f02 	tst.w	r3, #2
        const struct lfs_file_config *cfg) {
 8006542:	4606      	mov	r6, r0
 8006544:	460c      	mov	r4, r1
 8006546:	9203      	str	r2, [sp, #12]
 8006548:	4698      	mov	r8, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800654a:	d123      	bne.n	8006594 <lfs_file_rawopencfg+0x5c>
    file->cfg = cfg;
 800654c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654e:	6523      	str	r3, [r4, #80]	; 0x50
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006550:	f104 0708 	add.w	r7, r4, #8
    file->pos = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
 8006558:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
 800655a:	64e3      	str	r3, [r4, #76]	; 0x4c
    file->flags = flags;
 800655c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006560:	1d23      	adds	r3, r4, #4
 8006562:	aa03      	add	r2, sp, #12
 8006564:	4639      	mov	r1, r7
 8006566:	4630      	mov	r0, r6
 8006568:	f7fd fe82 	bl	8004270 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800656c:	1e05      	subs	r5, r0, #0
 800656e:	da1a      	bge.n	80065a6 <lfs_file_rawopencfg+0x6e>
 8006570:	1cab      	adds	r3, r5, #2
 8006572:	d106      	bne.n	8006582 <lfs_file_rawopencfg+0x4a>
 8006574:	88a2      	ldrh	r2, [r4, #4]
 8006576:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800657a:	429a      	cmp	r2, r3
 800657c:	d113      	bne.n	80065a6 <lfs_file_rawopencfg+0x6e>
        err = tag;
 800657e:	f06f 0501 	mvn.w	r5, #1
    file->flags |= LFS_F_ERRED;
 8006582:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006588:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
 800658a:	4621      	mov	r1, r4
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff ffb9 	bl	8006504 <lfs_file_rawclose>
    return err;
 8006592:	e004      	b.n	800659e <lfs_file_rawopencfg+0x66>
        int err = lfs_fs_forceconsistency(lfs);
 8006594:	f7ff ff02 	bl	800639c <lfs_fs_forceconsistency>
        if (err) {
 8006598:	4605      	mov	r5, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	d0d6      	beq.n	800654c <lfs_file_rawopencfg+0x14>
}
 800659e:	4628      	mov	r0, r5
 80065a0:	b00a      	add	sp, #40	; 0x28
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file->type = LFS_TYPE_REG;
 80065a6:	2301      	movs	r3, #1
 80065a8:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
 80065aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80065ac:	6023      	str	r3, [r4, #0]
    if (tag == LFS_ERR_NOENT) {
 80065ae:	1ca8      	adds	r0, r5, #2
    lfs->mlist = mlist;
 80065b0:	62b4      	str	r4, [r6, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
 80065b2:	d147      	bne.n	8006644 <lfs_file_rawopencfg+0x10c>
        if (!(flags & LFS_O_CREAT)) {
 80065b4:	f418 7f80 	tst.w	r8, #256	; 0x100
 80065b8:	d0e1      	beq.n	800657e <lfs_file_rawopencfg+0x46>
        lfs_size_t nlen = strlen(path);
 80065ba:	9d03      	ldr	r5, [sp, #12]
 80065bc:	4628      	mov	r0, r5
 80065be:	f7f9 fe11 	bl	80001e4 <strlen>
        if (nlen > lfs->name_max) {
 80065c2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80065c4:	4283      	cmp	r3, r0
 80065c6:	d202      	bcs.n	80065ce <lfs_file_rawopencfg+0x96>
            err = LFS_ERR_NAMETOOLONG;
 80065c8:	f06f 0523 	mvn.w	r5, #35	; 0x23
 80065cc:	e7d9      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80065ce:	88a3      	ldrh	r3, [r4, #4]
 80065d0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800676c <lfs_file_rawopencfg+0x234>
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80065de:	9204      	str	r2, [sp, #16]
 80065e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065e4:	2100      	movs	r1, #0
 80065e6:	4310      	orrs	r0, r2
 80065e8:	ea43 0308 	orr.w	r3, r3, r8
 80065ec:	e9cd 0506 	strd	r0, r5, [sp, #24]
 80065f0:	e9cd 3108 	strd	r3, r1, [sp, #32]
 80065f4:	9105      	str	r1, [sp, #20]
 80065f6:	2303      	movs	r3, #3
 80065f8:	aa04      	add	r2, sp, #16
 80065fa:	4639      	mov	r1, r7
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7ff febb 	bl	8006378 <lfs_dir_commit>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006602:	f110 0f1c 	cmn.w	r0, #28
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006606:	4605      	mov	r5, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006608:	d0de      	beq.n	80065c8 <lfs_file_rawopencfg+0x90>
        if (err) {
 800660a:	2800      	cmp	r0, #0
 800660c:	d1b9      	bne.n	8006582 <lfs_file_rawopencfg+0x4a>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800660e:	4645      	mov	r5, r8
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006610:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006770 <lfs_file_rawopencfg+0x238>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006614:	f04f 0800 	mov.w	r8, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006618:	f04f 090c 	mov.w	r9, #12
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800661c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	4542      	cmp	r2, r8
 8006622:	d836      	bhi.n	8006692 <lfs_file_rawopencfg+0x15a>
    if (file->cfg->buffer) {
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d063      	beq.n	80066f2 <lfs_file_rawopencfg+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 800662a:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
 800662c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006630:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8006632:	f7fd f8be 	bl	80037b2 <lfs_cache_zero.isra.17>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006636:	f240 2301 	movw	r3, #513	; 0x201
 800663a:	ebb3 5f15 	cmp.w	r3, r5, lsr #20
 800663e:	d062      	beq.n	8006706 <lfs_file_rawopencfg+0x1ce>
    return 0;
 8006640:	2500      	movs	r5, #0
 8006642:	e7ac      	b.n	800659e <lfs_file_rawopencfg+0x66>
    } else if (flags & LFS_O_EXCL) {
 8006644:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006648:	f040 8085 	bne.w	8006756 <lfs_file_rawopencfg+0x21e>
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800664c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006650:	2d01      	cmp	r5, #1
 8006652:	f040 8083 	bne.w	800675c <lfs_file_rawopencfg+0x224>
 8006656:	88a3      	ldrh	r3, [r4, #4]
    } else if (flags & LFS_O_TRUNC) {
 8006658:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800665c:	ea4f 2383 	mov.w	r3, r3, lsl #10
 8006660:	d008      	beq.n	8006674 <lfs_file_rawopencfg+0x13c>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006662:	f043 5500 	orr.w	r5, r3, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
 8006666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800666c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
 8006670:	6323      	str	r3, [r4, #48]	; 0x30
 8006672:	e7cd      	b.n	8006610 <lfs_file_rawopencfg+0xd8>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006674:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800667c:	9200      	str	r2, [sp, #0]
 800667e:	f043 0308 	orr.w	r3, r3, #8
 8006682:	4a39      	ldr	r2, [pc, #228]	; (8006768 <lfs_file_rawopencfg+0x230>)
 8006684:	4639      	mov	r1, r7
 8006686:	4630      	mov	r0, r6
 8006688:	f7fd fb3a 	bl	8003d00 <lfs_dir_get>
        if (tag < 0) {
 800668c:	1e05      	subs	r5, r0, #0
 800668e:	dabf      	bge.n	8006610 <lfs_file_rawopencfg+0xd8>
 8006690:	e777      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006692:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006694:	07d1      	lsls	r1, r2, #31
 8006696:	d405      	bmi.n	80066a4 <lfs_file_rawopencfg+0x16c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006698:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800669a:	079a      	lsls	r2, r3, #30
 800669c:	d41d      	bmi.n	80066da <lfs_file_rawopencfg+0x1a2>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800669e:	f108 0801 	add.w	r8, r8, #1
 80066a2:	e7bb      	b.n	800661c <lfs_file_rawopencfg+0xe4>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80066a4:	6858      	ldr	r0, [r3, #4]
 80066a6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80066aa:	fb09 f208 	mul.w	r2, r9, r8
 80066ae:	1881      	adds	r1, r0, r2
 80066b0:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066b2:	688b      	ldr	r3, [r1, #8]
 80066b4:	6849      	ldr	r1, [r1, #4]
 80066b6:	9100      	str	r1, [sp, #0]
 80066b8:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80066bc:	f502 7240 	add.w	r2, r2, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066c0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80066c4:	4639      	mov	r1, r7
 80066c6:	4652      	mov	r2, sl
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7fd fb19 	bl	8003d00 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 80066ce:	2800      	cmp	r0, #0
 80066d0:	dae2      	bge.n	8006698 <lfs_file_rawopencfg+0x160>
 80066d2:	1c83      	adds	r3, r0, #2
 80066d4:	d0e0      	beq.n	8006698 <lfs_file_rawopencfg+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066d6:	4605      	mov	r5, r0
 80066d8:	e753      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80066da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066dc:	6852      	ldr	r2, [r2, #4]
 80066de:	fb09 2208 	mla	r2, r9, r8, r2
 80066e2:	6891      	ldr	r1, [r2, #8]
 80066e4:	6f72      	ldr	r2, [r6, #116]	; 0x74
 80066e6:	4291      	cmp	r1, r2
 80066e8:	d83b      	bhi.n	8006762 <lfs_file_rawopencfg+0x22a>
            file->flags |= LFS_F_DIRTY;
 80066ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ee:	6323      	str	r3, [r4, #48]	; 0x30
 80066f0:	e7d5      	b.n	800669e <lfs_file_rawopencfg+0x166>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80066f2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    return os_heap_alloc(size);
 80066f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80066f6:	f7fb f9fd 	bl	8001af4 <os_heap_alloc>
 80066fa:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d195      	bne.n	800662c <lfs_file_rawopencfg+0xf4>
            err = LFS_ERR_NOMEM;
 8006700:	f06f 050b 	mvn.w	r5, #11
 8006704:	e73d      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
        file->ctz.head = LFS_BLOCK_INLINE;
 8006706:	f06f 0301 	mvn.w	r3, #1
 800670a:	62a3      	str	r3, [r4, #40]	; 0x28
        file->cache.block = file->ctz.head;
 800670c:	6423      	str	r3, [r4, #64]	; 0x40
        file->cache.off = 0;
 800670e:	2300      	movs	r3, #0
        file->flags |= LFS_F_INLINE;
 8006710:	6b22      	ldr	r2, [r4, #48]	; 0x30
        file->cache.off = 0;
 8006712:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006714:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    return tag & 0x000003ff;
 8006716:	f3c5 0509 	ubfx	r5, r5, #0, #10
        file->flags |= LFS_F_INLINE;
 800671a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
        file->cache.size = lfs->cfg->cache_size;
 800671e:	6a99      	ldr	r1, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006720:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006722:	6322      	str	r2, [r4, #48]	; 0x30
        file->cache.size = lfs->cfg->cache_size;
 8006724:	64a1      	str	r1, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 8006726:	2d00      	cmp	r5, #0
 8006728:	d08a      	beq.n	8006640 <lfs_file_rawopencfg+0x108>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800672a:	88a2      	ldrh	r2, [r4, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800672c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800672e:	9300      	str	r3, [sp, #0]
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006730:	0292      	lsls	r2, r2, #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006732:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006736:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800673a:	4299      	cmp	r1, r3
 800673c:	bf94      	ite	ls
 800673e:	ea42 0301 	orrls.w	r3, r2, r1
 8006742:	4313      	orrhi	r3, r2
 8006744:	4630      	mov	r0, r6
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <lfs_file_rawopencfg+0x230>)
 8006748:	4639      	mov	r1, r7
 800674a:	f7fd fad9 	bl	8003d00 <lfs_dir_get>
            if (res < 0) {
 800674e:	1e05      	subs	r5, r0, #0
 8006750:	f6bf af76 	bge.w	8006640 <lfs_file_rawopencfg+0x108>
 8006754:	e715      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
        err = LFS_ERR_EXIST;
 8006756:	f06f 0510 	mvn.w	r5, #16
 800675a:	e712      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
        err = LFS_ERR_ISDIR;
 800675c:	f06f 0514 	mvn.w	r5, #20
 8006760:	e70f      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
                err = LFS_ERR_NOSPC;
 8006762:	f06f 051b 	mvn.w	r5, #27
 8006766:	e70c      	b.n	8006582 <lfs_file_rawopencfg+0x4a>
 8006768:	700ffc00 	.word	0x700ffc00
 800676c:	20100000 	.word	0x20100000
 8006770:	7ffffc00 	.word	0x7ffffc00

08006774 <lfs_file_rawwrite>:
        const void *buffer, lfs_size_t size) {
 8006774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006778:	4698      	mov	r8, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800677a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800677c:	079d      	lsls	r5, r3, #30
        const void *buffer, lfs_size_t size) {
 800677e:	4606      	mov	r6, r0
 8006780:	460c      	mov	r4, r1
 8006782:	4691      	mov	r9, r2
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8006784:	d406      	bmi.n	8006794 <lfs_file_rawwrite+0x20>
 8006786:	4b22      	ldr	r3, [pc, #136]	; (8006810 <lfs_file_rawwrite+0x9c>)
 8006788:	4a22      	ldr	r2, [pc, #136]	; (8006814 <lfs_file_rawwrite+0xa0>)
 800678a:	4823      	ldr	r0, [pc, #140]	; (8006818 <lfs_file_rawwrite+0xa4>)
 800678c:	f640 5156 	movw	r1, #3414	; 0xd56
 8006790:	f002 fab0 	bl	8008cf4 <__assert_func>
    if (file->flags & LFS_F_READING) {
 8006794:	035a      	lsls	r2, r3, #13
 8006796:	d418      	bmi.n	80067ca <lfs_file_rawwrite+0x56>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8006798:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800679a:	052b      	lsls	r3, r5, #20
 800679c:	d41c      	bmi.n	80067d8 <lfs_file_rawwrite+0x64>
    if (file->pos + size > lfs->file_max) {
 800679e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80067a0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80067a2:	eb07 0108 	add.w	r1, r7, r8
 80067a6:	4291      	cmp	r1, r2
 80067a8:	d82f      	bhi.n	800680a <lfs_file_rawwrite+0x96>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80067aa:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
 80067ae:	d019      	beq.n	80067e4 <lfs_file_rawwrite+0x70>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80067b0:	4643      	mov	r3, r8
 80067b2:	464a      	mov	r2, r9
 80067b4:	4621      	mov	r1, r4
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff f91e 	bl	80059f8 <lfs_file_flushedwrite>
    if (nsize < 0) {
 80067bc:	2800      	cmp	r0, #0
 80067be:	db08      	blt.n	80067d2 <lfs_file_rawwrite+0x5e>
    file->flags &= ~LFS_F_ERRED;
 80067c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80067c6:	6323      	str	r3, [r4, #48]	; 0x30
    return nsize;
 80067c8:	e003      	b.n	80067d2 <lfs_file_rawwrite+0x5e>
        int err = lfs_file_flush(lfs, file);
 80067ca:	f7ff fa63 	bl	8005c94 <lfs_file_flush>
        if (err) {
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d0e2      	beq.n	8006798 <lfs_file_rawwrite+0x24>
}
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80067d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067dc:	428a      	cmp	r2, r1
        file->pos = file->ctz.size;
 80067de:	bf88      	it	hi
 80067e0:	6362      	strhi	r2, [r4, #52]	; 0x34
 80067e2:	e7dc      	b.n	800679e <lfs_file_rawwrite+0x2a>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80067e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067e6:	429f      	cmp	r7, r3
 80067e8:	d9e2      	bls.n	80067b0 <lfs_file_rawwrite+0x3c>
        file->pos = file->ctz.size;
 80067ea:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 80067ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ee:	429f      	cmp	r7, r3
 80067f0:	d9de      	bls.n	80067b0 <lfs_file_rawwrite+0x3c>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80067f2:	2301      	movs	r3, #1
 80067f4:	f10d 0207 	add.w	r2, sp, #7
 80067f8:	4621      	mov	r1, r4
 80067fa:	4630      	mov	r0, r6
 80067fc:	f88d 5007 	strb.w	r5, [sp, #7]
 8006800:	f7ff f8fa 	bl	80059f8 <lfs_file_flushedwrite>
            if (res < 0) {
 8006804:	2800      	cmp	r0, #0
 8006806:	daf1      	bge.n	80067ec <lfs_file_rawwrite+0x78>
 8006808:	e7e3      	b.n	80067d2 <lfs_file_rawwrite+0x5e>
        return LFS_ERR_FBIG;
 800680a:	f06f 001a 	mvn.w	r0, #26
 800680e:	e7e0      	b.n	80067d2 <lfs_file_rawwrite+0x5e>
 8006810:	0800afd4 	.word	0x0800afd4
 8006814:	0800ac1d 	.word	0x0800ac1d
 8006818:	0800b193 	.word	0x0800b193

0800681c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800681c:	b530      	push	{r4, r5, lr}
 800681e:	b097      	sub	sp, #92	; 0x5c
 8006820:	4605      	mov	r5, r0
        err = lfs_init(lfs, cfg);
 8006822:	f7fc ffd1 	bl	80037c8 <lfs_init>
        if (err) {
 8006826:	4604      	mov	r4, r0
 8006828:	2800      	cmp	r0, #0
 800682a:	d14e      	bne.n	80068ca <lfs_format+0xae>
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800682c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800682e:	4601      	mov	r1, r0
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8006834:	f002 faf6 	bl	8008e24 <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006838:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
 800683a:	656c      	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800683c:	6a1a      	ldr	r2, [r3, #32]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	00db      	lsls	r3, r3, #3
    lfs->free.ack = lfs->cfg->block_count;
 8006842:	e9c5 4217 	strd	r4, r2, [r5, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006846:	4293      	cmp	r3, r2
 8006848:	bf94      	ite	ls
 800684a:	65ab      	strls	r3, [r5, #88]	; 0x58
 800684c:	65aa      	strhi	r2, [r5, #88]	; 0x58
        err = lfs_dir_alloc(lfs, &root);
 800684e:	a90e      	add	r1, sp, #56	; 0x38
 8006850:	4628      	mov	r0, r5
 8006852:	f7fe fc4b 	bl	80050ec <lfs_dir_alloc>
        if (err) {
 8006856:	4604      	mov	r4, r0
 8006858:	2800      	cmp	r0, #0
 800685a:	d133      	bne.n	80068c4 <lfs_format+0xa8>
        lfs_superblock_t superblock = {
 800685c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006860:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
 8006862:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs_superblock_t superblock = {
 8006864:	69da      	ldr	r2, [r3, #28]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006870:	9306      	str	r3, [sp, #24]
 8006872:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006874:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006876:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <lfs_format+0xb4>)
        lfs_superblock_t superblock = {
 8006878:	9203      	str	r2, [sp, #12]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800687a:	e9cd 3008 	strd	r3, r0, [sp, #32]
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <lfs_format+0xb8>)
 8006880:	930a      	str	r3, [sp, #40]	; 0x28
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <lfs_format+0xbc>)
 8006884:	930b      	str	r3, [sp, #44]	; 0x2c
 8006886:	4b15      	ldr	r3, [pc, #84]	; (80068dc <lfs_format+0xc0>)
 8006888:	930c      	str	r3, [sp, #48]	; 0x30
 800688a:	ab02      	add	r3, sp, #8
 800688c:	930d      	str	r3, [sp, #52]	; 0x34
 800688e:	aa08      	add	r2, sp, #32
 8006890:	2303      	movs	r3, #3
 8006892:	a90e      	add	r1, sp, #56	; 0x38
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff fd6f 	bl	8006378 <lfs_dir_commit>
        if (err) {
 800689a:	4604      	mov	r4, r0
 800689c:	b990      	cbnz	r0, 80068c4 <lfs_format+0xa8>
        root.erased = false;
 800689e:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80068a2:	4603      	mov	r3, r0
 80068a4:	4602      	mov	r2, r0
 80068a6:	a90e      	add	r1, sp, #56	; 0x38
 80068a8:	4628      	mov	r0, r5
 80068aa:	f7ff fd65 	bl	8006378 <lfs_dir_commit>
        if (err) {
 80068ae:	4604      	mov	r4, r0
 80068b0:	b940      	cbnz	r0, 80068c4 <lfs_format+0xa8>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80068b2:	9000      	str	r0, [sp, #0]
 80068b4:	2301      	movs	r3, #1
 80068b6:	466a      	mov	r2, sp
 80068b8:	a90e      	add	r1, sp, #56	; 0x38
 80068ba:	4628      	mov	r0, r5
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f7fd fca1 	bl	8004204 <lfs_dir_fetch>
 80068c2:	4604      	mov	r4, r0
    lfs_deinit(lfs);
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7fc ff5e 	bl	8003786 <lfs_deinit>
    err = lfs_rawformat(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 80068ca:	4620      	mov	r0, r4
 80068cc:	b017      	add	sp, #92	; 0x5c
 80068ce:	bd30      	pop	{r4, r5, pc}
 80068d0:	40100000 	.word	0x40100000
 80068d4:	0ff00008 	.word	0x0ff00008
 80068d8:	0800b052 	.word	0x0800b052
 80068dc:	20100018 	.word	0x20100018

080068e0 <lfs_unmount>:
    return lfs_deinit(lfs);
 80068e0:	f7fc bf51 	b.w	8003786 <lfs_deinit>

080068e4 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	b096      	sub	sp, #88	; 0x58
 80068ea:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 80068ec:	f7fc ff6c 	bl	80037c8 <lfs_init>
    if (err) {
 80068f0:	4606      	mov	r6, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d141      	bne.n	800697a <lfs_mount+0x96>
    lfs_mdir_t dir = {.tail = {0, 1}};
 80068f6:	4601      	mov	r1, r0
 80068f8:	221c      	movs	r2, #28
 80068fa:	a80e      	add	r0, sp, #56	; 0x38
 80068fc:	f002 fa92 	bl	8008e24 <memset>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006900:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8006ad8 <lfs_mount+0x1f4>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006904:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8006adc <lfs_mount+0x1f8>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006908:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8006ae0 <lfs_mount+0x1fc>
    lfs_mdir_t dir = {.tail = {0, 1}};
 800690c:	2301      	movs	r3, #1
 800690e:	9315      	str	r3, [sp, #84]	; 0x54
    lfs_block_t cycle = 0;
 8006910:	4637      	mov	r7, r6
    while (!lfs_pair_isnull(dir.tail)) {
 8006912:	a814      	add	r0, sp, #80	; 0x50
 8006914:	f7fc fe82 	bl	800361c <lfs_pair_isnull>
 8006918:	2800      	cmp	r0, #0
 800691a:	d032      	beq.n	8006982 <lfs_mount+0x9e>
    if (lfs_pair_isnull(lfs->root)) {
 800691c:	f104 0020 	add.w	r0, r4, #32
 8006920:	f7fc fe7c 	bl	800361c <lfs_pair_isnull>
 8006924:	2800      	cmp	r0, #0
 8006926:	d169      	bne.n	80069fc <lfs_mount+0x118>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006928:	f104 0530 	add.w	r5, r4, #48	; 0x30
 800692c:	4628      	mov	r0, r5
 800692e:	f7fc fea8 	bl	8003682 <lfs_gstate_iszero>
 8006932:	b960      	cbnz	r0, 800694e <lfs_mount+0x6a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006934:	4b5d      	ldr	r3, [pc, #372]	; (8006aac <lfs_mount+0x1c8>)
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	f241 027d 	movw	r2, #4221	; 0x107d
 8006944:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006946:	495a      	ldr	r1, [pc, #360]	; (8006ab0 <lfs_mount+0x1cc>)
 8006948:	485a      	ldr	r0, [pc, #360]	; (8006ab4 <lfs_mount+0x1d0>)
 800694a:	f002 fd3b 	bl	80093c4 <iprintf>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800694e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006950:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006954:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006956:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800695a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800695e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8006962:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006964:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	fbb1 f2f3 	udiv	r2, r1, r3
 800696c:	fb03 1212 	mls	r2, r3, r2, r1
 8006970:	6562      	str	r2, [r4, #84]	; 0x54
    lfs->free.size = 0;
 8006972:	2200      	movs	r2, #0
    lfs->free.i = 0;
 8006974:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
    lfs->free.ack = lfs->cfg->block_count;
 8006978:	6623      	str	r3, [r4, #96]	; 0x60
    err = lfs_rawmount(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 800697a:	4630      	mov	r0, r6
 800697c:	b016      	add	sp, #88	; 0x58
 800697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (cycle >= lfs->cfg->block_count/2) {
 8006982:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	ebb7 0f53 	cmp.w	r7, r3, lsr #1
 800698a:	f080 808c 	bcs.w	8006aa6 <lfs_mount+0x1c2>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800698e:	2308      	movs	r3, #8
 8006990:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006992:	ab05      	add	r3, sp, #20
 8006994:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8006998:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <lfs_mount+0x1d4>)
 800699a:	9001      	str	r0, [sp, #4]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	aa14      	add	r2, sp, #80	; 0x50
 80069a0:	4b46      	ldr	r3, [pc, #280]	; (8006abc <lfs_mount+0x1d8>)
 80069a2:	a90e      	add	r1, sp, #56	; 0x38
 80069a4:	4620      	mov	r0, r4
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80069a6:	e9cd 4805 	strd	r4, r8, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80069aa:	f7fd f9ef 	bl	8003d8c <lfs_dir_fetchmatch>
        if (tag < 0) {
 80069ae:	1e05      	subs	r5, r0, #0
        cycle += 1;
 80069b0:	f107 0701 	add.w	r7, r7, #1
        if (tag < 0) {
 80069b4:	db72      	blt.n	8006a9c <lfs_mount+0x1b8>
        if (tag && !lfs_tag_isdelete(tag)) {
 80069b6:	d067      	beq.n	8006a88 <lfs_mount+0x1a4>
    return ((int32_t)(tag << 22) >> 22) == -1;
 80069b8:	f345 0509 	sbfx	r5, r5, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 80069bc:	3501      	adds	r5, #1
 80069be:	d063      	beq.n	8006a88 <lfs_mount+0x1a4>
            lfs->root[0] = dir.pair[0];
 80069c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069c2:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 80069c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c6:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80069c8:	ab08      	add	r3, sp, #32
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	4a3b      	ldr	r2, [pc, #236]	; (8006abc <lfs_mount+0x1d8>)
 80069ce:	4653      	mov	r3, sl
 80069d0:	a90e      	add	r1, sp, #56	; 0x38
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7fd f994 	bl	8003d00 <lfs_dir_get>
            if (tag < 0) {
 80069d8:	1e05      	subs	r5, r0, #0
 80069da:	db5f      	blt.n	8006a9c <lfs_mount+0x1b8>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80069dc:	9a08      	ldr	r2, [sp, #32]
 80069de:	0c13      	lsrs	r3, r2, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80069e0:	2b02      	cmp	r3, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80069e2:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80069e4:	d100      	bne.n	80069e8 <lfs_mount+0x104>
 80069e6:	b161      	cbz	r1, 8006a02 <lfs_mount+0x11e>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 80069e8:	4930      	ldr	r1, [pc, #192]	; (8006aac <lfs_mount+0x1c8>)
 80069ea:	9101      	str	r1, [sp, #4]
 80069ec:	b292      	uxth	r2, r2
 80069ee:	4930      	ldr	r1, [pc, #192]	; (8006ab0 <lfs_mount+0x1cc>)
 80069f0:	4833      	ldr	r0, [pc, #204]	; (8006ac0 <lfs_mount+0x1dc>)
 80069f2:	9200      	str	r2, [sp, #0]
 80069f4:	f241 0235 	movw	r2, #4149	; 0x1035
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80069f8:	f002 fce4 	bl	80093c4 <iprintf>
        err = LFS_ERR_INVAL;
 80069fc:	f06f 0515 	mvn.w	r5, #21
 8006a00:	e04c      	b.n	8006a9c <lfs_mount+0x1b8>
            if (superblock.name_max) {
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	b15b      	cbz	r3, 8006a1e <lfs_mount+0x13a>
                if (superblock.name_max > lfs->name_max) {
 8006a06:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d907      	bls.n	8006a1c <lfs_mount+0x138>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006a0c:	4927      	ldr	r1, [pc, #156]	; (8006aac <lfs_mount+0x1c8>)
 8006a0e:	482d      	ldr	r0, [pc, #180]	; (8006ac4 <lfs_mount+0x1e0>)
 8006a10:	e9cd 2100 	strd	r2, r1, [sp]
 8006a14:	f241 023e 	movw	r2, #4158	; 0x103e
 8006a18:	4925      	ldr	r1, [pc, #148]	; (8006ab0 <lfs_mount+0x1cc>)
 8006a1a:	e7ed      	b.n	80069f8 <lfs_mount+0x114>
                lfs->name_max = superblock.name_max;
 8006a1c:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 8006a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a20:	b15b      	cbz	r3, 8006a3a <lfs_mount+0x156>
                if (superblock.file_max > lfs->file_max) {
 8006a22:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d907      	bls.n	8006a38 <lfs_mount+0x154>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006a28:	4920      	ldr	r1, [pc, #128]	; (8006aac <lfs_mount+0x1c8>)
 8006a2a:	4827      	ldr	r0, [pc, #156]	; (8006ac8 <lfs_mount+0x1e4>)
 8006a2c:	e9cd 2100 	strd	r2, r1, [sp]
 8006a30:	f241 0249 	movw	r2, #4169	; 0x1049
 8006a34:	491e      	ldr	r1, [pc, #120]	; (8006ab0 <lfs_mount+0x1cc>)
 8006a36:	e7df      	b.n	80069f8 <lfs_mount+0x114>
                lfs->file_max = superblock.file_max;
 8006a38:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 8006a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a3c:	b15b      	cbz	r3, 8006a56 <lfs_mount+0x172>
                if (superblock.attr_max > lfs->attr_max) {
 8006a3e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d907      	bls.n	8006a54 <lfs_mount+0x170>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006a44:	4919      	ldr	r1, [pc, #100]	; (8006aac <lfs_mount+0x1c8>)
 8006a46:	4821      	ldr	r0, [pc, #132]	; (8006acc <lfs_mount+0x1e8>)
 8006a48:	e9cd 2100 	strd	r2, r1, [sp]
 8006a4c:	f241 0254 	movw	r2, #4180	; 0x1054
 8006a50:	4917      	ldr	r1, [pc, #92]	; (8006ab0 <lfs_mount+0x1cc>)
 8006a52:	e7d1      	b.n	80069f8 <lfs_mount+0x114>
                lfs->attr_max = superblock.attr_max;
 8006a54:	6763      	str	r3, [r4, #116]	; 0x74
            if (superblock.block_count != lfs->cfg->block_count) {
 8006a56:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5a:	6a11      	ldr	r1, [r2, #32]
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	d007      	beq.n	8006a70 <lfs_mount+0x18c>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006a60:	4a12      	ldr	r2, [pc, #72]	; (8006aac <lfs_mount+0x1c8>)
 8006a62:	481b      	ldr	r0, [pc, #108]	; (8006ad0 <lfs_mount+0x1ec>)
 8006a64:	e9cd 1200 	strd	r1, r2, [sp]
 8006a68:	f241 025e 	movw	r2, #4190	; 0x105e
 8006a6c:	4910      	ldr	r1, [pc, #64]	; (8006ab0 <lfs_mount+0x1cc>)
 8006a6e:	e7c3      	b.n	80069f8 <lfs_mount+0x114>
            if (superblock.block_size != lfs->cfg->block_size) {
 8006a70:	69d2      	ldr	r2, [r2, #28]
 8006a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a74:	4291      	cmp	r1, r2
 8006a76:	d007      	beq.n	8006a88 <lfs_mount+0x1a4>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006a78:	4a0c      	ldr	r2, [pc, #48]	; (8006aac <lfs_mount+0x1c8>)
 8006a7a:	490d      	ldr	r1, [pc, #52]	; (8006ab0 <lfs_mount+0x1cc>)
 8006a7c:	4815      	ldr	r0, [pc, #84]	; (8006ad4 <lfs_mount+0x1f0>)
 8006a7e:	e9cd 3200 	strd	r3, r2, [sp]
 8006a82:	f241 0265 	movw	r2, #4197	; 0x1065
 8006a86:	e7b7      	b.n	80069f8 <lfs_mount+0x114>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006a88:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8006a8c:	a90e      	add	r1, sp, #56	; 0x38
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7fd f942 	bl	8003d18 <lfs_dir_getgstate>
        if (err) {
 8006a94:	4605      	mov	r5, r0
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f43f af3b 	beq.w	8006912 <lfs_mount+0x2e>
    lfs_rawunmount(lfs);
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7ff ff1f 	bl	80068e0 <lfs_unmount>
    return err;
 8006aa2:	462e      	mov	r6, r5
 8006aa4:	e769      	b.n	800697a <lfs_mount+0x96>
            err = LFS_ERR_CORRUPT;
 8006aa6:	f06f 0553 	mvn.w	r5, #83	; 0x53
 8006aaa:	e7f7      	b.n	8006a9c <lfs_mount+0x1b8>
 8006aac:	0800aad6 	.word	0x0800aad6
 8006ab0:	0800b193 	.word	0x0800b193
 8006ab4:	0800b4f3 	.word	0x0800b4f3
 8006ab8:	0ff00008 	.word	0x0ff00008
 8006abc:	7ffffc00 	.word	0x7ffffc00
 8006ac0:	0800b3d0 	.word	0x0800b3d0
 8006ac4:	0800b3fa 	.word	0x0800b3fa
 8006ac8:	0800b42c 	.word	0x0800b42c
 8006acc:	0800b45e 	.word	0x0800b45e
 8006ad0:	0800b490 	.word	0x0800b490
 8006ad4:	0800b4c2 	.word	0x0800b4c2
 8006ad8:	0800b052 	.word	0x0800b052
 8006adc:	080049f3 	.word	0x080049f3
 8006ae0:	20100018 	.word	0x20100018

08006ae4 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8006ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae6:	b099      	sub	sp, #100	; 0x64
 8006ae8:	4604      	mov	r4, r0
 8006aea:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 8006aec:	f7ff fc56 	bl	800639c <lfs_fs_forceconsistency>
    if (err) {
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d15f      	bne.n	8006bb4 <lfs_remove+0xd0>
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8006af4:	4603      	mov	r3, r0
 8006af6:	aa03      	add	r2, sp, #12
 8006af8:	a906      	add	r1, sp, #24
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7fd fbb8 	bl	8004270 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8006b00:	2800      	cmp	r0, #0
 8006b02:	db57      	blt.n	8006bb4 <lfs_remove+0xd0>
    return (tag & 0x000ffc00) >> 10;
 8006b04:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8006b08:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d053      	beq.n	8006bb8 <lfs_remove+0xd4>
    return (tag & 0x7ff00000) >> 20;
 8006b10:	0d07      	lsrs	r7, r0, #20
    dir.next = lfs->mlist;
 8006b12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006b14:	920e      	str	r2, [sp, #56]	; 0x38
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8006b16:	2f02      	cmp	r7, #2
 8006b18:	ea4f 2583 	mov.w	r5, r3, lsl #10
 8006b1c:	ae04      	add	r6, sp, #16
 8006b1e:	d122      	bne.n	8006b66 <lfs_remove+0x82>
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8006b20:	f045 5300 	orr.w	r3, r5, #536870912	; 0x20000000
 8006b24:	9600      	str	r6, [sp, #0]
 8006b26:	f043 0308 	orr.w	r3, r3, #8
 8006b2a:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <lfs_remove+0xdc>)
 8006b2c:	a906      	add	r1, sp, #24
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f7fd f8e6 	bl	8003d00 <lfs_dir_get>
        if (res < 0) {
 8006b34:	2800      	cmp	r0, #0
 8006b36:	db3d      	blt.n	8006bb4 <lfs_remove+0xd0>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8006b38:	4632      	mov	r2, r6
 8006b3a:	a910      	add	r1, sp, #64	; 0x40
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7fd fb61 	bl	8004204 <lfs_dir_fetch>
        if (err) {
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d136      	bne.n	8006bb4 <lfs_remove+0xd0>
        if (dir.m.count > 0 || dir.m.split) {
 8006b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b48:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
 8006b4c:	d130      	bne.n	8006bb0 <lfs_remove+0xcc>
        err = lfs_fs_preporphans(lfs, +1);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006b54:	f7fc ff44 	bl	80039e0 <lfs_fs_preporphans.isra.20>
        if (err) {
 8006b58:	bb60      	cbnz	r0, 8006bb4 <lfs_remove+0xd0>
        lfs->mlist = &dir;
 8006b5a:	ab0e      	add	r3, sp, #56	; 0x38
        dir.type = 0;
 8006b5c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        dir.id = 0;
 8006b60:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        lfs->mlist = &dir;
 8006b64:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8006b66:	2300      	movs	r3, #0
 8006b68:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
 8006b6c:	9305      	str	r3, [sp, #20]
 8006b6e:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	a906      	add	r1, sp, #24
 8006b78:	4620      	mov	r0, r4
 8006b7a:	9504      	str	r5, [sp, #16]
 8006b7c:	f7ff fbfc 	bl	8006378 <lfs_dir_commit>
 8006b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lfs->mlist = dir.next;
 8006b82:	62a3      	str	r3, [r4, #40]	; 0x28
    if (err) {
 8006b84:	b9b0      	cbnz	r0, 8006bb4 <lfs_remove+0xd0>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8006b86:	2f02      	cmp	r7, #2
 8006b88:	d114      	bne.n	8006bb4 <lfs_remove+0xd0>
        err = lfs_fs_preporphans(lfs, -1);
 8006b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b8e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006b92:	f7fc ff25 	bl	80039e0 <lfs_fs_preporphans.isra.20>
        if (err) {
 8006b96:	b968      	cbnz	r0, 8006bb4 <lfs_remove+0xd0>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8006b98:	aa06      	add	r2, sp, #24
 8006b9a:	a910      	add	r1, sp, #64	; 0x40
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f7fd fb3e 	bl	800421e <lfs_fs_pred>
        if (err) {
 8006ba2:	b938      	cbnz	r0, 8006bb4 <lfs_remove+0xd0>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8006ba4:	aa10      	add	r2, sp, #64	; 0x40
 8006ba6:	a906      	add	r1, sp, #24
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff fc43 	bl	8006434 <lfs_dir_drop>
 8006bae:	e001      	b.n	8006bb4 <lfs_remove+0xd0>
            return LFS_ERR_NOTEMPTY;
 8006bb0:	f06f 0026 	mvn.w	r0, #38	; 0x26
    err = lfs_rawremove(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006bb4:	b019      	add	sp, #100	; 0x64
 8006bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8006bb8:	f06f 0015 	mvn.w	r0, #21
 8006bbc:	e7fa      	b.n	8006bb4 <lfs_remove+0xd0>
 8006bbe:	bf00      	nop
 8006bc0:	700ffc00 	.word	0x700ffc00

08006bc4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc6:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006bc8:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006bca:	460d      	mov	r5, r1
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006bcc:	f7fc fd73 	bl	80036b6 <lfs_mlist_isopen>
 8006bd0:	b130      	cbz	r0, 8006be0 <lfs_file_open+0x1c>
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <lfs_file_open+0x2c>)
 8006bd4:	4a07      	ldr	r2, [pc, #28]	; (8006bf4 <lfs_file_open+0x30>)
 8006bd6:	4808      	ldr	r0, [pc, #32]	; (8006bf8 <lfs_file_open+0x34>)
 8006bd8:	f241 5167 	movw	r1, #5479	; 0x1567
 8006bdc:	f002 f88a 	bl	8008cf4 <__assert_func>
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006be0:	4906      	ldr	r1, [pc, #24]	; (8006bfc <lfs_file_open+0x38>)
 8006be2:	9100      	str	r1, [sp, #0]
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7ff fca6 	bl	8006538 <lfs_file_rawopencfg>
    err = lfs_file_rawopen(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006bec:	b003      	add	sp, #12
 8006bee:	bd30      	pop	{r4, r5, pc}
 8006bf0:	0800af9d 	.word	0x0800af9d
 8006bf4:	0800ac4b 	.word	0x0800ac4b
 8006bf8:	0800b193 	.word	0x0800b193
 8006bfc:	0800aca0 	.word	0x0800aca0

08006c00 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006c00:	b508      	push	{r3, lr}
 8006c02:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006c04:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006c06:	f7fc fd56 	bl	80036b6 <lfs_mlist_isopen>
 8006c0a:	b930      	cbnz	r0, 8006c1a <lfs_file_close+0x1a>
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <lfs_file_close+0x24>)
 8006c0e:	4a06      	ldr	r2, [pc, #24]	; (8006c28 <lfs_file_close+0x28>)
 8006c10:	4806      	ldr	r0, [pc, #24]	; (8006c2c <lfs_file_close+0x2c>)
 8006c12:	f241 518b 	movw	r1, #5515	; 0x158b
 8006c16:	f002 f86d 	bl	8008cf4 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8006c1a:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawclose(lfs, file);
 8006c20:	f7ff bc70 	b.w	8006504 <lfs_file_rawclose>
 8006c24:	0800af9e 	.word	0x0800af9e
 8006c28:	0800ac59 	.word	0x0800ac59
 8006c2c:	0800b193 	.word	0x0800b193

08006c30 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c34:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006c36:	6a80      	ldr	r0, [r0, #40]	; 0x28
        void *buffer, lfs_size_t size) {
 8006c38:	460d      	mov	r5, r1
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	461f      	mov	r7, r3
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006c3e:	f7fc fd3a 	bl	80036b6 <lfs_mlist_isopen>
 8006c42:	b930      	cbnz	r0, 8006c52 <lfs_file_read+0x22>
 8006c44:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <lfs_file_read+0x54>)
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <lfs_file_read+0x58>)
 8006c48:	f241 51ad 	movw	r1, #5549	; 0x15ad
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8006c4c:	480f      	ldr	r0, [pc, #60]	; (8006c8c <lfs_file_read+0x5c>)
 8006c4e:	f002 f851 	bl	8008cf4 <__assert_func>
 8006c52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006c54:	07da      	lsls	r2, r3, #31
 8006c56:	d404      	bmi.n	8006c62 <lfs_file_read+0x32>
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <lfs_file_read+0x60>)
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <lfs_file_read+0x64>)
 8006c5c:	f640 41eb 	movw	r1, #3307	; 0xceb
 8006c60:	e7f4      	b.n	8006c4c <lfs_file_read+0x1c>
    if (file->flags & LFS_F_WRITING) {
 8006c62:	039b      	lsls	r3, r3, #14
 8006c64:	d407      	bmi.n	8006c76 <lfs_file_read+0x46>
    return lfs_file_flushedread(lfs, file, buffer, size);
 8006c66:	463b      	mov	r3, r7
 8006c68:	4632      	mov	r2, r6
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4620      	mov	r0, r4
    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8006c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lfs_file_flushedread(lfs, file, buffer, size);
 8006c72:	f7fd bcbb 	b.w	80045ec <lfs_file_flushedread>
        int err = lfs_file_flush(lfs, file);
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7ff f80c 	bl	8005c94 <lfs_file_flush>
        if (err) {
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d0f2      	beq.n	8006c66 <lfs_file_read+0x36>
}
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c84:	0800af9e 	.word	0x0800af9e
 8006c88:	0800ac68 	.word	0x0800ac68
 8006c8c:	0800b193 	.word	0x0800b193
 8006c90:	0800b001 	.word	0x0800b001
 8006c94:	0800ac0c 	.word	0x0800ac0c

08006c98 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006c9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006c9e:	f7fc fd0a 	bl	80036b6 <lfs_mlist_isopen>
 8006ca2:	b930      	cbnz	r0, 8006cb2 <lfs_file_write+0x1a>
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <lfs_file_write+0x24>)
 8006ca6:	4a06      	ldr	r2, [pc, #24]	; (8006cc0 <lfs_file_write+0x28>)
 8006ca8:	4806      	ldr	r0, [pc, #24]	; (8006cc4 <lfs_file_write+0x2c>)
 8006caa:	f241 51bf 	movw	r1, #5567	; 0x15bf
 8006cae:	f002 f821 	bl	8008cf4 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8006cb2:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8006cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8006cb8:	f7ff bd5c 	b.w	8006774 <lfs_file_rawwrite>
 8006cbc:	0800af9e 	.word	0x0800af9e
 8006cc0:	0800ac76 	.word	0x0800ac76
 8006cc4:	0800b193 	.word	0x0800b193

08006cc8 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006ccc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006cce:	f7fc fcf2 	bl	80036b6 <lfs_mlist_isopen>
 8006cd2:	b930      	cbnz	r0, 8006ce2 <lfs_file_seek+0x1a>
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <lfs_file_seek+0x24>)
 8006cd6:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <lfs_file_seek+0x28>)
 8006cd8:	4806      	ldr	r0, [pc, #24]	; (8006cf4 <lfs_file_seek+0x2c>)
 8006cda:	f241 51d1 	movw	r1, #5585	; 0x15d1
 8006cde:	f002 f809 	bl	8008cf4 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8006ce2:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8006ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8006ce8:	f7ff b854 	b.w	8005d94 <lfs_file_rawseek>
 8006cec:	0800af9e 	.word	0x0800af9e
 8006cf0:	0800ac85 	.word	0x0800ac85
 8006cf4:	0800b193 	.word	0x0800b193

08006cf8 <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8006cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	b087      	sub	sp, #28
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8006cfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8006d00:	460c      	mov	r4, r1
 8006d02:	4616      	mov	r6, r2
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8006d04:	f7fc fcd7 	bl	80036b6 <lfs_mlist_isopen>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	b130      	cbz	r0, 8006d1a <lfs_dir_open+0x22>
 8006d0c:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <lfs_dir_open+0x98>)
 8006d0e:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <lfs_dir_open+0x9c>)
 8006d10:	4821      	ldr	r0, [pc, #132]	; (8006d98 <lfs_dir_open+0xa0>)
 8006d12:	f241 612e 	movw	r1, #5678	; 0x162e
 8006d16:	f001 ffed 	bl	8008cf4 <__assert_func>
 8006d1a:	aa06      	add	r2, sp, #24
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f842 6d0c 	str.w	r6, [r2, #-12]!
 8006d22:	f101 0608 	add.w	r6, r1, #8
 8006d26:	4631      	mov	r1, r6
 8006d28:	f7fd faa2 	bl	8004270 <lfs_dir_find>
    if (tag < 0) {
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	db2a      	blt.n	8006d86 <lfs_dir_open+0x8e>
    return (tag & 0x7ff00000) >> 20;
 8006d30:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d129      	bne.n	8006d8a <lfs_dir_open+0x92>
    return (tag & 0x000ffc00) >> 10;
 8006d36:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 8006d3a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006d3e:	4298      	cmp	r0, r3
 8006d40:	af04      	add	r7, sp, #16
 8006d42:	d115      	bne.n	8006d70 <lfs_dir_open+0x78>
        pair[0] = lfs->root[0];
 8006d44:	6a2b      	ldr	r3, [r5, #32]
 8006d46:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 8006d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d4a:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7fd fa57 	bl	8004204 <lfs_dir_fetch>
    if (err) {
 8006d56:	b9b0      	cbnz	r0, 8006d86 <lfs_dir_open+0x8e>
    dir->head[0] = dir->m.pair[0];
 8006d58:	68a3      	ldr	r3, [r4, #8]
 8006d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8006d5c:	68e3      	ldr	r3, [r4, #12]
 8006d5e:	6323      	str	r3, [r4, #48]	; 0x30
    dir->type = LFS_TYPE_DIR;
 8006d60:	2302      	movs	r3, #2
 8006d62:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
 8006d64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dir->id = 0;
 8006d66:	80a0      	strh	r0, [r4, #4]
    dir->pos = 0;
 8006d68:	62a0      	str	r0, [r4, #40]	; 0x28
    mlist->next = lfs->mlist;
 8006d6a:	6023      	str	r3, [r4, #0]
    lfs->mlist = mlist;
 8006d6c:	62ac      	str	r4, [r5, #40]	; 0x28
 8006d6e:	e00a      	b.n	8006d86 <lfs_dir_open+0x8e>
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <lfs_dir_open+0xa4>)
 8006d72:	9700      	str	r7, [sp, #0]
 8006d74:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <lfs_dir_open+0xa8>)
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f7fc ffbf 	bl	8003d00 <lfs_dir_get>
        if (res < 0) {
 8006d82:	2800      	cmp	r0, #0
 8006d84:	dae2      	bge.n	8006d4c <lfs_dir_open+0x54>
    err = lfs_dir_rawopen(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006d86:	b007      	add	sp, #28
 8006d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LFS_ERR_NOTDIR;
 8006d8a:	f06f 0013 	mvn.w	r0, #19
 8006d8e:	e7fa      	b.n	8006d86 <lfs_dir_open+0x8e>
 8006d90:	0800ae1a 	.word	0x0800ae1a
 8006d94:	0800ac93 	.word	0x0800ac93
 8006d98:	0800b193 	.word	0x0800b193
 8006d9c:	20000008 	.word	0x20000008
 8006da0:	700ffc00 	.word	0x700ffc00

08006da4 <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8006da4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006da6:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8006daa:	b11b      	cbz	r3, 8006db4 <lfs_dir_close+0x10>
        if (*p == mlist) {
 8006dac:	4299      	cmp	r1, r3
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	d102      	bne.n	8006db8 <lfs_dir_close+0x14>
            *p = (*p)->next;
 8006db2:	6010      	str	r0, [r2, #0]
    err = lfs_dir_rawclose(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006db4:	2000      	movs	r0, #0
 8006db6:	4770      	bx	lr
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8006db8:	461a      	mov	r2, r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	e7f5      	b.n	8006daa <lfs_dir_close+0x6>
	...

08006dc0 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	4616      	mov	r6, r2
 8006dc8:	4607      	mov	r7, r0
    memset(info, 0, sizeof(*info));
 8006dca:	f44f 7284 	mov.w	r2, #264	; 0x108
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f002 f827 	bl	8008e24 <memset>
    if (dir->pos == 0) {
 8006dd6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8006dd8:	b95c      	cbnz	r4, 8006df2 <lfs_dir_read+0x32>
        info->type = LFS_TYPE_DIR;
 8006dda:	4630      	mov	r0, r6
 8006ddc:	2302      	movs	r3, #2
 8006dde:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
 8006de2:	4921      	ldr	r1, [pc, #132]	; (8006e68 <lfs_dir_read+0xa8>)
        strcpy(info->name, "..");
 8006de4:	f002 fb47 	bl	8009476 <strcpy>
    dir->pos += 1;
 8006de8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006dea:	3301      	adds	r3, #1
 8006dec:	62ab      	str	r3, [r5, #40]	; 0x28
    return true;
 8006dee:	2001      	movs	r0, #1
 8006df0:	e037      	b.n	8006e62 <lfs_dir_read+0xa2>
    } else if (dir->pos == 1) {
 8006df2:	2c01      	cmp	r4, #1
 8006df4:	d026      	beq.n	8006e44 <lfs_dir_read+0x84>
        strcpy(info->name, "/");
 8006df6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006e70 <lfs_dir_read+0xb0>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8006dfa:	f105 0820 	add.w	r8, r5, #32
 8006dfe:	f105 0408 	add.w	r4, r5, #8
        if (dir->id == dir->m.count) {
 8006e02:	88aa      	ldrh	r2, [r5, #4]
 8006e04:	8bab      	ldrh	r3, [r5, #28]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d108      	bne.n	8006e1c <lfs_dir_read+0x5c>
            if (!dir->m.split) {
 8006e0a:	7fe8      	ldrb	r0, [r5, #31]
 8006e0c:	b348      	cbz	r0, 8006e62 <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8006e0e:	4642      	mov	r2, r8
 8006e10:	4621      	mov	r1, r4
 8006e12:	4638      	mov	r0, r7
 8006e14:	f7fd f9f6 	bl	8004204 <lfs_dir_fetch>
            if (err) {
 8006e18:	bb18      	cbnz	r0, 8006e62 <lfs_dir_read+0xa2>
            dir->id = 0;
 8006e1a:	80a8      	strh	r0, [r5, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8006e1c:	88aa      	ldrh	r2, [r5, #4]
    if (id == 0x3ff) {
 8006e1e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d114      	bne.n	8006e50 <lfs_dir_read+0x90>
        strcpy(info->name, "/");
 8006e26:	4649      	mov	r1, r9
 8006e28:	f106 0008 	add.w	r0, r6, #8
 8006e2c:	f002 fb23 	bl	8009476 <strcpy>
        info->type = LFS_TYPE_DIR;
 8006e30:	2302      	movs	r3, #2
 8006e32:	7033      	strb	r3, [r6, #0]
        return 0;
 8006e34:	2000      	movs	r0, #0
        dir->id += 1;
 8006e36:	88ab      	ldrh	r3, [r5, #4]
        if (err != LFS_ERR_NOENT) {
 8006e38:	3002      	adds	r0, #2
        dir->id += 1;
 8006e3a:	f103 0301 	add.w	r3, r3, #1
 8006e3e:	80ab      	strh	r3, [r5, #4]
        if (err != LFS_ERR_NOENT) {
 8006e40:	d0df      	beq.n	8006e02 <lfs_dir_read+0x42>
 8006e42:	e7d1      	b.n	8006de8 <lfs_dir_read+0x28>
        info->type = LFS_TYPE_DIR;
 8006e44:	4630      	mov	r0, r6
 8006e46:	2302      	movs	r3, #2
 8006e48:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
 8006e4c:	4907      	ldr	r1, [pc, #28]	; (8006e6c <lfs_dir_read+0xac>)
 8006e4e:	e7c9      	b.n	8006de4 <lfs_dir_read+0x24>
 8006e50:	4633      	mov	r3, r6
 8006e52:	4621      	mov	r1, r4
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7fd faf3 	bl	8004440 <lfs_dir_getinfo.part.34>
        if (err && err != LFS_ERR_NOENT) {
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d0eb      	beq.n	8006e36 <lfs_dir_read+0x76>
 8006e5e:	1c83      	adds	r3, r0, #2
 8006e60:	d0e9      	beq.n	8006e36 <lfs_dir_read+0x76>
    err = lfs_dir_rawread(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e66:	bf00      	nop
 8006e68:	0800a9bd 	.word	0x0800a9bd
 8006e6c:	0800a9bc 	.word	0x0800a9bc
 8006e70:	0800ae18 	.word	0x0800ae18

08006e74 <lfs_flash_sync>:
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_sync(const struct lfs_config *c){
	return 0;
}
 8006e74:	2000      	movs	r0, #0
 8006e76:	4770      	bx	lr

08006e78 <lfs_flash_erase>:
	uint32_t addr = block * SECTOR_SIZE + LFS_BASE_ADDR;
 8006e78:	4808      	ldr	r0, [pc, #32]	; (8006e9c <lfs_flash_erase+0x24>)
static int lfs_flash_erase(const struct lfs_config *c, lfs_block_t block){
 8006e7a:	b510      	push	{r4, lr}
	uint32_t addr = block * SECTOR_SIZE + LFS_BASE_ADDR;
 8006e7c:	eb00 4041 	add.w	r0, r0, r1, lsl #17
	int32_t ret = os_flash_erase(addr, 1);
 8006e80:	2101      	movs	r1, #1
 8006e82:	f7fc fb0f 	bl	80034a4 <os_flash_erase>
	ASSERT(ret >= 0);
 8006e86:	1e04      	subs	r4, r0, #0
 8006e88:	da04      	bge.n	8006e94 <lfs_flash_erase+0x1c>
 8006e8a:	2271      	movs	r2, #113	; 0x71
 8006e8c:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <lfs_flash_erase+0x28>)
 8006e8e:	4805      	ldr	r0, [pc, #20]	; (8006ea4 <lfs_flash_erase+0x2c>)
 8006e90:	f002 fa98 	bl	80093c4 <iprintf>
}
 8006e94:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 8006e98:	bd10      	pop	{r4, pc}
 8006e9a:	bf00      	nop
 8006e9c:	08020000 	.word	0x08020000
 8006ea0:	0800b52b 	.word	0x0800b52b
 8006ea4:	0800a4c7 	.word	0x0800a4c7

08006ea8 <lfs_flash_write>:
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 8006ea8:	4809      	ldr	r0, [pc, #36]	; (8006ed0 <lfs_flash_write+0x28>)
static int lfs_flash_write(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8006eaa:	b510      	push	{r4, lr}
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 8006eac:	4410      	add	r0, r2
 8006eae:	eb00 4041 	add.w	r0, r0, r1, lsl #17
	int32_t ret = os_flash_write(addr, (uint8_t*)buffer, size);
 8006eb2:	9a02      	ldr	r2, [sp, #8]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f7fc fa2d 	bl	8003314 <os_flash_write>
	ASSERT(ret >= 0);
 8006eba:	1e04      	subs	r4, r0, #0
 8006ebc:	da04      	bge.n	8006ec8 <lfs_flash_write+0x20>
 8006ebe:	2259      	movs	r2, #89	; 0x59
 8006ec0:	4904      	ldr	r1, [pc, #16]	; (8006ed4 <lfs_flash_write+0x2c>)
 8006ec2:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <lfs_flash_write+0x30>)
 8006ec4:	f002 fa7e 	bl	80093c4 <iprintf>
}
 8006ec8:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	08020000 	.word	0x08020000
 8006ed4:	0800b52b 	.word	0x0800b52b
 8006ed8:	0800a4c7 	.word	0x0800a4c7

08006edc <lfs_flash_read>:
static int lfs_flash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 8006edc:	b538      	push	{r3, r4, r5, lr}
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 8006ede:	4d0e      	ldr	r5, [pc, #56]	; (8006f18 <lfs_flash_read+0x3c>)
static int lfs_flash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 8006ee0:	9c04      	ldr	r4, [sp, #16]
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 8006ee2:	442a      	add	r2, r5
 8006ee4:	eb02 4041 	add.w	r0, r2, r1, lsl #17
	if(size == 0) return -5;
 8006ee8:	b194      	cbz	r4, 8006f10 <lfs_flash_read+0x34>
	if(addr < LFS_BASE_ADDR) return -5;
 8006eea:	4285      	cmp	r5, r0
 8006eec:	d810      	bhi.n	8006f10 <lfs_flash_read+0x34>
	if(addr >= LFS_END_ADDR) return -5;
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <lfs_flash_read+0x40>)
 8006ef0:	4290      	cmp	r0, r2
 8006ef2:	d20d      	bcs.n	8006f10 <lfs_flash_read+0x34>
	int32_t ret = os_flash_read(addr, buffer, size);
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f7fc faa8 	bl	800344c <os_flash_read>
	ASSERT(ret >= 0);
 8006efc:	1e04      	subs	r4, r0, #0
 8006efe:	da04      	bge.n	8006f0a <lfs_flash_read+0x2e>
 8006f00:	223e      	movs	r2, #62	; 0x3e
 8006f02:	4907      	ldr	r1, [pc, #28]	; (8006f20 <lfs_flash_read+0x44>)
 8006f04:	4807      	ldr	r0, [pc, #28]	; (8006f24 <lfs_flash_read+0x48>)
 8006f06:	f002 fa5d 	bl	80093c4 <iprintf>
	return ret < 0 ? (int)ret : 0;
 8006f0a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
	if(size == 0) return -5;
 8006f10:	f06f 0004 	mvn.w	r0, #4
 8006f14:	e7fb      	b.n	8006f0e <lfs_flash_read+0x32>
 8006f16:	bf00      	nop
 8006f18:	08020000 	.word	0x08020000
 8006f1c:	08100000 	.word	0x08100000
 8006f20:	0800b52b 	.word	0x0800b52b
 8006f24:	0800a4c7 	.word	0x0800a4c7

08006f28 <os_lfs_init>:
 * LFS Init
 *
 * @brief This function initializes the file system
 *
 **********************************************************************/
void os_lfs_init(){
 8006f28:	b510      	push	{r4, lr}

	/* Calculate sector size and number of sector using the pieces of information given by the linker
	 ------------------------------------------------*/
	lfs_cfg.block_size = SECTOR_SIZE;
 8006f2a:	4c19      	ldr	r4, [pc, #100]	; (8006f90 <os_lfs_init+0x68>)
	lfs_cfg.block_count = (uint32_t)LFS_TOTAL_SIZE/SECTOR_SIZE;

	/* Try to mount the file system
	 ------------------------------------------------*/
    int err = lfs_mount(&lfs, &lfs_cfg);
 8006f2c:	4819      	ldr	r0, [pc, #100]	; (8006f94 <os_lfs_init+0x6c>)
	lfs_cfg.block_size = SECTOR_SIZE;
 8006f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f32:	61e3      	str	r3, [r4, #28]
	lfs_cfg.block_count = (uint32_t)LFS_TOTAL_SIZE/SECTOR_SIZE;
 8006f34:	4b18      	ldr	r3, [pc, #96]	; (8006f98 <os_lfs_init+0x70>)
    int err = lfs_mount(&lfs, &lfs_cfg);
 8006f36:	4621      	mov	r1, r4
	lfs_cfg.block_count = (uint32_t)LFS_TOTAL_SIZE/SECTOR_SIZE;
 8006f38:	0c5b      	lsrs	r3, r3, #17
 8006f3a:	6223      	str	r3, [r4, #32]
    int err = lfs_mount(&lfs, &lfs_cfg);
 8006f3c:	f7ff fcd2 	bl	80068e4 <lfs_mount>
    if(err < 0){
 8006f40:	1e03      	subs	r3, r0, #0
 8006f42:	da23      	bge.n	8006f8c <os_lfs_init+0x64>

    	PRINTLN("LFS mount fail %d", err);
 8006f44:	22df      	movs	r2, #223	; 0xdf
 8006f46:	4915      	ldr	r1, [pc, #84]	; (8006f9c <os_lfs_init+0x74>)
 8006f48:	4815      	ldr	r0, [pc, #84]	; (8006fa0 <os_lfs_init+0x78>)
 8006f4a:	f002 fa3b 	bl	80093c4 <iprintf>

    	/* Reformat if we can't mount the filesystem
    	 * this should only happen on the first boot
    	 ------------------------------------------------*/
        err = lfs_format(&lfs, &lfs_cfg);
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4810      	ldr	r0, [pc, #64]	; (8006f94 <os_lfs_init+0x6c>)
 8006f52:	f7ff fc63 	bl	800681c <lfs_format>
        if(err < 0){
 8006f56:	1e03      	subs	r3, r0, #0
 8006f58:	da04      	bge.n	8006f64 <os_lfs_init+0x3c>
        	PRINTLN("LFS format fail %d", err);
 8006f5a:	22e6      	movs	r2, #230	; 0xe6
 8006f5c:	490f      	ldr	r1, [pc, #60]	; (8006f9c <os_lfs_init+0x74>)
 8006f5e:	4811      	ldr	r0, [pc, #68]	; (8006fa4 <os_lfs_init+0x7c>)
 8006f60:	f002 fa30 	bl	80093c4 <iprintf>
        }

    	/* Try to mount the file system again
    	 ------------------------------------------------*/
        err = lfs_mount(&lfs, &lfs_cfg);
 8006f64:	490a      	ldr	r1, [pc, #40]	; (8006f90 <os_lfs_init+0x68>)
 8006f66:	480b      	ldr	r0, [pc, #44]	; (8006f94 <os_lfs_init+0x6c>)
 8006f68:	f7ff fcbc 	bl	80068e4 <lfs_mount>
        if(err < 0){
 8006f6c:	1e03      	subs	r3, r0, #0
 8006f6e:	da06      	bge.n	8006f7e <os_lfs_init+0x56>
        	PRINTLN("LFS mount fail %d", err);
 8006f70:	22ed      	movs	r2, #237	; 0xed
 8006f72:	490a      	ldr	r1, [pc, #40]	; (8006f9c <os_lfs_init+0x74>)
 8006f74:	480a      	ldr	r0, [pc, #40]	; (8006fa0 <os_lfs_init+0x78>)
	 ------------------------------------------------*/
    else{
    	PRINTLN("LFS Mount OK");
    }

}
 8006f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        	PRINTLN("LFS mount fail %d", err);
 8006f7a:	f002 ba23 	b.w	80093c4 <iprintf>
        	PRINTLN("LFS Mount OK");
 8006f7e:	22f1      	movs	r2, #241	; 0xf1
    	PRINTLN("LFS Mount OK");
 8006f80:	4906      	ldr	r1, [pc, #24]	; (8006f9c <os_lfs_init+0x74>)
 8006f82:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <os_lfs_init+0x80>)
}
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	PRINTLN("LFS Mount OK");
 8006f88:	f002 ba1c 	b.w	80093c4 <iprintf>
 8006f8c:	22f8      	movs	r2, #248	; 0xf8
 8006f8e:	e7f7      	b.n	8006f80 <os_lfs_init+0x58>
 8006f90:	20000260 	.word	0x20000260
 8006f94:	20014e00 	.word	0x20014e00
 8006f98:	000e0000 	.word	0x000e0000
 8006f9c:	0800b52b 	.word	0x0800b52b
 8006fa0:	0800b535 	.word	0x0800b535
 8006fa4:	0800b553 	.word	0x0800b553
 8006fa8:	0800b572 	.word	0x0800b572

08006fac <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8006fac:	b530      	push	{r4, r5, lr}
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8006fae:	4d0c      	ldr	r5, [pc, #48]	; (8006fe0 <lfs_crc+0x34>)
 8006fb0:	440a      	add	r2, r1
    for (size_t i = 0; i < size; i++) {
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	d100      	bne.n	8006fb8 <lfs_crc+0xc>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
 8006fb6:	bd30      	pop	{r4, r5, pc}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8006fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fbc:	ea83 0400 	eor.w	r4, r3, r0
 8006fc0:	f004 040f 	and.w	r4, r4, #15
 8006fc4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8006fc8:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8006fcc:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006fd8:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
 8006fdc:	e7e9      	b.n	8006fb2 <lfs_crc+0x6>
 8006fde:	bf00      	nop
 8006fe0:	0800b58c 	.word	0x0800b58c

08006fe4 <sendResponse>:
 *
 * @param uint8_t packet : 	[in] The response to send
 *
 **********************************************************************/
static void sendResponse(uint8_t packet)
{
 8006fe4:	b513      	push	{r0, r1, r4, lr}
 8006fe6:	ac02      	add	r4, sp, #8
	HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 8006fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8006fec:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	480b      	ldr	r0, [pc, #44]	; (8007024 <sendResponse+0x40>)
 8006ff6:	f001 fbf5 	bl	80087e4 <HAL_UART_Transmit>

	if (packet == XMODEM_CMD_CAN) {
 8006ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d10d      	bne.n	800701e <sendResponse+0x3a>
		// If packet is CAN, send three times
		HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 8007002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007006:	2201      	movs	r2, #1
 8007008:	4621      	mov	r1, r4
 800700a:	4806      	ldr	r0, [pc, #24]	; (8007024 <sendResponse+0x40>)
 800700c:	f001 fbea 	bl	80087e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 8007010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007014:	2201      	movs	r2, #1
 8007016:	4621      	mov	r1, r4
 8007018:	4802      	ldr	r0, [pc, #8]	; (8007024 <sendResponse+0x40>)
 800701a:	f001 fbe3 	bl	80087e4 <HAL_UART_Transmit>
	}
}
 800701e:	b002      	add	sp, #8
 8007020:	bd10      	pop	{r4, pc}
 8007022:	bf00      	nop
 8007024:	20014ebc 	.word	0x20014ebc

08007028 <xModem_getState>:
 * @return bool : (1) on going, (0) idle
 *
 **********************************************************************/
os_xmodem_state xModem_getState(){
	return xmodem_state;
}
 8007028:	4b01      	ldr	r3, [pc, #4]	; (8007030 <xModem_getState+0x8>)
 800702a:	7818      	ldrb	r0, [r3, #0]
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20014db2 	.word	0x20014db2

08007034 <xModem_rcv>:
 * @brief This functions receives a file via XMODEM protocol
 *
 * @param char* path : [in] the name of the file to create
 *
 **********************************************************************/
void* xModem_rcv(char* path){
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if(os_evt_create(&xmodem_evt_rcv, OS_EVT_MODE_AUTO, NULL) != OS_ERR_OK){
 8007038:	4d78      	ldr	r5, [pc, #480]	; (800721c <xModem_rcv+0x1e8>)
 800703a:	2200      	movs	r2, #0
void* xModem_rcv(char* path){
 800703c:	b0bb      	sub	sp, #236	; 0xec
 800703e:	4681      	mov	r9, r0
	if(os_evt_create(&xmodem_evt_rcv, OS_EVT_MODE_AUTO, NULL) != OS_ERR_OK){
 8007040:	4611      	mov	r1, r2
 8007042:	4628      	mov	r0, r5
 8007044:	f7fa fcb6 	bl	80019b4 <os_evt_create>
 8007048:	46ab      	mov	fp, r5
 800704a:	4604      	mov	r4, r0
 800704c:	b978      	cbnz	r0, 800706e <xModem_rcv+0x3a>
	int waitToStart = 0;
	uint16_t receivedBytes;
	uint32_t address = 0;

	lfs_file_t lfs_file;
	lfs_remove(&lfs, path);
 800704e:	4649      	mov	r1, r9
 8007050:	4873      	ldr	r0, [pc, #460]	; (8007220 <xModem_rcv+0x1ec>)
 8007052:	f7ff fd47 	bl	8006ae4 <lfs_remove>
	int32_t file_error = lfs_file_open(&lfs, &lfs_file, path, LFS_O_RDWR | LFS_O_CREAT);
 8007056:	f240 1303 	movw	r3, #259	; 0x103
 800705a:	464a      	mov	r2, r9
 800705c:	a903      	add	r1, sp, #12
 800705e:	4870      	ldr	r0, [pc, #448]	; (8007220 <xModem_rcv+0x1ec>)
 8007060:	f7ff fdb0 	bl	8006bc4 <lfs_file_open>
	if(file_error<0) {
 8007064:	2800      	cmp	r0, #0
 8007066:	da06      	bge.n	8007076 <xModem_rcv+0x42>
		os_evt_delete(xmodem_evt_rcv);
 8007068:	6828      	ldr	r0, [r5, #0]
 800706a:	f7fa fd19 	bl	8001aa0 <os_evt_delete>

	os_evt_delete(xmodem_evt_rcv);

	cli_init();
	return NULL;
}
 800706e:	2000      	movs	r0, #0
 8007070:	b03b      	add	sp, #236	; 0xec
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HAL_UART_Abort(&USART_CLI);
 8007076:	4e6b      	ldr	r6, [pc, #428]	; (8007224 <xModem_rcv+0x1f0>)
	packetNumber = 0;
 8007078:	4f6b      	ldr	r7, [pc, #428]	; (8007228 <xModem_rcv+0x1f4>)
	HAL_UART_Abort(&USART_CLI);
 800707a:	4630      	mov	r0, r6
 800707c:	f001 fc35 	bl	80088ea <HAL_UART_Abort>
	HAL_UART_Abort_IT(&USART_CLI);
 8007080:	4630      	mov	r0, r6
 8007082:	f001 fd83 	bl	8008b8c <HAL_UART_Abort_IT>
	HAL_UART_AbortReceive(&USART_CLI);
 8007086:	4630      	mov	r0, r6
 8007088:	f001 fc6f 	bl	800896a <HAL_UART_AbortReceive>
	HAL_UART_AbortReceive_IT(&USART_CLI);
 800708c:	4630      	mov	r0, r6
 800708e:	f001 fdfb 	bl	8008c88 <HAL_UART_AbortReceive_IT>
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 8007092:	6833      	ldr	r3, [r6, #0]
	xmodem_state = OS_XMODEM_STATE_RUN;
 8007094:	4a65      	ldr	r2, [pc, #404]	; (800722c <xModem_rcv+0x1f8>)
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 8007096:	685b      	ldr	r3, [r3, #4]
	packetNumber = 0;
 8007098:	703c      	strb	r4, [r7, #0]
	xmodem_state = OS_XMODEM_STATE_RUN;
 800709a:	2301      	movs	r3, #1
 800709c:	7013      	strb	r3, [r2, #0]
	started = false;
 800709e:	4b64      	ldr	r3, [pc, #400]	; (8007230 <xModem_rcv+0x1fc>)
 80070a0:	9201      	str	r2, [sp, #4]
 80070a2:	701c      	strb	r4, [r3, #0]
	int waitToStart = 0;
 80070a4:	46a2      	mov	sl, r4
	XmodemState_t state = XMODEM_STATE_WAIT_TO_START;
 80070a6:	4625      	mov	r5, r4
		if (!started) {
 80070a8:	4698      	mov	r8, r3
	while(state != XMODEM_STATE_COMPLETED && state != XMODEM_STATE_FAILED) {
 80070aa:	1eab      	subs	r3, r5, #2
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d81e      	bhi.n	80070ee <xModem_rcv+0xba>
	int lfs_err = lfs_file_close(&lfs, &lfs_file);
 80070b0:	a903      	add	r1, sp, #12
 80070b2:	485b      	ldr	r0, [pc, #364]	; (8007220 <xModem_rcv+0x1ec>)
 80070b4:	f7ff fda4 	bl	8006c00 <lfs_file_close>
	if(lfs_err < 0)
 80070b8:	1e03      	subs	r3, r0, #0
 80070ba:	da05      	bge.n	80070c8 <xModem_rcv+0x94>
		PRINTLN("LFS close return error ! %d", lfs_err);
 80070bc:	f240 1239 	movw	r2, #313	; 0x139
 80070c0:	495c      	ldr	r1, [pc, #368]	; (8007234 <xModem_rcv+0x200>)
 80070c2:	485d      	ldr	r0, [pc, #372]	; (8007238 <xModem_rcv+0x204>)
 80070c4:	f002 f97e 	bl	80093c4 <iprintf>
	if(state == XMODEM_STATE_FAILED){
 80070c8:	2d03      	cmp	r5, #3
 80070ca:	d103      	bne.n	80070d4 <xModem_rcv+0xa0>
		lfs_remove(&lfs, path);
 80070cc:	4649      	mov	r1, r9
 80070ce:	4854      	ldr	r0, [pc, #336]	; (8007220 <xModem_rcv+0x1ec>)
 80070d0:	f7ff fd08 	bl	8006ae4 <lfs_remove>
	os_heap_free(path);
 80070d4:	4648      	mov	r0, r9
 80070d6:	f7fa fd6d 	bl	8001bb4 <os_heap_free>
	xmodem_state = OS_XMODEM_STATE_STOP;
 80070da:	9a01      	ldr	r2, [sp, #4]
	os_evt_delete(xmodem_evt_rcv);
 80070dc:	f8db 0000 	ldr.w	r0, [fp]
	xmodem_state = OS_XMODEM_STATE_STOP;
 80070e0:	2300      	movs	r3, #0
 80070e2:	7013      	strb	r3, [r2, #0]
	os_evt_delete(xmodem_evt_rcv);
 80070e4:	f7fa fcdc 	bl	8001aa0 <os_evt_delete>
	cli_init();
 80070e8:	f7fa f86c 	bl	80011c4 <cli_init>
	return NULL;
 80070ec:	e7bf      	b.n	800706e <xModem_rcv+0x3a>
		if (state == XMODEM_STATE_WAIT_TO_START) {
 80070ee:	bb8d      	cbnz	r5, 8007154 <xModem_rcv+0x120>
			sendResponse(XMODEM_CMD_C);
 80070f0:	2043      	movs	r0, #67	; 0x43
			waitToStart++;
 80070f2:	f10a 0a01 	add.w	sl, sl, #1
			sendResponse(XMODEM_CMD_C);
 80070f6:	f7ff ff75 	bl	8006fe4 <sendResponse>
			if (waitToStart > XMODEM_START_TIMEOUT) {
 80070fa:	f1ba 0f1e 	cmp.w	sl, #30
 80070fe:	dd03      	ble.n	8007108 <xModem_rcv+0xd4>
				sendResponse(XMODEM_CMD_CAN);
 8007100:	2018      	movs	r0, #24
 8007102:	f7ff ff6f 	bl	8006fe4 <sendResponse>
				state = XMODEM_STATE_FAILED;
 8007106:	2503      	movs	r5, #3
		HAL_UART_Receive_IT(&USART_CLI, packet, 1);
 8007108:	2201      	movs	r2, #1
 800710a:	a918      	add	r1, sp, #96	; 0x60
 800710c:	4630      	mov	r0, r6
 800710e:	f001 fbc5 	bl	800889c <HAL_UART_Receive_IT>
		os_obj_single_wait(xmodem_evt_rcv, 1000, &err);
 8007112:	aa02      	add	r2, sp, #8
 8007114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007118:	f8db 0000 	ldr.w	r0, [fp]
 800711c:	f7fb fcba 	bl	8002a94 <os_obj_single_wait>
		receivedBytes = err == OS_ERR_OK ? 1 : 5;
 8007120:	9b02      	ldr	r3, [sp, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d175      	bne.n	8007212 <xModem_rcv+0x1de>
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 8007126:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800712a:	2b01      	cmp	r3, #1
 800712c:	d166      	bne.n	80071fc <xModem_rcv+0x1c8>
			HAL_UART_Receive_IT(&USART_CLI, packet + 1, XMODEM_DATA_SIZE + 4);
 800712e:	2284      	movs	r2, #132	; 0x84
 8007130:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8007134:	4630      	mov	r0, r6
 8007136:	f001 fbb1 	bl	800889c <HAL_UART_Receive_IT>
			os_obj_single_wait(xmodem_evt_rcv, 1000, &err);
 800713a:	aa02      	add	r2, sp, #8
 800713c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007140:	f8db 0000 	ldr.w	r0, [fp]
 8007144:	f7fb fca6 	bl	8002a94 <os_obj_single_wait>
			receivedBytes = err == OS_ERR_OK ? (XMODEM_DATA_SIZE + 4) : 5;
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	b143      	cbz	r3, 800715e <xModem_rcv+0x12a>
			sendResponse(XMODEM_CMD_CAN);
 800714c:	2018      	movs	r0, #24
 800714e:	f7ff ff49 	bl	8006fe4 <sendResponse>
 8007152:	e049      	b.n	80071e8 <xModem_rcv+0x1b4>
				sendResponse(response);
 8007154:	4620      	mov	r0, r4
 8007156:	f7ff ff45 	bl	8006fe4 <sendResponse>
 800715a:	2501      	movs	r5, #1
 800715c:	e7d4      	b.n	8007108 <xModem_rcv+0xd4>
	switch (packet->header) {
 800715e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8007162:	2b01      	cmp	r3, #1
 8007164:	d003      	beq.n	800716e <xModem_rcv+0x13a>
 8007166:	2b04      	cmp	r3, #4
 8007168:	d031      	beq.n	80071ce <xModem_rcv+0x19a>
		*response = XMODEM_CMD_CAN;
 800716a:	2418      	movs	r4, #24
 800716c:	e7ee      	b.n	800714c <xModem_rcv+0x118>
		if (!started) {
 800716e:	f898 3000 	ldrb.w	r3, [r8]
 8007172:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8007176:	2b00      	cmp	r3, #0
 8007178:	d138      	bne.n	80071ec <xModem_rcv+0x1b8>
			if (packet->packetNumber != 0x01) {
 800717a:	2a01      	cmp	r2, #1
 800717c:	d001      	beq.n	8007182 <xModem_rcv+0x14e>
				*response = XMODEM_CMD_NAK;
 800717e:	2415      	movs	r4, #21
 8007180:	e7e4      	b.n	800714c <xModem_rcv+0x118>
			started = true;
 8007182:	f888 2000 	strb.w	r2, [r8]
		if (packet->packetNumber + packet->packetNumberC != 0xFF) {
 8007186:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 800718a:	4413      	add	r3, r2
 800718c:	2bff      	cmp	r3, #255	; 0xff
 800718e:	d1f6      	bne.n	800717e <xModem_rcv+0x14a>
 8007190:	2000      	movs	r0, #0
	size_t position = 0;
 8007192:	4601      	mov	r1, r0
		prevResult = xmodemCrc(buffer[position], prevResult);
 8007194:	ab18      	add	r3, sp, #96	; 0x60
 8007196:	440b      	add	r3, r1
	prevResult = (uint16_t)(newByte ^ prevResult);
 8007198:	ba40      	rev16	r0, r0
 800719a:	78db      	ldrb	r3, [r3, #3]
 800719c:	4043      	eors	r3, r0
 800719e:	b29b      	uxth	r3, r3
	prevResult ^= (uint16_t)((prevResult & 0xff) >> 4);
 80071a0:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80071a4:	4043      	eors	r3, r0
	prevResult ^= (uint16_t)((prevResult << 8) << 4);
 80071a6:	0318      	lsls	r0, r3, #12
 80071a8:	b280      	uxth	r0, r0
 80071aa:	4043      	eors	r3, r0
	for (; position < length; position++) {
 80071ac:	3101      	adds	r1, #1
	prevResult = (uint16_t)((((uint8_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) << 5)) | ((uint16_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) >> 3) << 8)) ^ prevResult);
 80071ae:	b2d8      	uxtb	r0, r3
	for (; position < length; position++) {
 80071b0:	2980      	cmp	r1, #128	; 0x80
	prevResult = (uint16_t)((((uint8_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) << 5)) | ((uint16_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) >> 3) << 8)) ^ prevResult);
 80071b2:	ea83 1040 	eor.w	r0, r3, r0, lsl #5
	for (; position < length; position++) {
 80071b6:	d1ed      	bne.n	8007194 <xModem_rcv+0x160>
		if (((crc16 >> 8) & 0xFF) != packet->crcH) {
 80071b8:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80071bc:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80071c0:	d1dd      	bne.n	800717e <xModem_rcv+0x14a>
		if ((crc16 & 0xFF) != packet->crcL) {
 80071c2:	f89d 10e4 	ldrb.w	r1, [sp, #228]	; 0xe4
 80071c6:	b2c3      	uxtb	r3, r0
 80071c8:	4299      	cmp	r1, r3
 80071ca:	d1d8      	bne.n	800717e <xModem_rcv+0x14a>
		packetNumber = packet->packetNumber;
 80071cc:	703a      	strb	r2, [r7, #0]
					int err = lfs_file_write(&lfs, &lfs_file, ((XmodemPacket_t *)packet)->data, XMODEM_DATA_SIZE);
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	f10d 0263 	add.w	r2, sp, #99	; 0x63
 80071d4:	a903      	add	r1, sp, #12
 80071d6:	4812      	ldr	r0, [pc, #72]	; (8007220 <xModem_rcv+0x1ec>)
 80071d8:	f7ff fd5e 	bl	8006c98 <lfs_file_write>
					if (err >= 0) {
 80071dc:	2800      	cmp	r0, #0
 80071de:	da15      	bge.n	800720c <xModem_rcv+0x1d8>
						sendResponse(XMODEM_CMD_CAN);
 80071e0:	2018      	movs	r0, #24
 80071e2:	f7ff feff 	bl	8006fe4 <sendResponse>
 80071e6:	2406      	movs	r4, #6
						state = XMODEM_STATE_FAILED;
 80071e8:	2503      	movs	r5, #3
 80071ea:	e75e      	b.n	80070aa <xModem_rcv+0x76>
			if (packet->packetNumber == packetNumber) {
 80071ec:	783b      	ldrb	r3, [r7, #0]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d0ed      	beq.n	80071ce <xModem_rcv+0x19a>
			} else if (packet->packetNumber != (uint8_t)(packetNumber + 1)) {
 80071f2:	3301      	adds	r3, #1
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d1c1      	bne.n	800717e <xModem_rcv+0x14a>
 80071fa:	e7c4      	b.n	8007186 <xModem_rcv+0x152>
			if (receivedBytes == 1 && ((XmodemPacket_t *)packet)->header == XMODEM_CMD_EOT) {
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	f47f af54 	bne.w	80070aa <xModem_rcv+0x76>
				sendResponse(XMODEM_CMD_ACK);
 8007202:	2006      	movs	r0, #6
 8007204:	f7ff feee 	bl	8006fe4 <sendResponse>
				state = XMODEM_STATE_COMPLETED;
 8007208:	2502      	movs	r5, #2
 800720a:	e74e      	b.n	80070aa <xModem_rcv+0x76>
 800720c:	2406      	movs	r4, #6
 800720e:	2501      	movs	r5, #1
 8007210:	e74b      	b.n	80070aa <xModem_rcv+0x76>
		if (state == XMODEM_STATE_IN_PROGRESS && !(receivedBytes == 1 || receivedBytes == 132)) {
 8007212:	2d01      	cmp	r5, #1
 8007214:	f47f af49 	bne.w	80070aa <xModem_rcv+0x76>
 8007218:	e798      	b.n	800714c <xModem_rcv+0x118>
 800721a:	bf00      	nop
 800721c:	20014e78 	.word	0x20014e78
 8007220:	20014e00 	.word	0x20014e00
 8007224:	20014ebc 	.word	0x20014ebc
 8007228:	20014db0 	.word	0x20014db0
 800722c:	20014db2 	.word	0x20014db2
 8007230:	20014db1 	.word	0x20014db1
 8007234:	0800b5cc 	.word	0x0800b5cc
 8007238:	0800b5d5 	.word	0x0800b5d5

0800723c <os_sl_translate>:
		OS_JEBA("__io_putchar", __io_putchar),
};

void* os_sl_translate(char* name){
	for(int i = 0; i < sizeof(teste)/sizeof(*teste); i++){
		if(strcmp(teste[i].name, name) == 0){
 800723c:	4601      	mov	r1, r0
void* os_sl_translate(char* name){
 800723e:	b508      	push	{r3, lr}
		if(strcmp(teste[i].name, name) == 0){
 8007240:	4803      	ldr	r0, [pc, #12]	; (8007250 <os_sl_translate+0x14>)
 8007242:	f7f8 ffc5 	bl	80001d0 <strcmp>
 8007246:	2800      	cmp	r0, #0
			return teste[i].fnPtr;
		}
	}

	return NULL;
}
 8007248:	4802      	ldr	r0, [pc, #8]	; (8007254 <os_sl_translate+0x18>)
 800724a:	bf18      	it	ne
 800724c:	2000      	movne	r0, #0
 800724e:	bd08      	pop	{r3, pc}
 8007250:	0800b5fd 	.word	0x0800b5fd
 8007254:	08007599 	.word	0x08007599

08007258 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725c:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800725e:	2214      	movs	r2, #20
 8007260:	2100      	movs	r1, #0
 8007262:	a807      	add	r0, sp, #28
 8007264:	f001 fdde 	bl	8008e24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007268:	2400      	movs	r4, #0
 800726a:	4b4c      	ldr	r3, [pc, #304]	; (800739c <MX_GPIO_Init+0x144>)
 800726c:	9401      	str	r4, [sp, #4]
 800726e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8007270:	4e4b      	ldr	r6, [pc, #300]	; (80073a0 <MX_GPIO_Init+0x148>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007272:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80073b8 <MX_GPIO_Init+0x160>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007276:	f042 0210 	orr.w	r2, r2, #16
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
 800727c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727e:	f002 0210 	and.w	r2, r2, #16
 8007282:	9201      	str	r2, [sp, #4]
 8007284:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007286:	9402      	str	r4, [sp, #8]
 8007288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728a:	f042 0204 	orr.w	r2, r2, #4
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
 8007290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007292:	f002 0204 	and.w	r2, r2, #4
 8007296:	9202      	str	r2, [sp, #8]
 8007298:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800729a:	9403      	str	r4, [sp, #12]
 800729c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800729e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072a2:	631a      	str	r2, [r3, #48]	; 0x30
 80072a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80072aa:	9203      	str	r2, [sp, #12]
 80072ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ae:	9404      	str	r4, [sp, #16]
 80072b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
 80072b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ba:	f002 0201 	and.w	r2, r2, #1
 80072be:	9204      	str	r2, [sp, #16]
 80072c0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072c2:	9405      	str	r4, [sp, #20]
 80072c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c6:	f042 0202 	orr.w	r2, r2, #2
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
 80072cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ce:	f002 0202 	and.w	r2, r2, #2
 80072d2:	9205      	str	r2, [sp, #20]
 80072d4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072d6:	9406      	str	r4, [sp, #24]
 80072d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072da:	f042 0208 	orr.w	r2, r2, #8
 80072de:	631a      	str	r2, [r3, #48]	; 0x30
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80072e6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072e8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80072ea:	4630      	mov	r0, r6
 80072ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072f0:	2503      	movs	r5, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072f2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80072f4:	f000 fe56 	bl	8007fa4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072fc:	a907      	add	r1, sp, #28
 80072fe:	4829      	ldr	r0, [pc, #164]	; (80073a4 <MX_GPIO_Init+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007302:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007306:	f000 fd6d 	bl	8007de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800730a:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800730e:	a907      	add	r1, sp, #28
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <MX_GPIO_Init+0x150>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007312:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007314:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007318:	f000 fd64 	bl	8007de4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800731c:	a907      	add	r1, sp, #28
 800731e:	4823      	ldr	r0, [pc, #140]	; (80073ac <MX_GPIO_Init+0x154>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007320:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007322:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007326:	f000 fd5d 	bl	8007de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800732a:	4b21      	ldr	r3, [pc, #132]	; (80073b0 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800732e:	2701      	movs	r7, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007330:	a907      	add	r1, sp, #28
 8007332:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007334:	e9cd 7307 	strd	r7, r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007338:	f000 fd54 	bl	8007de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800733c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007340:	a907      	add	r1, sp, #28
 8007342:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007344:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007348:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800734a:	f000 fd4b 	bl	8007de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800734e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007352:	a907      	add	r1, sp, #28
 8007354:	4817      	ldr	r0, [pc, #92]	; (80073b4 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007356:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007358:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800735c:	f000 fd42 	bl	8007de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8007360:	f640 73ff 	movw	r3, #4095	; 0xfff
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007364:	a907      	add	r1, sp, #28
 8007366:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007368:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800736e:	f000 fd39 	bl	8007de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8007372:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007376:	a907      	add	r1, sp, #28
 8007378:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800737a:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007382:	f000 fd2f 	bl	8007de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8007386:	4622      	mov	r2, r4
 8007388:	210f      	movs	r1, #15
 800738a:	2006      	movs	r0, #6
 800738c:	f000 fac8 	bl	8007920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007390:	2006      	movs	r0, #6
 8007392:	f000 faf9 	bl	8007988 <HAL_NVIC_EnableIRQ>

}
 8007396:	b00c      	add	sp, #48	; 0x30
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	40023800 	.word	0x40023800
 80073a0:	40020c00 	.word	0x40020c00
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40020800 	.word	0x40020800
 80073ac:	40021c00 	.word	0x40021c00
 80073b0:	10110000 	.word	0x10110000
 80073b4:	40020400 	.word	0x40020400
 80073b8:	40020000 	.word	0x40020000

080073bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80073bc:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073be:	2414      	movs	r4, #20
{
 80073c0:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073c2:	4622      	mov	r2, r4
 80073c4:	2100      	movs	r1, #0
 80073c6:	a809      	add	r0, sp, #36	; 0x24
 80073c8:	f001 fd2c 	bl	8008e24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073cc:	4622      	mov	r2, r4
 80073ce:	2100      	movs	r1, #0
 80073d0:	a803      	add	r0, sp, #12
 80073d2:	f001 fd27 	bl	8008e24 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80073d6:	2500      	movs	r5, #0
 80073d8:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <SystemClock_Config+0x88>)
 80073da:	9501      	str	r5, [sp, #4]
 80073dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80073ee:	4b16      	ldr	r3, [pc, #88]	; (8007448 <SystemClock_Config+0x8c>)
 80073f0:	9502      	str	r5, [sp, #8]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007400:	9302      	str	r3, [sp, #8]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007402:	2201      	movs	r2, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007404:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007406:	2310      	movs	r3, #16
 8007408:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 84;
 800740c:	2108      	movs	r1, #8
 800740e:	2354      	movs	r3, #84	; 0x54
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007410:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLN = 84;
 8007412:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007416:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8007418:	2307      	movs	r3, #7
 800741a:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800741c:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800741e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007422:	9412      	str	r4, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007424:	f000 fdd8 	bl	8007fd8 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007428:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800742a:	e9cd 3403 	strd	r3, r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800742e:	4621      	mov	r1, r4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007434:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007436:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007438:	e9cd 3506 	strd	r3, r5, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800743c:	f000 ffa0 	bl	8008380 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
}
 8007440:	b015      	add	sp, #84	; 0x54
 8007442:	bd30      	pop	{r4, r5, pc}
 8007444:	40023800 	.word	0x40023800
 8007448:	40007000 	.word	0x40007000

0800744c <main>:
{
 800744c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_Init();
 800744e:	f000 fa29 	bl	80078a4 <HAL_Init>
	SystemClock_Config();
 8007452:	f7ff ffb3 	bl	80073bc <SystemClock_Config>
	MX_GPIO_Init();
 8007456:	f7ff feff 	bl	8007258 <MX_GPIO_Init>
	MX_TIM13_Init();
 800745a:	f000 f90d 	bl	8007678 <MX_TIM13_Init>
	MX_USART3_UART_Init();
 800745e:	f000 f95b 	bl	8007718 <MX_USART3_UART_Init>
	cli_init();
 8007462:	f7f9 feaf 	bl	80011c4 <cli_init>
	PRINTLN("Periph Init Finished");
 8007466:	2261      	movs	r2, #97	; 0x61
 8007468:	4917      	ldr	r1, [pc, #92]	; (80074c8 <main+0x7c>)
 800746a:	4818      	ldr	r0, [pc, #96]	; (80074cc <main+0x80>)
 800746c:	f001 ffaa 	bl	80093c4 <iprintf>
	ASSERT(os_init("main", 10, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 8007470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007474:	9200      	str	r2, [sp, #0]
 8007476:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <main+0x84>)
 8007478:	4816      	ldr	r0, [pc, #88]	; (80074d4 <main+0x88>)
 800747a:	210a      	movs	r1, #10
 800747c:	f7fa fa2a 	bl	80018d4 <os_init>
 8007480:	b120      	cbz	r0, 800748c <main+0x40>
 8007482:	2262      	movs	r2, #98	; 0x62
 8007484:	4910      	ldr	r1, [pc, #64]	; (80074c8 <main+0x7c>)
 8007486:	4814      	ldr	r0, [pc, #80]	; (80074d8 <main+0x8c>)
 8007488:	f001 ff9c 	bl	80093c4 <iprintf>
	os_scheduler_start();
 800748c:	f7fb fb98 	bl	8002bc0 <os_scheduler_start>
	PRINTLN("Init OS finished");
 8007490:	2265      	movs	r2, #101	; 0x65
 8007492:	490d      	ldr	r1, [pc, #52]	; (80074c8 <main+0x7c>)
 8007494:	4811      	ldr	r0, [pc, #68]	; (80074dc <main+0x90>)
			HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8007496:	4e12      	ldr	r6, [pc, #72]	; (80074e0 <main+0x94>)
	PRINTLN("Init OS finished");
 8007498:	f001 ff94 	bl	80093c4 <iprintf>
	os_lfs_init();
 800749c:	f7ff fd44 	bl	8006f28 <os_lfs_init>
	uint32_t tick_before = HAL_GetTick();
 80074a0:	f000 fa26 	bl	80078f0 <HAL_GetTick>
 80074a4:	4604      	mov	r4, r0
		cli_process();
 80074a6:	f7f9 fea9 	bl	80011fc <cli_process>
		uint32_t tick_now = HAL_GetTick();
 80074aa:	f000 fa21 	bl	80078f0 <HAL_GetTick>
		if(tick_now - tick_before > 1000){
 80074ae:	1b03      	subs	r3, r0, r4
 80074b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		uint32_t tick_now = HAL_GetTick();
 80074b4:	4605      	mov	r5, r0
		if(tick_now - tick_before > 1000){
 80074b6:	d9f6      	bls.n	80074a6 <main+0x5a>
			HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80074b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 fd76 	bl	8007fae <HAL_GPIO_TogglePin>
		uint32_t tick_now = HAL_GetTick();
 80074c2:	462c      	mov	r4, r5
 80074c4:	e7ef      	b.n	80074a6 <main+0x5a>
 80074c6:	bf00      	nop
 80074c8:	0800b60a 	.word	0x0800b60a
 80074cc:	0800b611 	.word	0x0800b611
 80074d0:	0800b632 	.word	0x0800b632
 80074d4:	0800a4ac 	.word	0x0800a4ac
 80074d8:	0800a4c7 	.word	0x0800a4c7
 80074dc:	0800b637 	.word	0x0800b637
 80074e0:	40020c00 	.word	0x40020c00

080074e4 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80074e8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074ea:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <HAL_MspInit+0x7c>)
 80074ec:	2400      	movs	r4, #0
 80074ee:	9400      	str	r4, [sp, #0]
 80074f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
 80074f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80074fe:	9200      	str	r2, [sp, #0]
 8007500:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007502:	9401      	str	r4, [sp, #4]
 8007504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800750a:	641a      	str	r2, [r3, #64]	; 0x40
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007512:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8007514:	4622      	mov	r2, r4
 8007516:	210f      	movs	r1, #15
 8007518:	f06f 000b 	mvn.w	r0, #11
  __HAL_RCC_PWR_CLK_ENABLE();
 800751c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 800751e:	f000 f9ff 	bl	8007920 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8007522:	4622      	mov	r2, r4
 8007524:	210f      	movs	r1, #15
 8007526:	f06f 000a 	mvn.w	r0, #10
 800752a:	f000 f9f9 	bl	8007920 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800752e:	4622      	mov	r2, r4
 8007530:	210f      	movs	r1, #15
 8007532:	f06f 0009 	mvn.w	r0, #9
 8007536:	f000 f9f3 	bl	8007920 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800753a:	4622      	mov	r2, r4
 800753c:	210f      	movs	r1, #15
 800753e:	f06f 0004 	mvn.w	r0, #4
 8007542:	f000 f9ed 	bl	8007920 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8007546:	4622      	mov	r2, r4
 8007548:	210f      	movs	r1, #15
 800754a:	f06f 0003 	mvn.w	r0, #3
 800754e:	f000 f9e7 	bl	8007920 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007552:	4622      	mov	r2, r4
 8007554:	210f      	movs	r1, #15
 8007556:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800755a:	b002      	add	sp, #8
 800755c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007560:	f000 b9de 	b.w	8007920 <HAL_NVIC_SetPriority>
 8007564:	40023800 	.word	0x40023800

08007568 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007568:	4770      	bx	lr

0800756a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800756a:	e7fe      	b.n	800756a <HardFault_Handler>

0800756c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800756c:	e7fe      	b.n	800756c <MemManage_Handler>

0800756e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800756e:	e7fe      	b.n	800756e <BusFault_Handler>

08007570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007570:	e7fe      	b.n	8007570 <UsageFault_Handler>

08007572 <SVC_Handler>:
 8007572:	4770      	bx	lr

08007574 <DebugMon_Handler>:
 8007574:	4770      	bx	lr

08007576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007576:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007578:	f000 f9ae 	bl	80078d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 800757c:	2001      	movs	r0, #1
  /* USER CODE END SysTick_IRQn 1 */
}
 800757e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  os_tick(1);
 8007582:	f7fb be75 	b.w	8003270 <os_tick>

08007586 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007586:	2001      	movs	r0, #1
 8007588:	f000 bd1a 	b.w	8007fc0 <HAL_GPIO_EXTI_IRQHandler>

0800758c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <USART3_IRQHandler+0x8>)
 800758e:	f001 ba51 	b.w	8008a34 <HAL_UART_IRQHandler>
 8007592:	bf00      	nop
 8007594:	20014ebc 	.word	0x20014ebc

08007598 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;


int __io_putchar(int ch){
 8007598:	b507      	push	{r0, r1, r2, lr}
 800759a:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 800759c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
int __io_putchar(int ch){
 80075a0:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80075a4:	2201      	movs	r2, #1
 80075a6:	4803      	ldr	r0, [pc, #12]	; (80075b4 <__io_putchar+0x1c>)
 80075a8:	f001 f91c 	bl	80087e4 <HAL_UART_Transmit>
	return 0;
}
 80075ac:	2000      	movs	r0, #0
 80075ae:	b003      	add	sp, #12
 80075b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80075b4:	20014ebc 	.word	0x20014ebc

080075b8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80075b8:	2001      	movs	r0, #1
 80075ba:	4770      	bx	lr

080075bc <_kill>:

int _kill(int pid, int sig)
{
 80075bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80075be:	f001 fbb7 	bl	8008d30 <__errno>
 80075c2:	2316      	movs	r3, #22
 80075c4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80075c6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ca:	bd08      	pop	{r3, pc}

080075cc <_exit>:

void _exit (int status)
{
 80075cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80075ce:	f001 fbaf 	bl	8008d30 <__errno>
 80075d2:	2316      	movs	r3, #22
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	e7fe      	b.n	80075d6 <_exit+0xa>

080075d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	460e      	mov	r6, r1
 80075dc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075de:	460c      	mov	r4, r1
 80075e0:	1ba3      	subs	r3, r4, r6
 80075e2:	429d      	cmp	r5, r3
 80075e4:	dc01      	bgt.n	80075ea <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80075e6:	4628      	mov	r0, r5
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80075ea:	f3af 8000 	nop.w
 80075ee:	f804 0b01 	strb.w	r0, [r4], #1
 80075f2:	e7f5      	b.n	80075e0 <_read+0x8>

080075f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	460e      	mov	r6, r1
 80075f8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075fa:	460c      	mov	r4, r1
 80075fc:	1ba3      	subs	r3, r4, r6
 80075fe:	429d      	cmp	r5, r3
 8007600:	dc01      	bgt.n	8007606 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8007602:	4628      	mov	r0, r5
 8007604:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007606:	f814 0b01 	ldrb.w	r0, [r4], #1
 800760a:	f7ff ffc5 	bl	8007598 <__io_putchar>
 800760e:	e7f5      	b.n	80075fc <_write+0x8>

08007610 <_close>:

int _close(int file)
{
	return -1;
}
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	4770      	bx	lr

08007616 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800761a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800761c:	2000      	movs	r0, #0
 800761e:	4770      	bx	lr

08007620 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007620:	2001      	movs	r0, #1
 8007622:	4770      	bx	lr

08007624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007624:	2000      	movs	r0, #0
 8007626:	4770      	bx	lr

08007628 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007628:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800762a:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <_sbrk+0x2c>)
 800762c:	6819      	ldr	r1, [r3, #0]
{
 800762e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007630:	b909      	cbnz	r1, 8007636 <_sbrk+0xe>
		heap_end = &end;
 8007632:	4909      	ldr	r1, [pc, #36]	; (8007658 <_sbrk+0x30>)
 8007634:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007636:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007638:	4669      	mov	r1, sp
 800763a:	4402      	add	r2, r0
 800763c:	428a      	cmp	r2, r1
 800763e:	d906      	bls.n	800764e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8007640:	f001 fb76 	bl	8008d30 <__errno>
 8007644:	230c      	movs	r3, #12
 8007646:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800764c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800764e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8007650:	e7fc      	b.n	800764c <_sbrk+0x24>
 8007652:	bf00      	nop
 8007654:	20014db4 	.word	0x20014db4
 8007658:	20014f28 	.word	0x20014f28

0800765c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <SystemInit+0x18>)
 800765e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007662:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800766a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800766e:	609a      	str	r2, [r3, #8]
#endif
}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	e000ed00 	.word	0xe000ed00

08007678 <MX_TIM13_Init>:

/* TIM13 init function */
void MX_TIM13_Init(void)
{

  htim13.Instance = TIM13;
 8007678:	480d      	ldr	r0, [pc, #52]	; (80076b0 <MX_TIM13_Init+0x38>)
  htim13.Init.Prescaler = 0;
 800767a:	4a0e      	ldr	r2, [pc, #56]	; (80076b4 <MX_TIM13_Init+0x3c>)
{
 800767c:	b508      	push	{r3, lr}
  htim13.Init.Prescaler = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	e9c0 2300 	strd	r2, r3, [r0]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim13.Init.Period = 0xFFFF;
 8007684:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007688:	6083      	str	r3, [r0, #8]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800768a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800768e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007690:	f000 ff98 	bl	80085c4 <HAL_TIM_Base_Init>
 8007694:	b108      	cbz	r0, 800769a <MX_TIM13_Init+0x22>
  {
    Error_Handler();
 8007696:	f7ff ff25 	bl	80074e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 800769a:	2108      	movs	r1, #8
 800769c:	4804      	ldr	r0, [pc, #16]	; (80076b0 <MX_TIM13_Init+0x38>)
 800769e:	f000 ffab 	bl	80085f8 <HAL_TIM_OnePulse_Init>
 80076a2:	b118      	cbz	r0, 80076ac <MX_TIM13_Init+0x34>
  {
    Error_Handler();
  }

}
 80076a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80076a8:	f7ff bf1c 	b.w	80074e4 <Error_Handler>
}
 80076ac:	bd08      	pop	{r3, pc}
 80076ae:	bf00      	nop
 80076b0:	20014e7c 	.word	0x20014e7c
 80076b4:	40001c00 	.word	0x40001c00

080076b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM13)
 80076b8:	6802      	ldr	r2, [r0, #0]
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <HAL_TIM_Base_MspInit+0x28>)
 80076bc:	429a      	cmp	r2, r3
{
 80076be:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM13)
 80076c0:	d10b      	bne.n	80076da <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <HAL_TIM_Base_MspInit+0x2c>)
 80076c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80076da:	b002      	add	sp, #8
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40001c00 	.word	0x40001c00
 80076e4:	40023800 	.word	0x40023800

080076e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b508      	push	{r3, lr}
	if(huart == &USART_CLI){
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <HAL_UART_RxCpltCallback+0x28>)
 80076ec:	4283      	cmp	r3, r0
 80076ee:	d10d      	bne.n	800770c <HAL_UART_RxCpltCallback+0x24>
		if(xModem_getState() == 1){
 80076f0:	f7ff fc9a 	bl	8007028 <xModem_getState>
 80076f4:	2801      	cmp	r0, #1
 80076f6:	d105      	bne.n	8007704 <HAL_UART_RxCpltCallback+0x1c>
			os_evt_set(xmodem_evt_rcv);
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <HAL_UART_RxCpltCallback+0x2c>)
 80076fa:	6818      	ldr	r0, [r3, #0]
		}
		else{
			cli_rcv_char_cb_irq();
		}
	}
}
 80076fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			os_evt_set(xmodem_evt_rcv);
 8007700:	f7fa b9a8 	b.w	8001a54 <os_evt_set>
}
 8007704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			cli_rcv_char_cb_irq();
 8007708:	f7f9 bd48 	b.w	800119c <cli_rcv_char_cb_irq>
}
 800770c:	bd08      	pop	{r3, pc}
 800770e:	bf00      	nop
 8007710:	20014ebc 	.word	0x20014ebc
 8007714:	20014e78 	.word	0x20014e78

08007718 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8007718:	480b      	ldr	r0, [pc, #44]	; (8007748 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800771a:	4a0c      	ldr	r2, [pc, #48]	; (800774c <MX_USART3_UART_Init+0x34>)
{
 800771c:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 800771e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007722:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007726:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007728:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800772a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 800772e:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007730:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007734:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007736:	f001 f827 	bl	8008788 <HAL_UART_Init>
 800773a:	b118      	cbz	r0, 8007744 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800773c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007740:	f7ff bed0 	b.w	80074e4 <Error_Handler>
}
 8007744:	bd08      	pop	{r3, pc}
 8007746:	bf00      	nop
 8007748:	20014ebc 	.word	0x20014ebc
 800774c:	40004800 	.word	0x40004800

08007750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007756:	2214      	movs	r2, #20
 8007758:	2100      	movs	r1, #0
 800775a:	a803      	add	r0, sp, #12
 800775c:	f001 fb62 	bl	8008e24 <memset>
  if(uartHandle->Instance==USART3)
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <HAL_UART_MspInit+0x8c>)
 8007764:	429a      	cmp	r2, r3
 8007766:	d137      	bne.n	80077d8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007768:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800776c:	2400      	movs	r4, #0
 800776e:	9401      	str	r4, [sp, #4]
 8007770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007772:	481b      	ldr	r0, [pc, #108]	; (80077e0 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007774:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007778:	641a      	str	r2, [r3, #64]	; 0x40
 800777a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007784:	9402      	str	r4, [sp, #8]
 8007786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007788:	f042 0204 	orr.w	r2, r2, #4
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	9302      	str	r3, [sp, #8]
 8007796:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007798:	2702      	movs	r7, #2
 800779a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800779e:	2603      	movs	r6, #3
 80077a0:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077a2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80077a8:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077ac:	f000 fb1a 	bl	8007de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80077b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077ba:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077bc:	4808      	ldr	r0, [pc, #32]	; (80077e0 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80077be:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077c0:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077c4:	f000 fb0e 	bl	8007de4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 80077c8:	2027      	movs	r0, #39	; 0x27
 80077ca:	4622      	mov	r2, r4
 80077cc:	210f      	movs	r1, #15
 80077ce:	f000 f8a7 	bl	8007920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80077d2:	2027      	movs	r0, #39	; 0x27
 80077d4:	f000 f8d8 	bl	8007988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80077d8:	b009      	add	sp, #36	; 0x24
 80077da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077dc:	40004800 	.word	0x40004800
 80077e0:	40020800 	.word	0x40020800

080077e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80077e4:	f8df d04c 	ldr.w	sp, [pc, #76]	; 8007834 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80077e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80077ea:	e003      	b.n	80077f4 <LoopCopyDataInit>

080077ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 80077ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80077f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80077f2:	3104      	adds	r1, #4

080077f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80077f4:	4811      	ldr	r0, [pc, #68]	; (800783c <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 80077f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80077fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80077fc:	d3f6      	bcc.n	80077ec <CopyDataInit>

  ldr r0, =_sslPtr
 80077fe:	4811      	ldr	r0, [pc, #68]	; (8007844 <LoopFillZerobss+0x26>)
  ldr r1, =_eslPtr
 8007800:	4911      	ldr	r1, [pc, #68]	; (8007848 <LoopFillZerobss+0x2a>)
  ldr r2, =_sislPtr
 8007802:	4a12      	ldr	r2, [pc, #72]	; (800784c <LoopFillZerobss+0x2e>)
  movs r3, #0
 8007804:	2300      	movs	r3, #0
  b LoopSlPtrInit
 8007806:	e002      	b.n	800780e <LoopSlPtrInit>

08007808 <CopySlPtrInit>:

CopySlPtrInit:
  ldr r4, [r2, r3]
 8007808:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800780a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800780c:	3304      	adds	r3, #4

0800780e <LoopSlPtrInit>:

LoopSlPtrInit:
  adds r4, r0, r3
 800780e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007810:	428c      	cmp	r4, r1
  bcc CopySlPtrInit
 8007812:	d3f9      	bcc.n	8007808 <CopySlPtrInit>

  ldr  r2, =_sbss
 8007814:	4a0e      	ldr	r2, [pc, #56]	; (8007850 <LoopFillZerobss+0x32>)
  b  LoopFillZerobss
 8007816:	e002      	b.n	800781e <LoopFillZerobss>

08007818 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007818:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800781a:	f842 3b04 	str.w	r3, [r2], #4

0800781e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800781e:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <LoopFillZerobss+0x36>)
  cmp  r2, r3
 8007820:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007822:	d3f9      	bcc.n	8007818 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007824:	f7ff ff1a 	bl	800765c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007828:	f001 fa9a 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800782c:	f7ff fe0e 	bl	800744c <main>
  bx  lr    
 8007830:	4770      	bx	lr
 8007832:	0000      	.short	0x0000
  ldr   sp, =_estack     /* set stack pointer */
 8007834:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007838:	0800b85c 	.word	0x0800b85c
  ldr  r0, =_sdata
 800783c:	20000004 	.word	0x20000004
  ldr  r3, =_edata
 8007840:	20000488 	.word	0x20000488
  ldr r0, =_sslPtr
 8007844:	20000000 	.word	0x20000000
  ldr r1, =_eslPtr
 8007848:	20000004 	.word	0x20000004
  ldr r2, =_sislPtr
 800784c:	0800b858 	.word	0x0800b858
  ldr  r2, =_sbss
 8007850:	20000488 	.word	0x20000488
  ldr  r3, = _ebss
 8007854:	20014f24 	.word	0x20014f24

08007858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007858:	e7fe      	b.n	8007858 <ADC_IRQHandler>
	...

0800785c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800785c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800785e:	4a0e      	ldr	r2, [pc, #56]	; (8007898 <HAL_InitTick+0x3c>)
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <HAL_InitTick+0x40>)
{
 8007862:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007864:	7818      	ldrb	r0, [r3, #0]
 8007866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800786a:	fbb3 f3f0 	udiv	r3, r3, r0
 800786e:	6810      	ldr	r0, [r2, #0]
 8007870:	fbb0 f0f3 	udiv	r0, r0, r3
 8007874:	f000 f896 	bl	80079a4 <HAL_SYSTICK_Config>
 8007878:	4604      	mov	r4, r0
 800787a:	b958      	cbnz	r0, 8007894 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800787c:	2d0f      	cmp	r5, #15
 800787e:	d809      	bhi.n	8007894 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007880:	4602      	mov	r2, r0
 8007882:	4629      	mov	r1, r5
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	f000 f84a 	bl	8007920 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <HAL_InitTick+0x44>)
 800788e:	4620      	mov	r0, r4
 8007890:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007892:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007894:	2001      	movs	r0, #1
 8007896:	e7fc      	b.n	8007892 <HAL_InitTick+0x36>
 8007898:	200002ac 	.word	0x200002ac
 800789c:	200002b0 	.word	0x200002b0
 80078a0:	200002b4 	.word	0x200002b4

080078a4 <HAL_Init>:
{
 80078a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_Init+0x30>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078c0:	2003      	movs	r0, #3
 80078c2:	f000 f81b 	bl	80078fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80078c6:	200f      	movs	r0, #15
 80078c8:	f7ff ffc8 	bl	800785c <HAL_InitTick>
  HAL_MspInit();
 80078cc:	f7ff fe0c 	bl	80074e8 <HAL_MspInit>
}
 80078d0:	2000      	movs	r0, #0
 80078d2:	bd08      	pop	{r3, pc}
 80078d4:	40023c00 	.word	0x40023c00

080078d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80078d8:	4a03      	ldr	r2, [pc, #12]	; (80078e8 <HAL_IncTick+0x10>)
 80078da:	4b04      	ldr	r3, [pc, #16]	; (80078ec <HAL_IncTick+0x14>)
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	440b      	add	r3, r1
 80078e2:	6013      	str	r3, [r2, #0]
}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20014efc 	.word	0x20014efc
 80078ec:	200002b0 	.word	0x200002b0

080078f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80078f0:	4b01      	ldr	r3, [pc, #4]	; (80078f8 <HAL_GetTick+0x8>)
 80078f2:	6818      	ldr	r0, [r3, #0]
}
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20014efc 	.word	0x20014efc

080078fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078fc:	4a07      	ldr	r2, [pc, #28]	; (800791c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80078fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007900:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007904:	041b      	lsls	r3, r3, #16
 8007906:	0c1b      	lsrs	r3, r3, #16
 8007908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800790c:	0200      	lsls	r0, r0, #8
 800790e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007912:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8007916:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007918:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800791a:	4770      	bx	lr
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007920:	4b17      	ldr	r3, [pc, #92]	; (8007980 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007922:	b570      	push	{r4, r5, r6, lr}
 8007924:	68dc      	ldr	r4, [r3, #12]
 8007926:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800792a:	f1c4 0507 	rsb	r5, r4, #7
 800792e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007930:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	bf28      	it	cs
 8007936:	2504      	movcs	r5, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007938:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800793c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800793e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	bf8c      	ite	hi
 8007944:	3c03      	subhi	r4, #3
 8007946:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007948:	ea21 0303 	bic.w	r3, r1, r3
 800794c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800794e:	fa06 f404 	lsl.w	r4, r6, r4
 8007952:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8007956:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007958:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800795c:	bfa8      	it	ge
 800795e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8007962:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007966:	bfbc      	itt	lt
 8007968:	f000 000f 	andlt.w	r0, r0, #15
 800796c:	4a05      	ldrlt	r2, [pc, #20]	; (8007984 <HAL_NVIC_SetPriority+0x64>)
 800796e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007970:	bfaa      	itet	ge
 8007972:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007976:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007978:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800797c:	bd70      	pop	{r4, r5, r6, pc}
 800797e:	bf00      	nop
 8007980:	e000ed00 	.word	0xe000ed00
 8007984:	e000ed14 	.word	0xe000ed14

08007988 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007988:	2800      	cmp	r0, #0
 800798a:	db08      	blt.n	800799e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800798c:	0942      	lsrs	r2, r0, #5
 800798e:	2301      	movs	r3, #1
 8007990:	f000 001f 	and.w	r0, r0, #31
 8007994:	fa03 f000 	lsl.w	r0, r3, r0
 8007998:	4b01      	ldr	r3, [pc, #4]	; (80079a0 <HAL_NVIC_EnableIRQ+0x18>)
 800799a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800799e:	4770      	bx	lr
 80079a0:	e000e100 	.word	0xe000e100

080079a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079a4:	3801      	subs	r0, #1
 80079a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80079aa:	d20a      	bcs.n	80079c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ae:	4a07      	ldr	r2, [pc, #28]	; (80079cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b2:	21f0      	movs	r1, #240	; 0xf0
 80079b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80079c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	e000e010 	.word	0xe000e010
 80079cc:	e000ed00 	.word	0xe000ed00

080079d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079d4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80079d6:	f7ff ff8b 	bl	80078f0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079da:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80079de:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80079e0:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079e2:	d006      	beq.n	80079f2 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079e8:	2300      	movs	r3, #0
 80079ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 80079ee:	2001      	movs	r0, #1
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
  }
  return HAL_OK;
}
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	f022 0216 	bic.w	r2, r2, #22
 80079fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079fc:	695a      	ldr	r2, [r3, #20]
 80079fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a02:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a06:	b90a      	cbnz	r2, 8007a0c <HAL_DMA_Abort+0x3c>
 8007a08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007a0a:	b11a      	cbz	r2, 8007a14 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	f022 0208 	bic.w	r2, r2, #8
 8007a12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	f022 0201 	bic.w	r2, r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f010 0001 	ands.w	r0, r0, #1
 8007a24:	d109      	bne.n	8007a3a <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007a28:	233f      	movs	r3, #63	; 0x3f
 8007a2a:	4093      	lsls	r3, r2
 8007a2c:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8007a2e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8007a30:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8007a34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007a38:	e7da      	b.n	80079f0 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a3a:	f7ff ff59 	bl	80078f0 <HAL_GetTick>
 8007a3e:	1b80      	subs	r0, r0, r6
 8007a40:	2805      	cmp	r0, #5
 8007a42:	d9eb      	bls.n	8007a1c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a44:	2320      	movs	r3, #32
 8007a46:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a48:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a50:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8007a54:	e7cc      	b.n	80079f0 <HAL_DMA_Abort+0x20>

08007a56 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a56:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d003      	beq.n	8007a66 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8007a62:	2001      	movs	r0, #1
 8007a64:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a66:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a68:	2305      	movs	r3, #5
 8007a6a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a76:	2000      	movs	r0, #0
}
 8007a78:	4770      	bx	lr

08007a7a <HAL_DMA_GetError>:
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
  return hdma->ErrorCode;
 8007a7a:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007a7c:	4770      	bx	lr
	...

08007a80 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a80:	4909      	ldr	r1, [pc, #36]	; (8007aa8 <FLASH_Program_DoubleWord+0x28>)
{
 8007a82:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a84:	690c      	ldr	r4, [r1, #16]
 8007a86:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8007a8a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007a8c:	690c      	ldr	r4, [r1, #16]
 8007a8e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8007a92:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007a94:	690c      	ldr	r4, [r1, #16]
 8007a96:	f044 0401 	orr.w	r4, r4, #1
 8007a9a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007a9c:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007a9e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007aa2:	6043      	str	r3, [r0, #4]
}
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40023c00 	.word	0x40023c00

08007aac <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <FLASH_Program_Word+0x20>)
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007ab4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007abc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	f042 0201 	orr.w	r2, r2, #1
 8007ac4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8007ac6:	6001      	str	r1, [r0, #0]
}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40023c00 	.word	0x40023c00

08007ad0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <FLASH_Program_HalfWord+0x20>)
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007ad8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ae0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8007aea:	8001      	strh	r1, [r0, #0]
}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40023c00 	.word	0x40023c00

08007af4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007af4:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <FLASH_SetErrorCode+0x6c>)
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	06d2      	lsls	r2, r2, #27
 8007afa:	d506      	bpl.n	8007b0a <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007afc:	4919      	ldr	r1, [pc, #100]	; (8007b64 <FLASH_SetErrorCode+0x70>)
 8007afe:	69ca      	ldr	r2, [r1, #28]
 8007b00:	f042 0210 	orr.w	r2, r2, #16
 8007b04:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007b06:	2210      	movs	r2, #16
 8007b08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	0690      	lsls	r0, r2, #26
 8007b0e:	d506      	bpl.n	8007b1e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007b10:	4914      	ldr	r1, [pc, #80]	; (8007b64 <FLASH_SetErrorCode+0x70>)
 8007b12:	69ca      	ldr	r2, [r1, #28]
 8007b14:	f042 0208 	orr.w	r2, r2, #8
 8007b18:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007b1e:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <FLASH_SetErrorCode+0x6c>)
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	0651      	lsls	r1, r2, #25
 8007b24:	d506      	bpl.n	8007b34 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007b26:	490f      	ldr	r1, [pc, #60]	; (8007b64 <FLASH_SetErrorCode+0x70>)
 8007b28:	69ca      	ldr	r2, [r1, #28]
 8007b2a:	f042 0204 	orr.w	r2, r2, #4
 8007b2e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007b30:	2240      	movs	r2, #64	; 0x40
 8007b32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	0612      	lsls	r2, r2, #24
 8007b38:	d506      	bpl.n	8007b48 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007b3a:	490a      	ldr	r1, [pc, #40]	; (8007b64 <FLASH_SetErrorCode+0x70>)
 8007b3c:	69ca      	ldr	r2, [r1, #28]
 8007b3e:	f042 0202 	orr.w	r2, r2, #2
 8007b42:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007b44:	2280      	movs	r2, #128	; 0x80
 8007b46:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007b48:	4a05      	ldr	r2, [pc, #20]	; (8007b60 <FLASH_SetErrorCode+0x6c>)
 8007b4a:	68d3      	ldr	r3, [r2, #12]
 8007b4c:	079b      	lsls	r3, r3, #30
 8007b4e:	d506      	bpl.n	8007b5e <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007b50:	4904      	ldr	r1, [pc, #16]	; (8007b64 <FLASH_SetErrorCode+0x70>)
 8007b52:	69cb      	ldr	r3, [r1, #28]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	60d3      	str	r3, [r2, #12]
  }
}
 8007b5e:	4770      	bx	lr
 8007b60:	40023c00 	.word	0x40023c00
 8007b64:	20014f00 	.word	0x20014f00

08007b68 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <HAL_FLASH_Unlock+0x1c>)
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b6e:	bfbf      	itttt	lt
 8007b70:	4a05      	ldrlt	r2, [pc, #20]	; (8007b88 <HAL_FLASH_Unlock+0x20>)
 8007b72:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b74:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8007b78:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b7a:	bfba      	itte	lt
 8007b7c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8007b7e:	0fc0      	lsrlt	r0, r0, #31
 8007b80:	2000      	movge	r0, #0
}
 8007b82:	4770      	bx	lr
 8007b84:	40023c00 	.word	0x40023c00
 8007b88:	45670123 	.word	0x45670123

08007b8c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8007b8c:	4a03      	ldr	r2, [pc, #12]	; (8007b9c <HAL_FLASH_Lock+0x10>)
 8007b8e:	6913      	ldr	r3, [r2, #16]
 8007b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	6113      	str	r3, [r2, #16]
}
 8007b96:	2000      	movs	r0, #0
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40023c00 	.word	0x40023c00

08007ba0 <FLASH_WaitForLastOperation>:
{ 
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ba4:	4c12      	ldr	r4, [pc, #72]	; (8007bf0 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ba6:	2200      	movs	r2, #0
{ 
 8007ba8:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007baa:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8007bac:	f7ff fea0 	bl	80078f0 <HAL_GetTick>
 8007bb0:	4626      	mov	r6, r4
 8007bb2:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007bb4:	68e3      	ldr	r3, [r4, #12]
 8007bb6:	03da      	lsls	r2, r3, #15
 8007bb8:	d40c      	bmi.n	8007bd4 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007bba:	68e3      	ldr	r3, [r4, #12]
 8007bbc:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007bbe:	bf44      	itt	mi
 8007bc0:	2301      	movmi	r3, #1
 8007bc2:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007bc4:	68f0      	ldr	r0, [r6, #12]
 8007bc6:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8007bca:	d007      	beq.n	8007bdc <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8007bcc:	f7ff ff92 	bl	8007af4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	e003      	b.n	8007bdc <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8007bd4:	1c69      	adds	r1, r5, #1
 8007bd6:	d0ed      	beq.n	8007bb4 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007bd8:	b90d      	cbnz	r5, 8007bde <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8007bda:	2003      	movs	r0, #3
}  
 8007bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007bde:	f7ff fe87 	bl	80078f0 <HAL_GetTick>
 8007be2:	1bc0      	subs	r0, r0, r7
 8007be4:	42a8      	cmp	r0, r5
 8007be6:	d9e5      	bls.n	8007bb4 <FLASH_WaitForLastOperation+0x14>
 8007be8:	e7f7      	b.n	8007bda <FLASH_WaitForLastOperation+0x3a>
 8007bea:	bf00      	nop
 8007bec:	20014f00 	.word	0x20014f00
 8007bf0:	40023c00 	.word	0x40023c00

08007bf4 <HAL_FLASH_Program>:
{
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8007bf8:	4d1f      	ldr	r5, [pc, #124]	; (8007c78 <HAL_FLASH_Program+0x84>)
{
 8007bfa:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8007bfc:	7e2b      	ldrb	r3, [r5, #24]
 8007bfe:	2b01      	cmp	r3, #1
{
 8007c00:	4607      	mov	r7, r0
 8007c02:	460e      	mov	r6, r1
 8007c04:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8007c06:	d035      	beq.n	8007c74 <HAL_FLASH_Program+0x80>
 8007c08:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c0a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8007c0e:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c10:	f7ff ffc6 	bl	8007ba0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007c14:	b9b0      	cbnz	r0, 8007c44 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007c16:	b9cf      	cbnz	r7, 8007c4c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c18:	4b18      	ldr	r3, [pc, #96]	; (8007c7c <HAL_FLASH_Program+0x88>)
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c20:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c26:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007c28:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8007c30:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c36:	f7ff ffb3 	bl	8007ba0 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8007c3a:	4a10      	ldr	r2, [pc, #64]	; (8007c7c <HAL_FLASH_Program+0x88>)
 8007c3c:	6913      	ldr	r3, [r2, #16]
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8007c44:	2300      	movs	r3, #0
 8007c46:	762b      	strb	r3, [r5, #24]
}
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007c4c:	2f01      	cmp	r7, #1
 8007c4e:	d104      	bne.n	8007c5a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007c50:	b2a1      	uxth	r1, r4
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff ff3c 	bl	8007ad0 <FLASH_Program_HalfWord>
 8007c58:	e7eb      	b.n	8007c32 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007c5a:	2f02      	cmp	r7, #2
 8007c5c:	d104      	bne.n	8007c68 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ff23 	bl	8007aac <FLASH_Program_Word>
 8007c66:	e7e4      	b.n	8007c32 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4643      	mov	r3, r8
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff ff07 	bl	8007a80 <FLASH_Program_DoubleWord>
 8007c72:	e7de      	b.n	8007c32 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8007c74:	2002      	movs	r0, #2
 8007c76:	e7e7      	b.n	8007c48 <HAL_FLASH_Program+0x54>
 8007c78:	20014f00 	.word	0x20014f00
 8007c7c:	40023c00 	.word	0x40023c00

08007c80 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <FLASH_MassErase.isra.0+0x20>)
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c88:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	f042 0204 	orr.w	r2, r2, #4
 8007c90:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c98:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8007c9c:	6118      	str	r0, [r3, #16]
}
 8007c9e:	4770      	bx	lr
 8007ca0:	40023c00 	.word	0x40023c00

08007ca4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007ca4:	b139      	cbz	r1, 8007cb6 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007ca6:	2901      	cmp	r1, #1
 8007ca8:	d01c      	beq.n	8007ce4 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007caa:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007cac:	bf0c      	ite	eq
 8007cae:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8007cb2:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <FLASH_Erase_Sector+0x48>)
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007cbe:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	4311      	orrs	r1, r2
 8007cc4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007ccc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	f042 0202 	orr.w	r2, r2, #2
 8007cd4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8007cd8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ce0:	611a      	str	r2, [r3, #16]
}
 8007ce2:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ce8:	e7e5      	b.n	8007cb6 <FLASH_Erase_Sector+0x12>
 8007cea:	bf00      	nop
 8007cec:	40023c00 	.word	0x40023c00

08007cf0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007cf0:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <FLASH_FlushCaches+0x54>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	0591      	lsls	r1, r2, #22
 8007cf6:	d50f      	bpl.n	8007d18 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cfe:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d0e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d16:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <FLASH_FlushCaches+0x54>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	0552      	lsls	r2, r2, #21
 8007d1e:	d50f      	bpl.n	8007d40 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d26:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d36:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d3e:	601a      	str	r2, [r3, #0]
  }
}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40023c00 	.word	0x40023c00

08007d48 <HAL_FLASHEx_Erase>:
{
 8007d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007d4c:	4e23      	ldr	r6, [pc, #140]	; (8007ddc <HAL_FLASHEx_Erase+0x94>)
 8007d4e:	7e33      	ldrb	r3, [r6, #24]
 8007d50:	2b01      	cmp	r3, #1
{
 8007d52:	4604      	mov	r4, r0
 8007d54:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8007d56:	d03f      	beq.n	8007dd8 <HAL_FLASHEx_Erase+0x90>
 8007d58:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d5a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8007d5e:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d60:	f7ff ff1e 	bl	8007ba0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007d64:	4605      	mov	r5, r0
 8007d66:	b9a8      	cbnz	r0, 8007d94 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d113      	bne.n	8007d9e <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007d76:	7c20      	ldrb	r0, [r4, #16]
 8007d78:	f7ff ff82 	bl	8007c80 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d80:	f7ff ff0e 	bl	8007ba0 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8007d84:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <HAL_FLASHEx_Erase+0x98>)
 8007d86:	6913      	ldr	r3, [r2, #16]
 8007d88:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d8c:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8007d8e:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8007d90:	f7ff ffae 	bl	8007cf0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8007d94:	2300      	movs	r3, #0
 8007d96:	7633      	strb	r3, [r6, #24]
}
 8007d98:	4628      	mov	r0, r5
 8007d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d9e:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007da0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8007de0 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007da4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	42bb      	cmp	r3, r7
 8007dac:	d9f0      	bls.n	8007d90 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007dae:	7c21      	ldrb	r1, [r4, #16]
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ff77 	bl	8007ca4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007db6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007dba:	f7ff fef1 	bl	8007ba0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007dbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dc2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007dc6:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8007dca:	b118      	cbz	r0, 8007dd4 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8007dcc:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007dd0:	4605      	mov	r5, r0
          break;
 8007dd2:	e7dd      	b.n	8007d90 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007dd4:	3701      	adds	r7, #1
 8007dd6:	e7e5      	b.n	8007da4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8007dd8:	2502      	movs	r5, #2
 8007dda:	e7dd      	b.n	8007d98 <HAL_FLASHEx_Erase+0x50>
 8007ddc:	20014f00 	.word	0x20014f00
 8007de0:	40023c00 	.word	0x40023c00

08007de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007f9c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007df0:	4a68      	ldr	r2, [pc, #416]	; (8007f94 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007df2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8007fa0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007df6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007df8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8007dfa:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dfc:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8007dfe:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e00:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8007e02:	42ac      	cmp	r4, r5
 8007e04:	f040 80b0 	bne.w	8007f68 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e08:	684c      	ldr	r4, [r1, #4]
 8007e0a:	f024 0c10 	bic.w	ip, r4, #16
 8007e0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007e12:	2603      	movs	r6, #3
 8007e14:	f10c 37ff 	add.w	r7, ip, #4294967295
 8007e18:	fa06 f60e 	lsl.w	r6, r6, lr
 8007e1c:	2f01      	cmp	r7, #1
 8007e1e:	ea6f 0606 	mvn.w	r6, r6
 8007e22:	d811      	bhi.n	8007e48 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8007e24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e26:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e2a:	68cf      	ldr	r7, [r1, #12]
 8007e2c:	fa07 f70e 	lsl.w	r7, r7, lr
 8007e30:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007e34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007e36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e38:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e3c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8007e40:	409f      	lsls	r7, r3
 8007e42:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8007e46:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007e48:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e4a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e4e:	688f      	ldr	r7, [r1, #8]
 8007e50:	fa07 f70e 	lsl.w	r7, r7, lr
 8007e54:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e58:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8007e5c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e5e:	d116      	bne.n	8007e8e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8007e60:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8007e64:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e68:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8007e6c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007e74:	f04f 0c0f 	mov.w	ip, #15
 8007e78:	fa0c fc0b 	lsl.w	ip, ip, fp
 8007e7c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e80:	690f      	ldr	r7, [r1, #16]
 8007e82:	fa07 f70b 	lsl.w	r7, r7, fp
 8007e86:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8007e8a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8007e8e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e90:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e92:	f004 0703 	and.w	r7, r4, #3
 8007e96:	fa07 fe0e 	lsl.w	lr, r7, lr
 8007e9a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8007e9e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ea0:	00e6      	lsls	r6, r4, #3
 8007ea2:	d561      	bpl.n	8007f68 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ea4:	f04f 0b00 	mov.w	fp, #0
 8007ea8:	f8cd b00c 	str.w	fp, [sp, #12]
 8007eac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007eb0:	4e39      	ldr	r6, [pc, #228]	; (8007f98 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eb2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8007eb6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8007eba:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8007ebe:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8007ec2:	9703      	str	r7, [sp, #12]
 8007ec4:	9f03      	ldr	r7, [sp, #12]
 8007ec6:	f023 0703 	bic.w	r7, r3, #3
 8007eca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8007ece:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ed2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007ed6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007eda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007ede:	f04f 0c0f 	mov.w	ip, #15
 8007ee2:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ee6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ee8:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007eec:	d043      	beq.n	8007f76 <HAL_GPIO_Init+0x192>
 8007eee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007ef2:	42b0      	cmp	r0, r6
 8007ef4:	d041      	beq.n	8007f7a <HAL_GPIO_Init+0x196>
 8007ef6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007efa:	42b0      	cmp	r0, r6
 8007efc:	d03f      	beq.n	8007f7e <HAL_GPIO_Init+0x19a>
 8007efe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f02:	42b0      	cmp	r0, r6
 8007f04:	d03d      	beq.n	8007f82 <HAL_GPIO_Init+0x19e>
 8007f06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f0a:	42b0      	cmp	r0, r6
 8007f0c:	d03b      	beq.n	8007f86 <HAL_GPIO_Init+0x1a2>
 8007f0e:	4548      	cmp	r0, r9
 8007f10:	d03b      	beq.n	8007f8a <HAL_GPIO_Init+0x1a6>
 8007f12:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007f16:	42b0      	cmp	r0, r6
 8007f18:	d039      	beq.n	8007f8e <HAL_GPIO_Init+0x1aa>
 8007f1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f1e:	42b0      	cmp	r0, r6
 8007f20:	bf14      	ite	ne
 8007f22:	2608      	movne	r6, #8
 8007f24:	2607      	moveq	r6, #7
 8007f26:	fa06 f60e 	lsl.w	r6, r6, lr
 8007f2a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f2e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8007f30:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8007f32:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f34:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8007f38:	bf0c      	ite	eq
 8007f3a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8007f3c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8007f3e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8007f40:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f42:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8007f46:	bf0c      	ite	eq
 8007f48:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8007f4a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8007f4c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f4e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f50:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8007f54:	bf0c      	ite	eq
 8007f56:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8007f58:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8007f5a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8007f5c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f5e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8007f60:	bf54      	ite	pl
 8007f62:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8007f64:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8007f66:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f68:	3301      	adds	r3, #1
 8007f6a:	2b10      	cmp	r3, #16
 8007f6c:	f47f af45 	bne.w	8007dfa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8007f70:	b005      	add	sp, #20
 8007f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f76:	465e      	mov	r6, fp
 8007f78:	e7d5      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f7a:	2601      	movs	r6, #1
 8007f7c:	e7d3      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f7e:	2602      	movs	r6, #2
 8007f80:	e7d1      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f82:	2603      	movs	r6, #3
 8007f84:	e7cf      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f86:	2604      	movs	r6, #4
 8007f88:	e7cd      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f8a:	2605      	movs	r6, #5
 8007f8c:	e7cb      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f8e:	2606      	movs	r6, #6
 8007f90:	e7c9      	b.n	8007f26 <HAL_GPIO_Init+0x142>
 8007f92:	bf00      	nop
 8007f94:	40013c00 	.word	0x40013c00
 8007f98:	40020000 	.word	0x40020000
 8007f9c:	40023800 	.word	0x40023800
 8007fa0:	40021400 	.word	0x40021400

08007fa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fa4:	b10a      	cbz	r2, 8007faa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fa6:	6181      	str	r1, [r0, #24]
  }
}
 8007fa8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007faa:	0409      	lsls	r1, r1, #16
 8007fac:	e7fb      	b.n	8007fa6 <HAL_GPIO_WritePin+0x2>

08007fae <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007fae:	6943      	ldr	r3, [r0, #20]
 8007fb0:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fb4:	bf08      	it	eq
 8007fb6:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fb8:	6181      	str	r1, [r0, #24]
  }
}
 8007fba:	4770      	bx	lr

08007fbc <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007fbc:	4770      	bx	lr
	...

08007fc0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8007fc0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007fc2:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8007fc4:	6959      	ldr	r1, [r3, #20]
 8007fc6:	4201      	tst	r1, r0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007fca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007fcc:	f7ff fff6 	bl	8007fbc <HAL_GPIO_EXTI_Callback>
}
 8007fd0:	bd08      	pop	{r3, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40013c00 	.word	0x40013c00

08007fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	b908      	cbnz	r0, 8007fe4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	e03f      	b.n	8008064 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fe4:	6803      	ldr	r3, [r0, #0]
 8007fe6:	07dd      	lsls	r5, r3, #31
 8007fe8:	d410      	bmi.n	800800c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	0798      	lsls	r0, r3, #30
 8007fee:	d45a      	bmi.n	80080a6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	071a      	lsls	r2, r3, #28
 8007ff4:	f100 809c 	bmi.w	8008130 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	075b      	lsls	r3, r3, #29
 8007ffc:	f100 80ba 	bmi.w	8008174 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008000:	69a0      	ldr	r0, [r4, #24]
 8008002:	2800      	cmp	r0, #0
 8008004:	f040 811b 	bne.w	800823e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008008:	2000      	movs	r0, #0
 800800a:	e02b      	b.n	8008064 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800800c:	4ba7      	ldr	r3, [pc, #668]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	f002 020c 	and.w	r2, r2, #12
 8008014:	2a04      	cmp	r2, #4
 8008016:	d007      	beq.n	8008028 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800801e:	2a08      	cmp	r2, #8
 8008020:	d10a      	bne.n	8008038 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	0259      	lsls	r1, r3, #9
 8008026:	d507      	bpl.n	8008038 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008028:	4ba0      	ldr	r3, [pc, #640]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	039a      	lsls	r2, r3, #14
 800802e:	d5dc      	bpl.n	8007fea <HAL_RCC_OscConfig+0x12>
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1d9      	bne.n	8007fea <HAL_RCC_OscConfig+0x12>
 8008036:	e7d3      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	4d9c      	ldr	r5, [pc, #624]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008040:	d113      	bne.n	800806a <HAL_RCC_OscConfig+0x92>
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008048:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800804a:	f7ff fc51 	bl	80078f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804e:	4d97      	ldr	r5, [pc, #604]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8008050:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008052:	682b      	ldr	r3, [r5, #0]
 8008054:	039b      	lsls	r3, r3, #14
 8008056:	d4c8      	bmi.n	8007fea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008058:	f7ff fc4a 	bl	80078f0 <HAL_GetTick>
 800805c:	1b80      	subs	r0, r0, r6
 800805e:	2864      	cmp	r0, #100	; 0x64
 8008060:	d9f7      	bls.n	8008052 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8008062:	2003      	movs	r0, #3
}
 8008064:	b002      	add	sp, #8
 8008066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800806a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800806e:	d104      	bne.n	800807a <HAL_RCC_OscConfig+0xa2>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	e7e3      	b.n	8008042 <HAL_RCC_OscConfig+0x6a>
 800807a:	682a      	ldr	r2, [r5, #0]
 800807c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008080:	602a      	str	r2, [r5, #0]
 8008082:	682a      	ldr	r2, [r5, #0]
 8008084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008088:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1dd      	bne.n	800804a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800808e:	f7ff fc2f 	bl	80078f0 <HAL_GetTick>
 8008092:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	039f      	lsls	r7, r3, #14
 8008098:	d5a7      	bpl.n	8007fea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800809a:	f7ff fc29 	bl	80078f0 <HAL_GetTick>
 800809e:	1b80      	subs	r0, r0, r6
 80080a0:	2864      	cmp	r0, #100	; 0x64
 80080a2:	d9f7      	bls.n	8008094 <HAL_RCC_OscConfig+0xbc>
 80080a4:	e7dd      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080a6:	4b81      	ldr	r3, [pc, #516]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	f012 0f0c 	tst.w	r2, #12
 80080ae:	d007      	beq.n	80080c0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080b6:	2a08      	cmp	r2, #8
 80080b8:	d111      	bne.n	80080de <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	025e      	lsls	r6, r3, #9
 80080be:	d40e      	bmi.n	80080de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080c0:	4b7a      	ldr	r3, [pc, #488]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	0795      	lsls	r5, r2, #30
 80080c6:	d502      	bpl.n	80080ce <HAL_RCC_OscConfig+0xf6>
 80080c8:	68e2      	ldr	r2, [r4, #12]
 80080ca:	2a01      	cmp	r2, #1
 80080cc:	d188      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	6921      	ldr	r1, [r4, #16]
 80080d2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80080d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80080da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080dc:	e788      	b.n	8007ff0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080de:	68e2      	ldr	r2, [r4, #12]
 80080e0:	4b73      	ldr	r3, [pc, #460]	; (80082b0 <HAL_RCC_OscConfig+0x2d8>)
 80080e2:	b1b2      	cbz	r2, 8008112 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80080e8:	f7ff fc02 	bl	80078f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ec:	4d6f      	ldr	r5, [pc, #444]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80080ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	0798      	lsls	r0, r3, #30
 80080f4:	d507      	bpl.n	8008106 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	6922      	ldr	r2, [r4, #16]
 80080fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80080fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008102:	602b      	str	r3, [r5, #0]
 8008104:	e774      	b.n	8007ff0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008106:	f7ff fbf3 	bl	80078f0 <HAL_GetTick>
 800810a:	1b80      	subs	r0, r0, r6
 800810c:	2802      	cmp	r0, #2
 800810e:	d9ef      	bls.n	80080f0 <HAL_RCC_OscConfig+0x118>
 8008110:	e7a7      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8008112:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008114:	f7ff fbec 	bl	80078f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008118:	4d64      	ldr	r5, [pc, #400]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800811a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	0799      	lsls	r1, r3, #30
 8008120:	f57f af66 	bpl.w	8007ff0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008124:	f7ff fbe4 	bl	80078f0 <HAL_GetTick>
 8008128:	1b80      	subs	r0, r0, r6
 800812a:	2802      	cmp	r0, #2
 800812c:	d9f6      	bls.n	800811c <HAL_RCC_OscConfig+0x144>
 800812e:	e798      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008130:	6962      	ldr	r2, [r4, #20]
 8008132:	4b60      	ldr	r3, [pc, #384]	; (80082b4 <HAL_RCC_OscConfig+0x2dc>)
 8008134:	b17a      	cbz	r2, 8008156 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8008136:	2201      	movs	r2, #1
 8008138:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800813a:	f7ff fbd9 	bl	80078f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800813e:	4d5b      	ldr	r5, [pc, #364]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8008140:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008142:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008144:	079f      	lsls	r7, r3, #30
 8008146:	f53f af57 	bmi.w	8007ff8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800814a:	f7ff fbd1 	bl	80078f0 <HAL_GetTick>
 800814e:	1b80      	subs	r0, r0, r6
 8008150:	2802      	cmp	r0, #2
 8008152:	d9f6      	bls.n	8008142 <HAL_RCC_OscConfig+0x16a>
 8008154:	e785      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8008156:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008158:	f7ff fbca 	bl	80078f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800815c:	4d53      	ldr	r5, [pc, #332]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800815e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008160:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008162:	0798      	lsls	r0, r3, #30
 8008164:	f57f af48 	bpl.w	8007ff8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008168:	f7ff fbc2 	bl	80078f0 <HAL_GetTick>
 800816c:	1b80      	subs	r0, r0, r6
 800816e:	2802      	cmp	r0, #2
 8008170:	d9f6      	bls.n	8008160 <HAL_RCC_OscConfig+0x188>
 8008172:	e776      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008174:	4b4d      	ldr	r3, [pc, #308]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 8008176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008178:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800817c:	d128      	bne.n	80081d0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800817e:	9201      	str	r2, [sp, #4]
 8008180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008182:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008186:	641a      	str	r2, [r3, #64]	; 0x40
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008192:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008194:	4d48      	ldr	r5, [pc, #288]	; (80082b8 <HAL_RCC_OscConfig+0x2e0>)
 8008196:	682b      	ldr	r3, [r5, #0]
 8008198:	05d9      	lsls	r1, r3, #23
 800819a:	d51b      	bpl.n	80081d4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800819c:	68a3      	ldr	r3, [r4, #8]
 800819e:	4d43      	ldr	r5, [pc, #268]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d127      	bne.n	80081f4 <HAL_RCC_OscConfig+0x21c>
 80081a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80081ac:	f7ff fba0 	bl	80078f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b0:	4d3e      	ldr	r5, [pc, #248]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80081b2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081b4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	d539      	bpl.n	8008232 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80081be:	2e00      	cmp	r6, #0
 80081c0:	f43f af1e 	beq.w	8008000 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80081c4:	4a39      	ldr	r2, [pc, #228]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 80081c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081cc:	6413      	str	r3, [r2, #64]	; 0x40
 80081ce:	e717      	b.n	8008000 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80081d0:	2600      	movs	r6, #0
 80081d2:	e7df      	b.n	8008194 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081da:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80081dc:	f7ff fb88 	bl	80078f0 <HAL_GetTick>
 80081e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	05da      	lsls	r2, r3, #23
 80081e6:	d4d9      	bmi.n	800819c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081e8:	f7ff fb82 	bl	80078f0 <HAL_GetTick>
 80081ec:	1bc0      	subs	r0, r0, r7
 80081ee:	2802      	cmp	r0, #2
 80081f0:	d9f7      	bls.n	80081e2 <HAL_RCC_OscConfig+0x20a>
 80081f2:	e736      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	d104      	bne.n	8008202 <HAL_RCC_OscConfig+0x22a>
 80081f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	672b      	str	r3, [r5, #112]	; 0x70
 8008200:	e7d0      	b.n	80081a4 <HAL_RCC_OscConfig+0x1cc>
 8008202:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	672a      	str	r2, [r5, #112]	; 0x70
 800820a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800820c:	f022 0204 	bic.w	r2, r2, #4
 8008210:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1ca      	bne.n	80081ac <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8008216:	f7ff fb6b 	bl	80078f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800821a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800821e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008220:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008222:	0798      	lsls	r0, r3, #30
 8008224:	d5cb      	bpl.n	80081be <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008226:	f7ff fb63 	bl	80078f0 <HAL_GetTick>
 800822a:	1bc0      	subs	r0, r0, r7
 800822c:	4540      	cmp	r0, r8
 800822e:	d9f7      	bls.n	8008220 <HAL_RCC_OscConfig+0x248>
 8008230:	e717      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008232:	f7ff fb5d 	bl	80078f0 <HAL_GetTick>
 8008236:	1bc0      	subs	r0, r0, r7
 8008238:	4540      	cmp	r0, r8
 800823a:	d9bd      	bls.n	80081b8 <HAL_RCC_OscConfig+0x1e0>
 800823c:	e711      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800823e:	4d1b      	ldr	r5, [pc, #108]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
 8008240:	68ab      	ldr	r3, [r5, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b08      	cmp	r3, #8
 8008248:	d047      	beq.n	80082da <HAL_RCC_OscConfig+0x302>
 800824a:	4e1c      	ldr	r6, [pc, #112]	; (80082bc <HAL_RCC_OscConfig+0x2e4>)
 800824c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800824e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008250:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008252:	d135      	bne.n	80082c0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8008254:	f7ff fb4c 	bl	80078f0 <HAL_GetTick>
 8008258:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	0199      	lsls	r1, r3, #6
 800825e:	d41e      	bmi.n	800829e <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008260:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8008264:	4313      	orrs	r3, r2
 8008266:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008268:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800826c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800826e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008272:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008274:	4c0d      	ldr	r4, [pc, #52]	; (80082ac <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008276:	0852      	lsrs	r2, r2, #1
 8008278:	3a01      	subs	r2, #1
 800827a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008280:	2301      	movs	r3, #1
 8008282:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008284:	f7ff fb34 	bl	80078f0 <HAL_GetTick>
 8008288:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	019a      	lsls	r2, r3, #6
 800828e:	f53f aebb 	bmi.w	8008008 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008292:	f7ff fb2d 	bl	80078f0 <HAL_GetTick>
 8008296:	1b40      	subs	r0, r0, r5
 8008298:	2802      	cmp	r0, #2
 800829a:	d9f6      	bls.n	800828a <HAL_RCC_OscConfig+0x2b2>
 800829c:	e6e1      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800829e:	f7ff fb27 	bl	80078f0 <HAL_GetTick>
 80082a2:	1bc0      	subs	r0, r0, r7
 80082a4:	2802      	cmp	r0, #2
 80082a6:	d9d8      	bls.n	800825a <HAL_RCC_OscConfig+0x282>
 80082a8:	e6db      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
 80082aa:	bf00      	nop
 80082ac:	40023800 	.word	0x40023800
 80082b0:	42470000 	.word	0x42470000
 80082b4:	42470e80 	.word	0x42470e80
 80082b8:	40007000 	.word	0x40007000
 80082bc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80082c0:	f7ff fb16 	bl	80078f0 <HAL_GetTick>
 80082c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	019b      	lsls	r3, r3, #6
 80082ca:	f57f ae9d 	bpl.w	8008008 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ce:	f7ff fb0f 	bl	80078f0 <HAL_GetTick>
 80082d2:	1b00      	subs	r0, r0, r4
 80082d4:	2802      	cmp	r0, #2
 80082d6:	d9f6      	bls.n	80082c6 <HAL_RCC_OscConfig+0x2ee>
 80082d8:	e6c3      	b.n	8008062 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082da:	2801      	cmp	r0, #1
 80082dc:	f43f aec2 	beq.w	8008064 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80082e0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082e2:	69e3      	ldr	r3, [r4, #28]
 80082e4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80082e8:	429a      	cmp	r2, r3
 80082ea:	f47f ae79 	bne.w	8007fe0 <HAL_RCC_OscConfig+0x8>
 80082ee:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082f0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082f4:	4293      	cmp	r3, r2
 80082f6:	f47f ae73 	bne.w	8007fe0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80082fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008300:	4003      	ands	r3, r0
 8008302:	4293      	cmp	r3, r2
 8008304:	f47f ae6c 	bne.w	8007fe0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008308:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800830a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800830e:	4293      	cmp	r3, r2
 8008310:	f47f ae66 	bne.w	8007fe0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008316:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 800831a:	1ac0      	subs	r0, r0, r3
 800831c:	bf18      	it	ne
 800831e:	2001      	movne	r0, #1
 8008320:	e6a0      	b.n	8008064 <HAL_RCC_OscConfig+0x8c>
 8008322:	bf00      	nop

08008324 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008324:	4913      	ldr	r1, [pc, #76]	; (8008374 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8008326:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008328:	688b      	ldr	r3, [r1, #8]
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	2b04      	cmp	r3, #4
 8008330:	d003      	beq.n	800833a <HAL_RCC_GetSysClockFreq+0x16>
 8008332:	2b08      	cmp	r3, #8
 8008334:	d003      	beq.n	800833e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008336:	4810      	ldr	r0, [pc, #64]	; (8008378 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8008338:	e000      	b.n	800833c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800833a:	4810      	ldr	r0, [pc, #64]	; (800837c <HAL_RCC_GetSysClockFreq+0x58>)
}
 800833c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800833e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008340:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008342:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008344:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008348:	bf14      	ite	ne
 800834a:	480c      	ldrne	r0, [pc, #48]	; (800837c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800834c:	480a      	ldreq	r0, [pc, #40]	; (8008378 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800834e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008352:	bf18      	it	ne
 8008354:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008356:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800835a:	fba1 0100 	umull	r0, r1, r1, r0
 800835e:	f7f7 ff9f 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008362:	4b04      	ldr	r3, [pc, #16]	; (8008374 <HAL_RCC_GetSysClockFreq+0x50>)
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800836a:	3301      	adds	r3, #1
 800836c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800836e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008372:	e7e3      	b.n	800833c <HAL_RCC_GetSysClockFreq+0x18>
 8008374:	40023800 	.word	0x40023800
 8008378:	00f42400 	.word	0x00f42400
 800837c:	007a1200 	.word	0x007a1200

08008380 <HAL_RCC_ClockConfig>:
{
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008386:	4604      	mov	r4, r0
 8008388:	b910      	cbnz	r0, 8008390 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800838a:	2001      	movs	r0, #1
}
 800838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008390:	4b43      	ldr	r3, [pc, #268]	; (80084a0 <HAL_RCC_ClockConfig+0x120>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	f002 020f 	and.w	r2, r2, #15
 8008398:	428a      	cmp	r2, r1
 800839a:	d328      	bcc.n	80083ee <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800839c:	6821      	ldr	r1, [r4, #0]
 800839e:	078f      	lsls	r7, r1, #30
 80083a0:	d42d      	bmi.n	80083fe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083a2:	07c8      	lsls	r0, r1, #31
 80083a4:	d440      	bmi.n	8008428 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083a6:	4b3e      	ldr	r3, [pc, #248]	; (80084a0 <HAL_RCC_ClockConfig+0x120>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	f002 020f 	and.w	r2, r2, #15
 80083ae:	42aa      	cmp	r2, r5
 80083b0:	d865      	bhi.n	800847e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b2:	6822      	ldr	r2, [r4, #0]
 80083b4:	0751      	lsls	r1, r2, #29
 80083b6:	d46b      	bmi.n	8008490 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b8:	0713      	lsls	r3, r2, #28
 80083ba:	d507      	bpl.n	80083cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083bc:	4a39      	ldr	r2, [pc, #228]	; (80084a4 <HAL_RCC_ClockConfig+0x124>)
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	6893      	ldr	r3, [r2, #8]
 80083c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80083c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80083ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083cc:	f7ff ffaa 	bl	8008324 <HAL_RCC_GetSysClockFreq>
 80083d0:	4b34      	ldr	r3, [pc, #208]	; (80084a4 <HAL_RCC_ClockConfig+0x124>)
 80083d2:	4a35      	ldr	r2, [pc, #212]	; (80084a8 <HAL_RCC_ClockConfig+0x128>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80083da:	5cd3      	ldrb	r3, [r2, r3]
 80083dc:	40d8      	lsrs	r0, r3
 80083de:	4b33      	ldr	r3, [pc, #204]	; (80084ac <HAL_RCC_ClockConfig+0x12c>)
 80083e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80083e2:	4b33      	ldr	r3, [pc, #204]	; (80084b0 <HAL_RCC_ClockConfig+0x130>)
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f7ff fa39 	bl	800785c <HAL_InitTick>
  return HAL_OK;
 80083ea:	2000      	movs	r0, #0
 80083ec:	e7ce      	b.n	800838c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ee:	b2ca      	uxtb	r2, r1
 80083f0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	428b      	cmp	r3, r1
 80083fa:	d1c6      	bne.n	800838a <HAL_RCC_ClockConfig+0xa>
 80083fc:	e7ce      	b.n	800839c <HAL_RCC_ClockConfig+0x1c>
 80083fe:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008400:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008404:	bf1e      	ittt	ne
 8008406:	689a      	ldrne	r2, [r3, #8]
 8008408:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800840c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800840e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008410:	bf42      	ittt	mi
 8008412:	689a      	ldrmi	r2, [r3, #8]
 8008414:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8008418:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	68a0      	ldr	r0, [r4, #8]
 800841e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008422:	4302      	orrs	r2, r0
 8008424:	609a      	str	r2, [r3, #8]
 8008426:	e7bc      	b.n	80083a2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008428:	6862      	ldr	r2, [r4, #4]
 800842a:	4b1e      	ldr	r3, [pc, #120]	; (80084a4 <HAL_RCC_ClockConfig+0x124>)
 800842c:	2a01      	cmp	r2, #1
 800842e:	d11c      	bne.n	800846a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008436:	d0a8      	beq.n	800838a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008438:	4e1a      	ldr	r6, [pc, #104]	; (80084a4 <HAL_RCC_ClockConfig+0x124>)
 800843a:	68b3      	ldr	r3, [r6, #8]
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	4313      	orrs	r3, r2
 8008442:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008444:	f7ff fa54 	bl	80078f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008448:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800844c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844e:	68b3      	ldr	r3, [r6, #8]
 8008450:	6862      	ldr	r2, [r4, #4]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800845a:	d0a4      	beq.n	80083a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800845c:	f7ff fa48 	bl	80078f0 <HAL_GetTick>
 8008460:	1bc0      	subs	r0, r0, r7
 8008462:	4540      	cmp	r0, r8
 8008464:	d9f3      	bls.n	800844e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8008466:	2003      	movs	r0, #3
 8008468:	e790      	b.n	800838c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800846a:	1e91      	subs	r1, r2, #2
 800846c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800846e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008470:	d802      	bhi.n	8008478 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008472:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008476:	e7de      	b.n	8008436 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008478:	f013 0f02 	tst.w	r3, #2
 800847c:	e7db      	b.n	8008436 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847e:	b2ea      	uxtb	r2, r5
 8008480:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	42ab      	cmp	r3, r5
 800848a:	f47f af7e 	bne.w	800838a <HAL_RCC_ClockConfig+0xa>
 800848e:	e790      	b.n	80083b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008490:	4904      	ldr	r1, [pc, #16]	; (80084a4 <HAL_RCC_ClockConfig+0x124>)
 8008492:	68e0      	ldr	r0, [r4, #12]
 8008494:	688b      	ldr	r3, [r1, #8]
 8008496:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800849a:	4303      	orrs	r3, r0
 800849c:	608b      	str	r3, [r1, #8]
 800849e:	e78b      	b.n	80083b8 <HAL_RCC_ClockConfig+0x38>
 80084a0:	40023c00 	.word	0x40023c00
 80084a4:	40023800 	.word	0x40023800
 80084a8:	0800b654 	.word	0x0800b654
 80084ac:	200002ac 	.word	0x200002ac
 80084b0:	200002b4 	.word	0x200002b4

080084b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80084b6:	4a05      	ldr	r2, [pc, #20]	; (80084cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80084be:	5cd3      	ldrb	r3, [r2, r3]
 80084c0:	4a03      	ldr	r2, [pc, #12]	; (80084d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80084c2:	6810      	ldr	r0, [r2, #0]
}
 80084c4:	40d8      	lsrs	r0, r3
 80084c6:	4770      	bx	lr
 80084c8:	40023800 	.word	0x40023800
 80084cc:	0800b664 	.word	0x0800b664
 80084d0:	200002ac 	.word	0x200002ac

080084d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80084d6:	4a05      	ldr	r2, [pc, #20]	; (80084ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80084de:	5cd3      	ldrb	r3, [r2, r3]
 80084e0:	4a03      	ldr	r2, [pc, #12]	; (80084f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80084e2:	6810      	ldr	r0, [r2, #0]
}
 80084e4:	40d8      	lsrs	r0, r3
 80084e6:	4770      	bx	lr
 80084e8:	40023800 	.word	0x40023800
 80084ec:	0800b664 	.word	0x0800b664
 80084f0:	200002ac 	.word	0x200002ac

080084f4 <HAL_TIM_OnePulse_MspInit>:
 80084f4:	4770      	bx	lr
	...

080084f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f8:	4a30      	ldr	r2, [pc, #192]	; (80085bc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80084fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084fc:	4290      	cmp	r0, r2
 80084fe:	d012      	beq.n	8008526 <TIM_Base_SetConfig+0x2e>
 8008500:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008504:	d00f      	beq.n	8008526 <TIM_Base_SetConfig+0x2e>
 8008506:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800850a:	4290      	cmp	r0, r2
 800850c:	d00b      	beq.n	8008526 <TIM_Base_SetConfig+0x2e>
 800850e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008512:	4290      	cmp	r0, r2
 8008514:	d007      	beq.n	8008526 <TIM_Base_SetConfig+0x2e>
 8008516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800851a:	4290      	cmp	r0, r2
 800851c:	d003      	beq.n	8008526 <TIM_Base_SetConfig+0x2e>
 800851e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008522:	4290      	cmp	r0, r2
 8008524:	d119      	bne.n	800855a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8008526:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800852c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800852e:	4a23      	ldr	r2, [pc, #140]	; (80085bc <TIM_Base_SetConfig+0xc4>)
 8008530:	4290      	cmp	r0, r2
 8008532:	d029      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008534:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008538:	d026      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 800853a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800853e:	4290      	cmp	r0, r2
 8008540:	d022      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008546:	4290      	cmp	r0, r2
 8008548:	d01e      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 800854a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800854e:	4290      	cmp	r0, r2
 8008550:	d01a      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008552:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008556:	4290      	cmp	r0, r2
 8008558:	d016      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 800855a:	4a19      	ldr	r2, [pc, #100]	; (80085c0 <TIM_Base_SetConfig+0xc8>)
 800855c:	4290      	cmp	r0, r2
 800855e:	d013      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008560:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008564:	4290      	cmp	r0, r2
 8008566:	d00f      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008568:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800856c:	4290      	cmp	r0, r2
 800856e:	d00b      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008570:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8008574:	4290      	cmp	r0, r2
 8008576:	d007      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008578:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800857c:	4290      	cmp	r0, r2
 800857e:	d003      	beq.n	8008588 <TIM_Base_SetConfig+0x90>
 8008580:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008584:	4290      	cmp	r0, r2
 8008586:	d103      	bne.n	8008590 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008588:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800858a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800858e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008590:	694a      	ldr	r2, [r1, #20]
 8008592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008596:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008598:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800859a:	688b      	ldr	r3, [r1, #8]
 800859c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800859e:	680b      	ldr	r3, [r1, #0]
 80085a0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <TIM_Base_SetConfig+0xc4>)
 80085a4:	4298      	cmp	r0, r3
 80085a6:	d003      	beq.n	80085b0 <TIM_Base_SetConfig+0xb8>
 80085a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ac:	4298      	cmp	r0, r3
 80085ae:	d101      	bne.n	80085b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b0:	690b      	ldr	r3, [r1, #16]
 80085b2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085b4:	2301      	movs	r3, #1
 80085b6:	6143      	str	r3, [r0, #20]
}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40010000 	.word	0x40010000
 80085c0:	40014000 	.word	0x40014000

080085c4 <HAL_TIM_Base_Init>:
{
 80085c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80085c6:	4604      	mov	r4, r0
 80085c8:	b1a0      	cbz	r0, 80085f4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80085ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80085ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80085d2:	b91b      	cbnz	r3, 80085dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80085d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80085d8:	f7ff f86e 	bl	80076b8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	2302      	movs	r3, #2
 80085de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	1d21      	adds	r1, r4, #4
 80085e6:	f7ff ff87 	bl	80084f8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80085f0:	2000      	movs	r0, #0
}
 80085f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80085f4:	2001      	movs	r0, #1
 80085f6:	e7fc      	b.n	80085f2 <HAL_TIM_Base_Init+0x2e>

080085f8 <HAL_TIM_OnePulse_Init>:
{
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	460d      	mov	r5, r1
  if (htim == NULL)
 80085fc:	4604      	mov	r4, r0
 80085fe:	b1e0      	cbz	r0, 800863a <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008600:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008604:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008608:	b91b      	cbnz	r3, 8008612 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800860a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800860e:	f7ff ff71 	bl	80084f4 <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008612:	2302      	movs	r3, #2
 8008614:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008618:	1d21      	adds	r1, r4, #4
 800861a:	6820      	ldr	r0, [r4, #0]
 800861c:	f7ff ff6c 	bl	80084f8 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	f022 0208 	bic.w	r2, r2, #8
 8008628:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800862a:	6819      	ldr	r1, [r3, #0]
 800862c:	4329      	orrs	r1, r5
 800862e:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008630:	2301      	movs	r3, #1
 8008632:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008636:	2000      	movs	r0, #0
}
 8008638:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800863a:	2001      	movs	r0, #1
 800863c:	e7fc      	b.n	8008638 <HAL_TIM_OnePulse_Init+0x40>

0800863e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800863e:	6803      	ldr	r3, [r0, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008646:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008648:	695a      	ldr	r2, [r3, #20]
 800864a:	f022 0201 	bic.w	r2, r2, #1
 800864e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008650:	2320      	movs	r3, #32
 8008652:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8008656:	4770      	bx	lr

08008658 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008658:	6803      	ldr	r3, [r0, #0]
 800865a:	68c1      	ldr	r1, [r0, #12]
 800865c:	691a      	ldr	r2, [r3, #16]
{
 800865e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008660:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8008664:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008666:	430a      	orrs	r2, r1
 8008668:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800866a:	6925      	ldr	r5, [r4, #16]
 800866c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800866e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008670:	69c0      	ldr	r0, [r0, #28]
 8008672:	432a      	orrs	r2, r5
 8008674:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8008676:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800867a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800867c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008680:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8008682:	430a      	orrs	r2, r1
 8008684:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008686:	695a      	ldr	r2, [r3, #20]
 8008688:	69a1      	ldr	r1, [r4, #24]
 800868a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800868e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008690:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008694:	615a      	str	r2, [r3, #20]
 8008696:	4a26      	ldr	r2, [pc, #152]	; (8008730 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008698:	d129      	bne.n	80086ee <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800869a:	4293      	cmp	r3, r2
 800869c:	d003      	beq.n	80086a6 <UART_SetConfig+0x4e>
 800869e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d120      	bne.n	80086e8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086a6:	f7ff ff15 	bl	80084d4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086aa:	6862      	ldr	r2, [r4, #4]
 80086ac:	2600      	movs	r6, #0
 80086ae:	1892      	adds	r2, r2, r2
 80086b0:	f04f 0119 	mov.w	r1, #25
 80086b4:	eb46 0306 	adc.w	r3, r6, r6
 80086b8:	fba0 0101 	umull	r0, r1, r0, r1
 80086bc:	f7f7 fdf0 	bl	80002a0 <__aeabi_uldivmod>
 80086c0:	2164      	movs	r1, #100	; 0x64
 80086c2:	fbb0 f5f1 	udiv	r5, r0, r1
 80086c6:	fb01 0315 	mls	r3, r1, r5, r0
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	3332      	adds	r3, #50	; 0x32
 80086ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80086d2:	f003 0207 	and.w	r2, r3, #7
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	6821      	ldr	r1, [r4, #0]
 80086da:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80086de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086e2:	4413      	add	r3, r2
 80086e4:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80086e8:	f7ff fee4 	bl	80084b4 <HAL_RCC_GetPCLK1Freq>
 80086ec:	e7dd      	b.n	80086aa <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d002      	beq.n	80086f8 <UART_SetConfig+0xa0>
 80086f2:	4a10      	ldr	r2, [pc, #64]	; (8008734 <UART_SetConfig+0xdc>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d117      	bne.n	8008728 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7ff feec 	bl	80084d4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086fc:	6863      	ldr	r3, [r4, #4]
 80086fe:	2119      	movs	r1, #25
 8008700:	009a      	lsls	r2, r3, #2
 8008702:	fba0 0101 	umull	r0, r1, r0, r1
 8008706:	0f9b      	lsrs	r3, r3, #30
 8008708:	f7f7 fdca 	bl	80002a0 <__aeabi_uldivmod>
 800870c:	2264      	movs	r2, #100	; 0x64
 800870e:	fbb0 f1f2 	udiv	r1, r0, r2
 8008712:	fb02 0311 	mls	r3, r2, r1, r0
 8008716:	6824      	ldr	r4, [r4, #0]
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	3332      	adds	r3, #50	; 0x32
 800871c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008720:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008724:	60a3      	str	r3, [r4, #8]
}
 8008726:	e7de      	b.n	80086e6 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008728:	f7ff fec4 	bl	80084b4 <HAL_RCC_GetPCLK1Freq>
 800872c:	e7e6      	b.n	80086fc <UART_SetConfig+0xa4>
 800872e:	bf00      	nop
 8008730:	40011000 	.word	0x40011000
 8008734:	40011400 	.word	0x40011400

08008738 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	4604      	mov	r4, r0
 800873c:	460e      	mov	r6, r1
 800873e:	4617      	mov	r7, r2
 8008740:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008742:	6821      	ldr	r1, [r4, #0]
 8008744:	680b      	ldr	r3, [r1, #0]
 8008746:	ea36 0303 	bics.w	r3, r6, r3
 800874a:	d101      	bne.n	8008750 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800874c:	2000      	movs	r0, #0
 800874e:	e014      	b.n	800877a <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8008750:	1c6b      	adds	r3, r5, #1
 8008752:	d0f7      	beq.n	8008744 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008754:	b995      	cbnz	r5, 800877c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800875e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	f022 0201 	bic.w	r2, r2, #1
 8008766:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008768:	2320      	movs	r3, #32
 800876a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800876e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8008772:	2300      	movs	r3, #0
 8008774:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8008778:	2003      	movs	r0, #3
}
 800877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800877c:	f7ff f8b8 	bl	80078f0 <HAL_GetTick>
 8008780:	1bc0      	subs	r0, r0, r7
 8008782:	4285      	cmp	r5, r0
 8008784:	d2dd      	bcs.n	8008742 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8008786:	e7e6      	b.n	8008756 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08008788 <HAL_UART_Init>:
{
 8008788:	b510      	push	{r4, lr}
  if (huart == NULL)
 800878a:	4604      	mov	r4, r0
 800878c:	b340      	cbz	r0, 80087e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800878e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008792:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008796:	b91b      	cbnz	r3, 80087a0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8008798:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800879c:	f7fe ffd8 	bl	8007750 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80087a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80087a2:	2324      	movs	r3, #36	; 0x24
 80087a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80087a8:	68d3      	ldr	r3, [r2, #12]
 80087aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80087b0:	4620      	mov	r0, r4
 80087b2:	f7ff ff51 	bl	8008658 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087c0:	695a      	ldr	r2, [r3, #20]
 80087c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087c6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087ce:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80087d2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80087d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80087da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80087de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80087e0:	2001      	movs	r0, #1
 80087e2:	e7fc      	b.n	80087de <HAL_UART_Init+0x56>

080087e4 <HAL_UART_Transmit>:
{
 80087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80087ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80087ee:	2b20      	cmp	r3, #32
{
 80087f0:	4604      	mov	r4, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80087f6:	d14f      	bne.n	8008898 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d04b      	beq.n	8008894 <HAL_UART_Transmit+0xb0>
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	d049      	beq.n	8008894 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8008800:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008804:	2b01      	cmp	r3, #1
 8008806:	d047      	beq.n	8008898 <HAL_UART_Transmit+0xb4>
 8008808:	2301      	movs	r3, #1
 800880a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008812:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008814:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008818:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800881c:	f7ff f868 	bl	80078f0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8008820:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8008824:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8008826:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800882a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800882e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008830:	b29b      	uxth	r3, r3
 8008832:	b953      	cbnz	r3, 800884a <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008834:	463b      	mov	r3, r7
 8008836:	4632      	mov	r2, r6
 8008838:	2140      	movs	r1, #64	; 0x40
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff ff7c 	bl	8008738 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8008840:	b998      	cbnz	r0, 800886a <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8008842:	2320      	movs	r3, #32
 8008844:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8008848:	e010      	b.n	800886c <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 800884a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800884c:	3b01      	subs	r3, #1
 800884e:	b29b      	uxth	r3, r3
 8008850:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	f04f 0180 	mov.w	r1, #128	; 0x80
 8008860:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008862:	d10e      	bne.n	8008882 <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008864:	f7ff ff68 	bl	8008738 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8008868:	b110      	cbz	r0, 8008870 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 800886a:	2003      	movs	r0, #3
}
 800886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008870:	882b      	ldrh	r3, [r5, #0]
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008878:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	b943      	cbnz	r3, 8008890 <HAL_UART_Transmit+0xac>
          pData += 2U;
 800887e:	3502      	adds	r5, #2
 8008880:	e7d5      	b.n	800882e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008882:	f7ff ff59 	bl	8008738 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8008886:	2800      	cmp	r0, #0
 8008888:	d1ef      	bne.n	800886a <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	782a      	ldrb	r2, [r5, #0]
 800888e:	605a      	str	r2, [r3, #4]
 8008890:	3501      	adds	r5, #1
 8008892:	e7cc      	b.n	800882e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8008894:	2001      	movs	r0, #1
 8008896:	e7e9      	b.n	800886c <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8008898:	2002      	movs	r0, #2
 800889a:	e7e7      	b.n	800886c <HAL_UART_Transmit+0x88>

0800889c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800889c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d120      	bne.n	80088e6 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80088a4:	b1e9      	cbz	r1, 80088e2 <HAL_UART_Receive_IT+0x46>
 80088a6:	b1e2      	cbz	r2, 80088e2 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80088a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d01a      	beq.n	80088e6 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80088b0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80088b2:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088b6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088ba:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088be:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80088c0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088c2:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80088c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088c8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80088cc:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80088ce:	6951      	ldr	r1, [r2, #20]
 80088d0:	f041 0101 	orr.w	r1, r1, #1
 80088d4:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80088d6:	68d1      	ldr	r1, [r2, #12]
 80088d8:	f041 0120 	orr.w	r1, r1, #32
 80088dc:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80088de:	4618      	mov	r0, r3
 80088e0:	4770      	bx	lr
      return HAL_ERROR;
 80088e2:	2001      	movs	r0, #1
 80088e4:	4770      	bx	lr
    return HAL_BUSY;
 80088e6:	2002      	movs	r0, #2
}
 80088e8:	4770      	bx	lr

080088ea <HAL_UART_Abort>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80088ea:	6803      	ldr	r3, [r0, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 80088f2:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80088f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	f022 0201 	bic.w	r2, r2, #1
 80088fc:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	0611      	lsls	r1, r2, #24
{
 8008902:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008904:	d513      	bpl.n	800892e <HAL_UART_Abort+0x44>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008906:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8008908:	6b00      	ldr	r0, [r0, #48]	; 0x30
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800890a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800890e:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8008910:	b168      	cbz	r0, 800892e <HAL_UART_Abort+0x44>
      huart->hdmatx->XferAbortCallback = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008916:	f7ff f85b 	bl	80079d0 <HAL_DMA_Abort>
 800891a:	b140      	cbz	r0, 800892e <HAL_UART_Abort+0x44>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800891c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800891e:	f7ff f8ac 	bl	8007a7a <HAL_DMA_GetError>
 8008922:	2820      	cmp	r0, #32
 8008924:	d103      	bne.n	800892e <HAL_UART_Abort+0x44>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008926:	2310      	movs	r3, #16
 8008928:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800892a:	2003      	movs	r0, #3
}
 800892c:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	695a      	ldr	r2, [r3, #20]
 8008932:	0652      	lsls	r2, r2, #25
 8008934:	d50f      	bpl.n	8008956 <HAL_UART_Abort+0x6c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008936:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8008938:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893e:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8008940:	b148      	cbz	r0, 8008956 <HAL_UART_Abort+0x6c>
      huart->hdmarx->XferAbortCallback = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008946:	f7ff f843 	bl	80079d0 <HAL_DMA_Abort>
 800894a:	b120      	cbz	r0, 8008956 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800894c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800894e:	f7ff f894 	bl	8007a7a <HAL_DMA_GetError>
 8008952:	2820      	cmp	r0, #32
 8008954:	d0e7      	beq.n	8008926 <HAL_UART_Abort+0x3c>
  huart->TxXferCount = 0x00U;
 8008956:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008958:	2320      	movs	r3, #32
  huart->TxXferCount = 0x00U;
 800895a:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800895c:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_READY;
 8008960:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8008964:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8008968:	e7e0      	b.n	800892c <HAL_UART_Abort+0x42>

0800896a <HAL_UART_AbortReceive>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800896a:	6803      	ldr	r3, [r0, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 8008972:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008974:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	f022 0201 	bic.w	r2, r2, #1
 800897c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897e:	695a      	ldr	r2, [r3, #20]
 8008980:	0652      	lsls	r2, r2, #25
{
 8008982:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	d513      	bpl.n	80089ae <HAL_UART_AbortReceive+0x44>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008986:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8008988:	6b40      	ldr	r0, [r0, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800898e:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8008990:	b168      	cbz	r0, 80089ae <HAL_UART_AbortReceive+0x44>
      huart->hdmarx->XferAbortCallback = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008996:	f7ff f81b 	bl	80079d0 <HAL_DMA_Abort>
 800899a:	b140      	cbz	r0, 80089ae <HAL_UART_AbortReceive+0x44>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800899c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800899e:	f7ff f86c 	bl	8007a7a <HAL_DMA_GetError>
 80089a2:	2820      	cmp	r0, #32
 80089a4:	d103      	bne.n	80089ae <HAL_UART_AbortReceive+0x44>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089a6:	2310      	movs	r3, #16
 80089a8:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80089aa:	2003      	movs	r0, #3
}
 80089ac:	bd10      	pop	{r4, pc}
  huart->RxXferCount = 0x00U;
 80089ae:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 80089b0:	2320      	movs	r3, #32
  huart->RxXferCount = 0x00U;
 80089b2:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 80089b4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80089b8:	e7f8      	b.n	80089ac <HAL_UART_AbortReceive+0x42>

080089ba <HAL_UART_TxCpltCallback>:
 80089ba:	4770      	bx	lr

080089bc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089bc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80089c0:	2b22      	cmp	r3, #34	; 0x22
{
 80089c2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c4:	d133      	bne.n	8008a2e <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089c6:	6881      	ldr	r1, [r0, #8]
 80089c8:	6904      	ldr	r4, [r0, #16]
 80089ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089cc:	6802      	ldr	r2, [r0, #0]
 80089ce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80089d2:	d123      	bne.n	8008a1c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089d4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80089d6:	b9ec      	cbnz	r4, 8008a14 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089dc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80089e0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80089e2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80089e4:	3c01      	subs	r4, #1
 80089e6:	b2a4      	uxth	r4, r4
 80089e8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80089ea:	b98c      	cbnz	r4, 8008a10 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089ec:	6803      	ldr	r3, [r0, #0]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	f022 0220 	bic.w	r2, r2, #32
 80089f4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089fc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089fe:	695a      	ldr	r2, [r3, #20]
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008a06:	2320      	movs	r3, #32
 8008a08:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8008a0c:	f7fe fe6c 	bl	80076e8 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8008a10:	2000      	movs	r0, #0
 8008a12:	e00d      	b.n	8008a30 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	f823 2b01 	strh.w	r2, [r3], #1
 8008a1a:	e7e1      	b.n	80089e0 <UART_Receive_IT+0x24>
 8008a1c:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a1e:	6852      	ldr	r2, [r2, #4]
 8008a20:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a22:	b90c      	cbnz	r4, 8008a28 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e7dc      	b.n	80089e2 <UART_Receive_IT+0x26>
 8008a28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a2c:	e7fa      	b.n	8008a24 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8008a2e:	2002      	movs	r0, #2
}
 8008a30:	bd10      	pop	{r4, pc}

08008a32 <HAL_UART_ErrorCallback>:
 8008a32:	4770      	bx	lr

08008a34 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a34:	6803      	ldr	r3, [r0, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a38:	68d9      	ldr	r1, [r3, #12]
{
 8008a3a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8008a3c:	0716      	lsls	r6, r2, #28
{
 8008a3e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a40:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8008a42:	d107      	bne.n	8008a54 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a44:	0696      	lsls	r6, r2, #26
 8008a46:	d55a      	bpl.n	8008afe <HAL_UART_IRQHandler+0xca>
 8008a48:	068d      	lsls	r5, r1, #26
 8008a4a:	d558      	bpl.n	8008afe <HAL_UART_IRQHandler+0xca>
}
 8008a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8008a50:	f7ff bfb4 	b.w	80089bc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a54:	f015 0501 	ands.w	r5, r5, #1
 8008a58:	d102      	bne.n	8008a60 <HAL_UART_IRQHandler+0x2c>
 8008a5a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8008a5e:	d04e      	beq.n	8008afe <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a60:	07d0      	lsls	r0, r2, #31
 8008a62:	d505      	bpl.n	8008a70 <HAL_UART_IRQHandler+0x3c>
 8008a64:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a66:	bf42      	ittt	mi
 8008a68:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8008a6a:	f043 0301 	orrmi.w	r3, r3, #1
 8008a6e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a70:	0756      	lsls	r6, r2, #29
 8008a72:	d504      	bpl.n	8008a7e <HAL_UART_IRQHandler+0x4a>
 8008a74:	b11d      	cbz	r5, 8008a7e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a7e:	0790      	lsls	r0, r2, #30
 8008a80:	d504      	bpl.n	8008a8c <HAL_UART_IRQHandler+0x58>
 8008a82:	b11d      	cbz	r5, 8008a8c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a86:	f043 0304 	orr.w	r3, r3, #4
 8008a8a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a8c:	0713      	lsls	r3, r2, #28
 8008a8e:	d506      	bpl.n	8008a9e <HAL_UART_IRQHandler+0x6a>
 8008a90:	068e      	lsls	r6, r1, #26
 8008a92:	d400      	bmi.n	8008a96 <HAL_UART_IRQHandler+0x62>
 8008a94:	b11d      	cbz	r5, 8008a9e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a98:	f043 0308 	orr.w	r3, r3, #8
 8008a9c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008aa0:	b343      	cbz	r3, 8008af4 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008aa2:	0695      	lsls	r5, r2, #26
 8008aa4:	d504      	bpl.n	8008ab0 <HAL_UART_IRQHandler+0x7c>
 8008aa6:	0688      	lsls	r0, r1, #26
 8008aa8:	d502      	bpl.n	8008ab0 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f7ff ff86 	bl	80089bc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ab4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008ab6:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8008ab8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008aba:	d402      	bmi.n	8008ac2 <HAL_UART_IRQHandler+0x8e>
 8008abc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8008ac0:	d019      	beq.n	8008af6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8008ac2:	f7ff fdbc 	bl	800863e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	695a      	ldr	r2, [r3, #20]
 8008aca:	0652      	lsls	r2, r2, #25
 8008acc:	d50f      	bpl.n	8008aee <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ace:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008ad0:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad6:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008ad8:	b148      	cbz	r0, 8008aee <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <HAL_UART_IRQHandler+0x140>)
 8008adc:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ade:	f7fe ffba 	bl	8007a56 <HAL_DMA_Abort_IT>
 8008ae2:	b138      	cbz	r0, 8008af4 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ae4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8008ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008aea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008aec:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff ff9f 	bl	8008a32 <HAL_UART_ErrorCallback>
}
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8008af6:	f7ff ff9c 	bl	8008a32 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afa:	63e5      	str	r5, [r4, #60]	; 0x3c
 8008afc:	e7fa      	b.n	8008af4 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008afe:	0616      	lsls	r6, r2, #24
 8008b00:	d528      	bpl.n	8008b54 <HAL_UART_IRQHandler+0x120>
 8008b02:	060d      	lsls	r5, r1, #24
 8008b04:	d526      	bpl.n	8008b54 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b06:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8008b0a:	2a21      	cmp	r2, #33	; 0x21
 8008b0c:	d1f2      	bne.n	8008af4 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b0e:	68a1      	ldr	r1, [r4, #8]
 8008b10:	6a22      	ldr	r2, [r4, #32]
 8008b12:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008b16:	d118      	bne.n	8008b4a <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b18:	8811      	ldrh	r1, [r2, #0]
 8008b1a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008b1e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008b20:	6921      	ldr	r1, [r4, #16]
 8008b22:	b981      	cbnz	r1, 8008b46 <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8008b24:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8008b26:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8008b28:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008b2a:	3a01      	subs	r2, #1
 8008b2c:	b292      	uxth	r2, r2
 8008b2e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	d1df      	bne.n	8008af4 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b3a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b42:	60da      	str	r2, [r3, #12]
 8008b44:	e7d6      	b.n	8008af4 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 8008b46:	3201      	adds	r2, #1
 8008b48:	e7ed      	b.n	8008b26 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b4a:	1c51      	adds	r1, r2, #1
 8008b4c:	6221      	str	r1, [r4, #32]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	605a      	str	r2, [r3, #4]
 8008b52:	e7e9      	b.n	8008b28 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b54:	0650      	lsls	r0, r2, #25
 8008b56:	d5cd      	bpl.n	8008af4 <HAL_UART_IRQHandler+0xc0>
 8008b58:	064a      	lsls	r2, r1, #25
 8008b5a:	d5cb      	bpl.n	8008af4 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b62:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008b64:	2320      	movs	r3, #32
 8008b66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff ff25 	bl	80089ba <HAL_UART_TxCpltCallback>
 8008b70:	e7c0      	b.n	8008af4 <HAL_UART_IRQHandler+0xc0>
 8008b72:	bf00      	nop
 8008b74:	08008b79 	.word	0x08008b79

08008b78 <UART_DMAAbortOnError>:
{
 8008b78:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b80:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8008b82:	f7ff ff56 	bl	8008a32 <HAL_UART_ErrorCallback>
}
 8008b86:	bd08      	pop	{r3, pc}

08008b88 <HAL_UART_AbortCpltCallback>:
 8008b88:	4770      	bx	lr
	...

08008b8c <HAL_UART_Abort_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b8c:	6803      	ldr	r3, [r0, #0]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 8008b94:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b98:	695a      	ldr	r2, [r3, #20]
{
 8008b9a:	4604      	mov	r4, r0
  if (huart->hdmatx != NULL)
 8008b9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9e:	f022 0201 	bic.w	r2, r2, #1
 8008ba2:	615a      	str	r2, [r3, #20]
  if (huart->hdmatx != NULL)
 8008ba4:	b128      	cbz	r0, 8008bb2 <HAL_UART_Abort_IT+0x26>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008ba6:	695a      	ldr	r2, [r3, #20]
 8008ba8:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8008bac:	bf18      	it	ne
 8008bae:	4a1f      	ldrne	r2, [pc, #124]	; (8008c2c <HAL_UART_Abort_IT+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 8008bb0:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8008bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb4:	b129      	cbz	r1, 8008bc2 <HAL_UART_Abort_IT+0x36>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8008bbc:	bf18      	it	ne
 8008bbe:	4a1c      	ldrne	r2, [pc, #112]	; (8008c30 <HAL_UART_Abort_IT+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8008bc0:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008bc2:	695a      	ldr	r2, [r3, #20]
 8008bc4:	0612      	lsls	r2, r2, #24
 8008bc6:	d41d      	bmi.n	8008c04 <HAL_UART_Abort_IT+0x78>
  uint32_t AbortCplt = 0x01U;
 8008bc8:	2301      	movs	r3, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	6951      	ldr	r1, [r2, #20]
 8008bce:	0649      	lsls	r1, r1, #25
 8008bd0:	d527      	bpl.n	8008c22 <HAL_UART_Abort_IT+0x96>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd2:	6951      	ldr	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8008bd4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008bda:	6151      	str	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8008bdc:	b308      	cbz	r0, 8008c22 <HAL_UART_Abort_IT+0x96>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bde:	f7fe ff3a 	bl	8007a56 <HAL_DMA_Abort_IT>
 8008be2:	b300      	cbz	r0, 8008c26 <HAL_UART_Abort_IT+0x9a>
        huart->hdmarx->XferAbortCallback = NULL;
 8008be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be6:	2200      	movs	r2, #0
 8008be8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferCount = 0x00U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8008bee:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf0:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_AbortCpltCallback(huart);
 8008bf8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 8008bfe:	f7ff ffc3 	bl	8008b88 <HAL_UART_AbortCpltCallback>
 8008c02:	e010      	b.n	8008c26 <HAL_UART_Abort_IT+0x9a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c04:	695a      	ldr	r2, [r3, #20]
 8008c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c0a:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d0db      	beq.n	8008bc8 <HAL_UART_Abort_IT+0x3c>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008c10:	f7fe ff21 	bl	8007a56 <HAL_DMA_Abort_IT>
 8008c14:	b118      	cbz	r0, 8008c1e <HAL_UART_Abort_IT+0x92>
        huart->hdmatx->XferAbortCallback = NULL;
 8008c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c18:	2200      	movs	r2, #0
 8008c1a:	651a      	str	r2, [r3, #80]	; 0x50
 8008c1c:	e7d4      	b.n	8008bc8 <HAL_UART_Abort_IT+0x3c>
        AbortCplt = 0x00U;
 8008c1e:	4603      	mov	r3, r0
 8008c20:	e7d3      	b.n	8008bca <HAL_UART_Abort_IT+0x3e>
  if (AbortCplt == 0x01U)
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e1      	bne.n	8008bea <HAL_UART_Abort_IT+0x5e>
}
 8008c26:	2000      	movs	r0, #0
 8008c28:	bd10      	pop	{r4, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008c35 	.word	0x08008c35

08008c34 <UART_DMARxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c34:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 8008c36:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 8008c38:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8008c3e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008c40:	b10a      	cbz	r2, 8008c46 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008c42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c44:	b94a      	cbnz	r2, 8008c5a <UART_DMARxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 8008c46:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008c48:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4a:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008c52:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8008c56:	f7ff ff97 	bl	8008b88 <HAL_UART_AbortCpltCallback>
}
 8008c5a:	bd08      	pop	{r3, pc}

08008c5c <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c5c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8008c5e:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 8008c60:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8008c66:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008c68:	b10a      	cbz	r2, 8008c6e <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008c6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c6c:	b94a      	cbnz	r2, 8008c82 <UART_DMATxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 8008c6e:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008c70:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c72:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8008c74:	2320      	movs	r3, #32
 8008c76:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008c7a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8008c7e:	f7ff ff83 	bl	8008b88 <HAL_UART_AbortCpltCallback>
}
 8008c82:	bd08      	pop	{r3, pc}

08008c84 <HAL_UART_AbortReceiveCpltCallback>:
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c88:	6803      	ldr	r3, [r0, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 8008c90:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c94:	695a      	ldr	r2, [r3, #20]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9c:	695a      	ldr	r2, [r3, #20]
 8008c9e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
{
 8008ca2:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca4:	d017      	beq.n	8008cd6 <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ca6:	695a      	ldr	r2, [r3, #20]
 8008ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cac:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8008cae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008cb0:	b153      	cbz	r3, 8008cc8 <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008cb2:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <HAL_UART_AbortReceive_IT+0x54>)
 8008cb4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fecd 	bl	8007a56 <HAL_DMA_Abort_IT>
 8008cbc:	b110      	cbz	r0, 8008cc4 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cbe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008cc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008cc2:	4798      	blx	r3
}
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8008cc8:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8008cca:	2320      	movs	r3, #32
 8008ccc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008cd0:	f7ff ffd8 	bl	8008c84 <HAL_UART_AbortReceiveCpltCallback>
 8008cd4:	e7f6      	b.n	8008cc4 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 8008cd6:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8008cd8:	e7f7      	b.n	8008cca <HAL_UART_AbortReceive_IT+0x42>
 8008cda:	bf00      	nop
 8008cdc:	08008ce1 	.word	0x08008ce1

08008ce0 <UART_DMARxOnlyAbortCallback>:
{
 8008ce0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8008ce8:	2320      	movs	r3, #32
 8008cea:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008cee:	f7ff ffc9 	bl	8008c84 <HAL_UART_AbortReceiveCpltCallback>
}
 8008cf2:	bd08      	pop	{r3, pc}

08008cf4 <__assert_func>:
 8008cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <__assert_func+0x2c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	68d8      	ldr	r0, [r3, #12]
 8008d00:	b152      	cbz	r2, 8008d18 <__assert_func+0x24>
 8008d02:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <__assert_func+0x30>)
 8008d04:	9100      	str	r1, [sp, #0]
 8008d06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d0a:	4907      	ldr	r1, [pc, #28]	; (8008d28 <__assert_func+0x34>)
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	4622      	mov	r2, r4
 8008d10:	f000 f814 	bl	8008d3c <fiprintf>
 8008d14:	f000 fda6 	bl	8009864 <abort>
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <__assert_func+0x38>)
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	e7f2      	b.n	8008d04 <__assert_func+0x10>
 8008d1e:	bf00      	nop
 8008d20:	200002b8 	.word	0x200002b8
 8008d24:	0800b66c 	.word	0x0800b66c
 8008d28:	0800b679 	.word	0x0800b679
 8008d2c:	0800aad6 	.word	0x0800aad6

08008d30 <__errno>:
 8008d30:	4b01      	ldr	r3, [pc, #4]	; (8008d38 <__errno+0x8>)
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	200002b8 	.word	0x200002b8

08008d3c <fiprintf>:
 8008d3c:	b40e      	push	{r1, r2, r3}
 8008d3e:	b503      	push	{r0, r1, lr}
 8008d40:	4601      	mov	r1, r0
 8008d42:	ab03      	add	r3, sp, #12
 8008d44:	4805      	ldr	r0, [pc, #20]	; (8008d5c <fiprintf+0x20>)
 8008d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	f000 f89b 	bl	8008e88 <_vfiprintf_r>
 8008d52:	b002      	add	sp, #8
 8008d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d58:	b003      	add	sp, #12
 8008d5a:	4770      	bx	lr
 8008d5c:	200002b8 	.word	0x200002b8

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4e0d      	ldr	r6, [pc, #52]	; (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1ba4      	subs	r4, r4, r6
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2500      	movs	r5, #0
 8008d6c:	42a5      	cmp	r5, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4e0b      	ldr	r6, [pc, #44]	; (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__libc_init_array+0x44>)
 8008d74:	f001 faa8 	bl	800a2c8 <_init>
 8008d78:	1ba4      	subs	r4, r4, r6
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2500      	movs	r5, #0
 8008d7e:	42a5      	cmp	r5, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d88:	4798      	blx	r3
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d92:	4798      	blx	r3
 8008d94:	3501      	adds	r5, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	0800b850 	.word	0x0800b850
 8008d9c:	0800b850 	.word	0x0800b850
 8008da0:	0800b850 	.word	0x0800b850
 8008da4:	0800b854 	.word	0x0800b854

08008da8 <__locale_ctype_ptr_l>:
 8008da8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008dac:	4770      	bx	lr
	...

08008db0 <__locale_ctype_ptr>:
 8008db0:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <__locale_ctype_ptr+0x14>)
 8008db2:	4a05      	ldr	r2, [pc, #20]	; (8008dc8 <__locale_ctype_ptr+0x18>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bf08      	it	eq
 8008dbc:	4613      	moveq	r3, r2
 8008dbe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008dc2:	4770      	bx	lr
 8008dc4:	200002b8 	.word	0x200002b8
 8008dc8:	2000031c 	.word	0x2000031c

08008dcc <__ascii_mbtowc>:
 8008dcc:	b082      	sub	sp, #8
 8008dce:	b901      	cbnz	r1, 8008dd2 <__ascii_mbtowc+0x6>
 8008dd0:	a901      	add	r1, sp, #4
 8008dd2:	b142      	cbz	r2, 8008de6 <__ascii_mbtowc+0x1a>
 8008dd4:	b14b      	cbz	r3, 8008dea <__ascii_mbtowc+0x1e>
 8008dd6:	7813      	ldrb	r3, [r2, #0]
 8008dd8:	600b      	str	r3, [r1, #0]
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	1c10      	adds	r0, r2, #0
 8008dde:	bf18      	it	ne
 8008de0:	2001      	movne	r0, #1
 8008de2:	b002      	add	sp, #8
 8008de4:	4770      	bx	lr
 8008de6:	4610      	mov	r0, r2
 8008de8:	e7fb      	b.n	8008de2 <__ascii_mbtowc+0x16>
 8008dea:	f06f 0001 	mvn.w	r0, #1
 8008dee:	e7f8      	b.n	8008de2 <__ascii_mbtowc+0x16>

08008df0 <memcmp>:
 8008df0:	b530      	push	{r4, r5, lr}
 8008df2:	2400      	movs	r4, #0
 8008df4:	42a2      	cmp	r2, r4
 8008df6:	d101      	bne.n	8008dfc <memcmp+0xc>
 8008df8:	2000      	movs	r0, #0
 8008dfa:	e007      	b.n	8008e0c <memcmp+0x1c>
 8008dfc:	5d03      	ldrb	r3, [r0, r4]
 8008dfe:	3401      	adds	r4, #1
 8008e00:	190d      	adds	r5, r1, r4
 8008e02:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008e06:	42ab      	cmp	r3, r5
 8008e08:	d0f4      	beq.n	8008df4 <memcmp+0x4>
 8008e0a:	1b58      	subs	r0, r3, r5
 8008e0c:	bd30      	pop	{r4, r5, pc}

08008e0e <memcpy>:
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	1e43      	subs	r3, r0, #1
 8008e12:	440a      	add	r2, r1
 8008e14:	4291      	cmp	r1, r2
 8008e16:	d100      	bne.n	8008e1a <memcpy+0xc>
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e22:	e7f7      	b.n	8008e14 <memcpy+0x6>

08008e24 <memset>:
 8008e24:	4402      	add	r2, r0
 8008e26:	4603      	mov	r3, r0
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d100      	bne.n	8008e2e <memset+0xa>
 8008e2c:	4770      	bx	lr
 8008e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e32:	e7f9      	b.n	8008e28 <memset+0x4>

08008e34 <__sfputc_r>:
 8008e34:	6893      	ldr	r3, [r2, #8]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	b410      	push	{r4}
 8008e3c:	6093      	str	r3, [r2, #8]
 8008e3e:	da08      	bge.n	8008e52 <__sfputc_r+0x1e>
 8008e40:	6994      	ldr	r4, [r2, #24]
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	db01      	blt.n	8008e4a <__sfputc_r+0x16>
 8008e46:	290a      	cmp	r1, #10
 8008e48:	d103      	bne.n	8008e52 <__sfputc_r+0x1e>
 8008e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e4e:	f000 bc3b 	b.w	80096c8 <__swbuf_r>
 8008e52:	6813      	ldr	r3, [r2, #0]
 8008e54:	1c58      	adds	r0, r3, #1
 8008e56:	6010      	str	r0, [r2, #0]
 8008e58:	7019      	strb	r1, [r3, #0]
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <__sfputs_r>:
 8008e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	18d5      	adds	r5, r2, r3
 8008e6c:	42ac      	cmp	r4, r5
 8008e6e:	d101      	bne.n	8008e74 <__sfputs_r+0x12>
 8008e70:	2000      	movs	r0, #0
 8008e72:	e007      	b.n	8008e84 <__sfputs_r+0x22>
 8008e74:	463a      	mov	r2, r7
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ffda 	bl	8008e34 <__sfputc_r>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d1f3      	bne.n	8008e6c <__sfputs_r+0xa>
 8008e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e88 <_vfiprintf_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	b09d      	sub	sp, #116	; 0x74
 8008e90:	4617      	mov	r7, r2
 8008e92:	461d      	mov	r5, r3
 8008e94:	4606      	mov	r6, r0
 8008e96:	b118      	cbz	r0, 8008ea0 <_vfiprintf_r+0x18>
 8008e98:	6983      	ldr	r3, [r0, #24]
 8008e9a:	b90b      	cbnz	r3, 8008ea0 <_vfiprintf_r+0x18>
 8008e9c:	f000 fdda 	bl	8009a54 <__sinit>
 8008ea0:	4b7c      	ldr	r3, [pc, #496]	; (8009094 <_vfiprintf_r+0x20c>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d158      	bne.n	8008f58 <_vfiprintf_r+0xd0>
 8008ea6:	6874      	ldr	r4, [r6, #4]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	0718      	lsls	r0, r3, #28
 8008eac:	d55e      	bpl.n	8008f6c <_vfiprintf_r+0xe4>
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d05b      	beq.n	8008f6c <_vfiprintf_r+0xe4>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb8:	2320      	movs	r3, #32
 8008eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ebe:	2330      	movs	r3, #48	; 0x30
 8008ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec4:	9503      	str	r5, [sp, #12]
 8008ec6:	f04f 0b01 	mov.w	fp, #1
 8008eca:	46b8      	mov	r8, r7
 8008ecc:	4645      	mov	r5, r8
 8008ece:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ed2:	b10b      	cbz	r3, 8008ed8 <_vfiprintf_r+0x50>
 8008ed4:	2b25      	cmp	r3, #37	; 0x25
 8008ed6:	d154      	bne.n	8008f82 <_vfiprintf_r+0xfa>
 8008ed8:	ebb8 0a07 	subs.w	sl, r8, r7
 8008edc:	d00b      	beq.n	8008ef6 <_vfiprintf_r+0x6e>
 8008ede:	4653      	mov	r3, sl
 8008ee0:	463a      	mov	r2, r7
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff ffbc 	bl	8008e62 <__sfputs_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	f000 80c2 	beq.w	8009074 <_vfiprintf_r+0x1ec>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	4453      	add	r3, sl
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	f898 3000 	ldrb.w	r3, [r8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80ba 	beq.w	8009074 <_vfiprintf_r+0x1ec>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f12:	931a      	str	r3, [sp, #104]	; 0x68
 8008f14:	46a8      	mov	r8, r5
 8008f16:	2205      	movs	r2, #5
 8008f18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008f1c:	485e      	ldr	r0, [pc, #376]	; (8009098 <_vfiprintf_r+0x210>)
 8008f1e:	f7f7 f96f 	bl	8000200 <memchr>
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	bb78      	cbnz	r0, 8008f86 <_vfiprintf_r+0xfe>
 8008f26:	06d9      	lsls	r1, r3, #27
 8008f28:	bf44      	itt	mi
 8008f2a:	2220      	movmi	r2, #32
 8008f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f30:	071a      	lsls	r2, r3, #28
 8008f32:	bf44      	itt	mi
 8008f34:	222b      	movmi	r2, #43	; 0x2b
 8008f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f3a:	782a      	ldrb	r2, [r5, #0]
 8008f3c:	2a2a      	cmp	r2, #42	; 0x2a
 8008f3e:	d02a      	beq.n	8008f96 <_vfiprintf_r+0x10e>
 8008f40:	9a07      	ldr	r2, [sp, #28]
 8008f42:	46a8      	mov	r8, r5
 8008f44:	2000      	movs	r0, #0
 8008f46:	250a      	movs	r5, #10
 8008f48:	4641      	mov	r1, r8
 8008f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4e:	3b30      	subs	r3, #48	; 0x30
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d969      	bls.n	8009028 <_vfiprintf_r+0x1a0>
 8008f54:	b360      	cbz	r0, 8008fb0 <_vfiprintf_r+0x128>
 8008f56:	e024      	b.n	8008fa2 <_vfiprintf_r+0x11a>
 8008f58:	4b50      	ldr	r3, [pc, #320]	; (800909c <_vfiprintf_r+0x214>)
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	d101      	bne.n	8008f62 <_vfiprintf_r+0xda>
 8008f5e:	68b4      	ldr	r4, [r6, #8]
 8008f60:	e7a2      	b.n	8008ea8 <_vfiprintf_r+0x20>
 8008f62:	4b4f      	ldr	r3, [pc, #316]	; (80090a0 <_vfiprintf_r+0x218>)
 8008f64:	429c      	cmp	r4, r3
 8008f66:	bf08      	it	eq
 8008f68:	68f4      	ldreq	r4, [r6, #12]
 8008f6a:	e79d      	b.n	8008ea8 <_vfiprintf_r+0x20>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 fc0a 	bl	8009788 <__swsetup_r>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d09d      	beq.n	8008eb4 <_vfiprintf_r+0x2c>
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	b01d      	add	sp, #116	; 0x74
 8008f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f82:	46a8      	mov	r8, r5
 8008f84:	e7a2      	b.n	8008ecc <_vfiprintf_r+0x44>
 8008f86:	4a44      	ldr	r2, [pc, #272]	; (8009098 <_vfiprintf_r+0x210>)
 8008f88:	1a80      	subs	r0, r0, r2
 8008f8a:	fa0b f000 	lsl.w	r0, fp, r0
 8008f8e:	4318      	orrs	r0, r3
 8008f90:	9004      	str	r0, [sp, #16]
 8008f92:	4645      	mov	r5, r8
 8008f94:	e7be      	b.n	8008f14 <_vfiprintf_r+0x8c>
 8008f96:	9a03      	ldr	r2, [sp, #12]
 8008f98:	1d11      	adds	r1, r2, #4
 8008f9a:	6812      	ldr	r2, [r2, #0]
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	db01      	blt.n	8008fa6 <_vfiprintf_r+0x11e>
 8008fa2:	9207      	str	r2, [sp, #28]
 8008fa4:	e004      	b.n	8008fb0 <_vfiprintf_r+0x128>
 8008fa6:	4252      	negs	r2, r2
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	9207      	str	r2, [sp, #28]
 8008fae:	9304      	str	r3, [sp, #16]
 8008fb0:	f898 3000 	ldrb.w	r3, [r8]
 8008fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fb6:	d10e      	bne.n	8008fd6 <_vfiprintf_r+0x14e>
 8008fb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008fbe:	d138      	bne.n	8009032 <_vfiprintf_r+0x1aa>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	1d1a      	adds	r2, r3, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	9203      	str	r2, [sp, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bfb8      	it	lt
 8008fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fd0:	f108 0802 	add.w	r8, r8, #2
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	4d33      	ldr	r5, [pc, #204]	; (80090a4 <_vfiprintf_r+0x21c>)
 8008fd8:	f898 1000 	ldrb.w	r1, [r8]
 8008fdc:	2203      	movs	r2, #3
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f7f7 f90e 	bl	8000200 <memchr>
 8008fe4:	b140      	cbz	r0, 8008ff8 <_vfiprintf_r+0x170>
 8008fe6:	2340      	movs	r3, #64	; 0x40
 8008fe8:	1b40      	subs	r0, r0, r5
 8008fea:	fa03 f000 	lsl.w	r0, r3, r0
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	4303      	orrs	r3, r0
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	f898 1000 	ldrb.w	r1, [r8]
 8008ffc:	482a      	ldr	r0, [pc, #168]	; (80090a8 <_vfiprintf_r+0x220>)
 8008ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009002:	2206      	movs	r2, #6
 8009004:	f108 0701 	add.w	r7, r8, #1
 8009008:	f7f7 f8fa 	bl	8000200 <memchr>
 800900c:	2800      	cmp	r0, #0
 800900e:	d037      	beq.n	8009080 <_vfiprintf_r+0x1f8>
 8009010:	4b26      	ldr	r3, [pc, #152]	; (80090ac <_vfiprintf_r+0x224>)
 8009012:	bb1b      	cbnz	r3, 800905c <_vfiprintf_r+0x1d4>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	3307      	adds	r3, #7
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	3308      	adds	r3, #8
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	444b      	add	r3, r9
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	e750      	b.n	8008eca <_vfiprintf_r+0x42>
 8009028:	fb05 3202 	mla	r2, r5, r2, r3
 800902c:	2001      	movs	r0, #1
 800902e:	4688      	mov	r8, r1
 8009030:	e78a      	b.n	8008f48 <_vfiprintf_r+0xc0>
 8009032:	2300      	movs	r3, #0
 8009034:	f108 0801 	add.w	r8, r8, #1
 8009038:	9305      	str	r3, [sp, #20]
 800903a:	4619      	mov	r1, r3
 800903c:	250a      	movs	r5, #10
 800903e:	4640      	mov	r0, r8
 8009040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009044:	3a30      	subs	r2, #48	; 0x30
 8009046:	2a09      	cmp	r2, #9
 8009048:	d903      	bls.n	8009052 <_vfiprintf_r+0x1ca>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c3      	beq.n	8008fd6 <_vfiprintf_r+0x14e>
 800904e:	9105      	str	r1, [sp, #20]
 8009050:	e7c1      	b.n	8008fd6 <_vfiprintf_r+0x14e>
 8009052:	fb05 2101 	mla	r1, r5, r1, r2
 8009056:	2301      	movs	r3, #1
 8009058:	4680      	mov	r8, r0
 800905a:	e7f0      	b.n	800903e <_vfiprintf_r+0x1b6>
 800905c:	ab03      	add	r3, sp, #12
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4622      	mov	r2, r4
 8009062:	4b13      	ldr	r3, [pc, #76]	; (80090b0 <_vfiprintf_r+0x228>)
 8009064:	a904      	add	r1, sp, #16
 8009066:	4630      	mov	r0, r6
 8009068:	f3af 8000 	nop.w
 800906c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009070:	4681      	mov	r9, r0
 8009072:	d1d5      	bne.n	8009020 <_vfiprintf_r+0x198>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	065b      	lsls	r3, r3, #25
 8009078:	f53f af7e 	bmi.w	8008f78 <_vfiprintf_r+0xf0>
 800907c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907e:	e77d      	b.n	8008f7c <_vfiprintf_r+0xf4>
 8009080:	ab03      	add	r3, sp, #12
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	4622      	mov	r2, r4
 8009086:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <_vfiprintf_r+0x228>)
 8009088:	a904      	add	r1, sp, #16
 800908a:	4630      	mov	r0, r6
 800908c:	f000 f888 	bl	80091a0 <_printf_i>
 8009090:	e7ec      	b.n	800906c <_vfiprintf_r+0x1e4>
 8009092:	bf00      	nop
 8009094:	0800b808 	.word	0x0800b808
 8009098:	0800b6b2 	.word	0x0800b6b2
 800909c:	0800b828 	.word	0x0800b828
 80090a0:	0800b7e8 	.word	0x0800b7e8
 80090a4:	0800b6b8 	.word	0x0800b6b8
 80090a8:	0800b6bc 	.word	0x0800b6bc
 80090ac:	00000000 	.word	0x00000000
 80090b0:	08008e63 	.word	0x08008e63

080090b4 <_printf_common>:
 80090b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b8:	4691      	mov	r9, r2
 80090ba:	461f      	mov	r7, r3
 80090bc:	688a      	ldr	r2, [r1, #8]
 80090be:	690b      	ldr	r3, [r1, #16]
 80090c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	bfb8      	it	lt
 80090c8:	4613      	movlt	r3, r2
 80090ca:	f8c9 3000 	str.w	r3, [r9]
 80090ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090d2:	4606      	mov	r6, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	b112      	cbz	r2, 80090de <_printf_common+0x2a>
 80090d8:	3301      	adds	r3, #1
 80090da:	f8c9 3000 	str.w	r3, [r9]
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	0699      	lsls	r1, r3, #26
 80090e2:	bf42      	ittt	mi
 80090e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090e8:	3302      	addmi	r3, #2
 80090ea:	f8c9 3000 	strmi.w	r3, [r9]
 80090ee:	6825      	ldr	r5, [r4, #0]
 80090f0:	f015 0506 	ands.w	r5, r5, #6
 80090f4:	d107      	bne.n	8009106 <_printf_common+0x52>
 80090f6:	f104 0a19 	add.w	sl, r4, #25
 80090fa:	68e3      	ldr	r3, [r4, #12]
 80090fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	42ab      	cmp	r3, r5
 8009104:	dc28      	bgt.n	8009158 <_printf_common+0xa4>
 8009106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	3300      	adds	r3, #0
 800910e:	bf18      	it	ne
 8009110:	2301      	movne	r3, #1
 8009112:	0692      	lsls	r2, r2, #26
 8009114:	d42d      	bmi.n	8009172 <_printf_common+0xbe>
 8009116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800911a:	4639      	mov	r1, r7
 800911c:	4630      	mov	r0, r6
 800911e:	47c0      	blx	r8
 8009120:	3001      	adds	r0, #1
 8009122:	d020      	beq.n	8009166 <_printf_common+0xb2>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	68e5      	ldr	r5, [r4, #12]
 8009128:	f8d9 2000 	ldr.w	r2, [r9]
 800912c:	f003 0306 	and.w	r3, r3, #6
 8009130:	2b04      	cmp	r3, #4
 8009132:	bf08      	it	eq
 8009134:	1aad      	subeq	r5, r5, r2
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	6922      	ldr	r2, [r4, #16]
 800913a:	bf0c      	ite	eq
 800913c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009140:	2500      	movne	r5, #0
 8009142:	4293      	cmp	r3, r2
 8009144:	bfc4      	itt	gt
 8009146:	1a9b      	subgt	r3, r3, r2
 8009148:	18ed      	addgt	r5, r5, r3
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	341a      	adds	r4, #26
 8009150:	454d      	cmp	r5, r9
 8009152:	d11a      	bne.n	800918a <_printf_common+0xd6>
 8009154:	2000      	movs	r0, #0
 8009156:	e008      	b.n	800916a <_printf_common+0xb6>
 8009158:	2301      	movs	r3, #1
 800915a:	4652      	mov	r2, sl
 800915c:	4639      	mov	r1, r7
 800915e:	4630      	mov	r0, r6
 8009160:	47c0      	blx	r8
 8009162:	3001      	adds	r0, #1
 8009164:	d103      	bne.n	800916e <_printf_common+0xba>
 8009166:	f04f 30ff 	mov.w	r0, #4294967295
 800916a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916e:	3501      	adds	r5, #1
 8009170:	e7c3      	b.n	80090fa <_printf_common+0x46>
 8009172:	18e1      	adds	r1, r4, r3
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	2030      	movs	r0, #48	; 0x30
 8009178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800917c:	4422      	add	r2, r4
 800917e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009186:	3302      	adds	r3, #2
 8009188:	e7c5      	b.n	8009116 <_printf_common+0x62>
 800918a:	2301      	movs	r3, #1
 800918c:	4622      	mov	r2, r4
 800918e:	4639      	mov	r1, r7
 8009190:	4630      	mov	r0, r6
 8009192:	47c0      	blx	r8
 8009194:	3001      	adds	r0, #1
 8009196:	d0e6      	beq.n	8009166 <_printf_common+0xb2>
 8009198:	f109 0901 	add.w	r9, r9, #1
 800919c:	e7d8      	b.n	8009150 <_printf_common+0x9c>
	...

080091a0 <_printf_i>:
 80091a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80091a8:	460c      	mov	r4, r1
 80091aa:	7e09      	ldrb	r1, [r1, #24]
 80091ac:	b085      	sub	sp, #20
 80091ae:	296e      	cmp	r1, #110	; 0x6e
 80091b0:	4617      	mov	r7, r2
 80091b2:	4606      	mov	r6, r0
 80091b4:	4698      	mov	r8, r3
 80091b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b8:	f000 80b3 	beq.w	8009322 <_printf_i+0x182>
 80091bc:	d822      	bhi.n	8009204 <_printf_i+0x64>
 80091be:	2963      	cmp	r1, #99	; 0x63
 80091c0:	d036      	beq.n	8009230 <_printf_i+0x90>
 80091c2:	d80a      	bhi.n	80091da <_printf_i+0x3a>
 80091c4:	2900      	cmp	r1, #0
 80091c6:	f000 80b9 	beq.w	800933c <_printf_i+0x19c>
 80091ca:	2958      	cmp	r1, #88	; 0x58
 80091cc:	f000 8083 	beq.w	80092d6 <_printf_i+0x136>
 80091d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80091d8:	e032      	b.n	8009240 <_printf_i+0xa0>
 80091da:	2964      	cmp	r1, #100	; 0x64
 80091dc:	d001      	beq.n	80091e2 <_printf_i+0x42>
 80091de:	2969      	cmp	r1, #105	; 0x69
 80091e0:	d1f6      	bne.n	80091d0 <_printf_i+0x30>
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	6813      	ldr	r3, [r2, #0]
 80091e6:	0605      	lsls	r5, r0, #24
 80091e8:	f103 0104 	add.w	r1, r3, #4
 80091ec:	d52a      	bpl.n	8009244 <_printf_i+0xa4>
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6011      	str	r1, [r2, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	da03      	bge.n	80091fe <_printf_i+0x5e>
 80091f6:	222d      	movs	r2, #45	; 0x2d
 80091f8:	425b      	negs	r3, r3
 80091fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091fe:	486f      	ldr	r0, [pc, #444]	; (80093bc <_printf_i+0x21c>)
 8009200:	220a      	movs	r2, #10
 8009202:	e039      	b.n	8009278 <_printf_i+0xd8>
 8009204:	2973      	cmp	r1, #115	; 0x73
 8009206:	f000 809d 	beq.w	8009344 <_printf_i+0x1a4>
 800920a:	d808      	bhi.n	800921e <_printf_i+0x7e>
 800920c:	296f      	cmp	r1, #111	; 0x6f
 800920e:	d020      	beq.n	8009252 <_printf_i+0xb2>
 8009210:	2970      	cmp	r1, #112	; 0x70
 8009212:	d1dd      	bne.n	80091d0 <_printf_i+0x30>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	f043 0320 	orr.w	r3, r3, #32
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	e003      	b.n	8009226 <_printf_i+0x86>
 800921e:	2975      	cmp	r1, #117	; 0x75
 8009220:	d017      	beq.n	8009252 <_printf_i+0xb2>
 8009222:	2978      	cmp	r1, #120	; 0x78
 8009224:	d1d4      	bne.n	80091d0 <_printf_i+0x30>
 8009226:	2378      	movs	r3, #120	; 0x78
 8009228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800922c:	4864      	ldr	r0, [pc, #400]	; (80093c0 <_printf_i+0x220>)
 800922e:	e055      	b.n	80092dc <_printf_i+0x13c>
 8009230:	6813      	ldr	r3, [r2, #0]
 8009232:	1d19      	adds	r1, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6011      	str	r1, [r2, #0]
 8009238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800923c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009240:	2301      	movs	r3, #1
 8009242:	e08c      	b.n	800935e <_printf_i+0x1be>
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6011      	str	r1, [r2, #0]
 8009248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800924c:	bf18      	it	ne
 800924e:	b21b      	sxthne	r3, r3
 8009250:	e7cf      	b.n	80091f2 <_printf_i+0x52>
 8009252:	6813      	ldr	r3, [r2, #0]
 8009254:	6825      	ldr	r5, [r4, #0]
 8009256:	1d18      	adds	r0, r3, #4
 8009258:	6010      	str	r0, [r2, #0]
 800925a:	0628      	lsls	r0, r5, #24
 800925c:	d501      	bpl.n	8009262 <_printf_i+0xc2>
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	e002      	b.n	8009268 <_printf_i+0xc8>
 8009262:	0668      	lsls	r0, r5, #25
 8009264:	d5fb      	bpl.n	800925e <_printf_i+0xbe>
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	4854      	ldr	r0, [pc, #336]	; (80093bc <_printf_i+0x21c>)
 800926a:	296f      	cmp	r1, #111	; 0x6f
 800926c:	bf14      	ite	ne
 800926e:	220a      	movne	r2, #10
 8009270:	2208      	moveq	r2, #8
 8009272:	2100      	movs	r1, #0
 8009274:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009278:	6865      	ldr	r5, [r4, #4]
 800927a:	60a5      	str	r5, [r4, #8]
 800927c:	2d00      	cmp	r5, #0
 800927e:	f2c0 8095 	blt.w	80093ac <_printf_i+0x20c>
 8009282:	6821      	ldr	r1, [r4, #0]
 8009284:	f021 0104 	bic.w	r1, r1, #4
 8009288:	6021      	str	r1, [r4, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d13d      	bne.n	800930a <_printf_i+0x16a>
 800928e:	2d00      	cmp	r5, #0
 8009290:	f040 808e 	bne.w	80093b0 <_printf_i+0x210>
 8009294:	4665      	mov	r5, ip
 8009296:	2a08      	cmp	r2, #8
 8009298:	d10b      	bne.n	80092b2 <_printf_i+0x112>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	07db      	lsls	r3, r3, #31
 800929e:	d508      	bpl.n	80092b2 <_printf_i+0x112>
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	6862      	ldr	r2, [r4, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bfde      	ittt	le
 80092a8:	2330      	movle	r3, #48	; 0x30
 80092aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092b2:	ebac 0305 	sub.w	r3, ip, r5
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	f8cd 8000 	str.w	r8, [sp]
 80092bc:	463b      	mov	r3, r7
 80092be:	aa03      	add	r2, sp, #12
 80092c0:	4621      	mov	r1, r4
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff fef6 	bl	80090b4 <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d14d      	bne.n	8009368 <_printf_i+0x1c8>
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	b005      	add	sp, #20
 80092d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092d6:	4839      	ldr	r0, [pc, #228]	; (80093bc <_printf_i+0x21c>)
 80092d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80092dc:	6813      	ldr	r3, [r2, #0]
 80092de:	6821      	ldr	r1, [r4, #0]
 80092e0:	1d1d      	adds	r5, r3, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6015      	str	r5, [r2, #0]
 80092e6:	060a      	lsls	r2, r1, #24
 80092e8:	d50b      	bpl.n	8009302 <_printf_i+0x162>
 80092ea:	07ca      	lsls	r2, r1, #31
 80092ec:	bf44      	itt	mi
 80092ee:	f041 0120 	orrmi.w	r1, r1, #32
 80092f2:	6021      	strmi	r1, [r4, #0]
 80092f4:	b91b      	cbnz	r3, 80092fe <_printf_i+0x15e>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	f022 0220 	bic.w	r2, r2, #32
 80092fc:	6022      	str	r2, [r4, #0]
 80092fe:	2210      	movs	r2, #16
 8009300:	e7b7      	b.n	8009272 <_printf_i+0xd2>
 8009302:	064d      	lsls	r5, r1, #25
 8009304:	bf48      	it	mi
 8009306:	b29b      	uxthmi	r3, r3
 8009308:	e7ef      	b.n	80092ea <_printf_i+0x14a>
 800930a:	4665      	mov	r5, ip
 800930c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009310:	fb02 3311 	mls	r3, r2, r1, r3
 8009314:	5cc3      	ldrb	r3, [r0, r3]
 8009316:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800931a:	460b      	mov	r3, r1
 800931c:	2900      	cmp	r1, #0
 800931e:	d1f5      	bne.n	800930c <_printf_i+0x16c>
 8009320:	e7b9      	b.n	8009296 <_printf_i+0xf6>
 8009322:	6813      	ldr	r3, [r2, #0]
 8009324:	6825      	ldr	r5, [r4, #0]
 8009326:	6961      	ldr	r1, [r4, #20]
 8009328:	1d18      	adds	r0, r3, #4
 800932a:	6010      	str	r0, [r2, #0]
 800932c:	0628      	lsls	r0, r5, #24
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	d501      	bpl.n	8009336 <_printf_i+0x196>
 8009332:	6019      	str	r1, [r3, #0]
 8009334:	e002      	b.n	800933c <_printf_i+0x19c>
 8009336:	066a      	lsls	r2, r5, #25
 8009338:	d5fb      	bpl.n	8009332 <_printf_i+0x192>
 800933a:	8019      	strh	r1, [r3, #0]
 800933c:	2300      	movs	r3, #0
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	4665      	mov	r5, ip
 8009342:	e7b9      	b.n	80092b8 <_printf_i+0x118>
 8009344:	6813      	ldr	r3, [r2, #0]
 8009346:	1d19      	adds	r1, r3, #4
 8009348:	6011      	str	r1, [r2, #0]
 800934a:	681d      	ldr	r5, [r3, #0]
 800934c:	6862      	ldr	r2, [r4, #4]
 800934e:	2100      	movs	r1, #0
 8009350:	4628      	mov	r0, r5
 8009352:	f7f6 ff55 	bl	8000200 <memchr>
 8009356:	b108      	cbz	r0, 800935c <_printf_i+0x1bc>
 8009358:	1b40      	subs	r0, r0, r5
 800935a:	6060      	str	r0, [r4, #4]
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	6123      	str	r3, [r4, #16]
 8009360:	2300      	movs	r3, #0
 8009362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009366:	e7a7      	b.n	80092b8 <_printf_i+0x118>
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	462a      	mov	r2, r5
 800936c:	4639      	mov	r1, r7
 800936e:	4630      	mov	r0, r6
 8009370:	47c0      	blx	r8
 8009372:	3001      	adds	r0, #1
 8009374:	d0aa      	beq.n	80092cc <_printf_i+0x12c>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	079b      	lsls	r3, r3, #30
 800937a:	d413      	bmi.n	80093a4 <_printf_i+0x204>
 800937c:	68e0      	ldr	r0, [r4, #12]
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	4298      	cmp	r0, r3
 8009382:	bfb8      	it	lt
 8009384:	4618      	movlt	r0, r3
 8009386:	e7a3      	b.n	80092d0 <_printf_i+0x130>
 8009388:	2301      	movs	r3, #1
 800938a:	464a      	mov	r2, r9
 800938c:	4639      	mov	r1, r7
 800938e:	4630      	mov	r0, r6
 8009390:	47c0      	blx	r8
 8009392:	3001      	adds	r0, #1
 8009394:	d09a      	beq.n	80092cc <_printf_i+0x12c>
 8009396:	3501      	adds	r5, #1
 8009398:	68e3      	ldr	r3, [r4, #12]
 800939a:	9a03      	ldr	r2, [sp, #12]
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	42ab      	cmp	r3, r5
 80093a0:	dcf2      	bgt.n	8009388 <_printf_i+0x1e8>
 80093a2:	e7eb      	b.n	800937c <_printf_i+0x1dc>
 80093a4:	2500      	movs	r5, #0
 80093a6:	f104 0919 	add.w	r9, r4, #25
 80093aa:	e7f5      	b.n	8009398 <_printf_i+0x1f8>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1ac      	bne.n	800930a <_printf_i+0x16a>
 80093b0:	7803      	ldrb	r3, [r0, #0]
 80093b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093ba:	e76c      	b.n	8009296 <_printf_i+0xf6>
 80093bc:	0800b6c3 	.word	0x0800b6c3
 80093c0:	0800b6d4 	.word	0x0800b6d4

080093c4 <iprintf>:
 80093c4:	b40f      	push	{r0, r1, r2, r3}
 80093c6:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <iprintf+0x2c>)
 80093c8:	b513      	push	{r0, r1, r4, lr}
 80093ca:	681c      	ldr	r4, [r3, #0]
 80093cc:	b124      	cbz	r4, 80093d8 <iprintf+0x14>
 80093ce:	69a3      	ldr	r3, [r4, #24]
 80093d0:	b913      	cbnz	r3, 80093d8 <iprintf+0x14>
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 fb3e 	bl	8009a54 <__sinit>
 80093d8:	ab05      	add	r3, sp, #20
 80093da:	9a04      	ldr	r2, [sp, #16]
 80093dc:	68a1      	ldr	r1, [r4, #8]
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff fd51 	bl	8008e88 <_vfiprintf_r>
 80093e6:	b002      	add	sp, #8
 80093e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ec:	b004      	add	sp, #16
 80093ee:	4770      	bx	lr
 80093f0:	200002b8 	.word	0x200002b8

080093f4 <sniprintf>:
 80093f4:	b40c      	push	{r2, r3}
 80093f6:	b530      	push	{r4, r5, lr}
 80093f8:	4b17      	ldr	r3, [pc, #92]	; (8009458 <sniprintf+0x64>)
 80093fa:	1e0c      	subs	r4, r1, #0
 80093fc:	b09d      	sub	sp, #116	; 0x74
 80093fe:	681d      	ldr	r5, [r3, #0]
 8009400:	da08      	bge.n	8009414 <sniprintf+0x20>
 8009402:	238b      	movs	r3, #139	; 0x8b
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
 800940a:	b01d      	add	sp, #116	; 0x74
 800940c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009410:	b002      	add	sp, #8
 8009412:	4770      	bx	lr
 8009414:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009418:	f8ad 3014 	strh.w	r3, [sp, #20]
 800941c:	bf14      	ite	ne
 800941e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009422:	4623      	moveq	r3, r4
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800942c:	9002      	str	r0, [sp, #8]
 800942e:	9006      	str	r0, [sp, #24]
 8009430:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009434:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009436:	ab21      	add	r3, sp, #132	; 0x84
 8009438:	a902      	add	r1, sp, #8
 800943a:	4628      	mov	r0, r5
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	f000 fd41 	bl	8009ec4 <_svfiprintf_r>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	bfbc      	itt	lt
 8009446:	238b      	movlt	r3, #139	; 0x8b
 8009448:	602b      	strlt	r3, [r5, #0]
 800944a:	2c00      	cmp	r4, #0
 800944c:	d0dd      	beq.n	800940a <sniprintf+0x16>
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	2200      	movs	r2, #0
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	e7d9      	b.n	800940a <sniprintf+0x16>
 8009456:	bf00      	nop
 8009458:	200002b8 	.word	0x200002b8

0800945c <strchr>:
 800945c:	b2c9      	uxtb	r1, r1
 800945e:	4603      	mov	r3, r0
 8009460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009464:	b11a      	cbz	r2, 800946e <strchr+0x12>
 8009466:	428a      	cmp	r2, r1
 8009468:	d1f9      	bne.n	800945e <strchr+0x2>
 800946a:	4618      	mov	r0, r3
 800946c:	4770      	bx	lr
 800946e:	2900      	cmp	r1, #0
 8009470:	bf18      	it	ne
 8009472:	2300      	movne	r3, #0
 8009474:	e7f9      	b.n	800946a <strchr+0xe>

08009476 <strcpy>:
 8009476:	4603      	mov	r3, r0
 8009478:	f811 2b01 	ldrb.w	r2, [r1], #1
 800947c:	f803 2b01 	strb.w	r2, [r3], #1
 8009480:	2a00      	cmp	r2, #0
 8009482:	d1f9      	bne.n	8009478 <strcpy+0x2>
 8009484:	4770      	bx	lr

08009486 <strcspn>:
 8009486:	b570      	push	{r4, r5, r6, lr}
 8009488:	4603      	mov	r3, r0
 800948a:	461a      	mov	r2, r3
 800948c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009490:	b14d      	cbz	r5, 80094a6 <strcspn+0x20>
 8009492:	1e4c      	subs	r4, r1, #1
 8009494:	e001      	b.n	800949a <strcspn+0x14>
 8009496:	42ae      	cmp	r6, r5
 8009498:	d005      	beq.n	80094a6 <strcspn+0x20>
 800949a:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800949e:	2e00      	cmp	r6, #0
 80094a0:	d1f9      	bne.n	8009496 <strcspn+0x10>
 80094a2:	4613      	mov	r3, r2
 80094a4:	e7f1      	b.n	800948a <strcspn+0x4>
 80094a6:	1a18      	subs	r0, r3, r0
 80094a8:	bd70      	pop	{r4, r5, r6, pc}

080094aa <strspn>:
 80094aa:	b570      	push	{r4, r5, r6, lr}
 80094ac:	4603      	mov	r3, r0
 80094ae:	461a      	mov	r2, r3
 80094b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80094b4:	b13d      	cbz	r5, 80094c6 <strspn+0x1c>
 80094b6:	1e4c      	subs	r4, r1, #1
 80094b8:	e001      	b.n	80094be <strspn+0x14>
 80094ba:	42ae      	cmp	r6, r5
 80094bc:	d005      	beq.n	80094ca <strspn+0x20>
 80094be:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80094c2:	2e00      	cmp	r6, #0
 80094c4:	d1f9      	bne.n	80094ba <strspn+0x10>
 80094c6:	1a18      	subs	r0, r3, r0
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	4613      	mov	r3, r2
 80094cc:	e7ef      	b.n	80094ae <strspn+0x4>
	...

080094d0 <strtok>:
 80094d0:	4b13      	ldr	r3, [pc, #76]	; (8009520 <strtok+0x50>)
 80094d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	681d      	ldr	r5, [r3, #0]
 80094d8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	b9b4      	cbnz	r4, 800950e <strtok+0x3e>
 80094e0:	2050      	movs	r0, #80	; 0x50
 80094e2:	f000 fba5 	bl	8009c30 <malloc>
 80094e6:	65a8      	str	r0, [r5, #88]	; 0x58
 80094e8:	e9c0 4400 	strd	r4, r4, [r0]
 80094ec:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80094f0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80094f4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80094f8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80094fc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009500:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009504:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009508:	6184      	str	r4, [r0, #24]
 800950a:	7704      	strb	r4, [r0, #28]
 800950c:	6244      	str	r4, [r0, #36]	; 0x24
 800950e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009510:	4639      	mov	r1, r7
 8009512:	4630      	mov	r0, r6
 8009514:	2301      	movs	r3, #1
 8009516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	f000 b803 	b.w	8009524 <__strtok_r>
 800951e:	bf00      	nop
 8009520:	200002b8 	.word	0x200002b8

08009524 <__strtok_r>:
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	b918      	cbnz	r0, 8009530 <__strtok_r+0xc>
 8009528:	6810      	ldr	r0, [r2, #0]
 800952a:	b908      	cbnz	r0, 8009530 <__strtok_r+0xc>
 800952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952e:	4620      	mov	r0, r4
 8009530:	4604      	mov	r4, r0
 8009532:	460f      	mov	r7, r1
 8009534:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009538:	f817 6b01 	ldrb.w	r6, [r7], #1
 800953c:	b91e      	cbnz	r6, 8009546 <__strtok_r+0x22>
 800953e:	b96d      	cbnz	r5, 800955c <__strtok_r+0x38>
 8009540:	6015      	str	r5, [r2, #0]
 8009542:	4628      	mov	r0, r5
 8009544:	e7f2      	b.n	800952c <__strtok_r+0x8>
 8009546:	42b5      	cmp	r5, r6
 8009548:	d1f6      	bne.n	8009538 <__strtok_r+0x14>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1ef      	bne.n	800952e <__strtok_r+0xa>
 800954e:	6014      	str	r4, [r2, #0]
 8009550:	7003      	strb	r3, [r0, #0]
 8009552:	e7eb      	b.n	800952c <__strtok_r+0x8>
 8009554:	462b      	mov	r3, r5
 8009556:	e00d      	b.n	8009574 <__strtok_r+0x50>
 8009558:	b926      	cbnz	r6, 8009564 <__strtok_r+0x40>
 800955a:	461c      	mov	r4, r3
 800955c:	4623      	mov	r3, r4
 800955e:	460f      	mov	r7, r1
 8009560:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009564:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009568:	42b5      	cmp	r5, r6
 800956a:	d1f5      	bne.n	8009558 <__strtok_r+0x34>
 800956c:	2d00      	cmp	r5, #0
 800956e:	d0f1      	beq.n	8009554 <__strtok_r+0x30>
 8009570:	2100      	movs	r1, #0
 8009572:	7021      	strb	r1, [r4, #0]
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e7d9      	b.n	800952c <__strtok_r+0x8>

08009578 <_strtol_l.isra.0>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4680      	mov	r8, r0
 800957e:	4689      	mov	r9, r1
 8009580:	4692      	mov	sl, r2
 8009582:	461e      	mov	r6, r3
 8009584:	460f      	mov	r7, r1
 8009586:	463d      	mov	r5, r7
 8009588:	9808      	ldr	r0, [sp, #32]
 800958a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800958e:	f7ff fc0b 	bl	8008da8 <__locale_ctype_ptr_l>
 8009592:	4420      	add	r0, r4
 8009594:	7843      	ldrb	r3, [r0, #1]
 8009596:	f013 0308 	ands.w	r3, r3, #8
 800959a:	d132      	bne.n	8009602 <_strtol_l.isra.0+0x8a>
 800959c:	2c2d      	cmp	r4, #45	; 0x2d
 800959e:	d132      	bne.n	8009606 <_strtol_l.isra.0+0x8e>
 80095a0:	787c      	ldrb	r4, [r7, #1]
 80095a2:	1cbd      	adds	r5, r7, #2
 80095a4:	2201      	movs	r2, #1
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d05d      	beq.n	8009666 <_strtol_l.isra.0+0xee>
 80095aa:	2e10      	cmp	r6, #16
 80095ac:	d109      	bne.n	80095c2 <_strtol_l.isra.0+0x4a>
 80095ae:	2c30      	cmp	r4, #48	; 0x30
 80095b0:	d107      	bne.n	80095c2 <_strtol_l.isra.0+0x4a>
 80095b2:	782b      	ldrb	r3, [r5, #0]
 80095b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095b8:	2b58      	cmp	r3, #88	; 0x58
 80095ba:	d14f      	bne.n	800965c <_strtol_l.isra.0+0xe4>
 80095bc:	786c      	ldrb	r4, [r5, #1]
 80095be:	2610      	movs	r6, #16
 80095c0:	3502      	adds	r5, #2
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	bf14      	ite	ne
 80095c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80095ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80095ce:	2700      	movs	r7, #0
 80095d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80095d4:	4638      	mov	r0, r7
 80095d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80095da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d817      	bhi.n	8009612 <_strtol_l.isra.0+0x9a>
 80095e2:	461c      	mov	r4, r3
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	dd23      	ble.n	8009630 <_strtol_l.isra.0+0xb8>
 80095e8:	1c7b      	adds	r3, r7, #1
 80095ea:	d007      	beq.n	80095fc <_strtol_l.isra.0+0x84>
 80095ec:	4584      	cmp	ip, r0
 80095ee:	d31c      	bcc.n	800962a <_strtol_l.isra.0+0xb2>
 80095f0:	d101      	bne.n	80095f6 <_strtol_l.isra.0+0x7e>
 80095f2:	45a6      	cmp	lr, r4
 80095f4:	db19      	blt.n	800962a <_strtol_l.isra.0+0xb2>
 80095f6:	fb00 4006 	mla	r0, r0, r6, r4
 80095fa:	2701      	movs	r7, #1
 80095fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009600:	e7eb      	b.n	80095da <_strtol_l.isra.0+0x62>
 8009602:	462f      	mov	r7, r5
 8009604:	e7bf      	b.n	8009586 <_strtol_l.isra.0+0xe>
 8009606:	2c2b      	cmp	r4, #43	; 0x2b
 8009608:	bf04      	itt	eq
 800960a:	1cbd      	addeq	r5, r7, #2
 800960c:	787c      	ldrbeq	r4, [r7, #1]
 800960e:	461a      	mov	r2, r3
 8009610:	e7c9      	b.n	80095a6 <_strtol_l.isra.0+0x2e>
 8009612:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009616:	2b19      	cmp	r3, #25
 8009618:	d801      	bhi.n	800961e <_strtol_l.isra.0+0xa6>
 800961a:	3c37      	subs	r4, #55	; 0x37
 800961c:	e7e2      	b.n	80095e4 <_strtol_l.isra.0+0x6c>
 800961e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009622:	2b19      	cmp	r3, #25
 8009624:	d804      	bhi.n	8009630 <_strtol_l.isra.0+0xb8>
 8009626:	3c57      	subs	r4, #87	; 0x57
 8009628:	e7dc      	b.n	80095e4 <_strtol_l.isra.0+0x6c>
 800962a:	f04f 37ff 	mov.w	r7, #4294967295
 800962e:	e7e5      	b.n	80095fc <_strtol_l.isra.0+0x84>
 8009630:	1c7b      	adds	r3, r7, #1
 8009632:	d108      	bne.n	8009646 <_strtol_l.isra.0+0xce>
 8009634:	2322      	movs	r3, #34	; 0x22
 8009636:	f8c8 3000 	str.w	r3, [r8]
 800963a:	4608      	mov	r0, r1
 800963c:	f1ba 0f00 	cmp.w	sl, #0
 8009640:	d107      	bne.n	8009652 <_strtol_l.isra.0+0xda>
 8009642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009646:	b102      	cbz	r2, 800964a <_strtol_l.isra.0+0xd2>
 8009648:	4240      	negs	r0, r0
 800964a:	f1ba 0f00 	cmp.w	sl, #0
 800964e:	d0f8      	beq.n	8009642 <_strtol_l.isra.0+0xca>
 8009650:	b10f      	cbz	r7, 8009656 <_strtol_l.isra.0+0xde>
 8009652:	f105 39ff 	add.w	r9, r5, #4294967295
 8009656:	f8ca 9000 	str.w	r9, [sl]
 800965a:	e7f2      	b.n	8009642 <_strtol_l.isra.0+0xca>
 800965c:	2430      	movs	r4, #48	; 0x30
 800965e:	2e00      	cmp	r6, #0
 8009660:	d1af      	bne.n	80095c2 <_strtol_l.isra.0+0x4a>
 8009662:	2608      	movs	r6, #8
 8009664:	e7ad      	b.n	80095c2 <_strtol_l.isra.0+0x4a>
 8009666:	2c30      	cmp	r4, #48	; 0x30
 8009668:	d0a3      	beq.n	80095b2 <_strtol_l.isra.0+0x3a>
 800966a:	260a      	movs	r6, #10
 800966c:	e7a9      	b.n	80095c2 <_strtol_l.isra.0+0x4a>
	...

08009670 <strtol>:
 8009670:	4b08      	ldr	r3, [pc, #32]	; (8009694 <strtol+0x24>)
 8009672:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009674:	681c      	ldr	r4, [r3, #0]
 8009676:	4d08      	ldr	r5, [pc, #32]	; (8009698 <strtol+0x28>)
 8009678:	6a23      	ldr	r3, [r4, #32]
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf08      	it	eq
 800967e:	462b      	moveq	r3, r5
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	4613      	mov	r3, r2
 8009684:	460a      	mov	r2, r1
 8009686:	4601      	mov	r1, r0
 8009688:	4620      	mov	r0, r4
 800968a:	f7ff ff75 	bl	8009578 <_strtol_l.isra.0>
 800968e:	b003      	add	sp, #12
 8009690:	bd30      	pop	{r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	200002b8 	.word	0x200002b8
 8009698:	2000031c 	.word	0x2000031c

0800969c <viprintf>:
 800969c:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <viprintf+0x28>)
 800969e:	b570      	push	{r4, r5, r6, lr}
 80096a0:	681c      	ldr	r4, [r3, #0]
 80096a2:	4605      	mov	r5, r0
 80096a4:	460e      	mov	r6, r1
 80096a6:	b124      	cbz	r4, 80096b2 <viprintf+0x16>
 80096a8:	69a3      	ldr	r3, [r4, #24]
 80096aa:	b913      	cbnz	r3, 80096b2 <viprintf+0x16>
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 f9d1 	bl	8009a54 <__sinit>
 80096b2:	4633      	mov	r3, r6
 80096b4:	462a      	mov	r2, r5
 80096b6:	68a1      	ldr	r1, [r4, #8]
 80096b8:	4620      	mov	r0, r4
 80096ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096be:	f7ff bbe3 	b.w	8008e88 <_vfiprintf_r>
 80096c2:	bf00      	nop
 80096c4:	200002b8 	.word	0x200002b8

080096c8 <__swbuf_r>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	460e      	mov	r6, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	4605      	mov	r5, r0
 80096d0:	b118      	cbz	r0, 80096da <__swbuf_r+0x12>
 80096d2:	6983      	ldr	r3, [r0, #24]
 80096d4:	b90b      	cbnz	r3, 80096da <__swbuf_r+0x12>
 80096d6:	f000 f9bd 	bl	8009a54 <__sinit>
 80096da:	4b21      	ldr	r3, [pc, #132]	; (8009760 <__swbuf_r+0x98>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	d12a      	bne.n	8009736 <__swbuf_r+0x6e>
 80096e0:	686c      	ldr	r4, [r5, #4]
 80096e2:	69a3      	ldr	r3, [r4, #24]
 80096e4:	60a3      	str	r3, [r4, #8]
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	071a      	lsls	r2, r3, #28
 80096ea:	d52e      	bpl.n	800974a <__swbuf_r+0x82>
 80096ec:	6923      	ldr	r3, [r4, #16]
 80096ee:	b363      	cbz	r3, 800974a <__swbuf_r+0x82>
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	6820      	ldr	r0, [r4, #0]
 80096f4:	1ac0      	subs	r0, r0, r3
 80096f6:	6963      	ldr	r3, [r4, #20]
 80096f8:	b2f6      	uxtb	r6, r6
 80096fa:	4283      	cmp	r3, r0
 80096fc:	4637      	mov	r7, r6
 80096fe:	dc04      	bgt.n	800970a <__swbuf_r+0x42>
 8009700:	4621      	mov	r1, r4
 8009702:	4628      	mov	r0, r5
 8009704:	f000 f93c 	bl	8009980 <_fflush_r>
 8009708:	bb28      	cbnz	r0, 8009756 <__swbuf_r+0x8e>
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	3b01      	subs	r3, #1
 800970e:	60a3      	str	r3, [r4, #8]
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	6022      	str	r2, [r4, #0]
 8009716:	701e      	strb	r6, [r3, #0]
 8009718:	6963      	ldr	r3, [r4, #20]
 800971a:	3001      	adds	r0, #1
 800971c:	4283      	cmp	r3, r0
 800971e:	d004      	beq.n	800972a <__swbuf_r+0x62>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	07db      	lsls	r3, r3, #31
 8009724:	d519      	bpl.n	800975a <__swbuf_r+0x92>
 8009726:	2e0a      	cmp	r6, #10
 8009728:	d117      	bne.n	800975a <__swbuf_r+0x92>
 800972a:	4621      	mov	r1, r4
 800972c:	4628      	mov	r0, r5
 800972e:	f000 f927 	bl	8009980 <_fflush_r>
 8009732:	b190      	cbz	r0, 800975a <__swbuf_r+0x92>
 8009734:	e00f      	b.n	8009756 <__swbuf_r+0x8e>
 8009736:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <__swbuf_r+0x9c>)
 8009738:	429c      	cmp	r4, r3
 800973a:	d101      	bne.n	8009740 <__swbuf_r+0x78>
 800973c:	68ac      	ldr	r4, [r5, #8]
 800973e:	e7d0      	b.n	80096e2 <__swbuf_r+0x1a>
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <__swbuf_r+0xa0>)
 8009742:	429c      	cmp	r4, r3
 8009744:	bf08      	it	eq
 8009746:	68ec      	ldreq	r4, [r5, #12]
 8009748:	e7cb      	b.n	80096e2 <__swbuf_r+0x1a>
 800974a:	4621      	mov	r1, r4
 800974c:	4628      	mov	r0, r5
 800974e:	f000 f81b 	bl	8009788 <__swsetup_r>
 8009752:	2800      	cmp	r0, #0
 8009754:	d0cc      	beq.n	80096f0 <__swbuf_r+0x28>
 8009756:	f04f 37ff 	mov.w	r7, #4294967295
 800975a:	4638      	mov	r0, r7
 800975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975e:	bf00      	nop
 8009760:	0800b808 	.word	0x0800b808
 8009764:	0800b828 	.word	0x0800b828
 8009768:	0800b7e8 	.word	0x0800b7e8

0800976c <__ascii_wctomb>:
 800976c:	b149      	cbz	r1, 8009782 <__ascii_wctomb+0x16>
 800976e:	2aff      	cmp	r2, #255	; 0xff
 8009770:	bf85      	ittet	hi
 8009772:	238a      	movhi	r3, #138	; 0x8a
 8009774:	6003      	strhi	r3, [r0, #0]
 8009776:	700a      	strbls	r2, [r1, #0]
 8009778:	f04f 30ff 	movhi.w	r0, #4294967295
 800977c:	bf98      	it	ls
 800977e:	2001      	movls	r0, #1
 8009780:	4770      	bx	lr
 8009782:	4608      	mov	r0, r1
 8009784:	4770      	bx	lr
	...

08009788 <__swsetup_r>:
 8009788:	4b32      	ldr	r3, [pc, #200]	; (8009854 <__swsetup_r+0xcc>)
 800978a:	b570      	push	{r4, r5, r6, lr}
 800978c:	681d      	ldr	r5, [r3, #0]
 800978e:	4606      	mov	r6, r0
 8009790:	460c      	mov	r4, r1
 8009792:	b125      	cbz	r5, 800979e <__swsetup_r+0x16>
 8009794:	69ab      	ldr	r3, [r5, #24]
 8009796:	b913      	cbnz	r3, 800979e <__swsetup_r+0x16>
 8009798:	4628      	mov	r0, r5
 800979a:	f000 f95b 	bl	8009a54 <__sinit>
 800979e:	4b2e      	ldr	r3, [pc, #184]	; (8009858 <__swsetup_r+0xd0>)
 80097a0:	429c      	cmp	r4, r3
 80097a2:	d10f      	bne.n	80097c4 <__swsetup_r+0x3c>
 80097a4:	686c      	ldr	r4, [r5, #4]
 80097a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	0715      	lsls	r5, r2, #28
 80097ae:	d42c      	bmi.n	800980a <__swsetup_r+0x82>
 80097b0:	06d0      	lsls	r0, r2, #27
 80097b2:	d411      	bmi.n	80097d8 <__swsetup_r+0x50>
 80097b4:	2209      	movs	r2, #9
 80097b6:	6032      	str	r2, [r6, #0]
 80097b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	f04f 30ff 	mov.w	r0, #4294967295
 80097c2:	e03e      	b.n	8009842 <__swsetup_r+0xba>
 80097c4:	4b25      	ldr	r3, [pc, #148]	; (800985c <__swsetup_r+0xd4>)
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d101      	bne.n	80097ce <__swsetup_r+0x46>
 80097ca:	68ac      	ldr	r4, [r5, #8]
 80097cc:	e7eb      	b.n	80097a6 <__swsetup_r+0x1e>
 80097ce:	4b24      	ldr	r3, [pc, #144]	; (8009860 <__swsetup_r+0xd8>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	bf08      	it	eq
 80097d4:	68ec      	ldreq	r4, [r5, #12]
 80097d6:	e7e6      	b.n	80097a6 <__swsetup_r+0x1e>
 80097d8:	0751      	lsls	r1, r2, #29
 80097da:	d512      	bpl.n	8009802 <__swsetup_r+0x7a>
 80097dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097de:	b141      	cbz	r1, 80097f2 <__swsetup_r+0x6a>
 80097e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e4:	4299      	cmp	r1, r3
 80097e6:	d002      	beq.n	80097ee <__swsetup_r+0x66>
 80097e8:	4630      	mov	r0, r6
 80097ea:	f000 fa43 	bl	8009c74 <_free_r>
 80097ee:	2300      	movs	r3, #0
 80097f0:	6363      	str	r3, [r4, #52]	; 0x34
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	2300      	movs	r3, #0
 80097fc:	6063      	str	r3, [r4, #4]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f043 0308 	orr.w	r3, r3, #8
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	b94b      	cbnz	r3, 8009822 <__swsetup_r+0x9a>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009818:	d003      	beq.n	8009822 <__swsetup_r+0x9a>
 800981a:	4621      	mov	r1, r4
 800981c:	4630      	mov	r0, r6
 800981e:	f000 f9c7 	bl	8009bb0 <__smakebuf_r>
 8009822:	89a2      	ldrh	r2, [r4, #12]
 8009824:	f012 0301 	ands.w	r3, r2, #1
 8009828:	d00c      	beq.n	8009844 <__swsetup_r+0xbc>
 800982a:	2300      	movs	r3, #0
 800982c:	60a3      	str	r3, [r4, #8]
 800982e:	6963      	ldr	r3, [r4, #20]
 8009830:	425b      	negs	r3, r3
 8009832:	61a3      	str	r3, [r4, #24]
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	b953      	cbnz	r3, 800984e <__swsetup_r+0xc6>
 8009838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800983c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009840:	d1ba      	bne.n	80097b8 <__swsetup_r+0x30>
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	0792      	lsls	r2, r2, #30
 8009846:	bf58      	it	pl
 8009848:	6963      	ldrpl	r3, [r4, #20]
 800984a:	60a3      	str	r3, [r4, #8]
 800984c:	e7f2      	b.n	8009834 <__swsetup_r+0xac>
 800984e:	2000      	movs	r0, #0
 8009850:	e7f7      	b.n	8009842 <__swsetup_r+0xba>
 8009852:	bf00      	nop
 8009854:	200002b8 	.word	0x200002b8
 8009858:	0800b808 	.word	0x0800b808
 800985c:	0800b828 	.word	0x0800b828
 8009860:	0800b7e8 	.word	0x0800b7e8

08009864 <abort>:
 8009864:	b508      	push	{r3, lr}
 8009866:	2006      	movs	r0, #6
 8009868:	f000 fc5c 	bl	800a124 <raise>
 800986c:	2001      	movs	r0, #1
 800986e:	f7fd fead 	bl	80075cc <_exit>
	...

08009874 <__sflush_r>:
 8009874:	898a      	ldrh	r2, [r1, #12]
 8009876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987a:	4605      	mov	r5, r0
 800987c:	0710      	lsls	r0, r2, #28
 800987e:	460c      	mov	r4, r1
 8009880:	d458      	bmi.n	8009934 <__sflush_r+0xc0>
 8009882:	684b      	ldr	r3, [r1, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	dc05      	bgt.n	8009894 <__sflush_r+0x20>
 8009888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	dc02      	bgt.n	8009894 <__sflush_r+0x20>
 800988e:	2000      	movs	r0, #0
 8009890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009896:	2e00      	cmp	r6, #0
 8009898:	d0f9      	beq.n	800988e <__sflush_r+0x1a>
 800989a:	2300      	movs	r3, #0
 800989c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098a0:	682f      	ldr	r7, [r5, #0]
 80098a2:	6a21      	ldr	r1, [r4, #32]
 80098a4:	602b      	str	r3, [r5, #0]
 80098a6:	d032      	beq.n	800990e <__sflush_r+0x9a>
 80098a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	075a      	lsls	r2, r3, #29
 80098ae:	d505      	bpl.n	80098bc <__sflush_r+0x48>
 80098b0:	6863      	ldr	r3, [r4, #4]
 80098b2:	1ac0      	subs	r0, r0, r3
 80098b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b6:	b10b      	cbz	r3, 80098bc <__sflush_r+0x48>
 80098b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ba:	1ac0      	subs	r0, r0, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	4602      	mov	r2, r0
 80098c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098c2:	6a21      	ldr	r1, [r4, #32]
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b0      	blx	r6
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	d106      	bne.n	80098dc <__sflush_r+0x68>
 80098ce:	6829      	ldr	r1, [r5, #0]
 80098d0:	291d      	cmp	r1, #29
 80098d2:	d848      	bhi.n	8009966 <__sflush_r+0xf2>
 80098d4:	4a29      	ldr	r2, [pc, #164]	; (800997c <__sflush_r+0x108>)
 80098d6:	40ca      	lsrs	r2, r1
 80098d8:	07d6      	lsls	r6, r2, #31
 80098da:	d544      	bpl.n	8009966 <__sflush_r+0xf2>
 80098dc:	2200      	movs	r2, #0
 80098de:	6062      	str	r2, [r4, #4]
 80098e0:	04d9      	lsls	r1, r3, #19
 80098e2:	6922      	ldr	r2, [r4, #16]
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	d504      	bpl.n	80098f2 <__sflush_r+0x7e>
 80098e8:	1c42      	adds	r2, r0, #1
 80098ea:	d101      	bne.n	80098f0 <__sflush_r+0x7c>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b903      	cbnz	r3, 80098f2 <__sflush_r+0x7e>
 80098f0:	6560      	str	r0, [r4, #84]	; 0x54
 80098f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f4:	602f      	str	r7, [r5, #0]
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d0c9      	beq.n	800988e <__sflush_r+0x1a>
 80098fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098fe:	4299      	cmp	r1, r3
 8009900:	d002      	beq.n	8009908 <__sflush_r+0x94>
 8009902:	4628      	mov	r0, r5
 8009904:	f000 f9b6 	bl	8009c74 <_free_r>
 8009908:	2000      	movs	r0, #0
 800990a:	6360      	str	r0, [r4, #52]	; 0x34
 800990c:	e7c0      	b.n	8009890 <__sflush_r+0x1c>
 800990e:	2301      	movs	r3, #1
 8009910:	4628      	mov	r0, r5
 8009912:	47b0      	blx	r6
 8009914:	1c41      	adds	r1, r0, #1
 8009916:	d1c8      	bne.n	80098aa <__sflush_r+0x36>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0c5      	beq.n	80098aa <__sflush_r+0x36>
 800991e:	2b1d      	cmp	r3, #29
 8009920:	d001      	beq.n	8009926 <__sflush_r+0xb2>
 8009922:	2b16      	cmp	r3, #22
 8009924:	d101      	bne.n	800992a <__sflush_r+0xb6>
 8009926:	602f      	str	r7, [r5, #0]
 8009928:	e7b1      	b.n	800988e <__sflush_r+0x1a>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	e7ad      	b.n	8009890 <__sflush_r+0x1c>
 8009934:	690f      	ldr	r7, [r1, #16]
 8009936:	2f00      	cmp	r7, #0
 8009938:	d0a9      	beq.n	800988e <__sflush_r+0x1a>
 800993a:	0793      	lsls	r3, r2, #30
 800993c:	680e      	ldr	r6, [r1, #0]
 800993e:	bf08      	it	eq
 8009940:	694b      	ldreq	r3, [r1, #20]
 8009942:	600f      	str	r7, [r1, #0]
 8009944:	bf18      	it	ne
 8009946:	2300      	movne	r3, #0
 8009948:	eba6 0807 	sub.w	r8, r6, r7
 800994c:	608b      	str	r3, [r1, #8]
 800994e:	f1b8 0f00 	cmp.w	r8, #0
 8009952:	dd9c      	ble.n	800988e <__sflush_r+0x1a>
 8009954:	4643      	mov	r3, r8
 8009956:	463a      	mov	r2, r7
 8009958:	6a21      	ldr	r1, [r4, #32]
 800995a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800995c:	4628      	mov	r0, r5
 800995e:	47b0      	blx	r6
 8009960:	2800      	cmp	r0, #0
 8009962:	dc06      	bgt.n	8009972 <__sflush_r+0xfe>
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	e78e      	b.n	8009890 <__sflush_r+0x1c>
 8009972:	4407      	add	r7, r0
 8009974:	eba8 0800 	sub.w	r8, r8, r0
 8009978:	e7e9      	b.n	800994e <__sflush_r+0xda>
 800997a:	bf00      	nop
 800997c:	20400001 	.word	0x20400001

08009980 <_fflush_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	690b      	ldr	r3, [r1, #16]
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b1db      	cbz	r3, 80099c2 <_fflush_r+0x42>
 800998a:	b118      	cbz	r0, 8009994 <_fflush_r+0x14>
 800998c:	6983      	ldr	r3, [r0, #24]
 800998e:	b90b      	cbnz	r3, 8009994 <_fflush_r+0x14>
 8009990:	f000 f860 	bl	8009a54 <__sinit>
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <_fflush_r+0x48>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d109      	bne.n	80099ae <_fflush_r+0x2e>
 800999a:	686c      	ldr	r4, [r5, #4]
 800999c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a0:	b17b      	cbz	r3, 80099c2 <_fflush_r+0x42>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4628      	mov	r0, r5
 80099a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099aa:	f7ff bf63 	b.w	8009874 <__sflush_r>
 80099ae:	4b07      	ldr	r3, [pc, #28]	; (80099cc <_fflush_r+0x4c>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d101      	bne.n	80099b8 <_fflush_r+0x38>
 80099b4:	68ac      	ldr	r4, [r5, #8]
 80099b6:	e7f1      	b.n	800999c <_fflush_r+0x1c>
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <_fflush_r+0x50>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	bf08      	it	eq
 80099be:	68ec      	ldreq	r4, [r5, #12]
 80099c0:	e7ec      	b.n	800999c <_fflush_r+0x1c>
 80099c2:	2000      	movs	r0, #0
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	0800b808 	.word	0x0800b808
 80099cc:	0800b828 	.word	0x0800b828
 80099d0:	0800b7e8 	.word	0x0800b7e8

080099d4 <std>:
 80099d4:	2300      	movs	r3, #0
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	e9c0 3300 	strd	r3, r3, [r0]
 80099de:	6083      	str	r3, [r0, #8]
 80099e0:	8181      	strh	r1, [r0, #12]
 80099e2:	6643      	str	r3, [r0, #100]	; 0x64
 80099e4:	81c2      	strh	r2, [r0, #14]
 80099e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ea:	6183      	str	r3, [r0, #24]
 80099ec:	4619      	mov	r1, r3
 80099ee:	2208      	movs	r2, #8
 80099f0:	305c      	adds	r0, #92	; 0x5c
 80099f2:	f7ff fa17 	bl	8008e24 <memset>
 80099f6:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <std+0x38>)
 80099f8:	6263      	str	r3, [r4, #36]	; 0x24
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <std+0x3c>)
 80099fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <std+0x40>)
 8009a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a02:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <std+0x44>)
 8009a04:	6224      	str	r4, [r4, #32]
 8009a06:	6323      	str	r3, [r4, #48]	; 0x30
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800a15d 	.word	0x0800a15d
 8009a10:	0800a17f 	.word	0x0800a17f
 8009a14:	0800a1b7 	.word	0x0800a1b7
 8009a18:	0800a1db 	.word	0x0800a1db

08009a1c <_cleanup_r>:
 8009a1c:	4901      	ldr	r1, [pc, #4]	; (8009a24 <_cleanup_r+0x8>)
 8009a1e:	f000 b885 	b.w	8009b2c <_fwalk_reent>
 8009a22:	bf00      	nop
 8009a24:	08009981 	.word	0x08009981

08009a28 <__sfmoreglue>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	1e4a      	subs	r2, r1, #1
 8009a2c:	2568      	movs	r5, #104	; 0x68
 8009a2e:	4355      	muls	r5, r2
 8009a30:	460e      	mov	r6, r1
 8009a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a36:	f000 f96b 	bl	8009d10 <_malloc_r>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	b140      	cbz	r0, 8009a50 <__sfmoreglue+0x28>
 8009a3e:	2100      	movs	r1, #0
 8009a40:	e9c0 1600 	strd	r1, r6, [r0]
 8009a44:	300c      	adds	r0, #12
 8009a46:	60a0      	str	r0, [r4, #8]
 8009a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a4c:	f7ff f9ea 	bl	8008e24 <memset>
 8009a50:	4620      	mov	r0, r4
 8009a52:	bd70      	pop	{r4, r5, r6, pc}

08009a54 <__sinit>:
 8009a54:	6983      	ldr	r3, [r0, #24]
 8009a56:	b510      	push	{r4, lr}
 8009a58:	4604      	mov	r4, r0
 8009a5a:	bb33      	cbnz	r3, 8009aaa <__sinit+0x56>
 8009a5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009a60:	6503      	str	r3, [r0, #80]	; 0x50
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <__sinit+0x58>)
 8009a64:	4a12      	ldr	r2, [pc, #72]	; (8009ab0 <__sinit+0x5c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6282      	str	r2, [r0, #40]	; 0x28
 8009a6a:	4298      	cmp	r0, r3
 8009a6c:	bf04      	itt	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	6183      	streq	r3, [r0, #24]
 8009a72:	f000 f81f 	bl	8009ab4 <__sfp>
 8009a76:	6060      	str	r0, [r4, #4]
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 f81b 	bl	8009ab4 <__sfp>
 8009a7e:	60a0      	str	r0, [r4, #8]
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 f817 	bl	8009ab4 <__sfp>
 8009a86:	2200      	movs	r2, #0
 8009a88:	60e0      	str	r0, [r4, #12]
 8009a8a:	2104      	movs	r1, #4
 8009a8c:	6860      	ldr	r0, [r4, #4]
 8009a8e:	f7ff ffa1 	bl	80099d4 <std>
 8009a92:	2201      	movs	r2, #1
 8009a94:	2109      	movs	r1, #9
 8009a96:	68a0      	ldr	r0, [r4, #8]
 8009a98:	f7ff ff9c 	bl	80099d4 <std>
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	2112      	movs	r1, #18
 8009aa0:	68e0      	ldr	r0, [r4, #12]
 8009aa2:	f7ff ff97 	bl	80099d4 <std>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	61a3      	str	r3, [r4, #24]
 8009aaa:	bd10      	pop	{r4, pc}
 8009aac:	0800b6a8 	.word	0x0800b6a8
 8009ab0:	08009a1d 	.word	0x08009a1d

08009ab4 <__sfp>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	4b1b      	ldr	r3, [pc, #108]	; (8009b24 <__sfp+0x70>)
 8009ab8:	681e      	ldr	r6, [r3, #0]
 8009aba:	69b3      	ldr	r3, [r6, #24]
 8009abc:	4607      	mov	r7, r0
 8009abe:	b913      	cbnz	r3, 8009ac6 <__sfp+0x12>
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7ff ffc7 	bl	8009a54 <__sinit>
 8009ac6:	3648      	adds	r6, #72	; 0x48
 8009ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	d503      	bpl.n	8009ad8 <__sfp+0x24>
 8009ad0:	6833      	ldr	r3, [r6, #0]
 8009ad2:	b133      	cbz	r3, 8009ae2 <__sfp+0x2e>
 8009ad4:	6836      	ldr	r6, [r6, #0]
 8009ad6:	e7f7      	b.n	8009ac8 <__sfp+0x14>
 8009ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009adc:	b16d      	cbz	r5, 8009afa <__sfp+0x46>
 8009ade:	3468      	adds	r4, #104	; 0x68
 8009ae0:	e7f4      	b.n	8009acc <__sfp+0x18>
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7ff ff9f 	bl	8009a28 <__sfmoreglue>
 8009aea:	6030      	str	r0, [r6, #0]
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d1f1      	bne.n	8009ad4 <__sfp+0x20>
 8009af0:	230c      	movs	r3, #12
 8009af2:	603b      	str	r3, [r7, #0]
 8009af4:	4604      	mov	r4, r0
 8009af6:	4620      	mov	r0, r4
 8009af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <__sfp+0x74>)
 8009afc:	6665      	str	r5, [r4, #100]	; 0x64
 8009afe:	e9c4 5500 	strd	r5, r5, [r4]
 8009b02:	60a5      	str	r5, [r4, #8]
 8009b04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009b08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009b0c:	2208      	movs	r2, #8
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b14:	f7ff f986 	bl	8008e24 <memset>
 8009b18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b20:	e7e9      	b.n	8009af6 <__sfp+0x42>
 8009b22:	bf00      	nop
 8009b24:	0800b6a8 	.word	0x0800b6a8
 8009b28:	ffff0001 	.word	0xffff0001

08009b2c <_fwalk_reent>:
 8009b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b38:	2600      	movs	r6, #0
 8009b3a:	b914      	cbnz	r4, 8009b42 <_fwalk_reent+0x16>
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009b46:	3f01      	subs	r7, #1
 8009b48:	d501      	bpl.n	8009b4e <_fwalk_reent+0x22>
 8009b4a:	6824      	ldr	r4, [r4, #0]
 8009b4c:	e7f5      	b.n	8009b3a <_fwalk_reent+0xe>
 8009b4e:	89ab      	ldrh	r3, [r5, #12]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d907      	bls.n	8009b64 <_fwalk_reent+0x38>
 8009b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	d003      	beq.n	8009b64 <_fwalk_reent+0x38>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4640      	mov	r0, r8
 8009b60:	47c8      	blx	r9
 8009b62:	4306      	orrs	r6, r0
 8009b64:	3568      	adds	r5, #104	; 0x68
 8009b66:	e7ee      	b.n	8009b46 <_fwalk_reent+0x1a>

08009b68 <__swhatbuf_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	460e      	mov	r6, r1
 8009b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b70:	2900      	cmp	r1, #0
 8009b72:	b096      	sub	sp, #88	; 0x58
 8009b74:	4614      	mov	r4, r2
 8009b76:	461d      	mov	r5, r3
 8009b78:	da07      	bge.n	8009b8a <__swhatbuf_r+0x22>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	89b3      	ldrh	r3, [r6, #12]
 8009b80:	061a      	lsls	r2, r3, #24
 8009b82:	d410      	bmi.n	8009ba6 <__swhatbuf_r+0x3e>
 8009b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b88:	e00e      	b.n	8009ba8 <__swhatbuf_r+0x40>
 8009b8a:	466a      	mov	r2, sp
 8009b8c:	f000 fb4c 	bl	800a228 <_fstat_r>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dbf2      	blt.n	8009b7a <__swhatbuf_r+0x12>
 8009b94:	9a01      	ldr	r2, [sp, #4]
 8009b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b9e:	425a      	negs	r2, r3
 8009ba0:	415a      	adcs	r2, r3
 8009ba2:	602a      	str	r2, [r5, #0]
 8009ba4:	e7ee      	b.n	8009b84 <__swhatbuf_r+0x1c>
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	2000      	movs	r0, #0
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	b016      	add	sp, #88	; 0x58
 8009bae:	bd70      	pop	{r4, r5, r6, pc}

08009bb0 <__smakebuf_r>:
 8009bb0:	898b      	ldrh	r3, [r1, #12]
 8009bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bb4:	079d      	lsls	r5, r3, #30
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	460c      	mov	r4, r1
 8009bba:	d507      	bpl.n	8009bcc <__smakebuf_r+0x1c>
 8009bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	6163      	str	r3, [r4, #20]
 8009bc8:	b002      	add	sp, #8
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	ab01      	add	r3, sp, #4
 8009bce:	466a      	mov	r2, sp
 8009bd0:	f7ff ffca 	bl	8009b68 <__swhatbuf_r>
 8009bd4:	9900      	ldr	r1, [sp, #0]
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 f899 	bl	8009d10 <_malloc_r>
 8009bde:	b948      	cbnz	r0, 8009bf4 <__smakebuf_r+0x44>
 8009be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be4:	059a      	lsls	r2, r3, #22
 8009be6:	d4ef      	bmi.n	8009bc8 <__smakebuf_r+0x18>
 8009be8:	f023 0303 	bic.w	r3, r3, #3
 8009bec:	f043 0302 	orr.w	r3, r3, #2
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	e7e3      	b.n	8009bbc <__smakebuf_r+0xc>
 8009bf4:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <__smakebuf_r+0x7c>)
 8009bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	6120      	str	r0, [r4, #16]
 8009c0a:	b15b      	cbz	r3, 8009c24 <__smakebuf_r+0x74>
 8009c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 fb1b 	bl	800a24c <_isatty_r>
 8009c16:	b128      	cbz	r0, 8009c24 <__smakebuf_r+0x74>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	431d      	orrs	r5, r3
 8009c28:	81a5      	strh	r5, [r4, #12]
 8009c2a:	e7cd      	b.n	8009bc8 <__smakebuf_r+0x18>
 8009c2c:	08009a1d 	.word	0x08009a1d

08009c30 <malloc>:
 8009c30:	4b02      	ldr	r3, [pc, #8]	; (8009c3c <malloc+0xc>)
 8009c32:	4601      	mov	r1, r0
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	f000 b86b 	b.w	8009d10 <_malloc_r>
 8009c3a:	bf00      	nop
 8009c3c:	200002b8 	.word	0x200002b8

08009c40 <memmove>:
 8009c40:	4288      	cmp	r0, r1
 8009c42:	b510      	push	{r4, lr}
 8009c44:	eb01 0302 	add.w	r3, r1, r2
 8009c48:	d807      	bhi.n	8009c5a <memmove+0x1a>
 8009c4a:	1e42      	subs	r2, r0, #1
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d00a      	beq.n	8009c66 <memmove+0x26>
 8009c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c58:	e7f8      	b.n	8009c4c <memmove+0xc>
 8009c5a:	4283      	cmp	r3, r0
 8009c5c:	d9f5      	bls.n	8009c4a <memmove+0xa>
 8009c5e:	1881      	adds	r1, r0, r2
 8009c60:	1ad2      	subs	r2, r2, r3
 8009c62:	42d3      	cmn	r3, r2
 8009c64:	d100      	bne.n	8009c68 <memmove+0x28>
 8009c66:	bd10      	pop	{r4, pc}
 8009c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c70:	e7f7      	b.n	8009c62 <memmove+0x22>
	...

08009c74 <_free_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4605      	mov	r5, r0
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	d045      	beq.n	8009d08 <_free_r+0x94>
 8009c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c80:	1f0c      	subs	r4, r1, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfb8      	it	lt
 8009c86:	18e4      	addlt	r4, r4, r3
 8009c88:	f000 fb02 	bl	800a290 <__malloc_lock>
 8009c8c:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <_free_r+0x98>)
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	4610      	mov	r0, r2
 8009c92:	b933      	cbnz	r3, 8009ca2 <_free_r+0x2e>
 8009c94:	6063      	str	r3, [r4, #4]
 8009c96:	6014      	str	r4, [r2, #0]
 8009c98:	4628      	mov	r0, r5
 8009c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9e:	f000 baf8 	b.w	800a292 <__malloc_unlock>
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	d90c      	bls.n	8009cc0 <_free_r+0x4c>
 8009ca6:	6821      	ldr	r1, [r4, #0]
 8009ca8:	1862      	adds	r2, r4, r1
 8009caa:	4293      	cmp	r3, r2
 8009cac:	bf04      	itt	eq
 8009cae:	681a      	ldreq	r2, [r3, #0]
 8009cb0:	685b      	ldreq	r3, [r3, #4]
 8009cb2:	6063      	str	r3, [r4, #4]
 8009cb4:	bf04      	itt	eq
 8009cb6:	1852      	addeq	r2, r2, r1
 8009cb8:	6022      	streq	r2, [r4, #0]
 8009cba:	6004      	str	r4, [r0, #0]
 8009cbc:	e7ec      	b.n	8009c98 <_free_r+0x24>
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	b10a      	cbz	r2, 8009cc8 <_free_r+0x54>
 8009cc4:	42a2      	cmp	r2, r4
 8009cc6:	d9fa      	bls.n	8009cbe <_free_r+0x4a>
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	1858      	adds	r0, r3, r1
 8009ccc:	42a0      	cmp	r0, r4
 8009cce:	d10b      	bne.n	8009ce8 <_free_r+0x74>
 8009cd0:	6820      	ldr	r0, [r4, #0]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	1858      	adds	r0, r3, r1
 8009cd6:	4282      	cmp	r2, r0
 8009cd8:	6019      	str	r1, [r3, #0]
 8009cda:	d1dd      	bne.n	8009c98 <_free_r+0x24>
 8009cdc:	6810      	ldr	r0, [r2, #0]
 8009cde:	6852      	ldr	r2, [r2, #4]
 8009ce0:	605a      	str	r2, [r3, #4]
 8009ce2:	4401      	add	r1, r0
 8009ce4:	6019      	str	r1, [r3, #0]
 8009ce6:	e7d7      	b.n	8009c98 <_free_r+0x24>
 8009ce8:	d902      	bls.n	8009cf0 <_free_r+0x7c>
 8009cea:	230c      	movs	r3, #12
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	e7d3      	b.n	8009c98 <_free_r+0x24>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	1821      	adds	r1, r4, r0
 8009cf4:	428a      	cmp	r2, r1
 8009cf6:	bf04      	itt	eq
 8009cf8:	6811      	ldreq	r1, [r2, #0]
 8009cfa:	6852      	ldreq	r2, [r2, #4]
 8009cfc:	6062      	str	r2, [r4, #4]
 8009cfe:	bf04      	itt	eq
 8009d00:	1809      	addeq	r1, r1, r0
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	605c      	str	r4, [r3, #4]
 8009d06:	e7c7      	b.n	8009c98 <_free_r+0x24>
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20014db8 	.word	0x20014db8

08009d10 <_malloc_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	1ccd      	adds	r5, r1, #3
 8009d14:	f025 0503 	bic.w	r5, r5, #3
 8009d18:	3508      	adds	r5, #8
 8009d1a:	2d0c      	cmp	r5, #12
 8009d1c:	bf38      	it	cc
 8009d1e:	250c      	movcc	r5, #12
 8009d20:	2d00      	cmp	r5, #0
 8009d22:	4606      	mov	r6, r0
 8009d24:	db01      	blt.n	8009d2a <_malloc_r+0x1a>
 8009d26:	42a9      	cmp	r1, r5
 8009d28:	d903      	bls.n	8009d32 <_malloc_r+0x22>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	6033      	str	r3, [r6, #0]
 8009d2e:	2000      	movs	r0, #0
 8009d30:	bd70      	pop	{r4, r5, r6, pc}
 8009d32:	f000 faad 	bl	800a290 <__malloc_lock>
 8009d36:	4a21      	ldr	r2, [pc, #132]	; (8009dbc <_malloc_r+0xac>)
 8009d38:	6814      	ldr	r4, [r2, #0]
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	b991      	cbnz	r1, 8009d64 <_malloc_r+0x54>
 8009d3e:	4c20      	ldr	r4, [pc, #128]	; (8009dc0 <_malloc_r+0xb0>)
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	b91b      	cbnz	r3, 8009d4c <_malloc_r+0x3c>
 8009d44:	4630      	mov	r0, r6
 8009d46:	f000 f9b5 	bl	800a0b4 <_sbrk_r>
 8009d4a:	6020      	str	r0, [r4, #0]
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f9b0 	bl	800a0b4 <_sbrk_r>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d124      	bne.n	8009da2 <_malloc_r+0x92>
 8009d58:	230c      	movs	r3, #12
 8009d5a:	6033      	str	r3, [r6, #0]
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 fa98 	bl	800a292 <__malloc_unlock>
 8009d62:	e7e4      	b.n	8009d2e <_malloc_r+0x1e>
 8009d64:	680b      	ldr	r3, [r1, #0]
 8009d66:	1b5b      	subs	r3, r3, r5
 8009d68:	d418      	bmi.n	8009d9c <_malloc_r+0x8c>
 8009d6a:	2b0b      	cmp	r3, #11
 8009d6c:	d90f      	bls.n	8009d8e <_malloc_r+0x7e>
 8009d6e:	600b      	str	r3, [r1, #0]
 8009d70:	50cd      	str	r5, [r1, r3]
 8009d72:	18cc      	adds	r4, r1, r3
 8009d74:	4630      	mov	r0, r6
 8009d76:	f000 fa8c 	bl	800a292 <__malloc_unlock>
 8009d7a:	f104 000b 	add.w	r0, r4, #11
 8009d7e:	1d23      	adds	r3, r4, #4
 8009d80:	f020 0007 	bic.w	r0, r0, #7
 8009d84:	1ac3      	subs	r3, r0, r3
 8009d86:	d0d3      	beq.n	8009d30 <_malloc_r+0x20>
 8009d88:	425a      	negs	r2, r3
 8009d8a:	50e2      	str	r2, [r4, r3]
 8009d8c:	e7d0      	b.n	8009d30 <_malloc_r+0x20>
 8009d8e:	428c      	cmp	r4, r1
 8009d90:	684b      	ldr	r3, [r1, #4]
 8009d92:	bf16      	itet	ne
 8009d94:	6063      	strne	r3, [r4, #4]
 8009d96:	6013      	streq	r3, [r2, #0]
 8009d98:	460c      	movne	r4, r1
 8009d9a:	e7eb      	b.n	8009d74 <_malloc_r+0x64>
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	6849      	ldr	r1, [r1, #4]
 8009da0:	e7cc      	b.n	8009d3c <_malloc_r+0x2c>
 8009da2:	1cc4      	adds	r4, r0, #3
 8009da4:	f024 0403 	bic.w	r4, r4, #3
 8009da8:	42a0      	cmp	r0, r4
 8009daa:	d005      	beq.n	8009db8 <_malloc_r+0xa8>
 8009dac:	1a21      	subs	r1, r4, r0
 8009dae:	4630      	mov	r0, r6
 8009db0:	f000 f980 	bl	800a0b4 <_sbrk_r>
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0cf      	beq.n	8009d58 <_malloc_r+0x48>
 8009db8:	6025      	str	r5, [r4, #0]
 8009dba:	e7db      	b.n	8009d74 <_malloc_r+0x64>
 8009dbc:	20014db8 	.word	0x20014db8
 8009dc0:	20014dbc 	.word	0x20014dbc

08009dc4 <_realloc_r>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	4614      	mov	r4, r2
 8009dca:	460e      	mov	r6, r1
 8009dcc:	b921      	cbnz	r1, 8009dd8 <_realloc_r+0x14>
 8009dce:	4611      	mov	r1, r2
 8009dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009dd4:	f7ff bf9c 	b.w	8009d10 <_malloc_r>
 8009dd8:	b922      	cbnz	r2, 8009de4 <_realloc_r+0x20>
 8009dda:	f7ff ff4b 	bl	8009c74 <_free_r>
 8009dde:	4625      	mov	r5, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de4:	f000 fa56 	bl	800a294 <_malloc_usable_size_r>
 8009de8:	42a0      	cmp	r0, r4
 8009dea:	d20f      	bcs.n	8009e0c <_realloc_r+0x48>
 8009dec:	4621      	mov	r1, r4
 8009dee:	4638      	mov	r0, r7
 8009df0:	f7ff ff8e 	bl	8009d10 <_malloc_r>
 8009df4:	4605      	mov	r5, r0
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d0f2      	beq.n	8009de0 <_realloc_r+0x1c>
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	f7ff f806 	bl	8008e0e <memcpy>
 8009e02:	4631      	mov	r1, r6
 8009e04:	4638      	mov	r0, r7
 8009e06:	f7ff ff35 	bl	8009c74 <_free_r>
 8009e0a:	e7e9      	b.n	8009de0 <_realloc_r+0x1c>
 8009e0c:	4635      	mov	r5, r6
 8009e0e:	e7e7      	b.n	8009de0 <_realloc_r+0x1c>

08009e10 <__ssputs_r>:
 8009e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	688e      	ldr	r6, [r1, #8]
 8009e16:	429e      	cmp	r6, r3
 8009e18:	4682      	mov	sl, r0
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	4690      	mov	r8, r2
 8009e1e:	4699      	mov	r9, r3
 8009e20:	d837      	bhi.n	8009e92 <__ssputs_r+0x82>
 8009e22:	898a      	ldrh	r2, [r1, #12]
 8009e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e28:	d031      	beq.n	8009e8e <__ssputs_r+0x7e>
 8009e2a:	6825      	ldr	r5, [r4, #0]
 8009e2c:	6909      	ldr	r1, [r1, #16]
 8009e2e:	1a6f      	subs	r7, r5, r1
 8009e30:	6965      	ldr	r5, [r4, #20]
 8009e32:	2302      	movs	r3, #2
 8009e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e38:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e3c:	f109 0301 	add.w	r3, r9, #1
 8009e40:	443b      	add	r3, r7
 8009e42:	429d      	cmp	r5, r3
 8009e44:	bf38      	it	cc
 8009e46:	461d      	movcc	r5, r3
 8009e48:	0553      	lsls	r3, r2, #21
 8009e4a:	d530      	bpl.n	8009eae <__ssputs_r+0x9e>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7ff ff5f 	bl	8009d10 <_malloc_r>
 8009e52:	4606      	mov	r6, r0
 8009e54:	b950      	cbnz	r0, 8009e6c <__ssputs_r+0x5c>
 8009e56:	230c      	movs	r3, #12
 8009e58:	f8ca 3000 	str.w	r3, [sl]
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6c:	463a      	mov	r2, r7
 8009e6e:	6921      	ldr	r1, [r4, #16]
 8009e70:	f7fe ffcd 	bl	8008e0e <memcpy>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	6126      	str	r6, [r4, #16]
 8009e82:	6165      	str	r5, [r4, #20]
 8009e84:	443e      	add	r6, r7
 8009e86:	1bed      	subs	r5, r5, r7
 8009e88:	6026      	str	r6, [r4, #0]
 8009e8a:	60a5      	str	r5, [r4, #8]
 8009e8c:	464e      	mov	r6, r9
 8009e8e:	454e      	cmp	r6, r9
 8009e90:	d900      	bls.n	8009e94 <__ssputs_r+0x84>
 8009e92:	464e      	mov	r6, r9
 8009e94:	4632      	mov	r2, r6
 8009e96:	4641      	mov	r1, r8
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	f7ff fed1 	bl	8009c40 <memmove>
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	1b9b      	subs	r3, r3, r6
 8009ea2:	60a3      	str	r3, [r4, #8]
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	441e      	add	r6, r3
 8009ea8:	6026      	str	r6, [r4, #0]
 8009eaa:	2000      	movs	r0, #0
 8009eac:	e7dc      	b.n	8009e68 <__ssputs_r+0x58>
 8009eae:	462a      	mov	r2, r5
 8009eb0:	f7ff ff88 	bl	8009dc4 <_realloc_r>
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d1e2      	bne.n	8009e80 <__ssputs_r+0x70>
 8009eba:	6921      	ldr	r1, [r4, #16]
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	f7ff fed9 	bl	8009c74 <_free_r>
 8009ec2:	e7c8      	b.n	8009e56 <__ssputs_r+0x46>

08009ec4 <_svfiprintf_r>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	461d      	mov	r5, r3
 8009eca:	898b      	ldrh	r3, [r1, #12]
 8009ecc:	061f      	lsls	r7, r3, #24
 8009ece:	b09d      	sub	sp, #116	; 0x74
 8009ed0:	4680      	mov	r8, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	d50f      	bpl.n	8009ef8 <_svfiprintf_r+0x34>
 8009ed8:	690b      	ldr	r3, [r1, #16]
 8009eda:	b96b      	cbnz	r3, 8009ef8 <_svfiprintf_r+0x34>
 8009edc:	2140      	movs	r1, #64	; 0x40
 8009ede:	f7ff ff17 	bl	8009d10 <_malloc_r>
 8009ee2:	6020      	str	r0, [r4, #0]
 8009ee4:	6120      	str	r0, [r4, #16]
 8009ee6:	b928      	cbnz	r0, 8009ef4 <_svfiprintf_r+0x30>
 8009ee8:	230c      	movs	r3, #12
 8009eea:	f8c8 3000 	str.w	r3, [r8]
 8009eee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef2:	e0c8      	b.n	800a086 <_svfiprintf_r+0x1c2>
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	6163      	str	r3, [r4, #20]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9309      	str	r3, [sp, #36]	; 0x24
 8009efc:	2320      	movs	r3, #32
 8009efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f02:	2330      	movs	r3, #48	; 0x30
 8009f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f08:	9503      	str	r5, [sp, #12]
 8009f0a:	f04f 0b01 	mov.w	fp, #1
 8009f0e:	4637      	mov	r7, r6
 8009f10:	463d      	mov	r5, r7
 8009f12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f16:	b10b      	cbz	r3, 8009f1c <_svfiprintf_r+0x58>
 8009f18:	2b25      	cmp	r3, #37	; 0x25
 8009f1a:	d13e      	bne.n	8009f9a <_svfiprintf_r+0xd6>
 8009f1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f20:	d00b      	beq.n	8009f3a <_svfiprintf_r+0x76>
 8009f22:	4653      	mov	r3, sl
 8009f24:	4632      	mov	r2, r6
 8009f26:	4621      	mov	r1, r4
 8009f28:	4640      	mov	r0, r8
 8009f2a:	f7ff ff71 	bl	8009e10 <__ssputs_r>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f000 80a4 	beq.w	800a07c <_svfiprintf_r+0x1b8>
 8009f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f36:	4453      	add	r3, sl
 8009f38:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3a:	783b      	ldrb	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 809d 	beq.w	800a07c <_svfiprintf_r+0x1b8>
 8009f42:	2300      	movs	r3, #0
 8009f44:	f04f 32ff 	mov.w	r2, #4294967295
 8009f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	9307      	str	r3, [sp, #28]
 8009f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f54:	931a      	str	r3, [sp, #104]	; 0x68
 8009f56:	462f      	mov	r7, r5
 8009f58:	2205      	movs	r2, #5
 8009f5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009f5e:	4850      	ldr	r0, [pc, #320]	; (800a0a0 <_svfiprintf_r+0x1dc>)
 8009f60:	f7f6 f94e 	bl	8000200 <memchr>
 8009f64:	9b04      	ldr	r3, [sp, #16]
 8009f66:	b9d0      	cbnz	r0, 8009f9e <_svfiprintf_r+0xda>
 8009f68:	06d9      	lsls	r1, r3, #27
 8009f6a:	bf44      	itt	mi
 8009f6c:	2220      	movmi	r2, #32
 8009f6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f72:	071a      	lsls	r2, r3, #28
 8009f74:	bf44      	itt	mi
 8009f76:	222b      	movmi	r2, #43	; 0x2b
 8009f78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f7c:	782a      	ldrb	r2, [r5, #0]
 8009f7e:	2a2a      	cmp	r2, #42	; 0x2a
 8009f80:	d015      	beq.n	8009fae <_svfiprintf_r+0xea>
 8009f82:	9a07      	ldr	r2, [sp, #28]
 8009f84:	462f      	mov	r7, r5
 8009f86:	2000      	movs	r0, #0
 8009f88:	250a      	movs	r5, #10
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f90:	3b30      	subs	r3, #48	; 0x30
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d94d      	bls.n	800a032 <_svfiprintf_r+0x16e>
 8009f96:	b1b8      	cbz	r0, 8009fc8 <_svfiprintf_r+0x104>
 8009f98:	e00f      	b.n	8009fba <_svfiprintf_r+0xf6>
 8009f9a:	462f      	mov	r7, r5
 8009f9c:	e7b8      	b.n	8009f10 <_svfiprintf_r+0x4c>
 8009f9e:	4a40      	ldr	r2, [pc, #256]	; (800a0a0 <_svfiprintf_r+0x1dc>)
 8009fa0:	1a80      	subs	r0, r0, r2
 8009fa2:	fa0b f000 	lsl.w	r0, fp, r0
 8009fa6:	4318      	orrs	r0, r3
 8009fa8:	9004      	str	r0, [sp, #16]
 8009faa:	463d      	mov	r5, r7
 8009fac:	e7d3      	b.n	8009f56 <_svfiprintf_r+0x92>
 8009fae:	9a03      	ldr	r2, [sp, #12]
 8009fb0:	1d11      	adds	r1, r2, #4
 8009fb2:	6812      	ldr	r2, [r2, #0]
 8009fb4:	9103      	str	r1, [sp, #12]
 8009fb6:	2a00      	cmp	r2, #0
 8009fb8:	db01      	blt.n	8009fbe <_svfiprintf_r+0xfa>
 8009fba:	9207      	str	r2, [sp, #28]
 8009fbc:	e004      	b.n	8009fc8 <_svfiprintf_r+0x104>
 8009fbe:	4252      	negs	r2, r2
 8009fc0:	f043 0302 	orr.w	r3, r3, #2
 8009fc4:	9207      	str	r2, [sp, #28]
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	783b      	ldrb	r3, [r7, #0]
 8009fca:	2b2e      	cmp	r3, #46	; 0x2e
 8009fcc:	d10c      	bne.n	8009fe8 <_svfiprintf_r+0x124>
 8009fce:	787b      	ldrb	r3, [r7, #1]
 8009fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fd2:	d133      	bne.n	800a03c <_svfiprintf_r+0x178>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	1d1a      	adds	r2, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	9203      	str	r2, [sp, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfb8      	it	lt
 8009fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fe4:	3702      	adds	r7, #2
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	4d2e      	ldr	r5, [pc, #184]	; (800a0a4 <_svfiprintf_r+0x1e0>)
 8009fea:	7839      	ldrb	r1, [r7, #0]
 8009fec:	2203      	movs	r2, #3
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7f6 f906 	bl	8000200 <memchr>
 8009ff4:	b138      	cbz	r0, 800a006 <_svfiprintf_r+0x142>
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	1b40      	subs	r0, r0, r5
 8009ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	4303      	orrs	r3, r0
 800a002:	3701      	adds	r7, #1
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	7839      	ldrb	r1, [r7, #0]
 800a008:	4827      	ldr	r0, [pc, #156]	; (800a0a8 <_svfiprintf_r+0x1e4>)
 800a00a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a00e:	2206      	movs	r2, #6
 800a010:	1c7e      	adds	r6, r7, #1
 800a012:	f7f6 f8f5 	bl	8000200 <memchr>
 800a016:	2800      	cmp	r0, #0
 800a018:	d038      	beq.n	800a08c <_svfiprintf_r+0x1c8>
 800a01a:	4b24      	ldr	r3, [pc, #144]	; (800a0ac <_svfiprintf_r+0x1e8>)
 800a01c:	bb13      	cbnz	r3, 800a064 <_svfiprintf_r+0x1a0>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	3307      	adds	r3, #7
 800a022:	f023 0307 	bic.w	r3, r3, #7
 800a026:	3308      	adds	r3, #8
 800a028:	9303      	str	r3, [sp, #12]
 800a02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02c:	444b      	add	r3, r9
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	e76d      	b.n	8009f0e <_svfiprintf_r+0x4a>
 800a032:	fb05 3202 	mla	r2, r5, r2, r3
 800a036:	2001      	movs	r0, #1
 800a038:	460f      	mov	r7, r1
 800a03a:	e7a6      	b.n	8009f8a <_svfiprintf_r+0xc6>
 800a03c:	2300      	movs	r3, #0
 800a03e:	3701      	adds	r7, #1
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	4619      	mov	r1, r3
 800a044:	250a      	movs	r5, #10
 800a046:	4638      	mov	r0, r7
 800a048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04c:	3a30      	subs	r2, #48	; 0x30
 800a04e:	2a09      	cmp	r2, #9
 800a050:	d903      	bls.n	800a05a <_svfiprintf_r+0x196>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0c8      	beq.n	8009fe8 <_svfiprintf_r+0x124>
 800a056:	9105      	str	r1, [sp, #20]
 800a058:	e7c6      	b.n	8009fe8 <_svfiprintf_r+0x124>
 800a05a:	fb05 2101 	mla	r1, r5, r1, r2
 800a05e:	2301      	movs	r3, #1
 800a060:	4607      	mov	r7, r0
 800a062:	e7f0      	b.n	800a046 <_svfiprintf_r+0x182>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4622      	mov	r2, r4
 800a06a:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <_svfiprintf_r+0x1ec>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	4640      	mov	r0, r8
 800a070:	f3af 8000 	nop.w
 800a074:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a078:	4681      	mov	r9, r0
 800a07a:	d1d6      	bne.n	800a02a <_svfiprintf_r+0x166>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	065b      	lsls	r3, r3, #25
 800a080:	f53f af35 	bmi.w	8009eee <_svfiprintf_r+0x2a>
 800a084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a086:	b01d      	add	sp, #116	; 0x74
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	4622      	mov	r2, r4
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <_svfiprintf_r+0x1ec>)
 800a094:	a904      	add	r1, sp, #16
 800a096:	4640      	mov	r0, r8
 800a098:	f7ff f882 	bl	80091a0 <_printf_i>
 800a09c:	e7ea      	b.n	800a074 <_svfiprintf_r+0x1b0>
 800a09e:	bf00      	nop
 800a0a0:	0800b6b2 	.word	0x0800b6b2
 800a0a4:	0800b6b8 	.word	0x0800b6b8
 800a0a8:	0800b6bc 	.word	0x0800b6bc
 800a0ac:	00000000 	.word	0x00000000
 800a0b0:	08009e11 	.word	0x08009e11

0800a0b4 <_sbrk_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4c06      	ldr	r4, [pc, #24]	; (800a0d0 <_sbrk_r+0x1c>)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	f7fd fab2 	bl	8007628 <_sbrk>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_sbrk_r+0x1a>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_sbrk_r+0x1a>
 800a0cc:	602b      	str	r3, [r5, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20014f20 	.word	0x20014f20

0800a0d4 <_raise_r>:
 800a0d4:	291f      	cmp	r1, #31
 800a0d6:	b538      	push	{r3, r4, r5, lr}
 800a0d8:	4604      	mov	r4, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	d904      	bls.n	800a0e8 <_raise_r+0x14>
 800a0de:	2316      	movs	r3, #22
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0ea:	b112      	cbz	r2, 800a0f2 <_raise_r+0x1e>
 800a0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0f0:	b94b      	cbnz	r3, 800a106 <_raise_r+0x32>
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 f830 	bl	800a158 <_getpid_r>
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a102:	f000 b817 	b.w	800a134 <_kill_r>
 800a106:	2b01      	cmp	r3, #1
 800a108:	d00a      	beq.n	800a120 <_raise_r+0x4c>
 800a10a:	1c59      	adds	r1, r3, #1
 800a10c:	d103      	bne.n	800a116 <_raise_r+0x42>
 800a10e:	2316      	movs	r3, #22
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	2001      	movs	r0, #1
 800a114:	e7e7      	b.n	800a0e6 <_raise_r+0x12>
 800a116:	2400      	movs	r4, #0
 800a118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a11c:	4628      	mov	r0, r5
 800a11e:	4798      	blx	r3
 800a120:	2000      	movs	r0, #0
 800a122:	e7e0      	b.n	800a0e6 <_raise_r+0x12>

0800a124 <raise>:
 800a124:	4b02      	ldr	r3, [pc, #8]	; (800a130 <raise+0xc>)
 800a126:	4601      	mov	r1, r0
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	f7ff bfd3 	b.w	800a0d4 <_raise_r>
 800a12e:	bf00      	nop
 800a130:	200002b8 	.word	0x200002b8

0800a134 <_kill_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4c07      	ldr	r4, [pc, #28]	; (800a154 <_kill_r+0x20>)
 800a138:	2300      	movs	r3, #0
 800a13a:	4605      	mov	r5, r0
 800a13c:	4608      	mov	r0, r1
 800a13e:	4611      	mov	r1, r2
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	f7fd fa3b 	bl	80075bc <_kill>
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	d102      	bne.n	800a150 <_kill_r+0x1c>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	b103      	cbz	r3, 800a150 <_kill_r+0x1c>
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	bd38      	pop	{r3, r4, r5, pc}
 800a152:	bf00      	nop
 800a154:	20014f20 	.word	0x20014f20

0800a158 <_getpid_r>:
 800a158:	f7fd ba2e 	b.w	80075b8 <_getpid>

0800a15c <__sread>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	460c      	mov	r4, r1
 800a160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a164:	f000 f89e 	bl	800a2a4 <_read_r>
 800a168:	2800      	cmp	r0, #0
 800a16a:	bfab      	itete	ge
 800a16c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a16e:	89a3      	ldrhlt	r3, [r4, #12]
 800a170:	181b      	addge	r3, r3, r0
 800a172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a176:	bfac      	ite	ge
 800a178:	6563      	strge	r3, [r4, #84]	; 0x54
 800a17a:	81a3      	strhlt	r3, [r4, #12]
 800a17c:	bd10      	pop	{r4, pc}

0800a17e <__swrite>:
 800a17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	461f      	mov	r7, r3
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	05db      	lsls	r3, r3, #23
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	4616      	mov	r6, r2
 800a18e:	d505      	bpl.n	800a19c <__swrite+0x1e>
 800a190:	2302      	movs	r3, #2
 800a192:	2200      	movs	r2, #0
 800a194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a198:	f000 f868 	bl	800a26c <_lseek_r>
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	463b      	mov	r3, r7
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	f000 b817 	b.w	800a1e4 <_write_r>

0800a1b6 <__sseek>:
 800a1b6:	b510      	push	{r4, lr}
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1be:	f000 f855 	bl	800a26c <_lseek_r>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	bf15      	itete	ne
 800a1c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1d2:	81a3      	strheq	r3, [r4, #12]
 800a1d4:	bf18      	it	ne
 800a1d6:	81a3      	strhne	r3, [r4, #12]
 800a1d8:	bd10      	pop	{r4, pc}

0800a1da <__sclose>:
 800a1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1de:	f000 b813 	b.w	800a208 <_close_r>
	...

0800a1e4 <_write_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4c07      	ldr	r4, [pc, #28]	; (800a204 <_write_r+0x20>)
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	4608      	mov	r0, r1
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f7fd f9fe 	bl	80075f4 <_write>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_write_r+0x1e>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_write_r+0x1e>
 800a200:	602b      	str	r3, [r5, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	20014f20 	.word	0x20014f20

0800a208 <_close_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4c06      	ldr	r4, [pc, #24]	; (800a224 <_close_r+0x1c>)
 800a20c:	2300      	movs	r3, #0
 800a20e:	4605      	mov	r5, r0
 800a210:	4608      	mov	r0, r1
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	f7fd f9fc 	bl	8007610 <_close>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_close_r+0x1a>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_close_r+0x1a>
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	20014f20 	.word	0x20014f20

0800a228 <_fstat_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4c07      	ldr	r4, [pc, #28]	; (800a248 <_fstat_r+0x20>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4605      	mov	r5, r0
 800a230:	4608      	mov	r0, r1
 800a232:	4611      	mov	r1, r2
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	f7fd f9ee 	bl	8007616 <_fstat>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	d102      	bne.n	800a244 <_fstat_r+0x1c>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	b103      	cbz	r3, 800a244 <_fstat_r+0x1c>
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	20014f20 	.word	0x20014f20

0800a24c <_isatty_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4c06      	ldr	r4, [pc, #24]	; (800a268 <_isatty_r+0x1c>)
 800a250:	2300      	movs	r3, #0
 800a252:	4605      	mov	r5, r0
 800a254:	4608      	mov	r0, r1
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	f7fd f9e2 	bl	8007620 <_isatty>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_isatty_r+0x1a>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	b103      	cbz	r3, 800a266 <_isatty_r+0x1a>
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	20014f20 	.word	0x20014f20

0800a26c <_lseek_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4c07      	ldr	r4, [pc, #28]	; (800a28c <_lseek_r+0x20>)
 800a270:	4605      	mov	r5, r0
 800a272:	4608      	mov	r0, r1
 800a274:	4611      	mov	r1, r2
 800a276:	2200      	movs	r2, #0
 800a278:	6022      	str	r2, [r4, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	f7fd f9d2 	bl	8007624 <_lseek>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d102      	bne.n	800a28a <_lseek_r+0x1e>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	b103      	cbz	r3, 800a28a <_lseek_r+0x1e>
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	20014f20 	.word	0x20014f20

0800a290 <__malloc_lock>:
 800a290:	4770      	bx	lr

0800a292 <__malloc_unlock>:
 800a292:	4770      	bx	lr

0800a294 <_malloc_usable_size_r>:
 800a294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a298:	1f18      	subs	r0, r3, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfbc      	itt	lt
 800a29e:	580b      	ldrlt	r3, [r1, r0]
 800a2a0:	18c0      	addlt	r0, r0, r3
 800a2a2:	4770      	bx	lr

0800a2a4 <_read_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4c07      	ldr	r4, [pc, #28]	; (800a2c4 <_read_r+0x20>)
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7fd f990 	bl	80075d8 <_read>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_read_r+0x1e>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_read_r+0x1e>
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20014f20 	.word	0x20014f20

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
