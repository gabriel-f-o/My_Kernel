
My_Kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e4  08011ba4  08011ba4  00021ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013388  08013388  00030498  2**0
                  CONTENTS
  4 .ARM          00000008  08013388  08013388  00023388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013390  08013390  00030498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013390  08013390  00023390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013394  08013394  00023394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  08013398  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a9c  20000498  08013830  00030498  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20014f34  08013830  00034f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030498  2**0
                  CONTENTS, READONLY
 12 .lfs          000e0000  08020000  08020000  00040000  2**0
                  ALLOC
 13 .debug_info   0002cf66  00000000  00000000  000304c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005934  00000000  00000000  0005d42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001828  00000000  00000000  00062d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002943e  00000000  00000000  00064590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c47b  00000000  00000000  0008d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0968  00000000  00000000  000a9e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a7b1  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000018d0  00000000  00000000  0017a830  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00006f4c  00000000  00000000  0017c100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000498 	.word	0x20000498
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b8c 	.word	0x08011b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000049c 	.word	0x2000049c
 80001cc:	08011b8c 	.word	0x08011b8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b986 	b.w	80005c4 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9e08      	ldr	r6, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	4688      	mov	r8, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14b      	bne.n	800039e <__udivmoddi4+0xa6>
 8000306:	428a      	cmp	r2, r1
 8000308:	4615      	mov	r5, r2
 800030a:	d967      	bls.n	80003dc <__udivmoddi4+0xe4>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b14a      	cbz	r2, 8000326 <__udivmoddi4+0x2e>
 8000312:	f1c2 0720 	rsb	r7, r2, #32
 8000316:	fa01 f302 	lsl.w	r3, r1, r2
 800031a:	fa20 f707 	lsr.w	r7, r0, r7
 800031e:	4095      	lsls	r5, r2
 8000320:	ea47 0803 	orr.w	r8, r7, r3
 8000324:	4094      	lsls	r4, r2
 8000326:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000330:	fa1f fc85 	uxth.w	ip, r5
 8000334:	fb0e 8817 	mls	r8, lr, r7, r8
 8000338:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800033c:	fb07 f10c 	mul.w	r1, r7, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x60>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f107 30ff 	add.w	r0, r7, #4294967295
 800034a:	f080 811b 	bcs.w	8000584 <__udivmoddi4+0x28c>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 8118 	bls.w	8000584 <__udivmoddi4+0x28c>
 8000354:	3f02      	subs	r7, #2
 8000356:	442b      	add	r3, r5
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000368:	fb00 fc0c 	mul.w	ip, r0, ip
 800036c:	45a4      	cmp	ip, r4
 800036e:	d909      	bls.n	8000384 <__udivmoddi4+0x8c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	f080 8107 	bcs.w	8000588 <__udivmoddi4+0x290>
 800037a:	45a4      	cmp	ip, r4
 800037c:	f240 8104 	bls.w	8000588 <__udivmoddi4+0x290>
 8000380:	3802      	subs	r0, #2
 8000382:	442c      	add	r4, r5
 8000384:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000388:	eba4 040c 	sub.w	r4, r4, ip
 800038c:	2700      	movs	r7, #0
 800038e:	b11e      	cbz	r6, 8000398 <__udivmoddi4+0xa0>
 8000390:	40d4      	lsrs	r4, r2
 8000392:	2300      	movs	r3, #0
 8000394:	e9c6 4300 	strd	r4, r3, [r6]
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	428b      	cmp	r3, r1
 80003a0:	d909      	bls.n	80003b6 <__udivmoddi4+0xbe>
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	f000 80eb 	beq.w	800057e <__udivmoddi4+0x286>
 80003a8:	2700      	movs	r7, #0
 80003aa:	e9c6 0100 	strd	r0, r1, [r6]
 80003ae:	4638      	mov	r0, r7
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	fab3 f783 	clz	r7, r3
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d147      	bne.n	800044e <__udivmoddi4+0x156>
 80003be:	428b      	cmp	r3, r1
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xd0>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 80fa 	bhi.w	80005bc <__udivmoddi4+0x2c4>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb61 0303 	sbc.w	r3, r1, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4698      	mov	r8, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d0e0      	beq.n	8000398 <__udivmoddi4+0xa0>
 80003d6:	e9c6 4800 	strd	r4, r8, [r6]
 80003da:	e7dd      	b.n	8000398 <__udivmoddi4+0xa0>
 80003dc:	b902      	cbnz	r2, 80003e0 <__udivmoddi4+0xe8>
 80003de:	deff      	udf	#255	; 0xff
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f040 808f 	bne.w	8000508 <__udivmoddi4+0x210>
 80003ea:	1b49      	subs	r1, r1, r5
 80003ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f0:	fa1f f885 	uxth.w	r8, r5
 80003f4:	2701      	movs	r7, #1
 80003f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80003fa:	0c23      	lsrs	r3, r4, #16
 80003fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb08 f10c 	mul.w	r1, r8, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x124>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x122>
 8000414:	4299      	cmp	r1, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2bc>
 800041a:	4684      	mov	ip, r0
 800041c:	1a59      	subs	r1, r3, r1
 800041e:	b2a3      	uxth	r3, r4
 8000420:	fbb1 f0fe 	udiv	r0, r1, lr
 8000424:	fb0e 1410 	mls	r4, lr, r0, r1
 8000428:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800042c:	fb08 f800 	mul.w	r8, r8, r0
 8000430:	45a0      	cmp	r8, r4
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x14c>
 8000434:	192c      	adds	r4, r5, r4
 8000436:	f100 33ff 	add.w	r3, r0, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x14a>
 800043c:	45a0      	cmp	r8, r4
 800043e:	f200 80b6 	bhi.w	80005ae <__udivmoddi4+0x2b6>
 8000442:	4618      	mov	r0, r3
 8000444:	eba4 0408 	sub.w	r4, r4, r8
 8000448:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800044c:	e79f      	b.n	800038e <__udivmoddi4+0x96>
 800044e:	f1c7 0c20 	rsb	ip, r7, #32
 8000452:	40bb      	lsls	r3, r7
 8000454:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000458:	ea4e 0e03 	orr.w	lr, lr, r3
 800045c:	fa01 f407 	lsl.w	r4, r1, r7
 8000460:	fa20 f50c 	lsr.w	r5, r0, ip
 8000464:	fa21 f30c 	lsr.w	r3, r1, ip
 8000468:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800046c:	4325      	orrs	r5, r4
 800046e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	fb08 3319 	mls	r3, r8, r9, r3
 8000478:	fa1f fa8e 	uxth.w	sl, lr
 800047c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000480:	fb09 f40a 	mul.w	r4, r9, sl
 8000484:	429c      	cmp	r4, r3
 8000486:	fa02 f207 	lsl.w	r2, r2, r7
 800048a:	fa00 f107 	lsl.w	r1, r0, r7
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b0>
 8000490:	eb1e 0303 	adds.w	r3, lr, r3
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	f080 8087 	bcs.w	80005aa <__udivmoddi4+0x2b2>
 800049c:	429c      	cmp	r4, r3
 800049e:	f240 8084 	bls.w	80005aa <__udivmoddi4+0x2b2>
 80004a2:	f1a9 0902 	sub.w	r9, r9, #2
 80004a6:	4473      	add	r3, lr
 80004a8:	1b1b      	subs	r3, r3, r4
 80004aa:	b2ad      	uxth	r5, r5
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004bc:	45a2      	cmp	sl, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1da>
 80004c0:	eb1e 0404 	adds.w	r4, lr, r4
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d26b      	bcs.n	80005a2 <__udivmoddi4+0x2aa>
 80004ca:	45a2      	cmp	sl, r4
 80004cc:	d969      	bls.n	80005a2 <__udivmoddi4+0x2aa>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4474      	add	r4, lr
 80004d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	eba4 040a 	sub.w	r4, r4, sl
 80004de:	454c      	cmp	r4, r9
 80004e0:	46c2      	mov	sl, r8
 80004e2:	464b      	mov	r3, r9
 80004e4:	d354      	bcc.n	8000590 <__udivmoddi4+0x298>
 80004e6:	d051      	beq.n	800058c <__udivmoddi4+0x294>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d069      	beq.n	80005c0 <__udivmoddi4+0x2c8>
 80004ec:	ebb1 050a 	subs.w	r5, r1, sl
 80004f0:	eb64 0403 	sbc.w	r4, r4, r3
 80004f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	40fc      	lsrs	r4, r7
 80004fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000500:	e9c6 5400 	strd	r5, r4, [r6]
 8000504:	2700      	movs	r7, #0
 8000506:	e747      	b.n	8000398 <__udivmoddi4+0xa0>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f703 	lsr.w	r7, r0, r3
 8000510:	4095      	lsls	r5, r2
 8000512:	fa01 f002 	lsl.w	r0, r1, r2
 8000516:	fa21 f303 	lsr.w	r3, r1, r3
 800051a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800051e:	4338      	orrs	r0, r7
 8000520:	0c01      	lsrs	r1, r0, #16
 8000522:	fbb3 f7fe 	udiv	r7, r3, lr
 8000526:	fa1f f885 	uxth.w	r8, r5
 800052a:	fb0e 3317 	mls	r3, lr, r7, r3
 800052e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000532:	fb07 f308 	mul.w	r3, r7, r8
 8000536:	428b      	cmp	r3, r1
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x256>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f107 3cff 	add.w	ip, r7, #4294967295
 8000544:	d22f      	bcs.n	80005a6 <__udivmoddi4+0x2ae>
 8000546:	428b      	cmp	r3, r1
 8000548:	d92d      	bls.n	80005a6 <__udivmoddi4+0x2ae>
 800054a:	3f02      	subs	r7, #2
 800054c:	4429      	add	r1, r5
 800054e:	1acb      	subs	r3, r1, r3
 8000550:	b281      	uxth	r1, r0
 8000552:	fbb3 f0fe 	udiv	r0, r3, lr
 8000556:	fb0e 3310 	mls	r3, lr, r0, r3
 800055a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055e:	fb00 f308 	mul.w	r3, r0, r8
 8000562:	428b      	cmp	r3, r1
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x27e>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f100 3cff 	add.w	ip, r0, #4294967295
 800056c:	d217      	bcs.n	800059e <__udivmoddi4+0x2a6>
 800056e:	428b      	cmp	r3, r1
 8000570:	d915      	bls.n	800059e <__udivmoddi4+0x2a6>
 8000572:	3802      	subs	r0, #2
 8000574:	4429      	add	r1, r5
 8000576:	1ac9      	subs	r1, r1, r3
 8000578:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800057c:	e73b      	b.n	80003f6 <__udivmoddi4+0xfe>
 800057e:	4637      	mov	r7, r6
 8000580:	4630      	mov	r0, r6
 8000582:	e709      	b.n	8000398 <__udivmoddi4+0xa0>
 8000584:	4607      	mov	r7, r0
 8000586:	e6e7      	b.n	8000358 <__udivmoddi4+0x60>
 8000588:	4618      	mov	r0, r3
 800058a:	e6fb      	b.n	8000384 <__udivmoddi4+0x8c>
 800058c:	4541      	cmp	r1, r8
 800058e:	d2ab      	bcs.n	80004e8 <__udivmoddi4+0x1f0>
 8000590:	ebb8 0a02 	subs.w	sl, r8, r2
 8000594:	eb69 020e 	sbc.w	r2, r9, lr
 8000598:	3801      	subs	r0, #1
 800059a:	4613      	mov	r3, r2
 800059c:	e7a4      	b.n	80004e8 <__udivmoddi4+0x1f0>
 800059e:	4660      	mov	r0, ip
 80005a0:	e7e9      	b.n	8000576 <__udivmoddi4+0x27e>
 80005a2:	4618      	mov	r0, r3
 80005a4:	e795      	b.n	80004d2 <__udivmoddi4+0x1da>
 80005a6:	4667      	mov	r7, ip
 80005a8:	e7d1      	b.n	800054e <__udivmoddi4+0x256>
 80005aa:	4681      	mov	r9, r0
 80005ac:	e77c      	b.n	80004a8 <__udivmoddi4+0x1b0>
 80005ae:	3802      	subs	r0, #2
 80005b0:	442c      	add	r4, r5
 80005b2:	e747      	b.n	8000444 <__udivmoddi4+0x14c>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	442b      	add	r3, r5
 80005ba:	e72f      	b.n	800041c <__udivmoddi4+0x124>
 80005bc:	4638      	mov	r0, r7
 80005be:	e708      	b.n	80003d2 <__udivmoddi4+0xda>
 80005c0:	4637      	mov	r7, r6
 80005c2:	e6e9      	b.n	8000398 <__udivmoddi4+0xa0>

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <cli_is_terminator>:

/**********************************************
 * PRIVATE FUNCTIONS
 *********************************************/
 
static inline bool cli_is_terminator(cliElement_t const * const e){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <cli_is_terminator+0x12>
 80005d6:	2300      	movs	r3, #0
 80005d8:	e019      	b.n	800060e <cli_is_terminator+0x46>
    return (e->name == NULL && e->action == NULL && e->args == NULL && e->desc == NULL && e->argsDesc == NULL);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d111      	bne.n	8000606 <cli_is_terminator+0x3e>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10d      	bne.n	8000606 <cli_is_terminator+0x3e>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d109      	bne.n	8000606 <cli_is_terminator+0x3e>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <cli_is_terminator+0x3e>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <cli_is_terminator+0x3e>
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <cli_is_terminator+0x40>
 8000606:	2300      	movs	r3, #0
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <cli_is_sub_menu>:

static inline bool cli_is_sub_menu(cliElement_t const * const e){
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <cli_is_sub_menu+0x12>
 8000628:	2300      	movs	r3, #0
 800062a:	e006      	b.n	800063a <cli_is_sub_menu+0x20>
    return (e->subMenuRef != NULL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <cli_is_action>:

static inline bool cli_is_action(cliElement_t const * const e){
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <cli_is_action+0x12>
 8000654:	2300      	movs	r3, #0
 8000656:	e006      	b.n	8000666 <cli_is_action+0x20>
    return (e->action != NULL);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2db      	uxtb	r3, r3
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <cli_verify_args_str>:

static int64_t cli_verify_args_str(cliElement_t const * const e, bool* elipsisPresent){
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b087      	sub	sp, #28
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
    if(e->args == NULL) return -1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d104      	bne.n	800068e <cli_verify_args_str+0x1c>
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	f04f 34ff 	mov.w	r4, #4294967295
 800068c:	e063      	b.n	8000756 <cli_verify_args_str+0xe4>
    
    size_t len = strlen(e->args);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fda6 	bl	80001e4 <strlen>
 8000698:	60f8      	str	r0, [r7, #12]
    size_t argsLen = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
    *elipsisPresent = 0;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
    
    for(int i = 0; i < len; i++){
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	e04e      	b.n	8000748 <cli_verify_args_str+0xd6>
        switch(e->args[i]){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68da      	ldr	r2, [r3, #12]
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b62      	cmp	r3, #98	; 0x62
 80006b6:	d00c      	beq.n	80006d2 <cli_verify_args_str+0x60>
 80006b8:	2b62      	cmp	r3, #98	; 0x62
 80006ba:	dc04      	bgt.n	80006c6 <cli_verify_args_str+0x54>
 80006bc:	2b2a      	cmp	r3, #42	; 0x2a
 80006be:	d008      	beq.n	80006d2 <cli_verify_args_str+0x60>
 80006c0:	2b2e      	cmp	r3, #46	; 0x2e
 80006c2:	d00a      	beq.n	80006da <cli_verify_args_str+0x68>
 80006c4:	e038      	b.n	8000738 <cli_verify_args_str+0xc6>
 80006c6:	2b73      	cmp	r3, #115	; 0x73
 80006c8:	d003      	beq.n	80006d2 <cli_verify_args_str+0x60>
 80006ca:	2b75      	cmp	r3, #117	; 0x75
 80006cc:	d001      	beq.n	80006d2 <cli_verify_args_str+0x60>
 80006ce:	2b69      	cmp	r3, #105	; 0x69
 80006d0:	d132      	bne.n	8000738 <cli_verify_args_str+0xc6>
            case 'u' :
            case 'i' :
            case 's' :
            case 'b' :
            case '*' : {
                argsLen++;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
                break;
 80006d8:	e033      	b.n	8000742 <cli_verify_args_str+0xd0>
            }
            
            case '.' : {
                if(len < i + 2 || e->args[i + 1] != '.' || e->args[i + 2] != '.'){
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3302      	adds	r3, #2
 80006de:	461a      	mov	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d30f      	bcc.n	8000706 <cli_verify_args_str+0x94>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b2e      	cmp	r3, #46	; 0x2e
 80006f4:	d107      	bne.n	8000706 <cli_verify_args_str+0x94>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	3302      	adds	r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b2e      	cmp	r3, #46	; 0x2e
 8000704:	d004      	beq.n	8000710 <cli_verify_args_str+0x9e>
                    ERR_PRINTLN("Arguments string list contains incomplete elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	f04f 34ff 	mov.w	r4, #4294967295
 800070e:	e022      	b.n	8000756 <cli_verify_args_str+0xe4>
                }
                
                DBG_PRINTLN("%d, %d", len, i);
                
                if(len > i + 3){
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3303      	adds	r3, #3
 8000714:	461a      	mov	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4293      	cmp	r3, r2
 800071a:	d904      	bls.n	8000726 <cli_verify_args_str+0xb4>
                    ERR_PRINTLN("Arguments string list contains arguments after elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	f04f 34ff 	mov.w	r4, #4294967295
 8000724:	e017      	b.n	8000756 <cli_verify_args_str+0xe4>
                }
                
                *elipsisPresent = 1;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
                return argsLen++;
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	617a      	str	r2, [r7, #20]
 8000732:	f04f 0400 	mov.w	r4, #0
 8000736:	e00e      	b.n	8000756 <cli_verify_args_str+0xe4>
            }
            
            default : {
                ERR_PRINTLN("Unrecognized character in argument list index %d for action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                ERR_PRINTLN("");
                return -1;
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	f04f 34ff 	mov.w	r4, #4294967295
 8000740:	e009      	b.n	8000756 <cli_verify_args_str+0xe4>
    for(int i = 0; i < len; i++){
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	3301      	adds	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8ac      	bhi.n	80006aa <cli_verify_args_str+0x38>
            }
        }
    }
    
    return argsLen;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	f04f 0400 	mov.w	r4, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	4621      	mov	r1, r4
 800075a:	371c      	adds	r7, #28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <cli_print_element>:

static void cli_print_element(cliElement_t const * const e){
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d04b      	beq.n	8000806 <cli_print_element+0xa6>
    
    bool const is_sub_menu = cli_is_sub_menu(e);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff53 	bl	800061a <cli_is_sub_menu>
 8000774:	4603      	mov	r3, r0
 8000776:	76fb      	strb	r3, [r7, #27]

    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <cli_print_element+0x26>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	e000      	b.n	8000788 <cli_print_element+0x28>
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <cli_print_element+0xb0>)
 8000788:	617b      	str	r3, [r7, #20]
    
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 800078a:	7efb      	ldrb	r3, [r7, #27]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <cli_print_element+0x34>
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <cli_print_element+0xb4>)
 8000792:	e000      	b.n	8000796 <cli_print_element+0x36>
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <cli_print_element+0xb8>)
 8000796:	461a      	mov	r2, r3
 8000798:	6979      	ldr	r1, [r7, #20]
 800079a:	4820      	ldr	r0, [pc, #128]	; (800081c <cli_print_element+0xbc>)
 800079c:	f001 fae6 	bl	8001d6c <cli_printf>

    size_t len = (size_t)(strlen(name) + (size_t)(3 * is_sub_menu) + 1); //name length with '... '
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f7ff fd1f 	bl	80001e4 <strlen>
 80007a6:	4601      	mov	r1, r0
 80007a8:	7efa      	ldrb	r2, [r7, #27]
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	3301      	adds	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]

    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	3316      	adds	r3, #22
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <cli_print_element+0xc0>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	091b      	lsrs	r3, r3, #4
 80007c2:	2216      	movs	r2, #22
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	60fb      	str	r3, [r7, #12]

    spaces -= len;
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	60fb      	str	r3, [r7, #12]

    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e005      	b.n	80007e4 <cli_print_element+0x84>
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <cli_print_element+0xb8>)
 80007da:	f001 fac7 	bl	8001d6c <cli_printf>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	69fa      	ldr	r2, [r7, #28]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3f5      	bcc.n	80007d8 <cli_print_element+0x78>
    
    MENU_PRINTLN("- %s", ( (e->desc == NULL) ? "NULL_DESC" : e->desc) );
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <cli_print_element+0x9a>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	e000      	b.n	80007fc <cli_print_element+0x9c>
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <cli_print_element+0xc4>)
 80007fc:	4619      	mov	r1, r3
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <cli_print_element+0xc8>)
 8000800:	f001 fab4 	bl	8001d6c <cli_printf>
 8000804:	e000      	b.n	8000808 <cli_print_element+0xa8>
    if(e == NULL) return;
 8000806:	bf00      	nop
} 
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08011c08 	.word	0x08011c08
 8000814:	08011c14 	.word	0x08011c14
 8000818:	08011c1c 	.word	0x08011c1c
 800081c:	08011c20 	.word	0x08011c20
 8000820:	ba2e8ba3 	.word	0xba2e8ba3
 8000824:	08011c28 	.word	0x08011c28
 8000828:	08011c34 	.word	0x08011c34

0800082c <cli_print_menu>:

static void cli_print_menu(cliElement_t const * const e){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d029      	beq.n	800088e <cli_print_menu+0x62>
    if(e->subMenuRef == NULL){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d027      	beq.n	8000892 <cli_print_menu+0x66>
        ERR_PRINTLN("Reference of menu '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;  
    } 

    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 8000842:	2300      	movs	r3, #0
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e00d      	b.n	8000864 <cli_print_menu+0x38>
        cli_print_element(&e->subMenuRef[i]);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6859      	ldr	r1, [r3, #4]
 800084c:	7bfa      	ldrb	r2, [r7, #15]
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	440b      	add	r3, r1
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff81 	bl	8000760 <cli_print_element>
    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3301      	adds	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	440b      	add	r3, r1
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fea7 	bl	80005c8 <cli_is_terminator>
 800087a:	4603      	mov	r3, r0
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1e0      	bne.n	8000848 <cli_print_menu+0x1c>
        
    MENU_PRINTLN("");
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <cli_print_menu+0x70>)
 8000888:	f001 fa70 	bl	8001d6c <cli_printf>
 800088c:	e002      	b.n	8000894 <cli_print_menu+0x68>
    if(e == NULL) return;
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <cli_print_menu+0x68>
        return;  
 8000892:	bf00      	nop
}
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08011c3c 	.word	0x08011c3c

080008a0 <cli_print_action>:

static void cli_print_action(cliElement_t const * const e){
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 80dd 	beq.w	8000a6a <cli_print_action+0x1ca>
    if(e->args == NULL) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 80da 	beq.w	8000a6e <cli_print_action+0x1ce>
        ERR_PRINTLN("Action of element '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    MENU_PRINTLN("Action '%s' - %s - usage :", ( (e->name == NULL) ? "NULL_NAME" : e->name), ( (e->desc == NULL) ? "NULL_DESC" : e->desc ) );
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <cli_print_action+0x28>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	e000      	b.n	80008ca <cli_print_action+0x2a>
 80008c8:	496c      	ldr	r1, [pc, #432]	; (8000a7c <cli_print_action+0x1dc>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <cli_print_action+0x38>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	e000      	b.n	80008da <cli_print_action+0x3a>
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <cli_print_action+0x1e0>)
 80008da:	461a      	mov	r2, r3
 80008dc:	4869      	ldr	r0, [pc, #420]	; (8000a84 <cli_print_action+0x1e4>)
 80008de:	f001 fa45 	bl	8001d6c <cli_printf>
    
    bool elipsisPresent = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80008e6:	f107 030f 	add.w	r3, r7, #15
 80008ea:	4619      	mov	r1, r3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fec0 	bl	8000672 <cli_verify_args_str>
 80008f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    if(len == -1){
 80008f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008fe:	bf08      	it	eq
 8000900:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8000904:	f000 80b5 	beq.w	8000a72 <cli_print_action+0x1d2>
        return;
    }
    
    if(len == 0){
 8000908:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800090c:	4323      	orrs	r3, r4
 800090e:	d103      	bne.n	8000918 <cli_print_action+0x78>
        MENU_PRINTLN("   No arguments");
 8000910:	485d      	ldr	r0, [pc, #372]	; (8000a88 <cli_print_action+0x1e8>)
 8000912:	f001 fa2b 	bl	8001d6c <cli_printf>
        return;
 8000916:	e0ad      	b.n	8000a74 <cli_print_action+0x1d4>
    }
    
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <cli_print_action+0x8a>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <cli_print_action+0x8e>
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <cli_print_action+0x90>
 800092e:	2300      	movs	r3, #0
 8000930:	77fb      	strb	r3, [r7, #31]
 8000932:	7ffb      	ldrb	r3, [r7, #31]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	77fb      	strb	r3, [r7, #31]
    
    int i = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < len; i++){
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	e054      	b.n	80009ee <cli_print_action+0x14e>
        switch(e->args[i]){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b69      	cmp	r3, #105	; 0x69
 8000950:	d00e      	beq.n	8000970 <cli_print_action+0xd0>
 8000952:	2b69      	cmp	r3, #105	; 0x69
 8000954:	dc04      	bgt.n	8000960 <cli_print_action+0xc0>
 8000956:	2b2a      	cmp	r3, #42	; 0x2a
 8000958:	d016      	beq.n	8000988 <cli_print_action+0xe8>
 800095a:	2b62      	cmp	r3, #98	; 0x62
 800095c:	d010      	beq.n	8000980 <cli_print_action+0xe0>
 800095e:	e017      	b.n	8000990 <cli_print_action+0xf0>
 8000960:	2b73      	cmp	r3, #115	; 0x73
 8000962:	d009      	beq.n	8000978 <cli_print_action+0xd8>
 8000964:	2b75      	cmp	r3, #117	; 0x75
 8000966:	d113      	bne.n	8000990 <cli_print_action+0xf0>
            #if (defined(CLI_FLOAT_EN) && CLI_FLOAT_EN == 1)
            case 'f' : MENU_PRINTF("   < float   > - "); break;
            #endif

            case 'u' : MENU_PRINTF("   < uint64  > - "); break;
 8000968:	4848      	ldr	r0, [pc, #288]	; (8000a8c <cli_print_action+0x1ec>)
 800096a:	f001 f9ff 	bl	8001d6c <cli_printf>
 800096e:	e013      	b.n	8000998 <cli_print_action+0xf8>
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 8000970:	4847      	ldr	r0, [pc, #284]	; (8000a90 <cli_print_action+0x1f0>)
 8000972:	f001 f9fb 	bl	8001d6c <cli_printf>
 8000976:	e00f      	b.n	8000998 <cli_print_action+0xf8>
            case 's' : MENU_PRINTF("   < string  > - "); break;
 8000978:	4846      	ldr	r0, [pc, #280]	; (8000a94 <cli_print_action+0x1f4>)
 800097a:	f001 f9f7 	bl	8001d6c <cli_printf>
 800097e:	e00b      	b.n	8000998 <cli_print_action+0xf8>
            case 'b' : MENU_PRINTF("   < buffer  > - "); break;
 8000980:	4845      	ldr	r0, [pc, #276]	; (8000a98 <cli_print_action+0x1f8>)
 8000982:	f001 f9f3 	bl	8001d6c <cli_printf>
 8000986:	e007      	b.n	8000998 <cli_print_action+0xf8>
            case '*' : MENU_PRINTF("   < any     > - "); break;
 8000988:	4844      	ldr	r0, [pc, #272]	; (8000a9c <cli_print_action+0x1fc>)
 800098a:	f001 f9ef 	bl	8001d6c <cli_printf>
 800098e:	e003      	b.n	8000998 <cli_print_action+0xf8>
            default  : MENU_PRINTF("   < unknown > - "); break;
 8000990:	4843      	ldr	r0, [pc, #268]	; (8000aa0 <cli_print_action+0x200>)
 8000992:	f001 f9eb 	bl	8001d6c <cli_printf>
 8000996:	bf00      	nop
        }
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10b      	bne.n	80009b6 <cli_print_action+0x116>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <cli_print_action+0x116>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <cli_print_action+0x11a>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <cli_print_action+0x11c>
 80009ba:	2300      	movs	r3, #0
 80009bc:	77fb      	strb	r3, [r7, #31]
 80009be:	7ffb      	ldrb	r3, [r7, #31]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	77fb      	strb	r3, [r7, #31]
        
        if(argsDescEnded){
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <cli_print_action+0x134>
            MENU_PRINTLN("");
 80009cc:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <cli_print_action+0x204>)
 80009ce:	f001 f9cd 	bl	8001d6c <cli_printf>
            continue;
 80009d2:	e009      	b.n	80009e8 <cli_print_action+0x148>
        }
        
        MENU_PRINTLN("%s", e->argsDesc[i]);   
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4831      	ldr	r0, [pc, #196]	; (8000aa8 <cli_print_action+0x208>)
 80009e4:	f001 f9c2 	bl	8001d6c <cli_printf>
    for(i = 0; i < len; i++){
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	3301      	adds	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4619      	mov	r1, r3
 80009f2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80009f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009fa:	4299      	cmp	r1, r3
 80009fc:	eb72 0304 	sbcs.w	r3, r2, r4
 8000a00:	dba0      	blt.n	8000944 <cli_print_action+0xa4>
    }
    
    if(elipsisPresent){
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d02c      	beq.n	8000a62 <cli_print_action+0x1c2>
        MENU_PRINTF("   < various > - ");
 8000a08:	4828      	ldr	r0, [pc, #160]	; (8000aac <cli_print_action+0x20c>)
 8000a0a:	f001 f9af 	bl	8001d6c <cli_printf>
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 8000a0e:	7ffb      	ldrb	r3, [r7, #31]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10b      	bne.n	8000a2c <cli_print_action+0x18c>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d007      	beq.n	8000a2c <cli_print_action+0x18c>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d101      	bne.n	8000a30 <cli_print_action+0x190>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <cli_print_action+0x192>
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
 8000a34:	7ffb      	ldrb	r3, [r7, #31]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	77fb      	strb	r3, [r7, #31]

        if(!argsDescEnded) MENU_PRINTLN("%s", e->argsDesc[i]);
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	f083 0301 	eor.w	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d009      	beq.n	8000a5c <cli_print_action+0x1bc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <cli_print_action+0x208>)
 8000a58:	f001 f988 	bl	8001d6c <cli_printf>

        MENU_PRINTLN("");
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <cli_print_action+0x204>)
 8000a5e:	f001 f985 	bl	8001d6c <cli_printf>
    }
    
    MENU_PRINTLN("");
 8000a62:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <cli_print_action+0x204>)
 8000a64:	f001 f982 	bl	8001d6c <cli_printf>
 8000a68:	e004      	b.n	8000a74 <cli_print_action+0x1d4>
    if(e == NULL) return;
 8000a6a:	bf00      	nop
 8000a6c:	e002      	b.n	8000a74 <cli_print_action+0x1d4>
        return;
 8000a6e:	bf00      	nop
 8000a70:	e000      	b.n	8000a74 <cli_print_action+0x1d4>
        return;
 8000a72:	bf00      	nop
}
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08011c08 	.word	0x08011c08
 8000a80:	08011c28 	.word	0x08011c28
 8000a84:	08011c40 	.word	0x08011c40
 8000a88:	08011c60 	.word	0x08011c60
 8000a8c:	08011c74 	.word	0x08011c74
 8000a90:	08011c88 	.word	0x08011c88
 8000a94:	08011c9c 	.word	0x08011c9c
 8000a98:	08011cb0 	.word	0x08011cb0
 8000a9c:	08011cc4 	.word	0x08011cc4
 8000aa0:	08011cd8 	.word	0x08011cd8
 8000aa4:	08011c3c 	.word	0x08011c3c
 8000aa8:	08011cec 	.word	0x08011cec
 8000aac:	08011cf4 	.word	0x08011cf4

08000ab0 <cli_str_starts_with>:

static bool cli_str_starts_with(char const tkn[], char const str[]){
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
    if(tkn == NULL || str == NULL) return false;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <cli_str_starts_with+0x16>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <cli_str_starts_with+0x1a>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e04f      	b.n	8000b6a <cli_str_starts_with+0xba>
    
    size_t const lenTkn = strlen(tkn);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fb8a 	bl	80001e4 <strlen>
 8000ad0:	6138      	str	r0, [r7, #16]
    size_t const lenStr = strlen(str);
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	f7ff fb86 	bl	80001e4 <strlen>
 8000ad8:	60f8      	str	r0, [r7, #12]
    
    if(lenTkn == 0 || lenStr == 0) return false;
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <cli_str_starts_with+0x36>
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <cli_str_starts_with+0x3a>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e03f      	b.n	8000b6a <cli_str_starts_with+0xba>
    if(lenTkn > lenStr) return false;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d901      	bls.n	8000af6 <cli_str_starts_with+0x46>
 8000af2:	2300      	movs	r3, #0
 8000af4:	e039      	b.n	8000b6a <cli_str_starts_with+0xba>

    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e02f      	b.n	8000b5c <cli_str_starts_with+0xac>
        if(tolower(tkn[i]) != tolower(str[i])) return false;
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	72fb      	strb	r3, [r7, #11]
 8000b06:	f00f fdb5 	bl	8010674 <__locale_ctype_ptr>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d103      	bne.n	8000b24 <cli_str_starts_with+0x74>
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	f103 0420 	add.w	r4, r3, #32
 8000b22:	e000      	b.n	8000b26 <cli_str_starts_with+0x76>
 8000b24:	7afc      	ldrb	r4, [r7, #11]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	72bb      	strb	r3, [r7, #10]
 8000b30:	f00f fda0 	bl	8010674 <__locale_ctype_ptr>
 8000b34:	4602      	mov	r2, r0
 8000b36:	7abb      	ldrb	r3, [r7, #10]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d102      	bne.n	8000b4c <cli_str_starts_with+0x9c>
 8000b46:	7abb      	ldrb	r3, [r7, #10]
 8000b48:	3320      	adds	r3, #32
 8000b4a:	e000      	b.n	8000b4e <cli_str_starts_with+0x9e>
 8000b4c:	7abb      	ldrb	r3, [r7, #10]
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d001      	beq.n	8000b56 <cli_str_starts_with+0xa6>
 8000b52:	2300      	movs	r3, #0
 8000b54:	e009      	b.n	8000b6a <cli_str_starts_with+0xba>
    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1c9      	bne.n	8000afc <cli_str_starts_with+0x4c>
    }
    
    return true;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}

08000b72 <cli_find_element_in_menu>:

static cliElement_t* cli_find_element_in_menu(char* tkn, char cliBuffer[], size_t maxLen, cliElement_t currentMenu[]){
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
    if(tkn == NULL) return NULL;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <cli_find_element_in_menu+0x18>
 8000b86:	2300      	movs	r3, #0
 8000b88:	e05e      	b.n	8000c48 <cli_find_element_in_menu+0xd6>
    if(maxLen == 0) return NULL;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <cli_find_element_in_menu+0x22>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e059      	b.n	8000c48 <cli_find_element_in_menu+0xd6>
    if(cliBuffer == NULL) return NULL;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <cli_find_element_in_menu+0x2c>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e054      	b.n	8000c48 <cli_find_element_in_menu+0xd6>
    if(currentMenu == NULL) return NULL;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <cli_find_element_in_menu+0x36>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e04f      	b.n	8000c48 <cli_find_element_in_menu+0xd6>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <cli_find_element_in_menu+0x42>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e049      	b.n	8000c48 <cli_find_element_in_menu+0xd6>
    
    cliElement_t* ret = NULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
    
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	74fb      	strb	r3, [r7, #19]
 8000bbc:	e032      	b.n	8000c24 <cli_find_element_in_menu+0xb2>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	6859      	ldr	r1, [r3, #4]
 8000bc2:	7cfa      	ldrb	r2, [r7, #19]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	440b      	add	r3, r1
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d021      	beq.n	8000c18 <cli_find_element_in_menu+0xa6>
        
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	6859      	ldr	r1, [r3, #4]
 8000bd8:	7cfa      	ldrb	r2, [r7, #19]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	440b      	add	r3, r1
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4619      	mov	r1, r3
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff ff61 	bl	8000ab0 <cli_str_starts_with>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f083 0301 	eor.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d110      	bne.n	8000c1c <cli_find_element_in_menu+0xaa>
        
        if(ret != NULL){
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <cli_find_element_in_menu+0x92>
            ERR_PRINTLN("Command not unique");
            return NULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e021      	b.n	8000c48 <cli_find_element_in_menu+0xd6>
        } 
        
        ret = (cliElement_t*) &currentMenu->subMenuRef[i];
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	6859      	ldr	r1, [r3, #4]
 8000c08:	7cfa      	ldrb	r2, [r7, #19]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e002      	b.n	8000c1e <cli_find_element_in_menu+0xac>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000c18:	bf00      	nop
 8000c1a:	e000      	b.n	8000c1e <cli_find_element_in_menu+0xac>
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000c1c:	bf00      	nop
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000c1e:	7cfb      	ldrb	r3, [r7, #19]
 8000c20:	3301      	adds	r3, #1
 8000c22:	74fb      	strb	r3, [r7, #19]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	6859      	ldr	r1, [r3, #4]
 8000c28:	7cfa      	ldrb	r2, [r7, #19]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fcc7 	bl	80005c8 <cli_is_terminator>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1bb      	bne.n	8000bbe <cli_find_element_in_menu+0x4c>
    }
    
    DBG_PRINTLN("%s", ret == NULL ? "Not found" : "Sub menu or action found" );
    
    return ret;
 8000c46:	697b      	ldr	r3, [r7, #20]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <cli_arg_str_len>:

static int32_t cli_arg_str_len(char* arg){
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    if(arg ==  NULL) return -1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <cli_arg_str_len+0x14>
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e050      	b.n	8000d06 <cli_arg_str_len+0xb6>
    
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b7b      	cmp	r3, #123	; 0x7b
 8000c6a:	d003      	beq.n	8000c74 <cli_arg_str_len+0x24>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b22      	cmp	r3, #34	; 0x22
 8000c72:	d101      	bne.n	8000c78 <cli_arg_str_len+0x28>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <cli_arg_str_len+0x2a>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
    
    while(1){
        switch(arg[0]){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b22      	cmp	r3, #34	; 0x22
 8000c82:	d001      	beq.n	8000c88 <cli_arg_str_len+0x38>
 8000c84:	2b7b      	cmp	r3, #123	; 0x7b
 8000c86:	d129      	bne.n	8000cdc <cli_arg_str_len+0x8c>
            
            case '{' :
            case '"' : {
                if(arg[i] == '\0') return -1;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <cli_arg_str_len+0x4a>
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	e035      	b.n	8000d06 <cli_arg_str_len+0xb6>
                
                if(arg[0] == '{' && arg[i] == '}'){
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b7b      	cmp	r3, #123	; 0x7b
 8000ca0:	d108      	bne.n	8000cb4 <cli_arg_str_len+0x64>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b7d      	cmp	r3, #125	; 0x7d
 8000cac:	d102      	bne.n	8000cb4 <cli_arg_str_len+0x64>
                    return i+1;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	e028      	b.n	8000d06 <cli_arg_str_len+0xb6>
                }
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b22      	cmp	r3, #34	; 0x22
 8000cba:	d11d      	bne.n	8000cf8 <cli_arg_str_len+0xa8>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b22      	cmp	r3, #34	; 0x22
 8000cc6:	d117      	bne.n	8000cf8 <cli_arg_str_len+0xa8>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b5c      	cmp	r3, #92	; 0x5c
 8000cd4:	d010      	beq.n	8000cf8 <cli_arg_str_len+0xa8>
                    return i+1;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	e014      	b.n	8000d06 <cli_arg_str_len+0xb6>
                }
                break;
            }
            
            default : {
                if(arg[i] == ' ' || arg[i] == '\0') return i;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b20      	cmp	r3, #32
 8000ce6:	d005      	beq.n	8000cf4 <cli_arg_str_len+0xa4>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d103      	bne.n	8000cfc <cli_arg_str_len+0xac>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	e006      	b.n	8000d06 <cli_arg_str_len+0xb6>
                break;
 8000cf8:	bf00      	nop
 8000cfa:	e000      	b.n	8000cfe <cli_arg_str_len+0xae>
                break;
 8000cfc:	bf00      	nop
            } 
        }
        
        i++;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
        switch(arg[0]){
 8000d04:	e7ba      	b.n	8000c7c <cli_arg_str_len+0x2c>
    }
    
    return -1;
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <cli_go_to_next_argument>:

static char* cli_go_to_next_argument(char* arg){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
    if(arg == NULL) return NULL;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <cli_go_to_next_argument+0x12>
 8000d20:	2300      	movs	r3, #0
 8000d22:	e01c      	b.n	8000d5e <cli_go_to_next_argument+0x4c>
    
    int32_t size = cli_arg_str_len(arg);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff93 	bl	8000c50 <cli_arg_str_len>
 8000d2a:	60f8      	str	r0, [r7, #12]
    
    if(size == -1) return NULL;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d101      	bne.n	8000d38 <cli_go_to_next_argument+0x26>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e012      	b.n	8000d5e <cli_go_to_next_argument+0x4c>
    
    arg += size;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	607b      	str	r3, [r7, #4]
    
    while(arg[0] != '\0'){ 
 8000d40:	e006      	b.n	8000d50 <cli_go_to_next_argument+0x3e>
        //if(arg[0] == '-' || arg[0] == '{' || arg[0] == '"' || ('0' <= arg[0] && arg[0] <= '9')) break;
        if(arg[0] != ' ') break;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b20      	cmp	r3, #32
 8000d48:	d107      	bne.n	8000d5a <cli_go_to_next_argument+0x48>
        arg++;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
    while(arg[0] != '\0'){ 
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f4      	bne.n	8000d42 <cli_go_to_next_argument+0x30>
 8000d58:	e000      	b.n	8000d5c <cli_go_to_next_argument+0x4a>
        if(arg[0] != ' ') break;
 8000d5a:	bf00      	nop
    }
    
    return arg;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <cli_print_arg>:

static void cli_print_arg(char* s){
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
    int len = cli_arg_str_len(s);
    DBG_PRINTF("Argument size %d = ", len);
    for(int i = 0; i < len; i++) DBG_PRINTF("%c", s[i]);
    DBG_PRINTLN("");
#endif
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <cli_verify_int>:
    
    return true;
}
#endif

static bool cli_verify_int(char* tkn, bool isUnsigned, bool printEn){
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b088      	sub	sp, #32
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70fb      	strb	r3, [r7, #3]
 8000d86:	4613      	mov	r3, r2
 8000d88:	70bb      	strb	r3, [r7, #2]
    int32_t len = cli_arg_str_len(tkn);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff60 	bl	8000c50 <cli_arg_str_len>
 8000d90:	6178      	str	r0, [r7, #20]
    bool is_negative = false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	77fb      	strb	r3, [r7, #31]
    int32_t i = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]

    if(isUnsigned == false && tkn[0] == '-'){
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f083 0301 	eor.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80cf 	beq.w	8000f46 <cli_verify_int+0x1cc>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b2d      	cmp	r3, #45	; 0x2d
 8000dae:	f040 80ca 	bne.w	8000f46 <cli_verify_int+0x1cc>
        if(len == 1) {
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d101      	bne.n	8000dbc <cli_verify_int+0x42>
            if(printEn) ERR_PRINTLN("Negative int does not begin");
            return false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e0ca      	b.n	8000f52 <cli_verify_int+0x1d8>
        }
        is_negative = true;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	77fb      	strb	r3, [r7, #31]
        i++;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
    }
    
    while(i < len){
 8000dc6:	e0be      	b.n	8000f46 <cli_verify_int+0x1cc>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	74fb      	strb	r3, [r7, #19]
 8000dd2:	f00f fc4f 	bl	8010674 <__locale_ctype_ptr>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	7cfb      	ldrb	r3, [r7, #19]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d102      	bne.n	8000dee <cli_verify_int+0x74>
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	3320      	adds	r3, #32
 8000dec:	e000      	b.n	8000df0 <cli_verify_int+0x76>
 8000dee:	7cfb      	ldrb	r3, [r7, #19]
 8000df0:	2b78      	cmp	r3, #120	; 0x78
 8000df2:	d152      	bne.n	8000e9a <cli_verify_int+0x120>
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b30      	cmp	r3, #48	; 0x30
 8000e00:	d149      	bne.n	8000e96 <cli_verify_int+0x11c>
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	3b02      	subs	r3, #2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b20      	cmp	r3, #32
 8000e0e:	d006      	beq.n	8000e1e <cli_verify_int+0xa4>
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	3b02      	subs	r3, #2
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d13b      	bne.n	8000e96 <cli_verify_int+0x11c>
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	3301      	adds	r3, #1
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b2f      	cmp	r3, #47	; 0x2f
 8000e2a:	d906      	bls.n	8000e3a <cli_verify_int+0xc0>
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b39      	cmp	r3, #57	; 0x39
 8000e38:	d92f      	bls.n	8000e9a <cli_verify_int+0x120>
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	74bb      	strb	r3, [r7, #18]
 8000e46:	f00f fc15 	bl	8010674 <__locale_ctype_ptr>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	7cbb      	ldrb	r3, [r7, #18]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <cli_verify_int+0xe8>
 8000e5c:	7cbb      	ldrb	r3, [r7, #18]
 8000e5e:	3320      	adds	r3, #32
 8000e60:	e000      	b.n	8000e64 <cli_verify_int+0xea>
 8000e62:	7cbb      	ldrb	r3, [r7, #18]
 8000e64:	2b60      	cmp	r3, #96	; 0x60
 8000e66:	dd16      	ble.n	8000e96 <cli_verify_int+0x11c>
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	747b      	strb	r3, [r7, #17]
 8000e74:	f00f fbfe 	bl	8010674 <__locale_ctype_ptr>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	7c7b      	ldrb	r3, [r7, #17]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d102      	bne.n	8000e90 <cli_verify_int+0x116>
 8000e8a:	7c7b      	ldrb	r3, [r7, #17]
 8000e8c:	3320      	adds	r3, #32
 8000e8e:	e000      	b.n	8000e92 <cli_verify_int+0x118>
 8000e90:	7c7b      	ldrb	r3, [r7, #17]
 8000e92:	2b66      	cmp	r3, #102	; 0x66
 8000e94:	dd01      	ble.n	8000e9a <cli_verify_int+0x120>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ));
            return false;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e05b      	b.n	8000f52 <cli_verify_int+0x1d8>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ea4:	d905      	bls.n	8000eb2 <cli_verify_int+0x138>
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b39      	cmp	r3, #57	; 0x39
 8000eb0:	d946      	bls.n	8000f40 <cli_verify_int+0x1c6>
 8000eb2:	7ffb      	ldrb	r3, [r7, #31]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d141      	bne.n	8000f3c <cli_verify_int+0x1c2>
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	743b      	strb	r3, [r7, #16]
 8000ec2:	f00f fbd7 	bl	8010674 <__locale_ctype_ptr>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	7c3b      	ldrb	r3, [r7, #16]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d102      	bne.n	8000ede <cli_verify_int+0x164>
 8000ed8:	7c3b      	ldrb	r3, [r7, #16]
 8000eda:	3320      	adds	r3, #32
 8000edc:	e000      	b.n	8000ee0 <cli_verify_int+0x166>
 8000ede:	7c3b      	ldrb	r3, [r7, #16]
 8000ee0:	2b60      	cmp	r3, #96	; 0x60
 8000ee2:	dd15      	ble.n	8000f10 <cli_verify_int+0x196>
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	f00f fbc1 	bl	8010674 <__locale_ctype_ptr>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d102      	bne.n	8000f0a <cli_verify_int+0x190>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	3320      	adds	r3, #32
 8000f08:	e000      	b.n	8000f0c <cli_verify_int+0x192>
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b66      	cmp	r3, #102	; 0x66
 8000f0e:	dd17      	ble.n	8000f40 <cli_verify_int+0x1c6>
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	f00f fbab 	bl	8010674 <__locale_ctype_ptr>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <cli_verify_int+0x1bc>
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	3320      	adds	r3, #32
 8000f34:	e000      	b.n	8000f38 <cli_verify_int+0x1be>
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	2b78      	cmp	r3, #120	; 0x78
 8000f3a:	d001      	beq.n	8000f40 <cli_verify_int+0x1c6>
            if(printEn) ERR_PRINTLN("Invalid character in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ) );
            return false;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e008      	b.n	8000f52 <cli_verify_int+0x1d8>
        }

        i++;
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
    while(i < len){
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	f6ff af3c 	blt.w	8000dc8 <cli_verify_int+0x4e>
    }  
    
    return true;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <cli_verify_buffer>:

static bool cli_verify_buffer(char* tkn, bool printEn){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
    int i = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
    
    if(tkn == NULL) return false;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <cli_verify_buffer+0x1a>
 8000f70:	2300      	movs	r3, #0
 8000f72:	e0ef      	b.n	8001154 <cli_verify_buffer+0x1fa>
    if(tkn[0] != '"' && tkn[0] != '{') {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b22      	cmp	r3, #34	; 0x22
 8000f7a:	d005      	beq.n	8000f88 <cli_verify_buffer+0x2e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b7b      	cmp	r3, #123	; 0x7b
 8000f82:	d001      	beq.n	8000f88 <cli_verify_buffer+0x2e>
        if(printEn) ERR_PRINTLN("Buffer argument does not begin with '\"' nor '{'");
        return false;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e0e5      	b.n	8001154 <cli_verify_buffer+0x1fa>
    }
    
    int32_t len = cli_arg_str_len(tkn);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fe61 	bl	8000c50 <cli_arg_str_len>
 8000f8e:	6138      	str	r0, [r7, #16]
    
    if(len == -1) {
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f96:	d101      	bne.n	8000f9c <cli_verify_buffer+0x42>
        if(printEn) ERR_PRINTLN("Buffer beginning with '%c' does not end", tkn[0]);
        return false;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e0db      	b.n	8001154 <cli_verify_buffer+0x1fa>
    }
    
    if(tkn[0] == '"') return true;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b22      	cmp	r3, #34	; 0x22
 8000fa2:	d101      	bne.n	8000fa8 <cli_verify_buffer+0x4e>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e0d5      	b.n	8001154 <cli_verify_buffer+0x1fa>
    
    for(i = 1; i < len; i++){
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e0ca      	b.n	8001144 <cli_verify_buffer+0x1ea>
        if(tkn[i] == '}') break; 
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b7d      	cmp	r3, #125	; 0x7d
 8000fb8:	f000 80ca 	beq.w	8001150 <cli_verify_buffer+0x1f6>
        
        if(tkn[i] == ' ') continue;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	f000 80b9 	beq.w	800113c <cli_verify_buffer+0x1e2>
        
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	f00f fb4e 	bl	8010674 <__locale_ctype_ptr>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d102      	bne.n	8000ff0 <cli_verify_buffer+0x96>
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3320      	adds	r3, #32
 8000fee:	e000      	b.n	8000ff2 <cli_verify_buffer+0x98>
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b78      	cmp	r3, #120	; 0x78
 8000ff4:	d152      	bne.n	800109c <cli_verify_buffer+0x142>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b30      	cmp	r3, #48	; 0x30
 8001002:	d149      	bne.n	8001098 <cli_verify_buffer+0x13e>
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3b02      	subs	r3, #2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b20      	cmp	r3, #32
 8001010:	d006      	beq.n	8001020 <cli_verify_buffer+0xc6>
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3b02      	subs	r3, #2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b7b      	cmp	r3, #123	; 0x7b
 800101e:	d13b      	bne.n	8001098 <cli_verify_buffer+0x13e>
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b2f      	cmp	r3, #47	; 0x2f
 800102c:	d906      	bls.n	800103c <cli_verify_buffer+0xe2>
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b39      	cmp	r3, #57	; 0x39
 800103a:	d92f      	bls.n	800109c <cli_verify_buffer+0x142>
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	73bb      	strb	r3, [r7, #14]
 8001048:	f00f fb14 	bl	8010674 <__locale_ctype_ptr>
 800104c:	4602      	mov	r2, r0
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	3301      	adds	r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <cli_verify_buffer+0x10a>
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	3320      	adds	r3, #32
 8001062:	e000      	b.n	8001066 <cli_verify_buffer+0x10c>
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	2b60      	cmp	r3, #96	; 0x60
 8001068:	dd16      	ble.n	8001098 <cli_verify_buffer+0x13e>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	737b      	strb	r3, [r7, #13]
 8001076:	f00f fafd 	bl	8010674 <__locale_ctype_ptr>
 800107a:	4602      	mov	r2, r0
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	3301      	adds	r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d102      	bne.n	8001092 <cli_verify_buffer+0x138>
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	3320      	adds	r3, #32
 8001090:	e000      	b.n	8001094 <cli_verify_buffer+0x13a>
 8001092:	7b7b      	ldrb	r3, [r7, #13]
 8001094:	2b66      	cmp	r3, #102	; 0x66
 8001096:	dd01      	ble.n	800109c <cli_verify_buffer+0x142>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in buffer beginning with '{'");
            return false;
 8001098:	2300      	movs	r3, #0
 800109a:	e05b      	b.n	8001154 <cli_verify_buffer+0x1fa>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b2f      	cmp	r3, #47	; 0x2f
 80010a6:	d905      	bls.n	80010b4 <cli_verify_buffer+0x15a>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b39      	cmp	r3, #57	; 0x39
 80010b2:	d944      	bls.n	800113e <cli_verify_buffer+0x1e4>
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	733b      	strb	r3, [r7, #12]
 80010be:	f00f fad9 	bl	8010674 <__locale_ctype_ptr>
 80010c2:	4602      	mov	r2, r0
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <cli_verify_buffer+0x180>
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	3320      	adds	r3, #32
 80010d8:	e000      	b.n	80010dc <cli_verify_buffer+0x182>
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	2b60      	cmp	r3, #96	; 0x60
 80010de:	dd15      	ble.n	800110c <cli_verify_buffer+0x1b2>
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	72fb      	strb	r3, [r7, #11]
 80010ea:	f00f fac3 	bl	8010674 <__locale_ctype_ptr>
 80010ee:	4602      	mov	r2, r0
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d102      	bne.n	8001106 <cli_verify_buffer+0x1ac>
 8001100:	7afb      	ldrb	r3, [r7, #11]
 8001102:	3320      	adds	r3, #32
 8001104:	e000      	b.n	8001108 <cli_verify_buffer+0x1ae>
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2b66      	cmp	r3, #102	; 0x66
 800110a:	dd18      	ble.n	800113e <cli_verify_buffer+0x1e4>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	72bb      	strb	r3, [r7, #10]
 8001116:	f00f faad 	bl	8010674 <__locale_ctype_ptr>
 800111a:	4602      	mov	r2, r0
 800111c:	7abb      	ldrb	r3, [r7, #10]
 800111e:	3301      	adds	r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d102      	bne.n	8001132 <cli_verify_buffer+0x1d8>
 800112c:	7abb      	ldrb	r3, [r7, #10]
 800112e:	3320      	adds	r3, #32
 8001130:	e000      	b.n	8001134 <cli_verify_buffer+0x1da>
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	2b78      	cmp	r3, #120	; 0x78
 8001136:	d002      	beq.n	800113e <cli_verify_buffer+0x1e4>
            if(printEn) ERR_PRINTLN("Invalid character in buffer beginning with '{'");
            return false;
 8001138:	2300      	movs	r3, #0
 800113a:	e00b      	b.n	8001154 <cli_verify_buffer+0x1fa>
        if(tkn[i] == ' ') continue;
 800113c:	bf00      	nop
    for(i = 1; i < len; i++){
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	f6ff af30 	blt.w	8000fae <cli_verify_buffer+0x54>
 800114e:	e000      	b.n	8001152 <cli_verify_buffer+0x1f8>
        if(tkn[i] == '}') break; 
 8001150:	bf00      	nop
        }
    }
    
    return true;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <cli_verify_arguments>:

static bool cli_verify_arguments(cliElement_t* e){
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <cli_verify_arguments+0x12>
 800116a:	2300      	movs	r3, #0
 800116c:	e0be      	b.n	80012ec <cli_verify_arguments+0x190>
    if(e->args == NULL) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <cli_verify_arguments+0x1e>
        ERR_PRINTLN("Arguments string is null for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e0b8      	b.n	80012ec <cli_verify_arguments+0x190>
    }
    
    DBG_PRINTLN("args = %s", argsStr);
    
    char* argTkn = argsStr;
 800117a:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <cli_verify_arguments+0x198>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61fb      	str	r3, [r7, #28]
    
    bool elipsisPresent = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8001184:	f107 030f 	add.w	r3, r7, #15
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa71 	bl	8000672 <cli_verify_args_str>
 8001190:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    DBG_PRINTLN("Len = %d, elipsisPresent = %d", len, elipsisPresent);
    
    if(len == -1){
 8001194:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001198:	f1b4 3fff 	cmp.w	r4, #4294967295
 800119c:	bf08      	it	eq
 800119e:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 80011a2:	d101      	bne.n	80011a8 <cli_verify_arguments+0x4c>
        return false;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e0a1      	b.n	80012ec <cli_verify_arguments+0x190>
    }
    
    size_t i = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
    
    for(i = 0; i < len; i++){
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	e05e      	b.n	8001270 <cli_verify_arguments+0x114>
        if(argTkn == NULL) {
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <cli_verify_arguments+0x60>
            ERR_PRINTLN("No arguments in argument list for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e097      	b.n	80012ec <cli_verify_arguments+0x190>
        }
        
        if(argTkn[0] == '\0'){
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <cli_verify_arguments+0x6c>
            ERR_PRINTLN("Expected more arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e091      	b.n	80012ec <cli_verify_arguments+0x190>
        }
        
        cli_print_arg(argTkn);
 80011c8:	69f8      	ldr	r0, [r7, #28]
 80011ca:	f7ff fdcc 	bl	8000d66 <cli_print_arg>

        switch(e->args[i]){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b69      	cmp	r3, #105	; 0x69
 80011da:	d00b      	beq.n	80011f4 <cli_verify_arguments+0x98>
 80011dc:	2b69      	cmp	r3, #105	; 0x69
 80011de:	dc04      	bgt.n	80011ea <cli_verify_arguments+0x8e>
 80011e0:	2b2a      	cmp	r3, #42	; 0x2a
 80011e2:	d024      	beq.n	800122e <cli_verify_arguments+0xd2>
 80011e4:	2b62      	cmp	r3, #98	; 0x62
 80011e6:	d019      	beq.n	800121c <cli_verify_arguments+0xc0>
 80011e8:	e032      	b.n	8001250 <cli_verify_arguments+0xf4>
 80011ea:	2b73      	cmp	r3, #115	; 0x73
 80011ec:	d016      	beq.n	800121c <cli_verify_arguments+0xc0>
 80011ee:	2b75      	cmp	r3, #117	; 0x75
 80011f0:	d00a      	beq.n	8001208 <cli_verify_arguments+0xac>
 80011f2:	e02d      	b.n	8001250 <cli_verify_arguments+0xf4>
                return false;
            }
            #endif
            
            case 'i' : {
                if(cli_verify_int(argTkn, false, true)) break;
 80011f4:	2201      	movs	r2, #1
 80011f6:	2100      	movs	r1, #0
 80011f8:	69f8      	ldr	r0, [r7, #28]
 80011fa:	f7ff fdbe 	bl	8000d7a <cli_verify_int>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d127      	bne.n	8001254 <cli_verify_arguments+0xf8>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001204:	2300      	movs	r3, #0
 8001206:	e071      	b.n	80012ec <cli_verify_arguments+0x190>
            }
            
            case 'u' : {
                if(cli_verify_int(argTkn, true, true)) break;
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	69f8      	ldr	r0, [r7, #28]
 800120e:	f7ff fdb4 	bl	8000d7a <cli_verify_int>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11f      	bne.n	8001258 <cli_verify_arguments+0xfc>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001218:	2300      	movs	r3, #0
 800121a:	e067      	b.n	80012ec <cli_verify_arguments+0x190>
            }
            
            case 's' :
            case 'b' : {
                if(cli_verify_buffer(argTkn, true)) break;
 800121c:	2101      	movs	r1, #1
 800121e:	69f8      	ldr	r0, [r7, #28]
 8001220:	f7ff fe9b 	bl	8000f5a <cli_verify_buffer>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <cli_verify_arguments+0x100>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 800122a:	2300      	movs	r3, #0
 800122c:	e05e      	b.n	80012ec <cli_verify_arguments+0x190>
            }
            
            case '*' : {
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	69f8      	ldr	r0, [r7, #28]
 8001234:	f7ff fda1 	bl	8000d7a <cli_verify_int>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d110      	bne.n	8001260 <cli_verify_arguments+0x104>
 800123e:	2100      	movs	r1, #0
 8001240:	69f8      	ldr	r0, [r7, #28]
 8001242:	f7ff fe8a 	bl	8000f5a <cli_verify_buffer>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <cli_verify_arguments+0x104>
                {
                    break;
                }
                
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 800124c:	2300      	movs	r3, #0
 800124e:	e04d      	b.n	80012ec <cli_verify_arguments+0x190>
            }
            
            default : {
                DBG_PRINTLN("Unrecognized arguments");
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001250:	2300      	movs	r3, #0
 8001252:	e04b      	b.n	80012ec <cli_verify_arguments+0x190>
                if(cli_verify_int(argTkn, false, true)) break;
 8001254:	bf00      	nop
 8001256:	e004      	b.n	8001262 <cli_verify_arguments+0x106>
                if(cli_verify_int(argTkn, true, true)) break;
 8001258:	bf00      	nop
 800125a:	e002      	b.n	8001262 <cli_verify_arguments+0x106>
                if(cli_verify_buffer(argTkn, true)) break;
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <cli_verify_arguments+0x106>
            }
        }
        
        argTkn = cli_go_to_next_argument(argTkn);
 8001260:	bf00      	nop
 8001262:	69f8      	ldr	r0, [r7, #28]
 8001264:	f7ff fd55 	bl	8000d12 <cli_go_to_next_argument>
 8001268:	61f8      	str	r0, [r7, #28]
    for(i = 0; i < len; i++){
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	3301      	adds	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800127c:	4299      	cmp	r1, r3
 800127e:	eb72 0304 	sbcs.w	r3, r2, r4
 8001282:	db96      	blt.n	80011b2 <cli_verify_arguments+0x56>
    }
    
    if(elipsisPresent){
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d026      	beq.n	80012d8 <cli_verify_arguments+0x17c>
        while(argTkn != NULL && argTkn[0] != '\0'){
 800128a:	e01d      	b.n	80012c8 <cli_verify_arguments+0x16c>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	69f8      	ldr	r0, [r7, #28]
 8001292:	f7ff fd72 	bl	8000d7a <cli_verify_int>
 8001296:	4603      	mov	r3, r0
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <cli_verify_arguments+0x15e>
 80012a2:	2100      	movs	r1, #0
 80012a4:	69f8      	ldr	r0, [r7, #28]
 80012a6:	f7ff fe58 	bl	8000f5a <cli_verify_buffer>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f083 0301 	eor.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <cli_verify_arguments+0x15e>
                #endif
            
                ) ) 
            {
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ));
                return false;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e018      	b.n	80012ec <cli_verify_arguments+0x190>
            }
            
            argTkn = cli_go_to_next_argument(argTkn);
 80012ba:	69f8      	ldr	r0, [r7, #28]
 80012bc:	f7ff fd29 	bl	8000d12 <cli_go_to_next_argument>
 80012c0:	61f8      	str	r0, [r7, #28]
            i++;
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
        while(argTkn != NULL && argTkn[0] != '\0'){
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00d      	beq.n	80012ea <cli_verify_arguments+0x18e>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1da      	bne.n	800128c <cli_verify_arguments+0x130>
 80012d6:	e008      	b.n	80012ea <cli_verify_arguments+0x18e>
        }
    }
    
    else {
        if(argTkn != NULL && argTkn[0] != '\0'){
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <cli_verify_arguments+0x18e>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <cli_verify_arguments+0x18e>
            ERR_PRINTLN("Expected less arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <cli_verify_arguments+0x190>
        }
    }
    
    //if(argTkn[0] != '\0') ERR_PRINTLN();
    return true;
 80012ea:	2301      	movs	r3, #1
    //return ( (argTkn[0] == '\0') ? true : false );
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	200004b8 	.word	0x200004b8

080012f8 <cli_execute_action>:

static void cli_execute_action(cliElement_t* e){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80be 	beq.w	8001484 <cli_execute_action+0x18c>
    if(e->args == NULL) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80bb 	beq.w	8001488 <cli_execute_action+0x190>
        ERR_PRINTLN("Argument list NULL in action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    do{
        bool elipsisPresent = false;
 8001312:	2300      	movs	r3, #0
 8001314:	737b      	strb	r3, [r7, #13]
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8001316:	f107 030d 	add.w	r3, r7, #13
 800131a:	4619      	mov	r1, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff f9a8 	bl	8000672 <cli_verify_args_str>
 8001322:	e9c7 0104 	strd	r0, r1, [r7, #16]
        
        if(len == -1) return;
 8001326:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800132a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800132e:	bf08      	it	eq
 8001330:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8001334:	f000 80aa 	beq.w	800148c <cli_execute_action+0x194>

        argsStr = strtok(NULL, "\0");
 8001338:	4956      	ldr	r1, [pc, #344]	; (8001494 <cli_execute_action+0x19c>)
 800133a:	2000      	movs	r0, #0
 800133c:	f00f fd2a 	bl	8010d94 <strtok>
 8001340:	4602      	mov	r2, r0
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <cli_execute_action+0x1a0>)
 8001344:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL) argsStr = "";
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <cli_execute_action+0x1a0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <cli_execute_action+0x5c>
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <cli_execute_action+0x1a0>)
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <cli_execute_action+0x1a4>)
 8001352:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8001354:	4b50      	ldr	r3, [pc, #320]	; (8001498 <cli_execute_action+0x1a0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d14c      	bne.n	80013f6 <cli_execute_action+0xfe>
 800135c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001360:	4323      	orrs	r3, r4
 8001362:	d17d      	bne.n	8001460 <cli_execute_action+0x168>
        
        while(argsStr != NULL && argsStr[0] != '\0') {
 8001364:	e047      	b.n	80013f6 <cli_execute_action+0xfe>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8001366:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <cli_execute_action+0x1a0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b2d      	cmp	r3, #45	; 0x2d
 800136e:	d04b      	beq.n	8001408 <cli_execute_action+0x110>
 8001370:	4b49      	ldr	r3, [pc, #292]	; (8001498 <cli_execute_action+0x1a0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b7b      	cmp	r3, #123	; 0x7b
 8001378:	d046      	beq.n	8001408 <cli_execute_action+0x110>
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <cli_execute_action+0x1a0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b22      	cmp	r3, #34	; 0x22
 8001382:	d041      	beq.n	8001408 <cli_execute_action+0x110>
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <cli_execute_action+0x1a0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2f      	cmp	r3, #47	; 0x2f
 800138c:	d904      	bls.n	8001398 <cli_execute_action+0xa0>
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <cli_execute_action+0x1a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b39      	cmp	r3, #57	; 0x39
 8001396:	d937      	bls.n	8001408 <cli_execute_action+0x110>
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <cli_execute_action+0x1a0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	f00f f968 	bl	8010674 <__locale_ctype_ptr>
 80013a4:	4602      	mov	r2, r0
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <cli_execute_action+0xc4>
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3320      	adds	r3, #32
 80013ba:	e000      	b.n	80013be <cli_execute_action+0xc6>
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b60      	cmp	r3, #96	; 0x60
 80013c0:	dd14      	ble.n	80013ec <cli_execute_action+0xf4>
 80013c2:	4b35      	ldr	r3, [pc, #212]	; (8001498 <cli_execute_action+0x1a0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	73bb      	strb	r3, [r7, #14]
 80013ca:	f00f f953 	bl	8010674 <__locale_ctype_ptr>
 80013ce:	4602      	mov	r2, r0
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <cli_execute_action+0xee>
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	3320      	adds	r3, #32
 80013e4:	e000      	b.n	80013e8 <cli_execute_action+0xf0>
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	2b66      	cmp	r3, #102	; 0x66
 80013ea:	dd0d      	ble.n	8001408 <cli_execute_action+0x110>
            argsStr++;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <cli_execute_action+0x1a0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <cli_execute_action+0x1a0>)
 80013f4:	6013      	str	r3, [r2, #0]
        while(argsStr != NULL && argsStr[0] != '\0') {
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <cli_execute_action+0x1a0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <cli_execute_action+0x110>
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <cli_execute_action+0x1a0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ae      	bne.n	8001366 <cli_execute_action+0x6e>
        }
        
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <cli_execute_action+0x1a0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <cli_execute_action+0x12a>
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <cli_execute_action+0x1a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <cli_execute_action+0x12a>
 800141a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800141e:	4323      	orrs	r3, r4
 8001420:	d120      	bne.n	8001464 <cli_execute_action+0x16c>
        
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fe9a 	bl	800115c <cli_verify_arguments>
 8001428:	4603      	mov	r3, r0
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d119      	bne.n	8001468 <cli_execute_action+0x170>
        
        if(e->action == NULL) { 
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d103      	bne.n	8001444 <cli_execute_action+0x14c>
            ERR_PRINTLN("No action configured for action '%s'", ( (e->name == NULL)  ? "NULL_NAME" : e->name ) );
            ERR_PRINTLN("");
            argsStr = NULL;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <cli_execute_action+0x1a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
            return;
 8001442:	e024      	b.n	800148e <cli_execute_action+0x196>
        }
        
        currEl = e;
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <cli_execute_action+0x1a8>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
        
        e->action();
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4798      	blx	r3
        
        currEl = NULL;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <cli_execute_action+0x1a8>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
        argsStr = NULL;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <cli_execute_action+0x1a0>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
        
        return;
 800145c:	bf00      	nop
 800145e:	e016      	b.n	800148e <cli_execute_action+0x196>
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <cli_execute_action+0x172>
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <cli_execute_action+0x172>
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 8001468:	bf00      	nop
        
    }while(0);
    
    argsStr = NULL;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <cli_execute_action+0x1a0>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <cli_execute_action+0x1ac>)
 8001472:	f000 fc7b 	bl	8001d6c <cli_printf>
    MENU_PRINTLN("");
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <cli_execute_action+0x1b0>)
 8001478:	f000 fc78 	bl	8001d6c <cli_printf>
    cli_print_action(e);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fa0f 	bl	80008a0 <cli_print_action>
 8001482:	e004      	b.n	800148e <cli_execute_action+0x196>
    if(e == NULL) return;
 8001484:	bf00      	nop
 8001486:	e002      	b.n	800148e <cli_execute_action+0x196>
        return;
 8001488:	bf00      	nop
 800148a:	e000      	b.n	800148e <cli_execute_action+0x196>
        if(len == -1) return;
 800148c:	bf00      	nop
}
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	08011d08 	.word	0x08011d08
 8001498:	200004b8 	.word	0x200004b8
 800149c:	08011d0c 	.word	0x08011d0c
 80014a0:	200004bc 	.word	0x200004bc
 80014a4:	08011d10 	.word	0x08011d10
 80014a8:	08011c3c 	.word	0x08011c3c

080014ac <cli_find_action>:

static void cli_find_action(char cliBuffer[], size_t maxLen){
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d048      	beq.n	800154e <cli_find_action+0xa2>
    if(cliBuffer == NULL) return;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d047      	beq.n	8001552 <cli_find_action+0xa6>
    
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <cli_find_action+0xb4>)
 80014c4:	f107 040c 	add.w	r4, r7, #12
 80014c8:	461d      	mov	r5, r3
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014d2:	e884 0003 	stmia.w	r4, {r0, r1}
    cliElement_t* currentMenu = &init;
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    char* tkn = strtok((char*)cliBuffer, " ");
 80014dc:	4921      	ldr	r1, [pc, #132]	; (8001564 <cli_find_action+0xb8>)
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f00f fc58 	bl	8010d94 <strtok>
 80014e4:	62b8      	str	r0, [r7, #40]	; 0x28
    
    while(tkn != NULL){
 80014e6:	e021      	b.n	800152c <cli_find_action+0x80>
        cliElement_t* e = cli_find_element_in_menu(tkn, cliBuffer, maxLen, currentMenu);
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014f0:	f7ff fb3f 	bl	8000b72 <cli_find_element_in_menu>
 80014f4:	6278      	str	r0, [r7, #36]	; 0x24
        
        if(e == NULL){
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01b      	beq.n	8001534 <cli_find_action+0x88>
            break;
        }
        
        if(cli_is_sub_menu(e)){
 80014fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014fe:	f7ff f88c 	bl	800061a <cli_is_sub_menu>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <cli_find_action+0x62>
            DBG_PRINTLN("Entering submenu '%s'", e->name);
            currentMenu = e;
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150c:	e009      	b.n	8001522 <cli_find_action+0x76>
        }
        
        else if(cli_is_action(e)){
 800150e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001510:	f7ff f899 	bl	8000646 <cli_is_action>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01d      	beq.n	8001556 <cli_find_action+0xaa>
            DBG_PRINTLN("Action '%s' found", e->name);
            cli_execute_action(e);
 800151a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800151c:	f7ff feec 	bl	80012f8 <cli_execute_action>
            return;
 8001520:	e01a      	b.n	8001558 <cli_find_action+0xac>
            ERR_PRINTLN("Unknown type of CLI element (check for NULLs in CLIs defines ref cli.h lines 49 - 52)");
            ERR_PRINTLN("");
            return;
        }

        tkn = strtok(NULL, " ");
 8001522:	4910      	ldr	r1, [pc, #64]	; (8001564 <cli_find_action+0xb8>)
 8001524:	2000      	movs	r0, #0
 8001526:	f00f fc35 	bl	8010d94 <strtok>
 800152a:	62b8      	str	r0, [r7, #40]	; 0x28
    while(tkn != NULL){
 800152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1da      	bne.n	80014e8 <cli_find_action+0x3c>
 8001532:	e000      	b.n	8001536 <cli_find_action+0x8a>
            break;
 8001534:	bf00      	nop
    }
    
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
 8001536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	461a      	mov	r2, r3
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <cli_find_action+0xbc>)
 8001542:	f000 fc13 	bl	8001d6c <cli_printf>
    cli_print_menu(currentMenu);
 8001546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001548:	f7ff f970 	bl	800082c <cli_print_menu>
 800154c:	e004      	b.n	8001558 <cli_find_action+0xac>
    if(maxLen == 0) return;
 800154e:	bf00      	nop
 8001550:	e002      	b.n	8001558 <cli_find_action+0xac>
    if(cliBuffer == NULL) return;
 8001552:	bf00      	nop
 8001554:	e000      	b.n	8001558 <cli_find_action+0xac>
            return;
 8001556:	bf00      	nop
}
 8001558:	3730      	adds	r7, #48	; 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	08011db8 	.word	0x08011db8
 8001564:	08011c1c 	.word	0x08011c1c
 8001568:	08011d90 	.word	0x08011d90

0800156c <cli_buff_element_is_hex>:

static bool cli_buff_element_is_hex(char* base, size_t argLen){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b30      	cmp	r3, #48	; 0x30
 800157c:	d115      	bne.n	80015aa <cli_buff_element_is_hex+0x3e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	72fb      	strb	r3, [r7, #11]
 8001584:	f00f f876 	bl	8010674 <__locale_ctype_ptr>
 8001588:	4602      	mov	r2, r0
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	3301      	adds	r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d102      	bne.n	80015a0 <cli_buff_element_is_hex+0x34>
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	3320      	adds	r3, #32
 800159e:	e000      	b.n	80015a2 <cli_buff_element_is_hex+0x36>
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	2b78      	cmp	r3, #120	; 0x78
 80015a4:	d101      	bne.n	80015aa <cli_buff_element_is_hex+0x3e>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e038      	b.n	800161c <cli_buff_element_is_hex+0xb0>
    
    for(size_t i = 0; i < argLen; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e030      	b.n	8001612 <cli_buff_element_is_hex+0xa6>
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	72bb      	strb	r3, [r7, #10]
 80015ba:	f00f f85b 	bl	8010674 <__locale_ctype_ptr>
 80015be:	4602      	mov	r2, r0
 80015c0:	7abb      	ldrb	r3, [r7, #10]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d102      	bne.n	80015d6 <cli_buff_element_is_hex+0x6a>
 80015d0:	7abb      	ldrb	r3, [r7, #10]
 80015d2:	3320      	adds	r3, #32
 80015d4:	e000      	b.n	80015d8 <cli_buff_element_is_hex+0x6c>
 80015d6:	7abb      	ldrb	r3, [r7, #10]
 80015d8:	2b60      	cmp	r3, #96	; 0x60
 80015da:	dd17      	ble.n	800160c <cli_buff_element_is_hex+0xa0>
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	727b      	strb	r3, [r7, #9]
 80015e6:	f00f f845 	bl	8010674 <__locale_ctype_ptr>
 80015ea:	4602      	mov	r2, r0
 80015ec:	7a7b      	ldrb	r3, [r7, #9]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <cli_buff_element_is_hex+0x96>
 80015fc:	7a7b      	ldrb	r3, [r7, #9]
 80015fe:	3320      	adds	r3, #32
 8001600:	e000      	b.n	8001604 <cli_buff_element_is_hex+0x98>
 8001602:	7a7b      	ldrb	r3, [r7, #9]
 8001604:	2b66      	cmp	r3, #102	; 0x66
 8001606:	dc01      	bgt.n	800160c <cli_buff_element_is_hex+0xa0>
 8001608:	2301      	movs	r3, #1
 800160a:	e007      	b.n	800161c <cli_buff_element_is_hex+0xb0>
    for(size_t i = 0; i < argLen; i++){
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d3ca      	bcc.n	80015b0 <cli_buff_element_is_hex+0x44>
    }
    
    return false;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <cli_get_int_arg>:

static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b08d      	sub	sp, #52	; 0x34
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	4613      	mov	r3, r2
 8001630:	71fb      	strb	r3, [r7, #7]
    if(currEl == NULL || argsStr == NULL) {
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <cli_get_int_arg+0x174>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <cli_get_int_arg+0x1e>
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <cli_get_int_arg+0x178>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <cli_get_int_arg+0x22>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 8001642:	2300      	movs	r3, #0
 8001644:	e0a4      	b.n	8001790 <cli_get_int_arg+0x16c>
    }
    
    if(currEl->args == NULL) {
 8001646:	4b54      	ldr	r3, [pc, #336]	; (8001798 <cli_get_int_arg+0x174>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <cli_get_int_arg+0x30>
        ERR_PRINTLN("Argument string is null");
        return false;
 8001650:	2300      	movs	r3, #0
 8001652:	e09d      	b.n	8001790 <cli_get_int_arg+0x16c>
    }
    
    bool elipsisPresent = false;
 8001654:	2300      	movs	r3, #0
 8001656:	75fb      	strb	r3, [r7, #23]
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <cli_get_int_arg+0x174>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f107 0217 	add.w	r2, r7, #23
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f805 	bl	8000672 <cli_verify_args_str>
 8001668:	e9c7 0108 	strd	r0, r1, [r7, #32]
    
    if(argNum >= len && !elipsisPresent) {
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001678:	4299      	cmp	r1, r3
 800167a:	eb72 0304 	sbcs.w	r3, r2, r4
 800167e:	db07      	blt.n	8001690 <cli_get_int_arg+0x6c>
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <cli_get_int_arg+0x6c>
        ERR_PRINTLN("Argument index out of bounds");
        return false;
 800168c:	2300      	movs	r3, #0
 800168e:	e07f      	b.n	8001790 <cli_get_int_arg+0x16c>
    }
    
    char* argBase = argsStr;
 8001690:	4b42      	ldr	r3, [pc, #264]	; (800179c <cli_get_int_arg+0x178>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for(size_t i = 0; i < argNum; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
 800169a:	e006      	b.n	80016aa <cli_get_int_arg+0x86>
        argBase = cli_go_to_next_argument(argBase);
 800169c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800169e:	f7ff fb38 	bl	8000d12 <cli_go_to_next_argument>
 80016a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    for(size_t i = 0; i < argNum; i++)
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	3301      	adds	r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3f4      	bcc.n	800169c <cli_get_int_arg+0x78>
        
    if(argBase[0] == '\0'){ 
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <cli_get_int_arg+0x9a>
        ERR_PRINTLN("Argument '%c' index %u not found in buffer", ( (isUnsigned) ? 'u' : 'i' ), argNum);
        return false; 
 80016ba:	2300      	movs	r3, #0
 80016bc:	e068      	b.n	8001790 <cli_get_int_arg+0x16c>
    }

    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016ca:	4299      	cmp	r1, r3
 80016cc:	eb72 0304 	sbcs.w	r3, r2, r4
 80016d0:	da22      	bge.n	8001718 <cli_get_int_arg+0xf4>
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <cli_get_int_arg+0xc4>
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <cli_get_int_arg+0x174>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b75      	cmp	r3, #117	; 0x75
 80016e6:	d10d      	bne.n	8001704 <cli_get_int_arg+0xe0>
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d011      	beq.n	8001718 <cli_get_int_arg+0xf4>
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <cli_get_int_arg+0x174>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b69      	cmp	r3, #105	; 0x69
 8001702:	d009      	beq.n	8001718 <cli_get_int_arg+0xf4>
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <cli_get_int_arg+0x174>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b2a      	cmp	r3, #42	; 0x2a
 8001712:	d001      	beq.n	8001718 <cli_get_int_arg+0xf4>
        ERR_PRINTLN("Expected argument of type '%c', but argument list says '%c' in index %u", ( (isUnsigned) ? 'u' : 'i' ) , currEl->args[argNum], argNum);
        return false;
 8001714:	2300      	movs	r3, #0
 8001716:	e03b      	b.n	8001790 <cli_get_int_arg+0x16c>
    }
    else if(argNum >= len || currEl->args[argNum] == '*'){
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001724:	4299      	cmp	r1, r3
 8001726:	eb72 0304 	sbcs.w	r3, r2, r4
 800172a:	da07      	bge.n	800173c <cli_get_int_arg+0x118>
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <cli_get_int_arg+0x174>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4413      	add	r3, r2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b2a      	cmp	r3, #42	; 0x2a
 800173a:	d10d      	bne.n	8001758 <cli_get_int_arg+0x134>
        if(!cli_verify_int(argBase, isUnsigned, true)) return false;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001744:	f7ff fb19 	bl	8000d7a <cli_verify_int>
 8001748:	4603      	mov	r3, r0
 800174a:	f083 0301 	eor.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <cli_get_int_arg+0x134>
 8001754:	2300      	movs	r3, #0
 8001756:	e01b      	b.n	8001790 <cli_get_int_arg+0x16c>
    }
        
    int32_t argLen = cli_arg_str_len(argBase);
 8001758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175a:	f7ff fa79 	bl	8000c50 <cli_arg_str_len>
 800175e:	61f8      	str	r0, [r7, #28]
    
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4619      	mov	r1, r3
 8001764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001766:	f7ff ff01 	bl	800156c <cli_buff_element_is_hex>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <cli_get_int_arg+0x150>
 8001770:	2310      	movs	r3, #16
 8001772:	e000      	b.n	8001776 <cli_get_int_arg+0x152>
 8001774:	230a      	movs	r3, #10
 8001776:	61bb      	str	r3, [r7, #24]
        
    *res = strtol(argBase, NULL, num_base);
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	2100      	movs	r1, #0
 800177c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800177e:	f00f fbd9 	bl	8010f34 <strtol>
 8001782:	4603      	mov	r3, r0
 8001784:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	e9c2 3400 	strd	r3, r4, [r2]

    return true;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3734      	adds	r7, #52	; 0x34
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	200004bc 	.word	0x200004bc
 800179c:	200004b8 	.word	0x200004b8

080017a0 <cli_get_quotes>:

static bool cli_get_quotes(char* base, int32_t argLen, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	size_t pos = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    bool err = true;
 80017b2:	2301      	movs	r3, #1
 80017b4:	76fb      	strb	r3, [r7, #27]
    size_t endString = ( (isString == true) ? 1 : 0 );
 80017b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017ba:	613b      	str	r3, [r7, #16]
    
    for(int i = 1; i < argLen - 1; i++){
 80017bc:	2301      	movs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e06e      	b.n	80018a0 <cli_get_quotes+0x100>
        
        if(pos >= buffLen - endString){
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d302      	bcc.n	80017d4 <cli_get_quotes+0x34>
            ERR_PRINTLN("Buffer received is too tiny, exiting...");
            err = false;
 80017ce:	2300      	movs	r3, #0
 80017d0:	76fb      	strb	r3, [r7, #27]
            break;
 80017d2:	e06a      	b.n	80018aa <cli_get_quotes+0x10a>
        }
        
        if(base[i] == '\\'){
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b5c      	cmp	r3, #92	; 0x5c
 80017de:	d152      	bne.n	8001886 <cli_get_quotes+0xe6>
            switch(base[i + 1]){
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b5c      	cmp	r3, #92	; 0x5c
 80017ec:	d00b      	beq.n	8001806 <cli_get_quotes+0x66>
 80017ee:	2b5c      	cmp	r3, #92	; 0x5c
 80017f0:	dc04      	bgt.n	80017fc <cli_get_quotes+0x5c>
 80017f2:	2b22      	cmp	r3, #34	; 0x22
 80017f4:	d012      	beq.n	800181c <cli_get_quotes+0x7c>
 80017f6:	2b30      	cmp	r3, #48	; 0x30
 80017f8:	d01b      	beq.n	8001832 <cli_get_quotes+0x92>
 80017fa:	e03b      	b.n	8001874 <cli_get_quotes+0xd4>
 80017fc:	2b6e      	cmp	r3, #110	; 0x6e
 80017fe:	d023      	beq.n	8001848 <cli_get_quotes+0xa8>
 8001800:	2b72      	cmp	r3, #114	; 0x72
 8001802:	d02c      	beq.n	800185e <cli_get_quotes+0xbe>
 8001804:	e036      	b.n	8001874 <cli_get_quotes+0xd4>
                case '\\' : buff[pos++] = '\\'; i++; break;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	61fa      	str	r2, [r7, #28]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	225c      	movs	r2, #92	; 0x5c
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e033      	b.n	8001884 <cli_get_quotes+0xe4>
                case '"'  : buff[pos++] = '"';  i++; break;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	61fa      	str	r2, [r7, #28]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	2222      	movs	r2, #34	; 0x22
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e028      	b.n	8001884 <cli_get_quotes+0xe4>
                case '0'  : buff[pos++] = '\0'; i++; break;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	61fa      	str	r2, [r7, #28]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e01d      	b.n	8001884 <cli_get_quotes+0xe4>
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	61fa      	str	r2, [r7, #28]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	220a      	movs	r2, #10
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e012      	b.n	8001884 <cli_get_quotes+0xe4>
                case 'r'  : buff[pos++] = '\r'; i++; break;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	61fa      	str	r2, [r7, #28]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	220d      	movs	r2, #13
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e007      	b.n	8001884 <cli_get_quotes+0xe4>
                
                default   : buff[pos++] = '\\'; break;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	61fa      	str	r2, [r7, #28]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	225c      	movs	r2, #92	; 0x5c
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	bf00      	nop
            }
            continue;
 8001884:	e009      	b.n	800189a <cli_get_quotes+0xfa>
        }
        
        buff[pos++] = base[i];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	441a      	add	r2, r3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	1c59      	adds	r1, r3, #1
 8001890:	61f9      	str	r1, [r7, #28]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	440b      	add	r3, r1
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < argLen - 1; i++){
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	db8b      	blt.n	80017c2 <cli_get_quotes+0x22>
    }
    
    if(isString && pos < buffLen) buff[pos++] = '\0';
 80018aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <cli_get_quotes+0x128>
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d206      	bcs.n	80018c8 <cli_get_quotes+0x128>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	61fa      	str	r2, [r7, #28]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    
    *res = pos;
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	601a      	str	r2, [r3, #0]
    
    return err;
 80018ce:	7efb      	ldrb	r3, [r7, #27]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3724      	adds	r7, #36	; 0x24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <cli_get_curly_braces>:

static bool cli_get_curly_braces(char* base, int32_t argLen, uint8_t buff[], size_t buffLen, size_t *res,  bool isString){
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b08d      	sub	sp, #52	; 0x34
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
	size_t pos = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool err = true;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    size_t endString = ( (isString == true) ? 1 : 0 );
 80018f4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018f8:	623b      	str	r3, [r7, #32]

    for(int i = 1; i < argLen - 1; i++){
 80018fa:	2301      	movs	r3, #1
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	e04d      	b.n	800199c <cli_get_curly_braces+0xc0>
        
        if(base[i] == ' ') continue;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b20      	cmp	r3, #32
 800190a:	d043      	beq.n	8001994 <cli_get_curly_braces+0xb8>

        int32_t sz = cli_arg_str_len(&base[i]);
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f99c 	bl	8000c50 <cli_arg_str_len>
 8001918:	61f8      	str	r0, [r7, #28]
        
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe21 	bl	800156c <cli_buff_element_is_hex>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <cli_get_curly_braces+0x58>
 8001930:	2310      	movs	r3, #16
 8001932:	e000      	b.n	8001936 <cli_get_curly_braces+0x5a>
 8001934:	230a      	movs	r3, #10
 8001936:	61bb      	str	r3, [r7, #24]
        
        uint64_t num = (uint64_t)strtol(&base[i], NULL, num_base);
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f00f faf6 	bl	8010f34 <strtol>
 8001948:	4603      	mov	r3, r0
 800194a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800194e:	e9c7 3404 	strd	r3, r4, [r7, #16]
        
        if(num > 255){
 8001952:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001956:	2c00      	cmp	r4, #0
 8001958:	bf08      	it	eq
 800195a:	f5b3 7f80 	cmpeq.w	r3, #256	; 0x100
 800195e:	d303      	bcc.n	8001968 <cli_get_curly_braces+0x8c>
            ERR_PRINTLN("Buffer argument error in byte number %u : Exceeded maximum value", pos);
            err = false;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8001966:	e01e      	b.n	80019a6 <cli_get_curly_braces+0xca>
        }
        
        if(pos >= buffLen - endString){
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d303      	bcc.n	800197c <cli_get_curly_braces+0xa0>
            ERR_PRINTLN("Buffer received is too tiny, exiting...");
            err = false;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 800197a:	e014      	b.n	80019a6 <cli_get_curly_braces+0xca>
        }
        
        buff[pos++] = (uint8_t) num;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	7c3a      	ldrb	r2, [r7, #16]
 8001988:	701a      	strb	r2, [r3, #0]
        
        i += sz;
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e000      	b.n	8001996 <cli_get_curly_braces+0xba>
        if(base[i] == ' ') continue;
 8001994:	bf00      	nop
    for(int i = 1; i < argLen - 1; i++){
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	3301      	adds	r3, #1
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbac      	blt.n	8001900 <cli_get_curly_braces+0x24>
    }
    
    if(isString && pos < buffLen) buff[pos++] = '\0';
 80019a6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <cli_get_curly_braces+0xe8>
 80019ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d206      	bcs.n	80019c4 <cli_get_curly_braces+0xe8>
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
    
    *res = pos;
 80019c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c8:	601a      	str	r2, [r3, #0]
    
    return err;
 80019ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3734      	adds	r7, #52	; 0x34
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
	...

080019d8 <cli_get_buff_arg>:

static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b08d      	sub	sp, #52	; 0x34
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
    if(currEl == NULL || argsStr == NULL) {
 80019e6:	4b5e      	ldr	r3, [pc, #376]	; (8001b60 <cli_get_buff_arg+0x188>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <cli_get_buff_arg+0x1e>
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <cli_get_buff_arg+0x18c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <cli_get_buff_arg+0x22>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e0ad      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    }
    
    if(currEl->args == NULL) {
 80019fa:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <cli_get_buff_arg+0x188>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <cli_get_buff_arg+0x30>
        ERR_PRINTLN("Argument string is null");
        return false;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e0a6      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    }
    
    bool elipsisPresent = false;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	74fb      	strb	r3, [r7, #19]
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8001a0c:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <cli_get_buff_arg+0x188>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f107 0213 	add.w	r2, r7, #19
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fe2b 	bl	8000672 <cli_verify_args_str>
 8001a1c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
    if(argNum >= len && !elipsisPresent) { 
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a2c:	4299      	cmp	r1, r3
 8001a2e:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a32:	db07      	blt.n	8001a44 <cli_get_buff_arg+0x6c>
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <cli_get_buff_arg+0x6c>
        ERR_PRINTLN("Argument index out of bounds");
        return false;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e088      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    }
    
    char* argBase = argsStr;
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <cli_get_buff_arg+0x18c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    
    for(size_t i = 0; i < argNum; i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	e006      	b.n	8001a5e <cli_get_buff_arg+0x86>
        argBase = cli_go_to_next_argument(argBase);
 8001a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a52:	f7ff f95e 	bl	8000d12 <cli_go_to_next_argument>
 8001a56:	6278      	str	r0, [r7, #36]	; 0x24
    for(size_t i = 0; i < argNum; i++)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	6a3a      	ldr	r2, [r7, #32]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3f4      	bcc.n	8001a50 <cli_get_buff_arg+0x78>
        
    if(argBase[0] == '\0') {
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <cli_get_buff_arg+0x9a>
        ERR_PRINTLN("Argument '%c' number %u not found in buffer", ( (isString) ? 's' : 'b' ), argNum );
        return false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e071      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    }
    
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a7e:	4299      	cmp	r1, r3
 8001a80:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a84:	da24      	bge.n	8001ad0 <cli_get_buff_arg+0xf8>
 8001a86:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <cli_get_buff_arg+0xcc>
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <cli_get_buff_arg+0x188>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b62      	cmp	r3, #98	; 0x62
 8001aa2:	d10b      	bne.n	8001abc <cli_get_buff_arg+0xe4>
 8001aa4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d011      	beq.n	8001ad0 <cli_get_buff_arg+0xf8>
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <cli_get_buff_arg+0x188>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b73      	cmp	r3, #115	; 0x73
 8001aba:	d009      	beq.n	8001ad0 <cli_get_buff_arg+0xf8>
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <cli_get_buff_arg+0x188>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aca:	d001      	beq.n	8001ad0 <cli_get_buff_arg+0xf8>
        ERR_PRINTLN("Expected argument of type 's', but argument list says %c in index %u", currEl->args[argNum], argNum);
        return false;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e042      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    }
    else if(argNum >= len || currEl->args[argNum] == '*'){
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001adc:	4299      	cmp	r1, r3
 8001ade:	eb72 0304 	sbcs.w	r3, r2, r4
 8001ae2:	da07      	bge.n	8001af4 <cli_get_buff_arg+0x11c>
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <cli_get_buff_arg+0x188>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b2a      	cmp	r3, #42	; 0x2a
 8001af2:	d103      	bne.n	8001afc <cli_get_buff_arg+0x124>
        cli_verify_buffer(argBase, true);
 8001af4:	2101      	movs	r1, #1
 8001af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af8:	f7ff fa2f 	bl	8000f5a <cli_verify_buffer>
    }
    
    int32_t argLen = cli_arg_str_len(argBase);
 8001afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001afe:	f7ff f8a7 	bl	8000c50 <cli_arg_str_len>
 8001b02:	6178      	str	r0, [r7, #20]
    
    if(argLen == -1) { 
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d101      	bne.n	8001b10 <cli_get_buff_arg+0x138>
        ERR_PRINTLN("Buffer in argument %u does not end", argNum);
        return false;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e022      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    }

    if(argBase[0] == '{') 
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b7b      	cmp	r3, #123	; 0x7b
 8001b16:	d10c      	bne.n	8001b32 <cli_get_buff_arg+0x15a>
        return cli_get_curly_braces(argBase, argLen, buff, buffLen, res, isString);
 8001b18:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2a:	f7ff fed7 	bl	80018dc <cli_get_curly_braces>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	e011      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    else if(argBase[0] == '"')
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b22      	cmp	r3, #34	; 0x22
 8001b38:	d10c      	bne.n	8001b54 <cli_get_buff_arg+0x17c>
        return cli_get_quotes(argBase, argLen, buff, buffLen, res, isString);
 8001b3a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	6979      	ldr	r1, [r7, #20]
 8001b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4c:	f7ff fe28 	bl	80017a0 <cli_get_quotes>
 8001b50:	4603      	mov	r3, r0
 8001b52:	e000      	b.n	8001b56 <cli_get_buff_arg+0x17e>
    
    ERR_PRINTLN("Buffer does not begin with \" nor {");
    return false;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	372c      	adds	r7, #44	; 0x2c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200004bc 	.word	0x200004bc
 8001b64:	200004b8 	.word	0x200004b8

08001b68 <cli_treat_command>:

/**********************************************
 * PRIVATE / PUBLIC FUNCTIONS
 *********************************************/
 
void cli_treat_command(char cliBuffer[], size_t maxLen){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d019      	beq.n	8001bac <cli_treat_command+0x44>
    if(cliBuffer == NULL) return;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d018      	beq.n	8001bb0 <cli_treat_command+0x48>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment == false) return;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <cli_treat_command+0x54>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d113      	bne.n	8001bb4 <cli_treat_command+0x4c>
    
    cli_cmd_waiting_treatment = false; 
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <cli_treat_command+0x54>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
#endif //CLI_POLLING_EN
    
    cli_find_action(cliBuffer, maxLen);
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fc89 	bl	80014ac <cli_find_action>
    
    len = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <cli_treat_command+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
    memset(cliBuffer, 0, maxLen);
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f00e fd9f 	bl	80106e8 <memset>
 8001baa:	e004      	b.n	8001bb6 <cli_treat_command+0x4e>
    if(maxLen == 0) return;
 8001bac:	bf00      	nop
 8001bae:	e002      	b.n	8001bb6 <cli_treat_command+0x4e>
    if(cliBuffer == NULL) return;
 8001bb0:	bf00      	nop
 8001bb2:	e000      	b.n	8001bb6 <cli_treat_command+0x4e>
    if(cli_cmd_waiting_treatment == false) return;
 8001bb4:	bf00      	nop
    DBG_PRINT("Cmd treated, enter new command = ");
}
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200004c0 	.word	0x200004c0
 8001bc0:	200004b4 	.word	0x200004b4

08001bc4 <cli_get_int_argument>:

/**********************************************
 * PUBLIC FUNCTIONS
 *********************************************/

int64_t cli_get_int_argument(size_t argNum, bool *res){
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    int64_t ret = 0;
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	f04f 0400 	mov.w	r4, #0
 8001bd6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    bool success = cli_get_int_arg(argNum, &ret, false);
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fd1e 	bl	8001624 <cli_get_int_arg>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = success;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <cli_get_int_argument+0x34>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7dfa      	ldrb	r2, [r7, #23]
 8001bf6:	701a      	strb	r2, [r3, #0]
    
    return ret;
 8001bf8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4621      	mov	r1, r4
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}

08001c06 <cli_get_uint_argument>:

uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8001c06:	b590      	push	{r4, r7, lr}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
    uint64_t ret = 0;
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f04f 0400 	mov.w	r4, #0
 8001c18:	e9c7 3402 	strd	r3, r4, [r7, #8]
    bool success = cli_get_int_arg(argNum, (int64_t*)&ret, true);
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fcfd 	bl	8001624 <cli_get_int_arg>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = success;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <cli_get_uint_argument+0x34>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	701a      	strb	r2, [r3, #0]
    
    return ret;
 8001c3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4621      	mov	r1, r4
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}

08001c48 <cli_get_buffer_argument>:
    
    return ret;
}
#endif

size_t cli_get_buffer_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
    size_t bRead = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, false);
 8001c5a:	f107 0210 	add.w	r2, r7, #16
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff feb5 	bl	80019d8 <cli_get_buff_arg>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = ret;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <cli_get_buffer_argument+0x36>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	7dfa      	ldrb	r2, [r7, #23]
 8001c7c:	701a      	strb	r2, [r3, #0]
    
    return bRead;
 8001c7e:	693b      	ldr	r3, [r7, #16]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <cli_get_string_argument>:
    if(res != NULL) *res = ret;
    
    return bRead;
}

size_t cli_get_string_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
    size_t bRead = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, true);
 8001c9a:	f107 0210 	add.w	r2, r7, #16
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fe95 	bl	80019d8 <cli_get_buff_arg>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = ret;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <cli_get_string_argument+0x36>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7dfa      	ldrb	r2, [r7, #23]
 8001cbc:	701a      	strb	r2, [r3, #0]
    
    return bRead;
 8001cbe:	693b      	ldr	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <cli_insert_char>:

cli_status_e cli_insert_char(char cliBuffer[], size_t maxLen, char const c){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	71fb      	strb	r3, [r7, #7]
    if(maxLen == 0) return CLI_ERR;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <cli_insert_char+0x18>
 8001cdc:	2306      	movs	r3, #6
 8001cde:	e03d      	b.n	8001d5c <cli_insert_char+0x94>
    if(cliBuffer == NULL) return CLI_ERR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <cli_insert_char+0x22>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e038      	b.n	8001d5c <cli_insert_char+0x94>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment){
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <cli_insert_char+0x9c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <cli_insert_char+0x2e>
        ERR_PRINTLN("Command waiting for treatment");
        return CLI_WAITING_TREATMENT;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e032      	b.n	8001d5c <cli_insert_char+0x94>
    }
#endif //CLI_POLLING_EN

    if(c == '\r') return CLI_CONTINUE;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	2b0d      	cmp	r3, #13
 8001cfa:	d101      	bne.n	8001d00 <cli_insert_char+0x38>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e02d      	b.n	8001d5c <cli_insert_char+0x94>

    if(c != '\n'){
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b0a      	cmp	r3, #10
 8001d04:	d011      	beq.n	8001d2a <cli_insert_char+0x62>
        cliBuffer[((len++)%maxLen)] = c;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <cli_insert_char+0xa0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	4916      	ldr	r1, [pc, #88]	; (8001d68 <cli_insert_char+0xa0>)
 8001d0e:	600a      	str	r2, [r1, #0]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	fb01 f202 	mul.w	r2, r1, r2
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	701a      	strb	r2, [r3, #0]
        return CLI_CONTINUE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e018      	b.n	8001d5c <cli_insert_char+0x94>
    }
    
    if(len >= maxLen){
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <cli_insert_char+0xa0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d809      	bhi.n	8001d48 <cli_insert_char+0x80>
        len = 0;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <cli_insert_char+0xa0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
        memset(cliBuffer, 0, maxLen);
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f00e fcd2 	bl	80106e8 <memset>
        ERR_PRINT("COMMAND TOO LARGE! Enter new command = ");
        return CLI_TOO_BIG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e009      	b.n	8001d5c <cli_insert_char+0x94>
    }
    
    cliBuffer[len] = '\0';
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <cli_insert_char+0xa0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 0)
    cli_treat_command(cliBuffer, maxLen);
    return CLI_COMMAND_RCV;
#else
    cli_cmd_waiting_treatment = true;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <cli_insert_char+0x9c>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
    return CLI_WAITING_TREATMENT;
 8001d5a:	2304      	movs	r3, #4
#endif //CLI_POLLING_EN
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200004c0 	.word	0x200004c0
 8001d68:	200004b4 	.word	0x200004b4

08001d6c <cli_printf>:

__attribute__((weak)) void cli_printf(char const * const str, ...){
 8001d6c:	b40f      	push	{r0, r1, r2, r3}
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, str);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	607b      	str	r3, [r7, #4]
    vprintf(str, args);
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	6938      	ldr	r0, [r7, #16]
 8001d7e:	f00f f8ef 	bl	8010f60 <viprintf>
    va_end(args);

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d8c:	b004      	add	sp, #16
 8001d8e:	4770      	bx	lr

08001d90 <cli_rcv_char_cb_irq>:
 * CLI Receive char (IRQ)
 *
 * @brief This function receives a character and puts in the cli buffer
 *
 **********************************************************************/
void cli_rcv_char_cb_irq(){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	cli_insert_char(cliBuffer, sizeof(cliBuffer), cli_char);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <cli_rcv_char_cb_irq+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <cli_rcv_char_cb_irq+0x24>)
 8001d9e:	f7ff ff93 	bl	8001cc8 <cli_insert_char>
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 8001da2:	2201      	movs	r2, #1
 8001da4:	4902      	ldr	r1, [pc, #8]	; (8001db0 <cli_rcv_char_cb_irq+0x20>)
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <cli_rcv_char_cb_irq+0x28>)
 8001da8:	f00d fb68 	bl	800f47c <HAL_UART_Receive_IT>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200004c1 	.word	0x200004c1
 8001db4:	200004c4 	.word	0x200004c4
 8001db8:	20014ecc 	.word	0x20014ecc

08001dbc <cli_init>:
 * CLI INIT
 *
 * @brief This function initializes the CLI
 *
 **********************************************************************/
void cli_init(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	memset(cliBuffer, 0, sizeof(cliBuffer));
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <cli_init+0x30>)
 8001dc6:	f00e fc8f 	bl	80106e8 <memset>
	HAL_UART_Abort(&USART_CLI);
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <cli_init+0x34>)
 8001dcc:	f00d fbab 	bl	800f526 <HAL_UART_Abort>
	HAL_UART_AbortReceive_IT(&USART_CLI);
 8001dd0:	4807      	ldr	r0, [pc, #28]	; (8001df0 <cli_init+0x34>)
 8001dd2:	f00d fd1b 	bl	800f80c <HAL_UART_AbortReceive_IT>
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <cli_init+0x34>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&cli_char, 1);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4905      	ldr	r1, [pc, #20]	; (8001df4 <cli_init+0x38>)
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <cli_init+0x34>)
 8001de2:	f00d fb4b 	bl	800f47c <HAL_UART_Receive_IT>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200004c4 	.word	0x200004c4
 8001df0:	20014ecc 	.word	0x20014ecc
 8001df4:	200004c1 	.word	0x200004c1

08001df8 <cli_process>:
 * CLI Process
 *
 * @brief This function treats the command sent by CLI
 *
 **********************************************************************/
void cli_process(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	cli_treat_command(cliBuffer, sizeof(cliBuffer));
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	4802      	ldr	r0, [pc, #8]	; (8001e08 <cli_process+0x10>)
 8001e00:	f7ff feb2 	bl	8001b68 <cli_treat_command>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200004c4 	.word	0x200004c4

08001e0c <read>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void read(){
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001e12:	2100      	movs	r1, #0
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff fef6 	bl	8001c06 <cli_get_uint_argument>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	613b      	str	r3, [r7, #16]
	uint32_t len = cli_get_uint32_argument(1, NULL);
 8001e20:	2100      	movs	r1, #0
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff feef 	bl	8001c06 <cli_get_uint_argument>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	60fb      	str	r3, [r7, #12]

	/* Allocate buffer
	 --------------------------------------------------*/
	uint8_t* buffer = (uint8_t*)os_heap_alloc(len);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fed4 	bl	8002bdc <os_heap_alloc>
 8001e34:	60b8      	str	r0, [r7, #8]
	ASSERT(buffer != NULL);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <read+0x3a>
 8001e3c:	222c      	movs	r2, #44	; 0x2c
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <read+0xac>)
 8001e40:	481e      	ldr	r0, [pc, #120]	; (8001ebc <read+0xb0>)
 8001e42:	f00e ff21 	bl	8010c88 <iprintf>

	/* Read from flash
	 --------------------------------------------------*/
	int32_t readB = os_flash_read(addr, buffer, len);
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6938      	ldr	r0, [r7, #16]
 8001e4c:	f003 fe2e 	bl	8005aac <os_flash_read>
 8001e50:	6078      	str	r0, [r7, #4]
	ASSERT(readB >= 0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da04      	bge.n	8001e62 <read+0x56>
 8001e58:	2231      	movs	r2, #49	; 0x31
 8001e5a:	4917      	ldr	r1, [pc, #92]	; (8001eb8 <read+0xac>)
 8001e5c:	4817      	ldr	r0, [pc, #92]	; (8001ebc <read+0xb0>)
 8001e5e:	f00e ff13 	bl	8010c88 <iprintf>

	/* Show values
	 --------------------------------------------------*/
	PRINTLN("Read %ld bytes", readB);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2235      	movs	r2, #53	; 0x35
 8001e66:	4914      	ldr	r1, [pc, #80]	; (8001eb8 <read+0xac>)
 8001e68:	4815      	ldr	r0, [pc, #84]	; (8001ec0 <read+0xb4>)
 8001e6a:	f00e ff0d 	bl	8010c88 <iprintf>
	for(int i = 0; i < readB; i++){
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e00d      	b.n	8001e90 <read+0x84>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2237      	movs	r2, #55	; 0x37
 8001e82:	490d      	ldr	r1, [pc, #52]	; (8001eb8 <read+0xac>)
 8001e84:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <read+0xb8>)
 8001e86:	f00e feff 	bl	8010c88 <iprintf>
	for(int i = 0; i < readB; i++){
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbed      	blt.n	8001e74 <read+0x68>
	}

	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f000 ff05 	bl	8002ca8 <os_heap_free>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <read+0xa2>
 8001ea4:	223a      	movs	r2, #58	; 0x3a
 8001ea6:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <read+0xac>)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <read+0xb0>)
 8001eaa:	f00e feed 	bl	8010c88 <iprintf>
}
 8001eae:	bf00      	nop
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	08011e60 	.word	0x08011e60
 8001ebc:	08011e6c 	.word	0x08011e6c
 8001ec0:	08011e88 	.word	0x08011e88
 8001ec4:	08011ea4 	.word	0x08011ea4

08001ec8 <write>:

static void write(){
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b0b9      	sub	sp, #228	; 0xe4
 8001ecc:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	uint8_t buffer[200];
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fe98 	bl	8001c06 <cli_get_uint_argument>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460c      	mov	r4, r1
 8001eda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001ede:	4639      	mov	r1, r7
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	22c8      	movs	r2, #200	; 0xc8
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff feaf 	bl	8001c48 <cli_get_buffer_argument>
 8001eea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	/* Write into flash
	 --------------------------------------------------*/
	int32_t writeB = os_flash_write(addr, buffer, realSize);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001efa:	f003 fcbf 	bl	800587c <os_flash_write>
 8001efe:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	ASSERT(writeB >= 0);
 8001f02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da04      	bge.n	8001f14 <write+0x4c>
 8001f0a:	2248      	movs	r2, #72	; 0x48
 8001f0c:	4915      	ldr	r1, [pc, #84]	; (8001f64 <write+0x9c>)
 8001f0e:	4816      	ldr	r0, [pc, #88]	; (8001f68 <write+0xa0>)
 8001f10:	f00e feba 	bl	8010c88 <iprintf>

	/* Show written values
	 --------------------------------------------------*/
	PRINTLN("Write %ld bytes", writeB);
 8001f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f18:	224c      	movs	r2, #76	; 0x4c
 8001f1a:	4912      	ldr	r1, [pc, #72]	; (8001f64 <write+0x9c>)
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <write+0xa4>)
 8001f1e:	f00e feb3 	bl	8010c88 <iprintf>
	for(int i = 0; i < realSize; i++){
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f28:	e011      	b.n	8001f4e <write+0x86>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001f2a:	463a      	mov	r2, r7
 8001f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f30:	4413      	add	r3, r2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f3a:	224e      	movs	r2, #78	; 0x4e
 8001f3c:	4909      	ldr	r1, [pc, #36]	; (8001f64 <write+0x9c>)
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <write+0xa8>)
 8001f40:	f00e fea2 	bl	8010c88 <iprintf>
	for(int i = 0; i < realSize; i++){
 8001f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f52:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d8e7      	bhi.n	8001f2a <write+0x62>
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	37dc      	adds	r7, #220	; 0xdc
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	08011e60 	.word	0x08011e60
 8001f68:	08011e6c 	.word	0x08011e6c
 8001f6c:	08011ec4 	.word	0x08011ec4
 8001f70:	08011ea4 	.word	0x08011ea4

08001f74 <erase>:

static void erase(){
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fe42 	bl	8001c06 <cli_get_uint_argument>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	60fb      	str	r3, [r7, #12]
	uint32_t num = cli_get_uint32_argument(1, NULL);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fe3b 	bl	8001c06 <cli_get_uint_argument>
 8001f90:	4603      	mov	r3, r0
 8001f92:	460c      	mov	r4, r1
 8001f94:	60bb      	str	r3, [r7, #8]

	/* Erase sectors
	 --------------------------------------------------*/
	int32_t erase = os_flash_erase(addrB, num);
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f003 fdd5 	bl	8005b48 <os_flash_erase>
 8001f9e:	6078      	str	r0, [r7, #4]
	ASSERT(erase >= 0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da04      	bge.n	8001fb0 <erase+0x3c>
 8001fa6:	225c      	movs	r2, #92	; 0x5c
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <erase+0x50>)
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <erase+0x54>)
 8001fac:	f00e fe6c 	bl	8010c88 <iprintf>

	/* Feedback
	 --------------------------------------------------*/
	PRINTLN("erase %ld sectors", erase);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2260      	movs	r2, #96	; 0x60
 8001fb4:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <erase+0x50>)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <erase+0x58>)
 8001fb8:	f00e fe66 	bl	8010c88 <iprintf>
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	08011e60 	.word	0x08011e60
 8001fc8:	08011e6c 	.word	0x08011e6c
 8001fcc:	08011ee0 	.word	0x08011ee0

08001fd0 <open>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void open(){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b090      	sub	sp, #64	; 0x40
 8001fd4:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8001fd6:	4639      	mov	r1, r7
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2232      	movs	r2, #50	; 0x32
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff fe53 	bl	8001c88 <cli_get_string_argument>

	/* Open file
	 --------------------------------------------------*/
	int err = lfs_file_open(&lfs, &lfs_file, name, LFS_O_CREAT | LFS_O_RDWR);
 8001fe2:	463a      	mov	r2, r7
 8001fe4:	f240 1303 	movw	r3, #259	; 0x103
 8001fe8:	490d      	ldr	r1, [pc, #52]	; (8002020 <open+0x50>)
 8001fea:	480e      	ldr	r0, [pc, #56]	; (8002024 <open+0x54>)
 8001fec:	f00a fbe6 	bl	800c7bc <lfs_file_open>
 8001ff0:	6378      	str	r0, [r7, #52]	; 0x34
	if(err < 0)
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da09      	bge.n	800200c <open+0x3c>
		PRINTLN("lfs open '%s' error %d", name, err);
 8001ff8:	463a      	mov	r2, r7
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	2229      	movs	r2, #41	; 0x29
 8002002:	4909      	ldr	r1, [pc, #36]	; (8002028 <open+0x58>)
 8002004:	4809      	ldr	r0, [pc, #36]	; (800202c <open+0x5c>)
 8002006:	f00e fe3f 	bl	8010c88 <iprintf>
	else{
		PRINTLN("Open '%s' OK", name);
	}
}
 800200a:	e005      	b.n	8002018 <open+0x48>
		PRINTLN("Open '%s' OK", name);
 800200c:	463b      	mov	r3, r7
 800200e:	222b      	movs	r2, #43	; 0x2b
 8002010:	4905      	ldr	r1, [pc, #20]	; (8002028 <open+0x58>)
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <open+0x60>)
 8002014:	f00e fe38 	bl	8010c88 <iprintf>
}
 8002018:	bf00      	nop
 800201a:	3738      	adds	r7, #56	; 0x38
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000544 	.word	0x20000544
 8002024:	20014e10 	.word	0x20014e10
 8002028:	08011f54 	.word	0x08011f54
 800202c:	08011f60 	.word	0x08011f60
 8002030:	08011f84 	.word	0x08011f84

08002034 <bRead>:

static void bRead(){
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 800203a:	2100      	movs	r1, #0
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff fde2 	bl	8001c06 <cli_get_uint_argument>
 8002042:	4603      	mov	r3, r0
 8002044:	460c      	mov	r4, r1
 8002046:	60bb      	str	r3, [r7, #8]

	/* Allocate buffer
	 --------------------------------------------------*/
	uint8_t* buffer = os_heap_alloc(nBytes);
 8002048:	68b8      	ldr	r0, [r7, #8]
 800204a:	f000 fdc7 	bl	8002bdc <os_heap_alloc>
 800204e:	6078      	str	r0, [r7, #4]

	/* read from file
	 --------------------------------------------------*/
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4918      	ldr	r1, [pc, #96]	; (80020b8 <bRead+0x84>)
 8002056:	4819      	ldr	r0, [pc, #100]	; (80020bc <bRead+0x88>)
 8002058:	f00a fc10 	bl	800c87c <lfs_file_read>
 800205c:	6038      	str	r0, [r7, #0]
	if(err < 0)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da06      	bge.n	8002072 <bRead+0x3e>
		PRINTLN("lfs read error %ld", err);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	223d      	movs	r2, #61	; 0x3d
 8002068:	4915      	ldr	r1, [pc, #84]	; (80020c0 <bRead+0x8c>)
 800206a:	4816      	ldr	r0, [pc, #88]	; (80020c4 <bRead+0x90>)
 800206c:	f00e fe0c 	bl	8010c88 <iprintf>
 8002070:	e01a      	b.n	80020a8 <bRead+0x74>
	else{
		/* Show values
		 --------------------------------------------------*/
		PRINTLN("Read %ld bytes", err);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2241      	movs	r2, #65	; 0x41
 8002076:	4912      	ldr	r1, [pc, #72]	; (80020c0 <bRead+0x8c>)
 8002078:	4813      	ldr	r0, [pc, #76]	; (80020c8 <bRead+0x94>)
 800207a:	f00e fe05 	bl	8010c88 <iprintf>
		for(int i = 0; i < nBytes; i++){
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e00d      	b.n	80020a0 <bRead+0x6c>
			PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2243      	movs	r2, #67	; 0x43
 8002092:	490b      	ldr	r1, [pc, #44]	; (80020c0 <bRead+0x8c>)
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <bRead+0x98>)
 8002096:	f00e fdf7 	bl	8010c88 <iprintf>
		for(int i = 0; i < nBytes; i++){
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8ed      	bhi.n	8002084 <bRead+0x50>
	}


	/* free buffer
	 --------------------------------------------------*/
	os_heap_free(buffer);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fdfd 	bl	8002ca8 <os_heap_free>
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000544 	.word	0x20000544
 80020bc:	20014e10 	.word	0x20014e10
 80020c0:	08011f54 	.word	0x08011f54
 80020c4:	08011fa0 	.word	0x08011fa0
 80020c8:	08011fc0 	.word	0x08011fc0
 80020cc:	08011fdc 	.word	0x08011fdc

080020d0 <read>:

static void read(){
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 80020d6:	2100      	movs	r1, #0
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fd94 	bl	8001c06 <cli_get_uint_argument>
 80020de:	4603      	mov	r3, r0
 80020e0:	460c      	mov	r4, r1
 80020e2:	60fb      	str	r3, [r7, #12]

	/* Allocate buffer
	 --------------------------------------------------*/
	uint8_t* buffer = os_heap_alloc(nBytes+1);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fd77 	bl	8002bdc <os_heap_alloc>
 80020ee:	60b8      	str	r0, [r7, #8]
	buffer[nBytes] = '\0';
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]

	/* read from file
	 --------------------------------------------------*/
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	4913      	ldr	r1, [pc, #76]	; (800214c <read+0x7c>)
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <read+0x80>)
 8002102:	f00a fbbb 	bl	800c87c <lfs_file_read>
 8002106:	6078      	str	r0, [r7, #4]
	if(err < 0)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	da06      	bge.n	800211c <read+0x4c>
		PRINTLN("lfs read error %ld", err);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	225c      	movs	r2, #92	; 0x5c
 8002112:	4910      	ldr	r1, [pc, #64]	; (8002154 <read+0x84>)
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <read+0x88>)
 8002116:	f00e fdb7 	bl	8010c88 <iprintf>
 800211a:	e010      	b.n	800213e <read+0x6e>
	else{

		buffer[err] = '\0';
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	4413      	add	r3, r2
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
		/* Show values
		 --------------------------------------------------*/
		PRINTLN("Read %ld bytes", err);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2262      	movs	r2, #98	; 0x62
 800212a:	490a      	ldr	r1, [pc, #40]	; (8002154 <read+0x84>)
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <read+0x8c>)
 800212e:	f00e fdab 	bl	8010c88 <iprintf>
		PRINTLN("File : %s", buffer);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2263      	movs	r2, #99	; 0x63
 8002136:	4907      	ldr	r1, [pc, #28]	; (8002154 <read+0x84>)
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <read+0x90>)
 800213a:	f00e fda5 	bl	8010c88 <iprintf>
	}

	/* free buffer
	 --------------------------------------------------*/
	os_heap_free(buffer);
 800213e:	68b8      	ldr	r0, [r7, #8]
 8002140:	f000 fdb2 	bl	8002ca8 <os_heap_free>
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bd90      	pop	{r4, r7, pc}
 800214c:	20000544 	.word	0x20000544
 8002150:	20014e10 	.word	0x20014e10
 8002154:	08011f54 	.word	0x08011f54
 8002158:	08011fa0 	.word	0x08011fa0
 800215c:	08011fc0 	.word	0x08011fc0
 8002160:	08011ffc 	.word	0x08011ffc

08002164 <write>:

static void write(){
 8002164:	b580      	push	{r7, lr}
 8002166:	b0b4      	sub	sp, #208	; 0xd0
 8002168:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	uint8_t buffer[200];
	uint32_t nBytes = cli_get_string_argument(0, buffer, sizeof(buffer), NULL);
 800216a:	4639      	mov	r1, r7
 800216c:	2300      	movs	r3, #0
 800216e:	22c8      	movs	r2, #200	; 0xc8
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff fd89 	bl	8001c88 <cli_get_string_argument>
 8002176:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	/* write into file
	 --------------------------------------------------*/
	lfs_ssize_t err = lfs_file_write(&lfs, &lfs_file, buffer, nBytes);
 800217a:	463a      	mov	r2, r7
 800217c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002180:	490d      	ldr	r1, [pc, #52]	; (80021b8 <write+0x54>)
 8002182:	480e      	ldr	r0, [pc, #56]	; (80021bc <write+0x58>)
 8002184:	f00a fbaa 	bl	800c8dc <lfs_file_write>
 8002188:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	if(err < 0)
 800218c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002190:	2b00      	cmp	r3, #0
 8002192:	da07      	bge.n	80021a4 <write+0x40>
		PRINTLN("lfs write error %ld", err);
 8002194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002198:	2276      	movs	r2, #118	; 0x76
 800219a:	4909      	ldr	r1, [pc, #36]	; (80021c0 <write+0x5c>)
 800219c:	4809      	ldr	r0, [pc, #36]	; (80021c4 <write+0x60>)
 800219e:	f00e fd73 	bl	8010c88 <iprintf>
	else{
		PRINTLN("write OK");
	}
}
 80021a2:	e004      	b.n	80021ae <write+0x4a>
		PRINTLN("write OK");
 80021a4:	2278      	movs	r2, #120	; 0x78
 80021a6:	4906      	ldr	r1, [pc, #24]	; (80021c0 <write+0x5c>)
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <write+0x64>)
 80021aa:	f00e fd6d 	bl	8010c88 <iprintf>
}
 80021ae:	bf00      	nop
 80021b0:	37d0      	adds	r7, #208	; 0xd0
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000544 	.word	0x20000544
 80021bc:	20014e10 	.word	0x20014e10
 80021c0:	08011f54 	.word	0x08011f54
 80021c4:	08012014 	.word	0x08012014
 80021c8:	08012034 	.word	0x08012034

080021cc <seek>:

static void seek(){
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	lfs_soff_t pos = (lfs_soff_t)cli_get_int32_argument(0, NULL);
 80021d2:	2100      	movs	r1, #0
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff fcf5 	bl	8001bc4 <cli_get_int_argument>
 80021da:	4603      	mov	r3, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	607b      	str	r3, [r7, #4]

	/* write into file
	 --------------------------------------------------*/
	lfs_soff_t err = lfs_file_seek(&lfs, &lfs_file, pos, LFS_SEEK_SET);
 80021e0:	2300      	movs	r3, #0
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	490b      	ldr	r1, [pc, #44]	; (8002214 <seek+0x48>)
 80021e6:	480c      	ldr	r0, [pc, #48]	; (8002218 <seek+0x4c>)
 80021e8:	f00a fba8 	bl	800c93c <lfs_file_seek>
 80021ec:	6038      	str	r0, [r7, #0]
	if(err < 0)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da06      	bge.n	8002202 <seek+0x36>
		PRINTLN("lfs seek error %ld", err);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2286      	movs	r2, #134	; 0x86
 80021f8:	4908      	ldr	r1, [pc, #32]	; (800221c <seek+0x50>)
 80021fa:	4809      	ldr	r0, [pc, #36]	; (8002220 <seek+0x54>)
 80021fc:	f00e fd44 	bl	8010c88 <iprintf>
	else{
		PRINTLN("seek OK");
	}
}
 8002200:	e004      	b.n	800220c <seek+0x40>
		PRINTLN("seek OK");
 8002202:	2288      	movs	r2, #136	; 0x88
 8002204:	4905      	ldr	r1, [pc, #20]	; (800221c <seek+0x50>)
 8002206:	4807      	ldr	r0, [pc, #28]	; (8002224 <seek+0x58>)
 8002208:	f00e fd3e 	bl	8010c88 <iprintf>
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}
 8002214:	20000544 	.word	0x20000544
 8002218:	20014e10 	.word	0x20014e10
 800221c:	08011f54 	.word	0x08011f54
 8002220:	0801204c 	.word	0x0801204c
 8002224:	0801206c 	.word	0x0801206c

08002228 <close>:

static void close(){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0

	/* Close current file
	 --------------------------------------------------*/
	int err = lfs_file_close(&lfs, &lfs_file);
 800222e:	490c      	ldr	r1, [pc, #48]	; (8002260 <close+0x38>)
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <close+0x3c>)
 8002232:	f00a faf7 	bl	800c824 <lfs_file_close>
 8002236:	6078      	str	r0, [r7, #4]
	if(err < 0)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da06      	bge.n	800224c <close+0x24>
		PRINTLN("lfs close error %d", err);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2292      	movs	r2, #146	; 0x92
 8002242:	4909      	ldr	r1, [pc, #36]	; (8002268 <close+0x40>)
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <close+0x44>)
 8002246:	f00e fd1f 	bl	8010c88 <iprintf>
	else{
		PRINTLN("Close OK");
	}
}
 800224a:	e004      	b.n	8002256 <close+0x2e>
		PRINTLN("Close OK");
 800224c:	2294      	movs	r2, #148	; 0x94
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <close+0x40>)
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <close+0x48>)
 8002252:	f00e fd19 	bl	8010c88 <iprintf>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000544 	.word	0x20000544
 8002264:	20014e10 	.word	0x20014e10
 8002268:	08011f54 	.word	0x08011f54
 800226c:	08012080 	.word	0x08012080
 8002270:	080120a0 	.word	0x080120a0

08002274 <delete>:

static void delete(){
 8002274:	b580      	push	{r7, lr}
 8002276:	b090      	sub	sp, #64	; 0x40
 8002278:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 800227a:	4639      	mov	r1, r7
 800227c:	2300      	movs	r3, #0
 800227e:	2232      	movs	r2, #50	; 0x32
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff fd01 	bl	8001c88 <cli_get_string_argument>

	/* Remove file / dir
	 --------------------------------------------------*/
	int err = lfs_remove(&lfs, name);
 8002286:	463b      	mov	r3, r7
 8002288:	4619      	mov	r1, r3
 800228a:	480d      	ldr	r0, [pc, #52]	; (80022c0 <delete+0x4c>)
 800228c:	f00a fa80 	bl	800c790 <lfs_remove>
 8002290:	6378      	str	r0, [r7, #52]	; 0x34
	if(err < 0)
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	da09      	bge.n	80022ac <delete+0x38>
		PRINTLN("lfs remove '%s' error %d", name, err);
 8002298:	463a      	mov	r2, r7
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	22a3      	movs	r2, #163	; 0xa3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <delete+0x50>)
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <delete+0x54>)
 80022a6:	f00e fcef 	bl	8010c88 <iprintf>
	else{
		PRINTLN("Remove '%s' OK", name);
	}
}
 80022aa:	e005      	b.n	80022b8 <delete+0x44>
		PRINTLN("Remove '%s' OK", name);
 80022ac:	463b      	mov	r3, r7
 80022ae:	22a5      	movs	r2, #165	; 0xa5
 80022b0:	4904      	ldr	r1, [pc, #16]	; (80022c4 <delete+0x50>)
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <delete+0x58>)
 80022b4:	f00e fce8 	bl	8010c88 <iprintf>
}
 80022b8:	bf00      	nop
 80022ba:	3738      	adds	r7, #56	; 0x38
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20014e10 	.word	0x20014e10
 80022c4:	08011f54 	.word	0x08011f54
 80022c8:	080120b8 	.word	0x080120b8
 80022cc:	080120e0 	.word	0x080120e0

080022d0 <ls>:

static void ls(){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0d2      	sub	sp, #328	; 0x148
 80022d4:	af02      	add	r7, sp, #8

	/* Open current directory
	 --------------------------------------------------*/
	lfs_dir_t dir;
	int err = lfs_dir_open(&lfs, &dir, cur_dir);
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <ls+0xc0>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022de:	4619      	mov	r1, r3
 80022e0:	482c      	ldr	r0, [pc, #176]	; (8002394 <ls+0xc4>)
 80022e2:	f00a fb5b 	bl	800c99c <lfs_dir_open>
 80022e6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	if(err < 0){
 80022ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da07      	bge.n	8002302 <ls+0x32>
		PRINTLN("Dir open err %d", err);
 80022f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022f6:	22b0      	movs	r2, #176	; 0xb0
 80022f8:	4927      	ldr	r1, [pc, #156]	; (8002398 <ls+0xc8>)
 80022fa:	4828      	ldr	r0, [pc, #160]	; (800239c <ls+0xcc>)
 80022fc:	f00e fcc4 	bl	8010c88 <iprintf>
 8002300:	e041      	b.n	8002386 <ls+0xb6>
	struct lfs_info info;
	while(1){

		/* Get its info
		 --------------------------------------------------*/
		err = lfs_dir_read(&lfs, &dir, &info);
 8002302:	463a      	mov	r2, r7
 8002304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002308:	4619      	mov	r1, r3
 800230a:	4822      	ldr	r0, [pc, #136]	; (8002394 <ls+0xc4>)
 800230c:	f00a fb8e 	bl	800ca2c <lfs_dir_read>
 8002310:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
		if(err < 0){
 8002314:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002318:	2b00      	cmp	r3, #0
 800231a:	da07      	bge.n	800232c <ls+0x5c>
			PRINTLN("Dir open err %d", err);
 800231c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002320:	22bd      	movs	r2, #189	; 0xbd
 8002322:	491d      	ldr	r1, [pc, #116]	; (8002398 <ls+0xc8>)
 8002324:	481d      	ldr	r0, [pc, #116]	; (800239c <ls+0xcc>)
 8002326:	f00e fcaf 	bl	8010c88 <iprintf>
			break;
 800232a:	e019      	b.n	8002360 <ls+0x90>
		}

		/* If it has no name, stop
		 --------------------------------------------------*/
		if(strlen(info.name) == 0)
 800232c:	463b      	mov	r3, r7
 800232e:	3308      	adds	r3, #8
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d013      	beq.n	800235e <ls+0x8e>
			break;

		/* Print filename and size
		 --------------------------------------------------*/
		PRINTLN("[%s] %s, size = %lu", info.type == LFS_TYPE_REG ? "File" : "Dir", info.name, info.size);
 8002336:	463b      	mov	r3, r7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <ls+0x72>
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <ls+0xd0>)
 8002340:	e000      	b.n	8002344 <ls+0x74>
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <ls+0xd4>)
 8002344:	463b      	mov	r3, r7
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	463b      	mov	r3, r7
 800234c:	3308      	adds	r3, #8
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	22c8      	movs	r2, #200	; 0xc8
 8002354:	4910      	ldr	r1, [pc, #64]	; (8002398 <ls+0xc8>)
 8002356:	4814      	ldr	r0, [pc, #80]	; (80023a8 <ls+0xd8>)
 8002358:	f00e fc96 	bl	8010c88 <iprintf>
		err = lfs_dir_read(&lfs, &dir, &info);
 800235c:	e7d1      	b.n	8002302 <ls+0x32>
			break;
 800235e:	bf00      	nop
	};

	/* Close directory
	 --------------------------------------------------*/
	err = lfs_dir_close(&lfs, &dir);
 8002360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002364:	4619      	mov	r1, r3
 8002366:	480b      	ldr	r0, [pc, #44]	; (8002394 <ls+0xc4>)
 8002368:	f00a fb4a 	bl	800ca00 <lfs_dir_close>
 800236c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	if(err < 0){
 8002370:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002374:	2b00      	cmp	r3, #0
 8002376:	da06      	bge.n	8002386 <ls+0xb6>
		PRINTLN("Dir close err %d", err);
 8002378:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800237c:	22cf      	movs	r2, #207	; 0xcf
 800237e:	4906      	ldr	r1, [pc, #24]	; (8002398 <ls+0xc8>)
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <ls+0xdc>)
 8002382:	f00e fc81 	bl	8010c88 <iprintf>
	}
}
 8002386:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200000d8 	.word	0x200000d8
 8002394:	20014e10 	.word	0x20014e10
 8002398:	08011f54 	.word	0x08011f54
 800239c:	080120fc 	.word	0x080120fc
 80023a0:	08012118 	.word	0x08012118
 80023a4:	08012120 	.word	0x08012120
 80023a8:	08012124 	.word	0x08012124
 80023ac:	08012144 	.word	0x08012144

080023b0 <xmodem>:

static void xmodem(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b094      	sub	sp, #80	; 0x50
 80023b4:	af04      	add	r7, sp, #16

	/* Do not execute twice
	 --------------------------------------------------*/
	if(xModem_getState() == 1) return;
 80023b6:	f00a fd89 	bl	800cecc <xModem_getState>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d021      	beq.n	8002404 <xmodem+0x54>

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	size_t len = cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 80023c0:	1d39      	adds	r1, r7, #4
 80023c2:	2300      	movs	r3, #0
 80023c4:	2232      	movs	r2, #50	; 0x32
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff fc5e 	bl	8001c88 <cli_get_string_argument>
 80023cc:	63f8      	str	r0, [r7, #60]	; 0x3c

	/* Store name in heap
	 --------------------------------------------------*/
	char* arg = os_heap_alloc(len + 1);
 80023ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d0:	3301      	adds	r3, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fc02 	bl	8002bdc <os_heap_alloc>
 80023d8:	63b8      	str	r0, [r7, #56]	; 0x38
	snprintf(arg, len + 1, "%s", name);
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	1c59      	adds	r1, r3, #1
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <xmodem+0x5c>)
 80023e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023e4:	f00e fc68 	bl	8010cb8 <sniprintf>

	/* Open file
	 --------------------------------------------------*/
	os_handle_t h;
	os_task_create(&h, "xmodem", (void*(*)(void*))xModem_rcv, OS_TASK_MODE_DELETE, 11, 5 * OS_DEFAULT_STACK_SIZE, arg);
 80023e8:	4638      	mov	r0, r7
 80023ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	230b      	movs	r3, #11
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <xmodem+0x60>)
 80023fc:	4905      	ldr	r1, [pc, #20]	; (8002414 <xmodem+0x64>)
 80023fe:	f002 ffad 	bl	800535c <os_task_create>
 8002402:	e000      	b.n	8002406 <xmodem+0x56>
	if(xModem_getState() == 1) return;
 8002404:	bf00      	nop
}
 8002406:	3740      	adds	r7, #64	; 0x40
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	08012164 	.word	0x08012164
 8002410:	0800cee5 	.word	0x0800cee5
 8002414:	08012168 	.word	0x08012168

08002418 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800241c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <__NVIC_SystemReset+0x20>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <__NVIC_SystemReset+0x20>)
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_SystemReset+0x24>)
 800242c:	4313      	orrs	r3, r2
 800242e:	60cb      	str	r3, [r1, #12]
 8002430:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <__NVIC_SystemReset+0x1c>
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	05fa0004 	.word	0x05fa0004

08002440 <reset>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void reset(){
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8002444:	f7ff ffe8 	bl	8002418 <__NVIC_SystemReset>

08002448 <top>:
		[OS_TASK_READY]				= "READY",
		[OS_TASK_BLOCKED]			= "BLOCKED",
		[OS_TASK_DELETING]			= "DELETING",
};

static void top(){
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af04      	add	r7, sp, #16

	/* For each task
	 ------------------------------------------------------*/
	os_heap_mon_t mon = os_heap_monitor();
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fccb 	bl	8002dec <os_heap_monitor>
	os_list_cell_t* it = os_head.head.next;
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <top+0xd0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	617b      	str	r3, [r7, #20]
	PRINTLN("");
 800245c:	2226      	movs	r2, #38	; 0x26
 800245e:	492f      	ldr	r1, [pc, #188]	; (800251c <top+0xd4>)
 8002460:	482f      	ldr	r0, [pc, #188]	; (8002520 <top+0xd8>)
 8002462:	f00e fc11 	bl	8010c88 <iprintf>
	PRINTLN("Memory usage, Used = %lu, Free = %lu, Total = %lu, Used Perc = %lu.%lu %%", mon.used_size, mon.total_size - mon.used_size, mon.total_size, mon.used_size * 100 / mon.total_size, mon.used_size * 10 / mon.total_size );
 8002466:	68bd      	ldr	r5, [r7, #8]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad1      	subs	r1, r2, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2264      	movs	r2, #100	; 0x64
 8002474:	fb02 f203 	mul.w	r2, r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	fbb2 f4f3 	udiv	r4, r2, r3
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	9303      	str	r3, [sp, #12]
 8002492:	9402      	str	r4, [sp, #8]
 8002494:	9001      	str	r0, [sp, #4]
 8002496:	9100      	str	r1, [sp, #0]
 8002498:	462b      	mov	r3, r5
 800249a:	2227      	movs	r2, #39	; 0x27
 800249c:	491f      	ldr	r1, [pc, #124]	; (800251c <top+0xd4>)
 800249e:	4821      	ldr	r0, [pc, #132]	; (8002524 <top+0xdc>)
 80024a0:	f00e fbf2 	bl	8010c88 <iprintf>
	PRINTLN("Curent Tasks : ");
 80024a4:	2228      	movs	r2, #40	; 0x28
 80024a6:	491d      	ldr	r1, [pc, #116]	; (800251c <top+0xd4>)
 80024a8:	481f      	ldr	r0, [pc, #124]	; (8002528 <top+0xe0>)
 80024aa:	f00e fbed 	bl	8010c88 <iprintf>
	PRINTLN("PID,   name         state       priority");
 80024ae:	2229      	movs	r2, #41	; 0x29
 80024b0:	491a      	ldr	r1, [pc, #104]	; (800251c <top+0xd4>)
 80024b2:	481e      	ldr	r0, [pc, #120]	; (800252c <top+0xe4>)
 80024b4:	f00e fbe8 	bl	8010c88 <iprintf>
	while(it != NULL){
 80024b8:	e027      	b.n	800250a <top+0xc2>
		PRINTLN("%05d, %-10s   %-11s %d", ((os_task_t*)it->element)->pid, ((os_task_t*)it->element)->obj.name == NULL ? "No name" : ((os_task_t*)it->element)->obj.name,
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c0:	461d      	mov	r5, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <top+0x8c>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	685c      	ldr	r4, [r3, #4]
 80024d2:	e000      	b.n	80024d6 <top+0x8e>
 80024d4:	4c16      	ldr	r4, [pc, #88]	; (8002530 <top+0xe8>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 f8d6 	bl	800568c <os_task_getState>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <top+0xec>)
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	f992 204c 	ldrsb.w	r2, [r2, #76]	; 0x4c
 80024f2:	9202      	str	r2, [sp, #8]
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9400      	str	r4, [sp, #0]
 80024f8:	462b      	mov	r3, r5
 80024fa:	222c      	movs	r2, #44	; 0x2c
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <top+0xd4>)
 80024fe:	480e      	ldr	r0, [pc, #56]	; (8002538 <top+0xf0>)
 8002500:	f00e fbc2 	bl	8010c88 <iprintf>
				task_states[os_task_getState(((os_handle_t)it->element))], ((os_task_t*)it->element)->priority);
		it = it->next;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1d4      	bne.n	80024ba <top+0x72>
	}
}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bdb0      	pop	{r4, r5, r7, pc}
 8002518:	20014df0 	.word	0x20014df0
 800251c:	08012318 	.word	0x08012318
 8002520:	08012324 	.word	0x08012324
 8002524:	08012334 	.word	0x08012334
 8002528:	0801238c 	.word	0x0801238c
 800252c:	080123a8 	.word	0x080123a8
 8002530:	080123e0 	.word	0x080123e0
 8002534:	200001fc 	.word	0x200001fc
 8002538:	080123e8 	.word	0x080123e8

0800253c <kill>:

static void kill(){
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0

	/* Get argument
	 ------------------------------------------------------*/
	uint16_t pid = cli_get_uint16_argument(0, NULL);
 8002542:	2100      	movs	r1, #0
 8002544:	2000      	movs	r0, #0
 8002546:	f7ff fb5e 	bl	8001c06 <cli_get_uint_argument>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	80fb      	strh	r3, [r7, #6]

	/* Get task by PID
	 ------------------------------------------------------*/
	os_handle_t h = os_task_getByPID(pid);
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 f8d0 	bl	80056f8 <os_task_getByPID>
 8002558:	6038      	str	r0, [r7, #0]

	/* Delete task
	 ------------------------------------------------------*/
	os_task_delete(h);
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f002 ff78 	bl	8005450 <os_task_delete>

	/* Feedback
	 ------------------------------------------------------*/
	if(h == NULL)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <kill+0x38>
		PRINTLN("Task PID %d not found", pid);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	2242      	movs	r2, #66	; 0x42
 800256a:	4907      	ldr	r1, [pc, #28]	; (8002588 <kill+0x4c>)
 800256c:	4807      	ldr	r0, [pc, #28]	; (800258c <kill+0x50>)
 800256e:	f00e fb8b 	bl	8010c88 <iprintf>
	else{
		PRINTLN("Task PID %d killed", pid);
	}
}
 8002572:	e005      	b.n	8002580 <kill+0x44>
		PRINTLN("Task PID %d killed", pid);
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2244      	movs	r2, #68	; 0x44
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <kill+0x4c>)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <kill+0x54>)
 800257c:	f00e fb84 	bl	8010c88 <iprintf>
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	08012318 	.word	0x08012318
 800258c:	0801240c 	.word	0x0801240c
 8002590:	08012430 	.word	0x08012430

08002594 <exec>:

static void exec(){
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b093      	sub	sp, #76	; 0x4c
 8002598:	af00      	add	r7, sp, #0

	/* Count arguments
	 ------------------------------------------------------*/
	int argc = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
	bool resStr = true;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	bool resInt= true;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	char buffer[50];

	/* For each argument
	 ------------------------------------------------------*/
	while(resInt == true || resStr == true){
 80025aa:	e01e      	b.n	80025ea <exec+0x56>

		/* Get as string or int
		 ------------------------------------------------------*/
		cli_get_string_argument((size_t)argc, (uint8_t*)buffer, sizeof(buffer), &resStr);
 80025ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025ae:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80025b2:	4639      	mov	r1, r7
 80025b4:	2232      	movs	r2, #50	; 0x32
 80025b6:	f7ff fb67 	bl	8001c88 <cli_get_string_argument>
		cli_get_int_argument((size_t)argc, &resInt);
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fafe 	bl	8001bc4 <cli_get_int_argument>

		/* if none, stop
		 ------------------------------------------------------*/
		if(!(resInt == true || resStr == true)) break;
 80025c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <exec+0x50>
 80025d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <exec+0x68>

		/* Otherwise count and continue
		 ------------------------------------------------------*/
		argc++;
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e6:	3301      	adds	r3, #1
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
	while(resInt == true || resStr == true){
 80025ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1dc      	bne.n	80025ac <exec+0x18>
 80025f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1d8      	bne.n	80025ac <exec+0x18>
 80025fa:	e000      	b.n	80025fe <exec+0x6a>
		if(!(resInt == true || resStr == true)) break;
 80025fc:	bf00      	nop
	}


	/* Allocate argv vector
	 ------------------------------------------------------*/
	char** argv = (char**)os_heap_alloc( (uint32_t)(argc * (int)sizeof(char*)) );
 80025fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f000 faea 	bl	8002bdc <os_heap_alloc>
 8002608:	6438      	str	r0, [r7, #64]	; 0x40

	/* Reinit variables
	 ------------------------------------------------------*/
	argc = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
	resStr = true;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	resInt= true;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	/* For each argument
	 ------------------------------------------------------*/
	while(resInt == true || resStr == true){
 800261a:	e051      	b.n	80026c0 <exec+0x12c>

		/* Get as string and as integer
		 ------------------------------------------------------*/
		size_t len = cli_get_string_argument((size_t)argc, (uint8_t*)buffer, sizeof(buffer), &resStr);
 800261c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800261e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8002622:	4639      	mov	r1, r7
 8002624:	2232      	movs	r2, #50	; 0x32
 8002626:	f7ff fb2f 	bl	8001c88 <cli_get_string_argument>
 800262a:	63f8      	str	r0, [r7, #60]	; 0x3c
		int32_t arg = cli_get_int32_argument((size_t)argc, &resInt);
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fac5 	bl	8001bc4 <cli_get_int_argument>
 800263a:	4603      	mov	r3, r0
 800263c:	460c      	mov	r4, r1
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* If it is a string
		 ------------------------------------------------------*/
		if(resStr){
 8002640:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <exec+0xe0>

			/* Allocate the argument string and copy from buffer
			 ------------------------------------------------------*/
			argv[argc] = (char*)os_heap_alloc( (len + 1) * sizeof(char) );
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	1c59      	adds	r1, r3, #1
 800264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002652:	18d4      	adds	r4, r2, r3
 8002654:	4608      	mov	r0, r1
 8002656:	f000 fac1 	bl	8002bdc <os_heap_alloc>
 800265a:	4603      	mov	r3, r0
 800265c:	6023      	str	r3, [r4, #0]
			strcpy(argv[argc], buffer);
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002664:	4413      	add	r3, r2
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	463a      	mov	r2, r7
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f00e fb64 	bl	8010d3a <strcpy>
 8002672:	e022      	b.n	80026ba <exec+0x126>
		}

		/* If it is an integer
		 ------------------------------------------------------*/
		else if(resInt){
 8002674:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02a      	beq.n	80026d2 <exec+0x13e>

			/* Transform integer into string, allocate string argument and copy buffer
			 ------------------------------------------------------*/
			snprintf(buffer, sizeof(buffer), "%ld", arg);
 800267c:	4638      	mov	r0, r7
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <exec+0x16c>)
 8002682:	2132      	movs	r1, #50	; 0x32
 8002684:	f00e fb18 	bl	8010cb8 <sniprintf>
			argv[argc] = (char*)os_heap_alloc( (strlen(buffer) + 1) * sizeof(char) );
 8002688:	463b      	mov	r3, r7
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd fdaa 	bl	80001e4 <strlen>
 8002690:	4603      	mov	r3, r0
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800269a:	18d4      	adds	r4, r2, r3
 800269c:	4608      	mov	r0, r1
 800269e:	f000 fa9d 	bl	8002bdc <os_heap_alloc>
 80026a2:	4603      	mov	r3, r0
 80026a4:	6023      	str	r3, [r4, #0]
			strcpy(argv[argc], buffer);
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026ac:	4413      	add	r3, r2
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	463a      	mov	r2, r7
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f00e fb40 	bl	8010d3a <strcpy>
			break;
		}

		/* otherwise count and continue
		 ------------------------------------------------------*/
		argc++;
 80026ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026bc:	3301      	adds	r3, #1
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
	while(resInt == true || resStr == true){
 80026c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1a9      	bne.n	800261c <exec+0x88>
 80026c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1a5      	bne.n	800261c <exec+0x88>
 80026d0:	e000      	b.n	80026d4 <exec+0x140>
			break;
 80026d2:	bf00      	nop
	}

	/* Create process
	 ------------------------------------------------------*/
	os_err_e err = os_task_createProcess(argv[0], argc, argv);
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fe59 	bl	8005394 <os_task_createProcess>
 80026e2:	6378      	str	r0, [r7, #52]	; 0x34
	if(err < 0){
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da05      	bge.n	80026f6 <exec+0x162>
		PRINTLN("Error %ld", err);
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	229b      	movs	r2, #155	; 0x9b
 80026ee:	4905      	ldr	r1, [pc, #20]	; (8002704 <exec+0x170>)
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <exec+0x174>)
 80026f2:	f00e fac9 	bl	8010c88 <iprintf>
	}
}
 80026f6:	bf00      	nop
 80026f8:	374c      	adds	r7, #76	; 0x4c
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	bf00      	nop
 8002700:	08012450 	.word	0x08012450
 8002704:	08012318 	.word	0x08012318
 8002708:	08012454 	.word	0x08012454

0800270c <os_init_get>:
 * @brief This function informs other processes that the OS is initialized
 *
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
	return os_init_done;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <os_init_get+0x14>)
 8002712:	781b      	ldrb	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000598 	.word	0x20000598

08002724 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af04      	add	r7, sp, #16
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	460b      	mov	r3, r1
 8002732:	72fb      	strb	r3, [r7, #11]

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <os_init+0xc0>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <os_init+0x1e>
 800273c:	f06f 0304 	mvn.w	r3, #4
 8002740:	e04b      	b.n	80027da <os_init+0xb6>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <os_init+0xc4>)
 8002744:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	; 0xd80
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <os_init+0xc4>)
 800274a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800274e:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <os_init+0xc8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a25      	ldr	r2, [pc, #148]	; (80027ec <os_init+0xc8>)
 8002758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275c:	6013      	str	r3, [r2, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <os_init+0xc8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a22      	ldr	r2, [pc, #136]	; (80027ec <os_init+0xc8>)
 8002764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002768:	6013      	str	r3, [r2, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <os_init+0xc4>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <os_init+0xc4>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6093      	str	r3, [r2, #8]
	OS_SYSTICK_SET_PRIO(14);
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <os_init+0xc4>)
 8002778:	22e0      	movs	r2, #224	; 0xe0
 800277a:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <os_init+0xc4>)
 8002780:	22f0      	movs	r2, #240	; 0xf0
 8002782:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <os_init+0xc4>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <os_init+0xc4>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6093      	str	r3, [r2, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 8002792:	f000 fa0b 	bl	8002bac <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 8002796:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f002 fcbc 	bl	800511c <os_task_init>
 80027a4:	6178      	str	r0, [r7, #20]
	if(ret != OS_ERR_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <os_init+0x8c>
		return ret;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	e014      	b.n	80027da <os_init+0xb6>

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <os_init+0xc0>)
 80027be:	701a      	strb	r2, [r3, #0]

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, OS_TASK_MODE_DELETE, 0, idle_stack_size, NULL);
 80027c0:	2300      	movs	r3, #0
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	2300      	movs	r3, #0
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2301      	movs	r3, #1
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <os_init+0xcc>)
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	4808      	ldr	r0, [pc, #32]	; (80027f4 <os_init+0xd0>)
 80027d4:	f002 fdc2 	bl	800535c <os_task_create>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000598 	.word	0x20000598
 80027e8:	e000e008 	.word	0xe000e008
 80027ec:	e000ef34 	.word	0xe000ef34
 80027f0:	08002821 	.word	0x08002821
 80027f4:	20014dec 	.word	0x20014dec

080027f8 <os_task_on_ready_cb>:
 * @brief This function is called by the OS qfter a task that was blocked gets ready
 *
 * @param os_handle_t h : [in] Task that became ready
 *
 **********************************************************************/
__weak void os_task_on_ready_cb(os_handle_t h){
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(h);
	return;
 8002800:	bf00      	nop
}
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <os_task_on_block_cb>:
 * This callback allows the user to perform a logic before interruption
 *
 * @param os_handle_t h : [in] Task that became ready
 *
 **********************************************************************/
__weak void os_task_on_block_cb(os_handle_t h){
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(h);
	return;
 8002814:	bf00      	nop
}
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(i);
	while(1){
 8002828:	e7fe      	b.n	8002828 <os_idle_task_fn+0x8>

0800282a <os_no_task_ready_cb>:
 * or is unblocked by an interrupt that this function will stop calling
 *
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
	return;
 800282e:	bf00      	nop
}
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <os_insufficient_heap_cb>:
 *
 * @brief This function is called by the OS when an os_alloc fails due to
 * not enogh memory
 *
 **********************************************************************/
__weak void os_insufficient_heap_cb(){
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
	return;
 800283c:	bf00      	nop
}
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <os_evt_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_evt_getFreeCount(os_handle_t h){
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <os_evt_getFreeCount+0x12>
 8002854:	2300      	movs	r3, #0
 8002856:	e017      	b.n	8002888 <os_evt_getFreeCount+0x42>
	if(h->type != OS_OBJ_EVT) return 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d001      	beq.n	8002864 <os_evt_getFreeCount+0x1e>
 8002860:	2300      	movs	r3, #0
 8002862:	e011      	b.n	8002888 <os_evt_getFreeCount+0x42>

	/* Convert address
	 ------------------------------------------------------*/
	os_evt_t* evt = (os_evt_t*)h;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60bb      	str	r3, [r7, #8]

	/* Calculates free count
	 ------------------------------------------------------*/
	uint32_t freeCount = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
	if(evt->state == OS_EVT_STATE_SET){
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	7e1b      	ldrb	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <os_evt_getFreeCount+0x40>
		freeCount = 1;
 8002874:	2301      	movs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
		if(evt->mode == OS_EVT_MODE_MANUAL){
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	7e5b      	ldrb	r3, [r3, #25]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <os_evt_getFreeCount+0x40>
			freeCount = OS_OBJ_COUNT_INF;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	60fb      	str	r3, [r7, #12]
		}
	}

	return freeCount;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <os_evt_objTake>:
 * @param os_handle_t h 			: [in] object to take
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 * @return os_err_e : 0 if ok
 **********************************************************************/
static os_err_e os_evt_objTake(os_handle_t h, os_handle_t takingTask){
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(takingTask);

	/* Convert address
	 ------------------------------------------------------*/
	os_evt_t* evt = (os_evt_t*)h;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <os_evt_objTake+0x1a>
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	e015      	b.n	80028da <os_evt_objTake+0x46>
	if(h->type != OS_OBJ_EVT) return OS_ERR_BAD_ARG;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d002      	beq.n	80028bc <os_evt_objTake+0x28>
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e00e      	b.n	80028da <os_evt_objTake+0x46>
	if(evt->state == OS_EVT_STATE_RESET) return OS_ERR_BAD_ARG;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <os_evt_objTake+0x36>
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	e007      	b.n	80028da <os_evt_objTake+0x46>

	/* Reset event if auto mode
	 ------------------------------------------------------*/
	if(evt->mode == OS_EVT_MODE_AUTO) evt->state = OS_EVT_STATE_RESET;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	7e5b      	ldrb	r3, [r3, #25]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <os_evt_objTake+0x44>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	761a      	strb	r2, [r3, #24]

	return OS_ERR_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <os_evt_create>:
 * @param os_evt_reset_mode_e mode 	: [ in] Event reset mode. Auto means the first task that waits for it will reset it. Manual means that the event must be reset using the os_evt_reset API
 * @param char* name				: [ in] Event's name. If an event with the same name already exists, its reference is returned. A null name always creates a nameless event.
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_evt_create(os_handle_t* h, os_evt_reset_mode_e mode, char const * name){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	460b      	mov	r3, r1
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 						return OS_ERR_BAD_ARG;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <os_evt_create+0x1a>
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	e068      	b.n	80029d4 <os_evt_create+0xec>
	if(mode >= __OS_EVT_MODE_INVALID) 	return OS_ERR_BAD_ARG;
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d902      	bls.n	800290e <os_evt_create+0x26>
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	e062      	b.n	80029d4 <os_evt_create+0xec>
	if(os_init_get() == false)			return OS_ERR_NOT_READY;
 800290e:	f7ff fefd 	bl	800270c <os_init_get>
 8002912:	4603      	mov	r3, r0
 8002914:	f083 0301 	eor.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <os_evt_create+0x3c>
 800291e:	f06f 0303 	mvn.w	r3, #3
 8002922:	e057      	b.n	80029d4 <os_evt_create+0xec>

	/* If event exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00e      	beq.n	8002948 <os_evt_create+0x60>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_EVT, name);
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	2104      	movs	r1, #4
 800292e:	482b      	ldr	r0, [pc, #172]	; (80029dc <os_evt_create+0xf4>)
 8002930:	f000 fc2b 	bl	800318a <os_handle_list_searchByName>
 8002934:	61f8      	str	r0, [r7, #28]
		if(obj != NULL){
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <os_evt_create+0x60>
			*h = obj->element;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]
			return OS_ERR_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e045      	b.n	80029d4 <os_evt_create+0xec>
		}
	}

	/* Alloc the event block
	 ------------------------------------------------------*/
	os_evt_t* evt = (os_evt_t*)os_heap_alloc(sizeof(os_evt_t));
 8002948:	201c      	movs	r0, #28
 800294a:	f000 f947 	bl	8002bdc <os_heap_alloc>
 800294e:	61b8      	str	r0, [r7, #24]

	/* Check allocation
	 ------------------------------------------------------*/
	if(evt == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <os_evt_create+0x74>
 8002956:	f06f 0302 	mvn.w	r3, #2
 800295a:	e03b      	b.n	80029d4 <os_evt_create+0xec>

	/* Init event
	 ------------------------------------------------------*/
	evt->obj.objUpdate		= 0;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2200      	movs	r2, #0
 8002960:	721a      	strb	r2, [r3, #8]
	evt->obj.type			= OS_OBJ_EVT;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2204      	movs	r2, #4
 8002966:	701a      	strb	r2, [r3, #0]
	evt->obj.getFreeCount	= os_evt_getFreeCount;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <os_evt_create+0xf8>)
 800296c:	60da      	str	r2, [r3, #12]
	evt->obj.obj_take		= os_evt_objTake;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <os_evt_create+0xfc>)
 8002972:	611a      	str	r2, [r3, #16]
	evt->obj.blockList		= os_list_init();
 8002974:	f000 fbb6 	bl	80030e4 <os_list_init>
 8002978:	4602      	mov	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	615a      	str	r2, [r3, #20]
	evt->obj.name			= (char*)name;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	605a      	str	r2, [r3, #4]

	evt->state				= OS_EVT_STATE_RESET;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2201      	movs	r2, #1
 8002988:	761a      	strb	r2, [r3, #24]
	evt->mode				= mode;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	7afa      	ldrb	r2, [r7, #11]
 800298e:	765a      	strb	r2, [r3, #25]

	/* Handles heap errors
	 ------------------------------------------------------*/
	if(evt->obj.blockList == NULL){
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <os_evt_create+0xbc>
		os_heap_free(evt);
 8002998:	69b8      	ldr	r0, [r7, #24]
 800299a:	f000 f985 	bl	8002ca8 <os_heap_free>
		return OS_ERR_INSUFFICIENT_HEAP;
 800299e:	f06f 0302 	mvn.w	r3, #2
 80029a2:	e017      	b.n	80029d4 <os_evt_create+0xec>
	}

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) evt, OS_LIST_FIRST);
 80029a4:	2200      	movs	r2, #0
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <os_evt_create+0xf4>)
 80029aa:	f000 fc30 	bl	800320e <os_list_add>
 80029ae:	6178      	str	r0, [r7, #20]
	if(ret != OS_ERR_OK) {
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <os_evt_create+0xe4>
		os_heap_free(evt);
 80029b6:	69b8      	ldr	r0, [r7, #24]
 80029b8:	f000 f976 	bl	8002ca8 <os_heap_free>
		os_list_clear(evt->obj.blockList);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fd0d 	bl	80033e0 <os_list_clear>
		return OS_ERR_INSUFFICIENT_HEAP;
 80029c6:	f06f 0302 	mvn.w	r3, #2
 80029ca:	e003      	b.n	80029d4 <os_evt_create+0xec>
	}

	/* Return
	 ------------------------------------------------------*/
	*h = (os_handle_t)evt;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	601a      	str	r2, [r3, #0]
	return OS_ERR_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20014dd0 	.word	0x20014dd0
 80029e0:	08002847 	.word	0x08002847
 80029e4:	08002895 	.word	0x08002895

080029e8 <os_evt_set>:
 *
 * @param os_handle_t h   	: [ in] Pointer to the event to set
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_evt_set(os_handle_t h){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_evt_t* evt = (os_evt_t*) h;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	617b      	str	r3, [r7, #20]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <os_evt_set+0x18>
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	e02a      	b.n	8002a56 <os_evt_set+0x6e>
	if(h->type != OS_OBJ_EVT) return OS_ERR_BAD_ARG;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d002      	beq.n	8002a0e <os_evt_set+0x26>
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	e023      	b.n	8002a56 <os_evt_set+0x6e>
	if(evt->state == OS_EVT_STATE_SET) return OS_ERR_OK;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	7e1b      	ldrb	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <os_evt_set+0x32>
 8002a16:	2300      	movs	r3, #0
 8002a18:	e01d      	b.n	8002a56 <os_evt_set+0x6e>

	/* Enter critical section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	b672      	cpsid	i
 8002a22:	f3bf 8f6f 	isb	sy

	/* Tag as set
	 ------------------------------------------------------*/
	evt->state = OS_EVT_STATE_SET;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	761a      	strb	r2, [r3, #24]

	/* Update blocking list and check if we must yield
	 ------------------------------------------------------*/
	bool must_yield = os_handle_list_updateAndCheck( (os_handle_t)evt );
 8002a2c:	6978      	ldr	r0, [r7, #20]
 8002a2e:	f000 fe89 	bl	8003744 <os_handle_list_updateAndCheck>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]

	/* Yield if necessary
	 ------------------------------------------------------*/
	if(must_yield && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <os_evt_set+0x62>
 8002a3c:	f002 f8f2 	bl	8004c24 <os_scheduler_state_get>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <os_evt_set+0x62>
 8002a46:	f002 fdf3 	bl	8005630 <os_task_yeild>

	/* Exit
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f383 8810 	msr	PRIMASK, r3
 8002a50:	f3bf 8f6f 	isb	sy

	return OS_ERR_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <os_evt_delete>:
 *
 * @param os_handle_t h : [ in] Pointer to the event to delete
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_evt_delete(os_handle_t h){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <os_evt_delete+0x14>
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e013      	b.n	8002a9c <os_evt_delete+0x3c>
	if(h->type != OS_OBJ_EVT) return OS_ERR_BAD_ARG;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d002      	beq.n	8002a82 <os_evt_delete+0x22>
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	e00c      	b.n	8002a9c <os_evt_delete+0x3c>

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <os_evt_delete+0x44>)
 8002a86:	f000 fc31 	bl	80032ec <os_list_remove>

	/* Free memory
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fca6 	bl	80033e0 <os_list_clear>

	return os_heap_free(h);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f907 	bl	8002ca8 <os_heap_free>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20014dd0 	.word	0x20014dd0

08002aa8 <os_heap_BlockGetSize>:
 *
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	if(p == NULL) return 0; //Avoid explosion
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <os_heap_BlockGetSize+0x12>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e00b      	b.n	8002ad2 <os_heap_BlockGetSize+0x2a>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <os_heap_BlockGetSize+0x24>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	e002      	b.n	8002ad2 <os_heap_BlockGetSize+0x2a>
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <os_heap_BlockGetSize+0x38>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	1ad3      	subs	r3, r2, r3
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200145a0 	.word	0x200145a0

08002ae4 <os_heap_AllocateBeginning>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateBeginning(os_heap_header_t* p, uint32_t size){
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <os_heap_AllocateBeginning+0x14>
 8002af4:	2300      	movs	r3, #0
 8002af6:	e01f      	b.n	8002b38 <os_heap_AllocateBeginning+0x54>
	if(size == 0) return NULL;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <os_heap_AllocateBeginning+0x1e>
 8002afe:	2300      	movs	r3, #0
 8002b00:	e01a      	b.n	8002b38 <os_heap_AllocateBeginning+0x54>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	os_heap_header_t* newBlock   = p;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	60bb      	str	r3, [r7, #8]

	/* If next header does not exist, create it
	 ---------------------------------------------------*/
	if(newBlock->addr_next != (uint32_t)newTopHead){
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d009      	beq.n	8002b2e <os_heap_AllocateBeginning+0x4a>

		/* Add Block to list
		 ---------------------------------------------------*/
		newTopHead->addr_next = newBlock->addr_next;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	601a      	str	r2, [r3, #0]
		newBlock->addr_next	  = (uint32_t) newTopHead;
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

		/* Mark new block head as unused
		 ---------------------------------------------------*/
		newTopHead->block_used = 0;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
	}

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3308      	adds	r3, #8
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <os_heap_AllocateEnd>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateEnd(os_heap_header_t* p, uint32_t size){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <os_heap_AllocateEnd+0x14>
 8002b54:	2300      	movs	r3, #0
 8002b56:	e024      	b.n	8002ba2 <os_heap_AllocateEnd+0x5e>
	if(size == 0) return NULL;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <os_heap_AllocateEnd+0x1e>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e01f      	b.n	8002ba2 <os_heap_AllocateEnd+0x5e>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	uint32_t block_size = os_heap_BlockGetSize(p);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa0 	bl	8002aa8 <os_heap_BlockGetSize>
 8002b68:	6178      	str	r0, [r7, #20]
	os_heap_header_t* oldTopHead = (os_heap_header_t*) (p);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	441a      	add	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	3b08      	subs	r3, #8
 8002b7a:	60fb      	str	r3, [r7, #12]

	/* Create new header if needed
	 ---------------------------------------------------*/
	if(newBlock != oldTopHead){
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d009      	beq.n	8002b98 <os_heap_AllocateEnd+0x54>

		/* Add Block to list
		 ---------------------------------------------------*/
		newBlock->addr_next = oldTopHead->addr_next;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]
		oldTopHead->addr_next = (uint32_t)newBlock;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	601a      	str	r2, [r3, #0]

		/* Mark old block head as unused
		 ---------------------------------------------------*/
		oldTopHead->block_used = 0;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
	}

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3308      	adds	r3, #8

}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <os_heap_clear>:
 * OS Heap Clear
 *
 * @brief This function clears the heap
 *
 **********************************************************************/
void os_heap_clear(){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 8002bb2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4807      	ldr	r0, [pc, #28]	; (8002bd8 <os_heap_clear+0x2c>)
 8002bba:	f00d fd95 	bl	80106e8 <memset>

	/* Get header pointers
	 ---------------------------------------------------*/
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <os_heap_clear+0x2c>)
 8002bc0:	607b      	str	r3, [r7, #4]

	/* Initialize headers
	 ---------------------------------------------------*/
	p->block_used = 0; //Mark as not used
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
	p->addr_next  = 0; //Point outside of the heap to indicate end
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200005a0 	.word	0x200005a0

08002bdc <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <os_heap_alloc+0x12>
 8002bea:	2300      	movs	r3, #0
 8002bec:	e054      	b.n	8002c98 <os_heap_alloc+0xbc>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002bee:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	b672      	cpsid	i
 8002bf6:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t min_size = 0xFFFFFFFF;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	623b      	str	r3, [r7, #32]
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <os_heap_alloc+0xc4>)
 8002c06:	61fb      	str	r3, [r7, #28]

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3307      	adds	r3, #7
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	61bb      	str	r3, [r7, #24]
	while(p != NULL){
 8002c12:	e018      	b.n	8002c46 <os_heap_alloc+0x6a>

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 8002c14:	69f8      	ldr	r0, [r7, #28]
 8002c16:	f7ff ff47 	bl	8002aa8 <os_heap_BlockGetSize>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	3b08      	subs	r3, #8
 8002c1e:	613b      	str	r3, [r7, #16]
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <os_heap_alloc+0x64>
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d207      	bcs.n	8002c40 <os_heap_alloc+0x64>
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d303      	bcc.n	8002c40 <os_heap_alloc+0x64>
			pBlock = p;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
			min_size = data_size;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	623b      	str	r3, [r7, #32]
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61fb      	str	r3, [r7, #28]
	while(p != NULL){
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e3      	bne.n	8002c14 <os_heap_alloc+0x38>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <os_heap_alloc+0xc4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d303      	bcc.n	8002c5c <os_heap_alloc+0x80>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <os_heap_alloc+0xc8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d908      	bls.n	8002c6e <os_heap_alloc+0x92>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 8002c5c:	f7ff fdec 	bl	8002838 <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f383 8810 	msr	PRIMASK, r3
 8002c66:	f3bf 8f6f 	isb	sy
		return NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e014      	b.n	8002c98 <os_heap_alloc+0xbc>
	}

	/* If pBlock is not NULL, reserve a memory block
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b31      	cmp	r3, #49	; 0x31
 8002c72:	d805      	bhi.n	8002c80 <os_heap_alloc+0xa4>
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c78:	f7ff ff34 	bl	8002ae4 <os_heap_AllocateBeginning>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	e004      	b.n	8002c8a <os_heap_alloc+0xae>
 8002c80:	69b9      	ldr	r1, [r7, #24]
 8002c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c84:	f7ff ff5e 	bl	8002b44 <os_heap_AllocateEnd>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	617b      	str	r3, [r7, #20]
	OS_EXIT_CRITICAL();
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f383 8810 	msr	PRIMASK, r3
 8002c92:	f3bf 8f6f 	isb	sy
	return ret;
 8002c96:	697b      	ldr	r3, [r7, #20]

}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200005a0 	.word	0x200005a0
 8002ca4:	2001459f 	.word	0x2001459f

08002ca8 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <os_heap_free+0x14>
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	e08a      	b.n	8002dd2 <os_heap_free+0x12a>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a48      	ldr	r2, [pc, #288]	; (8002de0 <os_heap_free+0x138>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d303      	bcc.n	8002ccc <os_heap_free+0x24>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a47      	ldr	r2, [pc, #284]	; (8002de4 <os_heap_free+0x13c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d902      	bls.n	8002cd2 <os_heap_free+0x2a>
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e07f      	b.n	8002dd2 <os_heap_free+0x12a>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	b672      	cpsid	i
 8002cda:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 8002cde:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <os_heap_free+0x140>)
 8002ce0:	61fb      	str	r3, [r7, #28]

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
	os_heap_header_t* pPrev = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]

	/* Search for the target block while still inside the heap
	 ---------------------------------------------------*/
	bool inBounds = false;
 8002cea:	2300      	movs	r3, #0
 8002cec:	74fb      	strb	r3, [r7, #19]
	bool BlockFound = false;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	74bb      	strb	r3, [r7, #18]
	while(1){

		/* Calculate if out of bounds of block found
		 ---------------------------------------------------*/
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <os_heap_free+0x140>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d305      	bcc.n	8002d06 <os_heap_free+0x5e>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4a39      	ldr	r2, [pc, #228]	; (8002de4 <os_heap_free+0x13c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d801      	bhi.n	8002d06 <os_heap_free+0x5e>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <os_heap_free+0x60>
 8002d06:	2300      	movs	r3, #0
 8002d08:	74fb      	strb	r3, [r7, #19]
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	74fb      	strb	r3, [r7, #19]
		BlockFound = (uint32_t)cur <= (uint32_t)p && (cur->addr_next == 0 || (uint32_t)p <= (uint32_t)cur->addr_next );
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d80a      	bhi.n	8002d30 <os_heap_free+0x88>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <os_heap_free+0x84>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d301      	bcc.n	8002d30 <os_heap_free+0x88>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <os_heap_free+0x8a>
 8002d30:	2300      	movs	r3, #0
 8002d32:	74bb      	strb	r3, [r7, #18]
 8002d34:	7cbb      	ldrb	r3, [r7, #18]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	74bb      	strb	r3, [r7, #18]

		/* Break if we finished searching
		 ---------------------------------------------------*/
		if(!inBounds || BlockFound) break;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d108      	bne.n	8002d5a <os_heap_free+0xb2>
 8002d48:	7cbb      	ldrb	r3, [r7, #18]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <os_heap_free+0xb2>

		/* Save current block and go to next block
		 ---------------------------------------------------*/
		pPrev = cur;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	61bb      	str	r3, [r7, #24]
		cur = (os_heap_header_t*) ( cur->addr_next );
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	61fb      	str	r3, [r7, #28]
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 8002d58:	e7cb      	b.n	8002cf2 <os_heap_free+0x4a>
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if( !BlockFound || !inBounds ) {
 8002d5a:	7cbb      	ldrb	r3, [r7, #18]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <os_heap_free+0xca>
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	f083 0301 	eor.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <os_heap_free+0xda>
		OS_EXIT_CRITICAL();
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f383 8810 	msr	PRIMASK, r3
 8002d78:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 8002d7c:	f06f 0301 	mvn.w	r3, #1
 8002d80:	e027      	b.n	8002dd2 <os_heap_free+0x12a>
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2200      	movs	r2, #0
 8002d86:	605a      	str	r2, [r3, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	617b      	str	r3, [r7, #20]

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <os_heap_free+0x102>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <os_heap_free+0x102>
		cur->addr_next = pNext->addr_next;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	601a      	str	r2, [r3, #0]
		pNext->addr_next = 0; //For principle, but not necessary
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <os_heap_free+0x11e>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <os_heap_free+0x11e>
		pPrev->addr_next = cur->addr_next;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]
		cur->addr_next = 0; //For principle, but not necessary
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
	}

	OS_EXIT_CRITICAL();
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f383 8810 	msr	PRIMASK, r3
 8002dcc:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	200005a8 	.word	0x200005a8
 8002de4:	2001459f 	.word	0x2001459f
 8002de8:	200005a0 	.word	0x200005a0

08002dec <os_heap_monitor>:
 *
 * @brief This function returns data about the heap's utilization
 *
 * @return os_heap_mon_t : Struct containing heap info
 **********************************************************************/
os_heap_mon_t os_heap_monitor(){
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b08d      	sub	sp, #52	; 0x34
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

	/* Declare Return structure
	 ---------------------------------------------------*/
	os_heap_mon_t ret;
	memset(&ret, 0, sizeof(ret));
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2210      	movs	r2, #16
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f00d fc73 	bl	80106e8 <memset>
	ret.total_size = sizeof(os_heap);
 8002e02:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 8002e06:	60fb      	str	r3, [r7, #12]

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	b672      	cpsid	i
 8002e10:	f3bf 8f6f 	isb	sy

	/* Declare iterators
	 ---------------------------------------------------*/
	os_heap_header_t* pPrev = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	os_heap_header_t* pNext = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
	os_heap_header_t* cur = (os_heap_header_t*)(&os_heap[0]);
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <os_heap_monitor+0xec>)
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Search all heap
	 ---------------------------------------------------*/
	while(cur != NULL){
 8002e20:	e046      	b.n	8002eb0 <os_heap_monitor+0xc4>

		/* Calculate block size
		 ---------------------------------------------------*/
		uint32_t block_sz = os_heap_BlockGetSize(cur);
 8002e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e24:	f7ff fe40 	bl	8002aa8 <os_heap_BlockGetSize>
 8002e28:	6238      	str	r0, [r7, #32]

		/* Get reference to next block
		 ---------------------------------------------------*/
		pNext = (os_heap_header_t*) ( cur->addr_next );
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate if next and previous blocks are used
		 ---------------------------------------------------*/
		uint8_t prev_block_used = ( (pPrev != NULL) && (pPrev->block_used == 1) );
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <os_heap_monitor+0x56>
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <os_heap_monitor+0x56>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <os_heap_monitor+0x58>
 8002e42:	2300      	movs	r3, #0
 8002e44:	77fb      	strb	r3, [r7, #31]
		uint8_t next_block_used = ( (pNext != NULL) && (pNext->block_used == 1) );
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <os_heap_monitor+0x6c>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <os_heap_monitor+0x6c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <os_heap_monitor+0x6e>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77bb      	strb	r3, [r7, #30]

		/* Update return Data
		 ---------------------------------------------------*/
		ret.used_size += ( (cur->block_used == 1) ? block_sz : 0 );
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <os_heap_monitor+0x7e>
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	e000      	b.n	8002e6c <os_heap_monitor+0x80>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	4413      	add	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
		ret.fragmented_size += ( ( (next_block_used == 1) && (prev_block_used == 1) && (cur->block_used == 0) ) ? block_sz : 0 );
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	7fbb      	ldrb	r3, [r7, #30]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <os_heap_monitor+0x9e>
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <os_heap_monitor+0x9e>
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <os_heap_monitor+0x9e>
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	e000      	b.n	8002e8c <os_heap_monitor+0xa0>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
		ret.biggest_block_size = ( (cur->block_used == 1) && (block_sz > ret.biggest_block_size) ? block_sz : ret.biggest_block_size );
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d103      	bne.n	8002ea0 <os_heap_monitor+0xb4>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d801      	bhi.n	8002ea4 <os_heap_monitor+0xb8>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	e000      	b.n	8002ea6 <os_heap_monitor+0xba>
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	617b      	str	r3, [r7, #20]

		/* Update iterator
		 ---------------------------------------------------*/
		pPrev = cur;
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		cur = pNext;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
	while(cur != NULL){
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1b5      	bne.n	8002e22 <os_heap_monitor+0x36>
	}

	/* Return data
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f383 8810 	msr	PRIMASK, r3
 8002ebc:	f3bf 8f6f 	isb	sy
	return ret;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	3734      	adds	r7, #52	; 0x34
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200005a0 	.word	0x200005a0

08002edc <os_mutex_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the mutex
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_mutex_udpatePrio(os_handle_t h){
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

	/* Error Check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <os_mutex_udpatePrio+0x12>
 8002eea:	2300      	movs	r3, #0
 8002eec:	e032      	b.n	8002f54 <os_mutex_udpatePrio+0x78>
	if(h->type != OS_OBJ_MUTEX) return false;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d001      	beq.n	8002efa <os_mutex_udpatePrio+0x1e>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e02c      	b.n	8002f54 <os_mutex_udpatePrio+0x78>

	/* Convet reference and store previous priority
	 ---------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*)h;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	617b      	str	r3, [r7, #20]
	int8_t prev_max_prio = mutex->max_prio;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	7f5b      	ldrb	r3, [r3, #29]
 8002f02:	74fb      	strb	r3, [r7, #19]

	/* Get reference to the first blocked task
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8002f04:	23ff      	movs	r3, #255	; 0xff
 8002f06:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8002f14:	e00f      	b.n	8002f36 <os_mutex_udpatePrio+0x5a>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f1e:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002f20:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002f24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	da01      	bge.n	8002f30 <os_mutex_udpatePrio+0x54>
 8002f2c:	7afb      	ldrb	r3, [r7, #11]
 8002f2e:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ec      	bne.n	8002f16 <os_mutex_udpatePrio+0x3a>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	mutex->max_prio = maxPrio;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	7ffa      	ldrb	r2, [r7, #31]
 8002f40:	775a      	strb	r2, [r3, #29]
	return prev_max_prio != maxPrio;
 8002f42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002f46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3724      	adds	r7, #36	; 0x24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <os_task_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the task
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_task_udpatePrio(os_handle_t h){
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <os_task_udpatePrio+0x12>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e04e      	b.n	8003010 <os_task_udpatePrio+0xb0>
	if(h->type != OS_OBJ_TASK) return false;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <os_task_udpatePrio+0x1e>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e048      	b.n	8003010 <os_task_udpatePrio+0xb0>

	/* Store priority
	 ---------------------------------------------------*/
	os_task_t* tsk = (os_task_t*)h;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	617b      	str	r3, [r7, #20]
	int8_t prev_prio = tsk->priority;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f88:	74fb      	strb	r3, [r7, #19]

	/* Point to the first task on block list
	 ---------------------------------------------------*/
	int8_t maxPrio = tsk->basePriority;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	7e5b      	ldrb	r3, [r3, #25]
 8002f8e:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8002f9c:	e00f      	b.n	8002fbe <os_task_udpatePrio+0x5e>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002fa6:	72bb      	strb	r3, [r7, #10]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002fa8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002fac:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	da01      	bge.n	8002fb8 <os_task_udpatePrio+0x58>
 8002fb4:	7abb      	ldrb	r3, [r7, #10]
 8002fb6:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ec      	bne.n	8002f9e <os_task_udpatePrio+0x3e>
	}

	/* Point to the first mutex in the owned list
	 ---------------------------------------------------*/
	head = (os_list_head_t*) ( ((os_task_t*)h)->ownedMutex);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	60fb      	str	r3, [r7, #12]
	it = head->head.next;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]

	/* While it is a valid mutex
	 ---------------------------------------------------*/
	while(it != NULL){
 8002fd0:	e00e      	b.n	8002ff0 <os_task_udpatePrio+0x90>

		/* Get mutex' priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	7f5b      	ldrb	r3, [r3, #29]
 8002fd8:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002fda:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002fde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	da01      	bge.n	8002fea <os_task_udpatePrio+0x8a>
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	77fb      	strb	r3, [r7, #31]

		/* Goes to next mutex
		 ---------------------------------------------------*/
		it = it->next;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ed      	bne.n	8002fd2 <os_task_udpatePrio+0x72>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	tsk->priority = maxPrio;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	7ffa      	ldrb	r2, [r7, #31]
 8002ffa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return prev_prio != maxPrio;
 8002ffe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003002:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003006:	429a      	cmp	r2, r3
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	3724      	adds	r7, #36	; 0x24
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <os_obj_updatePrio>:
 * @param os_handle_t h : [in] The reference to the object
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
void os_obj_updatePrio(os_handle_t h){
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

	/* Enter critical section
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003024:	f3ef 8310 	mrs	r3, PRIMASK
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	b672      	cpsid	i
 800302c:	f3bf 8f6f 	isb	sy

	/* If the object is a mutex, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d10a      	bne.n	800304e <os_obj_updatePrio+0x32>
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff4f 	bl	8002edc <os_mutex_udpatePrio>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <os_obj_updatePrio+0x32>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ffe7 	bl	800301c <os_obj_updatePrio>
	}

	/* If the object is a task, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d13d      	bne.n	80030d2 <os_obj_updatePrio+0xb6>
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff82 	bl	8002f60 <os_task_udpatePrio>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d037      	beq.n	80030d2 <os_obj_updatePrio+0xb6>

		/* If its priority changed, we must update the objects the task is waiting
		 ---------------------------------------------------*/
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e02f      	b.n	80030c8 <os_obj_updatePrio+0xac>

			/* objects that are not tasks or mutexes
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d008      	beq.n	800308c <os_obj_updatePrio+0x70>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <os_obj_updatePrio+0x82>

				/* Update object's priority
				 ---------------------------------------------------*/
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffbf 	bl	800301c <os_obj_updatePrio>
			}

			/* update msgQ
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d108      	bne.n	80030c2 <os_obj_updatePrio+0xa6>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fcdf 	bl	8003a80 <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3301      	adds	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3ca      	bcc.n	8003068 <os_obj_updatePrio+0x4c>
		}
	}

	/* Exit critical section
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f383 8810 	msr	PRIMASK, r3
 80030d8:	f3bf 8f6f 	isb	sy
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <os_list_init>:
 *
 * @brief This function initializes a list
 *
 * @return os_list_head_t* : reference to the head of the list
 **********************************************************************/
os_list_head_t* os_list_init(){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0

	/* Allocate head
	 ---------------------------------------------------*/
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 80030ea:	201c      	movs	r0, #28
 80030ec:	f7ff fd76 	bl	8002bdc <os_heap_alloc>
 80030f0:	6078      	str	r0, [r7, #4]
	if(ret == NULL) return NULL;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <os_list_init+0x18>
 80030f8:	2300      	movs	r3, #0
 80030fa:	e012      	b.n	8003122 <os_list_init+0x3e>

	/* Init head and return
	 ---------------------------------------------------*/
	ret->head.next = NULL;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
	ret->head.prev = NULL;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	605a      	str	r2, [r3, #4]
	ret->head.element = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
	ret->first = NULL;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
	ret->last = NULL;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	615a      	str	r2, [r3, #20]
	ret->listSize = 0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]

	return ret;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <os_list_search>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	  		   : [in] element to search
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(el == NULL) return NULL;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <os_list_search+0x14>
 800313a:	2300      	movs	r3, #0
 800313c:	e01f      	b.n	800317e <os_list_search+0x54>
	if(head == NULL) return NULL;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <os_list_search+0x1e>
 8003144:	2300      	movs	r3, #0
 8003146:	e01a      	b.n	800317e <os_list_search+0x54>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003148:	f3ef 8310 	mrs	r3, PRIMASK
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	b672      	cpsid	i
 8003150:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 800315a:	e002      	b.n	8003162 <os_list_search+0x38>
		it = it->next;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <os_list_search+0x48>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d1f4      	bne.n	800315c <os_list_search+0x32>
	}

	OS_EXIT_CRITICAL();
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f383 8810 	msr	PRIMASK, r3
 8003178:	f3bf 8f6f 	isb	sy
	return it;
 800317c:	68fb      	ldr	r3, [r7, #12]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <os_handle_list_searchByName>:
 * @param os_obj_type_e type   : [in] type of the object
 * @param char* name		   : [in] name of the object
 *
 * @return os_list_cell_t* : reference to the cell containing the handle or null if not found
 **********************************************************************/
os_list_cell_t* os_handle_list_searchByName(os_list_head_t* head, os_obj_type_e type, char const * name){
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	460b      	mov	r3, r1
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(head == NULL) return NULL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <os_handle_list_searchByName+0x18>
 800319e:	2300      	movs	r3, #0
 80031a0:	e031      	b.n	8003206 <os_handle_list_searchByName+0x7c>
	if(name == NULL) return NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <os_handle_list_searchByName+0x22>
 80031a8:	2300      	movs	r3, #0
 80031aa:	e02c      	b.n	8003206 <os_handle_list_searchByName+0x7c>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80031ac:	f3ef 8310 	mrs	r3, PRIMASK
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	b672      	cpsid	i
 80031b4:	f3bf 8f6f 	isb	sy

	/* Search list
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 80031be:	e017      	b.n	80031f0 <os_handle_list_searchByName+0x66>

		/* If type and name match, we break.
		 ------------------------------------------------------*/
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	7afa      	ldrb	r2, [r7, #11]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10e      	bne.n	80031ea <os_handle_list_searchByName+0x60>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <os_handle_list_searchByName+0x60>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fc fff6 	bl	80001d0 <strcmp>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <os_handle_list_searchByName+0x6e>

		/* Otherwise we go to next one
		 ------------------------------------------------------*/
		it = it->next;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e4      	bne.n	80031c0 <os_handle_list_searchByName+0x36>
 80031f6:	e000      	b.n	80031fa <os_handle_list_searchByName+0x70>
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 80031f8:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f383 8810 	msr	PRIMASK, r3
 8003200:	f3bf 8f6f 	isb	sy
	return it;
 8003204:	697b      	ldr	r3, [r7, #20]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <os_list_add>:
 * @param void* el	   		    : [in] reference to the element
 * @param os_list_add_pos_e pos : [in] flag to indicate whether to add at the first or last position
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 800321c:	f3ef 8310 	mrs	r3, PRIMASK
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	b672      	cpsid	i
 8003224:	f3bf 8f6f 	isb	sy

	/* Allocate cell
	 ------------------------------------------------------*/
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 8003228:	2010      	movs	r0, #16
 800322a:	f7ff fcd7 	bl	8002bdc <os_heap_alloc>
 800322e:	6178      	str	r0, [r7, #20]

	/* Check allocation
	 ------------------------------------------------------*/
	if(new == NULL) {
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <os_list_add+0x38>

		/* EXIT Critical Section
		 ------------------------------------------------------*/
		OS_EXIT_CRITICAL();
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f383 8810 	msr	PRIMASK, r3
 800323c:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 8003240:	f06f 0302 	mvn.w	r3, #2
 8003244:	e04e      	b.n	80032e4 <os_list_add+0xd6>
	}

	/* Store information on new cell
	 ------------------------------------------------------*/
	new->order  = head->listSize++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	6191      	str	r1, [r2, #24]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	60d3      	str	r3, [r2, #12]
	new->element = el;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	609a      	str	r2, [r3, #8]

	/* Add first element
	 ------------------------------------------------------*/
	if(head->head.next == NULL) {
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <os_list_add+0x74>
		head->last = new;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	615a      	str	r2, [r3, #20]
		new->prev = &head->head;
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	605a      	str	r2, [r3, #4]
		new->next = NULL;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
		head->head.next = new;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	601a      	str	r2, [r3, #0]
		head->first = new;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	e02a      	b.n	80032d8 <os_list_add+0xca>
	}
	else{

		/* Add cell at the beginning
		 ------------------------------------------------------*/
		if(pos == OS_LIST_FIRST){
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d114      	bne.n	80032b2 <os_list_add+0xa4>
			new->prev = head->first->prev;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	605a      	str	r2, [r3, #4]
			new->next = head->first;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	601a      	str	r2, [r3, #0]
			head->first->prev->next = new;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	601a      	str	r2, [r3, #0]
			head->first->prev = new;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	605a      	str	r2, [r3, #4]
			head->first = new;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	611a      	str	r2, [r3, #16]
		}

		/* Add cell at the end
		 ------------------------------------------------------*/
		if(pos == OS_LIST_LAST){
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10f      	bne.n	80032d8 <os_list_add+0xca>
			new->next  = head->last->next;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	601a      	str	r2, [r3, #0]
			new->prev  = head->last;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	605a      	str	r2, [r3, #4]
			head->last->next = new;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	601a      	str	r2, [r3, #0]
			head->last = new;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	615a      	str	r2, [r3, #20]
		}
	}
	OS_EXIT_CRITICAL();
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f383 8810 	msr	PRIMASK, r3
 80032de:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <os_list_remove>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	   		   : [in]  reference to the element
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_remove(os_list_head_t* head, void* el){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) el;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	617b      	str	r3, [r7, #20]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <os_list_remove+0x1a>
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	e068      	b.n	80033d8 <os_list_remove+0xec>

	/* Search cell to verify it is in the list
	 ------------------------------------------------------*/
	os_list_cell_t* pCell = os_list_search(head, el);
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff0e 	bl	800312a <os_list_search>
 800330e:	6138      	str	r0, [r7, #16]

	/* Return if not
	 ------------------------------------------------------*/
	if(pCell == NULL) return OS_ERR_INVALID;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <os_list_remove+0x30>
 8003316:	f06f 0301 	mvn.w	r3, #1
 800331a:	e05d      	b.n	80033d8 <os_list_remove+0xec>

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 800331c:	f3ef 8310 	mrs	r3, PRIMASK
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	b672      	cpsid	i
 8003324:	f3bf 8f6f 	isb	sy

	/* Declare Iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = &head->head;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* pPrev = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]

	/* Search for the task
	 ------------------------------------------------------*/
	while(it->next != NULL){
 8003330:	e016      	b.n	8003360 <os_list_remove+0x74>

		/* Update order
		 ------------------------------------------------------*/
		if(it->next->order > pCell->order) it->next->order--;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	429a      	cmp	r2, r3
 800333e:	d904      	bls.n	800334a <os_list_remove+0x5e>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	3a01      	subs	r2, #1
 8003348:	60da      	str	r2, [r3, #12]

		/* Store previous
		 ------------------------------------------------------*/
		if(it->next->element == el) pPrev = it;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d101      	bne.n	800335a <os_list_remove+0x6e>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	61bb      	str	r3, [r7, #24]

		/* Go to next
		 ------------------------------------------------------*/
		it = it->next;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	61fb      	str	r3, [r7, #28]
	while(it->next != NULL){
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e4      	bne.n	8003332 <os_list_remove+0x46>
	}

	/* Update first
	 ------------------------------------------------------*/
	if(pCell == head->first){
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	429a      	cmp	r2, r3
 8003370:	d104      	bne.n	800337c <os_list_remove+0x90>
		head->first = head->first->next;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]
	}

	/* Update last
	 ------------------------------------------------------*/
	if(pCell == head->last){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d10c      	bne.n	80033a0 <os_list_remove+0xb4>
		head->last = (head->last->prev == &head->head) ? NULL : head->last->prev;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d003      	beq.n	800339a <os_list_remove+0xae>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	e000      	b.n	800339c <os_list_remove+0xb0>
 800339a:	2300      	movs	r3, #0
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6153      	str	r3, [r2, #20]
	}

	/* Kill cell
	 ------------------------------------------------------*/
	pPrev->next = pPrev->next->next;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	601a      	str	r2, [r3, #0]
	if(pCell->next != NULL) pCell->next->prev = pCell->prev;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <os_list_remove+0xd0>
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	6852      	ldr	r2, [r2, #4]
 80033ba:	605a      	str	r2, [r3, #4]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
	OS_EXIT_CRITICAL();
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f383 8810 	msr	PRIMASK, r3
 80033cc:	f3bf 8f6f 	isb	sy
	return os_heap_free(pCell);
 80033d0:	6938      	ldr	r0, [r7, #16]
 80033d2:	f7ff fc69 	bl	8002ca8 <os_heap_free>
 80033d6:	4603      	mov	r3, r0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <os_list_clear>:
 * @brief This function clears a list, freeing all its cells and head
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_list_clear(os_list_head_t* head){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01c      	beq.n	8003428 <os_list_clear+0x48>

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_CRITICAL_SECTION(
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	b672      	cpsid	i
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e007      	b.n	8003410 <os_list_clear+0x30>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	6938      	ldr	r0, [r7, #16]
 800340c:	f7ff fc4c 	bl	8002ca8 <os_heap_free>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f4      	bne.n	8003400 <os_list_clear+0x20>
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fc46 	bl	8002ca8 <os_heap_free>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f383 8810 	msr	PRIMASK, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	e000      	b.n	800342a <os_list_clear+0x4a>
	if(head == NULL) return;
 8003428:	bf00      	nop

		/* Free head
		 ---------------------------------------------------*/
		os_heap_free(head);
	);
}
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <os_task_list_sort>:
 * Must be used on task lists
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_task_list_sort(os_list_head_t* head){
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b08b      	sub	sp, #44	; 0x2c
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8098 	beq.w	8003570 <os_task_list_sort+0x140>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	b672      	cpsid	i
 8003448:	f3bf 8f6f 	isb	sy

	/* Update priority for all tasks
	 ---------------------------------------------------*/
	os_list_cell_t* p = head->head.next;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8003452:	e00c      	b.n	800346e <os_task_list_sort+0x3e>
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	689c      	ldr	r4, [r3, #8]
 800345c:	4610      	mov	r0, r2
 800345e:	f002 f8f9 	bl	8005654 <os_task_getPrio>
 8003462:	4603      	mov	r3, r0
 8003464:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		p = p->next;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ef      	bne.n	8003454 <os_task_list_sort+0x24>
	}

	/* Begin sort
	 ---------------------------------------------------*/
	os_list_cell_t* it_slow = &head->head;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 8003478:	e069      	b.n	800354e <os_task_list_sort+0x11e>

		/* For each cell
		 ---------------------------------------------------*/
		bool changeMade = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	77fb      	strb	r3, [r7, #31]
		os_list_cell_t* it_fast = &head->head;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8003482:	e052      	b.n	800352a <os_task_list_sort+0xfa>

			/* Decide to swap or not
			 ---------------------------------------------------*/
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f993 204c 	ldrsb.w	r2, [r3, #76]	; 0x4c
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	68d1      	ldr	r1, [r2, #12]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	68d2      	ldr	r2, [r2, #12]
 80034b4:	4291      	cmp	r1, r2
 80034b6:	bf8c      	ite	hi
 80034b8:	2201      	movhi	r2, #1
 80034ba:	2200      	movls	r2, #0
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
				 swap |= ((os_task_t*)it_fast->next->element)->priority < ((os_task_t*)it_fast->next->next->element)->priority;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	6892      	ldr	r2, [r2, #8]
 80034d2:	f992 104c 	ldrsb.w	r1, [r2, #76]	; 0x4c
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	6892      	ldr	r2, [r2, #8]
 80034de:	f992 204c 	ldrsb.w	r2, [r2, #76]	; 0x4c
 80034e2:	4291      	cmp	r1, r2
 80034e4:	bfb4      	ite	lt
 80034e6:	2201      	movlt	r2, #1
 80034e8:	2200      	movge	r2, #0
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	4313      	orrs	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]

			/* Swap cells
			 ---------------------------------------------------*/
			if(swap){
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <os_task_list_sort+0xf4>

				/* Store references
				 ---------------------------------------------------*/
				os_list_cell_t* pN1 = it_fast->next;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
				os_list_cell_t* pN2 = it_fast->next->next;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

				/* Swap
				 ---------------------------------------------------*/
				it_fast->next = pN2;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	601a      	str	r2, [r3, #0]
				pN1->next = pN2->next;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	601a      	str	r2, [r3, #0]
				pN2->next = pN1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	601a      	str	r2, [r3, #0]

				changeMade = 1;
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]

			}

			it_fast = it_fast->next;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <os_task_list_sort+0x10c>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1a3      	bne.n	8003484 <os_task_list_sort+0x54>

		}

		/* If no changement was made, we finished
		 ---------------------------------------------------*/
		if(changeMade == 0) break;
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10c      	bne.n	8003562 <os_task_list_sort+0x132>

		it_slow = it_slow->next;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <os_task_list_sort+0x134>
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d18c      	bne.n	800347a <os_task_list_sort+0x4a>
 8003560:	e000      	b.n	8003564 <os_task_list_sort+0x134>
		if(changeMade == 0) break;
 8003562:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f383 8810 	msr	PRIMASK, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	e000      	b.n	8003572 <os_task_list_sort+0x142>
	if(head == NULL) return;
 8003570:	bf00      	nop
}
 8003572:	372c      	adds	r7, #44	; 0x2c
 8003574:	46bd      	mov	sp, r7
 8003576:	bd90      	pop	{r4, r7, pc}

08003578 <os_handle_list_getObjToUpdate>:
 *
 * @brief This function searches for an object in the object list that needs to update. Must be used in a handle list
 *
 * @return os_handle_t handle to the object to update or NULL if nothing to do
 **********************************************************************/
os_handle_t os_handle_list_getObjToUpdate(){
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0

	/* Search object list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <os_handle_list_getObjToUpdate+0x38>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	e00a      	b.n	800359c <os_handle_list_getObjToUpdate+0x24>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	7a1b      	ldrb	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <os_handle_list_getObjToUpdate+0x1e>
			return it->element;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	e006      	b.n	80035a4 <os_handle_list_getObjToUpdate+0x2c>
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f1      	bne.n	8003586 <os_handle_list_getObjToUpdate+0xe>
	}

	return NULL;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20014dd0 	.word	0x20014dd0

080035b4 <os_task_list_isObjFreeOnTask>:
 * @param os_handle_t obj  : [in] object to scan
 * @param os_handle_t task : [in] task to stop the scan
 *
 * @return bool : 1 = object is free ; 0 = object is not free
 **********************************************************************/
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80035be:	f3ef 8310 	mrs	r3, PRIMASK
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	b672      	cpsid	i
 80035c6:	f3bf 8f6f 	isb	sy

	/* Get current free count
	 ---------------------------------------------------*/
	uint32_t freeCount = obj->getFreeCount(obj);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24

	/* If it is 0, return 0 immediately
	 ---------------------------------------------------*/
	if(freeCount == 0) {
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <os_task_list_isObjFreeOnTask+0x34>
		OS_EXIT_CRITICAL();
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f383 8810 	msr	PRIMASK, r3
 80035e0:	f3bf 8f6f 	isb	sy
		return 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e0a8      	b.n	800373a <os_task_list_isObjFreeOnTask+0x186>
	}

	/* If it can be taken more times than the number of tasks waiting for it return 1
	 ---------------------------------------------------*/
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d203      	bcs.n	80035fc <os_task_list_isObjFreeOnTask+0x48>
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d106      	bne.n	800360a <os_task_list_isObjFreeOnTask+0x56>
		OS_EXIT_CRITICAL();
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f383 8810 	msr	PRIMASK, r3
 8003602:	f3bf 8f6f 	isb	sy
		return 1;
 8003606:	2301      	movs	r3, #1
 8003608:	e097      	b.n	800373a <os_task_list_isObjFreeOnTask+0x186>
	}

	/* Otherwise, sort and start scan
	 ---------------------------------------------------*/
	os_task_list_sort(obj->blockList);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff0e 	bl	8003430 <os_task_list_sort>

	/* Start scan by pointing to the first waiting task
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	e07c      	b.n	8003718 <os_task_list_isObjFreeOnTask+0x164>

		/* Convert address
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*) it->element;
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	613b      	str	r3, [r7, #16]

		/* Return if the object has no more free counters
		 ---------------------------------------------------*/
		if(freeCount == 0) {
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <os_task_list_isObjFreeOnTask+0x84>
			OS_EXIT_CRITICAL();
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f383 8810 	msr	PRIMASK, r3
 8003630:	f3bf 8f6f 	isb	sy
			return 0;
 8003634:	2300      	movs	r3, #0
 8003636:	e080      	b.n	800373a <os_task_list_isObjFreeOnTask+0x186>
		}

		/* Stop scanning if we are pointing at the task we are searching
		 ---------------------------------------------------*/
		if(it->element == task) break;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d06f      	beq.n	8003722 <os_task_list_isObjFreeOnTask+0x16e>

		/* Do not consider deleting or ended tasks
		 ---------------------------------------------------*/
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	7e1b      	ldrb	r3, [r3, #24]
 8003646:	2b04      	cmp	r3, #4
 8003648:	d062      	beq.n	8003710 <os_task_list_isObjFreeOnTask+0x15c>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	7e1b      	ldrb	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d05e      	beq.n	8003710 <os_task_list_isObjFreeOnTask+0x15c>

		/* If the task is waiting one object
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d121      	bne.n	80036a0 <os_task_list_isObjFreeOnTask+0xec>

			/* Search for the position on the array of the object
			 ---------------------------------------------------*/
			size_t i = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < t->sizeObjs; i++){
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	e00b      	b.n	800367e <os_task_list_isObjFreeOnTask+0xca>
				if(t->objWaited[i] == obj) break;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	d008      	beq.n	800368a <os_task_list_isObjFreeOnTask+0xd6>
			for(i = 0; i < t->sizeObjs; i++){
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	429a      	cmp	r2, r3
 8003686:	d3ee      	bcc.n	8003666 <os_task_list_isObjFreeOnTask+0xb2>
 8003688:	e000      	b.n	800368c <os_task_list_isObjFreeOnTask+0xd8>
				if(t->objWaited[i] == obj) break;
 800368a:	bf00      	nop
			}

			/* If the position of the object is smaller than the current object the task wants, it will switch
			 ---------------------------------------------------*/
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	429a      	cmp	r2, r3
 8003694:	d202      	bcs.n	800369c <os_task_list_isObjFreeOnTask+0xe8>
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3b01      	subs	r3, #1
 800369a:	e000      	b.n	800369e <os_task_list_isObjFreeOnTask+0xea>
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If the task is waiting all objects
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d133      	bne.n	8003712 <os_task_list_isObjFreeOnTask+0x15e>

			/* Scan all objects to know if all of them are available
			 ---------------------------------------------------*/
			bool getObjs = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	76fb      	strb	r3, [r7, #27]
			for(size_t i = 0; i < t->sizeObjs; i++){
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e01f      	b.n	80036f4 <os_task_list_isObjFreeOnTask+0x140>

				/* Skip current object
				 ---------------------------------------------------*/
				if(t->objWaited[i] == obj) continue;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d012      	beq.n	80036ec <os_task_list_isObjFreeOnTask+0x138>

				/* If one of the objects is not free on the task, we must wait
				 ---------------------------------------------------*/
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff6d 	bl	80035b4 <os_task_list_isObjFreeOnTask>
 80036da:	4603      	mov	r3, r0
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <os_task_list_isObjFreeOnTask+0x13a>
					getObjs = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	76fb      	strb	r3, [r7, #27]
					break;
 80036ea:	e008      	b.n	80036fe <os_task_list_isObjFreeOnTask+0x14a>
				if(t->objWaited[i] == obj) continue;
 80036ec:	bf00      	nop
			for(size_t i = 0; i < t->sizeObjs; i++){
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3da      	bcc.n	80036b4 <os_task_list_isObjFreeOnTask+0x100>
				}
			}

			/* Decrement freeCount if all objects are free
			 ---------------------------------------------------*/
			freeCount = getObjs ? freeCount - 1 : freeCount;
 80036fe:	7efb      	ldrb	r3, [r7, #27]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <os_task_list_isObjFreeOnTask+0x156>
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	3b01      	subs	r3, #1
 8003708:	e000      	b.n	800370c <os_task_list_isObjFreeOnTask+0x158>
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	e000      	b.n	8003712 <os_task_list_isObjFreeOnTask+0x15e>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003710:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f47f af7f 	bne.w	800361e <os_task_list_isObjFreeOnTask+0x6a>
 8003720:	e000      	b.n	8003724 <os_task_list_isObjFreeOnTask+0x170>
		if(it->element == task) break;
 8003722:	bf00      	nop
		}
	}

	/* Return if the object is free or not
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f383 8810 	msr	PRIMASK, r3
 800372a:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <os_handle_list_updateAndCheck>:
 *
 * @param os_handle_t h : [in] handle to the object to update
 *
 * @return bool : 1 = current task must yield
 **********************************************************************/
bool os_handle_list_updateAndCheck(os_handle_t h){
 8003744:	b580      	push	{r7, lr}
 8003746:	b08e      	sub	sp, #56	; 0x38
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800374c:	f3ef 8310 	mrs	r3, PRIMASK
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	b672      	cpsid	i
 8003754:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8003758:	23ff      	movs	r3, #255	; 0xff
 800375a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(h != NULL){
 800375e:	e167      	b.n	8003a30 <os_handle_list_updateAndCheck+0x2ec>

		/* Sort List
		 ---------------------------------------------------*/
		os_task_list_sort(h->blockList);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fe63 	bl	8003430 <os_task_list_sort>

		/* Get the number of times we can get the object
		 ---------------------------------------------------*/
		uint32_t freeCount = h->getFreeCount(h);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	6338      	str	r0, [r7, #48]	; 0x30

		/* Updates every task on the block list
		 ---------------------------------------------------*/
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377c:	e14e      	b.n	8003a1c <os_handle_list_updateAndCheck+0x2d8>

			/* Ignore deleting and ended tasks
			 ---------------------------------------------------*/
			os_task_t* t = (os_task_t*)it->element;
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	617b      	str	r3, [r7, #20]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	7e1b      	ldrb	r3, [r3, #24]
 8003788:	2b04      	cmp	r3, #4
 800378a:	f000 8143 	beq.w	8003a14 <os_handle_list_updateAndCheck+0x2d0>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	7e1b      	ldrb	r3, [r3, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	f000 813e 	beq.w	8003a14 <os_handle_list_updateAndCheck+0x2d0>

			/* If the task is only waiting one object
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 8091 	bne.w	80038c6 <os_handle_list_updateAndCheck+0x182>

				/* Search the position of the object in the task array
				 ---------------------------------------------------*/
				size_t i = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
				for(i = 0; i < t->sizeObjs; i++){
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ac:	e00b      	b.n	80037c6 <os_handle_list_updateAndCheck+0x82>
					if(t->objWaited[i] == h) break;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d008      	beq.n	80037d2 <os_handle_list_updateAndCheck+0x8e>
				for(i = 0; i < t->sizeObjs; i++){
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	3301      	adds	r3, #1
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d3ee      	bcc.n	80037ae <os_handle_list_updateAndCheck+0x6a>
 80037d0:	e000      	b.n	80037d4 <os_handle_list_updateAndCheck+0x90>
					if(t->objWaited[i] == h) break;
 80037d2:	bf00      	nop
				}

				/* If the object can still be taken
				 ---------------------------------------------------*/
				if(freeCount != 0){
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d026      	beq.n	8003828 <os_handle_list_updateAndCheck+0xe4>

					/* Only do something if the current object has a smaller index than the one the task is waiting for
					 ---------------------------------------------------*/
					if(i < t->objWanted){
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d270      	bcs.n	80038c6 <os_handle_list_updateAndCheck+0x182>

						/* Since the task will switch to the smaller index object, we must update the old object
						 * This update can possibly wake a task
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d208      	bcs.n	8003802 <os_handle_list_updateAndCheck+0xbe>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2201      	movs	r2, #1
 8003800:	721a      	strb	r2, [r3, #8]

						/* Store the object's index and tag task as ready
						 ---------------------------------------------------*/
						t->objWanted = i;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
						t->state = OS_TASK_READY;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2202      	movs	r2, #2
 800380c:	761a      	strb	r2, [r3, #24]

						/* Decrement freecount if needed
						 ---------------------------------------------------*/
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d005      	beq.n	8003822 <os_handle_list_updateAndCheck+0xde>
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <os_handle_list_updateAndCheck+0xde>
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3b01      	subs	r3, #1
 8003820:	e000      	b.n	8003824 <os_handle_list_updateAndCheck+0xe0>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
 8003826:	e04e      	b.n	80038c6 <os_handle_list_updateAndCheck+0x182>
				 ---------------------------------------------------*/
				else{

					/* Only do something if the current waited object is no longer available
					 ---------------------------------------------------*/
					if(t->objWanted == i){
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382e:	429a      	cmp	r2, r3
 8003830:	d149      	bne.n	80038c6 <os_handle_list_updateAndCheck+0x182>

						/* Search for an available object in higher indexes
						 ---------------------------------------------------*/
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	3301      	adds	r3, #1
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
 800383a:	e00f      	b.n	800385c <os_handle_list_updateAndCheck+0x118>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff feb2 	bl	80035b4 <os_task_list_isObjFreeOnTask>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <os_handle_list_updateAndCheck+0x124>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	3301      	adds	r3, #1
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003862:	429a      	cmp	r2, r3
 8003864:	d3ea      	bcc.n	800383c <os_handle_list_updateAndCheck+0xf8>
 8003866:	e000      	b.n	800386a <os_handle_list_updateAndCheck+0x126>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8003868:	bf00      	nop


						/* Tag task as ready if there is an available object, or blocked if not timeout
						 ---------------------------------------------------*/
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003870:	429a      	cmp	r2, r3
 8003872:	d201      	bcs.n	8003878 <os_handle_list_updateAndCheck+0x134>
 8003874:	2202      	movs	r2, #2
 8003876:	e000      	b.n	800387a <os_handle_list_updateAndCheck+0x136>
 8003878:	2203      	movs	r2, #3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	761a      	strb	r2, [r3, #24]
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <os_handle_list_updateAndCheck+0x148>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	7e1a      	ldrb	r2, [r3, #24]
 800388a:	e000      	b.n	800388e <os_handle_list_updateAndCheck+0x14a>
 800388c:	2202      	movs	r2, #2
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	761a      	strb	r2, [r3, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003898:	429a      	cmp	r2, r3
 800389a:	d201      	bcs.n	80038a0 <os_handle_list_updateAndCheck+0x15c>
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	e001      	b.n	80038a4 <os_handle_list_updateAndCheck+0x160>
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	63d3      	str	r3, [r2, #60]	; 0x3c

						/* If the task switched to a higher index object, update it
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d208      	bcs.n	80038c6 <os_handle_list_updateAndCheck+0x182>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2201      	movs	r2, #1
 80038c4:	721a      	strb	r2, [r3, #8]
				}
			}

			/* If the task is waiting all objects
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 808d 	bne.w	80039ec <os_handle_list_updateAndCheck+0x2a8>

				/* Store objWanted to use it later
				 ---------------------------------------------------*/
				size_t last_objWanted = t->objWanted;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	613b      	str	r3, [r7, #16]

				/* If the current object is available
				 ---------------------------------------------------*/
				if(freeCount != 0){
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d056      	beq.n	800398c <os_handle_list_updateAndCheck+0x248>

					/* Check if all other objects are available
					 ---------------------------------------------------*/
					bool getObjs = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(size_t i = 0; i < t->sizeObjs; i++){
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	e020      	b.n	800392c <os_handle_list_updateAndCheck+0x1e8>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d013      	beq.n	8003924 <os_handle_list_updateAndCheck+0x1e0>

						/* If one of the objects is not free on the task, we must wait
						 ---------------------------------------------------*/
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fe52 	bl	80035b4 <os_task_list_isObjFreeOnTask>
 8003910:	4603      	mov	r3, r0
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <os_handle_list_updateAndCheck+0x1e2>
							getObjs = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 8003922:	e008      	b.n	8003936 <os_handle_list_updateAndCheck+0x1f2>
						if(t->objWaited[i] == h) continue;
 8003924:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	3301      	adds	r3, #1
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3d9      	bcc.n	80038ea <os_handle_list_updateAndCheck+0x1a6>
						}
					}

					/* Update task infos according to the result
					 ---------------------------------------------------*/
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 8003936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <os_handle_list_updateAndCheck+0x1fe>
 800393e:	2200      	movs	r2, #0
 8003940:	e001      	b.n	8003946 <os_handle_list_updateAndCheck+0x202>
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800394a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <os_handle_list_updateAndCheck+0x212>
 8003952:	2202      	movs	r2, #2
 8003954:	e000      	b.n	8003958 <os_handle_list_updateAndCheck+0x214>
 8003956:	2203      	movs	r2, #3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	761a      	strb	r2, [r3, #24]
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <os_handle_list_updateAndCheck+0x226>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	7e1a      	ldrb	r2, [r3, #24]
 8003968:	e000      	b.n	800396c <os_handle_list_updateAndCheck+0x228>
 800396a:	2202      	movs	r2, #2
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	761a      	strb	r2, [r3, #24]

					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 8003970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <os_handle_list_updateAndCheck+0x242>
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d002      	beq.n	8003986 <os_handle_list_updateAndCheck+0x242>
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	3b01      	subs	r3, #1
 8003984:	e000      	b.n	8003988 <os_handle_list_updateAndCheck+0x244>
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	633b      	str	r3, [r7, #48]	; 0x30
 800398a:	e00c      	b.n	80039a6 <os_handle_list_updateAndCheck+0x262>
				 ---------------------------------------------------*/
				else{

					/* Just update task infos
					 ---------------------------------------------------*/
					t->objWanted = 0xFFFFFFFF;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f04f 32ff 	mov.w	r2, #4294967295
 8003992:	63da      	str	r2, [r3, #60]	; 0x3c
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <os_handle_list_updateAndCheck+0x25c>
 800399c:	2202      	movs	r2, #2
 800399e:	e000      	b.n	80039a2 <os_handle_list_updateAndCheck+0x25e>
 80039a0:	2203      	movs	r2, #3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	761a      	strb	r2, [r3, #24]
				}

				/* Detects that the objWanted changed
				 ---------------------------------------------------*/
				if(last_objWanted != t->objWanted){
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d01d      	beq.n	80039ec <os_handle_list_updateAndCheck+0x2a8>

					/* If the task was waiting and now wants to get them all (all of them are available)
					 * or if the task wanted to get them all and now is waiting (one of them is no longer available)
					 * we must tag the other objects to update as well
					 ---------------------------------------------------*/
					for(size_t i = 0; i < t->sizeObjs; i++){
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e015      	b.n	80039e2 <os_handle_list_updateAndCheck+0x29e>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d008      	beq.n	80039da <os_handle_list_updateAndCheck+0x296>

						/* Tag all objects to update
						 ---------------------------------------------------*/
						t->objWaited[i]->objUpdate = 1;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2201      	movs	r2, #1
 80039d6:	721a      	strb	r2, [r3, #8]
 80039d8:	e000      	b.n	80039dc <os_handle_list_updateAndCheck+0x298>
						if(t->objWaited[i] == h) continue;
 80039da:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3e4      	bcc.n	80039b6 <os_handle_list_updateAndCheck+0x272>
				}
			}

			/* If the task is ready, get its priority to check if we should yeild
			 ---------------------------------------------------*/
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	7e1b      	ldrb	r3, [r3, #24]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d10a      	bne.n	8003a0a <os_handle_list_updateAndCheck+0x2c6>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80039fa:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80039fe:	429a      	cmp	r2, r3
 8003a00:	da03      	bge.n	8003a0a <os_handle_list_updateAndCheck+0x2c6>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003a08:	e001      	b.n	8003a0e <os_handle_list_updateAndCheck+0x2ca>
 8003a0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003a0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003a12:	e000      	b.n	8003a16 <os_handle_list_updateAndCheck+0x2d2>
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003a14:	bf00      	nop
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f47f aead 	bne.w	800377e <os_handle_list_updateAndCheck+0x3a>
		}

		/* End of while. All tasks have been updated, so we remove the update flag
		 ---------------------------------------------------*/
		h->objUpdate = 0;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	721a      	strb	r2, [r3, #8]
		 * This logic is important for 2 reasons
		 *
		 * 1 - avoids extra recursive calls
		 * 2 - makes sure that an object is updated ultil the end before switching to another one
		 ---------------------------------------------------*/
		h = os_handle_list_getObjToUpdate();
 8003a2a:	f7ff fda5 	bl	8003578 <os_handle_list_getObjToUpdate>
 8003a2e:	6078      	str	r0, [r7, #4]
	while(h != NULL){
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f47f ae94 	bne.w	8003760 <os_handle_list_updateAndCheck+0x1c>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8003a38:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	dd0d      	ble.n	8003a5c <os_handle_list_updateAndCheck+0x318>
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <os_handle_list_updateAndCheck+0x338>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fe04 	bl	8005654 <os_task_getPrio>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003a54:	4293      	cmp	r3, r2
 8003a56:	dd01      	ble.n	8003a5c <os_handle_list_updateAndCheck+0x318>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <os_handle_list_updateAndCheck+0x31a>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	7efb      	ldrb	r3, [r7, #27]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	76fb      	strb	r3, [r7, #27]

	OS_EXIT_CRITICAL();
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f383 8810 	msr	PRIMASK, r3
 8003a6e:	f3bf 8f6f 	isb	sy
	return mustYield;
 8003a72:	7efb      	ldrb	r3, [r7, #27]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3738      	adds	r7, #56	; 0x38
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200145a4 	.word	0x200145a4

08003a80 <os_msgQ_updateAndCheck>:
 * @param os_hMsgQ_t msgQ : [in] msgQ to update
 *
 * @return bool : (1) current task should yeild
 *
 **********************************************************************/
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(msgQ == NULL) return 0;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <os_msgQ_updateAndCheck+0x12>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e081      	b.n	8003b96 <os_msgQ_updateAndCheck+0x116>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d001      	beq.n	8003a9e <os_msgQ_updateAndCheck+0x1e>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e07b      	b.n	8003b96 <os_msgQ_updateAndCheck+0x116>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	b672      	cpsid	i
 8003aa6:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8003aaa:	23ff      	movs	r3, #255	; 0xff
 8003aac:	77fb      	strb	r3, [r7, #31]

	/* Sort List
	 ---------------------------------------------------*/
	os_task_list_sort(msgQ->obj.blockList);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fcbc 	bl	8003430 <os_task_list_sort>

	/* Get the number of times we can get the object
	 ---------------------------------------------------*/
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	61bb      	str	r3, [r7, #24]

	/* Updates every task on the block list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e044      	b.n	8003b54 <os_msgQ_updateAndCheck+0xd4>

		/* Ignore deleting and ended tasks
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*)it->element;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60fb      	str	r3, [r7, #12]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	7e1b      	ldrb	r3, [r3, #24]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d039      	beq.n	8003b4c <os_msgQ_updateAndCheck+0xcc>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	7e1b      	ldrb	r3, [r3, #24]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d035      	beq.n	8003b4c <os_msgQ_updateAndCheck+0xcc>

		/* If the object can still be taken
		 ---------------------------------------------------*/
		if(freeCount != 0){
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <os_msgQ_updateAndCheck+0x8c>

			/* Tag task as ready
			 ---------------------------------------------------*/
			t->objWanted = 0;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c
			t->state = OS_TASK_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2202      	movs	r2, #2
 8003af0:	761a      	strb	r2, [r3, #24]

			/* Decrement freecount if needed
			 ---------------------------------------------------*/
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d005      	beq.n	8003b06 <os_msgQ_updateAndCheck+0x86>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <os_msgQ_updateAndCheck+0x86>
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	e000      	b.n	8003b08 <os_msgQ_updateAndCheck+0x88>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e00c      	b.n	8003b26 <os_msgQ_updateAndCheck+0xa6>
		 ---------------------------------------------------*/
		else{

			/* Just update task infos
			 ---------------------------------------------------*/
			t->objWanted = 0xFFFFFFFF;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <os_msgQ_updateAndCheck+0xa0>
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	e000      	b.n	8003b22 <os_msgQ_updateAndCheck+0xa2>
 8003b20:	2203      	movs	r2, #3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	761a      	strb	r2, [r3, #24]
		}

		/* If the task is ready, get its priority to check if we should yeild
		 ---------------------------------------------------*/
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	7e1b      	ldrb	r3, [r3, #24]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d10a      	bne.n	8003b44 <os_msgQ_updateAndCheck+0xc4>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003b34:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	da03      	bge.n	8003b44 <os_msgQ_updateAndCheck+0xc4>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003b42:	e001      	b.n	8003b48 <os_msgQ_updateAndCheck+0xc8>
 8003b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e000      	b.n	8003b4e <os_msgQ_updateAndCheck+0xce>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003b4c:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1b7      	bne.n	8003aca <os_msgQ_updateAndCheck+0x4a>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8003b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	dd0d      	ble.n	8003b7e <os_msgQ_updateAndCheck+0xfe>
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <os_msgQ_updateAndCheck+0x120>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fd73 	bl	8005654 <os_task_getPrio>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	dd01      	ble.n	8003b7e <os_msgQ_updateAndCheck+0xfe>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <os_msgQ_updateAndCheck+0x100>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	74fb      	strb	r3, [r7, #19]
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	74fb      	strb	r3, [r7, #19]

	OS_EXIT_CRITICAL();
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f383 8810 	msr	PRIMASK, r3
 8003b90:	f3bf 8f6f 	isb	sy
	return mustYield;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200145a4 	.word	0x200145a4

08003ba4 <os_elf_checkHeader>:
 * @param os_elf_header_t* header 	: [out] header information
 * @param lfs_file_t* lfs_file		: [ in] File pointer to the elf file
 *
 * @return os_err_e : <0 if error
 **********************************************************************/
static os_err_e os_elf_checkHeader(os_elf_header_t* header, lfs_file_t* lfs_file){
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]

	/* Rewind file to the beginning
	 ------------------------------------------------------*/
	int err = lfs_file_seek(&lfs, lfs_file, 0, LFS_SEEK_SET);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	4824      	ldr	r0, [pc, #144]	; (8003c48 <os_elf_checkHeader+0xa4>)
 8003bb6:	f008 fec1 	bl	800c93c <lfs_file_seek>
 8003bba:	60f8      	str	r0, [r7, #12]
	if(err < 0){
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da02      	bge.n	8003bc8 <os_elf_checkHeader+0x24>
		return OS_ERR_FS;
 8003bc2:	f06f 0307 	mvn.w	r3, #7
 8003bc6:	e03b      	b.n	8003c40 <os_elf_checkHeader+0x9c>
	}

	/* Read the header
	 ------------------------------------------------------*/
	err = lfs_file_read(&lfs, lfs_file, header, sizeof(*header));
 8003bc8:	2334      	movs	r3, #52	; 0x34
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	481e      	ldr	r0, [pc, #120]	; (8003c48 <os_elf_checkHeader+0xa4>)
 8003bd0:	f008 fe54 	bl	800c87c <lfs_file_read>
 8003bd4:	60f8      	str	r0, [r7, #12]
	if(err < 0){
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da02      	bge.n	8003be2 <os_elf_checkHeader+0x3e>
		return OS_ERR_FS;
 8003bdc:	f06f 0307 	mvn.w	r3, #7
 8003be0:	e02e      	b.n	8003c40 <os_elf_checkHeader+0x9c>
	}

	/* Check magic number
	 ------------------------------------------------------*/
	if(header->e_ident.magic[0] != 0x7F || header->e_ident.magic[1] != 'E' || header->e_ident.magic[2] != 'L' || header->e_ident.magic[3] != 'F'){
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b7f      	cmp	r3, #127	; 0x7f
 8003be8:	d10b      	bne.n	8003c02 <os_elf_checkHeader+0x5e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	2b45      	cmp	r3, #69	; 0x45
 8003bf0:	d107      	bne.n	8003c02 <os_elf_checkHeader+0x5e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	789b      	ldrb	r3, [r3, #2]
 8003bf6:	2b4c      	cmp	r3, #76	; 0x4c
 8003bf8:	d103      	bne.n	8003c02 <os_elf_checkHeader+0x5e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	78db      	ldrb	r3, [r3, #3]
 8003bfe:	2b46      	cmp	r3, #70	; 0x46
 8003c00:	d002      	beq.n	8003c08 <os_elf_checkHeader+0x64>
		return OS_ERR_INVALID;
 8003c02:	f06f 0301 	mvn.w	r3, #1
 8003c06:	e01b      	b.n	8003c40 <os_elf_checkHeader+0x9c>
	}

	/* Check endianness, bit depth, and version
	 ------------------------------------------------------*/
	if(header->e_ident.class != 1 || header->e_ident.data != 1 || header->e_ident.version != 1){
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	791b      	ldrb	r3, [r3, #4]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <os_elf_checkHeader+0x7c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	795b      	ldrb	r3, [r3, #5]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d103      	bne.n	8003c20 <os_elf_checkHeader+0x7c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	799b      	ldrb	r3, [r3, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d002      	beq.n	8003c26 <os_elf_checkHeader+0x82>
		return OS_ERR_INVALID;
 8003c20:	f06f 0301 	mvn.w	r3, #1
 8003c24:	e00c      	b.n	8003c40 <os_elf_checkHeader+0x9c>
	}

	/* Check version and that its made for ARM
	 ------------------------------------------------------*/
	if(header->e_machine != 40 || header->e_version != 1){
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8a5b      	ldrh	r3, [r3, #18]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b28      	cmp	r3, #40	; 0x28
 8003c2e:	d103      	bne.n	8003c38 <os_elf_checkHeader+0x94>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <os_elf_checkHeader+0x9a>
		return OS_ERR_INVALID;
 8003c38:	f06f 0301 	mvn.w	r3, #1
 8003c3c:	e000      	b.n	8003c40 <os_elf_checkHeader+0x9c>
	}

	/* Return OK
	 ------------------------------------------------------*/
	return OS_ERR_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20014e10 	.word	0x20014e10

08003c4c <os_elf_loadSegments>:
 * @param lfs_file_t* lfs_file		: [ in] File pointer to the elf file
 * @param os_elf_mapping_el_t map[]	: [out] Array containing the old and new addresses of all segments
 *
 * @return os_err_e : <0 if error
 **********************************************************************/
static int os_elf_loadSegments(os_elf_header_t* header, lfs_file_t* lfs_file, os_elf_mapping_el_t map[]){
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b094      	sub	sp, #80	; 0x50
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

	/* First, calculate how much RAM we need
	 ------------------------------------------------------*/
	uint32_t memToAlloc = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* For each segment
	 ------------------------------------------------------*/
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c60:	e030      	b.n	8003cc4 <os_elf_loadSegments+0x78>

		/* read program header data
		 ------------------------------------------------------*/
		os_elf_programHeader_t data;
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c70:	fb03 f301 	mul.w	r3, r3, r1
 8003c74:	4413      	add	r3, r2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2300      	movs	r3, #0
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	485f      	ldr	r0, [pc, #380]	; (8003dfc <os_elf_loadSegments+0x1b0>)
 8003c7e:	f008 fe5d 	bl	800c93c <lfs_file_seek>
 8003c82:	6338      	str	r0, [r7, #48]	; 0x30
		    err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 8003c84:	f107 0210 	add.w	r2, r7, #16
 8003c88:	2320      	movs	r3, #32
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	485b      	ldr	r0, [pc, #364]	; (8003dfc <os_elf_loadSegments+0x1b0>)
 8003c8e:	f008 fdf5 	bl	800c87c <lfs_file_read>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	4313      	orrs	r3, r2
 8003c98:	633b      	str	r3, [r7, #48]	; 0x30
		if(err < 0){
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da02      	bge.n	8003ca6 <os_elf_loadSegments+0x5a>
			return OS_ERR_FS;
 8003ca0:	f06f 0307 	mvn.w	r3, #7
 8003ca4:	e0a5      	b.n	8003df2 <os_elf_loadSegments+0x1a6>
		}

		/* Check that it is a LOAD segment
		 ------------------------------------------------------*/
		if(data.p_type != 1)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <os_elf_loadSegments+0x70>
			continue;

		/* align segment block as 8 byte
		 ------------------------------------------------------*/
		memToAlloc += (data.p_memsz + 7) & (~0x7UL);
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	3307      	adds	r3, #7
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cb6:	4413      	add	r3, r2
 8003cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cba:	e000      	b.n	8003cbe <os_elf_loadSegments+0x72>
			continue;
 8003cbc:	bf00      	nop
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d3c7      	bcc.n	8003c62 <os_elf_loadSegments+0x16>
	}

	/* Allocate all segments to make the free easier
	 ------------------------------------------------------*/
	uint8_t* segment = (uint8_t*) os_heap_alloc(memToAlloc);
 8003cd2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003cd4:	f7fe ff82 	bl	8002bdc <os_heap_alloc>
 8003cd8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if(segment == NULL)
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <os_elf_loadSegments+0x9a>
		return OS_ERR_INSUFFICIENT_HEAP;
 8003ce0:	f06f 0302 	mvn.w	r3, #2
 8003ce4:	e085      	b.n	8003df2 <os_elf_loadSegments+0x1a6>

	/* Initialize segments to 0 and Load into memory
	 ------------------------------------------------------*/
	size_t pos = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
	memset(segment, 0, memToAlloc);
 8003cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cec:	2100      	movs	r1, #0
 8003cee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cf0:	f00c fcfa 	bl	80106e8 <memset>

	/* For each segment
	 ------------------------------------------------------*/
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf8:	e073      	b.n	8003de2 <os_elf_loadSegments+0x196>

		/* Read program header data
		 ------------------------------------------------------*/
		os_elf_programHeader_t data;
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_phoff + i * header->e_phentsize), LFS_SEEK_SET); //Seek to the program header position
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4619      	mov	r1, r3
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	fb03 f301 	mul.w	r3, r3, r1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2300      	movs	r3, #0
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4839      	ldr	r0, [pc, #228]	; (8003dfc <os_elf_loadSegments+0x1b0>)
 8003d16:	f008 fe11 	bl	800c93c <lfs_file_seek>
 8003d1a:	63b8      	str	r0, [r7, #56]	; 0x38
		 	err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 8003d1c:	f107 0210 	add.w	r2, r7, #16
 8003d20:	2320      	movs	r3, #32
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4835      	ldr	r0, [pc, #212]	; (8003dfc <os_elf_loadSegments+0x1b0>)
 8003d26:	f008 fda9 	bl	800c87c <lfs_file_read>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
		if(err < 0){
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da05      	bge.n	8003d44 <os_elf_loadSegments+0xf8>
			os_heap_free(segment);
 8003d38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d3a:	f7fe ffb5 	bl	8002ca8 <os_heap_free>
			return OS_ERR_FS;
 8003d3e:	f06f 0307 	mvn.w	r3, #7
 8003d42:	e056      	b.n	8003df2 <os_elf_loadSegments+0x1a6>
		}

		/* Check it is LOAD segment
		 ------------------------------------------------------*/
		if(data.p_type != 1)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d147      	bne.n	8003dda <os_elf_loadSegments+0x18e>
			continue;

		/* Read the entire segment into the heap
		 ------------------------------------------------------*/
		err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)data.p_offset, LFS_SEEK_SET); //Seek to the actual data
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2300      	movs	r3, #0
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	482a      	ldr	r0, [pc, #168]	; (8003dfc <os_elf_loadSegments+0x1b0>)
 8003d54:	f008 fdf2 	bl	800c93c <lfs_file_seek>
 8003d58:	63b8      	str	r0, [r7, #56]	; 0x38
		err |= lfs_file_read(&lfs, lfs_file, &segment[pos], data.p_filesz);
 8003d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5e:	441a      	add	r2, r3
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4825      	ldr	r0, [pc, #148]	; (8003dfc <os_elf_loadSegments+0x1b0>)
 8003d66:	f008 fd89 	bl	800c87c <lfs_file_read>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
		if(err < 0){
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da05      	bge.n	8003d84 <os_elf_loadSegments+0x138>
			os_heap_free(segment);
 8003d78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d7a:	f7fe ff95 	bl	8002ca8 <os_heap_free>
			return OS_ERR_FS;
 8003d7e:	f06f 0307 	mvn.w	r3, #7
 8003d82:	e036      	b.n	8003df2 <os_elf_loadSegments+0x1a6>
		}

		/* Calculate segment size
		 ------------------------------------------------------*/
		size_t segmentSize = (data.p_memsz + 7) & (~0x7UL);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	3307      	adds	r3, #7
 8003d88:	f023 0307 	bic.w	r3, r3, #7
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Store the remapping into output
		 ------------------------------------------------------*/
		map[i].original_addr = data.p_vaddr;
 8003d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	601a      	str	r2, [r3, #0]
		map[i].remapped_addr = (uint32_t)&segment[pos];
 8003da2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da6:	18d1      	adds	r1, r2, r3
 8003da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4413      	add	r3, r2
 8003db8:	460a      	mov	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
		map[i].size = segmentSize;
 8003dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dce:	609a      	str	r2, [r3, #8]

		/* increment buffer position
		 ------------------------------------------------------*/
		pos += segmentSize;
 8003dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	4413      	add	r3, r2
 8003dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd8:	e000      	b.n	8003ddc <os_elf_loadSegments+0x190>
			continue;
 8003dda:	bf00      	nop
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	3301      	adds	r3, #1
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d384      	bcc.n	8003cfa <os_elf_loadSegments+0xae>
	}

	return OS_ERR_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3750      	adds	r7, #80	; 0x50
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20014e10 	.word	0x20014e10

08003e00 <os_elf_memoryRecalc>:
 * @param os_elf_mapping_el_t map[]	: [ in] Array containing the old and new addresses of all segments
 * @param size_t map_size			: [ in] Size of the map array
 *
 * @return uint32_t : the new address or 0 if a problem occured
 **********************************************************************/
static uint32_t os_elf_memoryRecalc(uint32_t originalAddr, os_elf_mapping_el_t map[], size_t map_size){
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]

	/* For each segment
	 ------------------------------------------------------*/
	for(int i = 0; i < map_size; i++){
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	e038      	b.n	8003e84 <os_elf_memoryRecalc+0x84>

		/* Gets the beginning and end addresses, and the remapped address
		 ------------------------------------------------------*/
		uint32_t sAddr = map[i].original_addr;
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	61bb      	str	r3, [r7, #24]
		uint32_t eAddr = map[i].original_addr + map[i].size;
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4413      	add	r3, r2
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4413      	add	r3, r2
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	440b      	add	r3, r1
 8003e4c:	617b      	str	r3, [r7, #20]
		uint32_t vAddr = map[i].remapped_addr;
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

		/* If our original address lies in this segment, we can calculate its new address
		 ------------------------------------------------------*/
		if( sAddr <= originalAddr && originalAddr < eAddr ){
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d809      	bhi.n	8003e7e <os_elf_memoryRecalc+0x7e>
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d205      	bcs.n	8003e7e <os_elf_memoryRecalc+0x7e>
			return originalAddr - sAddr + vAddr;
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	1ad2      	subs	r2, r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	e007      	b.n	8003e8e <os_elf_memoryRecalc+0x8e>
	for(int i = 0; i < map_size; i++){
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d8c2      	bhi.n	8003e12 <os_elf_memoryRecalc+0x12>
		}
	}

	return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3724      	adds	r7, #36	; 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <os_elf_adjustGot>:
 * @param lfs_file_t* lfs_file		: [ in] File pointer to the elf file
 * @param os_elf_mapping_el_t map[]	: [ in] Array containing the old and new addresses of all segments
 *
 * @return void* : NULL if error, otherwise the entry point of the program
 **********************************************************************/
static void* os_elf_adjustGot(os_elf_header_t* header, lfs_file_t* lfs_file, os_elf_mapping_el_t map[]){
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b0ad      	sub	sp, #180	; 0xb4
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

	/* Load section header that contains the names of the sections
	 ------------------------------------------------------*/
	os_elf_sectionHeader_t names;
	int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + (uint32_t)(header->e_shstrndx * header->e_shentsize) ), LFS_SEEK_SET); //Seek to the index of the section header that contains all names
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	fb02 f201 	mul.w	r2, r2, r1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4866      	ldr	r0, [pc, #408]	; (8004060 <os_elf_adjustGot+0x1c4>)
 8003ec8:	f008 fd38 	bl	800c93c <lfs_file_seek>
 8003ecc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		err |= lfs_file_read(&lfs, lfs_file, &names, sizeof(names));
 8003ed0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003ed4:	2328      	movs	r3, #40	; 0x28
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4861      	ldr	r0, [pc, #388]	; (8004060 <os_elf_adjustGot+0x1c4>)
 8003eda:	f008 fccf 	bl	800c87c <lfs_file_read>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if(err < 0){
 8003eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da01      	bge.n	8003ef6 <os_elf_adjustGot+0x5a>
		return NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e0af      	b.n	8004056 <os_elf_adjustGot+0x1ba>
	}

	/* For each section
	 ------------------------------------------------------*/
	for(uint32_t i = 0; i < header->e_shnum; i++){
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003efc:	e094      	b.n	8004028 <os_elf_adjustGot+0x18c>

		/* read section header information
		 ------------------------------------------------------*/
		os_elf_sectionHeader_t data;
		int err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(header->e_shoff + i * header->e_shentsize), LFS_SEEK_SET); //Seek to the section header
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f0e:	fb03 f301 	mul.w	r3, r3, r1
 8003f12:	4413      	add	r3, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	2300      	movs	r3, #0
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	4851      	ldr	r0, [pc, #324]	; (8004060 <os_elf_adjustGot+0x1c4>)
 8003f1c:	f008 fd0e 	bl	800c93c <lfs_file_seek>
 8003f20:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			err |= lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 8003f24:	f107 0210 	add.w	r2, r7, #16
 8003f28:	2328      	movs	r3, #40	; 0x28
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	484c      	ldr	r0, [pc, #304]	; (8004060 <os_elf_adjustGot+0x1c4>)
 8003f2e:	f008 fca5 	bl	800c87c <lfs_file_read>
 8003f32:	4602      	mov	r2, r0
 8003f34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(err < 0){
 8003f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da01      	bge.n	8003f4a <os_elf_adjustGot+0xae>
			return NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e085      	b.n	8004056 <os_elf_adjustGot+0x1ba>
		}

		/* Get the name of the current section
		 ------------------------------------------------------*/
		char sect_name[50];
		err  = lfs_file_seek(&lfs, lfs_file, (lfs_soff_t)(data.sh_name + names.sh_offset), LFS_SEEK_SET); //Seek to the string position in the file
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f4e:	4413      	add	r3, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	2300      	movs	r3, #0
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4842      	ldr	r0, [pc, #264]	; (8004060 <os_elf_adjustGot+0x1c4>)
 8003f58:	f008 fcf0 	bl	800c93c <lfs_file_seek>
 8003f5c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		err |= lfs_file_read(&lfs, lfs_file, sect_name, sizeof(sect_name));
 8003f60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f64:	2332      	movs	r3, #50	; 0x32
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	483d      	ldr	r0, [pc, #244]	; (8004060 <os_elf_adjustGot+0x1c4>)
 8003f6a:	f008 fc87 	bl	800c87c <lfs_file_read>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(err < 0){
 8003f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da01      	bge.n	8003f86 <os_elf_adjustGot+0xea>
			return NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e067      	b.n	8004056 <os_elf_adjustGot+0x1ba>
		}

		/* We are only intrested in the GOT section
		 ------------------------------------------------------*/
		if(strcmp(".got", sect_name) != 0)
 8003f86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4835      	ldr	r0, [pc, #212]	; (8004064 <os_elf_adjustGot+0x1c8>)
 8003f8e:	f7fc f91f 	bl	80001d0 <strcmp>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <os_elf_adjustGot+0x108>
	for(uint32_t i = 0; i < header->e_shnum; i++){
 8003f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fa2:	e041      	b.n	8004028 <os_elf_adjustGot+0x18c>
			continue;

		/* With Got section found, now we need to find where it lies in our heap
		 ------------------------------------------------------*/
		uint32_t ramGotAddr = os_elf_memoryRecalc(data.sh_addr, map, header->e_phnum);
 8003fa4:	69f8      	ldr	r0, [r7, #28]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	f7ff ff26 	bl	8003e00 <os_elf_memoryRecalc>
 8003fb4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if(ramGotAddr == 0){
 8003fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <os_elf_adjustGot+0x128>
			return NULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e048      	b.n	8004056 <os_elf_adjustGot+0x1ba>
		}

		/* Correct each GOT entry
		 ------------------------------------------------------*/
		uint32_t* pGot = (uint32_t*)ramGotAddr; //Convert to pointer
 8003fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		for(int j = 0; j < data.sh_size; j+=4){ //Move in increments of 4 bytes
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fd2:	e023      	b.n	800401c <os_elf_adjustGot+0x180>
			pGot[j/4] = os_elf_memoryRecalc(pGot[j/4], map, header->e_phnum); //Recalculate address
 8003fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da00      	bge.n	8003fde <os_elf_adjustGot+0x142>
 8003fdc:	3303      	adds	r3, #3
 8003fde:	109b      	asrs	r3, r3, #2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003fe6:	4413      	add	r3, r2
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da00      	bge.n	8003ffc <os_elf_adjustGot+0x160>
 8003ffa:	3303      	adds	r3, #3
 8003ffc:	109b      	asrs	r3, r3, #2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004004:	18d4      	adds	r4, r2, r3
 8004006:	460a      	mov	r2, r1
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	f7ff fef9 	bl	8003e00 <os_elf_memoryRecalc>
 800400e:	4603      	mov	r3, r0
 8004010:	6023      	str	r3, [r4, #0]
		for(int j = 0; j < data.sh_size; j+=4){ //Move in increments of 4 bytes
 8004012:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004016:	3304      	adds	r3, #4
 8004018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004022:	429a      	cmp	r2, r3
 8004024:	d8d6      	bhi.n	8003fd4 <os_elf_adjustGot+0x138>
		}

		break;
 8004026:	e008      	b.n	800403a <os_elf_adjustGot+0x19e>
	for(uint32_t i = 0; i < header->e_shnum; i++){
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004034:	4293      	cmp	r3, r2
 8004036:	f4ff af62 	bcc.w	8003efe <os_elf_adjustGot+0x62>
	}

	/* Finally, calculate the entry point
	 ------------------------------------------------------*/
	void* entryPoint = (void*)os_elf_memoryRecalc(header->e_entry, map, header->e_phnum);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6998      	ldr	r0, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	f7ff feda 	bl	8003e00 <os_elf_memoryRecalc>
 800404c:	4603      	mov	r3, r0
 800404e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	return entryPoint;
 8004052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8004056:	4618      	mov	r0, r3
 8004058:	37b4      	adds	r7, #180	; 0xb4
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	bf00      	nop
 8004060:	20014e10 	.word	0x20014e10
 8004064:	08012508 	.word	0x08012508

08004068 <os_elf_loadFile>:
 *
 * @param char* name : [ in] File name
 *
 * @return void* : NULL if error, otherwise the entry point of the program
 **********************************************************************/
void* os_elf_loadFile(char* file){
 8004068:	e92d 48b0 	stmdb	sp!, {r4, r5, r7, fp, lr}
 800406c:	b0a9      	sub	sp, #164	; 0xa4
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]

	/* Open file
	 --------------------------------------------------*/
	lfs_file_t lfs_file;
	int err = lfs_file_open(&lfs, &lfs_file, file, LFS_O_RDONLY);
 8004072:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004076:	2301      	movs	r3, #1
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4857      	ldr	r0, [pc, #348]	; (80041d8 <os_elf_loadFile+0x170>)
 800407c:	f008 fb9e 	bl	800c7bc <lfs_file_open>
 8004080:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	if(err < 0){
 8004084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004088:	2b00      	cmp	r3, #0
 800408a:	da07      	bge.n	800409c <os_elf_loadFile+0x34>
		PRINTLN("Open Error");
 800408c:	f240 523e 	movw	r2, #1342	; 0x53e
 8004090:	4952      	ldr	r1, [pc, #328]	; (80041dc <os_elf_loadFile+0x174>)
 8004092:	4853      	ldr	r0, [pc, #332]	; (80041e0 <os_elf_loadFile+0x178>)
 8004094:	f00c fdf8 	bl	8010c88 <iprintf>
		return NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	e098      	b.n	80041ce <os_elf_loadFile+0x166>
	}

	/* Check header information
	 --------------------------------------------------*/
	os_elf_header_t header;
	void* entryPoint = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if(os_elf_checkHeader(&header, &lfs_file) >= 0) {
 80040a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fd79 	bl	8003ba4 <os_elf_checkHeader>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db74      	blt.n	80041a2 <os_elf_loadFile+0x13a>
 80040b8:	466b      	mov	r3, sp
 80040ba:	461d      	mov	r5, r3

		/* Load all segments into memory
		 --------------------------------------------------*/
		os_elf_mapping_el_t map[header.e_phnum];
 80040bc:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 80040be:	4603      	mov	r3, r0
 80040c0:	3b01      	subs	r3, #1
 80040c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040c6:	b281      	uxth	r1, r0
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	468b      	mov	fp, r1
 80040ce:	4694      	mov	ip, r2
 80040d0:	eb1b 030b 	adds.w	r3, fp, fp
 80040d4:	eb4c 040c 	adc.w	r4, ip, ip
 80040d8:	469b      	mov	fp, r3
 80040da:	46a4      	mov	ip, r4
 80040dc:	eb1b 0b01 	adds.w	fp, fp, r1
 80040e0:	eb4c 0c02 	adc.w	ip, ip, r2
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80040f0:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80040f4:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80040f8:	468b      	mov	fp, r1
 80040fa:	4694      	mov	ip, r2
 80040fc:	4602      	mov	r2, r0
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	b281      	uxth	r1, r0
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	468b      	mov	fp, r1
 800410e:	4694      	mov	ip, r2
 8004110:	eb1b 030b 	adds.w	r3, fp, fp
 8004114:	eb4c 040c 	adc.w	r4, ip, ip
 8004118:	469b      	mov	fp, r3
 800411a:	46a4      	mov	ip, r4
 800411c:	eb1b 0b01 	adds.w	fp, fp, r1
 8004120:	eb4c 0c02 	adc.w	ip, ip, r2
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8004130:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8004134:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8004138:	468b      	mov	fp, r1
 800413a:	4694      	mov	ip, r2
 800413c:	4602      	mov	r2, r0
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	3303      	adds	r3, #3
 8004148:	3307      	adds	r3, #7
 800414a:	08db      	lsrs	r3, r3, #3
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	ebad 0d03 	sub.w	sp, sp, r3
 8004152:	466b      	mov	r3, sp
 8004154:	3303      	adds	r3, #3
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if(os_elf_loadSegments(&header, &lfs_file, map) >= 0){
 800415e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004162:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fd6e 	bl	8003c4c <os_elf_loadSegments>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	db14      	blt.n	80041a0 <os_elf_loadFile+0x138>

			/* Finally, ajdust the GOT
			 --------------------------------------------------*/
			entryPoint = os_elf_adjustGot(&header, &lfs_file, map);
 8004176:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800417a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fe8a 	bl	8003e9c <os_elf_adjustGot>
 8004188:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

			/* If error, free the first position of the remap. This will free the block allocated in loadSegments
			 --------------------------------------------------*/
			if(entryPoint == NULL){
 800418c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <os_elf_loadFile+0x138>
				os_heap_free((void*)map[0].remapped_addr);
 8004194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fd84 	bl	8002ca8 <os_heap_free>
 80041a0:	46ad      	mov	sp, r5

	}

	/* Close file
	 --------------------------------------------------*/
	err = lfs_file_close(&lfs, &lfs_file);
 80041a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041a6:	4619      	mov	r1, r3
 80041a8:	480b      	ldr	r0, [pc, #44]	; (80041d8 <os_elf_loadFile+0x170>)
 80041aa:	f008 fb3b 	bl	800c824 <lfs_file_close>
 80041ae:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	if(err < 0){
 80041b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da07      	bge.n	80041ca <os_elf_loadFile+0x162>
		PRINTLN("close Error");
 80041ba:	f240 525e 	movw	r2, #1374	; 0x55e
 80041be:	4907      	ldr	r1, [pc, #28]	; (80041dc <os_elf_loadFile+0x174>)
 80041c0:	4808      	ldr	r0, [pc, #32]	; (80041e4 <os_elf_loadFile+0x17c>)
 80041c2:	f00c fd61 	bl	8010c88 <iprintf>
		return NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e001      	b.n	80041ce <os_elf_loadFile+0x166>
	}

	return entryPoint;
 80041ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	37a4      	adds	r7, #164	; 0xa4
 80041d2:	46bd      	mov	sp, r7
 80041d4:	e8bd 88b0 	ldmia.w	sp!, {r4, r5, r7, fp, pc}
 80041d8:	20014e10 	.word	0x20014e10
 80041dc:	08012510 	.word	0x08012510
 80041e0:	08012520 	.word	0x08012520
 80041e4:	08012538 	.word	0x08012538

080041e8 <os_mutex_release>:
 *
 * @param os_handle_t h   	: [ in] Pointer to the mutex to release
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_mutex_release(os_handle_t h){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*) h;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	617b      	str	r3, [r7, #20]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <os_mutex_release+0x18>
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e041      	b.n	8004284 <os_mutex_release+0x9c>
	if(h->type != OS_OBJ_MUTEX) return OS_ERR_BAD_ARG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d002      	beq.n	800420e <os_mutex_release+0x26>
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	e03a      	b.n	8004284 <os_mutex_release+0x9c>
	if(mutex->state == OS_MUTEX_STATE_UNLOCKED) return OS_ERR_FORBIDDEN;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	7f1b      	ldrb	r3, [r3, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <os_mutex_release+0x34>
 8004216:	f06f 0304 	mvn.w	r3, #4
 800421a:	e033      	b.n	8004284 <os_mutex_release+0x9c>
	if(mutex->owner != os_cur_task->element) return OS_ERR_FORBIDDEN;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <os_mutex_release+0xa4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	d002      	beq.n	8004230 <os_mutex_release+0x48>
 800422a:	f06f 0304 	mvn.w	r3, #4
 800422e:	e029      	b.n	8004284 <os_mutex_release+0x9c>

	/* Enter critical section
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8004230:	f3ef 8310 	mrs	r3, PRIMASK
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	b672      	cpsid	i
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff f851 	bl	80032ec <os_list_remove>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fee4 	bl	800301c <os_obj_updatePrio>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2200      	movs	r2, #0
 8004258:	771a      	strb	r2, [r3, #28]
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff fa72 	bl	8003744 <os_handle_list_updateAndCheck>
 8004260:	4603      	mov	r3, r0
 8004262:	74fb      	strb	r3, [r7, #19]
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <os_mutex_release+0x90>
 800426a:	f000 fcdb 	bl	8004c24 <os_scheduler_state_get>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <os_mutex_release+0x90>
 8004274:	f001 f9dc 	bl	8005630 <os_task_yeild>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f383 8810 	msr	PRIMASK, r3
 800427e:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(must_yield && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();

	);

	return OS_ERR_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200145a4 	.word	0x200145a4

08004290 <os_obj_wait>:
 * @param uint32_t timeout_ticks : [ in] Amount of time before a timeout is detected. If OS_WAIT_FOREVER, the task blocks forever. If OS_WAIT_NONE, the task returns immediately
 * @parem os_err_e* err			 : [out] Error code. Ignored if NULL.
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
static os_handle_t os_obj_wait(os_handle_t objList[], size_t objNum, os_obj_wait_e waitFlag, uint32_t timeout_ticks, os_err_e* err){
 8004290:	b580      	push	{r7, lr}
 8004292:	b09c      	sub	sp, #112	; 0x70
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]

	/* Check for errors
	 ---------------------------------------------------*/
	bool error  = objList == NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		 error |= objNum == 0;
 80042ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2201      	moveq	r2, #1
 80042ba:	2200      	movne	r2, #0
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4313      	orrs	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		 error |= objNum == 0xFFFFFFFF;
 80042cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80042d6:	bf0c      	ite	eq
 80042d8:	2201      	moveq	r2, #1
 80042da:	2200      	movne	r2, #0
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	4313      	orrs	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	for(size_t i = 0; i < objNum; i++){
 80042ec:	2300      	movs	r3, #0
 80042ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80042f0:	e030      	b.n	8004354 <os_obj_wait+0xc4>
		error |= objList[i] == NULL;
 80042f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042f8:	0092      	lsls	r2, r2, #2
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	440a      	add	r2, r1
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	2a00      	cmp	r2, #0
 8004302:	bf0c      	ite	eq
 8004304:	2201      	moveq	r2, #1
 8004306:	2200      	movne	r2, #0
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	4313      	orrs	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if(objList[i] != NULL){
 8004318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d013      	beq.n	800434e <os_obj_wait+0xbe>
			error |= objList[i]->type == OS_OBJ_MSGQ;
 8004326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800432a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800432c:	0092      	lsls	r2, r2, #2
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	440a      	add	r2, r1
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	2a05      	cmp	r2, #5
 8004338:	bf0c      	ite	eq
 800433a:	2201      	moveq	r2, #1
 800433c:	2200      	movne	r2, #0
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	4313      	orrs	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	for(size_t i = 0; i < objNum; i++){
 800434e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004350:	3301      	adds	r3, #1
 8004352:	66bb      	str	r3, [r7, #104]	; 0x68
 8004354:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3ca      	bcc.n	80042f2 <os_obj_wait+0x62>
		}
	}

	/* Return if error
	 ---------------------------------------------------*/
	if(error) {
 800435c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <os_obj_wait+0xe6>
		if(err != NULL) *err = OS_ERR_BAD_ARG;
 8004364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <os_obj_wait+0xe2>
 800436a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800436c:	f04f 32ff 	mov.w	r2, #4294967295
 8004370:	601a      	str	r2, [r3, #0]
		return NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	e328      	b.n	80049c8 <os_obj_wait+0x738>
	}

	/* Enter critical to access possible shared resource
	 ---------------------------------------------------*/
	bool blocked = false;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800437c:	f3ef 8310 	mrs	r3, PRIMASK
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	b672      	cpsid	i
 8004384:	f3bf 8f6f 	isb	sy

	/* Get xPSR register
	 ---------------------------------------------------*/
	register uint32_t volatile xPSR = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
	__asm volatile("mrs %[out], xpsr" : [out] "=r" (xPSR));
 800438c:	f3ef 8303 	mrs	r3, PSR
 8004390:	617b      	str	r3, [r7, #20]
	 ---------------------------------------------------*/
	while(1){

		/* Declare auxiliary variables and iterate objects
		 ---------------------------------------------------*/
		size_t takingPos = 0xFFFFFFFF;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	663b      	str	r3, [r7, #96]	; 0x60
		bool allObjFree = 1;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		for(size_t i = 0; i < objNum; i++){
 800439e:	2300      	movs	r3, #0
 80043a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a2:	e034      	b.n	800440e <os_obj_wait+0x17e>

			/* Get free count
			 ---------------------------------------------------*/
			uint32_t freeCount = ( (objList[i]->getFreeCount != NULL) ? objList[i]->getFreeCount(objList[i]) : 1 );
 80043a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00e      	beq.n	80043d2 <os_obj_wait+0x142>
 80043b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	440a      	add	r2, r1
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	4610      	mov	r0, r2
 80043cc:	4798      	blx	r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	e000      	b.n	80043d4 <os_obj_wait+0x144>
 80043d2:	2301      	movs	r3, #1
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Update flag to use if we should wait all
			 ---------------------------------------------------*/
			allObjFree &= freeCount > 0;
 80043d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043dc:	2a00      	cmp	r2, #0
 80043de:	bf14      	ite	ne
 80043e0:	2201      	movne	r2, #1
 80043e2:	2200      	moveq	r2, #0
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			/* If we should check everyone, or the current object is not free, we continue
			 ---------------------------------------------------*/
			if(waitFlag != OS_OBJ_WAIT_ONE || freeCount == 0) continue;
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <os_obj_wait+0x170>
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <os_obj_wait+0x178>
		for(size_t i = 0; i < objNum; i++){
 8004400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004402:	3301      	adds	r3, #1
 8004404:	65bb      	str	r3, [r7, #88]	; 0x58
 8004406:	e002      	b.n	800440e <os_obj_wait+0x17e>

			/* Otherwise save the position and break
			 ---------------------------------------------------*/
			takingPos = i;
 8004408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
			break;
 800440c:	e003      	b.n	8004416 <os_obj_wait+0x186>
		for(size_t i = 0; i < objNum; i++){
 800440e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d3c6      	bcc.n	80043a4 <os_obj_wait+0x114>
		}

		/* All objects must be taken and everyone is free
		 ---------------------------------------------------*/
		if(waitFlag == OS_OBJ_WAIT_ALL && allObjFree == 1){
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 80bb 	bne.w	8004594 <os_obj_wait+0x304>
 800441e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80b6 	beq.w	8004594 <os_obj_wait+0x304>

			/* Iterate to take every object
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 8004428:	2300      	movs	r3, #0
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
 800442c:	e07d      	b.n	800452a <os_obj_wait+0x29a>

				/* Check if we are in thread mode (cannot take a mutex in interupt mode)
				 ---------------------------------------------------*/
				if( (xPSR & 0x1F) != 0 && objList[i]->type == OS_OBJ_MUTEX) {
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2b00      	cmp	r3, #0
 8004436:	d015      	beq.n	8004464 <os_obj_wait+0x1d4>
 8004438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d10d      	bne.n	8004464 <os_obj_wait+0x1d4>
					if(err != NULL) *err = OS_ERR_FORBIDDEN;
 8004448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <os_obj_wait+0x1c6>
 800444e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004450:	f06f 0204 	mvn.w	r2, #4
 8004454:	601a      	str	r2, [r3, #0]
					OS_EXIT_CRITICAL();
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f383 8810 	msr	PRIMASK, r3
 800445c:	f3bf 8f6f 	isb	sy
					return NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	e2b1      	b.n	80049c8 <os_obj_wait+0x738>
				}

				/* Take object
				 ---------------------------------------------------*/
				os_err_e retErr = (objList[i]->obj_take != NULL) ? objList[i]->obj_take(objList[i], os_cur_task->element) : OS_ERR_UNKNOWN;
 8004464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d011      	beq.n	8004498 <os_obj_wait+0x208>
 8004474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004482:	0092      	lsls	r2, r2, #2
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	440a      	add	r2, r1
 8004488:	6810      	ldr	r0, [r2, #0]
 800448a:	4aa5      	ldr	r2, [pc, #660]	; (8004720 <os_obj_wait+0x490>)
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	4611      	mov	r1, r2
 8004492:	4798      	blx	r3
 8004494:	4603      	mov	r3, r0
 8004496:	e001      	b.n	800449c <os_obj_wait+0x20c>
 8004498:	f06f 0306 	mvn.w	r3, #6
 800449c:	627b      	str	r3, [r7, #36]	; 0x24

				/* Handles errors
				 ---------------------------------------------------*/
				if(retErr != OS_ERR_OK){
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d026      	beq.n	80044f2 <os_obj_wait+0x262>

					/* Releases any mutex taken
					 ---------------------------------------------------*/
					for(int j = 0; j < i; j++){
 80044a4:	2300      	movs	r3, #0
 80044a6:	653b      	str	r3, [r7, #80]	; 0x50
 80044a8:	e012      	b.n	80044d0 <os_obj_wait+0x240>
						if(objList[j]->type == OS_OBJ_MUTEX){
 80044aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <os_obj_wait+0x23a>
							os_mutex_release(objList[j]);
 80044ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fe8f 	bl	80041e8 <os_mutex_release>
					for(int j = 0; j < i; j++){
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	3301      	adds	r3, #1
 80044ce:	653b      	str	r3, [r7, #80]	; 0x50
 80044d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d8e8      	bhi.n	80044aa <os_obj_wait+0x21a>
						}
					}

					OS_EXIT_CRITICAL();
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f383 8810 	msr	PRIMASK, r3
 80044de:	f3bf 8f6f 	isb	sy
					if(err != NULL) *err = retErr;
 80044e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <os_obj_wait+0x25e>
 80044e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	601a      	str	r2, [r3, #0]
					return NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e26a      	b.n	80049c8 <os_obj_wait+0x738>
				}
				/* Remove task from block list if needed
				 ---------------------------------------------------*/
				if(blocked) {
 80044f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d014      	beq.n	8004524 <os_obj_wait+0x294>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 80044fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	4b86      	ldr	r3, [pc, #536]	; (8004720 <os_obj_wait+0x490>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe feec 	bl	80032ec <os_list_remove>
					os_obj_updatePrio(objList[i]);
 8004514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fd7c 	bl	800301c <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	3301      	adds	r3, #1
 8004528:	657b      	str	r3, [r7, #84]	; 0x54
 800452a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	f4ff af7d 	bcc.w	800442e <os_obj_wait+0x19e>

			}

			/* Update prio from current task
			 ---------------------------------------------------*/
			os_obj_updatePrio(os_cur_task->element);
 8004534:	4b7a      	ldr	r3, [pc, #488]	; (8004720 <os_obj_wait+0x490>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fd6e 	bl	800301c <os_obj_updatePrio>

			/* Update blocklist for every object
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 8004540:	2300      	movs	r3, #0
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004544:	e00a      	b.n	800455c <os_obj_wait+0x2cc>
				os_handle_list_updateAndCheck(objList[i]);
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff f8f7 	bl	8003744 <os_handle_list_updateAndCheck>
			for(size_t i = 0; i < objNum; i++){
 8004556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004558:	3301      	adds	r3, #1
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3f0      	bcc.n	8004546 <os_obj_wait+0x2b6>
			}

			/* Exit critical
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f383 8810 	msr	PRIMASK, r3
 800456a:	f3bf 8f6f 	isb	sy

			/* call cb if needed
			 ---------------------------------------------------*/
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 800456e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <os_obj_wait+0x2f2>
 8004576:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <os_obj_wait+0x490>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe f93b 	bl	80027f8 <os_task_on_ready_cb>

			if(err != NULL) *err = OS_ERR_OK;
 8004582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <os_obj_wait+0x2fe>
 8004588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
			return objList[0];
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	e219      	b.n	80049c8 <os_obj_wait+0x738>

		}

		/* One object must be taken and at least one is free
		 ---------------------------------------------------*/
		if(waitFlag == OS_OBJ_WAIT_ONE && takingPos != 0xFFFFFFFF){
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 8099 	bne.w	80046ce <os_obj_wait+0x43e>
 800459c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	f000 8094 	beq.w	80046ce <os_obj_wait+0x43e>

			/* Check if we are in thread mode (cannot take a mutex in interupt mode)
			 ---------------------------------------------------*/
			if( (xPSR & 0x1F) != 0 && objList[takingPos]->type == OS_OBJ_MUTEX) {
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <os_obj_wait+0x34c>
 80045b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d10d      	bne.n	80045dc <os_obj_wait+0x34c>
				if(err != NULL) *err = OS_ERR_FORBIDDEN;
 80045c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <os_obj_wait+0x33e>
 80045c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c8:	f06f 0204 	mvn.w	r2, #4
 80045cc:	601a      	str	r2, [r3, #0]
				OS_EXIT_CRITICAL();
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f383 8810 	msr	PRIMASK, r3
 80045d4:	f3bf 8f6f 	isb	sy
				return NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	e1f5      	b.n	80049c8 <os_obj_wait+0x738>
			}

			/* Take object
			 ---------------------------------------------------*/
			os_err_e retErr = (objList[takingPos]->obj_take != NULL) ? objList[takingPos]->obj_take(objList[takingPos], os_cur_task->element) : OS_ERR_UNKNOWN;
 80045dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <os_obj_wait+0x380>
 80045ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045fa:	0092      	lsls	r2, r2, #2
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	440a      	add	r2, r1
 8004600:	6810      	ldr	r0, [r2, #0]
 8004602:	4a47      	ldr	r2, [pc, #284]	; (8004720 <os_obj_wait+0x490>)
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	4611      	mov	r1, r2
 800460a:	4798      	blx	r3
 800460c:	4603      	mov	r3, r0
 800460e:	e001      	b.n	8004614 <os_obj_wait+0x384>
 8004610:	f06f 0306 	mvn.w	r3, #6
 8004614:	623b      	str	r3, [r7, #32]
			if(retErr != OS_ERR_OK){
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00c      	beq.n	8004636 <os_obj_wait+0x3a6>
				OS_EXIT_CRITICAL();
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f383 8810 	msr	PRIMASK, r3
 8004622:	f3bf 8f6f 	isb	sy
				if(err != NULL) *err = retErr;
 8004626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <os_obj_wait+0x3a2>
 800462c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800462e:	6a3a      	ldr	r2, [r7, #32]
 8004630:	601a      	str	r2, [r3, #0]
				return NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	e1c8      	b.n	80049c8 <os_obj_wait+0x738>
			}

			/* Update prio from current task
			 ---------------------------------------------------*/
			os_obj_updatePrio(os_cur_task->element);
 8004636:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <os_obj_wait+0x490>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fced 	bl	800301c <os_obj_updatePrio>

			/* If task blocked, remove from everyone's list
			 ---------------------------------------------------*/
			if(blocked) {
 8004642:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01e      	beq.n	8004688 <os_obj_wait+0x3f8>
				for(size_t i = 0; i < objNum; i++){
 800464a:	2300      	movs	r3, #0
 800464c:	64bb      	str	r3, [r7, #72]	; 0x48
 800464e:	e017      	b.n	8004680 <os_obj_wait+0x3f0>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8004650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	4b30      	ldr	r3, [pc, #192]	; (8004720 <os_obj_wait+0x490>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fe fe41 	bl	80032ec <os_list_remove>
					os_obj_updatePrio(objList[i]);
 800466a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fcd1 	bl	800301c <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 800467a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467c:	3301      	adds	r3, #1
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3e3      	bcc.n	8004650 <os_obj_wait+0x3c0>
				}
			}

			/* Update blocklist
			 ---------------------------------------------------*/
			os_handle_list_updateAndCheck(objList[takingPos]);
 8004688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f856 	bl	8003744 <os_handle_list_updateAndCheck>

			/* Exit critical
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f383 8810 	msr	PRIMASK, r3
 800469e:	f3bf 8f6f 	isb	sy

			/* call cb if needed
			 ---------------------------------------------------*/
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 80046a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <os_obj_wait+0x426>
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <os_obj_wait+0x490>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe f8a1 	bl	80027f8 <os_task_on_ready_cb>

			/* Return address of the object
			 ---------------------------------------------------*/
			if(err != NULL) *err = OS_ERR_OK;
 80046b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <os_obj_wait+0x432>
 80046bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
			return objList[takingPos];
 80046c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	e17c      	b.n	80049c8 <os_obj_wait+0x738>
		}

		/* If the timout set is 0, then just return
		 ---------------------------------------------------*/
		if(timeout_ticks <= OS_WAIT_NONE){
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d144      	bne.n	800475e <os_obj_wait+0x4ce>

			/* If task blocked, remove from everyone's list
			 ---------------------------------------------------*/
			if(blocked) {
 80046d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d032      	beq.n	8004742 <os_obj_wait+0x4b2>
				for(size_t i = 0; i < objNum; i++){
 80046dc:	2300      	movs	r3, #0
 80046de:	647b      	str	r3, [r7, #68]	; 0x44
 80046e0:	e017      	b.n	8004712 <os_obj_wait+0x482>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 80046e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <os_obj_wait+0x490>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7fe fdf8 	bl	80032ec <os_list_remove>
					os_obj_updatePrio(objList[i]);
 80046fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fc88 	bl	800301c <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	3301      	adds	r3, #1
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
 8004712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3e3      	bcc.n	80046e2 <os_obj_wait+0x452>
				}

				/* Update blocklist for every object
				 ---------------------------------------------------*/
				for(size_t i = 0; i < objNum; i++){
 800471a:	2300      	movs	r3, #0
 800471c:	643b      	str	r3, [r7, #64]	; 0x40
 800471e:	e00c      	b.n	800473a <os_obj_wait+0x4aa>
 8004720:	200145a4 	.word	0x200145a4
					os_handle_list_updateAndCheck(objList[i]);
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff f808 	bl	8003744 <os_handle_list_updateAndCheck>
				for(size_t i = 0; i < objNum; i++){
 8004734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004736:	3301      	adds	r3, #1
 8004738:	643b      	str	r3, [r7, #64]	; 0x40
 800473a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	d3f0      	bcc.n	8004724 <os_obj_wait+0x494>
				}
			}

			/* Return
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f383 8810 	msr	PRIMASK, r3
 8004748:	f3bf 8f6f 	isb	sy
			if(err != NULL) *err = OS_ERR_TIMEOUT;
 800474c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <os_obj_wait+0x4ca>
 8004752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004754:	f06f 0205 	mvn.w	r2, #5
 8004758:	601a      	str	r2, [r3, #0]
			return NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	e134      	b.n	80049c8 <os_obj_wait+0x738>
		}

		/* Task cannot block of scheduler is not running
		 ---------------------------------------------------*/
		if(os_scheduler_state_get() != OS_SCHEDULER_START) {
 800475e:	f000 fa61 	bl	8004c24 <os_scheduler_state_get>
 8004762:	4603      	mov	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d042      	beq.n	80047ee <os_obj_wait+0x55e>

			/* If task blocked, remove from everyone's list
			 ---------------------------------------------------*/
			if(blocked) {
 8004768:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800476c:	2b00      	cmp	r3, #0
 800476e:	d030      	beq.n	80047d2 <os_obj_wait+0x542>
				for(size_t i = 0; i < objNum; i++){
 8004770:	2300      	movs	r3, #0
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004774:	e017      	b.n	80047a6 <os_obj_wait+0x516>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8004776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	4b93      	ldr	r3, [pc, #588]	; (80049d0 <os_obj_wait+0x740>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe fdae 	bl	80032ec <os_list_remove>
					os_obj_updatePrio(objList[i]);
 8004790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fc3e 	bl	800301c <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 80047a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a2:	3301      	adds	r3, #1
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3e3      	bcc.n	8004776 <os_obj_wait+0x4e6>
				}

				/* Update blocklist for every object
				 ---------------------------------------------------*/
				for(size_t i = 0; i < objNum; i++){
 80047ae:	2300      	movs	r3, #0
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047b2:	e00a      	b.n	80047ca <os_obj_wait+0x53a>
					os_handle_list_updateAndCheck(objList[i]);
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe ffc0 	bl	8003744 <os_handle_list_updateAndCheck>
				for(size_t i = 0; i < objNum; i++){
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	3301      	adds	r3, #1
 80047c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d3f0      	bcc.n	80047b4 <os_obj_wait+0x524>
				}
			}

			if(err != NULL) *err = OS_ERR_NOT_READY;
 80047d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <os_obj_wait+0x550>
 80047d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047da:	f06f 0203 	mvn.w	r2, #3
 80047de:	601a      	str	r2, [r3, #0]
			OS_EXIT_CRITICAL();
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f383 8810 	msr	PRIMASK, r3
 80047e6:	f3bf 8f6f 	isb	sy
			return NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e0ec      	b.n	80049c8 <os_obj_wait+0x738>
		}

		/* Check if we are in thread mode (cannot block in interupt mode)
		 ---------------------------------------------------*/
		if( (xPSR & 0x1F) != 0) {
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <os_obj_wait+0x584>
			if(err != NULL) *err = OS_ERR_FORBIDDEN;
 80047f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <os_obj_wait+0x576>
 80047fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	601a      	str	r2, [r3, #0]
			OS_EXIT_CRITICAL();
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f383 8810 	msr	PRIMASK, r3
 800480c:	f3bf 8f6f 	isb	sy
			return NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	e0d9      	b.n	80049c8 <os_obj_wait+0x738>
		}

		/* Save information on task structure
		 ---------------------------------------------------*/
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 8004814:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <os_obj_wait+0x740>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2203      	movs	r2, #3
 800481c:	761a      	strb	r2, [r3, #24]
		((os_task_t*)os_cur_task->element)->wakeCoutdown 	= timeout_ticks;
 800481e:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <os_obj_wait+0x740>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	61da      	str	r2, [r3, #28]
		((os_task_t*)os_cur_task->element)->objWaited 		= objList;
 8004828:	4b69      	ldr	r3, [pc, #420]	; (80049d0 <os_obj_wait+0x740>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	635a      	str	r2, [r3, #52]	; 0x34
		((os_task_t*)os_cur_task->element)->sizeObjs		= objNum;
 8004832:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <os_obj_wait+0x740>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
		((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 800483c:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <os_obj_wait+0x740>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	63da      	str	r2, [r3, #60]	; 0x3c
		((os_task_t*)os_cur_task->element)->waitFlag		= waitFlag;
 8004848:	4b61      	ldr	r3, [pc, #388]	; (80049d0 <os_obj_wait+0x740>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	79fa      	ldrb	r2, [r7, #7]
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* If not yet blocked
		 ---------------------------------------------------*/
		if(!blocked){
 8004854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004858:	f083 0301 	eor.w	r3, r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8085 	beq.w	800496e <os_obj_wait+0x6de>

			/* Add task to object's block list if not already
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 8004864:	2300      	movs	r3, #0
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
 8004868:	e05a      	b.n	8004920 <os_obj_wait+0x690>
				os_err_e retErr = os_list_add(objList[i]->blockList, (os_handle_t)os_cur_task->element, OS_LIST_FIRST);
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6958      	ldr	r0, [r3, #20]
 8004876:	4b56      	ldr	r3, [pc, #344]	; (80049d0 <os_obj_wait+0x740>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2200      	movs	r2, #0
 800487e:	4619      	mov	r1, r3
 8004880:	f7fe fcc5 	bl	800320e <os_list_add>
 8004884:	61f8      	str	r0, [r7, #28]

				/* Handle heap error
				 ---------------------------------------------------*/
				if(retErr != OS_ERR_OK){
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03e      	beq.n	800490a <os_obj_wait+0x67a>

					/* Remove everything so far
					 ---------------------------------------------------*/
					for(size_t j = 0; j < i; j++){
 800488c:	2300      	movs	r3, #0
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
 8004890:	e00f      	b.n	80048b2 <os_obj_wait+0x622>
						os_list_remove(objList[j]->blockList, (os_handle_t)os_cur_task->element);
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <os_obj_wait+0x740>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7fe fd20 	bl	80032ec <os_list_remove>
					for(size_t j = 0; j < i; j++){
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	3301      	adds	r3, #1
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
 80048b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3eb      	bcc.n	8004892 <os_obj_wait+0x602>
					}

					/* Revert structure
					 ---------------------------------------------------*/
					((os_task_t*)os_cur_task->element)->state 			= OS_TASK_READY;
 80048ba:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <os_obj_wait+0x740>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2202      	movs	r2, #2
 80048c2:	761a      	strb	r2, [r3, #24]
					((os_task_t*)os_cur_task->element)->wakeCoutdown 	= 0;
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <os_obj_wait+0x740>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
					((os_task_t*)os_cur_task->element)->objWaited 		= NULL;
 80048ce:	4b40      	ldr	r3, [pc, #256]	; (80049d0 <os_obj_wait+0x740>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
					((os_task_t*)os_cur_task->element)->sizeObjs		= 0;
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <os_obj_wait+0x740>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
					((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <os_obj_wait+0x740>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	63da      	str	r2, [r3, #60]	; 0x3c

					/* return
					 ---------------------------------------------------*/
					OS_EXIT_CRITICAL();
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f383 8810 	msr	PRIMASK, r3
 80048f4:	f3bf 8f6f 	isb	sy
					if(err != NULL) *err = OS_ERR_INSUFFICIENT_HEAP;
 80048f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <os_obj_wait+0x676>
 80048fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004900:	f06f 0202 	mvn.w	r2, #2
 8004904:	601a      	str	r2, [r3, #0]
					return NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	e05e      	b.n	80049c8 <os_obj_wait+0x738>
				}

				os_obj_updatePrio(objList[i]);
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe fb81 	bl	800301c <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	3301      	adds	r3, #1
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
 8004920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	d3a0      	bcc.n	800486a <os_obj_wait+0x5da>
			}

			/* Update blocklist for every object
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492c:	e00a      	b.n	8004944 <os_obj_wait+0x6b4>
				os_handle_list_updateAndCheck(objList[i]);
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe ff03 	bl	8003744 <os_handle_list_updateAndCheck>
			for(size_t i = 0; i < objNum; i++){
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	3301      	adds	r3, #1
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	d3f0      	bcc.n	800492e <os_obj_wait+0x69e>
			}

			/* Call CB
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f383 8810 	msr	PRIMASK, r3
 8004952:	f3bf 8f6f 	isb	sy
			os_task_on_block_cb(os_cur_task->element);
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <os_obj_wait+0x740>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd ff55 	bl	800280c <os_task_on_block_cb>
			OS_ENTER_CRITICAL();
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	b672      	cpsid	i
 800496a:	f3bf 8f6f 	isb	sy
		}

		blocked = true;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		/* Yeild
		 ---------------------------------------------------*/
		OS_SET_PENDSV();
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <os_obj_wait+0x744>)
 8004976:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <os_obj_wait+0x744>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc

		/* Reenable interrupts
		 ---------------------------------------------------*/
		__os_enable_irq();
 8004984:	b662      	cpsie	i
		/* This line will be executed once the task is woken up by object freeing or timeout
		 * The object freeing means that the object was freed and this task was the chosen to wake up
		 * but there is no guarantee that the object will be available (as an interrupt can occur, or another higher priority
		 * task can get the object before this task has the chance to run. Because of this, we have to loop here
		 ---------------------------------------------------*/
		OS_ENTER_CRITICAL();
 8004986:	f3ef 8310 	mrs	r3, PRIMASK
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	b672      	cpsid	i
 800498e:	f3bf 8f6f 	isb	sy

		/* Update ticks
		 ---------------------------------------------------*/
		timeout_ticks 									= ((os_task_t*)os_cur_task->element)->wakeCoutdown;
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <os_obj_wait+0x740>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	603b      	str	r3, [r7, #0]
		((os_task_t*)os_cur_task->element)->objWaited 	= NULL;
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <os_obj_wait+0x740>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2200      	movs	r2, #0
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
		((os_task_t*)os_cur_task->element)->wakeCoutdown = 0;
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <os_obj_wait+0x740>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2200      	movs	r2, #0
 80049ae:	61da      	str	r2, [r3, #28]
		((os_task_t*)os_cur_task->element)->sizeObjs		= 0;
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <os_obj_wait+0x740>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
		((os_task_t*)os_cur_task->element)->objWanted	= 0xFFFFFFFF;
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <os_obj_wait+0x740>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
	while(1){
 80049c6:	e4e4      	b.n	8004392 <os_obj_wait+0x102>
	/* Return
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
	if(err != NULL) *err = OS_ERR_UNKNOWN;
	return NULL;
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3770      	adds	r7, #112	; 0x70
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200145a4 	.word	0x200145a4
 80049d4:	e000e008 	.word	0xe000e008

080049d8 <os_obj_single_wait>:
 * @param uint32_t timeout_ticks : [ in] Amount of time before a timeout is detected. If OS_WAIT_FOREVER, the task blocks forever. If OS_WAIT_NONE, the task returns imediately
 * @parem os_err_e* err			 : [out] Error code. Ignored if NULL.
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
os_handle_t os_obj_single_wait(os_handle_t obj, uint32_t timeout_ticks, os_err_e* err){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]

	/* Form array and call wait function
	 ---------------------------------------------------*/
	os_handle_t objList[] = { obj };
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	617b      	str	r3, [r7, #20]
	return os_obj_wait(objList, 1, OS_OBJ_WAIT_ONE, timeout_ticks, err);
 80049e8:	f107 0014 	add.w	r0, r7, #20
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	2101      	movs	r1, #1
 80049f6:	f7ff fc4b 	bl	8004290 <os_obj_wait>
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <os_round_robin>:
 *
 * @brief This function decides the task that will gain the cpu
 *
 * @return task_list_t : Reference to the chosen task
 **********************************************************************/
static os_list_cell_t* os_round_robin(){
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0

	/* Declare iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <os_round_robin+0xe4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* it_low = os_cur_task;
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <os_round_robin+0xe8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61bb      	str	r3, [r7, #24]

	/* Saves first higher priority available in the higher side (all tasks before the current one in list order)
	 ------------------------------------------------------*/
	int8_t highSidePrio = -1;
 8004a16:	23ff      	movs	r3, #255	; 0xff
 8004a18:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* highSide= NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]

	/* Saves first higher priority available in the lower side (all tasks after and including the current one in list order)
	 ------------------------------------------------------*/
	int8_t lowSidePrio = -1;
 8004a1e:	23ff      	movs	r3, #255	; 0xff
 8004a20:	73fb      	strb	r3, [r7, #15]
	os_list_cell_t* lowSide = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]

	/* Search the high side of the list
	 ------------------------------------------------------*/
	while(it != os_cur_task){
 8004a26:	e018      	b.n	8004a5a <os_round_robin+0x56>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	7e1b      	ldrb	r3, [r3, #24]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d110      	bne.n	8004a54 <os_round_robin+0x50>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe0c 	bl	8005654 <os_task_getPrio>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	71bb      	strb	r3, [r7, #6]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(highSidePrio <= task_prio){
 8004a40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004a44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	dc03      	bgt.n	8004a54 <os_round_robin+0x50>
				highSidePrio = task_prio;
 8004a4c:	79bb      	ldrb	r3, [r7, #6]
 8004a4e:	75fb      	strb	r3, [r7, #23]
				highSide = it;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	613b      	str	r3, [r7, #16]

		}

		/* Otherwise continue
		 ------------------------------------------------------*/
		it = it->next;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	61fb      	str	r3, [r7, #28]
	while(it != os_cur_task){
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <os_round_robin+0xe8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1e1      	bne.n	8004a28 <os_round_robin+0x24>
	}

	/* Search the low side of the list
	 ------------------------------------------------------*/
	while(it_low != NULL){
 8004a64:	e018      	b.n	8004a98 <os_round_robin+0x94>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	7e1b      	ldrb	r3, [r3, #24]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d110      	bne.n	8004a92 <os_round_robin+0x8e>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fded 	bl	8005654 <os_task_getPrio>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(lowSidePrio <= task_prio ){
 8004a7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	dc03      	bgt.n	8004a92 <os_round_robin+0x8e>
				lowSidePrio = task_prio;
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	73fb      	strb	r3, [r7, #15]
				lowSide = it_low;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	60bb      	str	r3, [r7, #8]
			}

		}

		it_low = it_low->next;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
	while(it_low != NULL){
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e3      	bne.n	8004a66 <os_round_robin+0x62>
	}

	/* If nothing was found, return NULL
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide == NULL) return NULL;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <os_round_robin+0xaa>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <os_round_robin+0xaa>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e018      	b.n	8004ae0 <os_round_robin+0xdc>

	/* If only the low side found something, return it
	 ------------------------------------------------------*/
	if(highSide == NULL && lowSide != NULL) return lowSide;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <os_round_robin+0xba>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <os_round_robin+0xba>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	e010      	b.n	8004ae0 <os_round_robin+0xdc>

	/* If only the high side found something, return it
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide != NULL) return highSide;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <os_round_robin+0xca>
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <os_round_robin+0xca>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	e008      	b.n	8004ae0 <os_round_robin+0xdc>

	/* If both found something, return the task with higher priority.
	 * If both are equal, chose the lower side to peform the round robin for the same priority task
	 ------------------------------------------------------*/
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 8004ace:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	dd01      	ble.n	8004ade <os_round_robin+0xda>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	e000      	b.n	8004ae0 <os_round_robin+0xdc>
 8004ade:	693b      	ldr	r3, [r7, #16]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20014df0 	.word	0x20014df0
 8004aec:	200145a4 	.word	0x200145a4

08004af0 <os_scheduler>:
 * OS Scheduler
 *
 * @brief This function performs the stack management of the context change (must be called in PENDSV interrupt)
 *
 **********************************************************************/
__used static void os_scheduler(){
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <os_scheduler+0x8c>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d139      	bne.n	8004b72 <os_scheduler+0x82>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__os_disable_irq();
 8004afe:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	603b      	str	r3, [r7, #0]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8004b04:	f3ef 8309 	mrs	r3, PSP
 8004b08:	603b      	str	r3, [r7, #0]

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <os_scheduler+0x90>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <os_scheduler+0x2c>
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <os_scheduler+0x90>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	621a      	str	r2, [r3, #32]

	/* Save last task
	 ------------------------------------------------------*/
	os_list_cell_t* last_task = os_cur_task;
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <os_scheduler+0x90>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	607b      	str	r3, [r7, #4]
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 8004b22:	f7ff ff6f 	bl	8004a04 <os_round_robin>
 8004b26:	4602      	mov	r2, r0
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <os_scheduler+0x90>)
 8004b2a:	601a      	str	r2, [r3, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <os_scheduler+0x90>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <os_scheduler+0x4c>
			__os_enable_irq();
 8004b34:	b662      	cpsie	i
			os_no_task_ready_cb();
 8004b36:	f7fd fe78 	bl	800282a <os_no_task_ready_cb>
			__os_disable_irq();
 8004b3a:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <os_scheduler+0x90>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ee      	beq.n	8004b22 <os_scheduler+0x32>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 8004b44:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <os_scheduler+0x90>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	603b      	str	r3, [r7, #0]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <os_scheduler+0x7e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	7e1b      	ldrb	r3, [r3, #24]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d104      	bne.n	8004b6e <os_scheduler+0x7e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fc71 	bl	8005450 <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__os_enable_irq();
 8004b6e:	b662      	cpsie	i
 8004b70:	e000      	b.n	8004b74 <os_scheduler+0x84>
	if(state != OS_SCHEDULER_START) return;
 8004b72:	bf00      	nop

}
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200145a0 	.word	0x200145a0
 8004b80:	200145a4 	.word	0x200145a4

08004b84 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8004b84:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8004b88:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8004b8c:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 8004b8e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 8004b92:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 8004b96:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 8004b9a:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 8004b9c:	f7ff ffa8 	bl	8004af0 <os_scheduler>
	__asm volatile ("pop {lr}");
 8004ba0:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8004ba4:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 8004ba8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8004bac:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8004bb0:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 8004bb2:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 8004bb6:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 8004bba:	4770      	bx	lr

}
 8004bbc:	bf00      	nop
	...

08004bc0 <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 8004bc6:	f7fd fda1 	bl	800270c <os_init_get>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f083 0301 	eor.w	r3, r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <os_scheduler_start+0x1c>
 8004bd6:	f06f 0303 	mvn.w	r3, #3
 8004bda:	e01b      	b.n	8004c14 <os_scheduler_start+0x54>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	b672      	cpsid	i
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <os_scheduler_start+0x5c>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	f000 fb71 	bl	80052d4 <os_task_must_yeild>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <os_scheduler_start+0x48>
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <os_scheduler_start+0x60>)
 8004bfa:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <os_scheduler_start+0x60>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f383 8810 	msr	PRIMASK, r3
 8004c0e:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	200145a0 	.word	0x200145a0
 8004c20:	e000e008 	.word	0xe000e008

08004c24 <os_scheduler_state_get>:
 * @brief Returns the state of the scheduler
 *
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
	return state;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <os_scheduler_state_get+0x14>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	200145a0 	.word	0x200145a0

08004c3c <os_task_init_stack>:
 * @param uint32_t interruptStackSize : [in] size of the interrupt stack
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_init_stack(uint32_t interruptStackSize){
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ------------------------------------------------------*/
	if(interruptStackSize < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004c4a:	d202      	bcs.n	8004c52 <os_task_init_stack+0x16>
 8004c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c50:	e022      	b.n	8004c98 <os_task_init_stack+0x5c>

	/* Allocate the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd ffc2 	bl	8002bdc <os_heap_alloc>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60fb      	str	r3, [r7, #12]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <os_task_init_stack+0x2c>
 8004c62:	f06f 0302 	mvn.w	r3, #2
 8004c66:	e017      	b.n	8004c98 <os_task_init_stack+0x5c>

	/* Save context and make PSP = MSP
	 ------------------------------------------------------*/
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 8004c68:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 8004c6a:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 8004c6e:	f386 8809 	msr	PSP, r6

	/* Position MSP to interrput stack
	 ------------------------------------------------------*/
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	f023 0307 	bic.w	r3, r3, #7
 8004c7c:	60bb      	str	r3, [r7, #8]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 8004c82:	f386 8808 	msr	MSP, r6

	/* Select PSP as current stack pointer
	 ------------------------------------------------------*/
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 8004c86:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 8004c8a:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 8004c8e:	f386 8814 	msr	CONTROL, r6

	/* Recover stack
	 ------------------------------------------------------*/
	__asm volatile ("pop {r6, lr}");
 8004c92:	e8bd 4040 	ldmia.w	sp!, {r6, lr}

	return OS_ERR_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <os_task_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_task_getFreeCount(os_handle_t h){
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <os_task_getFreeCount+0x12>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e031      	b.n	8004d16 <os_task_getFreeCount+0x76>
	if(h->type != OS_OBJ_TASK) return 0;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <os_task_getFreeCount+0x1e>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e02b      	b.n	8004d16 <os_task_getFreeCount+0x76>

	/* Check if task ended
	 ------------------------------------------------------*/
	os_task_state_e state = os_task_getState(h);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fce4 	bl	800568c <os_task_getState>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]

	/* Determines if task ended
	 ------------------------------------------------------*/
	bool task_ended  = (state == OS_TASK_NOT_EXIST);
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_ENDED);
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	2a01      	cmp	r2, #1
 8004cda:	bf0c      	ite	eq
 8004cdc:	2201      	moveq	r2, #1
 8004cde:	2200      	movne	r2, #0
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_DELETING);
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	7bfa      	ldrb	r2, [r7, #15]
 8004cf2:	2a04      	cmp	r2, #4
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2201      	moveq	r2, #1
 8004cf8:	2200      	movne	r2, #0
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	73bb      	strb	r3, [r7, #14]

	return task_ended ? OS_OBJ_COUNT_INF : 0;
 8004d08:	7bbb      	ldrb	r3, [r7, #14]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <os_task_getFreeCount+0x74>
 8004d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d12:	e000      	b.n	8004d16 <os_task_getFreeCount+0x76>
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <os_task_objTake>:
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_objTake(os_handle_t h, os_handle_t takingTask){
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);

	return OS_ERR_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <os_task_start>:
 * @param void* argv			: [ in] Second argument to be passed to the task (used for argv)
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_start(os_handle_t* h, char const * name, void* (*fn)(void* i), os_task_mode_e mode, int8_t priority, uint32_t stack_size, void* argc, void* argv){
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	; 0x30
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	70fb      	strb	r3, [r7, #3]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <os_task_start+0x1a>
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	e1da      	b.n	8005108 <os_task_start+0x3d0>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <os_task_start+0x26>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	e1d4      	b.n	8005108 <os_task_start+0x3d0>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 8004d5e:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da02      	bge.n	8004d6c <os_task_start+0x34>
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6a:	e1cd      	b.n	8005108 <os_task_start+0x3d0>
	if(mode >= __OS_TASK_MODE_MAX) 			return OS_ERR_BAD_ARG;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d902      	bls.n	8004d78 <os_task_start+0x40>
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	e1c7      	b.n	8005108 <os_task_start+0x3d0>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004d7e:	d202      	bcs.n	8004d86 <os_task_start+0x4e>
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	e1c0      	b.n	8005108 <os_task_start+0x3d0>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 8004d86:	f7fd fcc1 	bl	800270c <os_init_get>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f083 0301 	eor.w	r3, r3, #1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <os_task_start+0x64>
 8004d96:	f06f 0303 	mvn.w	r3, #3
 8004d9a:	e1b5      	b.n	8005108 <os_task_start+0x3d0>

	/* Alloc the task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8004d9c:	2058      	movs	r0, #88	; 0x58
 8004d9e:	f7fd ff1d 	bl	8002bdc <os_heap_alloc>
 8004da2:	62b8      	str	r0, [r7, #40]	; 0x28

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <os_task_start+0x78>
 8004daa:	f06f 0302 	mvn.w	r3, #2
 8004dae:	e1ab      	b.n	8005108 <os_task_start+0x3d0>

	/* Alloc the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 8004db0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004db2:	f7fd ff13 	bl	8002bdc <os_heap_alloc>
 8004db6:	4603      	mov	r3, r0
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
	if(stk == 0){
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <os_task_start+0x94>
		os_heap_free(t);
 8004dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc2:	f7fd ff71 	bl	8002ca8 <os_heap_free>
		return OS_ERR_INSUFFICIENT_HEAP;
 8004dc6:	f06f 0302 	mvn.w	r3, #2
 8004dca:	e19d      	b.n	8005108 <os_task_start+0x3d0>
	}

	/* Create a unique PID
	 ------------------------------------------------------*/
	uint16_t pid = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t attempts = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1){

		/* Generate PID using the tick
		 ------------------------------------------------------*/
		uint32_t ms = os_getMsTick() + attempts;
 8004dd4:	f000 fcc0 	bl	8005758 <os_getMsTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	4413      	add	r3, r2
 8004dde:	61fb      	str	r3, [r7, #28]
		pid = (uint16_t)( (ms & 0xFF) ^ ((ms >> 16) & 0xFF) );
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4053      	eors	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	847b      	strh	r3, [r7, #34]	; 0x22

		/* Check if PID exists
		 ------------------------------------------------------*/
		if(os_task_getByPID(pid) == NULL){
 8004df2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fc7f 	bl	80056f8 <os_task_getByPID>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <os_task_start+0xd0>
			break;
		}

		attempts++;
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	3301      	adds	r3, #1
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1){
 8004e06:	e7e5      	b.n	8004dd4 <os_task_start+0x9c>
			break;
 8004e08:	bf00      	nop
	}

	/* Init Task
	 ------------------------------------------------------*/
	t->obj.objUpdate	= 0;
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	721a      	strb	r2, [r3, #8]
	t->obj.type			= OS_OBJ_TASK;
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	4a91      	ldr	r2, [pc, #580]	; (8005060 <os_task_start+0x328>)
 8004e1a:	60da      	str	r2, [r3, #12]
	t->obj.blockList	= os_list_init();
 8004e1c:	f7fe f962 	bl	80030e4 <os_list_init>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	615a      	str	r2, [r3, #20]
	t->obj.obj_take		= &os_task_objTake;
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	4a8e      	ldr	r2, [pc, #568]	; (8005064 <os_task_start+0x32c>)
 8004e2a:	611a      	str	r2, [r3, #16]
	t->obj.name			= (char*) name;
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	605a      	str	r2, [r3, #4]

	t->fnPtr			= fn;
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
	t->basePriority		= priority;
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e3e:	765a      	strb	r2, [r3, #25]
	t->priority		    = priority;
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	t->pid				= pid;
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004e4e:	859a      	strh	r2, [r3, #44]	; 0x2c
	t->state			= OS_TASK_READY;
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	2202      	movs	r2, #2
 8004e54:	761a      	strb	r2, [r3, #24]
	t->wakeCoutdown	 	= 0;
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	2200      	movs	r2, #0
 8004e5a:	61da      	str	r2, [r3, #28]
	t->stackBase		= (stk + stack_size);
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	441a      	add	r2, r3
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize 		= stack_size;
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	f023 0307 	bic.w	r3, r3, #7
 8004e74:	461a      	mov	r2, r3
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	621a      	str	r2, [r3, #32]
	t->objWaited		= NULL;
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	635a      	str	r2, [r3, #52]	; 0x34
	t->sizeObjs 		= 0;
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2200      	movs	r2, #0
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
	t->retVal			= NULL;
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	2200      	movs	r2, #0
 8004e8a:	649a      	str	r2, [r3, #72]	; 0x48
	t->ownedMutex		= os_list_init();
 8004e8c:	f7fe f92a 	bl	80030e4 <os_list_init>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44

	t->argc				= argv == NULL ? 0 : (int)argc;
 8004e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <os_task_start+0x168>
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	e000      	b.n	8004ea2 <os_task_start+0x16a>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea4:	6513      	str	r3, [r2, #80]	; 0x50
	t->argv				= argv;
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54

	/* Init Task Stack
	 ------------------------------------------------------*/
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	1f1a      	subs	r2, r3, #4
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	621a      	str	r2, [r3, #32]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ebe:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) fn;				//Return
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	1f1a      	subs	r2, r3, #4
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	621a      	str	r2, [r3, #32]
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
	*--t->pStack = (mode == OS_TASK_MODE_RETURN) ? (uint32_t) &os_task_return : (uint32_t) &os_task_end;  //LR
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <os_task_start+0x1a4>
 8004ed8:	4a63      	ldr	r2, [pc, #396]	; (8005068 <os_task_start+0x330>)
 8004eda:	e000      	b.n	8004ede <os_task_start+0x1a6>
 8004edc:	4a63      	ldr	r2, [pc, #396]	; (800506c <os_task_start+0x334>)
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	1f19      	subs	r1, r3, #4
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	6219      	str	r1, [r3, #32]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R12
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	1f1a      	subs	r2, r3, #4
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	621a      	str	r2, [r3, #32]
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R3
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	1f1a      	subs	r2, r3, #4
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	621a      	str	r2, [r3, #32]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R2
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	1f1a      	subs	r2, r3, #4
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	621a      	str	r2, [r3, #32]
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) argv;			 	//R1 (argument 2)
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	1f1a      	subs	r2, r3, #4
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	621a      	str	r2, [r3, #32]
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f34:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) argc;			 	//R0 (argument 1)
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	1f1a      	subs	r2, r3, #4
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	621a      	str	r2, [r3, #32]
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]

	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	1f1a      	subs	r2, r3, #4
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	621a      	str	r2, [r3, #32]
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f06f 0202 	mvn.w	r2, #2
 8004f5a:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R11
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	1f1a      	subs	r2, r3, #4
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	621a      	str	r2, [r3, #32]
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R10
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	1f1a      	subs	r2, r3, #4
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	621a      	str	r2, [r3, #32]
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0; 			 	//R9
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	1f1a      	subs	r2, r3, #4
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	621a      	str	r2, [r3, #32]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R8
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	1f1a      	subs	r2, r3, #4
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	621a      	str	r2, [r3, #32]
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R7
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	1f1a      	subs	r2, r3, #4
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	621a      	str	r2, [r3, #32]
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R6
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	1f1a      	subs	r2, r3, #4
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	621a      	str	r2, [r3, #32]
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R5
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	1f1a      	subs	r2, r3, #4
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	621a      	str	r2, [r3, #32]
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R4
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	1f1a      	subs	r2, r3, #4
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	621a      	str	r2, [r3, #32]
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Handles any heap errors
	 ------------------------------------------------------*/
	if(t->obj.blockList == NULL || t->ownedMutex == NULL){
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <os_task_start+0x2c4>
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d113      	bne.n	8005024 <os_task_start+0x2ec>
		os_heap_free(t);
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffe:	f7fd fe53 	bl	8002ca8 <os_heap_free>
		os_heap_free((void*)stk);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fe4f 	bl	8002ca8 <os_heap_free>
		os_list_clear(t->obj.blockList);
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe f9e6 	bl	80033e0 <os_list_clear>
		os_list_clear(t->ownedMutex);
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe f9e1 	bl	80033e0 <os_list_clear>
		return OS_ERR_INSUFFICIENT_HEAP;
 800501e:	f06f 0302 	mvn.w	r3, #2
 8005022:	e071      	b.n	8005108 <os_task_start+0x3d0>
	}

	/* Add task to list
	 ------------------------------------------------------*/
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8005024:	2200      	movs	r2, #0
 8005026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005028:	4811      	ldr	r0, [pc, #68]	; (8005070 <os_task_start+0x338>)
 800502a:	f7fe f8f0 	bl	800320e <os_list_add>
 800502e:	61b8      	str	r0, [r7, #24]
	if(err != OS_ERR_OK) {
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01e      	beq.n	8005074 <os_task_start+0x33c>
		os_heap_free(t);
 8005036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005038:	f7fd fe36 	bl	8002ca8 <os_heap_free>
		os_heap_free((void*)stk);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fe32 	bl	8002ca8 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe f9c9 	bl	80033e0 <os_list_clear>
		os_list_clear(t->ownedMutex);
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe f9c4 	bl	80033e0 <os_list_clear>
		return OS_ERR_INSUFFICIENT_HEAP;
 8005058:	f06f 0302 	mvn.w	r3, #2
 800505c:	e054      	b.n	8005108 <os_task_start+0x3d0>
 800505e:	bf00      	nop
 8005060:	08004ca1 	.word	0x08004ca1
 8005064:	08004d1f 	.word	0x08004d1f
 8005068:	080053f9 	.word	0x080053f9
 800506c:	080053e1 	.word	0x080053e1
 8005070:	20014df0 	.word	0x20014df0
	}

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8005074:	2200      	movs	r2, #0
 8005076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005078:	4825      	ldr	r0, [pc, #148]	; (8005110 <os_task_start+0x3d8>)
 800507a:	f7fe f8c8 	bl	800320e <os_list_add>
 800507e:	6178      	str	r0, [r7, #20]
	if(ret != OS_ERR_OK) {
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <os_task_start+0x37c>
		os_heap_free(t);
 8005086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005088:	f7fd fe0e 	bl	8002ca8 <os_heap_free>
		os_heap_free((void*)stk);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	4618      	mov	r0, r3
 8005090:	f7fd fe0a 	bl	8002ca8 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe f9a1 	bl	80033e0 <os_list_clear>
		os_list_clear(t->ownedMutex);
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe f99c 	bl	80033e0 <os_list_clear>
		os_list_remove(&os_head, (os_handle_t)t);
 80050a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050aa:	481a      	ldr	r0, [pc, #104]	; (8005114 <os_task_start+0x3dc>)
 80050ac:	f7fe f91e 	bl	80032ec <os_list_remove>
		return ret;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	e029      	b.n	8005108 <os_task_start+0x3d0>
	}

	/* Calculate task priority
	 ------------------------------------------------------*/
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 80050b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b6:	f000 facd 	bl	8005654 <os_task_getPrio>
 80050ba:	4603      	mov	r3, r0
 80050bc:	74fb      	strb	r3, [r7, #19]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <os_task_start+0x3e0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <os_task_start+0x39e>
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <os_task_start+0x3e0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fac1 	bl	8005654 <os_task_getPrio>
 80050d2:	4603      	mov	r3, r0
 80050d4:	e001      	b.n	80050da <os_task_start+0x3a2>
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	74bb      	strb	r3, [r7, #18]

	/* If created task was a higher priority, and scheduler is running, yeild
	 ---------------------------------------------------*/
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 80050dc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80050e0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	dd06      	ble.n	80050f6 <os_task_start+0x3be>
 80050e8:	f7ff fd9c 	bl	8004c24 <os_scheduler_state_get>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <os_task_start+0x3be>
 80050f2:	f000 fa9d 	bl	8005630 <os_task_yeild>

	/* link handle with task object
	 ---------------------------------------------------*/
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <os_task_start+0x3c8>
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	e000      	b.n	8005102 <os_task_start+0x3ca>
 8005100:	2300      	movs	r3, #0
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	6013      	str	r3, [r2, #0]

	return err;
 8005106:	69bb      	ldr	r3, [r7, #24]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3730      	adds	r7, #48	; 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20014dd0 	.word	0x20014dd0
 8005114:	20014df0 	.word	0x20014df0
 8005118:	200145a4 	.word	0x200145a4

0800511c <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	460b      	mov	r3, r1
 800512a:	72fb      	strb	r3, [r7, #11]

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 800512c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005130:	2b00      	cmp	r3, #0
 8005132:	da02      	bge.n	800513a <os_task_init+0x1e>
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	e0bb      	b.n	80052b2 <os_task_init+0x196>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005140:	d202      	bcs.n	8005148 <os_task_init+0x2c>
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	e0b4      	b.n	80052b2 <os_task_init+0x196>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800514e:	d202      	bcs.n	8005156 <os_task_init+0x3a>
 8005150:	f04f 33ff 	mov.w	r3, #4294967295
 8005154:	e0ad      	b.n	80052b2 <os_task_init+0x196>

	/* Init stack by changing the register used (MSP to PSP) and allocate interrupt stack
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init_stack(interrput_stack_size);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fd70 	bl	8004c3c <os_task_init_stack>
 800515c:	6178      	str	r0, [r7, #20]
	if(ret != OS_ERR_OK) return ret;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <os_task_init+0x4c>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	e0a4      	b.n	80052b2 <os_task_init+0x196>

	/* Allocate task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8005168:	2058      	movs	r0, #88	; 0x58
 800516a:	f7fd fd37 	bl	8002bdc <os_heap_alloc>
 800516e:	6138      	str	r0, [r7, #16]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <os_task_init+0x60>
 8005176:	f06f 0302 	mvn.w	r3, #2
 800517a:	e09a      	b.n	80052b2 <os_task_init+0x196>

	/* Init main task
	 ------------------------------------------------------*/
	t->obj.objUpdate		= 0;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2200      	movs	r2, #0
 8005180:	721a      	strb	r2, [r3, #8]
	t->obj.type				= OS_OBJ_TASK;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4a4c      	ldr	r2, [pc, #304]	; (80052bc <os_task_init+0x1a0>)
 800518c:	60da      	str	r2, [r3, #12]
	t->obj.blockList		= os_list_init();
 800518e:	f7fd ffa9 	bl	80030e4 <os_list_init>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	615a      	str	r2, [r3, #20]
	t->obj.obj_take			= &os_task_objTake;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4a49      	ldr	r2, [pc, #292]	; (80052c0 <os_task_init+0x1a4>)
 800519c:	611a      	str	r2, [r3, #16]
	t->obj.name 			= main_name;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	605a      	str	r2, [r3, #4]

	t->basePriority 		= main_task_priority;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	7afa      	ldrb	r2, [r7, #11]
 80051a8:	765a      	strb	r2, [r3, #25]
	t->priority		    	= main_task_priority;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	7afa      	ldrb	r2, [r7, #11]
 80051ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	t->pid					= 0;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2200      	movs	r2, #0
 80051b6:	859a      	strh	r2, [r3, #44]	; 0x2c
	t->state	 			= OS_TASK_READY;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2202      	movs	r2, #2
 80051bc:	761a      	strb	r2, [r3, #24]
	t->pStack   			= NULL;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2200      	movs	r2, #0
 80051c2:	621a      	str	r2, [r3, #32]
	t->wakeCoutdown  		= 0;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2200      	movs	r2, #0
 80051c8:	61da      	str	r2, [r3, #28]
	t->stackBase	    	= 0;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2200      	movs	r2, #0
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
	t->objWaited			= NULL;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2200      	movs	r2, #0
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34
	t->sizeObjs 			= 0;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2200      	movs	r2, #0
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
	t->retVal				= NULL;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2200      	movs	r2, #0
 80051e0:	649a      	str	r2, [r3, #72]	; 0x48

	t->ownedMutex			= os_list_init();
 80051e2:	f7fd ff7f 	bl	80030e4 <os_list_init>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
	t->argc					= 0;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2200      	movs	r2, #0
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
	t->argv					= NULL;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2200      	movs	r2, #0
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54

	/* Handles heap errors
	 ------------------------------------------------------*/
	if(t->obj.blockList == NULL || t->ownedMutex == NULL){
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <os_task_init+0xec>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10f      	bne.n	8005228 <os_task_init+0x10c>
		os_heap_free(t);
 8005208:	6938      	ldr	r0, [r7, #16]
 800520a:	f7fd fd4d 	bl	8002ca8 <os_heap_free>
		os_list_clear(t->obj.blockList);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe f8e4 	bl	80033e0 <os_list_clear>
		os_list_clear(t->ownedMutex);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe f8df 	bl	80033e0 <os_list_clear>
		return OS_ERR_INSUFFICIENT_HEAP;
 8005222:	f06f 0302 	mvn.w	r3, #2
 8005226:	e044      	b.n	80052b2 <os_task_init+0x196>
	}

	/* Init head list and Add main task
	 ------------------------------------------------------*/
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 8005228:	2200      	movs	r2, #0
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	4825      	ldr	r0, [pc, #148]	; (80052c4 <os_task_init+0x1a8>)
 800522e:	f7fd ffee 	bl	800320e <os_list_add>
 8005232:	6178      	str	r0, [r7, #20]
	if(t->obj.blockList == NULL || t->ownedMutex == NULL || ret != OS_ERR_OK) {
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <os_task_init+0x12e>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <os_task_init+0x12e>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <os_task_init+0x14e>
		os_heap_free(t);
 800524a:	6938      	ldr	r0, [r7, #16]
 800524c:	f7fd fd2c 	bl	8002ca8 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe f8c3 	bl	80033e0 <os_list_clear>
		os_list_clear(t->ownedMutex);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe f8be 	bl	80033e0 <os_list_clear>
		return OS_ERR_INSUFFICIENT_HEAP;
 8005264:	f06f 0302 	mvn.w	r3, #2
 8005268:	e023      	b.n	80052b2 <os_task_init+0x196>
	}

	/* Add object to object list
	 ------------------------------------------------------*/
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 800526a:	2200      	movs	r2, #0
 800526c:	6939      	ldr	r1, [r7, #16]
 800526e:	4816      	ldr	r0, [pc, #88]	; (80052c8 <os_task_init+0x1ac>)
 8005270:	f7fd ffcd 	bl	800320e <os_list_add>
 8005274:	6178      	str	r0, [r7, #20]
	if(ret != OS_ERR_OK) {
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <os_task_init+0x186>
		os_heap_free(t);
 800527c:	6938      	ldr	r0, [r7, #16]
 800527e:	f7fd fd13 	bl	8002ca8 <os_heap_free>
		os_list_clear(t->obj.blockList);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe f8aa 	bl	80033e0 <os_list_clear>
		os_list_clear(t->ownedMutex);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe f8a5 	bl	80033e0 <os_list_clear>
		os_list_remove(&os_head, (os_handle_t) t);
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	480a      	ldr	r0, [pc, #40]	; (80052c4 <os_task_init+0x1a8>)
 800529a:	f7fe f827 	bl	80032ec <os_list_remove>
		return ret;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	e007      	b.n	80052b2 <os_task_init+0x196>
	}

	/* Point to current task
	 ------------------------------------------------------*/
	os_cur_task = os_head.head.next;
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <os_task_init+0x1a8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a09      	ldr	r2, [pc, #36]	; (80052cc <os_task_init+0x1b0>)
 80052a8:	6013      	str	r3, [r2, #0]

	/* Link handle with task
	 ------------------------------------------------------*/
	main_task = (os_handle_t) t;
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <os_task_init+0x1b4>)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6013      	str	r3, [r2, #0]

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
 80052b0:	697b      	ldr	r3, [r7, #20]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	08004ca1 	.word	0x08004ca1
 80052c0:	08004d1f 	.word	0x08004d1f
 80052c4:	20014df0 	.word	0x20014df0
 80052c8:	20014dd0 	.word	0x20014dd0
 80052cc:	200145a4 	.word	0x200145a4
 80052d0:	20014e0c 	.word	0x20014e0c

080052d4 <os_task_must_yeild>:
 * @brief This function checks the priority of all tasks and decides if the current task should yield
 *
 * @return bool : 1 = yeild
 *
 **********************************************************************/
bool os_task_must_yeild(){
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0

	/* Enter critical
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 80052da:	f3ef 8310 	mrs	r3, PRIMASK
 80052de:	607b      	str	r3, [r7, #4]
 80052e0:	b672      	cpsid	i
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <os_task_must_yeild+0x80>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <os_task_must_yeild+0x84>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <os_task_must_yeild+0x30>
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <os_task_must_yeild+0x84>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f9aa 	bl	8005654 <os_task_getPrio>
 8005300:	4603      	mov	r3, r0
 8005302:	e001      	b.n	8005308 <os_task_must_yeild+0x34>
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	72fb      	strb	r3, [r7, #11]
 800530a:	e016      	b.n	800533a <os_task_must_yeild+0x66>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f99f 	bl	8005654 <os_task_getPrio>
 8005316:	4603      	mov	r3, r0
 8005318:	72bb      	strb	r3, [r7, #10]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	7e1b      	ldrb	r3, [r3, #24]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d107      	bne.n	8005334 <os_task_must_yeild+0x60>
 8005324:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005328:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800532c:	429a      	cmp	r2, r3
 800532e:	da01      	bge.n	8005334 <os_task_must_yeild+0x60>
 8005330:	2301      	movs	r3, #1
 8005332:	e00b      	b.n	800534c <os_task_must_yeild+0x78>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <os_task_must_yeild+0x38>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f383 8810 	msr	PRIMASK, r3
 8005346:	f3bf 8f6f 	isb	sy
			 ------------------------------------------------------*/
			it = it->next;
		}
	);

	return false;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20014df0 	.word	0x20014df0
 8005358:	200145a4 	.word	0x200145a4

0800535c <os_task_create>:
 * @param void* arg				: [ in] Argument to be passed to the task
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), os_task_mode_e mode, int8_t priority, uint32_t stack_size, void* arg){
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	70fb      	strb	r3, [r7, #3]

	/* Start task with the correct arguments
	 ------------------------------------------------------*/
	return os_task_start(h, name, fn, mode, priority, stack_size, arg, NULL);
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	2300      	movs	r3, #0
 800536e:	9303      	str	r3, [sp, #12]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff fcd7 	bl	8004d38 <os_task_start>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <os_task_createProcess>:
 * @param char* argv[] : [in] Array of strings to be passed to the task
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_createProcess(char* file, int argc, char* argv[]){
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af04      	add	r7, sp, #16
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]

	/* Load ELF file
	 ------------------------------------------------------*/
	void* code = os_elf_loadFile(file);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7fe fe61 	bl	8004068 <os_elf_loadFile>
 80053a6:	6178      	str	r0, [r7, #20]

	if(code == NULL)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <os_task_createProcess+0x20>
		return OS_ERR_UNKNOWN;
 80053ae:	f06f 0306 	mvn.w	r3, #6
 80053b2:	e011      	b.n	80053d8 <os_task_createProcess+0x44>

	/* Start task with correct arguments
	 ------------------------------------------------------*/
	os_handle_t h;
	return os_task_start(&h, file, code, OS_TASK_MODE_DELETE, 10, 5 * OS_DEFAULT_STACK_SIZE, (void*) argc, argv);
 80053b4:	6979      	ldr	r1, [r7, #20]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f107 0010 	add.w	r0, r7, #16
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	9203      	str	r2, [sp, #12]
 80053c0:	9302      	str	r3, [sp, #8]
 80053c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	230a      	movs	r3, #10
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2301      	movs	r3, #1
 80053ce:	460a      	mov	r2, r1
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	f7ff fcb1 	bl	8004d38 <os_task_start>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <os_task_end>:
 *
 * @brief This function ends the current running task. Use this to safely end a task if you do not care about its return
 * The task block is freed from the heap, and all tasks waiting for it to finish will be set to ready
 *
 **********************************************************************/
void os_task_end(){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
	os_task_delete((os_handle_t) os_cur_task->element);
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <os_task_end+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f830 	bl	8005450 <os_task_delete>
}
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200145a4 	.word	0x200145a4

080053f8 <os_task_return>:
 * @param void* retVal : [in] return value
 *
 * @return os_err_e : should never return. If it does, a problem occurred
 *
 **********************************************************************/
os_err_e os_task_return(void* retVal){
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

	/* Check scheduler
	 ------------------------------------------------------*/
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8005400:	f7ff fc10 	bl	8004c24 <os_scheduler_state_get>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d002      	beq.n	8005410 <os_task_return+0x18>
 800540a:	f06f 0303 	mvn.w	r3, #3
 800540e:	e019      	b.n	8005444 <os_task_return+0x4c>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8005410:	f3ef 8310 	mrs	r3, PRIMASK
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	b672      	cpsid	i
 8005418:	f3bf 8f6f 	isb	sy

	/* Store return value and tag as ended
	 ------------------------------------------------------*/
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <os_task_return+0x54>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2201      	movs	r2, #1
 8005424:	761a      	strb	r2, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <os_task_return+0x54>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	649a      	str	r2, [r3, #72]	; 0x48

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(os_cur_task->element);
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <os_task_return+0x54>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe f984 	bl	8003744 <os_handle_list_updateAndCheck>
	 ------------------------------------------------------*/
	while(1){

		/* Yeild task
		 ------------------------------------------------------*/
		os_task_yeild();
 800543c:	f000 f8f8 	bl	8005630 <os_task_yeild>

		/* Enable IRQ no matter what
		 ------------------------------------------------------*/
		__os_enable_irq();
 8005440:	b662      	cpsie	i
		os_task_yeild();
 8005442:	e7fb      	b.n	800543c <os_task_return+0x44>
	OS_EXIT_CRITICAL();

	/* Another Failsafe
	 ------------------------------------------------------*/
	return OS_ERR_UNKNOWN;
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	200145a4 	.word	0x200145a4

08005450 <os_task_delete>:
 * @param os_handle_t h : [in] handle containing the task to kill
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_delete(os_handle_t h){
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	617b      	str	r3, [r7, #20]

	/* Search to see if task exists
	 ------------------------------------------------------*/
	os_list_cell_t* list = os_list_search(&os_head, h);
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4871      	ldr	r0, [pc, #452]	; (8005624 <os_task_delete+0x1d4>)
 8005460:	f7fd fe63 	bl	800312a <os_list_search>
 8005464:	6138      	str	r0, [r7, #16]

	/* Check for errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <os_task_delete+0x22>
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	e0d4      	b.n	800561c <os_task_delete+0x1cc>
	if(list == NULL) return OS_ERR_INVALID;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <os_task_delete+0x2e>
 8005478:	f06f 0301 	mvn.w	r3, #1
 800547c:	e0ce      	b.n	800561c <os_task_delete+0x1cc>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d002      	beq.n	800548c <os_task_delete+0x3c>
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e0c7      	b.n	800561c <os_task_delete+0x1cc>

	/* Check scheduler, we cannot kill the current task if scheduler is not ready
	 ------------------------------------------------------*/
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 800548c:	4b66      	ldr	r3, [pc, #408]	; (8005628 <os_task_delete+0x1d8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d107      	bne.n	80054a8 <os_task_delete+0x58>
 8005498:	f7ff fbc4 	bl	8004c24 <os_scheduler_state_get>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d002      	beq.n	80054a8 <os_task_delete+0x58>
 80054a2:	f06f 0303 	mvn.w	r3, #3
 80054a6:	e0b9      	b.n	800561c <os_task_delete+0x1cc>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	b672      	cpsid	i
 80054b0:	f3bf 8f6f 	isb	sy

	/* Tag as ended
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	761a      	strb	r2, [r3, #24]

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(h);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fe f942 	bl	8003744 <os_handle_list_updateAndCheck>

	/* Check and store if we are killing the current task
	 ------------------------------------------------------*/
	if(h == os_cur_task->element){
 80054c0:	4b59      	ldr	r3, [pc, #356]	; (8005628 <os_task_delete+0x1d8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d106      	bne.n	80054da <os_task_delete+0x8a>

		/* Tag task to delete
		 ------------------------------------------------------*/
		t->state = OS_TASK_DELETING;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2204      	movs	r2, #4
 80054d0:	761a      	strb	r2, [r3, #24]
		 ------------------------------------------------------*/
		while(1){

			/* Yeild task
			 ------------------------------------------------------*/
			os_task_yeild();
 80054d2:	f000 f8ad 	bl	8005630 <os_task_yeild>

			/* Enable IRQ no matter what
			 ------------------------------------------------------*/
			__os_enable_irq();
 80054d6:	b662      	cpsie	i
			os_task_yeild();
 80054d8:	e7fb      	b.n	80054d2 <os_task_delete+0x82>
		return OS_ERR_UNKNOWN;
	}

	/* Remove task from object block list if needed
	 ------------------------------------------------------*/
	if( t->objWaited != NULL) {
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d031      	beq.n	8005546 <os_task_delete+0xf6>

		for(uint32_t i = 0; i < t->sizeObjs; i++){
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e029      	b.n	800553c <os_task_delete+0xec>

			/* Failsafe
			 ------------------------------------------------------*/
			if(t->objWaited[i] == NULL) continue;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01d      	beq.n	8005534 <os_task_delete+0xe4>

			/* Remove from block list
			 ------------------------------------------------------*/
			os_list_remove(t->objWaited[i]->blockList, h);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4618      	mov	r0, r3
 800550a:	f7fd feef 	bl	80032ec <os_list_remove>

			/* Update object's priority
			 ------------------------------------------------------*/
			os_obj_updatePrio(t->objWaited[i]);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fd7e 	bl	800301c <os_obj_updatePrio>

			/* Update block list
			 ------------------------------------------------------*/
			os_handle_list_updateAndCheck(t->objWaited[i]);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe f909 	bl	8003744 <os_handle_list_updateAndCheck>
 8005532:	e000      	b.n	8005536 <os_task_delete+0xe6>
			if(t->objWaited[i] == NULL) continue;
 8005534:	bf00      	nop
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3d0      	bcc.n	80054e8 <os_task_delete+0x98>

	}

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4838      	ldr	r0, [pc, #224]	; (800562c <os_task_delete+0x1dc>)
 800554a:	f7fd fecf 	bl	80032ec <os_list_remove>

	/* Remove task from list
	 ------------------------------------------------------*/
	os_list_remove(&os_head, h);
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4834      	ldr	r0, [pc, #208]	; (8005624 <os_task_delete+0x1d4>)
 8005552:	f7fd fecb 	bl	80032ec <os_list_remove>

	/* Clear blocked list
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fd ff40 	bl	80033e0 <os_list_clear>

	/* Clear owned mutex list
	 ------------------------------------------------------*/
	os_list_clear(t->ownedMutex);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005564:	4618      	mov	r0, r3
 8005566:	f7fd ff3b 	bl	80033e0 <os_list_clear>

	/* Free code, name, and arguments if they were created by os_createProcess
	 ------------------------------------------------------*/
	if(t->argc > 0){
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	2b00      	cmp	r3, #0
 8005570:	dd28      	ble.n	80055c4 <os_task_delete+0x174>
		os_heap_free(t->fnPtr);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	4618      	mov	r0, r3
 8005578:	f7fd fb96 	bl	8002ca8 <os_heap_free>
		for(int i = 0; i < t->argc && t->argv != NULL; i++){
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e012      	b.n	80055a8 <os_task_delete+0x158>
			os_heap_free(t->argv[i]);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd fb8a 	bl	8002ca8 <os_heap_free>
			t->argv[i] = NULL;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < t->argc && t->argv != NULL; i++){
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	da03      	bge.n	80055ba <os_task_delete+0x16a>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e3      	bne.n	8005582 <os_task_delete+0x132>
		}
		os_heap_free(t->argv);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd fb72 	bl	8002ca8 <os_heap_free>
	}

	/* Free the stack memory
	 ------------------------------------------------------*/
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fb6a 	bl	8002ca8 <os_heap_free>

	/* Reset values just in case
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2201      	movs	r2, #1
 80055d8:	761a      	strb	r2, [r3, #24]
	t->objWaited = NULL;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	635a      	str	r2, [r3, #52]	; 0x34
	t->sizeObjs = 0;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
	t->pStack = 0;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	621a      	str	r2, [r3, #32]
	t->stackBase = 0;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2200      	movs	r2, #0
 80055f0:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize = 0;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24
	t->wakeCoutdown = 0;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
	t->argc = 0;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	651a      	str	r2, [r3, #80]	; 0x50
	t->argv = 0;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	655a      	str	r2, [r3, #84]	; 0x54

	/* Delete task
	 ------------------------------------------------------*/
	os_heap_free(h);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fd fb4c 	bl	8002ca8 <os_heap_free>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f383 8810 	msr	PRIMASK, r3
 8005616:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20014df0 	.word	0x20014df0
 8005628:	200145a4 	.word	0x200145a4
 800562c:	20014dd0 	.word	0x20014dd0

08005630 <os_task_yeild>:
 * OS Task Yeild
 *
 * @brief This function calls the scheduler in order to let other tasks to run
 *
 **********************************************************************/
void os_task_yeild(){
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <os_task_yeild+0x20>)
 8005636:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800563a:	4a05      	ldr	r2, [pc, #20]	; (8005650 <os_task_yeild+0x20>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e008 	.word	0xe000e008

08005654 <os_task_getPrio>:
 * @param task_t* t : [in] handle to task
 *
 * @return int8_t : The effective priority or -1 if argument error
 *
 **********************************************************************/
int8_t os_task_getPrio(os_handle_t h){
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <os_task_getPrio+0x18>
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	e009      	b.n	8005680 <os_task_getPrio+0x2c>
	if(h->type != OS_OBJ_TASK) return -1;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d002      	beq.n	800567a <os_task_getPrio+0x26>
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	e002      	b.n	8005680 <os_task_getPrio+0x2c>

	return t->priority;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <os_task_getState+0x16>
 800569e:	2300      	movs	r3, #0
 80056a0:	e023      	b.n	80056ea <os_task_getState+0x5e>
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d001      	beq.n	80056ae <os_task_getState+0x22>
 80056aa:	2300      	movs	r3, #0
 80056ac:	e01d      	b.n	80056ea <os_task_getState+0x5e>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4810      	ldr	r0, [pc, #64]	; (80056f4 <os_task_getState+0x68>)
 80056b2:	f7fd fd3a 	bl	800312a <os_list_search>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <os_task_getState+0x34>
 80056bc:	2300      	movs	r3, #0
 80056be:	e014      	b.n	80056ea <os_task_getState+0x5e>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	7e1b      	ldrb	r3, [r3, #24]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d101      	bne.n	80056cc <os_task_getState+0x40>
 80056c8:	2300      	movs	r3, #0
 80056ca:	e00e      	b.n	80056ea <os_task_getState+0x5e>

	/* Check if task is ended
	 ------------------------------------------------------*/
	os_task_state_e state = task->state;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7e1b      	ldrb	r3, [r3, #24]
 80056d0:	72fb      	strb	r3, [r7, #11]

	/* Force blocked if task is waiting for an object
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 80056d2:	7afb      	ldrb	r3, [r7, #11]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d103      	bne.n	80056e0 <os_task_getState+0x54>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <os_task_getState+0x58>
 80056e0:	7afb      	ldrb	r3, [r7, #11]
 80056e2:	e000      	b.n	80056e6 <os_task_getState+0x5a>
 80056e4:	2303      	movs	r3, #3
 80056e6:	72fb      	strb	r3, [r7, #11]

	return state;
 80056e8:	7afb      	ldrb	r3, [r7, #11]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20014df0 	.word	0x20014df0

080056f8 <os_task_getByPID>:
 *
 * @param uint16_t pid : [in] PID of the searched task
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_handle_t os_task_getByPID(uint16_t pid){
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	80fb      	strh	r3, [r7, #6]

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	b672      	cpsid	i
 800570a:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <os_task_getByPID+0x5c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
	while(it != NULL && ((os_task_t*)it->element)->pid != pid){
 8005714:	e002      	b.n	800571c <os_task_getByPID+0x24>
		it = it->next;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
	while(it != NULL && ((os_task_t*)it->element)->pid != pid){
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <os_task_getByPID+0x36>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	429a      	cmp	r2, r3
 800572c:	d1f3      	bne.n	8005716 <os_task_getByPID+0x1e>
	}

	OS_EXIT_CRITICAL();
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f383 8810 	msr	PRIMASK, r3
 8005734:	f3bf 8f6f 	isb	sy
	return it == NULL ? NULL : it->element;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <os_task_getByPID+0x4c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	e000      	b.n	8005746 <os_task_getByPID+0x4e>
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20014df0 	.word	0x20014df0

08005758 <os_getMsTick>:
 *
 * @brief This function returns the OS' ms tick count
 *
 * @return uint32_t tick count
 **********************************************************************/
uint32_t os_getMsTick(){
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
	return os_ticks_ms;
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <os_getMsTick+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200145a8 	.word	0x200145a8

08005770 <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8005778:	f3ef 8310 	mrs	r3, PRIMASK
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	b672      	cpsid	i
 8005780:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 8005784:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <os_tick+0x100>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	4a38      	ldr	r2, [pc, #224]	; (8005870 <os_tick+0x100>)
 800578e:	6013      	str	r3, [r2, #0]

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* it = os_head.head.next;
 8005794:	4b37      	ldr	r3, [pc, #220]	; (8005874 <os_tick+0x104>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 800579a:	4b37      	ldr	r3, [pc, #220]	; (8005878 <os_tick+0x108>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <os_tick+0x42>
 80057a2:	4b35      	ldr	r3, [pc, #212]	; (8005878 <os_tick+0x108>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff53 	bl	8005654 <os_task_getPrio>
 80057ae:	4603      	mov	r3, r0
 80057b0:	e001      	b.n	80057b6 <os_tick+0x46>
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295
 80057b6:	73fb      	strb	r3, [r7, #15]

	/* Check if there is any high priority task to execute and wake up tasks
	 ------------------------------------------------------*/
	while(it != NULL){
 80057b8:	e044      	b.n	8005844 <os_tick+0xd4>

		/* Tick counter if necessary
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <os_tick+0x80>
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d00f      	beq.n	80057f0 <os_tick+0x80>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d805      	bhi.n	80057e8 <os_tick+0x78>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	e000      	b.n	80057ea <os_tick+0x7a>
 80057e8:	2300      	movs	r3, #0
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	61d3      	str	r3, [r2, #28]

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <os_tick+0x9c>
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	7e1b      	ldrb	r3, [r3, #24]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d103      	bne.n	800580c <os_tick+0x9c>
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2202      	movs	r2, #2
 800580a:	761a      	strb	r2, [r3, #24]

		/* If current task is ready
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	7e1b      	ldrb	r3, [r3, #24]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d113      	bne.n	800583e <os_tick+0xce>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio(it->element);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ff1a 	bl	8005654 <os_task_getPrio>
 8005820:	4603      	mov	r3, r0
 8005822:	73bb      	strb	r3, [r7, #14]

			/* If there is a task with priority higher or equal to current task that is ready, than scheduling is called
			 ------------------------------------------------------*/
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 8005824:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8005828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582c:	429a      	cmp	r2, r3
 800582e:	db06      	blt.n	800583e <os_tick+0xce>
 8005830:	4b11      	ldr	r3, [pc, #68]	; (8005878 <os_tick+0x108>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	429a      	cmp	r2, r3
 8005838:	d001      	beq.n	800583e <os_tick+0xce>
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]

		}

		/* Keep going
		 ------------------------------------------------------*/
		it = it->next;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	613b      	str	r3, [r7, #16]
	while(it != NULL){
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1b7      	bne.n	80057ba <os_tick+0x4a>
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d106      	bne.n	800585e <os_tick+0xee>
 8005850:	f7ff f9e8 	bl	8004c24 <os_scheduler_state_get>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <os_tick+0xee>
 800585a:	f7ff fee9 	bl	8005630 <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f383 8810 	msr	PRIMASK, r3
 8005864:	f3bf 8f6f 	isb	sy
	return;
 8005868:	bf00      	nop
}
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	200145a8 	.word	0x200145a8
 8005874:	20014df0 	.word	0x20014df0
 8005878:	200145a4 	.word	0x200145a4

0800587c <os_flash_write>:
 * @param size_t len 		: [in] Size of the data buffer
 *
 * @return os_err_e : <0 if error. Otherwise the number of bytes written
 *
 **********************************************************************/
os_err_e os_flash_write(uint32_t addr, uint8_t buffer[], size_t len){
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b08f      	sub	sp, #60	; 0x3c
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(len == 0) return OS_ERR_BAD_ARG;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <os_flash_write+0x18>
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	e0fc      	b.n	8005a8e <os_flash_write+0x212>
	if(buffer == NULL) return OS_ERR_BAD_ARG;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <os_flash_write+0x24>
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
 800589e:	e0f6      	b.n	8005a8e <os_flash_write+0x212>
	if(addr < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 80058a0:	4a7d      	ldr	r2, [pc, #500]	; (8005a98 <os_flash_write+0x21c>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d202      	bcs.n	80058ae <os_flash_write+0x32>
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ac:	e0ef      	b.n	8005a8e <os_flash_write+0x212>
	if(addr >= FLASH_END_ADDR) return OS_ERR_BAD_ARG;
 80058ae:	4a7b      	ldr	r2, [pc, #492]	; (8005a9c <os_flash_write+0x220>)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d302      	bcc.n	80058bc <os_flash_write+0x40>
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	e0e8      	b.n	8005a8e <os_flash_write+0x212>

	/* Wait for last operation
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 80058bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058c0:	f008 fb40 	bl	800df44 <FLASH_WaitForLastOperation>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ASSERT(ret == HAL_OK);
 80058ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <os_flash_write+0x60>
 80058d2:	2227      	movs	r2, #39	; 0x27
 80058d4:	4972      	ldr	r1, [pc, #456]	; (8005aa0 <os_flash_write+0x224>)
 80058d6:	4873      	ldr	r0, [pc, #460]	; (8005aa4 <os_flash_write+0x228>)
 80058d8:	f00b f9d6 	bl	8010c88 <iprintf>
	if(ret != HAL_OK)
 80058dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <os_flash_write+0x6e>
		return OS_ERR_UNKNOWN;
 80058e4:	f06f 0306 	mvn.w	r3, #6
 80058e8:	e0d1      	b.n	8005a8e <os_flash_write+0x212>

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
 80058ea:	f008 faf9 	bl	800dee0 <HAL_FLASH_Unlock>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ASSERT(ret == HAL_OK);
 80058f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <os_flash_write+0x8a>
 80058fc:	222e      	movs	r2, #46	; 0x2e
 80058fe:	4968      	ldr	r1, [pc, #416]	; (8005aa0 <os_flash_write+0x224>)
 8005900:	4868      	ldr	r0, [pc, #416]	; (8005aa4 <os_flash_write+0x228>)
 8005902:	f00b f9c1 	bl	8010c88 <iprintf>
	if(ret != HAL_OK)
 8005906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <os_flash_write+0x98>
		return OS_ERR_UNKNOWN;
 800590e:	f06f 0306 	mvn.w	r3, #6
 8005912:	e0bc      	b.n	8005a8e <os_flash_write+0x212>

	/* Write into flash. You can write 1, 2, or 4 bytes at a time
	 ------------------------------------------------------*/
	bool err = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t pos = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
	while(1){

		/* Check alignment and border requirements
		 ------------------------------------------------------*/
		uint32_t writePermitted = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
		writePermitted = ( (addr + 1) <= FLASH_END_ADDR ) 				   ? 1 : writePermitted;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	4a5d      	ldr	r2, [pc, #372]	; (8005a9c <os_flash_write+0x220>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <os_flash_write+0xb4>
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	e000      	b.n	8005932 <os_flash_write+0xb6>
 8005930:	2301      	movs	r3, #1
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
		writePermitted = ( (addr % 2) == 0 && addr + 2 <= FLASH_END_ADDR ) ? 2 : writePermitted;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <os_flash_write+0xcc>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3302      	adds	r3, #2
 8005942:	4a56      	ldr	r2, [pc, #344]	; (8005a9c <os_flash_write+0x220>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <os_flash_write+0xd0>
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	e000      	b.n	800594e <os_flash_write+0xd2>
 800594c:	2302      	movs	r3, #2
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28
		writePermitted = ( (addr % 4) == 0 && addr + 4 <= FLASH_END_ADDR ) ? 4 : writePermitted;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <os_flash_write+0xe8>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3304      	adds	r3, #4
 800595e:	4a4f      	ldr	r2, [pc, #316]	; (8005a9c <os_flash_write+0x220>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <os_flash_write+0xec>
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	e000      	b.n	800596a <os_flash_write+0xee>
 8005968:	2304      	movs	r3, #4
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Calculates the number of bytes to write
		 ------------------------------------------------------*/
		uint32_t lenToWrite = writePermitted < len ? writePermitted : len;
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	4293      	cmp	r3, r2
 8005972:	bf28      	it	cs
 8005974:	4613      	movcs	r3, r2
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
		lenToWrite = lenToWrite == 3 ? 2 : lenToWrite;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2b03      	cmp	r3, #3
 800597c:	d001      	beq.n	8005982 <os_flash_write+0x106>
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	e000      	b.n	8005984 <os_flash_write+0x108>
 8005982:	2302      	movs	r3, #2
 8005984:	627b      	str	r3, [r7, #36]	; 0x24

		/* Finished writing
		 ------------------------------------------------------*/
		if(lenToWrite == 0 || len == 0) break;
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	d06a      	beq.n	8005a62 <os_flash_write+0x1e6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d067      	beq.n	8005a62 <os_flash_write+0x1e6>

		/* Calculates the writing flag used
		 ------------------------------------------------------*/
		uint32_t writeFlag = FLASH_TYPEPROGRAM_BYTE;
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
		writeFlag = lenToWrite == 2 ? FLASH_TYPEPROGRAM_HALFWORD : writeFlag;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	2b02      	cmp	r3, #2
 800599a:	d001      	beq.n	80059a0 <os_flash_write+0x124>
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e000      	b.n	80059a2 <os_flash_write+0x126>
 80059a0:	2301      	movs	r3, #1
 80059a2:	623b      	str	r3, [r7, #32]
		writeFlag = lenToWrite == 4 ?     FLASH_TYPEPROGRAM_WORD : writeFlag;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d001      	beq.n	80059ae <os_flash_write+0x132>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	e000      	b.n	80059b0 <os_flash_write+0x134>
 80059ae:	2302      	movs	r3, #2
 80059b0:	623b      	str	r3, [r7, #32]

		/* Store data in a uint64_t to avoid possible alignment issues
		 ------------------------------------------------------*/
		uint64_t data = 0;
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f04f 0400 	mov.w	r4, #0
 80059ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(&data, &buffer[pos], lenToWrite);
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	18d1      	adds	r1, r2, r3
 80059c4:	f107 0310 	add.w	r3, r7, #16
 80059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f00a fe81 	bl	80106d2 <memcpy>

		/* Program flash
		 ------------------------------------------------------*/
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80059d0:	2201      	movs	r2, #1
 80059d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059d6:	4834      	ldr	r0, [pc, #208]	; (8005aa8 <os_flash_write+0x22c>)
 80059d8:	f008 fe9e 	bl	800e718 <HAL_GPIO_WritePin>
		ret = HAL_FLASH_Program(writeFlag, addr, data);
 80059dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80059e0:	461a      	mov	r2, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	6a38      	ldr	r0, [r7, #32]
 80059e8:	f008 fa26 	bl	800de38 <HAL_FLASH_Program>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80059f2:	2200      	movs	r2, #0
 80059f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059f8:	482b      	ldr	r0, [pc, #172]	; (8005aa8 <os_flash_write+0x22c>)
 80059fa:	f008 fe8d 	bl	800e718 <HAL_GPIO_WritePin>
		ASSERT(ret == HAL_OK);
 80059fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <os_flash_write+0x194>
 8005a06:	2258      	movs	r2, #88	; 0x58
 8005a08:	4925      	ldr	r1, [pc, #148]	; (8005aa0 <os_flash_write+0x224>)
 8005a0a:	4826      	ldr	r0, [pc, #152]	; (8005aa4 <os_flash_write+0x228>)
 8005a0c:	f00b f93c 	bl	8010c88 <iprintf>
		if(ret != HAL_OK){
 8005a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <os_flash_write+0x1a4>
			err = 1;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 8005a1e:	e020      	b.n	8005a62 <os_flash_write+0x1e6>
		}

		/* Manipulate local vaiables
		 ------------------------------------------------------*/
		pos += (int32_t)lenToWrite; //Counts the number of bytes actually written
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a24:	4413      	add	r3, r2
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
		addr += lenToWrite; //Moves to the next address
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
		len -= lenToWrite; //reduces length
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	607b      	str	r3, [r7, #4]

		/* Wait for operation to end
		 ------------------------------------------------------*/
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8005a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a3c:	f008 fa82 	bl	800df44 <FLASH_WaitForLastOperation>
 8005a40:	4603      	mov	r3, r0
 8005a42:	77fb      	strb	r3, [r7, #31]
		ASSERT(ret == HAL_OK);
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <os_flash_write+0x1d8>
 8005a4a:	2267      	movs	r2, #103	; 0x67
 8005a4c:	4914      	ldr	r1, [pc, #80]	; (8005aa0 <os_flash_write+0x224>)
 8005a4e:	4815      	ldr	r0, [pc, #84]	; (8005aa4 <os_flash_write+0x228>)
 8005a50:	f00b f91a 	bl	8010c88 <iprintf>
		if(ret != HAL_OK){
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f43f af61 	beq.w	800591e <os_flash_write+0xa2>
			err = 1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}

	/* Lock flash again and return error or the amount of bytes
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Lock();
 8005a62:	f008 fa5f 	bl	800df24 <HAL_FLASH_Lock>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ASSERT(ret == HAL_OK);
 8005a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <os_flash_write+0x202>
 8005a74:	2271      	movs	r2, #113	; 0x71
 8005a76:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <os_flash_write+0x224>)
 8005a78:	480a      	ldr	r0, [pc, #40]	; (8005aa4 <os_flash_write+0x228>)
 8005a7a:	f00b f905 	bl	8010c88 <iprintf>
	return err == 1 ? OS_ERR_UNKNOWN : pos;
 8005a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <os_flash_write+0x210>
 8005a86:	f06f 0306 	mvn.w	r3, #6
 8005a8a:	e000      	b.n	8005a8e <os_flash_write+0x212>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	373c      	adds	r7, #60	; 0x3c
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd90      	pop	{r4, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08000000 	.word	0x08000000
 8005a9c:	08100000 	.word	0x08100000
 8005aa0:	08012550 	.word	0x08012550
 8005aa4:	0801255c 	.word	0x0801255c
 8005aa8:	40020c00 	.word	0x40020c00

08005aac <os_flash_read>:
 * @param size_t len 		: [ in] Size of the data buffer
 *
 * @return os_err_e : <0 if error. Otherwise the number of read bytes
 *
 **********************************************************************/
os_err_e os_flash_read(uint32_t addr, uint8_t buffer[], size_t len){
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]

	/* Argument check
	 ------------------------------------------------------*/
	if(len == 0) return OS_ERR_BAD_ARG;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <os_flash_read+0x18>
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	e036      	b.n	8005b32 <os_flash_read+0x86>
	if(buffer == NULL) return OS_ERR_BAD_ARG;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <os_flash_read+0x24>
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ace:	e030      	b.n	8005b32 <os_flash_read+0x86>
	if(addr < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <os_flash_read+0x90>)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d202      	bcs.n	8005ade <os_flash_read+0x32>
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	e029      	b.n	8005b32 <os_flash_read+0x86>
	if(addr >= FLASH_END_ADDR) return OS_ERR_BAD_ARG;
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <os_flash_read+0x94>)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d302      	bcc.n	8005aec <os_flash_read+0x40>
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aea:	e022      	b.n	8005b32 <os_flash_read+0x86>

	/* Check border and calculates the amout of data to read
	 ------------------------------------------------------*/
	size_t readBytes = len;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	617b      	str	r3, [r7, #20]
	if(addr + len > FLASH_END_ADDR){
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4413      	add	r3, r2
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <os_flash_read+0x94>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d907      	bls.n	8005b0c <os_flash_read+0x60>
		readBytes -= addr + len - FLASH_END_ADDR;
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <os_flash_read+0x94>)
 8005b08:	4413      	add	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
	}

	/* Copy data into buffer
	 ------------------------------------------------------*/
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b12:	480c      	ldr	r0, [pc, #48]	; (8005b44 <os_flash_read+0x98>)
 8005b14:	f008 fe00 	bl	800e718 <HAL_GPIO_WritePin>
	memcpy(buffer, (void*)addr, readBytes);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68b8      	ldr	r0, [r7, #8]
 8005b20:	f00a fdd7 	bl	80106d2 <memcpy>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8005b24:	2200      	movs	r2, #0
 8005b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b2a:	4806      	ldr	r0, [pc, #24]	; (8005b44 <os_flash_read+0x98>)
 8005b2c:	f008 fdf4 	bl	800e718 <HAL_GPIO_WritePin>

	/* Return the amount of bytes
	 ------------------------------------------------------*/
	return (int32_t)readBytes;
 8005b30:	697b      	ldr	r3, [r7, #20]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	08000000 	.word	0x08000000
 8005b40:	08100000 	.word	0x08100000
 8005b44:	40020c00 	.word	0x40020c00

08005b48 <os_flash_erase>:
 * @param uint32_t secNum   : [in] Number of sectors to erase
 *
 * @return os_err_e : <0 if error. Otherwise the number of sectors erased
 *
 **********************************************************************/
os_err_e os_flash_erase(uint32_t addrBeg, uint32_t secNum){
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]

	/* Check arguments
	 ------------------------------------------------------*/
	if(addrBeg < FLASH_BASE_ADDR) return OS_ERR_BAD_ARG;
 8005b52:	4a81      	ldr	r2, [pc, #516]	; (8005d58 <os_flash_erase+0x210>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d202      	bcs.n	8005b60 <os_flash_erase+0x18>
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	e0f6      	b.n	8005d4e <os_flash_erase+0x206>
	if(addrBeg >= FLASH_END_ADDR) return OS_ERR_BAD_ARG;
 8005b60:	4a7e      	ldr	r2, [pc, #504]	; (8005d5c <os_flash_erase+0x214>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d302      	bcc.n	8005b6e <os_flash_erase+0x26>
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	e0ef      	b.n	8005d4e <os_flash_erase+0x206>

	/* Select first sector
	 ------------------------------------------------------*/
	int firstSector = -1;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(addrBeg == 0x08000000) firstSector = FLASH_SECTOR_0;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7a:	d101      	bne.n	8005b80 <os_flash_erase+0x38>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08004000) firstSector = FLASH_SECTOR_1;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a77      	ldr	r2, [pc, #476]	; (8005d60 <os_flash_erase+0x218>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <os_flash_erase+0x44>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08008000) firstSector = FLASH_SECTOR_2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a75      	ldr	r2, [pc, #468]	; (8005d64 <os_flash_erase+0x21c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <os_flash_erase+0x50>
 8005b94:	2302      	movs	r3, #2
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x0800C000) firstSector = FLASH_SECTOR_3;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a73      	ldr	r2, [pc, #460]	; (8005d68 <os_flash_erase+0x220>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d101      	bne.n	8005ba4 <os_flash_erase+0x5c>
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08010000) firstSector = FLASH_SECTOR_4;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a71      	ldr	r2, [pc, #452]	; (8005d6c <os_flash_erase+0x224>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <os_flash_erase+0x68>
 8005bac:	2304      	movs	r3, #4
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08020000) firstSector = FLASH_SECTOR_5;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a6f      	ldr	r2, [pc, #444]	; (8005d70 <os_flash_erase+0x228>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <os_flash_erase+0x74>
 8005bb8:	2305      	movs	r3, #5
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08040000) firstSector = FLASH_SECTOR_6;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a6d      	ldr	r2, [pc, #436]	; (8005d74 <os_flash_erase+0x22c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <os_flash_erase+0x80>
 8005bc4:	2306      	movs	r3, #6
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08060000) firstSector = FLASH_SECTOR_7;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a6b      	ldr	r2, [pc, #428]	; (8005d78 <os_flash_erase+0x230>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d101      	bne.n	8005bd4 <os_flash_erase+0x8c>
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08080000) firstSector = FLASH_SECTOR_8;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a69      	ldr	r2, [pc, #420]	; (8005d7c <os_flash_erase+0x234>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <os_flash_erase+0x98>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x080A0000) firstSector = FLASH_SECTOR_9;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a67      	ldr	r2, [pc, #412]	; (8005d80 <os_flash_erase+0x238>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <os_flash_erase+0xa4>
 8005be8:	2309      	movs	r3, #9
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x080C0000) firstSector = FLASH_SECTOR_10;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a65      	ldr	r2, [pc, #404]	; (8005d84 <os_flash_erase+0x23c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d101      	bne.n	8005bf8 <os_flash_erase+0xb0>
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x080E0000) firstSector = FLASH_SECTOR_11;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a63      	ldr	r2, [pc, #396]	; (8005d88 <os_flash_erase+0x240>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d101      	bne.n	8005c04 <os_flash_erase+0xbc>
 8005c00:	230b      	movs	r3, #11
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(firstSector < 0)	return OS_ERR_BAD_ARG;
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da02      	bge.n	8005c10 <os_flash_erase+0xc8>
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e09e      	b.n	8005d4e <os_flash_erase+0x206>

	/* Wait for operation to end
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8005c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c14:	f008 f996 	bl	800df44 <FLASH_WaitForLastOperation>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8005c1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <os_flash_erase+0xe8>
 8005c26:	22d5      	movs	r2, #213	; 0xd5
 8005c28:	4958      	ldr	r1, [pc, #352]	; (8005d8c <os_flash_erase+0x244>)
 8005c2a:	4859      	ldr	r0, [pc, #356]	; (8005d90 <os_flash_erase+0x248>)
 8005c2c:	f00b f82c 	bl	8010c88 <iprintf>
	if(ret != HAL_OK)
 8005c30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <os_flash_erase+0xf6>
		return OS_ERR_UNKNOWN;
 8005c38:	f06f 0306 	mvn.w	r3, #6
 8005c3c:	e087      	b.n	8005d4e <os_flash_erase+0x206>

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
 8005c3e:	f008 f94f 	bl	800dee0 <HAL_FLASH_Unlock>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8005c48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <os_flash_erase+0x112>
 8005c50:	22dc      	movs	r2, #220	; 0xdc
 8005c52:	494e      	ldr	r1, [pc, #312]	; (8005d8c <os_flash_erase+0x244>)
 8005c54:	484e      	ldr	r0, [pc, #312]	; (8005d90 <os_flash_erase+0x248>)
 8005c56:	f00b f817 	bl	8010c88 <iprintf>
	if(ret != HAL_OK)
 8005c5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <os_flash_erase+0x120>
		return OS_ERR_UNKNOWN;
 8005c62:	f06f 0306 	mvn.w	r3, #6
 8005c66:	e072      	b.n	8005d4e <os_flash_erase+0x206>

	/* Calculates the maximum number of sectors we can erase, and cap accordingly
	 ------------------------------------------------------*/
	uint32_t sect_nb_max = (uint32_t) (11 - firstSector + 1);
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	f1c3 030c 	rsb	r3, r3, #12
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
	secNum = sect_nb_max < secNum ? sect_nb_max : secNum;
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bf28      	it	cs
 8005c78:	4613      	movcs	r3, r2
 8005c7a:	603b      	str	r3, [r7, #0]

	/* Prepare erase configuration
	 ------------------------------------------------------*/
	bool error = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint32_t SectorError;
	FLASH_EraseInitTypeDef eraseConf = {
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	2301      	movs	r3, #1
 8005c88:	613b      	str	r3, [r7, #16]
			.TypeErase    = FLASH_TYPEERASE_SECTORS, // Erase sectors, not mass erase
			.Banks	      = FLASH_BANK_1,			 // Unused outside of mass erase
			.Sector	      = (uint32_t) firstSector,	 // Inform first sector to erase
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	FLASH_EraseInitTypeDef eraseConf = {
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	2302      	movs	r3, #2
 8005c94:	61fb      	str	r3, [r7, #28]
			.VoltageRange = FLASH_VOLTAGE_RANGE_3,	 // Select voltage range
	};

	/* Erase sectors
	 ------------------------------------------------------*/
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8005c96:	2201      	movs	r2, #1
 8005c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c9c:	483d      	ldr	r0, [pc, #244]	; (8005d94 <os_flash_erase+0x24c>)
 8005c9e:	f008 fd3b 	bl	800e718 <HAL_GPIO_WritePin>
	ret = HAL_FLASHEx_Erase(&eraseConf, &SectorError);
 8005ca2:	f107 0220 	add.w	r2, r7, #32
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f008 fa77 	bl	800e1a0 <HAL_FLASHEx_Erase>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cbe:	4835      	ldr	r0, [pc, #212]	; (8005d94 <os_flash_erase+0x24c>)
 8005cc0:	f008 fd2a 	bl	800e718 <HAL_GPIO_WritePin>
	ASSERT(ret == HAL_OK);
 8005cc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <os_flash_erase+0x18e>
 8005ccc:	22f6      	movs	r2, #246	; 0xf6
 8005cce:	492f      	ldr	r1, [pc, #188]	; (8005d8c <os_flash_erase+0x244>)
 8005cd0:	482f      	ldr	r0, [pc, #188]	; (8005d90 <os_flash_erase+0x248>)
 8005cd2:	f00a ffd9 	bl	8010c88 <iprintf>
	if(ret != HAL_OK){
 8005cd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <os_flash_erase+0x19c>
		error = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	/* Wait for operation to end
	 ------------------------------------------------------*/
	ret = FLASH_WaitForLastOperation(1000);
 8005ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ce8:	f008 f92c 	bl	800df44 <FLASH_WaitForLastOperation>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8005cf2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <os_flash_erase+0x1bc>
 8005cfa:	22fe      	movs	r2, #254	; 0xfe
 8005cfc:	4923      	ldr	r1, [pc, #140]	; (8005d8c <os_flash_erase+0x244>)
 8005cfe:	4824      	ldr	r0, [pc, #144]	; (8005d90 <os_flash_erase+0x248>)
 8005d00:	f00a ffc2 	bl	8010c88 <iprintf>
	if(ret != HAL_OK){
 8005d04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <os_flash_erase+0x1ca>
		error = 1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	/* Lock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Lock();
 8005d12:	f008 f907 	bl	800df24 <HAL_FLASH_Lock>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8005d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <os_flash_erase+0x1e8>
 8005d24:	f44f 7283 	mov.w	r2, #262	; 0x106
 8005d28:	4918      	ldr	r1, [pc, #96]	; (8005d8c <os_flash_erase+0x244>)
 8005d2a:	4819      	ldr	r0, [pc, #100]	; (8005d90 <os_flash_erase+0x248>)
 8005d2c:	f00a ffac 	bl	8010c88 <iprintf>
	if(ret != HAL_OK){
 8005d30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <os_flash_erase+0x1f6>
		error = 1;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	return error == 1 ? OS_ERR_UNKNOWN : (int32_t)secNum;
 8005d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <os_flash_erase+0x204>
 8005d46:	f06f 0306 	mvn.w	r3, #6
 8005d4a:	e000      	b.n	8005d4e <os_flash_erase+0x206>
 8005d4c:	683b      	ldr	r3, [r7, #0]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3730      	adds	r7, #48	; 0x30
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	08000000 	.word	0x08000000
 8005d5c:	08100000 	.word	0x08100000
 8005d60:	08004000 	.word	0x08004000
 8005d64:	08008000 	.word	0x08008000
 8005d68:	0800c000 	.word	0x0800c000
 8005d6c:	08010000 	.word	0x08010000
 8005d70:	08020000 	.word	0x08020000
 8005d74:	08040000 	.word	0x08040000
 8005d78:	08060000 	.word	0x08060000
 8005d7c:	08080000 	.word	0x08080000
 8005d80:	080a0000 	.word	0x080a0000
 8005d84:	080c0000 	.word	0x080c0000
 8005d88:	080e0000 	.word	0x080e0000
 8005d8c:	08012550 	.word	0x08012550
 8005d90:	0801255c 	.word	0x0801255c
 8005d94:	40020c00 	.word	0x40020c00

08005d98 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bf38      	it	cc
 8005daa:	4613      	movcc	r3, r2
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bf28      	it	cs
 8005dca:	4613      	movcs	r3, r2
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	fb01 f202 	mul.w	r2, r1, r2
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	1ad3      	subs	r3, r2, r3
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	3b01      	subs	r3, #1
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff ffde 	bl	8005dd8 <lfs_aligndown>
 8005e1c:	4603      	mov	r3, r0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return (uint32_t)(32 - __builtin_clz(a-1));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	fab3 f383 	clz	r3, r3
 8005e36:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return (uint32_t)__builtin_ctz(a);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	fa93 f3a3 	rbit	r3, r3
 8005e54:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return (uint32_t)__builtin_popcount(a);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fa fa2f 	bl	80002d0 <__popcountsi2>
 8005e72:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad3      	subs	r3, r2, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 8005ea0:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ffee 	bl	8005e98 <lfs_fromle32>
 8005ebc:	4603      	mov	r3, r0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ffed 	bl	8005ec6 <lfs_frombe32>
 8005eec:	4603      	mov	r3, r0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return os_heap_alloc(size);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc fe6c 	bl	8002bdc <os_heap_alloc>
 8005f04:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    os_heap_free(p);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fc fec6 	bl	8002ca8 <os_heap_free>
#else
    (void)p;
#endif
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f04f 32ff 	mov.w	r2, #4294967295
 8005f34:	601a      	str	r2, [r3, #0]
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68d8      	ldr	r0, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	461a      	mov	r2, r3
 8005f58:	21ff      	movs	r1, #255	; 0xff
 8005f5a:	f00a fbc5 	bl	80106e8 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	601a      	str	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d208      	bcs.n	8005fa0 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8005f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f92:	441a      	add	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f98:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	f240 811b 	bls.w	80061d6 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8005fa0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005fa4:	e11c      	b.n	80061e0 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d03f      	beq.n	8006030 <lfs_bd_read+0xc0>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d13a      	bne.n	8006030 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8005fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d232      	bcs.n	8006030 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d324      	bcc.n	800601e <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fde:	1acb      	subs	r3, r1, r3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	69b8      	ldr	r0, [r7, #24]
 8005fe6:	f7ff fee7 	bl	8005db8 <lfs_min>
 8005fea:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ff6:	1acb      	subs	r3, r1, r3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	69f8      	ldr	r0, [r7, #28]
 8006000:	f00a fb67 	bl	80106d2 <memcpy>

                data += diff;
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	4413      	add	r3, r2
 800600a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800600c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	4413      	add	r3, r2
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8006014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800601c:	e0db      	b.n	80061d6 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	4619      	mov	r1, r3
 8006028:	69b8      	ldr	r0, [r7, #24]
 800602a:	f7ff fec5 	bl	8005db8 <lfs_min>
 800602e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006036:	429a      	cmp	r2, r3
 8006038:	d13a      	bne.n	80060b0 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4413      	add	r3, r2
        if (block == rcache->block &&
 8006044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006046:	429a      	cmp	r2, r3
 8006048:	d232      	bcs.n	80060b0 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006050:	429a      	cmp	r2, r3
 8006052:	d324      	bcc.n	800609e <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6859      	ldr	r1, [r3, #4]
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	1acb      	subs	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	4619      	mov	r1, r3
 8006064:	69b8      	ldr	r0, [r7, #24]
 8006066:	f7ff fea7 	bl	8005db8 <lfs_min>
 800606a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006076:	1acb      	subs	r3, r1, r3
 8006078:	4413      	add	r3, r2
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4619      	mov	r1, r3
 800607e:	69f8      	ldr	r0, [r7, #28]
 8006080:	f00a fb27 	bl	80106d2 <memcpy>

                data += diff;
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800608c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	4413      	add	r3, r2
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8006094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800609c:	e09b      	b.n	80061d6 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	69b8      	ldr	r0, [r7, #24]
 80060aa:	f7ff fe85 	bl	8005db8 <lfs_min>
 80060ae:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80060b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d336      	bcc.n	8006126 <lfs_bd_read+0x1b6>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060c4:	fb02 f201 	mul.w	r2, r2, r1
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d12b      	bne.n	8006126 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d2:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80060d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d325      	bcc.n	8006126 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	4619      	mov	r1, r3
 80060e2:	69b8      	ldr	r0, [r7, #24]
 80060e4:	f7ff fe78 	bl	8005dd8 <lfs_aligndown>
 80060e8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ee:	685c      	ldr	r4, [r3, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060fe:	47a0      	blx	r4
 8006100:	6178      	str	r0, [r7, #20]
            if (err) {
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <lfs_bd_read+0x19c>
                return err;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	e069      	b.n	80061e0 <lfs_bd_read+0x270>
            }

            data += diff;
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	4413      	add	r3, r2
 8006112:	61fb      	str	r3, [r7, #28]
            off += diff;
 8006114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	4413      	add	r3, r2
 800611a:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800611c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8006124:	e057      	b.n	80061d6 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612e:	429a      	cmp	r2, r3
 8006130:	d305      	bcc.n	800613e <lfs_bd_read+0x1ce>
 8006132:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <lfs_bd_read+0x278>)
 8006134:	4a2d      	ldr	r2, [pc, #180]	; (80061ec <lfs_bd_read+0x27c>)
 8006136:	216a      	movs	r1, #106	; 0x6a
 8006138:	482d      	ldr	r0, [pc, #180]	; (80061f0 <lfs_bd_read+0x280>)
 800613a:	f00a fa3d 	bl	80105b8 <__assert_func>
        rcache->block = block;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006142:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	4619      	mov	r1, r3
 800614c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800614e:	f7ff fe43 	bl	8005dd8 <lfs_aligndown>
 8006152:	4602      	mov	r2, r0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8006158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f7ff fe4b 	bl	8005e02 <lfs_alignup>
 800616c:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7ff fe1e 	bl	8005db8 <lfs_min>
 800617c:	4602      	mov	r2, r0
                - rcache->off,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8006182:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7ff fe13 	bl	8005db8 <lfs_min>
 8006192:	4602      	mov	r2, r0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800619c:	685c      	ldr	r4, [r3, #4]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	462b      	mov	r3, r5
 80061b6:	47a0      	blx	r4
 80061b8:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dd05      	ble.n	80061cc <lfs_bd_read+0x25c>
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <lfs_bd_read+0x284>)
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <lfs_bd_read+0x27c>)
 80061c4:	2175      	movs	r1, #117	; 0x75
 80061c6:	480a      	ldr	r0, [pc, #40]	; (80061f0 <lfs_bd_read+0x280>)
 80061c8:	f00a f9f6 	bl	80105b8 <__assert_func>
        if (err) {
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <lfs_bd_read+0x266>
            return err;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	e004      	b.n	80061e0 <lfs_bd_read+0x270>
    while (size > 0) {
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f47f aee4 	bne.w	8005fa6 <lfs_bd_read+0x36>
        }
    }

    return 0;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bdb0      	pop	{r4, r5, r7, pc}
 80061e8:	08012578 	.word	0x08012578
 80061ec:	08013000 	.word	0x08013000
 80061f0:	08012598 	.word	0x08012598
 80061f4:	080125b4 	.word	0x080125b4

080061f8 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08e      	sub	sp, #56	; 0x38
 80061fc:	af04      	add	r7, sp, #16
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800620e:	2300      	movs	r3, #0
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	e039      	b.n	8006288 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8006214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2108      	movs	r1, #8
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fdcb 	bl	8005db8 <lfs_min>
 8006222:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	1ad1      	subs	r1, r2, r3
 800622a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	4413      	add	r3, r2
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	9203      	str	r2, [sp, #12]
 8006234:	f107 0210 	add.w	r2, r7, #16
 8006238:	9202      	str	r2, [sp, #8]
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	460b      	mov	r3, r1
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fe92 	bl	8005f70 <lfs_bd_read>
 800624c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <lfs_bd_cmp+0x60>
            return res;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	e01c      	b.n	8006292 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	18d1      	adds	r1, r2, r3
 800625e:	f107 0310 	add.w	r3, r7, #16
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	4618      	mov	r0, r3
 8006266:	f00a fa25 	bl	80106b4 <memcmp>
 800626a:	61b8      	str	r0, [r7, #24]
        if (res) {
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d006      	beq.n	8006280 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	da01      	bge.n	800627c <lfs_bd_cmp+0x84>
 8006278:	2301      	movs	r3, #1
 800627a:	e00a      	b.n	8006292 <lfs_bd_cmp+0x9a>
 800627c:	2302      	movs	r3, #2
 800627e:	e008      	b.n	8006292 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
 8006288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628c:	429a      	cmp	r2, r3
 800628e:	d3c1      	bcc.n	8006214 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af04      	add	r7, sp, #16
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d061      	beq.n	8006378 <lfs_bd_flush+0xdc>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f113 0f02 	cmn.w	r3, #2
 80062bc:	d05c      	beq.n	8006378 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d305      	bcc.n	80062d8 <lfs_bd_flush+0x3c>
 80062cc:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <lfs_bd_flush+0xe8>)
 80062ce:	4a2e      	ldr	r2, [pc, #184]	; (8006388 <lfs_bd_flush+0xec>)
 80062d0:	219d      	movs	r1, #157	; 0x9d
 80062d2:	482e      	ldr	r0, [pc, #184]	; (800638c <lfs_bd_flush+0xf0>)
 80062d4:	f00a f970 	bl	80105b8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7ff fd8c 	bl	8005e02 <lfs_alignup>
 80062ea:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f0:	689c      	ldr	r4, [r3, #8]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6819      	ldr	r1, [r3, #0]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	462b      	mov	r3, r5
 8006308:	47a0      	blx	r4
 800630a:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	dd05      	ble.n	800631e <lfs_bd_flush+0x82>
 8006312:	4b1f      	ldr	r3, [pc, #124]	; (8006390 <lfs_bd_flush+0xf4>)
 8006314:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <lfs_bd_flush+0xec>)
 8006316:	21a1      	movs	r1, #161	; 0xa1
 8006318:	481c      	ldr	r0, [pc, #112]	; (800638c <lfs_bd_flush+0xf0>)
 800631a:	f00a f94d 	bl	80105b8 <__assert_func>
        if (err) {
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <lfs_bd_flush+0x8c>
            return err;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	e028      	b.n	800637a <lfs_bd_flush+0xde>
        }

        if (validate) {
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d020      	beq.n	8006370 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff fdf7 	bl	8005f24 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8006342:	69f8      	ldr	r0, [r7, #28]
 8006344:	9003      	str	r0, [sp, #12]
 8006346:	9102      	str	r1, [sp, #8]
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff ff50 	bl	80061f8 <lfs_bd_cmp>
 8006358:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da01      	bge.n	8006364 <lfs_bd_flush+0xc8>
                return res;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	e00a      	b.n	800637a <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800636a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800636e:	e004      	b.n	800637a <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff fde5 	bl	8005f42 <lfs_cache_zero>
    }

    return 0;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bdb0      	pop	{r4, r5, r7, pc}
 8006382:	bf00      	nop
 8006384:	080125c0 	.word	0x080125c0
 8006388:	0801300c 	.word	0x0801300c
 800638c:	08012598 	.word	0x08012598
 8006390:	080125b4 	.word	0x080125b4

08006394 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fdbd 	bl	8005f24 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff ff73 	bl	800629c <lfs_bd_flush>
 80063b6:	6178      	str	r0, [r7, #20]
    if (err) {
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <lfs_bd_sync+0x2e>
        return err;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	e011      	b.n	80063e6 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	dd05      	ble.n	80063e4 <lfs_bd_sync+0x50>
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <lfs_bd_sync+0x5c>)
 80063da:	4a06      	ldr	r2, [pc, #24]	; (80063f4 <lfs_bd_sync+0x60>)
 80063dc:	21c7      	movs	r1, #199	; 0xc7
 80063de:	4806      	ldr	r0, [pc, #24]	; (80063f8 <lfs_bd_sync+0x64>)
 80063e0:	f00a f8ea 	bl	80105b8 <__assert_func>
    return err;
 80063e4:	697b      	ldr	r3, [r7, #20]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	080125b4 	.word	0x080125b4
 80063f4:	0801301c 	.word	0x0801301c
 80063f8:	08012598 	.word	0x08012598

080063fc <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	f113 0f02 	cmn.w	r3, #2
 8006414:	d00b      	beq.n	800642e <lfs_bd_prog+0x32>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641e:	429a      	cmp	r2, r3
 8006420:	d305      	bcc.n	800642e <lfs_bd_prog+0x32>
 8006422:	4b47      	ldr	r3, [pc, #284]	; (8006540 <lfs_bd_prog+0x144>)
 8006424:	4a47      	ldr	r2, [pc, #284]	; (8006544 <lfs_bd_prog+0x148>)
 8006426:	21d2      	movs	r1, #210	; 0xd2
 8006428:	4847      	ldr	r0, [pc, #284]	; (8006548 <lfs_bd_prog+0x14c>)
 800642a:	f00a f8c5 	bl	80105b8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800642e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	441a      	add	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	429a      	cmp	r2, r3
 800643c:	d977      	bls.n	800652e <lfs_bd_prog+0x132>
 800643e:	4b43      	ldr	r3, [pc, #268]	; (800654c <lfs_bd_prog+0x150>)
 8006440:	4a40      	ldr	r2, [pc, #256]	; (8006544 <lfs_bd_prog+0x148>)
 8006442:	21d3      	movs	r1, #211	; 0xd3
 8006444:	4840      	ldr	r0, [pc, #256]	; (8006548 <lfs_bd_prog+0x14c>)
 8006446:	f00a f8b7 	bl	80105b8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006450:	429a      	cmp	r2, r3
 8006452:	d151      	bne.n	80064f8 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8006458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645a:	429a      	cmp	r2, r3
 800645c:	d34c      	bcc.n	80064f8 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	4413      	add	r3, r2
                off >= pcache->off &&
 800646a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646c:	429a      	cmp	r2, r3
 800646e:	d243      	bcs.n	80064f8 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6859      	ldr	r1, [r3, #4]
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800647e:	4413      	add	r3, r2
 8006480:	4619      	mov	r1, r3
 8006482:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006484:	f7ff fc98 	bl	8005db8 <lfs_min>
 8006488:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006494:	1acb      	subs	r3, r1, r3
 8006496:	4413      	add	r3, r2
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	69f9      	ldr	r1, [r7, #28]
 800649c:	4618      	mov	r0, r3
 800649e:	f00a f918 	bl	80106d2 <memcpy>

            data += diff;
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	4413      	add	r3, r2
 80064a8:	61fb      	str	r3, [r7, #28]
            off += diff;
 80064aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	4413      	add	r3, r2
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6898      	ldr	r0, [r3, #8]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	4619      	mov	r1, r3
 80064c8:	f7ff fc66 	bl	8005d98 <lfs_max>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	429a      	cmp	r2, r3
 80064de:	d126      	bne.n	800652e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff fed8 	bl	800629c <lfs_bd_flush>
 80064ec:	6178      	str	r0, [r7, #20]
                if (err) {
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01c      	beq.n	800652e <lfs_bd_prog+0x132>
                    return err;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e01e      	b.n	8006536 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d005      	beq.n	800650e <lfs_bd_prog+0x112>
 8006502:	4b13      	ldr	r3, [pc, #76]	; (8006550 <lfs_bd_prog+0x154>)
 8006504:	4a0f      	ldr	r2, [pc, #60]	; (8006544 <lfs_bd_prog+0x148>)
 8006506:	21f0      	movs	r1, #240	; 0xf0
 8006508:	480f      	ldr	r0, [pc, #60]	; (8006548 <lfs_bd_prog+0x14c>)
 800650a:	f00a f855 	bl	80105b8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006512:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	4619      	mov	r1, r3
 800651c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800651e:	f7ff fc5b 	bl	8005dd8 <lfs_aligndown>
 8006522:	4602      	mov	r2, r0
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	2b00      	cmp	r3, #0
 8006532:	d18a      	bne.n	800644a <lfs_bd_prog+0x4e>
    }

    return 0;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	080125e8 	.word	0x080125e8
 8006544:	08013028 	.word	0x08013028
 8006548:	08012598 	.word	0x08012598
 800654c:	08012624 	.word	0x08012624
 8006550:	08012648 	.word	0x08012648

08006554 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d305      	bcc.n	8006576 <lfs_bd_erase+0x22>
 800656a:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <lfs_bd_erase+0x54>)
 800656c:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <lfs_bd_erase+0x58>)
 800656e:	21fe      	movs	r1, #254	; 0xfe
 8006570:	480f      	ldr	r0, [pc, #60]	; (80065b0 <lfs_bd_erase+0x5c>)
 8006572:	f00a f821 	bl	80105b8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
 8006586:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dd06      	ble.n	800659c <lfs_bd_erase+0x48>
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <lfs_bd_erase+0x60>)
 8006590:	4a06      	ldr	r2, [pc, #24]	; (80065ac <lfs_bd_erase+0x58>)
 8006592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006596:	4806      	ldr	r0, [pc, #24]	; (80065b0 <lfs_bd_erase+0x5c>)
 8006598:	f00a f80e 	bl	80105b8 <__assert_func>
    return err;
 800659c:	68fb      	ldr	r3, [r7, #12]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	08012578 	.word	0x08012578
 80065ac:	08013034 	.word	0x08013034
 80065b0:	08012598 	.word	0x08012598
 80065b4:	080125b4 	.word	0x080125b4

080065b8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d005      	beq.n	8006600 <lfs_pair_isnull+0x1e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d101      	bne.n	8006604 <lfs_pair_isnull+0x22>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <lfs_pair_isnull+0x24>
 8006604:	2300      	movs	r3, #0
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d017      	beq.n	800665e <lfs_pair_cmp+0x46>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3304      	adds	r3, #4
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	3304      	adds	r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d00f      	beq.n	800665e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	3304      	adds	r3, #4
 8006646:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8006648:	429a      	cmp	r2, r3
 800664a:	d008      	beq.n	800665e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d001      	beq.n	800665e <lfs_pair_cmp+0x46>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <lfs_pair_cmp+0x48>
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d107      	bne.n	8006692 <lfs_pair_sync+0x26>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	3304      	adds	r3, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d00d      	beq.n	80066ae <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	3304      	adds	r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d108      	bne.n	80066b2 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d101      	bne.n	80066b2 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <lfs_pair_sync+0x48>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	b2db      	uxtb	r3, r3
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80066c6:	b590      	push	{r4, r7, lr}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fbe0 	bl	8005e98 <lfs_fromle32>
 80066d8:	4602      	mov	r2, r0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3304      	adds	r3, #4
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	1d1c      	adds	r4, r3, #4
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7ff fbd5 	bl	8005e98 <lfs_fromle32>
 80066ee:	4603      	mov	r3, r0
 80066f0:	6023      	str	r3, [r4, #0]
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80066fa:	b590      	push	{r4, r7, lr}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fbd1 	bl	8005eae <lfs_tole32>
 800670c:	4602      	mov	r2, r0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3304      	adds	r3, #4
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	1d1c      	adds	r4, r3, #4
 800671c:	4610      	mov	r0, r2
 800671e:	f7ff fbc6 	bl	8005eae <lfs_tole32>
 8006722:	4603      	mov	r3, r0
 8006724:	6023      	str	r3, [r4, #0]
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bd90      	pop	{r4, r7, pc}

0800672e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	43db      	mvns	r3, r3
 800673a:	0fdb      	lsrs	r3, r3, #31
 800673c:	b2db      	uxtb	r3, r3
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	059b      	lsls	r3, r3, #22
 8006756:	159b      	asrs	r3, r3, #22
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0d1b      	lsrs	r3, r3, #20
 800677c:	b29b      	uxth	r3, r3
 800677e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006782:	b29b      	uxth	r3, r3
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	0d1b      	lsrs	r3, r3, #20
 800679c:	b29b      	uxth	r3, r3
 800679e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067a2:	b29b      	uxth	r3, r3
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	0d1b      	lsrs	r3, r3, #20
 80067bc:	b2db      	uxtb	r3, r3
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ffec 	bl	80067b0 <lfs_tag_chunk>
 80067d8:	4603      	mov	r3, r0
 80067da:	b25b      	sxtb	r3, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f6:	b29b      	uxth	r3, r3
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff8f 	bl	800674a <lfs_tag_isdelete>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ffe5 	bl	8006804 <lfs_tag_size>
 800683a:	4603      	mov	r3, r0
 800683c:	3304      	adds	r3, #4
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e012      	b.n	800687c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	4413      	add	r3, r2
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4403      	add	r3, r0
 8006872:	404a      	eors	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b02      	cmp	r3, #2
 8006880:	dde9      	ble.n	8006856 <lfs_gstate_xor+0x10>
    }
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e00b      	b.n	80068b4 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <lfs_gstate_iszero+0x20>
            return false;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e006      	b.n	80068bc <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	ddf0      	ble.n	800689c <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80068ba:	2301      	movs	r3, #1
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff ff95 	bl	8006804 <lfs_tag_size>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff ff82 	bl	8006804 <lfs_tag_size>
 8006900:	4603      	mov	r3, r0
 8006902:	b2db      	uxtb	r3, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff29 	bl	8006770 <lfs_tag_type1>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ff15 	bl	8006770 <lfs_tag_type1>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <lfs_gstate_hasmovehere+0x30>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3304      	adds	r3, #4
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fe60 	bl	8006618 <lfs_pair_cmp>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <lfs_gstate_hasmovehere+0x30>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <lfs_gstate_hasmovehere+0x32>
 8006962:	2300      	movs	r3, #0
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	b2db      	uxtb	r3, r3
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fa8a 	bl	8005e98 <lfs_fromle32>
 8006984:	4602      	mov	r2, r0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fa82 	bl	8005e98 <lfs_fromle32>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fa7a 	bl	8005e98 <lfs_fromle32>
 80069a4:	4602      	mov	r2, r0
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	609a      	str	r2, [r3, #8]
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fa75 	bl	8005eae <lfs_tole32>
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fa6d 	bl	8005eae <lfs_tole32>
 80069d4:	4602      	mov	r2, r0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fa65 	bl	8005eae <lfs_tole32>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	609a      	str	r2, [r3, #8]
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fa4a 	bl	8005e98 <lfs_fromle32>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fa42 	bl	8005e98 <lfs_fromle32>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fa3d 	bl	8005eae <lfs_tole32>
 8006a34:	4602      	mov	r2, r0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fa35 	bl	8005eae <lfs_tole32>
 8006a44:	4602      	mov	r2, r0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	605a      	str	r2, [r3, #4]
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fa1a 	bl	8005e98 <lfs_fromle32>
 8006a64:	4602      	mov	r2, r0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fa12 	bl	8005e98 <lfs_fromle32>
 8006a74:	4602      	mov	r2, r0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fa0a 	bl	8005e98 <lfs_fromle32>
 8006a84:	4602      	mov	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fa02 	bl	8005e98 <lfs_fromle32>
 8006a94:	4602      	mov	r2, r0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff f9fa 	bl	8005e98 <lfs_fromle32>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff f9f2 	bl	8005e98 <lfs_fromle32>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	615a      	str	r2, [r3, #20]
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff f9ed 	bl	8005eae <lfs_tole32>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff f9e5 	bl	8005eae <lfs_tole32>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff f9dd 	bl	8005eae <lfs_tole32>
 8006af4:	4602      	mov	r2, r0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff f9d5 	bl	8005eae <lfs_tole32>
 8006b04:	4602      	mov	r2, r0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff f9cd 	bl	8005eae <lfs_tole32>
 8006b14:	4602      	mov	r2, r0
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff f9c5 	bl	8005eae <lfs_tole32>
 8006b24:	4602      	mov	r2, r0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	615a      	str	r2, [r3, #20]
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8006b3c:	1d3b      	adds	r3, r7, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e009      	b.n	8006b56 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d101      	bne.n	8006b50 <lfs_mlist_isopen+0x1e>
            return true;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e007      	b.n	8006b60 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f1      	bne.n	8006b42 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3328      	adds	r3, #40	; 0x28
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e00d      	b.n	8006b9a <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d105      	bne.n	8006b94 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	601a      	str	r2, [r3, #0]
            break;
 8006b92:	e006      	b.n	8006ba2 <lfs_mlist_remove+0x36>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1ed      	bne.n	8006b7e <lfs_mlist_remove+0x12>
        }
    }
}
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	4413      	add	r3, r2
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006bf4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8006bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bfa:	fb02 f201 	mul.w	r2, r2, r1
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d212      	bcs.n	8006c32 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	009a      	lsls	r2, r3, #2
 8006c16:	440a      	add	r2, r1
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	f002 021f 	and.w	r2, r2, #31
 8006c20:	2001      	movs	r0, #1
 8006c22:	fa00 f202 	lsl.w	r2, r0, r2
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4403      	add	r3, r0
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff ffe4 	bl	8006c40 <lfs_alloc_ack>
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8006c8a:	e04f      	b.n	8006d2c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c90:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca0:	1e5a      	subs	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2101      	movs	r1, #1
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d132      	bne.n	8006d2c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cd2:	6a12      	ldr	r2, [r2, #32]
 8006cd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd8:	fb02 f201 	mul.w	r2, r2, r1
 8006cdc:	1a9a      	subs	r2, r3, r2
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8006ce2:	e009      	b.n	8006cf8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf2:	1e5a      	subs	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d011      	beq.n	8006d28 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d22:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1dd      	bne.n	8006ce4 <lfs_alloc+0x64>
                }

                return 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e051      	b.n	8006dd0 <lfs_alloc+0x150>
        while (lfs->free.i != lfs->free.size) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1a9      	bne.n	8006c8c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d110      	bne.n	8006d62 <lfs_alloc+0xe2>
            LFS_ERROR("No more free space %"PRIu32,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	441a      	add	r2, r3
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <lfs_alloc+0x158>)
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	f240 2247 	movw	r2, #583	; 0x247
 8006d54:	4921      	ldr	r1, [pc, #132]	; (8006ddc <lfs_alloc+0x15c>)
 8006d56:	4822      	ldr	r0, [pc, #136]	; (8006de0 <lfs_alloc+0x160>)
 8006d58:	f009 ff96 	bl	8010c88 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8006d5c:	f06f 031b 	mvn.w	r3, #27
 8006d60:	e036      	b.n	8006dd0 <lfs_alloc+0x150>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d70:	6a12      	ldr	r2, [r2, #32]
 8006d72:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d76:	fb02 f201 	mul.w	r2, r2, r1
 8006d7a:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	00da      	lsls	r2, r3, #3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7ff f812 	bl	8005db8 <lfs_min>
 8006d94:	4602      	mov	r2, r0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	461a      	mov	r2, r3
 8006dac:	2100      	movs	r1, #0
 8006dae:	f009 fc9b 	bl	80106e8 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8006db2:	2301      	movs	r3, #1
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	490b      	ldr	r1, [pc, #44]	; (8006de4 <lfs_alloc+0x164>)
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f004 ffef 	bl	800bd9c <lfs_fs_rawtraverse>
 8006dbe:	60f8      	str	r0, [r7, #12]
        if (err) {
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f43f af61 	beq.w	8006c8a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff ff48 	bl	8006c5e <lfs_alloc_drop>
            return err;
 8006dce:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	08012694 	.word	0x08012694
 8006ddc:	08012598 	.word	0x08012598
 8006de0:	0801266c 	.word	0x0801266c
 8006de4:	08006bd3 	.word	0x08006bd3

08006de8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b08f      	sub	sp, #60	; 0x3c
 8006dec:	af04      	add	r7, sp, #16
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	333c      	adds	r3, #60	; 0x3c
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff fd8f 	bl	8006932 <lfs_gstate_hasmovehere>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80b9 	beq.w	8006f8e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fce1 	bl	80067e4 <lfs_tag_id>
 8006e22:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80b2 	beq.w	8006f8e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff fcd8 	bl	80067e4 <lfs_tag_id>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461c      	mov	r4, r3
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f7ff fcd3 	bl	80067e4 <lfs_tag_id>
 8006e3e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8006e40:	429c      	cmp	r4, r3
 8006e42:	f200 80a4 	bhi.w	8006f8e <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006e4c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8006e4e:	e09e      	b.n	8006f8e <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fce3 	bl	800681e <lfs_tag_dsize>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	9203      	str	r2, [sp, #12]
 8006e6e:	f107 0210 	add.w	r2, r7, #16
 8006e72:	9202      	str	r2, [sp, #8]
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	2100      	movs	r1, #0
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff f875 	bl	8005f70 <lfs_bd_read>
 8006e86:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <lfs_dir_getslice+0xaa>
            return err;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	e089      	b.n	8006fa6 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff f816 	bl	8005ec6 <lfs_frombe32>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4053      	eors	r3, r2
 8006ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ea4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fc9c 	bl	80067e4 <lfs_tag_id>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d02b      	beq.n	8006f0a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006eb2:	69f8      	ldr	r0, [r7, #28]
 8006eb4:	f7ff fc5c 	bl	8006770 <lfs_tag_type1>
 8006eb8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebe:	d124      	bne.n	8006f0a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8006ec0:	69f8      	ldr	r0, [r7, #28]
 8006ec2:	f7ff fc8f 	bl	80067e4 <lfs_tag_id>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461c      	mov	r4, r3
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fc87 	bl	80067e4 <lfs_tag_id>
 8006ed6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	d816      	bhi.n	8006f0a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	1ad2      	subs	r2, r2, r3
 8006ee2:	4b33      	ldr	r3, [pc, #204]	; (8006fb0 <lfs_dir_getslice+0x1c8>)
 8006ee4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8006ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d102      	bne.n	8006efa <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8006ef4:	f06f 0301 	mvn.w	r3, #1
 8006ef8:	e055      	b.n	8006fa6 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006efa:	69f8      	ldr	r0, [r7, #28]
 8006efc:	f7ff fc65 	bl	80067ca <lfs_tag_splice>
 8006f00:	4603      	mov	r3, r0
 8006f02:	029a      	lsls	r2, r3, #10
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	4413      	add	r3, r2
 8006f08:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	405a      	eors	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d138      	bne.n	8006f8e <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8006f1c:	69f8      	ldr	r0, [r7, #28]
 8006f1e:	f7ff fc14 	bl	800674a <lfs_tag_isdelete>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8006f28:	f06f 0301 	mvn.w	r3, #1
 8006f2c:	e03b      	b.n	8006fa6 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8006f2e:	69f8      	ldr	r0, [r7, #28]
 8006f30:	f7ff fc68 	bl	8006804 <lfs_tag_size>
 8006f34:	4603      	mov	r3, r0
 8006f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe ff3d 	bl	8005db8 <lfs_min>
 8006f3e:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8006f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4a:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8006f4c:	3204      	adds	r2, #4
 8006f4e:	6979      	ldr	r1, [r7, #20]
 8006f50:	9103      	str	r1, [sp, #12]
 8006f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f54:	9102      	str	r1, [sp, #8]
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff f805 	bl	8005f70 <lfs_bd_read>
 8006f66:	61b8      	str	r0, [r7, #24]
            if (err) {
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <lfs_dir_getslice+0x18a>
                return err;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	e019      	b.n	8006fa6 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8006f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	18d0      	adds	r0, r2, r3
 8006f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2100      	movs	r1, #0
 8006f82:	f009 fbb1 	bl	80106e8 <memset>

            return tag + gdiff;
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	e00b      	b.n	8006fa6 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fc44 	bl	800681e <lfs_tag_dsize>
 8006f96:	4603      	mov	r3, r0
 8006f98:	3304      	adds	r3, #4
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	f4bf af57 	bcs.w	8006e50 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8006fa2:	f06f 0301 	mvn.w	r3, #1
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	372c      	adds	r7, #44	; 0x2c
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	000ffc00 	.word	0x000ffc00

08006fb4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f7ff fc1e 	bl	8006804 <lfs_tag_size>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff ff04 	bl	8006de8 <lfs_dir_getslice>
 8006fe0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08c      	sub	sp, #48	; 0x30
 8006fee:	af04      	add	r7, sp, #16
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8006ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007000:	441a      	add	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	429a      	cmp	r2, r3
 800700a:	f240 80c0 	bls.w	800718e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800700e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007012:	e0c1      	b.n	8007198 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8007014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007016:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d03f      	beq.n	800709e <lfs_dir_getread+0xb4>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f113 0f02 	cmn.w	r3, #2
 8007026:	d13a      	bne.n	800709e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8007032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007034:	429a      	cmp	r2, r3
 8007036:	d232      	bcs.n	800709e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703e:	429a      	cmp	r2, r3
 8007040:	d324      	bcc.n	800708c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6859      	ldr	r1, [r3, #4]
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	1acb      	subs	r3, r1, r3
 800704e:	4413      	add	r3, r2
 8007050:	4619      	mov	r1, r3
 8007052:	69b8      	ldr	r0, [r7, #24]
 8007054:	f7fe feb0 	bl	8005db8 <lfs_min>
 8007058:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007064:	1acb      	subs	r3, r1, r3
 8007066:	4413      	add	r3, r2
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	4619      	mov	r1, r3
 800706c:	69f8      	ldr	r0, [r7, #28]
 800706e:	f009 fb30 	bl	80106d2 <memcpy>

                data += diff;
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	4413      	add	r3, r2
 8007078:	61fb      	str	r3, [r7, #28]
                off += diff;
 800707a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	4413      	add	r3, r2
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8007082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800708a:	e080      	b.n	800718e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	4619      	mov	r1, r3
 8007096:	69b8      	ldr	r0, [r7, #24]
 8007098:	f7fe fe8e 	bl	8005db8 <lfs_min>
 800709c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f113 0f02 	cmn.w	r3, #2
 80070a6:	d13a      	bne.n	800711e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80070b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d232      	bcs.n	800711e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070be:	429a      	cmp	r2, r3
 80070c0:	d324      	bcc.n	800710c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6859      	ldr	r1, [r3, #4]
 80070ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070cc:	1acb      	subs	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	4619      	mov	r1, r3
 80070d2:	69b8      	ldr	r0, [r7, #24]
 80070d4:	f7fe fe70 	bl	8005db8 <lfs_min>
 80070d8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070e4:	1acb      	subs	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	4619      	mov	r1, r3
 80070ec:	69f8      	ldr	r0, [r7, #28]
 80070ee:	f009 faf0 	bl	80106d2 <memcpy>

                data += diff;
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	4413      	add	r3, r2
 80070f8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80070fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	4413      	add	r3, r2
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8007102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800710a:	e040      	b.n	800718e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	4619      	mov	r1, r3
 8007116:	69b8      	ldr	r0, [r7, #24]
 8007118:	f7fe fe4e 	bl	8005db8 <lfs_min>
 800711c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	f06f 0201 	mvn.w	r2, #1
 8007124:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	4619      	mov	r1, r3
 800712e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007130:	f7fe fe52 	bl	8005dd8 <lfs_aligndown>
 8007134:	4602      	mov	r2, r0
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800713a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	441a      	add	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7fe fe5a 	bl	8005e02 <lfs_alignup>
 800714e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fe fe2d 	bl	8005db8 <lfs_min>
 800715e:	4602      	mov	r2, r0
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6889      	ldr	r1, [r1, #8]
 8007170:	9102      	str	r1, [sp, #8]
 8007172:	9201      	str	r2, [sp, #4]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7ff fe33 	bl	8006de8 <lfs_dir_getslice>
 8007182:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da01      	bge.n	800718e <lfs_dir_getread+0x1a4>
            return err;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	e004      	b.n	8007198 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800718e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	f47f af3f 	bne.w	8007014 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <lfs_dir_traverse_filter+0x1e>
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <lfs_dir_traverse_filter+0xac>)
 80071bc:	e000      	b.n	80071c0 <lfs_dir_traverse_filter+0x20>
 80071be:	4b24      	ldr	r3, [pc, #144]	; (8007250 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80071c0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	405a      	eors	r2, r3
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d014      	beq.n	80071fc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fab7 	bl	800674a <lfs_tag_isdelete>
 80071dc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	4a19      	ldr	r2, [pc, #100]	; (800724c <lfs_dir_traverse_filter+0xac>)
 80071e6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <lfs_dir_traverse_filter+0xb4>)
 80071ee:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80071f0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80071f4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d104      	bne.n	8007206 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
        return true;
 8007202:	2301      	movs	r3, #1
 8007204:	e01e      	b.n	8007244 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8007206:	68b8      	ldr	r0, [r7, #8]
 8007208:	f7ff fab2 	bl	8006770 <lfs_tag_type1>
 800720c:	4603      	mov	r3, r0
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007212:	d116      	bne.n	8007242 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8007214:	68b8      	ldr	r0, [r7, #8]
 8007216:	f7ff fae5 	bl	80067e4 <lfs_tag_id>
 800721a:	4603      	mov	r3, r0
 800721c:	461c      	mov	r4, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fade 	bl	80067e4 <lfs_tag_id>
 8007228:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800722a:	429c      	cmp	r4, r3
 800722c:	d809      	bhi.n	8007242 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800722e:	68b8      	ldr	r0, [r7, #8]
 8007230:	f7ff facb 	bl	80067ca <lfs_tag_splice>
 8007234:	4603      	mov	r3, r0
 8007236:	029a      	lsls	r2, r3, #10
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	441a      	add	r2, r3
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	601a      	str	r2, [r3, #0]
    }

    return false;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd90      	pop	{r4, r7, pc}
 800724c:	7ffffc00 	.word	0x7ffffc00
 8007250:	700ffc00 	.word	0x700ffc00
 8007254:	000ffc00 	.word	0x000ffc00

08007258 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8007258:	b590      	push	{r4, r7, lr}
 800725a:	b0b3      	sub	sp, #204	; 0xcc
 800725c:	af04      	add	r7, sp, #16
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800726c:	6838      	ldr	r0, [r7, #0]
 800726e:	f7ff fad6 	bl	800681e <lfs_tag_dsize>
 8007272:	4602      	mov	r2, r0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	441a      	add	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	429a      	cmp	r2, r3
 800727e:	d237      	bcs.n	80072f0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8007280:	6838      	ldr	r0, [r7, #0]
 8007282:	f7ff facc 	bl	800681e <lfs_tag_dsize>
 8007286:	4602      	mov	r2, r0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2204      	movs	r2, #4
 8007296:	9203      	str	r2, [sp, #12]
 8007298:	f107 021c 	add.w	r2, r7, #28
 800729c:	9202      	str	r2, [sp, #8]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	9201      	str	r2, [sp, #4]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2304      	movs	r3, #4
 80072a6:	460a      	mov	r2, r1
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7fe fe60 	bl	8005f70 <lfs_bd_read>
 80072b0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 80072b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <lfs_dir_traverse+0x6a>
                    return err;
 80072bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072c0:	e3cf      	b.n	8007a62 <lfs_dir_traverse+0x80a>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fdfe 	bl	8005ec6 <lfs_frombe32>
 80072ca:	4602      	mov	r2, r0
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	4053      	eors	r3, r2
 80072d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072d4:	61fb      	str	r3, [r7, #28]
                disk.block = dir->pair[0];
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	617b      	str	r3, [r7, #20]
                disk.off = off+sizeof(lfs_tag_t);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	61bb      	str	r3, [r7, #24]
                buffer = &disk;
 80072e2:	f107 0314 	add.w	r3, r7, #20
 80072e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                ptag = tag;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	e01b      	b.n	8007328 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80072f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd13      	ble.n	8007320 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80072f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	61fb      	str	r3, [r7, #28]
                buffer = attrs[0].buffer;
 8007300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                attrs += 1;
 800730a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800730e:	3308      	adds	r3, #8
 8007310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                attrcount -= 1;
 8007314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007318:	3b01      	subs	r3, #1
 800731a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800731e:	e003      	b.n	8007328 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                break;
 8007326:	e2bc      	b.n	80078a2 <lfs_dir_traverse+0x64a>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8007328:	4b85      	ldr	r3, [pc, #532]	; (8007540 <lfs_dir_traverse+0x2e8>)
 800732a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007334:	405a      	eors	r2, r3
 8007336:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800733a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800733e:	400b      	ands	r3, r1
 8007340:	4013      	ands	r3, r2
 8007342:	2b00      	cmp	r3, #0
 8007344:	f040 82a0 	bne.w	8007888 <lfs_dir_traverse+0x630>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8007348:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800734c:	f7ff fa4a 	bl	80067e4 <lfs_tag_id>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 80fe 	beq.w	8007554 <lfs_dir_traverse+0x2fc>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8007358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800735c:	2b02      	cmp	r3, #2
 800735e:	d906      	bls.n	800736e <lfs_dir_traverse+0x116>
 8007360:	4b78      	ldr	r3, [pc, #480]	; (8007544 <lfs_dir_traverse+0x2ec>)
 8007362:	4a79      	ldr	r2, [pc, #484]	; (8007548 <lfs_dir_traverse+0x2f0>)
 8007364:	f240 314d 	movw	r1, #845	; 0x34d
 8007368:	4878      	ldr	r0, [pc, #480]	; (800754c <lfs_dir_traverse+0x2f4>)
 800736a:	f009 f925 	bl	80105b8 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800736e:	69f9      	ldr	r1, [r7, #28]
 8007370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007374:	4613      	mov	r3, r2
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007380:	4413      	add	r3, r2
 8007382:	3b98      	subs	r3, #152	; 0x98
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800738c:	4613      	mov	r3, r2
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	1a9b      	subs	r3, r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007398:	4413      	add	r3, r2
 800739a:	3b94      	subs	r3, #148	; 0x94
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073a4:	4613      	mov	r3, r2
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80073b0:	4413      	add	r3, r2
 80073b2:	3b90      	subs	r3, #144	; 0x90
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073bc:	4613      	mov	r3, r2
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80073c8:	4413      	add	r3, r2
 80073ca:	3b8c      	subs	r3, #140	; 0x8c
 80073cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073d6:	4613      	mov	r3, r2
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80073e2:	4413      	add	r3, r2
 80073e4:	3b88      	subs	r3, #136	; 0x88
 80073e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073f0:	4613      	mov	r3, r2
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80073fc:	4413      	add	r3, r2
 80073fe:	3b84      	subs	r3, #132	; 0x84
 8007400:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800740a:	4613      	mov	r3, r2
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007416:	4413      	add	r3, r2
 8007418:	3b80      	subs	r3, #128	; 0x80
 800741a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007424:	4613      	mov	r3, r2
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007430:	4413      	add	r3, r2
 8007432:	3b7c      	subs	r3, #124	; 0x7c
 8007434:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800743e:	4613      	mov	r3, r2
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800744a:	4413      	add	r3, r2
 800744c:	3b7a      	subs	r3, #122	; 0x7a
 800744e:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007458:	4613      	mov	r3, r2
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007464:	4413      	add	r3, r2
 8007466:	3b78      	subs	r3, #120	; 0x78
 8007468:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007472:	4613      	mov	r3, r2
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800747e:	4413      	add	r3, r2
 8007480:	3b74      	subs	r3, #116	; 0x74
 8007482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800748c:	4613      	mov	r3, r2
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007498:	4413      	add	r3, r2
 800749a:	3b70      	subs	r3, #112	; 0x70
 800749c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074a6:	4613      	mov	r3, r2
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80074b2:	4413      	add	r3, r2
 80074b4:	3b6c      	subs	r3, #108	; 0x6c
 80074b6:	6019      	str	r1, [r3, #0]
 80074b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074bc:	4613      	mov	r3, r2
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80074c8:	4413      	add	r3, r2
 80074ca:	3b68      	subs	r3, #104	; 0x68
 80074cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074d6:	4613      	mov	r3, r2
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80074e2:	4413      	add	r3, r2
 80074e4:	3b68      	subs	r3, #104	; 0x68
 80074e6:	3304      	adds	r3, #4
 80074e8:	f107 0214 	add.w	r2, r7, #20
 80074ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074f0:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80074f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074f8:	3301      	adds	r3, #1
 80074fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                dir = dir;
                off = off;
                ptag = ptag;
                attrs = attrs;
                attrcount = attrcount;
                tmask = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                ttag = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                begin = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
                end = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
                diff = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
                cb = lfs_dir_traverse_filter;
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <lfs_dir_traverse+0x2f8>)
 800751e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                data = &stack[sp-1].tag;
 8007522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	f107 0120 	add.w	r1, r7, #32
 800752c:	4613      	mov	r3, r2
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	3328      	adds	r3, #40	; 0x28
 8007536:	440b      	add	r3, r1
 8007538:	3304      	adds	r3, #4
 800753a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                continue;
 800753e:	e1aa      	b.n	8007896 <lfs_dir_traverse+0x63e>
 8007540:	7ff00000 	.word	0x7ff00000
 8007544:	08012698 	.word	0x08012698
 8007548:	08013044 	.word	0x08013044
 800754c:	08012598 	.word	0x08012598
 8007550:	080071a1 	.word	0x080071a1
            }
        }

popped:
 8007554:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8007556:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800755a:	f7ff f943 	bl	80067e4 <lfs_tag_id>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d015      	beq.n	8007590 <lfs_dir_traverse+0x338>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff f93c 	bl	80067e4 <lfs_tag_id>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8007570:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8007574:	4293      	cmp	r3, r2
 8007576:	f200 8189 	bhi.w	800788c <lfs_dir_traverse+0x634>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff f931 	bl	80067e4 <lfs_tag_id>
 8007582:	4603      	mov	r3, r0
 8007584:	461a      	mov	r2, r3
 8007586:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800758a:	4293      	cmp	r3, r2
 800758c:	f240 817e 	bls.w	800788c <lfs_dir_traverse+0x634>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff f8fc 	bl	8006790 <lfs_tag_type3>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	f43f ae66 	beq.w	800726c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f8f4 	bl	8006790 <lfs_tag_type3>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	f240 1301 	movw	r3, #257	; 0x101
 80075b0:	429a      	cmp	r2, r3
 80075b2:	f040 80ed 	bne.w	8007790 <lfs_dir_traverse+0x538>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80075b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ba:	4ab7      	ldr	r2, [pc, #732]	; (8007898 <lfs_dir_traverse+0x640>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	f000 8167 	beq.w	8007890 <lfs_dir_traverse+0x638>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80075c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075c6:	4613      	mov	r3, r2
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80075d2:	4413      	add	r3, r2
 80075d4:	3b98      	subs	r3, #152	; 0x98
 80075d6:	4618      	mov	r0, r3
 80075d8:	233c      	movs	r3, #60	; 0x3c
 80075da:	461a      	mov	r2, r3
 80075dc:	2100      	movs	r1, #0
 80075de:	f009 f883 	bl	80106e8 <memset>
 80075e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075e6:	4613      	mov	r3, r2
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80075f2:	4413      	add	r3, r2
 80075f4:	3b98      	subs	r3, #152	; 0x98
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075fe:	4613      	mov	r3, r2
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800760a:	4413      	add	r3, r2
 800760c:	3b94      	subs	r3, #148	; 0x94
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007616:	4613      	mov	r3, r2
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007622:	4413      	add	r3, r2
 8007624:	3b90      	subs	r3, #144	; 0x90
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800762e:	4613      	mov	r3, r2
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800763a:	4413      	add	r3, r2
 800763c:	3b8c      	subs	r3, #140	; 0x8c
 800763e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007648:	4613      	mov	r3, r2
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007654:	4413      	add	r3, r2
 8007656:	3b88      	subs	r3, #136	; 0x88
 8007658:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007662:	4613      	mov	r3, r2
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800766e:	4413      	add	r3, r2
 8007670:	3b84      	subs	r3, #132	; 0x84
 8007672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800767c:	4613      	mov	r3, r2
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007688:	4413      	add	r3, r2
 800768a:	3b80      	subs	r3, #128	; 0x80
 800768c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007696:	4613      	mov	r3, r2
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80076a2:	4413      	add	r3, r2
 80076a4:	3b7c      	subs	r3, #124	; 0x7c
 80076a6:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076b0:	4613      	mov	r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80076bc:	4413      	add	r3, r2
 80076be:	3b7a      	subs	r3, #122	; 0x7a
 80076c0:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ca:	4613      	mov	r3, r2
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80076d6:	4413      	add	r3, r2
 80076d8:	3b78      	subs	r3, #120	; 0x78
 80076da:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076e4:	4613      	mov	r3, r2
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80076f0:	4413      	add	r3, r2
 80076f2:	3b74      	subs	r3, #116	; 0x74
 80076f4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076fe:	4613      	mov	r3, r2
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800770a:	4413      	add	r3, r2
 800770c:	3b70      	subs	r3, #112	; 0x70
 800770e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007712:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8007714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007718:	3301      	adds	r3, #1
 800771a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            uint16_t fromid = lfs_tag_size(tag);
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff f86f 	bl	8006804 <lfs_tag_size>
 8007726:	4603      	mov	r3, r0
 8007728:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            uint16_t toid = lfs_tag_id(tag);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff f858 	bl	80067e4 <lfs_tag_id>
 8007734:	4603      	mov	r3, r0
 8007736:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            dir = buffer;
 800773a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800773e:	60bb      	str	r3, [r7, #8]
            off = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8007744:	f04f 33ff 	mov.w	r3, #4294967295
 8007748:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            attrcount = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8007756:	4b51      	ldr	r3, [pc, #324]	; (800789c <lfs_dir_traverse+0x644>)
 8007758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800775c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007760:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            begin = fromid;
 8007764:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007768:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
            end = fromid+1;
 800776c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007770:	3301      	adds	r3, #1
 8007772:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
            diff = toid-fromid+diff;
 8007776:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 800777a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	b29a      	uxth	r2, r3
 8007782:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8007786:	4413      	add	r3, r2
 8007788:	b29b      	uxth	r3, r3
 800778a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 800778e:	e56d      	b.n	800726c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fffc 	bl	8006790 <lfs_tag_type3>
 8007798:	4603      	mov	r3, r0
 800779a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800779e:	d159      	bne.n	8007854 <lfs_dir_traverse+0x5fc>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077a6:	e04b      	b.n	8007840 <lfs_dir_traverse+0x5e8>
                const struct lfs_attr *a = buffer;
 80077a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80077b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077c2:	4413      	add	r3, r2
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80077ca:	051c      	lsls	r4, r3, #20
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff f808 	bl	80067e4 <lfs_tag_id>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	; 0xe0
 80077dc:	4413      	add	r3, r2
 80077de:	029b      	lsls	r3, r3, #10
 80077e0:	ea44 0103 	orr.w	r1, r4, r3
 80077e4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077e8:	4613      	mov	r3, r2
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	461a      	mov	r2, r3
 80077f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077f6:	4413      	add	r3, r2
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80077fc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007800:	4613      	mov	r3, r2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	461a      	mov	r2, r3
 800780a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780e:	4413      	add	r3, r2
 8007810:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800781a:	4798      	blx	r3
 800781c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                if (res < 0) {
 8007820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007824:	2b00      	cmp	r3, #0
 8007826:	da02      	bge.n	800782e <lfs_dir_traverse+0x5d6>
                    return res;
 8007828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800782c:	e119      	b.n	8007a62 <lfs_dir_traverse+0x80a>
                }

                if (res) {
 800782e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d12e      	bne.n	8007894 <lfs_dir_traverse+0x63c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8007836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800783a:	3301      	adds	r3, #1
 800783c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe ffde 	bl	8006804 <lfs_tag_size>
 8007848:	4602      	mov	r2, r0
 800784a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800784e:	4293      	cmp	r3, r2
 8007850:	d3aa      	bcc.n	80077a8 <lfs_dir_traverse+0x550>
 8007852:	e50b      	b.n	800726c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8007854:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	; 0xe0
 8007858:	029a      	lsls	r2, r3, #10
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	18d1      	adds	r1, r2, r3
 800785e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007866:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800786a:	4798      	blx	r3
 800786c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (res < 0) {
 8007870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007874:	2b00      	cmp	r3, #0
 8007876:	da02      	bge.n	800787e <lfs_dir_traverse+0x626>
                return res;
 8007878:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800787c:	e0f1      	b.n	8007a62 <lfs_dir_traverse+0x80a>
            }

            if (res) {
 800787e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10c      	bne.n	80078a0 <lfs_dir_traverse+0x648>
 8007886:	e4f1      	b.n	800726c <lfs_dir_traverse+0x14>
                continue;
 8007888:	bf00      	nop
 800788a:	e4ef      	b.n	800726c <lfs_dir_traverse+0x14>
            continue;
 800788c:	bf00      	nop
 800788e:	e4ed      	b.n	800726c <lfs_dir_traverse+0x14>
                continue;
 8007890:	bf00      	nop
 8007892:	e4eb      	b.n	800726c <lfs_dir_traverse+0x14>
                    break;
 8007894:	bf00      	nop
        {
 8007896:	e4e9      	b.n	800726c <lfs_dir_traverse+0x14>
 8007898:	080071a1 	.word	0x080071a1
 800789c:	600ffc00 	.word	0x600ffc00
                break;
 80078a0:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80078a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 80d9 	beq.w	8007a5e <lfs_dir_traverse+0x806>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80078ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078b0:	1e5a      	subs	r2, r3, #1
 80078b2:	4613      	mov	r3, r2
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80078be:	4413      	add	r3, r2
 80078c0:	3b98      	subs	r3, #152	; 0x98
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80078c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078ca:	1e5a      	subs	r2, r3, #1
 80078cc:	4613      	mov	r3, r2
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80078d8:	4413      	add	r3, r2
 80078da:	3b94      	subs	r3, #148	; 0x94
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80078e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078e4:	1e5a      	subs	r2, r3, #1
 80078e6:	4613      	mov	r3, r2
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80078f2:	4413      	add	r3, r2
 80078f4:	3b90      	subs	r3, #144	; 0x90
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80078fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078fe:	1e5a      	subs	r2, r3, #1
 8007900:	4613      	mov	r3, r2
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800790c:	4413      	add	r3, r2
 800790e:	3b8c      	subs	r3, #140	; 0x8c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        attrcount   = stack[sp-1].attrcount;
 8007916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800791a:	1e5a      	subs	r2, r3, #1
 800791c:	4613      	mov	r3, r2
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007928:	4413      	add	r3, r2
 800792a:	3b88      	subs	r3, #136	; 0x88
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        tmask       = stack[sp-1].tmask;
 8007932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007936:	1e5a      	subs	r2, r3, #1
 8007938:	4613      	mov	r3, r2
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	1a9b      	subs	r3, r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007944:	4413      	add	r3, r2
 8007946:	3b84      	subs	r3, #132	; 0x84
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        ttag        = stack[sp-1].ttag;
 800794e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007952:	1e5a      	subs	r2, r3, #1
 8007954:	4613      	mov	r3, r2
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007960:	4413      	add	r3, r2
 8007962:	3b80      	subs	r3, #128	; 0x80
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        begin       = stack[sp-1].begin;
 800796a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800796e:	1e5a      	subs	r2, r3, #1
 8007970:	4613      	mov	r3, r2
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800797c:	4413      	add	r3, r2
 800797e:	3b7c      	subs	r3, #124	; 0x7c
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        end         = stack[sp-1].end;
 8007986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800798a:	1e5a      	subs	r2, r3, #1
 800798c:	4613      	mov	r3, r2
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007998:	4413      	add	r3, r2
 800799a:	3b7a      	subs	r3, #122	; 0x7a
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
        diff        = stack[sp-1].diff;
 80079a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079a6:	1e5a      	subs	r2, r3, #1
 80079a8:	4613      	mov	r3, r2
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80079b4:	4413      	add	r3, r2
 80079b6:	3b78      	subs	r3, #120	; 0x78
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
        cb          = stack[sp-1].cb;
 80079be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079c2:	1e5a      	subs	r2, r3, #1
 80079c4:	4613      	mov	r3, r2
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80079d0:	4413      	add	r3, r2
 80079d2:	3b74      	subs	r3, #116	; 0x74
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        data        = stack[sp-1].data;
 80079da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079de:	1e5a      	subs	r2, r3, #1
 80079e0:	4613      	mov	r3, r2
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80079ec:	4413      	add	r3, r2
 80079ee:	3b70      	subs	r3, #112	; 0x70
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        tag         = stack[sp-1].tag;
 80079f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079fa:	1e5a      	subs	r2, r3, #1
 80079fc:	4613      	mov	r3, r2
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007a08:	4413      	add	r3, r2
 8007a0a:	3b6c      	subs	r3, #108	; 0x6c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	61fb      	str	r3, [r7, #28]
        buffer      = stack[sp-1].buffer;
 8007a10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a14:	1e5a      	subs	r2, r3, #1
 8007a16:	4613      	mov	r3, r2
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007a22:	4413      	add	r3, r2
 8007a24:	3b68      	subs	r3, #104	; 0x68
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        disk        = stack[sp-1].disk;
 8007a2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a30:	1e5a      	subs	r2, r3, #1
 8007a32:	4613      	mov	r3, r2
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007a3e:	4413      	add	r3, r2
 8007a40:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8007a44:	f107 0314 	add.w	r3, r7, #20
 8007a48:	3204      	adds	r2, #4
 8007a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a4e:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8007a52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        goto popped;
 8007a5c:	e57b      	b.n	8007556 <lfs_dir_traverse+0x2fe>
    } else {
        return res;
 8007a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	37bc      	adds	r7, #188	; 0xbc
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd90      	pop	{r4, r7, pc}
 8007a6a:	bf00      	nop

08007a6c <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b09f      	sub	sp, #124	; 0x7c
 8007a70:	af04      	add	r7, sp, #16
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7e:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d207      	bcs.n	8007a9e <lfs_dir_fetchmatch+0x32>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3304      	adds	r3, #4
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d302      	bcc.n	8007aa4 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8007a9e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007aa2:	e346      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    int r = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab4:	e056      	b.n	8007b64 <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 8007ab6:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8007ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8007ac0:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8007ac2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007ac6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ac8:	0092      	lsls	r2, r2, #2
 8007aca:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8007acc:	2104      	movs	r1, #4
 8007ace:	9103      	str	r1, [sp, #12]
 8007ad0:	9202      	str	r2, [sp, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2304      	movs	r3, #4
 8007ada:	4602      	mov	r2, r0
 8007adc:	2100      	movs	r1, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7fe fa46 	bl	8005f70 <lfs_bd_read>
 8007ae4:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8007ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007aee:	4413      	add	r3, r2
 8007af0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe f9cf 	bl	8005e98 <lfs_fromle32>
 8007afa:	4602      	mov	r2, r0
 8007afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007b04:	440b      	add	r3, r1
 8007b06:	f843 2c40 	str.w	r2, [r3, #-64]
        if (err && err != LFS_ERR_CORRUPT) {
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <lfs_dir_fetchmatch+0xb0>
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007b16:	d001      	beq.n	8007b1c <lfs_dir_fetchmatch+0xb0>
            return err;
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	e30a      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
        }

        if (err != LFS_ERR_CORRUPT &&
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007b22:	d01c      	beq.n	8007b5e <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8007b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8007b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b34:	3301      	adds	r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	bfb8      	it	lt
 8007b3e:	425b      	neglt	r3, r3
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007b46:	440b      	add	r3, r1
 8007b48:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f7fe f994 	bl	8005e7c <lfs_scmp>
 8007b54:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd01      	ble.n	8007b5e <lfs_dir_fetchmatch+0xf2>
            r = i;
 8007b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b5c:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b60:	3301      	adds	r3, #1
 8007b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	dda5      	ble.n	8007ab6 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8007b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	bfb8      	it	lt
 8007b74:	425b      	neglt	r3, r3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8007b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b84:	3301      	adds	r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	bfb8      	it	lt
 8007b8e:	425b      	neglt	r3, r3
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8007b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	bfb8      	it	lt
 8007ba6:	425b      	neglt	r3, r3
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007bae:	4413      	add	r3, r2
 8007bb0:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bc2:	e2a2      	b.n	800810a <lfs_dir_fetchmatch+0x69e>
        lfs_off_t off = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bcc:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007bd4:	4aad      	ldr	r2, [pc, #692]	; (8007e8c <lfs_dir_fetchmatch+0x420>)
 8007bd6:	f107 0320 	add.w	r3, r7, #32
 8007bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bde:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8007be2:	2300      	movs	r3, #0
 8007be4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8007be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bea:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe f95c 	bl	8005eae <lfs_tole32>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	2204      	movs	r2, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	f005 f816 	bl	800cc38 <lfs_crc>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	61fb      	str	r3, [r7, #28]
        dir->rev = lfs_fromle32(dir->rev);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe f93f 	bl	8005e98 <lfs_fromle32>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8007c20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007c22:	f7fe fdfc 	bl	800681e <lfs_tag_dsize>
 8007c26:	4602      	mov	r2, r0
 8007c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2a:	4413      	add	r3, r2
 8007c2c:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8007c2e:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8007c34:	69d8      	ldr	r0, [r3, #28]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	9203      	str	r2, [sp, #12]
 8007c3e:	f107 0218 	add.w	r2, r7, #24
 8007c42:	9202      	str	r2, [sp, #8]
 8007c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c46:	9201      	str	r2, [sp, #4]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	460a      	mov	r2, r1
 8007c4e:	2100      	movs	r1, #0
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7fe f98d 	bl	8005f70 <lfs_bd_read>
 8007c56:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8007c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <lfs_dir_fetchmatch+0x206>
                if (err == LFS_ERR_CORRUPT) {
 8007c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007c64:	d103      	bne.n	8007c6e <lfs_dir_fetchmatch+0x202>
                    // can't continue?
                    dir->erased = false;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	759a      	strb	r2, [r3, #22]
                    break;
 8007c6c:	e1d4      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
                }
                return err;
 8007c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c70:	e25f      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	f107 0118 	add.w	r1, r7, #24
 8007c78:	2204      	movs	r2, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f004 ffdc 	bl	800cc38 <lfs_crc>
 8007c80:	4603      	mov	r3, r0
 8007c82:	61fb      	str	r3, [r7, #28]
            tag = lfs_frombe32(tag) ^ ptag;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe f91d 	bl	8005ec6 <lfs_frombe32>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c90:	4053      	eors	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fd49 	bl	800672e <lfs_tag_isvalid>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f083 0301 	eor.w	r3, r3, #1
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01b      	beq.n	8007ce0 <lfs_dir_fetchmatch+0x274>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8007ca8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007caa:	f7fe fd61 	bl	8006770 <lfs_tag_type1>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007cb4:	d10d      	bne.n	8007cd2 <lfs_dir_fetchmatch+0x266>
                        dir->off % lfs->cfg->prog_size == 0);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cbe:	6992      	ldr	r2, [r2, #24]
 8007cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cc4:	fb02 f201 	mul.w	r2, r2, r1
 8007cc8:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <lfs_dir_fetchmatch+0x266>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <lfs_dir_fetchmatch+0x268>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	759a      	strb	r2, [r3, #22]
                break;
 8007cde:	e19b      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fd9b 	bl	800681e <lfs_tag_dsize>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cec:	441a      	add	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <lfs_dir_fetchmatch+0x294>
                dir->erased = false;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	759a      	strb	r2, [r3, #22]
                break;
 8007cfe:	e18b      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
            }

            ptag = tag;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fd32 	bl	8006770 <lfs_tag_type1>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007d12:	d165      	bne.n	8007de0 <lfs_dir_fetchmatch+0x374>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8007d14:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8007d1a:	69dc      	ldr	r4, [r3, #28]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d22:	3204      	adds	r2, #4
 8007d24:	2104      	movs	r1, #4
 8007d26:	9103      	str	r1, [sp, #12]
 8007d28:	f107 0114 	add.w	r1, r7, #20
 8007d2c:	9102      	str	r1, [sp, #8]
 8007d2e:	9201      	str	r2, [sp, #4]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4623      	mov	r3, r4
 8007d34:	4602      	mov	r2, r0
 8007d36:	2100      	movs	r1, #0
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7fe f919 	bl	8005f70 <lfs_bd_read>
 8007d3e:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8007d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <lfs_dir_fetchmatch+0x2ee>
                    if (err == LFS_ERR_CORRUPT) {
 8007d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d4c:	d103      	bne.n	8007d56 <lfs_dir_fetchmatch+0x2ea>
                        dir->erased = false;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2200      	movs	r2, #0
 8007d52:	759a      	strb	r2, [r3, #22]
                        break;
 8007d54:	e160      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
                    }
                    return err;
 8007d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8007d58:	e1eb      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
                }
                dcrc = lfs_fromle32(dcrc);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe f89b 	bl	8005e98 <lfs_fromle32>
 8007d62:	4603      	mov	r3, r0
 8007d64:	617b      	str	r3, [r7, #20]

                if (crc != dcrc) {
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d004      	beq.n	8007d78 <lfs_dir_fetchmatch+0x30c>
                    dir->erased = false;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	759a      	strb	r2, [r3, #22]
                    break;
 8007d74:	bf00      	nop
 8007d76:	e14f      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fd18 	bl	80067b0 <lfs_tag_chunk>
 8007d80:	4603      	mov	r3, r0
 8007d82:	07db      	lsls	r3, r3, #31
 8007d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d86:	4053      	eors	r3, r2
 8007d88:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	f107 011c 	add.w	r1, r7, #28
 8007d92:	2204      	movs	r2, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f004 ff4f 	bl	800cc38 <lfs_crc>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8007da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da2:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fd39 	bl	800681e <lfs_tag_dsize>
 8007dac:	4602      	mov	r2, r0
 8007dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db0:	441a      	add	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dba:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007dc2:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8007dc4:	6a3a      	ldr	r2, [r7, #32]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8007dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007dd6:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	e71f      	b.n	8007c20 <lfs_dir_fetchmatch+0x1b4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8007de0:	2304      	movs	r3, #4
 8007de2:	647b      	str	r3, [r7, #68]	; 0x44
 8007de4:	e02f      	b.n	8007e46 <lfs_dir_fetchmatch+0x3da>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8007de6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8007dec:	69dc      	ldr	r4, [r3, #28]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df6:	440a      	add	r2, r1
 8007df8:	2101      	movs	r1, #1
 8007dfa:	9103      	str	r1, [sp, #12]
 8007dfc:	f107 0113 	add.w	r1, r7, #19
 8007e00:	9102      	str	r1, [sp, #8]
 8007e02:	9201      	str	r2, [sp, #4]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4623      	mov	r3, r4
 8007e08:	4602      	mov	r2, r0
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7fe f8af 	bl	8005f70 <lfs_bd_read>
 8007e12:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8007e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <lfs_dir_fetchmatch+0x3c2>
                    if (err == LFS_ERR_CORRUPT) {
 8007e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e1c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007e20:	d103      	bne.n	8007e2a <lfs_dir_fetchmatch+0x3be>
                        dir->erased = false;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2200      	movs	r2, #0
 8007e26:	759a      	strb	r2, [r3, #22]
 8007e28:	e015      	b.n	8007e56 <lfs_dir_fetchmatch+0x3ea>
                        break;
                    }
                    return err;
 8007e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8007e2c:	e181      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
                }

                crc = lfs_crc(crc, &dat, 1);
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f107 0113 	add.w	r1, r7, #19
 8007e34:	2201      	movs	r2, #1
 8007e36:	4618      	mov	r0, r3
 8007e38:	f004 fefe 	bl	800cc38 <lfs_crc>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	61fb      	str	r3, [r7, #28]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8007e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e42:	3301      	adds	r3, #1
 8007e44:	647b      	str	r3, [r7, #68]	; 0x44
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fce8 	bl	800681e <lfs_tag_dsize>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d3c7      	bcc.n	8007de6 <lfs_dir_fetchmatch+0x37a>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fc89 	bl	8006770 <lfs_tag_type1>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d115      	bne.n	8007e90 <lfs_dir_fetchmatch+0x424>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fcbc 	bl	80067e4 <lfs_tag_id>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e74:	4293      	cmp	r3, r2
 8007e76:	f200 8083 	bhi.w	8007f80 <lfs_dir_fetchmatch+0x514>
                    tempcount = lfs_tag_id(tag) + 1;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe fcb1 	bl	80067e4 <lfs_tag_id>
 8007e82:	4603      	mov	r3, r0
 8007e84:	3301      	adds	r3, #1
 8007e86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e8a:	e079      	b.n	8007f80 <lfs_dir_fetchmatch+0x514>
 8007e8c:	080126d8 	.word	0x080126d8
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fc6c 	bl	8006770 <lfs_tag_type1>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e9e:	d134      	bne.n	8007f0a <lfs_dir_fetchmatch+0x49e>
                tempcount += lfs_tag_splice(tag);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fc91 	bl	80067ca <lfs_tag_splice>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8007eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eb8:	4ba0      	ldr	r3, [pc, #640]	; (800813c <lfs_dir_fetchmatch+0x6d0>)
 8007eba:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8007ebc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007ec0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d104      	bne.n	8007ed4 <lfs_dir_fetchmatch+0x468>
                    tempbesttag |= 0x80000000;
 8007eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ed2:	e055      	b.n	8007f80 <lfs_dir_fetchmatch+0x514>
                } else if (tempbesttag != -1 &&
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d051      	beq.n	8007f80 <lfs_dir_fetchmatch+0x514>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fc80 	bl	80067e4 <lfs_tag_id>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fc7a 	bl	80067e4 <lfs_tag_id>
 8007ef0:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	d844      	bhi.n	8007f80 <lfs_dir_fetchmatch+0x514>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fc66 	bl	80067ca <lfs_tag_splice>
 8007efe:	4603      	mov	r3, r0
 8007f00:	029a      	lsls	r2, r3, #10
 8007f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f04:	4413      	add	r3, r2
 8007f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f08:	e03a      	b.n	8007f80 <lfs_dir_fetchmatch+0x514>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fc2f 	bl	8006770 <lfs_tag_type1>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f18:	d132      	bne.n	8007f80 <lfs_dir_fetchmatch+0x514>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fc47 	bl	80067b0 <lfs_tag_chunk>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bf14      	ite	ne
 8007f2c:	2301      	movne	r3, #1
 8007f2e:	2300      	moveq	r3, #0
 8007f30:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8007f34:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8007f3a:	69dc      	ldr	r4, [r3, #28]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f42:	3204      	adds	r2, #4
 8007f44:	2108      	movs	r1, #8
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	f107 0120 	add.w	r1, r7, #32
 8007f4c:	9102      	str	r1, [sp, #8]
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4623      	mov	r3, r4
 8007f54:	4602      	mov	r2, r0
 8007f56:	2100      	movs	r1, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7fe f809 	bl	8005f70 <lfs_bd_read>
 8007f5e:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8007f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <lfs_dir_fetchmatch+0x50a>
                    if (err == LFS_ERR_CORRUPT) {
 8007f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f68:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007f6c:	d103      	bne.n	8007f76 <lfs_dir_fetchmatch+0x50a>
                        dir->erased = false;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	759a      	strb	r2, [r3, #22]
                        break;
 8007f74:	e050      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
                    }
                }
                lfs_pair_fromle32(temptail);
 8007f76:	f107 0320 	add.w	r3, r7, #32
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fba3 	bl	80066c6 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f84:	405a      	eors	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f47f ae48 	bne.w	8007c20 <lfs_dir_fetchmatch+0x1b4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8007f90:	69b9      	ldr	r1, [r7, #24]
                        dir->pair[0], off+sizeof(tag)});
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8007f96:	633b      	str	r3, [r7, #48]	; 0x30
                        dir->pair[0], off+sizeof(tag)});
 8007f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9a:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fa6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8007faa:	4798      	blx	r3
 8007fac:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	da09      	bge.n	8007fc8 <lfs_dir_fetchmatch+0x55c>
                    if (res == LFS_ERR_CORRUPT) {
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007fba:	d103      	bne.n	8007fc4 <lfs_dir_fetchmatch+0x558>
                        dir->erased = false;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	759a      	strb	r2, [r3, #22]
                        break;
 8007fc2:	e029      	b.n	8008018 <lfs_dir_fetchmatch+0x5ac>
                    }
                    return res;
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	e0b4      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
                }

                if (res == LFS_CMP_EQ) {
 8007fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <lfs_dir_fetchmatch+0x568>
                    // found a match
                    tempbesttag = tag;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd2:	e625      	b.n	8007c20 <lfs_dir_fetchmatch+0x1b4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd8:	405a      	eors	r2, r3
 8007fda:	4b59      	ldr	r3, [pc, #356]	; (8008140 <lfs_dir_fetchmatch+0x6d4>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <lfs_dir_fetchmatch+0x57e>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe8:	e61a      	b.n	8007c20 <lfs_dir_fetchmatch+0x1b4>
                } else if (res == LFS_CMP_GT &&
 8007fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	f47f ae17 	bne.w	8007c20 <lfs_dir_fetchmatch+0x1b4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fbf5 	bl	80067e4 <lfs_tag_id>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461c      	mov	r4, r3
 8007ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fbef 	bl	80067e4 <lfs_tag_id>
 8008006:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8008008:	429c      	cmp	r4, r3
 800800a:	f63f ae09 	bhi.w	8007c20 <lfs_dir_fetchmatch+0x1b4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008014:	64bb      	str	r3, [r7, #72]	; 0x48
 8008016:	e603      	b.n	8007c20 <lfs_dir_fetchmatch+0x1b4>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d100      	bne.n	8008022 <lfs_dir_fetchmatch+0x5b6>
 8008020:	e05d      	b.n	80080de <lfs_dir_fetchmatch+0x672>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	333c      	adds	r3, #60	; 0x3c
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fc81 	bl	8006932 <lfs_gstate_hasmovehere>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d028      	beq.n	8008088 <lfs_dir_fetchmatch+0x61c>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fbd2 	bl	80067e4 <lfs_tag_id>
 8008040:	4603      	mov	r3, r0
 8008042:	461c      	mov	r4, r3
 8008044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fbcc 	bl	80067e4 <lfs_tag_id>
 800804c:	4603      	mov	r3, r0
 800804e:	429c      	cmp	r4, r3
 8008050:	d104      	bne.n	800805c <lfs_dir_fetchmatch+0x5f0>
                    besttag |= 0x80000000;
 8008052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008058:	667b      	str	r3, [r7, #100]	; 0x64
 800805a:	e015      	b.n	8008088 <lfs_dir_fetchmatch+0x61c>
                } else if (besttag != -1 &&
 800805c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d011      	beq.n	8008088 <lfs_dir_fetchmatch+0x61c>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fbbb 	bl	80067e4 <lfs_tag_id>
 800806e:	4603      	mov	r3, r0
 8008070:	461c      	mov	r4, r3
 8008072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fbb5 	bl	80067e4 <lfs_tag_id>
 800807a:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800807c:	429c      	cmp	r4, r3
 800807e:	d203      	bcs.n	8008088 <lfs_dir_fetchmatch+0x61c>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8008080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008082:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008086:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8008088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00f      	beq.n	80080ae <lfs_dir_fetchmatch+0x642>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800808e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe fba7 	bl	80067e4 <lfs_tag_id>
 8008096:	4603      	mov	r3, r0
 8008098:	461a      	mov	r2, r3
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	8a9b      	ldrh	r3, [r3, #20]
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f7fd fe89 	bl	8005db8 <lfs_min>
 80080a6:	4603      	mov	r3, r0
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080ac:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80080ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fb3c 	bl	800672e <lfs_tag_isvalid>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <lfs_dir_fetchmatch+0x654>
                return besttag;
 80080bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080be:	e038      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80080c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fb8e 	bl	80067e4 <lfs_tag_id>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	8a9b      	ldrh	r3, [r3, #20]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d202      	bcs.n	80080da <lfs_dir_fetchmatch+0x66e>
                return LFS_ERR_NOENT;
 80080d4:	f06f 0301 	mvn.w	r3, #1
 80080d8:	e02b      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
            } else {
                return 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	e029      	b.n	8008132 <lfs_dir_fetchmatch+0x6c6>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fa69 	bl	80065b8 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 80080e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e8:	3301      	adds	r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	bfb8      	it	lt
 80080f2:	425b      	neglt	r3, r3
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80080fa:	4413      	add	r3, r2
 80080fc:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8008104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008106:	3301      	adds	r3, #1
 8008108:	65bb      	str	r3, [r7, #88]	; 0x58
 800810a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800810c:	2b01      	cmp	r3, #1
 800810e:	f77f ad59 	ble.w	8007bc4 <lfs_dir_fetchmatch+0x158>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6819      	ldr	r1, [r3, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <lfs_dir_fetchmatch+0x6d8>)
 800811c:	9201      	str	r2, [sp, #4]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	460b      	mov	r3, r1
 8008122:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8008126:	4908      	ldr	r1, [pc, #32]	; (8008148 <lfs_dir_fetchmatch+0x6dc>)
 8008128:	4808      	ldr	r0, [pc, #32]	; (800814c <lfs_dir_fetchmatch+0x6e0>)
 800812a:	f008 fdad 	bl	8010c88 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800812e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8008132:	4618      	mov	r0, r3
 8008134:	376c      	adds	r7, #108	; 0x6c
 8008136:	46bd      	mov	sp, r7
 8008138:	bd90      	pop	{r4, r7, pc}
 800813a:	bf00      	nop
 800813c:	000ffc00 	.word	0x000ffc00
 8008140:	7ffffc00 	.word	0x7ffffc00
 8008144:	08012694 	.word	0x08012694
 8008148:	08012598 	.word	0x08012598
 800814c:	080126a0 	.word	0x080126a0

08008150 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af04      	add	r7, sp, #16
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800815c:	2300      	movs	r3, #0
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	2300      	movs	r3, #0
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	2300      	movs	r3, #0
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	f04f 33ff 	mov.w	r3, #4294967295
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fc78 	bl	8007a6c <lfs_dir_fetchmatch>
 800817c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	; 0x28
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8008194:	f107 0310 	add.w	r3, r7, #16
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <lfs_dir_getgstate+0x5c>)
 800819c:	4a12      	ldr	r2, [pc, #72]	; (80081e8 <lfs_dir_getgstate+0x60>)
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7fe ff07 	bl	8006fb4 <lfs_dir_get>
 80081a6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da05      	bge.n	80081ba <lfs_dir_getgstate+0x32>
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f113 0f02 	cmn.w	r3, #2
 80081b4:	d001      	beq.n	80081ba <lfs_dir_getgstate+0x32>
        return res;
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	e00f      	b.n	80081da <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f113 0f02 	cmn.w	r3, #2
 80081c0:	d00a      	beq.n	80081d8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80081c2:	f107 0310 	add.w	r3, r7, #16
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fbd3 	bl	8006972 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fe fb37 	bl	8006846 <lfs_gstate_xor>
    }

    return 0;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	7ff0000c 	.word	0x7ff0000c
 80081e8:	7ff00000 	.word	0x7ff00000

080081ec <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008202:	4293      	cmp	r3, r2
 8008204:	d10b      	bne.n	800821e <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	4932      	ldr	r1, [pc, #200]	; (80082d4 <lfs_dir_getinfo+0xe8>)
 800820c:	461a      	mov	r2, r3
 800820e:	460b      	mov	r3, r1
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2202      	movs	r2, #2
 8008218:	701a      	strb	r2, [r3, #0]
        return 0;
 800821a:	2300      	movs	r3, #0
 800821c:	e055      	b.n	80082ca <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	029a      	lsls	r2, r3, #10
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008226:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8008228:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	4a29      	ldr	r2, [pc, #164]	; (80082d8 <lfs_dir_getinfo+0xec>)
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7fe febc 	bl	8006fb4 <lfs_dir_get>
 800823c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da01      	bge.n	8008248 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	e040      	b.n	80082ca <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe faa0 	bl	8006790 <lfs_tag_type3>
 8008250:	4603      	mov	r3, r0
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800825c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008260:	f043 0308 	orr.w	r3, r3, #8
 8008264:	f107 0214 	add.w	r2, r7, #20
 8008268:	9200      	str	r2, [sp, #0]
 800826a:	4a1c      	ldr	r2, [pc, #112]	; (80082dc <lfs_dir_getinfo+0xf0>)
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7fe fea0 	bl	8006fb4 <lfs_dir_get>
 8008274:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	da01      	bge.n	8008280 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	e024      	b.n	80082ca <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fbb4 	bl	80069f2 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fa7f 	bl	8006790 <lfs_tag_type3>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	f240 2302 	movw	r3, #514	; 0x202
 800829a:	429a      	cmp	r2, r3
 800829c:	d103      	bne.n	80082a6 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	e010      	b.n	80082c8 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe fa71 	bl	8006790 <lfs_tag_type3>
 80082ae:	4603      	mov	r3, r0
 80082b0:	461a      	mov	r2, r3
 80082b2:	f240 2301 	movw	r3, #513	; 0x201
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d106      	bne.n	80082c8 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe faa1 	bl	8006804 <lfs_tag_size>
 80082c2:	4602      	mov	r2, r0
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	605a      	str	r2, [r3, #4]
    }

    return 0;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080126e0 	.word	0x080126e0
 80082d8:	780ffc00 	.word	0x780ffc00
 80082dc:	700ffc00 	.word	0x700ffc00

080082e0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b08f      	sub	sp, #60	; 0x3c
 80082e4:	af04      	add	r7, sp, #16
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	689c      	ldr	r4, [r3, #8]
 80082fe:	68b8      	ldr	r0, [r7, #8]
 8008300:	f7fe fa80 	bl	8006804 <lfs_tag_size>
 8008304:	4603      	mov	r3, r0
 8008306:	4619      	mov	r1, r3
 8008308:	4620      	mov	r0, r4
 800830a:	f7fd fd55 	bl	8005db8 <lfs_min>
 800830e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8008310:	6a3c      	ldr	r4, [r7, #32]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	6852      	ldr	r2, [r2, #4]
 800831a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800831c:	6849      	ldr	r1, [r1, #4]
 800831e:	69b8      	ldr	r0, [r7, #24]
 8008320:	9003      	str	r0, [sp, #12]
 8008322:	9102      	str	r1, [sp, #8]
 8008324:	9201      	str	r2, [sp, #4]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	4622      	mov	r2, r4
 800832c:	2100      	movs	r1, #0
 800832e:	6a38      	ldr	r0, [r7, #32]
 8008330:	f7fd ff62 	bl	80061f8 <lfs_bd_cmp>
 8008334:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <lfs_dir_find_match+0x60>
        return res;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	e014      	b.n	800836a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	689c      	ldr	r4, [r3, #8]
 8008344:	68b8      	ldr	r0, [r7, #8]
 8008346:	f7fe fa5d 	bl	8006804 <lfs_tag_size>
 800834a:	4603      	mov	r3, r0
 800834c:	429c      	cmp	r4, r3
 800834e:	d00b      	beq.n	8008368 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	689c      	ldr	r4, [r3, #8]
 8008354:	68b8      	ldr	r0, [r7, #8]
 8008356:	f7fe fa55 	bl	8006804 <lfs_tag_size>
 800835a:	4603      	mov	r3, r0
 800835c:	429c      	cmp	r4, r3
 800835e:	d201      	bcs.n	8008364 <lfs_dir_find_match+0x84>
 8008360:	2301      	movs	r3, #1
 8008362:	e002      	b.n	800836a <lfs_dir_find_match+0x8a>
 8008364:	2302      	movs	r3, #2
 8008366:	e000      	b.n	800836a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	372c      	adds	r7, #44	; 0x2c
 800836e:	46bd      	mov	sp, r7
 8008370:	bd90      	pop	{r4, r7, pc}
	...

08008374 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b093      	sub	sp, #76	; 0x4c
 8008378:	af04      	add	r7, sp, #16
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008394:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8008396:	4b6f      	ldr	r3, [pc, #444]	; (8008554 <lfs_dir_find+0x1e0>)
 8008398:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a1a      	ldr	r2, [r3, #32]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80083aa:	496b      	ldr	r1, [pc, #428]	; (8008558 <lfs_dir_find+0x1e4>)
 80083ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80083ae:	f008 fcde 	bl	8010d6e <strspn>
 80083b2:	4602      	mov	r2, r0
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	4413      	add	r3, r2
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 80083ba:	4967      	ldr	r1, [pc, #412]	; (8008558 <lfs_dir_find+0x1e4>)
 80083bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80083be:	f008 fcc4 	bl	8010d4a <strcspn>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d105      	bne.n	80083d6 <lfs_dir_find+0x62>
 80083ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083cc:	781a      	ldrb	r2, [r3, #0]
 80083ce:	4b63      	ldr	r3, [pc, #396]	; (800855c <lfs_dir_find+0x1e8>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d00a      	beq.n	80083ec <lfs_dir_find+0x78>
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d10c      	bne.n	80083f6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80083dc:	2202      	movs	r2, #2
 80083de:	4960      	ldr	r1, [pc, #384]	; (8008560 <lfs_dir_find+0x1ec>)
 80083e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80083e2:	f008 f967 	bl	80106b4 <memcmp>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <lfs_dir_find+0x82>
            name += namelen;
 80083ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	4413      	add	r3, r2
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 80083f4:	e7d9      	b.n	80083aa <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80083f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	4413      	add	r3, r2
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8008402:	4955      	ldr	r1, [pc, #340]	; (8008558 <lfs_dir_find+0x1e4>)
 8008404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008406:	f008 fcb2 	bl	8010d6e <strspn>
 800840a:	4602      	mov	r2, r0
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	4413      	add	r3, r2
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8008412:	4951      	ldr	r1, [pc, #324]	; (8008558 <lfs_dir_find+0x1e4>)
 8008414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008416:	f008 fc98 	bl	8010d4a <strcspn>
 800841a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01d      	beq.n	800845e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d112      	bne.n	800844e <lfs_dir_find+0xda>
 8008428:	2202      	movs	r2, #2
 800842a:	494d      	ldr	r1, [pc, #308]	; (8008560 <lfs_dir_find+0x1ec>)
 800842c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800842e:	f008 f941 	bl	80106b4 <memcmp>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <lfs_dir_find+0xda>
                depth -= 1;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	3b01      	subs	r3, #1
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	d107      	bne.n	8008454 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8008444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	4413      	add	r3, r2
 800844a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800844c:	e7ad      	b.n	80083aa <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	3301      	adds	r3, #1
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8008454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	4413      	add	r3, r2
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800845c:	e7d1      	b.n	8008402 <lfs_dir_find+0x8e>
                break;
 800845e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8008460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <lfs_dir_find+0xf8>
            return tag;
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	e06e      	b.n	800854a <lfs_dir_find+0x1d6>
        }

        // update what we've found so far
        *path = name;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008470:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe f98b 	bl	8006790 <lfs_tag_type3>
 800847a:	4603      	mov	r3, r0
 800847c:	2b02      	cmp	r3, #2
 800847e:	d002      	beq.n	8008486 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8008480:	f06f 0313 	mvn.w	r3, #19
 8008484:	e061      	b.n	800854a <lfs_dir_find+0x1d6>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe f9ab 	bl	80067e4 <lfs_tag_id>
 800848e:	4603      	mov	r3, r0
 8008490:	461a      	mov	r2, r3
 8008492:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008496:	429a      	cmp	r2, r3
 8008498:	d01c      	beq.n	80084d4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe f9a1 	bl	80067e4 <lfs_tag_id>
 80084a2:	4603      	mov	r3, r0
 80084a4:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80084a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084aa:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80084b2:	9200      	str	r2, [sp, #0]
 80084b4:	4a2b      	ldr	r2, [pc, #172]	; (8008564 <lfs_dir_find+0x1f0>)
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7fe fd7b 	bl	8006fb4 <lfs_dir_get>
 80084be:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da01      	bge.n	80084ca <lfs_dir_find+0x156>
                return res;
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	e03f      	b.n	800854a <lfs_dir_find+0x1d6>
            }
            lfs_pair_fromle32(dir->tail);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3318      	adds	r3, #24
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe f8f9 	bl	80066c6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80084da:	212f      	movs	r1, #47	; 0x2f
 80084dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80084de:	f008 fc1f 	bl	8010d20 <strchr>
 80084e2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <lfs_dir_find+0x178>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	e000      	b.n	80084ee <lfs_dir_find+0x17a>
 80084ec:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	613a      	str	r2, [r7, #16]
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	617a      	str	r2, [r7, #20]
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80084fa:	f107 0210 	add.w	r2, r7, #16
 80084fe:	9203      	str	r2, [sp, #12]
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <lfs_dir_find+0x1f4>)
 8008502:	9202      	str	r2, [sp, #8]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800850e:	4622      	mov	r2, r4
 8008510:	68b9      	ldr	r1, [r7, #8]
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff faaa 	bl	8007a6c <lfs_dir_fetchmatch>
 8008518:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	da01      	bge.n	8008524 <lfs_dir_find+0x1b0>
                return tag;
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	e012      	b.n	800854a <lfs_dir_find+0x1d6>
            }

            if (tag) {
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <lfs_dir_find+0x1ca>
                break;
            }

            if (!dir->split) {
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	7ddb      	ldrb	r3, [r3, #23]
 800852e:	f083 0301 	eor.w	r3, r3, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0cd      	beq.n	80084d4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8008538:	f06f 0301 	mvn.w	r3, #1
 800853c:	e005      	b.n	800854a <lfs_dir_find+0x1d6>
                break;
 800853e:	bf00      	nop
            }
        }

        // to next name
        name += namelen;
 8008540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	4413      	add	r3, r2
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8008548:	e72f      	b.n	80083aa <lfs_dir_find+0x36>
    }
}
 800854a:	4618      	mov	r0, r3
 800854c:	373c      	adds	r7, #60	; 0x3c
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	002ffc00 	.word	0x002ffc00
 8008558:	080126e0 	.word	0x080126e0
 800855c:	080126e4 	.word	0x080126e4
 8008560:	080126e8 	.word	0x080126e8
 8008564:	700ffc00 	.word	0x700ffc00
 8008568:	080082e1 	.word	0x080082e1

0800856c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800856c:	b590      	push	{r4, r7, lr}
 800856e:	b08b      	sub	sp, #44	; 0x2c
 8008570:	af04      	add	r7, sp, #16
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f103 0010 	add.w	r0, r3, #16
 8008580:	68fc      	ldr	r4, [r7, #12]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	6852      	ldr	r2, [r2, #4]
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	9103      	str	r1, [sp, #12]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	9102      	str	r1, [sp, #8]
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	4622      	mov	r2, r4
 800859a:	4601      	mov	r1, r0
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f7fd ff2d 	bl	80063fc <lfs_bd_prog>
 80085a2:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <lfs_dir_commitprog+0x42>
        return err;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	e010      	b.n	80085d0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f004 fb3e 	bl	800cc38 <lfs_crc>
 80085bc:	4602      	mov	r2, r0
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	441a      	add	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	605a      	str	r2, [r3, #4]
    return 0;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}

080085d8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80085d8:	b590      	push	{r4, r7, lr}
 80085da:	b08f      	sub	sp, #60	; 0x3c
 80085dc:	af04      	add	r7, sp, #16
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7fe f919 	bl	800681e <lfs_tag_dsize>
 80085ec:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	441a      	add	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d902      	bls.n	8008604 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80085fe:	f06f 031b 	mvn.w	r3, #27
 8008602:	e065      	b.n	80086d0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	4053      	eors	r3, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7fd fc64 	bl	8005ede <lfs_tobe32>
 8008616:	4603      	mov	r3, r0
 8008618:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800861a:	f107 0214 	add.w	r2, r7, #20
 800861e:	2304      	movs	r3, #4
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff ffa2 	bl	800856c <lfs_dir_commitprog>
 8008628:	61f8      	str	r0, [r7, #28]
    if (err) {
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <lfs_dir_commitattr+0x5c>
        return err;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	e04d      	b.n	80086d0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	db0c      	blt.n	8008654 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	3b04      	subs	r3, #4
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f7ff ff92 	bl	800856c <lfs_dir_commitprog>
 8008648:	61f8      	str	r0, [r7, #28]
        if (err) {
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d039      	beq.n	80086c4 <lfs_dir_commitattr+0xec>
            return err;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	e03d      	b.n	80086d0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8008658:	2300      	movs	r3, #0
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
 800865c:	e02d      	b.n	80086ba <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800865e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8008660:	6a3a      	ldr	r2, [r7, #32]
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8008666:	1f1c      	subs	r4, r3, #4
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8008670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008672:	440a      	add	r2, r1
 8008674:	2101      	movs	r1, #1
 8008676:	9103      	str	r1, [sp, #12]
 8008678:	f107 0113 	add.w	r1, r7, #19
 800867c:	9102      	str	r1, [sp, #8]
 800867e:	9201      	str	r2, [sp, #4]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	4623      	mov	r3, r4
 8008684:	4602      	mov	r2, r0
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7fd fc71 	bl	8005f70 <lfs_bd_read>
 800868e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <lfs_dir_commitattr+0xc2>
                return err;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	e01a      	b.n	80086d0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800869a:	f107 0213 	add.w	r2, r7, #19
 800869e:	2301      	movs	r3, #1
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff ff62 	bl	800856c <lfs_dir_commitprog>
 80086a8:	61f8      	str	r0, [r7, #28]
            if (err) {
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <lfs_dir_commitattr+0xdc>
                return err;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	e00d      	b.n	80086d0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	3301      	adds	r3, #1
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	3b04      	subs	r3, #4
 80086be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d3cc      	bcc.n	800865e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	609a      	str	r2, [r3, #8]
    return 0;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	372c      	adds	r7, #44	; 0x2c
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd90      	pop	{r4, r7, pc}

080086d8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b097      	sub	sp, #92	; 0x5c
 80086dc:	af04      	add	r7, sp, #16
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fd fb85 	bl	8005e02 <lfs_alignup>
 80086f8:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8008702:	e0a6      	b.n	8008852 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	3304      	adds	r3, #4
 800870a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800870c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8008716:	4618      	mov	r0, r3
 8008718:	f7fd fb4e 	bl	8005db8 <lfs_min>
 800871c:	4602      	mov	r2, r0
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	4413      	add	r3, r2
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8008724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	429a      	cmp	r2, r3
 800872a:	d206      	bcs.n	800873a <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	3b08      	subs	r3, #8
 8008730:	4619      	mov	r1, r3
 8008732:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008734:	f7fd fb40 	bl	8005db8 <lfs_min>
 8008738:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800873a:	f04f 33ff 	mov.w	r3, #4294967295
 800873e:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2204      	movs	r2, #4
 8008748:	9203      	str	r2, [sp, #12]
 800874a:	f107 0214 	add.w	r2, r7, #20
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	2304      	movs	r3, #4
 8008758:	460a      	mov	r2, r1
 800875a:	2100      	movs	r1, #0
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fd fc07 	bl	8005f70 <lfs_bd_read>
 8008762:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <lfs_dir_commitcrc+0x9e>
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008770:	d001      	beq.n	8008776 <lfs_dir_commitcrc+0x9e>
            return err;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	e0e8      	b.n	8008948 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd fba4 	bl	8005ec6 <lfs_frombe32>
 800877e:	4603      	mov	r3, r0
 8008780:	43db      	mvns	r3, r3
 8008782:	0fdb      	lsrs	r3, r3, #31
 8008784:	2b00      	cmp	r3, #0
 8008786:	bf14      	ite	ne
 8008788:	2301      	movne	r3, #1
 800878a:	2300      	moveq	r3, #0
 800878c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800878e:	7efb      	ldrb	r3, [r7, #27]
 8008790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008794:	051a      	lsls	r2, r3, #20
 8008796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	1acb      	subs	r3, r1, r3
 800879c:	4313      	orrs	r3, r2
 800879e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80087a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80087a6:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	4053      	eors	r3, r2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd fb94 	bl	8005ede <lfs_tobe32>
 80087b6:	4603      	mov	r3, r0
 80087b8:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f107 010c 	add.w	r1, r7, #12
 80087c2:	2204      	movs	r2, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f004 fa37 	bl	800cc38 <lfs_crc>
 80087ca:	4602      	mov	r2, r0
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fd fb6a 	bl	8005eae <lfs_tole32>
 80087da:	4603      	mov	r3, r0
 80087dc:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f103 0010 	add.w	r0, r3, #16
 80087e4:	687c      	ldr	r4, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	6852      	ldr	r2, [r2, #4]
 80087ee:	2108      	movs	r1, #8
 80087f0:	9103      	str	r1, [sp, #12]
 80087f2:	f107 010c 	add.w	r1, r7, #12
 80087f6:	9102      	str	r1, [sp, #8]
 80087f8:	9201      	str	r2, [sp, #4]
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	2300      	movs	r3, #0
 80087fe:	4622      	mov	r2, r4
 8008800:	4601      	mov	r1, r0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fd fdfa 	bl	80063fc <lfs_bd_prog>
 8008808:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <lfs_dir_commitcrc+0x13c>
            return err;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	e099      	b.n	8008948 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8008814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	3304      	adds	r3, #4
 8008820:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd ffea 	bl	8006804 <lfs_tag_size>
 8008830:	4603      	mov	r3, r0
 8008832:	1d1a      	adds	r2, r3, #4
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	441a      	add	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800883e:	7efb      	ldrb	r3, [r7, #27]
 8008840:	07da      	lsls	r2, r3, #31
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	405a      	eors	r2, r3
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	f04f 32ff 	mov.w	r2, #4294967295
 8008850:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008858:	429a      	cmp	r2, r3
 800885a:	f63f af53 	bhi.w	8008704 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f103 0110 	add.w	r1, r3, #16
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	2300      	movs	r3, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7fd fd93 	bl	8006394 <lfs_bd_sync>
 800886e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <lfs_dir_commitcrc+0x1a2>
        return err;
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	e066      	b.n	8008948 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8008880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008882:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8008884:	e05b      	b.n	800893e <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8008886:	f04f 33ff 	mov.w	r3, #4294967295
 800888a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008890:	e030      	b.n	80088f4 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8008892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008896:	429a      	cmp	r2, r3
 8008898:	d106      	bne.n	80088a8 <lfs_dir_commitcrc+0x1d0>
 800889a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889e:	429a      	cmp	r2, r3
 80088a0:	d002      	beq.n	80088a8 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 80088a2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80088a6:	e04f      	b.n	8008948 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80088a8:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 80088aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80088b0:	1d18      	adds	r0, r3, #4
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2201      	movs	r2, #1
 80088b8:	9203      	str	r2, [sp, #12]
 80088ba:	f107 020b 	add.w	r2, r7, #11
 80088be:	9202      	str	r2, [sp, #8]
 80088c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c2:	9201      	str	r2, [sp, #4]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4603      	mov	r3, r0
 80088c8:	460a      	mov	r2, r1
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fd fb4f 	bl	8005f70 <lfs_bd_read>
 80088d2:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <lfs_dir_commitcrc+0x206>
                return err;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	e034      	b.n	8008948 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 80088de:	f107 030b 	add.w	r3, r7, #11
 80088e2:	2201      	movs	r2, #1
 80088e4:	4619      	mov	r1, r3
 80088e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e8:	f004 f9a6 	bl	800cc38 <lfs_crc>
 80088ec:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	3301      	adds	r3, #1
 80088f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	3304      	adds	r3, #4
 80088f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d3c9      	bcc.n	8008892 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8008904:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008908:	e01e      	b.n	8008948 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800890a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd fa4f 	bl	8005db8 <lfs_min>
 800891a:	4602      	mov	r2, r0
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	4413      	add	r3, r2
 8008920:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8008922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	429a      	cmp	r2, r3
 8008928:	d206      	bcs.n	8008938 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	3b08      	subs	r3, #8
 800892e:	4619      	mov	r1, r3
 8008930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008932:	f7fd fa41 	bl	8005db8 <lfs_min>
 8008936:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	3304      	adds	r3, #4
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800893e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	429a      	cmp	r2, r3
 8008944:	d39f      	bcc.n	8008886 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	374c      	adds	r7, #76	; 0x4c
 800894c:	46bd      	mov	sp, r7
 800894e:	bd90      	pop	{r4, r7, pc}

08008950 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	; 0x28
 8008954:	af04      	add	r7, sp, #16
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e016      	b.n	800898e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	3301      	adds	r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	bfb8      	it	lt
 800896c:	425b      	neglt	r3, r3
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	4413      	add	r3, r2
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7fe f982 	bl	8006c80 <lfs_alloc>
 800897c:	60f8      	str	r0, [r7, #12]
        if (err) {
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <lfs_dir_alloc+0x38>
            return err;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e058      	b.n	8008a3a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	3301      	adds	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b01      	cmp	r3, #1
 8008992:	dde5      	ble.n	8008960 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80089a4:	2104      	movs	r1, #4
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	9202      	str	r2, [sp, #8]
 80089aa:	2200      	movs	r2, #0
 80089ac:	9201      	str	r2, [sp, #4]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2304      	movs	r3, #4
 80089b2:	4602      	mov	r2, r0
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7fd fada 	bl	8005f70 <lfs_bd_read>
 80089bc:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fd fa68 	bl	8005e98 <lfs_fromle32>
 80089c8:	4602      	mov	r2, r0
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <lfs_dir_alloc+0x90>
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80089da:	d001      	beq.n	80089e0 <lfs_dir_alloc+0x90>
        return err;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	e02c      	b.n	8008a3a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd0e      	ble.n	8008a08 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	3301      	adds	r3, #1
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7fd fa00 	bl	8005e02 <lfs_alignup>
 8008a02:	4602      	mov	r2, r0
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f04f 32ff 	mov.w	r2, #4294967295
 8008a14:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3348      	adds	r3, #72	; 0x48
 8008a54:	461a      	mov	r2, r3
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fb95 	bl	8008188 <lfs_dir_getgstate>
 8008a5e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <lfs_dir_drop+0x26>
        return err;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	e022      	b.n	8008ab0 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3318      	adds	r3, #24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fd fe43 	bl	80066fa <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7ddb      	ldrb	r3, [r3, #23]
 8008a78:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008a7c:	051a      	lsls	r2, r3, #20
 8008a7e:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <lfs_dir_drop+0x74>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3318      	adds	r3, #24
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	f107 0214 	add.w	r2, r7, #20
 8008a8e:	2301      	movs	r3, #1
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f001 f95c 	bl	8009d50 <lfs_dir_commit>
 8008a98:	61f8      	str	r0, [r7, #28]
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3318      	adds	r3, #24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fd fe11 	bl	80066c6 <lfs_pair_fromle32>
    if (err) {
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <lfs_dir_drop+0x6a>
        return err;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	e000      	b.n	8008ab0 <lfs_dir_drop+0x6c>
    }

    return 0;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3720      	adds	r7, #32
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	000ffc08 	.word	0x000ffc08

08008abc <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b092      	sub	sp, #72	; 0x48
 8008ac0:	af04      	add	r7, sp, #16
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8008aca:	f107 0310 	add.w	r3, r7, #16
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff ff3d 	bl	8008950 <lfs_dir_alloc>
 8008ad6:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8008ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <lfs_dir_split+0x26>
        return err;
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	e03c      	b.n	8008b5c <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	7ddb      	ldrb	r3, [r3, #23]
 8008ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8008af6:	f107 0110 	add.w	r1, r7, #16
 8008afa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f87a 	bl	8008c08 <lfs_dir_compact>
 8008b14:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da01      	bge.n	8008b20 <lfs_dir_split+0x64>
        return res;
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	e01d      	b.n	8008b5c <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3320      	adds	r3, #32
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f7fd fd6c 	bl	8006618 <lfs_pair_cmp>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <lfs_dir_split+0x9e>
 8008b46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d105      	bne.n	8008b5a <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3738      	adds	r7, #56	; 0x38
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8008b74:	68b8      	ldr	r0, [r7, #8]
 8008b76:	f7fd fe52 	bl	800681e <lfs_tag_dsize>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	441a      	add	r2, r3
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	601a      	str	r2, [r3, #0]
    return 0;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6859      	ldr	r1, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	f7ff fd14 	bl	80085d8 <lfs_dir_commitattr>
 8008bb0:	4603      	mov	r3, r0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dd11      	ble.n	8008bf2 <lfs_dir_needsrelocation+0x38>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bda:	3201      	adds	r2, #1
 8008bdc:	f042 0201 	orr.w	r2, r2, #1
 8008be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008be4:	fb02 f201 	mul.w	r2, r2, r1
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <lfs_dir_needsrelocation+0x38>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <lfs_dir_needsrelocation+0x3a>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	b2db      	uxtb	r3, r3
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b0a0      	sub	sp, #128	; 0x80
 8008c0c:	af0a      	add	r7, sp, #40	; 0x28
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8008c16:	2300      	movs	r3, #0
 8008c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff ffcb 	bl	8008bba <lfs_dir_needsrelocation>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

    // increment revision count
    dir->rev += 1;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8008c34:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00e      	beq.n	8008c5a <lfs_dir_compact+0x52>
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
 8008c42:	2301      	movs	r3, #1
 8008c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f7fd fce3 	bl	8006618 <lfs_pair_cmp>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f040 8155 	bne.w	8008f04 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
 8008c64:	f04f 33ff 	mov.w	r3, #4294967295
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c70:	2300      	movs	r3, #0
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d004      	beq.n	8008c88 <lfs_dir_compact+0x80>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c84:	3b08      	subs	r3, #8
 8008c86:	e003      	b.n	8008c90 <lfs_dir_compact+0x88>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8008c90:	633b      	str	r3, [r7, #48]	; 0x30
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	4619      	mov	r1, r3
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7fd fc5b 	bl	8006554 <lfs_bd_erase>
 8008c9e:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 8008ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d006      	beq.n	8008cb4 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8008ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008cac:	f000 812c 	beq.w	8008f08 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8008cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb2:	e189      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fd f8f8 	bl	8005eae <lfs_tole32>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8008cca:	f107 011c 	add.w	r1, r7, #28
 8008cce:	2304      	movs	r3, #4
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff fc4b 	bl	800856c <lfs_dir_commitprog>
 8008cd6:	64f8      	str	r0, [r7, #76]	; 0x4c
            dir->rev = lfs_fromle32(dir->rev);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fd f8db 	bl	8005e98 <lfs_fromle32>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	609a      	str	r2, [r3, #8]
            if (err) {
 8008ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d006      	beq.n	8008cfc <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8008cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008cf4:	f000 810a 	beq.w	8008f0c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8008cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfa:	e165      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8008cfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008d00:	425b      	negs	r3, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d0a:	f107 021c 	add.w	r2, r7, #28
 8008d0e:	643a      	str	r2, [r7, #64]	; 0x40
            err = lfs_dir_traverse(lfs,
 8008d10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008d14:	9208      	str	r2, [sp, #32]
 8008d16:	4aae      	ldr	r2, [pc, #696]	; (8008fd0 <lfs_dir_compact+0x3c8>)
 8008d18:	9207      	str	r2, [sp, #28]
 8008d1a:	9306      	str	r3, [sp, #24]
 8008d1c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	4ba9      	ldr	r3, [pc, #676]	; (8008fd4 <lfs_dir_compact+0x3cc>)
 8008d2e:	9302      	str	r3, [sp, #8]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7fe fa89 	bl	8007258 <lfs_dir_traverse>
 8008d46:	64f8      	str	r0, [r7, #76]	; 0x4c
                        lfs, &commit});
            if (err) {
 8008d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d006      	beq.n	8008d5c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8008d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d50:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008d54:	f000 80dc 	beq.w	8008f10 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8008d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5a:	e135      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	3318      	adds	r3, #24
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fd fc3e 	bl	80065e2 <lfs_pair_isnull>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f083 0301 	eor.w	r3, r3, #1
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d022      	beq.n	8008db8 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	3318      	adds	r3, #24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fd fcbf 	bl	80066fa <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	7ddb      	ldrb	r3, [r3, #23]
 8008d80:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008d84:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8008d86:	4a94      	ldr	r2, [pc, #592]	; (8008fd8 <lfs_dir_compact+0x3d0>)
 8008d88:	431a      	orrs	r2, r3
                        dir->tail);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8008d8e:	f107 011c 	add.w	r1, r7, #28
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fc20 	bl	80085d8 <lfs_dir_commitattr>
 8008d98:	64f8      	str	r0, [r7, #76]	; 0x4c
                lfs_pair_fromle32(dir->tail);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3318      	adds	r3, #24
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fd fc91 	bl	80066c6 <lfs_pair_fromle32>
                if (err) {
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8008daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008db0:	f000 80b0 	beq.w	8008f14 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8008db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db6:	e107      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8008dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dc8:	f083 0301 	eor.w	r3, r3, #1
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d011      	beq.n	8008df6 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fd fd31 	bl	8006846 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008dea:	f107 0310 	add.w	r3, r7, #16
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fd fd28 	bl	8006846 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008dfc:	f107 0310 	add.w	r3, r7, #16
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fd fd1f 	bl	8006846 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	613b      	str	r3, [r7, #16]

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff f9b3 	bl	8008188 <lfs_dir_getgstate>
 8008e22:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 8008e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <lfs_dir_compact+0x226>
                return err;
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2c:	e0cc      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8008e2e:	f107 0310 	add.w	r3, r7, #16
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd fd2b 	bl	800688e <lfs_gstate_iszero>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f083 0301 	eor.w	r3, r3, #1
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d016      	beq.n	8008e72 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8008e44:	f107 0310 	add.w	r3, r7, #16
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fd fdb2 	bl	80069b2 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8008e4e:	f107 0310 	add.w	r3, r7, #16
 8008e52:	f107 011c 	add.w	r1, r7, #28
 8008e56:	4a61      	ldr	r2, [pc, #388]	; (8008fdc <lfs_dir_compact+0x3d4>)
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff fbbd 	bl	80085d8 <lfs_dir_commitattr>
 8008e5e:	64f8      	str	r0, [r7, #76]	; 0x4c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8008e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8008e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e68:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008e6c:	d054      	beq.n	8008f18 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8008e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e70:	e0aa      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8008e72:	f107 031c 	add.w	r3, r7, #28
 8008e76:	4619      	mov	r1, r3
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fc2d 	bl	80086d8 <lfs_dir_commitcrc>
 8008e7e:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 8008e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8008e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e88:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008e8c:	d046      	beq.n	8008f1c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8008e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e90:	e09a      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e98:	6992      	ldr	r2, [r2, #24]
 8008e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e9e:	fb02 f201 	mul.w	r2, r2, r1
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d006      	beq.n	8008eb6 <lfs_dir_compact+0x2ae>
 8008ea8:	4b4d      	ldr	r3, [pc, #308]	; (8008fe0 <lfs_dir_compact+0x3d8>)
 8008eaa:	4a4e      	ldr	r2, [pc, #312]	; (8008fe4 <lfs_dir_compact+0x3dc>)
 8008eac:	f240 714b 	movw	r1, #1867	; 0x74b
 8008eb0:	484d      	ldr	r0, [pc, #308]	; (8008fe8 <lfs_dir_compact+0x3e0>)
 8008eb2:	f007 fb81 	bl	80105b8 <__assert_func>
            lfs_pair_swap(dir->pair);
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fd fb7d 	bl	80065b8 <lfs_pair_swap>
            dir->count = end - begin;
 8008ebe:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8008ec2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3348      	adds	r3, #72	; 0x48
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	605a      	str	r2, [r3, #4]
 8008ee4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8008ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eea:	f083 0301 	eor.w	r3, r3, #1
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d066      	beq.n	8008fc2 <lfs_dir_compact+0x3ba>
                lfs->gdisk = lfs->gstate;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	333c      	adds	r3, #60	; 0x3c
 8008efa:	3230      	adds	r2, #48	; 0x30
 8008efc:	ca07      	ldmia	r2, {r0, r1, r2}
 8008efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8008f02:	e05e      	b.n	8008fc2 <lfs_dir_compact+0x3ba>
        goto relocate;
 8008f04:	bf00      	nop
 8008f06:	e00a      	b.n	8008f1e <lfs_dir_compact+0x316>
                    goto relocate;
 8008f08:	bf00      	nop
 8008f0a:	e008      	b.n	8008f1e <lfs_dir_compact+0x316>
                    goto relocate;
 8008f0c:	bf00      	nop
 8008f0e:	e006      	b.n	8008f1e <lfs_dir_compact+0x316>
                    goto relocate;
 8008f10:	bf00      	nop
 8008f12:	e004      	b.n	8008f1e <lfs_dir_compact+0x316>
                        goto relocate;
 8008f14:	bf00      	nop
 8008f16:	e002      	b.n	8008f1e <lfs_dir_compact+0x316>
                        goto relocate;
 8008f18:	bf00      	nop
 8008f1a:	e000      	b.n	8008f1e <lfs_dir_compact+0x316>
                    goto relocate;
 8008f1c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        lfs_cache_drop(lfs, &lfs->pcache);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3310      	adds	r3, #16
 8008f28:	4619      	mov	r1, r3
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7fc fffa 	bl	8005f24 <lfs_cache_drop>
        if (!tired) {
 8008f30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008f34:	f083 0301 	eor.w	r3, r3, #1
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <lfs_dir_compact+0x34c>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <lfs_dir_compact+0x3e4>)
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	4613      	mov	r3, r2
 8008f48:	f240 725d 	movw	r2, #1885	; 0x75d
 8008f4c:	4926      	ldr	r1, [pc, #152]	; (8008fe8 <lfs_dir_compact+0x3e0>)
 8008f4e:	4828      	ldr	r0, [pc, #160]	; (8008ff0 <lfs_dir_compact+0x3e8>)
 8008f50:	f007 fe9a 	bl	8010c88 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	2300      	movs	r3, #0
 8008f58:	647b      	str	r3, [r7, #68]	; 0x44
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008f62:	4619      	mov	r1, r3
 8008f64:	4610      	mov	r0, r2
 8008f66:	f7fd fb57 	bl	8006618 <lfs_pair_cmp>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10d      	bne.n	8008f8c <lfs_dir_compact+0x384>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <lfs_dir_compact+0x3e4>)
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	f240 7263 	movw	r2, #1891	; 0x763
 8008f7e:	491a      	ldr	r1, [pc, #104]	; (8008fe8 <lfs_dir_compact+0x3e0>)
 8008f80:	481c      	ldr	r0, [pc, #112]	; (8008ff4 <lfs_dir_compact+0x3ec>)
 8008f82:	f007 fe81 	bl	8010c88 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8008f86:	f06f 031b 	mvn.w	r3, #27
 8008f8a:	e01d      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7fd fe74 	bl	8006c80 <lfs_alloc>
 8008f98:	6538      	str	r0, [r7, #80]	; 0x50
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8008f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00c      	beq.n	8008fba <lfs_dir_compact+0x3b2>
 8008fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa2:	f113 0f1c 	cmn.w	r3, #28
 8008fa6:	d106      	bne.n	8008fb6 <lfs_dir_compact+0x3ae>
 8008fa8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008fac:	f083 0301 	eor.w	r3, r3, #1
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <lfs_dir_compact+0x3b2>
            return err;
 8008fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb8:	e006      	b.n	8008fc8 <lfs_dir_compact+0x3c0>
        }

        tired = false;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    while (true) {
 8008fc0:	e64b      	b.n	8008c5a <lfs_dir_compact+0x52>
        break;
 8008fc2:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8008fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3758      	adds	r7, #88	; 0x58
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	08008b91 	.word	0x08008b91
 8008fd4:	400ffc00 	.word	0x400ffc00
 8008fd8:	000ffc08 	.word	0x000ffc08
 8008fdc:	7ffffc0c 	.word	0x7ffffc0c
 8008fe0:	080126ec 	.word	0x080126ec
 8008fe4:	08013058 	.word	0x08013058
 8008fe8:	08012598 	.word	0x08012598
 8008fec:	08012694 	.word	0x08012694
 8008ff0:	08012714 	.word	0x08012714
 8008ff4:	08012738 	.word	0x08012738

08008ff8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b097      	sub	sp, #92	; 0x5c
 8008ffc:	af0a      	add	r7, sp, #40	; 0x28
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8009006:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 800900c:	e058      	b.n	80090c0 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	613b      	str	r3, [r7, #16]
            int err = lfs_dir_traverse(lfs,
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	b29b      	uxth	r3, r3
 8009016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009018:	b292      	uxth	r2, r2
 800901a:	4252      	negs	r2, r2
 800901c:	b292      	uxth	r2, r2
 800901e:	b212      	sxth	r2, r2
 8009020:	f107 0110 	add.w	r1, r7, #16
 8009024:	9108      	str	r1, [sp, #32]
 8009026:	4979      	ldr	r1, [pc, #484]	; (800920c <lfs_dir_splittingcompact+0x214>)
 8009028:	9107      	str	r1, [sp, #28]
 800902a:	9206      	str	r2, [sp, #24]
 800902c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009030:	9205      	str	r2, [sp, #20]
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	2300      	movs	r3, #0
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	4b75      	ldr	r3, [pc, #468]	; (8009210 <lfs_dir_splittingcompact+0x218>)
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	f04f 33ff 	mov.w	r3, #4294967295
 8009048:	2200      	movs	r2, #0
 800904a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7fe f903 	bl	8007258 <lfs_dir_traverse>
 8009052:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <lfs_dir_splittingcompact+0x66>
                return err;
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	e0d2      	b.n	8009204 <lfs_dir_splittingcompact+0x20c>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 800905e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2bfe      	cmp	r3, #254	; 0xfe
 8009068:	d822      	bhi.n	80090b0 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	e003      	b.n	8009090 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800908c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800908e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8009094:	6992      	ldr	r2, [r2, #24]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7fc feb2 	bl	8005e02 <lfs_alignup>
 800909e:	4603      	mov	r3, r0
 80090a0:	4619      	mov	r1, r3
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7fc fe88 	bl	8005db8 <lfs_min>
 80090a8:	4602      	mov	r2, r0
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d20e      	bcs.n	80090ce <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80090b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090bc:	4413      	add	r3, r2
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80090c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d8a0      	bhi.n	800900e <lfs_dir_splittingcompact+0x16>
 80090cc:	e000      	b.n	80090d0 <lfs_dir_splittingcompact+0xd8>
                break;
 80090ce:	bf00      	nop
        }

        if (split == begin) {
 80090d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80090d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d02d      	beq.n	8009136 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	b29b      	uxth	r3, r3
 80090de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80090e2:	9202      	str	r2, [sp, #8]
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff fce3 	bl	8008abc <lfs_dir_split>
 80090f6:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <lfs_dir_splittingcompact+0x112>
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	f113 0f1c 	cmn.w	r3, #28
 8009104:	d001      	beq.n	800910a <lfs_dir_splittingcompact+0x112>
            return err;
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	e07c      	b.n	8009204 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00e      	beq.n	800912e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a3e      	ldr	r2, [pc, #248]	; (8009214 <lfs_dir_splittingcompact+0x21c>)
 800911a:	9201      	str	r2, [sp, #4]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	460b      	mov	r3, r1
 8009120:	f240 72ad 	movw	r2, #1965	; 0x7ad
 8009124:	493c      	ldr	r1, [pc, #240]	; (8009218 <lfs_dir_splittingcompact+0x220>)
 8009126:	483d      	ldr	r0, [pc, #244]	; (800921c <lfs_dir_splittingcompact+0x224>)
 8009128:	f007 fdae 	bl	8010c88 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800912c:	e004      	b.n	8009138 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8009134:	e767      	b.n	8009006 <lfs_dir_splittingcompact+0xe>
            break;
 8009136:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fd3d 	bl	8008bba <lfs_dir_needsrelocation>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d04f      	beq.n	80091e6 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	2301      	movs	r3, #1
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	f107 0314 	add.w	r3, r7, #20
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f7fd fa5e 	bl	8006618 <lfs_pair_cmp>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d141      	bne.n	80091e6 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f003 face 	bl	800c704 <lfs_fs_rawsize>
 8009168:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	2b00      	cmp	r3, #0
 800916e:	da01      	bge.n	8009174 <lfs_dir_splittingcompact+0x17c>
            return size;
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	e047      	b.n	8009204 <lfs_dir_splittingcompact+0x20c>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	085a      	lsrs	r2, r3, #1
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	429a      	cmp	r2, r3
 8009180:	d931      	bls.n	80091e6 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	4b23      	ldr	r3, [pc, #140]	; (8009214 <lfs_dir_splittingcompact+0x21c>)
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	4613      	mov	r3, r2
 800918c:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8009190:	4921      	ldr	r1, [pc, #132]	; (8009218 <lfs_dir_splittingcompact+0x220>)
 8009192:	4823      	ldr	r0, [pc, #140]	; (8009220 <lfs_dir_splittingcompact+0x228>)
 8009194:	f007 fd78 	bl	8010c88 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8009198:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff fc84 	bl	8008abc <lfs_dir_split>
 80091b4:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <lfs_dir_splittingcompact+0x1d0>
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f113 0f1c 	cmn.w	r3, #28
 80091c2:	d001      	beq.n	80091c8 <lfs_dir_splittingcompact+0x1d0>
                return err;
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	e01d      	b.n	8009204 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d007      	beq.n	80091de <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80091ce:	4b11      	ldr	r3, [pc, #68]	; (8009214 <lfs_dir_splittingcompact+0x21c>)
 80091d0:	f240 72ca 	movw	r2, #1994	; 0x7ca
 80091d4:	4910      	ldr	r1, [pc, #64]	; (8009218 <lfs_dir_splittingcompact+0x220>)
 80091d6:	4813      	ldr	r0, [pc, #76]	; (8009224 <lfs_dir_splittingcompact+0x22c>)
 80091d8:	f007 fd56 	bl	8010c88 <iprintf>
 80091dc:	e003      	b.n	80091e6 <lfs_dir_splittingcompact+0x1ee>
            } else {
                end = begin;
 80091de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80091e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80091e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fd03 	bl	8008c08 <lfs_dir_compact>
 8009202:	4603      	mov	r3, r0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3734      	adds	r7, #52	; 0x34
 8009208:	46bd      	mov	sp, r7
 800920a:	bd90      	pop	{r4, r7, pc}
 800920c:	08008b65 	.word	0x08008b65
 8009210:	400ffc00 	.word	0x400ffc00
 8009214:	08012694 	.word	0x08012694
 8009218:	08012598 	.word	0x08012598
 800921c:	08012770 	.word	0x08012770
 8009220:	080127a0 	.word	0x080127a0
 8009224:	080127d4 	.word	0x080127d4

08009228 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b0a4      	sub	sp, #144	; 0x90
 800922c:	af0a      	add	r7, sp, #40	; 0x28
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
    int state = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	667b      	str	r3, [r7, #100]	; 0x64

    // calculate changes to the directory
    bool hasdelete = false;
 800923a:	2300      	movs	r3, #0
 800923c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    for (int i = 0; i < attrcount; i++) {
 8009240:	2300      	movs	r3, #0
 8009242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009244:	e06d      	b.n	8009322 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8009246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4413      	add	r3, r2
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f7fd fa9d 	bl	8006790 <lfs_tag_type3>
 8009256:	4603      	mov	r3, r0
 8009258:	461a      	mov	r2, r3
 800925a:	f240 4301 	movw	r3, #1025	; 0x401
 800925e:	429a      	cmp	r2, r3
 8009260:	d106      	bne.n	8009270 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	8a9b      	ldrh	r3, [r3, #20]
 8009266:	3301      	adds	r3, #1
 8009268:	b29a      	uxth	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	829a      	strh	r2, [r3, #20]
 800926e:	e055      	b.n	800931c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8009270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	4413      	add	r3, r2
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f7fd fa88 	bl	8006790 <lfs_tag_type3>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8009288:	429a      	cmp	r2, r3
 800928a:	d114      	bne.n	80092b6 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	8a9b      	ldrh	r3, [r3, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d106      	bne.n	80092a2 <lfs_dir_relocatingcommit+0x7a>
 8009294:	4ba1      	ldr	r3, [pc, #644]	; (800951c <lfs_dir_relocatingcommit+0x2f4>)
 8009296:	4aa2      	ldr	r2, [pc, #648]	; (8009520 <lfs_dir_relocatingcommit+0x2f8>)
 8009298:	f240 71e2 	movw	r1, #2018	; 0x7e2
 800929c:	48a1      	ldr	r0, [pc, #644]	; (8009524 <lfs_dir_relocatingcommit+0x2fc>)
 800929e:	f007 f98b 	bl	80105b8 <__assert_func>
            dir->count -= 1;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	8a9b      	ldrh	r3, [r3, #20]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80092ae:	2301      	movs	r3, #1
 80092b0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80092b4:	e032      	b.n	800931c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80092b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	4413      	add	r3, r2
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fd fa55 	bl	8006770 <lfs_tag_type1>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092cc:	d126      	bne.n	800931c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80092ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	4413      	add	r3, r2
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80092de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4413      	add	r3, r2
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80092ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4413      	add	r3, r2
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fd fa59 	bl	80067b0 <lfs_tag_chunk>
 80092fe:	4603      	mov	r3, r0
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	bf14      	ite	ne
 8009308:	2301      	movne	r3, #1
 800930a:	2300      	moveq	r3, #0
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	3318      	adds	r3, #24
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd f9d5 	bl	80066c6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800931c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800931e:	3301      	adds	r3, #1
 8009320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009322:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009326:	429a      	cmp	r2, r3
 8009328:	db8d      	blt.n	8009246 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800932a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800932e:	2b00      	cmp	r3, #0
 8009330:	d028      	beq.n	8009384 <lfs_dir_relocatingcommit+0x15c>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	8a9b      	ldrh	r3, [r3, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d124      	bne.n	8009384 <lfs_dir_relocatingcommit+0x15c>
        LFS_ASSERT(pdir);
 800933a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d106      	bne.n	800934e <lfs_dir_relocatingcommit+0x126>
 8009340:	4b79      	ldr	r3, [pc, #484]	; (8009528 <lfs_dir_relocatingcommit+0x300>)
 8009342:	4a77      	ldr	r2, [pc, #476]	; (8009520 <lfs_dir_relocatingcommit+0x2f8>)
 8009344:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8009348:	4876      	ldr	r0, [pc, #472]	; (8009524 <lfs_dir_relocatingcommit+0x2fc>)
 800934a:	f007 f935 	bl	80105b8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009352:	4619      	mov	r1, r3
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f002 fe49 	bl	800bfec <lfs_fs_pred>
 800935a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err && err != LFS_ERR_NOENT) {
 800935c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <lfs_dir_relocatingcommit+0x146>
 8009362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009364:	f113 0f02 	cmn.w	r3, #2
 8009368:	d001      	beq.n	800936e <lfs_dir_relocatingcommit+0x146>
            return err;
 800936a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936c:	e1f8      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009370:	f113 0f02 	cmn.w	r3, #2
 8009374:	d006      	beq.n	8009384 <lfs_dir_relocatingcommit+0x15c>
 8009376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009378:	7ddb      	ldrb	r3, [r3, #23]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <lfs_dir_relocatingcommit+0x15c>
            state = LFS_OK_DROPPED;
 800937e:	2302      	movs	r3, #2
 8009380:	667b      	str	r3, [r7, #100]	; 0x64
            goto fixmlist;
 8009382:	e118      	b.n	80095b6 <lfs_dir_relocatingcommit+0x38e>
        }
    }

    if (dir->erased) {
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	7d9b      	ldrb	r3, [r3, #22]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80f9 	beq.w	8009580 <lfs_dir_relocatingcommit+0x358>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8009392:	623b      	str	r3, [r7, #32]
            .off = dir->off,
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
            .ptag = dir->etag,
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
 80093a0:	f04f 33ff 	mov.w	r3, #4294967295
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            .crc = 0xffffffff,

            .begin = dir->off,
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80093aa:	633b      	str	r3, [r7, #48]	; 0x30
            .end = (lfs->cfg->metadata_max ?
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <lfs_dir_relocatingcommit+0x198>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093bc:	3b08      	subs	r3, #8
 80093be:	e003      	b.n	80093c8 <lfs_dir_relocatingcommit+0x1a0>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80093c8:	637b      	str	r3, [r7, #52]	; 0x34
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	3318      	adds	r3, #24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd f993 	bl	80066fa <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	643b      	str	r3, [r7, #64]	; 0x40
 80093e0:	f107 0320 	add.w	r3, r7, #32
 80093e4:	647b      	str	r3, [r7, #68]	; 0x44
        int err = lfs_dir_traverse(lfs,
 80093e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80093ea:	9308      	str	r3, [sp, #32]
 80093ec:	4b4f      	ldr	r3, [pc, #316]	; (800952c <lfs_dir_relocatingcommit+0x304>)
 80093ee:	9307      	str	r3, [sp, #28]
 80093f0:	2300      	movs	r3, #0
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	2300      	movs	r3, #0
 80093f6:	9305      	str	r3, [sp, #20]
 80093f8:	2300      	movs	r3, #0
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	2300      	movs	r3, #0
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	460b      	mov	r3, r1
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f7fd ff21 	bl	8007258 <lfs_dir_traverse>
 8009416:	64f8      	str	r0, [r7, #76]	; 0x4c
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	3318      	adds	r3, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f7fd f952 	bl	80066c6 <lfs_pair_fromle32>
        if (err) {
 8009422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <lfs_dir_relocatingcommit+0x218>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8009428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942a:	f113 0f1c 	cmn.w	r3, #28
 800942e:	f000 80a8 	beq.w	8009582 <lfs_dir_relocatingcommit+0x35a>
 8009432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009434:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8009438:	f000 80a3 	beq.w	8009582 <lfs_dir_relocatingcommit+0x35a>
                goto compact;
            }
            return err;
 800943c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800943e:	e18f      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8009440:	f107 0314 	add.w	r3, r7, #20
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	605a      	str	r2, [r3, #4]
 800944a:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009452:	f107 0314 	add.w	r3, r7, #20
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f7fd f9f4 	bl	8006846 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009464:	f107 0314 	add.w	r3, r7, #20
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7fd f9eb 	bl	8006846 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8009476:	f107 0314 	add.w	r3, r7, #20
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd f9e2 	bl	8006846 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	617b      	str	r3, [r7, #20]
        if (!lfs_gstate_iszero(&delta)) {
 800948e:	f107 0314 	add.w	r3, r7, #20
 8009492:	4618      	mov	r0, r3
 8009494:	f7fd f9fb 	bl	800688e <lfs_gstate_iszero>
 8009498:	4603      	mov	r3, r0
 800949a:	f083 0301 	eor.w	r3, r3, #1
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d027      	beq.n	80094f4 <lfs_dir_relocatingcommit+0x2cc>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80094a4:	f107 0314 	add.w	r3, r7, #20
 80094a8:	461a      	mov	r2, r3
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7fe fe6b 	bl	8008188 <lfs_dir_getgstate>
 80094b2:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 80094b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <lfs_dir_relocatingcommit+0x296>
                return err;
 80094ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094bc:	e150      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
            }

            lfs_gstate_tole32(&delta);
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fd fa75 	bl	80069b2 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80094c8:	f107 0314 	add.w	r3, r7, #20
 80094cc:	f107 0120 	add.w	r1, r7, #32
 80094d0:	4a17      	ldr	r2, [pc, #92]	; (8009530 <lfs_dir_relocatingcommit+0x308>)
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff f880 	bl	80085d8 <lfs_dir_commitattr>
 80094d8:	64f8      	str	r0, [r7, #76]	; 0x4c
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80094da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <lfs_dir_relocatingcommit+0x2cc>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80094e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e2:	f113 0f1c 	cmn.w	r3, #28
 80094e6:	d04c      	beq.n	8009582 <lfs_dir_relocatingcommit+0x35a>
 80094e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80094ee:	d048      	beq.n	8009582 <lfs_dir_relocatingcommit+0x35a>
                    goto compact;
                }
                return err;
 80094f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f2:	e135      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80094f4:	f107 0320 	add.w	r3, r7, #32
 80094f8:	4619      	mov	r1, r3
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff f8ec 	bl	80086d8 <lfs_dir_commitcrc>
 8009500:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8009502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d015      	beq.n	8009534 <lfs_dir_relocatingcommit+0x30c>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8009508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800950a:	f113 0f1c 	cmn.w	r3, #28
 800950e:	d038      	beq.n	8009582 <lfs_dir_relocatingcommit+0x35a>
 8009510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009512:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8009516:	d034      	beq.n	8009582 <lfs_dir_relocatingcommit+0x35a>
                goto compact;
            }
            return err;
 8009518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951a:	e121      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
 800951c:	08012800 	.word	0x08012800
 8009520:	08013068 	.word	0x08013068
 8009524:	08012598 	.word	0x08012598
 8009528:	08012810 	.word	0x08012810
 800952c:	08008b91 	.word	0x08008b91
 8009530:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800953a:	6992      	ldr	r2, [r2, #24]
 800953c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009540:	fb02 f201 	mul.w	r2, r2, r1
 8009544:	1a9b      	subs	r3, r3, r2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <lfs_dir_relocatingcommit+0x330>
 800954a:	4b87      	ldr	r3, [pc, #540]	; (8009768 <lfs_dir_relocatingcommit+0x540>)
 800954c:	4a87      	ldr	r2, [pc, #540]	; (800976c <lfs_dir_relocatingcommit+0x544>)
 800954e:	f640 0139 	movw	r1, #2105	; 0x839
 8009552:	4887      	ldr	r0, [pc, #540]	; (8009770 <lfs_dir_relocatingcommit+0x548>)
 8009554:	f007 f830 	bl	80105b8 <__assert_func>
        dir->off = commit.off;
 8009558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800955e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	333c      	adds	r3, #60	; 0x3c
 800956a:	3230      	adds	r2, #48	; 0x30
 800956c:	ca07      	ldmia	r2, {r0, r1, r2}
 800956e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3348      	adds	r3, #72	; 0x48
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	605a      	str	r2, [r3, #4]
 800957c:	609a      	str	r2, [r3, #8]
 800957e:	e01a      	b.n	80095b6 <lfs_dir_relocatingcommit+0x38e>

        goto fixmlist;
    }

compact:
 8009580:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3310      	adds	r3, #16
 8009586:	4619      	mov	r1, r3
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7fc fccb 	bl	8005f24 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	8a9b      	ldrh	r3, [r3, #20]
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	2300      	movs	r3, #0
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7ff fd28 	bl	8008ff8 <lfs_dir_splittingcompact>
 80095a8:	6678      	str	r0, [r7, #100]	; 0x64
            dir, 0, dir->count);
    if (state < 0) {
 80095aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da01      	bge.n	80095b4 <lfs_dir_relocatingcommit+0x38c>
        return state;
 80095b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095b2:	e0d5      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
    }

    goto fixmlist;
 80095b4:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80095c8:	e0c5      	b.n	8009756 <lfs_dir_relocatingcommit+0x52e>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80095ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095cc:	3308      	adds	r3, #8
 80095ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80095d2:	4611      	mov	r1, r2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fd f81f 	bl	8006618 <lfs_pair_cmp>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f040 80b7 	bne.w	8009750 <lfs_dir_relocatingcommit+0x528>
            d->m = *dir;
 80095e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	f103 0408 	add.w	r4, r3, #8
 80095ea:	4615      	mov	r5, r2
 80095ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80095f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80095f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095fa:	3308      	adds	r3, #8
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	429a      	cmp	r2, r3
 8009600:	f000 809c 	beq.w	800973c <lfs_dir_relocatingcommit+0x514>
                for (int i = 0; i < attrcount; i++) {
 8009604:	2300      	movs	r3, #0
 8009606:	657b      	str	r3, [r7, #84]	; 0x54
 8009608:	e07b      	b.n	8009702 <lfs_dir_relocatingcommit+0x4da>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800960a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4413      	add	r3, r2
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4618      	mov	r0, r3
 8009616:	f7fd f8bb 	bl	8006790 <lfs_tag_type3>
 800961a:	4603      	mov	r3, r0
 800961c:	461a      	mov	r2, r3
 800961e:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8009622:	429a      	cmp	r2, r3
 8009624:	d115      	bne.n	8009652 <lfs_dir_relocatingcommit+0x42a>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8009626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009628:	889c      	ldrh	r4, [r3, #4]
 800962a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	4413      	add	r3, r2
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f7fd f8d5 	bl	80067e4 <lfs_tag_id>
 800963a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800963c:	429c      	cmp	r4, r3
 800963e:	d108      	bne.n	8009652 <lfs_dir_relocatingcommit+0x42a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8009640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009642:	f04f 32ff 	mov.w	r2, #4294967295
 8009646:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8009648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800964a:	f04f 32ff 	mov.w	r2, #4294967295
 800964e:	60da      	str	r2, [r3, #12]
 8009650:	e054      	b.n	80096fc <lfs_dir_relocatingcommit+0x4d4>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8009652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	4413      	add	r3, r2
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f7fd f897 	bl	8006790 <lfs_tag_type3>
 8009662:	4603      	mov	r3, r0
 8009664:	461a      	mov	r2, r3
 8009666:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800966a:	429a      	cmp	r2, r3
 800966c:	d11c      	bne.n	80096a8 <lfs_dir_relocatingcommit+0x480>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800966e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009670:	889c      	ldrh	r4, [r3, #4]
 8009672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4413      	add	r3, r2
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	f7fd f8b1 	bl	80067e4 <lfs_tag_id>
 8009682:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8009684:	429c      	cmp	r4, r3
 8009686:	d90f      	bls.n	80096a8 <lfs_dir_relocatingcommit+0x480>
                        d->id -= 1;
 8009688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800968a:	889b      	ldrh	r3, [r3, #4]
 800968c:	3b01      	subs	r3, #1
 800968e:	b29a      	uxth	r2, r3
 8009690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009692:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8009694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009696:	799b      	ldrb	r3, [r3, #6]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d12f      	bne.n	80096fc <lfs_dir_relocatingcommit+0x4d4>
                            ((lfs_dir_t*)d)->pos -= 1;
 800969c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a0:	1e5a      	subs	r2, r3, #1
 80096a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a4:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80096a6:	e029      	b.n	80096fc <lfs_dir_relocatingcommit+0x4d4>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80096a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	4413      	add	r3, r2
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fd f86c 	bl	8006790 <lfs_tag_type3>
 80096b8:	4603      	mov	r3, r0
 80096ba:	461a      	mov	r2, r3
 80096bc:	f240 4301 	movw	r3, #1025	; 0x401
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d11b      	bne.n	80096fc <lfs_dir_relocatingcommit+0x4d4>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80096c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096c6:	889c      	ldrh	r4, [r3, #4]
 80096c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	4413      	add	r3, r2
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fd f886 	bl	80067e4 <lfs_tag_id>
 80096d8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80096da:	429c      	cmp	r4, r3
 80096dc:	d30e      	bcc.n	80096fc <lfs_dir_relocatingcommit+0x4d4>
                        d->id += 1;
 80096de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096e0:	889b      	ldrh	r3, [r3, #4]
 80096e2:	3301      	adds	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096e8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80096ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ec:	799b      	ldrb	r3, [r3, #6]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d104      	bne.n	80096fc <lfs_dir_relocatingcommit+0x4d4>
                            ((lfs_dir_t*)d)->pos += 1;
 80096f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80096fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fe:	3301      	adds	r3, #1
 8009700:	657b      	str	r3, [r7, #84]	; 0x54
 8009702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009706:	429a      	cmp	r2, r3
 8009708:	f6ff af7f 	blt.w	800960a <lfs_dir_relocatingcommit+0x3e2>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800970c:	e016      	b.n	800973c <lfs_dir_relocatingcommit+0x514>
                // we split and id is on tail now
                d->id -= d->m.count;
 800970e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009710:	889a      	ldrh	r2, [r3, #4]
 8009712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009714:	8b9b      	ldrh	r3, [r3, #28]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	b29a      	uxth	r2, r3
 800971a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800971c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800971e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009720:	f103 0108 	add.w	r1, r3, #8
 8009724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009726:	3320      	adds	r3, #32
 8009728:	461a      	mov	r2, r3
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7fe fd10 	bl	8008150 <lfs_dir_fetch>
 8009730:	64b8      	str	r0, [r7, #72]	; 0x48
                if (err) {
 8009732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <lfs_dir_relocatingcommit+0x514>
                    return err;
 8009738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973a:	e011      	b.n	8009760 <lfs_dir_relocatingcommit+0x538>
            while (d->id >= d->m.count && d->m.split) {
 800973c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800973e:	889a      	ldrh	r2, [r3, #4]
 8009740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009742:	8b9b      	ldrh	r3, [r3, #28]
 8009744:	429a      	cmp	r2, r3
 8009746:	d303      	bcc.n	8009750 <lfs_dir_relocatingcommit+0x528>
 8009748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800974a:	7fdb      	ldrb	r3, [r3, #31]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1de      	bne.n	800970e <lfs_dir_relocatingcommit+0x4e6>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8009750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	65bb      	str	r3, [r7, #88]	; 0x58
 8009756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009758:	2b00      	cmp	r3, #0
 800975a:	f47f af36 	bne.w	80095ca <lfs_dir_relocatingcommit+0x3a2>
                }
            }
        }
    }

    return state;
 800975e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8009760:	4618      	mov	r0, r3
 8009762:	3768      	adds	r7, #104	; 0x68
 8009764:	46bd      	mov	sp, r7
 8009766:	bdb0      	pop	{r4, r5, r7, pc}
 8009768:	080126ec 	.word	0x080126ec
 800976c:	08013068 	.word	0x08013068
 8009770:	08012598 	.word	0x08012598

08009774 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8009774:	b5b0      	push	{r4, r5, r7, lr}
 8009776:	b0b2      	sub	sp, #200	; 0xc8
 8009778:	af04      	add	r7, sp, #16
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800978a:	e045      	b.n	8009818 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800978c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009790:	3308      	adds	r3, #8
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	429a      	cmp	r2, r3
 8009796:	d03a      	beq.n	800980e <lfs_dir_orphaningcommit+0x9a>
 8009798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800979c:	3308      	adds	r3, #8
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fc ff38 	bl	8006618 <lfs_pair_cmp>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d12f      	bne.n	800980e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80097ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80097b2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d12a      	bne.n	800980e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80097b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d023      	beq.n	800980e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80097c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d91b      	bls.n	800980e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80097d6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f001 f8f4 	bl	800a9c8 <lfs_file_outline>
 80097e0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 80097e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80097ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097f0:	e2a1      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
            }

            err = lfs_file_flush(lfs, f);
 80097f2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f001 f908 	bl	800aa0c <lfs_file_flush>
 80097fc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 8009800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8009808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800980c:	e293      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800980e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1b5      	bne.n	800978c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_mdir_t ldir = *dir;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009832:	461d      	mov	r5, r3
 8009834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800983c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009846:	f107 031c 	add.w	r3, r7, #28
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fce8 	bl	8009228 <lfs_dir_relocatingcommit>
 8009858:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            attrs, attrcount, &pdir);
    if (state < 0) {
 800985c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009860:	2b00      	cmp	r3, #0
 8009862:	da02      	bge.n	800986a <lfs_dir_orphaningcommit+0xf6>
        return state;
 8009864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009868:	e265      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f7fc fed0 	bl	8006618 <lfs_pair_cmp>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d109      	bne.n	8009892 <lfs_dir_orphaningcommit+0x11e>
        *dir = ldir;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	461d      	mov	r5, r3
 8009882:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800988a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800988e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8009892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009896:	2b02      	cmp	r3, #2
 8009898:	d149      	bne.n	800992e <lfs_dir_orphaningcommit+0x1ba>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3348      	adds	r3, #72	; 0x48
 800989e:	461a      	mov	r2, r3
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7fe fc70 	bl	8008188 <lfs_dir_getgstate>
 80098a8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err) {
 80098ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <lfs_dir_orphaningcommit+0x146>
            return err;
 80098b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098b8:	e23d      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        lpair[1] = pdir.pair[1];
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	663b      	str	r3, [r7, #96]	; 0x60
        lfs_pair_tole32(dir->tail);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	3318      	adds	r3, #24
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fc ff17 	bl	80066fa <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	7ddb      	ldrb	r3, [r3, #23]
 80098d0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80098d4:	051a      	lsls	r2, r3, #20
 80098d6:	4bbd      	ldr	r3, [pc, #756]	; (8009bcc <lfs_dir_orphaningcommit+0x458>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	667b      	str	r3, [r7, #100]	; 0x64
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	3318      	adds	r3, #24
 80098e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80098e2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80098e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80098ea:	f107 011c 	add.w	r1, r7, #28
 80098ee:	2300      	movs	r3, #0
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	2301      	movs	r3, #1
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	4603      	mov	r3, r0
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7ff fc95 	bl	8009228 <lfs_dir_relocatingcommit>
 80098fe:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	3318      	adds	r3, #24
 8009906:	4618      	mov	r0, r3
 8009908:	f7fc fedd 	bl	80066c6 <lfs_pair_fromle32>
        if (state < 0) {
 800990c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009910:	2b00      	cmp	r3, #0
 8009912:	da02      	bge.n	800991a <lfs_dir_orphaningcommit+0x1a6>
            return state;
 8009914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009918:	e20d      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
        }

        ldir = pdir;
 800991a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800991e:	f107 051c 	add.w	r5, r7, #28
 8009922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009926:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800992a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800992e:	2300      	movs	r3, #0
 8009930:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    while (state == LFS_OK_RELOCATED) {
 8009934:	e1f3      	b.n	8009d1e <lfs_dir_orphaningcommit+0x5aa>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8009936:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800993a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800993c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800993e:	48a4      	ldr	r0, [pc, #656]	; (8009bd0 <lfs_dir_orphaningcommit+0x45c>)
 8009940:	9003      	str	r0, [sp, #12]
 8009942:	9102      	str	r1, [sp, #8]
 8009944:	9201      	str	r2, [sp, #4]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	4623      	mov	r3, r4
 800994a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800994e:	49a1      	ldr	r1, [pc, #644]	; (8009bd4 <lfs_dir_orphaningcommit+0x460>)
 8009950:	48a1      	ldr	r0, [pc, #644]	; (8009bd8 <lfs_dir_orphaningcommit+0x464>)
 8009952:	f007 f999 	bl	8010c88 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f103 0220 	add.w	r2, r3, #32
 8009962:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009966:	4611      	mov	r1, r2
 8009968:	4618      	mov	r0, r3
 800996a:	f7fc fe55 	bl	8006618 <lfs_pair_cmp>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <lfs_dir_orphaningcommit+0x20c>
            lfs->root[0] = ldir.pair[0];
 8009974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800997a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009988:	e033      	b.n	80099f2 <lfs_dir_orphaningcommit+0x27e>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800998a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800998e:	f103 0208 	add.w	r2, r3, #8
 8009992:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7fc fe3d 	bl	8006618 <lfs_pair_cmp>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d107      	bne.n	80099b4 <lfs_dir_orphaningcommit+0x240>
                d->m.pair[0] = ldir.pair[0];
 80099a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099aa:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80099ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099b2:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80099b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099b8:	799b      	ldrb	r3, [r3, #6]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d114      	bne.n	80099e8 <lfs_dir_orphaningcommit+0x274>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80099be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099c2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80099c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fc fe23 	bl	8006618 <lfs_pair_cmp>
 80099d2:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d107      	bne.n	80099e8 <lfs_dir_orphaningcommit+0x274>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80099d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099de:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80099e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80099e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1c7      	bne.n	800998a <lfs_dir_orphaningcommit+0x216>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80099fa:	f107 021c 	add.w	r2, r7, #28
 80099fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009a02:	4619      	mov	r1, r3
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f002 fb79 	bl	800c0fc <lfs_fs_parent>
 8009a0a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8009a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	da07      	bge.n	8009a26 <lfs_dir_orphaningcommit+0x2b2>
 8009a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a1a:	f113 0f02 	cmn.w	r3, #2
 8009a1e:	d002      	beq.n	8009a26 <lfs_dir_orphaningcommit+0x2b2>
            return tag;
 8009a20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a24:	e187      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8009a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a2a:	f113 0f02 	cmn.w	r3, #2
 8009a2e:	bf14      	ite	ne
 8009a30:	2301      	movne	r3, #1
 8009a32:	2300      	moveq	r3, #0
 8009a34:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        if (tag != LFS_ERR_NOENT) {
 8009a38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a3c:	f113 0f02 	cmn.w	r3, #2
 8009a40:	f000 809d 	beq.w	8009b7e <lfs_dir_orphaningcommit+0x40a>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8009a44:	2101      	movs	r1, #1
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f002 fbae 	bl	800c1a8 <lfs_fs_preporphans>
 8009a4c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (err) {
 8009a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <lfs_dir_orphaningcommit+0x2ea>
                return err;
 8009a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a5c:	e16b      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8009a5e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8009a62:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3330      	adds	r3, #48	; 0x30
 8009a6a:	f107 021c 	add.w	r2, r7, #28
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fc ff5e 	bl	8006932 <lfs_gstate_hasmovehere>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d02d      	beq.n	8009ad8 <lfs_dir_orphaningcommit+0x364>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fc feaf 	bl	80067e4 <lfs_tag_id>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
                LFS_DEBUG("Fixing move while relocating "
 8009a8c:	69f8      	ldr	r0, [r7, #28]
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8009a94:	494e      	ldr	r1, [pc, #312]	; (8009bd0 <lfs_dir_orphaningcommit+0x45c>)
 8009a96:	9102      	str	r1, [sp, #8]
 8009a98:	9201      	str	r2, [sp, #4]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8009aa2:	494c      	ldr	r1, [pc, #304]	; (8009bd4 <lfs_dir_orphaningcommit+0x460>)
 8009aa4:	484d      	ldr	r0, [pc, #308]	; (8009bdc <lfs_dir_orphaningcommit+0x468>)
 8009aa6:	f007 f8ef 	bl	8010c88 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f002 fbb3 	bl	800c21c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8009ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fc fe92 	bl	80067e4 <lfs_tag_id>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d205      	bcs.n	8009ad8 <lfs_dir_orphaningcommit+0x364>
                    tag -= LFS_MKTAG(0, 1, 0);
 8009acc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ad0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	61bb      	str	r3, [r7, #24]
            lfs_pair_tole32(ldir.pair);
 8009ae0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fc fe08 	bl	80066fa <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8009aea:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009aee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <lfs_dir_orphaningcommit+0x392>
 8009af6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009afa:	029b      	lsls	r3, r3, #10
 8009afc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009b00:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009b04:	e000      	b.n	8009b08 <lfs_dir_orphaningcommit+0x394>
 8009b06:	2300      	movs	r3, #0
 8009b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	673b      	str	r3, [r7, #112]	; 0x70
 8009b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b12:	677b      	str	r3, [r7, #116]	; 0x74
 8009b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b1a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8009b1e:	f107 0214 	add.w	r2, r7, #20
 8009b22:	f107 011c 	add.w	r1, r7, #28
 8009b26:	2300      	movs	r3, #0
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	4603      	mov	r3, r0
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff fb79 	bl	8009228 <lfs_dir_relocatingcommit>
 8009b36:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8009b3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fc fdc1 	bl	80066c6 <lfs_pair_fromle32>
            if (state < 0) {
 8009b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	da02      	bge.n	8009b52 <lfs_dir_orphaningcommit+0x3de>
                return state;
 8009b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b50:	e0f1      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
            }

            if (state == LFS_OK_RELOCATED) {
 8009b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d111      	bne.n	8009b7e <lfs_dir_orphaningcommit+0x40a>
                lpair[0] = ppair[0];
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
                lpair[1] = ppair[1];
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	663b      	str	r3, [r7, #96]	; 0x60
                ldir = pdir;
 8009b62:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009b66:	f107 051c 	add.w	r5, r7, #28
 8009b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8009b7c:	e0cf      	b.n	8009d1e <lfs_dir_orphaningcommit+0x5aa>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8009b7e:	f107 021c 	add.w	r2, r7, #28
 8009b82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f002 fa2f 	bl	800bfec <lfs_fs_pred>
 8009b8e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (err && err != LFS_ERR_NOENT) {
 8009b92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d007      	beq.n	8009baa <lfs_dir_orphaningcommit+0x436>
 8009b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b9e:	f113 0f02 	cmn.w	r3, #2
 8009ba2:	d002      	beq.n	8009baa <lfs_dir_orphaningcommit+0x436>
            return err;
 8009ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ba8:	e0c5      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8009baa:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d01a      	beq.n	8009be8 <lfs_dir_orphaningcommit+0x474>
 8009bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bb6:	f113 0f02 	cmn.w	r3, #2
 8009bba:	d115      	bne.n	8009be8 <lfs_dir_orphaningcommit+0x474>
 8009bbc:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <lfs_dir_orphaningcommit+0x46c>)
 8009bbe:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <lfs_dir_orphaningcommit+0x470>)
 8009bc0:	f640 1113 	movw	r1, #2323	; 0x913
 8009bc4:	4803      	ldr	r0, [pc, #12]	; (8009bd4 <lfs_dir_orphaningcommit+0x460>)
 8009bc6:	f006 fcf7 	bl	80105b8 <__assert_func>
 8009bca:	bf00      	nop
 8009bcc:	000ffc08 	.word	0x000ffc08
 8009bd0:	08012694 	.word	0x08012694
 8009bd4:	08012598 	.word	0x08012598
 8009bd8:	08012818 	.word	0x08012818
 8009bdc:	08012858 	.word	0x08012858
 8009be0:	0801289c 	.word	0x0801289c
 8009be4:	08013084 	.word	0x08013084

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8009be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bec:	f113 0f02 	cmn.w	r3, #2
 8009bf0:	f000 8095 	beq.w	8009d1e <lfs_dir_orphaningcommit+0x5aa>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3330      	adds	r3, #48	; 0x30
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fc fe65 	bl	80068c8 <lfs_gstate_hasorphans>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d011      	beq.n	8009c28 <lfs_dir_orphaningcommit+0x4b4>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8009c04:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8009c08:	425b      	negs	r3, r3
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	4619      	mov	r1, r3
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f002 fac9 	bl	800c1a8 <lfs_fs_preporphans>
 8009c16:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 8009c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <lfs_dir_orphaningcommit+0x4b4>
                    return err;
 8009c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c26:	e086      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8009c28:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8009c2c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3330      	adds	r3, #48	; 0x30
 8009c34:	f107 021c 	add.w	r2, r7, #28
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fc fe79 	bl	8006932 <lfs_gstate_hasmovehere>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01c      	beq.n	8009c80 <lfs_dir_orphaningcommit+0x50c>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fc fdca 	bl	80067e4 <lfs_tag_id>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
                LFS_DEBUG("Fixing move while relocating "
 8009c56:	69f8      	ldr	r0, [r7, #28]
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8009c5e:	4938      	ldr	r1, [pc, #224]	; (8009d40 <lfs_dir_orphaningcommit+0x5cc>)
 8009c60:	9102      	str	r1, [sp, #8]
 8009c62:	9201      	str	r2, [sp, #4]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	4603      	mov	r3, r0
 8009c68:	f640 1226 	movw	r2, #2342	; 0x926
 8009c6c:	4935      	ldr	r1, [pc, #212]	; (8009d44 <lfs_dir_orphaningcommit+0x5d0>)
 8009c6e:	4836      	ldr	r0, [pc, #216]	; (8009d48 <lfs_dir_orphaningcommit+0x5d4>)
 8009c70:	f007 f80a 	bl	8010c88 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009c74:	2200      	movs	r2, #0
 8009c76:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f002 face 	bl	800c21c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	65fb      	str	r3, [r7, #92]	; 0x5c
            lpair[1] = pdir.pair[1];
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	663b      	str	r3, [r7, #96]	; 0x60
            lfs_pair_tole32(ldir.pair);
 8009c88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fc fd34 	bl	80066fa <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8009c92:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c96:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d007      	beq.n	8009cae <lfs_dir_orphaningcommit+0x53a>
 8009c9e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009ca2:	029b      	lsls	r3, r3, #10
 8009ca4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009ca8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009cac:	e000      	b.n	8009cb0 <lfs_dir_orphaningcommit+0x53c>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cbc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8009cc0:	051a      	lsls	r2, r3, #20
 8009cc2:	4b22      	ldr	r3, [pc, #136]	; (8009d4c <lfs_dir_orphaningcommit+0x5d8>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cd2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8009cd6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009cda:	f107 011c 	add.w	r1, r7, #28
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f7ff fa9d 	bl	8009228 <lfs_dir_relocatingcommit>
 8009cee:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8009cf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fc fce5 	bl	80066c6 <lfs_pair_fromle32>
            if (state < 0) {
 8009cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	da02      	bge.n	8009d0a <lfs_dir_orphaningcommit+0x596>
                return state;
 8009d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d08:	e015      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
            }

            ldir = pdir;
 8009d0a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009d0e:	f107 051c 	add.w	r5, r7, #28
 8009d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8009d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	f43f ae07 	beq.w	8009936 <lfs_dir_orphaningcommit+0x1c2>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8009d28:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <lfs_dir_orphaningcommit+0x5c0>
 8009d30:	2303      	movs	r3, #3
 8009d32:	e000      	b.n	8009d36 <lfs_dir_orphaningcommit+0x5c2>
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	37b8      	adds	r7, #184	; 0xb8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	08012694 	.word	0x08012694
 8009d44:	08012598 	.word	0x08012598
 8009d48:	08012858 	.word	0x08012858
 8009d4c:	000ffc08 	.word	0x000ffc08

08009d50 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	68b9      	ldr	r1, [r7, #8]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff fd05 	bl	8009774 <lfs_dir_orphaningcommit>
 8009d6a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	da01      	bge.n	8009d76 <lfs_dir_commit+0x26>
        return orphans;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	e00d      	b.n	8009d92 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f002 faec 	bl	800c35c <lfs_fs_deorphan>
 8009d84:	6138      	str	r0, [r7, #16]
        if (err) {
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <lfs_dir_commit+0x40>
            return err;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	e000      	b.n	8009d92 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8009d9c:	b590      	push	{r4, r7, lr}
 8009d9e:	b08d      	sub	sp, #52	; 0x34
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f103 0108 	add.w	r1, r3, #8
 8009dae:	1d3a      	adds	r2, r7, #4
 8009db0:	2300      	movs	r3, #0
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7fe fade 	bl	8008374 <lfs_dir_find>
 8009db8:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	da01      	bge.n	8009dc4 <lfs_dir_rawopen+0x28>
        return tag;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	e05e      	b.n	8009e82 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fc fce2 	bl	8006790 <lfs_tag_type3>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d002      	beq.n	8009dd8 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8009dd2:	f06f 0313 	mvn.w	r3, #19
 8009dd6:	e054      	b.n	8009e82 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fc fd02 	bl	80067e4 <lfs_tag_id>
 8009de0:	4603      	mov	r3, r0
 8009de2:	461a      	mov	r2, r3
 8009de4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d106      	bne.n	8009dfa <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	e01f      	b.n	8009e3a <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fc fcee 	bl	80067e4 <lfs_tag_id>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8009e0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e10:	f043 0308 	orr.w	r3, r3, #8
 8009e14:	f107 0214 	add.w	r2, r7, #20
 8009e18:	9200      	str	r2, [sp, #0]
 8009e1a:	4a1c      	ldr	r2, [pc, #112]	; (8009e8c <lfs_dir_rawopen+0xf0>)
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7fd f8c8 	bl	8006fb4 <lfs_dir_get>
 8009e24:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	da01      	bge.n	8009e30 <lfs_dir_rawopen+0x94>
            return res;
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	e028      	b.n	8009e82 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fc fc46 	bl	80066c6 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	f107 0214 	add.w	r2, r7, #20
 8009e42:	4619      	mov	r1, r3
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7fe f983 	bl	8008150 <lfs_dir_fetch>
 8009e4a:	61f8      	str	r0, [r7, #28]
    if (err) {
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <lfs_dir_rawopen+0xba>
        return err;
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	e015      	b.n	8009e82 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	689a      	ldr	r2, [r3, #8]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2202      	movs	r2, #2
 8009e76:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7fc fe97 	bl	8006bae <lfs_mlist_append>

    return 0;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	372c      	adds	r7, #44	; 0x2c
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd90      	pop	{r4, r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	700ffc00 	.word	0x700ffc00

08009e90 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fc fe65 	bl	8006b6c <lfs_mlist_remove>

    return 0;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8009eb8:	f44f 7284 	mov.w	r2, #264	; 0x108
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f006 fc12 	bl	80106e8 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d110      	bne.n	8009eee <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	4935      	ldr	r1, [pc, #212]	; (8009fac <lfs_dir_rawread+0x100>)
 8009ed8:	461a      	mov	r2, r3
 8009eda:	460b      	mov	r3, r1
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e05a      	b.n	8009fa4 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d110      	bne.n	8009f18 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3308      	adds	r3, #8
 8009f00:	4a2b      	ldr	r2, [pc, #172]	; (8009fb0 <lfs_dir_rawread+0x104>)
 8009f02:	8811      	ldrh	r1, [r2, #0]
 8009f04:	7892      	ldrb	r2, [r2, #2]
 8009f06:	8019      	strh	r1, [r3, #0]
 8009f08:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e045      	b.n	8009fa4 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	889a      	ldrh	r2, [r3, #4]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	8b9b      	ldrh	r3, [r3, #28]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d11a      	bne.n	8009f5a <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	7fdb      	ldrb	r3, [r3, #31]
 8009f28:	f083 0301 	eor.w	r3, r3, #1
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <lfs_dir_rawread+0x8a>
                return false;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e036      	b.n	8009fa4 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f103 0108 	add.w	r1, r3, #8
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	3320      	adds	r3, #32
 8009f40:	461a      	mov	r2, r3
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7fe f904 	bl	8008150 <lfs_dir_fetch>
 8009f48:	6178      	str	r0, [r7, #20]
            if (err) {
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <lfs_dir_rawread+0xa8>
                return err;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	e027      	b.n	8009fa4 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2200      	movs	r2, #0
 8009f58:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f103 0108 	add.w	r1, r3, #8
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	889a      	ldrh	r2, [r3, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7fe f940 	bl	80081ec <lfs_dir_getinfo>
 8009f6c:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <lfs_dir_rawread+0xd4>
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f113 0f02 	cmn.w	r3, #2
 8009f7a:	d001      	beq.n	8009f80 <lfs_dir_rawread+0xd4>
            return err;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	e011      	b.n	8009fa4 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	889b      	ldrh	r3, [r3, #4]
 8009f84:	3301      	adds	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f113 0f02 	cmn.w	r3, #2
 8009f92:	d100      	bne.n	8009f96 <lfs_dir_rawread+0xea>
    while (true) {
 8009f94:	e7c0      	b.n	8009f18 <lfs_dir_rawread+0x6c>
            break;
 8009f96:	bf00      	nop
        }
    }

    dir->pos += 1;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8009fa2:	2301      	movs	r3, #1
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	080126e4 	.word	0x080126e4
 8009fb0:	080126e8 	.word	0x080126e8

08009fb4 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8009fb4:	b590      	push	{r4, r7, lr}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	3b08      	subs	r3, #8
 8009fcc:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd6:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <lfs_ctz_index+0x2e>
        return 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e01c      	b.n	800a01c <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fb ff3c 	bl	8005e64 <lfs_popc>
 8009fec:	4603      	mov	r3, r0
 8009fee:	3302      	adds	r3, #2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	1ad2      	subs	r2, r2, r3
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffc:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	fb02 f303 	mul.w	r3, r2, r3
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	1ad4      	subs	r4, r2, r3
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7fb ff2a 	bl	8005e64 <lfs_popc>
 800a010:	4603      	mov	r3, r0
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	1ae2      	subs	r2, r4, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	601a      	str	r2, [r3, #0]
    return i;
 800a01a:	68fb      	ldr	r3, [r7, #12]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	371c      	adds	r7, #28
 800a020:	46bd      	mov	sp, r7
 800a022:	bd90      	pop	{r4, r7, pc}

0800a024 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b08f      	sub	sp, #60	; 0x3c
 800a028:	af04      	add	r7, sp, #16
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	2b00      	cmp	r3, #0
 800a036:	d108      	bne.n	800a04a <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800a038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03a:	f04f 32ff 	mov.w	r2, #4294967295
 800a03e:	601a      	str	r2, [r3, #0]
        *off = 0;
 800a040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
        return 0;
 800a046:	2300      	movs	r3, #0
 800a048:	e053      	b.n	800a0f2 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	3b01      	subs	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	4619      	mov	r1, r3
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7ff ffac 	bl	8009fb4 <lfs_ctz_index>
 800a05c:	4603      	mov	r3, r0
 800a05e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800a060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a064:	4619      	mov	r1, r3
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff ffa4 	bl	8009fb4 <lfs_ctz_index>
 800a06c:	4603      	mov	r3, r0
 800a06e:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800a070:	e034      	b.n	800a0dc <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800a072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	3301      	adds	r3, #1
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fb fed3 	bl	8005e26 <lfs_npw2>
 800a080:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800a082:	1e5c      	subs	r4, r3, #1
 800a084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a086:	f7fb fede 	bl	8005e46 <lfs_ctz>
 800a08a:	4603      	mov	r3, r0
 800a08c:	4619      	mov	r1, r3
 800a08e:	4620      	mov	r0, r4
 800a090:	f7fb fe92 	bl	8005db8 <lfs_min>
 800a094:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	0092      	lsls	r2, r2, #2
 800a09c:	2104      	movs	r1, #4
 800a09e:	9103      	str	r1, [sp, #12]
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	9102      	str	r1, [sp, #8]
 800a0a4:	9201      	str	r2, [sp, #4]
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7fb ff5e 	bl	8005f70 <lfs_bd_read>
 800a0b4:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fb feed 	bl	8005e98 <lfs_fromle32>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	603b      	str	r3, [r7, #0]
        if (err) {
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <lfs_ctz_find+0xa8>
            return err;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	e012      	b.n	800a0f2 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	1a9b      	subs	r3, r3, r2
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800a0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d8c6      	bhi.n	800a072 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e8:	601a      	str	r2, [r3, #0]
    *off = pos;
 800a0ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ee:	601a      	str	r2, [r3, #0]
    return 0;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	372c      	adds	r7, #44	; 0x2c
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd90      	pop	{r4, r7, pc}
	...

0800a0fc <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b092      	sub	sp, #72	; 0x48
 800a100:	af04      	add	r7, sp, #16
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800a10a:	f107 0320 	add.w	r3, r7, #32
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7fc fdb5 	bl	8006c80 <lfs_alloc>
 800a116:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <lfs_ctz_extend+0x26>
            return err;
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	e0ea      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	4619      	mov	r1, r3
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7fc fa14 	bl	8006554 <lfs_bd_erase>
 800a12c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d006      	beq.n	800a142 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a13a:	f000 80cb 	beq.w	800a2d4 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	e0da      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
            }

            if (size == 0) {
 800a142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d107      	bne.n	800a158 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800a148:	6a3a      	ldr	r2, [r7, #32]
 800a14a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14c:	601a      	str	r2, [r3, #0]
                *off = 0;
 800a14e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
                return 0;
 800a154:	2300      	movs	r3, #0
 800a156:	e0cf      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
            }

            lfs_size_t noff = size - 1;
 800a158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a15a:	3b01      	subs	r3, #1
 800a15c:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800a15e:	f107 031c 	add.w	r3, r7, #28
 800a162:	4619      	mov	r1, r3
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff ff25 	bl	8009fb4 <lfs_ctz_index>
 800a16a:	4603      	mov	r3, r0
 800a16c:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	3301      	adds	r3, #1
 800a172:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a178:	69da      	ldr	r2, [r3, #28]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d044      	beq.n	800a20a <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800a180:	2300      	movs	r3, #0
 800a182:	637b      	str	r3, [r7, #52]	; 0x34
 800a184:	e035      	b.n	800a1f2 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	2301      	movs	r3, #1
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	f107 0317 	add.w	r3, r7, #23
 800a194:	9302      	str	r3, [sp, #8]
 800a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7fb fee3 	bl	8005f70 <lfs_bd_read>
 800a1aa:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <lfs_ctz_extend+0xba>
                        return err;
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	e0a0      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
                    }

                    err = lfs_bd_prog(lfs,
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	9203      	str	r2, [sp, #12]
 800a1bc:	f107 0217 	add.w	r2, r7, #23
 800a1c0:	9202      	str	r2, [sp, #8]
 800a1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c4:	9201      	str	r2, [sp, #4]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7fc f914 	bl	80063fc <lfs_bd_prog>
 800a1d4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a1e2:	d101      	bne.n	800a1e8 <lfs_ctz_extend+0xec>
                            goto relocate;
 800a1e4:	bf00      	nop
                    goto relocate;
 800a1e6:	e075      	b.n	800a2d4 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800a1ea:	e085      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
                for (lfs_off_t i = 0; i < noff; i++) {
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d3c5      	bcc.n	800a186 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800a1fa:	6a3a      	ldr	r2, [r7, #32]
 800a1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fe:	601a      	str	r2, [r3, #0]
                *off = noff;
 800a200:	69fa      	ldr	r2, [r7, #28]
 800a202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a204:	601a      	str	r2, [r3, #0]
                return 0;
 800a206:	2300      	movs	r3, #0
 800a208:	e076      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
            }

            // append block
            index += 1;
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	3301      	adds	r3, #1
 800a20e:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800a210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a212:	f7fb fe18 	bl	8005e46 <lfs_ctz>
 800a216:	4603      	mov	r3, r0
 800a218:	3301      	adds	r3, #1
 800a21a:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800a220:	2300      	movs	r3, #0
 800a222:	633b      	str	r3, [r7, #48]	; 0x30
 800a224:	e049      	b.n	800a2ba <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fb fe40 	bl	8005eae <lfs_tole32>
 800a22e:	4603      	mov	r3, r0
 800a230:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a236:	0092      	lsls	r2, r2, #2
 800a238:	2104      	movs	r1, #4
 800a23a:	9103      	str	r1, [sp, #12]
 800a23c:	f107 0118 	add.w	r1, r7, #24
 800a240:	9102      	str	r1, [sp, #8]
 800a242:	9201      	str	r2, [sp, #4]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	2301      	movs	r3, #1
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7fc f8d5 	bl	80063fc <lfs_bd_prog>
 800a252:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	4618      	mov	r0, r3
 800a258:	f7fb fe1e 	bl	8005e98 <lfs_fromle32>
 800a25c:	4603      	mov	r3, r0
 800a25e:	61bb      	str	r3, [r7, #24]
                if (err) {
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a26c:	d034      	beq.n	800a2d8 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	e042      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
                }

                if (i != skips-1) {
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	3b01      	subs	r3, #1
 800a276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a278:	429a      	cmp	r2, r3
 800a27a:	d01b      	beq.n	800a2b4 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a280:	0092      	lsls	r2, r2, #2
 800a282:	2104      	movs	r1, #4
 800a284:	9103      	str	r1, [sp, #12]
 800a286:	f107 0118 	add.w	r1, r7, #24
 800a28a:	9102      	str	r1, [sp, #8]
 800a28c:	9201      	str	r2, [sp, #4]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	2304      	movs	r3, #4
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	2100      	movs	r1, #0
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f7fb fe6a 	bl	8005f70 <lfs_bd_read>
 800a29c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fb fdf9 	bl	8005e98 <lfs_fromle32>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <lfs_ctz_extend+0x1b8>
                        return err;
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	e021      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
            for (lfs_off_t i = 0; i < skips; i++) {
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	633b      	str	r3, [r7, #48]	; 0x30
 800a2ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d3b1      	bcc.n	800a226 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800a2c2:	6a3a      	ldr	r2, [r7, #32]
 800a2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c6:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	009a      	lsls	r2, r3, #2
 800a2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ce:	601a      	str	r2, [r3, #0]
            return 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e011      	b.n	800a2f8 <lfs_ctz_extend+0x1fc>
                    goto relocate;
 800a2d4:	bf00      	nop
 800a2d6:	e000      	b.n	800a2da <lfs_ctz_extend+0x1de>
                        goto relocate;
 800a2d8:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800a2da:	6a3a      	ldr	r2, [r7, #32]
 800a2dc:	4b08      	ldr	r3, [pc, #32]	; (800a300 <lfs_ctz_extend+0x204>)
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	f640 22dd 	movw	r2, #2781	; 0xadd
 800a2e6:	4907      	ldr	r1, [pc, #28]	; (800a304 <lfs_ctz_extend+0x208>)
 800a2e8:	4807      	ldr	r0, [pc, #28]	; (800a308 <lfs_ctz_extend+0x20c>)
 800a2ea:	f006 fccd 	bl	8010c88 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7fb fe17 	bl	8005f24 <lfs_cache_drop>
    while (true) {
 800a2f6:	e708      	b.n	800a10a <lfs_ctz_extend+0xe>
    }
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3738      	adds	r7, #56	; 0x38
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	08012694 	.word	0x08012694
 800a304:	08012598 	.word	0x08012598
 800a308:	08012714 	.word	0x08012714

0800a30c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b090      	sub	sp, #64	; 0x40
 800a310:	af04      	add	r7, sp, #16
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <lfs_ctz_traverse+0x18>
        return 0;
 800a320:	2300      	movs	r3, #0
 800a322:	e06d      	b.n	800a400 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	3b01      	subs	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
 800a32a:	f107 031c 	add.w	r3, r7, #28
 800a32e:	4619      	mov	r1, r3
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff fe3f 	bl	8009fb4 <lfs_ctz_index>
 800a336:	4603      	mov	r3, r0
 800a338:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800a33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a340:	4798      	blx	r3
 800a342:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <lfs_ctz_traverse+0x42>
            return err;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	e058      	b.n	800a400 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <lfs_ctz_traverse+0x4c>
            return 0;
 800a354:	2300      	movs	r3, #0
 800a356:	e053      	b.n	800a400 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	f1c3 0302 	rsb	r3, r3, #2
 800a362:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800a364:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800a366:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800a368:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800a36a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800a36c:	9303      	str	r3, [sp, #12]
 800a36e:	f107 0314 	add.w	r3, r7, #20
 800a372:	9302      	str	r3, [sp, #8]
 800a374:	2300      	movs	r3, #0
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	68b9      	ldr	r1, [r7, #8]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7fb fdf4 	bl	8005f70 <lfs_bd_read>
 800a388:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fb fd83 	bl	8005e98 <lfs_fromle32>
 800a392:	4603      	mov	r3, r0
 800a394:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fb fd7d 	bl	8005e98 <lfs_fromle32>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	61bb      	str	r3, [r7, #24]
        if (err) {
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <lfs_ctz_traverse+0xa0>
            return err;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	e029      	b.n	800a400 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3b0:	e013      	b.n	800a3da <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800a3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a3c6:	4798      	blx	r3
 800a3c8:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <lfs_ctz_traverse+0xc8>
                return err;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	e015      	b.n	800a400 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	dbe6      	blt.n	800a3b2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800a3f4:	603b      	str	r3, [r7, #0]
        index -= count;
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800a3fe:	e79c      	b.n	800a33a <lfs_ctz_traverse+0x2e>
    }
}
 800a400:	4618      	mov	r0, r3
 800a402:	3730      	adds	r7, #48	; 0x30
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800a408:	b5b0      	push	{r4, r5, r7, lr}
 800a40a:	b094      	sub	sp, #80	; 0x50
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d008      	beq.n	800a432 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f002 f93f 	bl	800c6a4 <lfs_fs_forceconsistency>
 800a426:	63b8      	str	r0, [r7, #56]	; 0x38
        if (err) {
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <lfs_file_rawopencfg+0x2a>
            return err;
 800a42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a430:	e1b0      	b.n	800a794 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a436:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2200      	movs	r2, #0
 800a442:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2200      	movs	r2, #0
 800a448:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f103 0108 	add.w	r1, r3, #8
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	3304      	adds	r3, #4
 800a45a:	1d3a      	adds	r2, r7, #4
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7fd ff89 	bl	8008374 <lfs_dir_find>
 800a462:	6438      	str	r0, [r7, #64]	; 0x40
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800a464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a466:	2b00      	cmp	r3, #0
 800a468:	da0c      	bge.n	800a484 <lfs_file_rawopencfg+0x7c>
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	f113 0f02 	cmn.w	r3, #2
 800a470:	d105      	bne.n	800a47e <lfs_file_rawopencfg+0x76>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	889b      	ldrh	r3, [r3, #4]
 800a476:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d102      	bne.n	800a484 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800a47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a480:	647b      	str	r3, [r7, #68]	; 0x44
        goto cleanup;
 800a482:	e17c      	b.n	800a77e <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2201      	movs	r2, #1
 800a488:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800a48a:	68b9      	ldr	r1, [r7, #8]
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7fc fb8e 	bl	8006bae <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800a492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a494:	f113 0f02 	cmn.w	r3, #2
 800a498:	d14e      	bne.n	800a538 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d103      	bne.n	800a4ac <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 800a4a4:	f06f 0301 	mvn.w	r3, #1
 800a4a8:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 800a4aa:	e168      	b.n	800a77e <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f5 fe98 	bl	80001e4 <strlen>
 800a4b4:	6378      	str	r0, [r7, #52]	; 0x34
        if (nlen > lfs->name_max) {
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d903      	bls.n	800a4c8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800a4c0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800a4c4:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 800a4c6:	e15a      	b.n	800a77e <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f103 0108 	add.w	r1, r3, #8
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	889b      	ldrh	r3, [r3, #4]
 800a4d2:	029b      	lsls	r3, r3, #10
 800a4d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	61bb      	str	r3, [r7, #24]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	889b      	ldrh	r3, [r3, #4]
 800a4e6:	029a      	lsls	r2, r3, #10
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4f0:	61fb      	str	r3, [r7, #28]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	623b      	str	r3, [r7, #32]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	889b      	ldrh	r3, [r3, #4]
 800a4fa:	029b      	lsls	r3, r3, #10
 800a4fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
 800a506:	2300      	movs	r3, #0
 800a508:	62bb      	str	r3, [r7, #40]	; 0x28
 800a50a:	f107 0214 	add.w	r2, r7, #20
 800a50e:	2303      	movs	r3, #3
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fc1d 	bl	8009d50 <lfs_dir_commit>
 800a516:	6478      	str	r0, [r7, #68]	; 0x44
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800a518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a51a:	f113 0f1c 	cmn.w	r3, #28
 800a51e:	d001      	beq.n	800a524 <lfs_file_rawopencfg+0x11c>
 800a520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a522:	e001      	b.n	800a528 <lfs_file_rawopencfg+0x120>
 800a524:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800a528:	647b      	str	r3, [r7, #68]	; 0x44
        if (err) {
 800a52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 8125 	bne.w	800a77c <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800a532:	4b9a      	ldr	r3, [pc, #616]	; (800a79c <lfs_file_rawopencfg+0x394>)
 800a534:	643b      	str	r3, [r7, #64]	; 0x40
 800a536:	e044      	b.n	800a5c2 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 800a542:	f06f 0310 	mvn.w	r3, #16
 800a546:	647b      	str	r3, [r7, #68]	; 0x44
        goto cleanup;
 800a548:	e119      	b.n	800a77e <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800a54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fc f91f 	bl	8006790 <lfs_tag_type3>
 800a552:	4603      	mov	r3, r0
 800a554:	2b01      	cmp	r3, #1
 800a556:	d003      	beq.n	800a560 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 800a558:	f06f 0314 	mvn.w	r3, #20
 800a55c:	647b      	str	r3, [r7, #68]	; 0x44
        goto cleanup;
 800a55e:	e10e      	b.n	800a77e <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00e      	beq.n	800a588 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	889b      	ldrh	r3, [r3, #4]
 800a56e:	029b      	lsls	r3, r3, #10
 800a570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a578:	643b      	str	r3, [r7, #64]	; 0x40
        file->flags |= LFS_F_DIRTY;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	631a      	str	r2, [r3, #48]	; 0x30
 800a586:	e01c      	b.n	800a5c2 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	889b      	ldrh	r3, [r3, #4]
 800a592:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800a594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a598:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800a5a0:	9200      	str	r2, [sp, #0]
 800a5a2:	4a7f      	ldr	r2, [pc, #508]	; (800a7a0 <lfs_file_rawopencfg+0x398>)
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7fc fd05 	bl	8006fb4 <lfs_dir_get>
 800a5aa:	6438      	str	r0, [r7, #64]	; 0x40
        if (tag < 0) {
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da02      	bge.n	800a5b8 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 800a5b6:	e0e2      	b.n	800a77e <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	3328      	adds	r3, #40	; 0x28
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fc fa18 	bl	80069f2 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c6:	e063      	b.n	800a690 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d03c      	beq.n	800a64e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5de:	6859      	ldr	r1, [r3, #4]
 800a5e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a5f2:	051a      	lsls	r2, r3, #20
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	889b      	ldrh	r3, [r3, #4]
 800a5f8:	029b      	lsls	r3, r3, #10
 800a5fa:	ea42 0103 	orr.w	r1, r2, r3
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a602:	6858      	ldr	r0, [r3, #4]
 800a604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a606:	4613      	mov	r3, r2
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4403      	add	r3, r0
 800a610:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800a612:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a61a:	6859      	ldr	r1, [r3, #4]
 800a61c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a61e:	4613      	mov	r3, r2
 800a620:	005b      	lsls	r3, r3, #1
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4603      	mov	r3, r0
 800a62e:	4a5d      	ldr	r2, [pc, #372]	; (800a7a4 <lfs_file_rawopencfg+0x39c>)
 800a630:	4621      	mov	r1, r4
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7fc fcbe 	bl	8006fb4 <lfs_dir_get>
 800a638:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0 && res != LFS_ERR_NOENT) {
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	da06      	bge.n	800a64e <lfs_file_rawopencfg+0x246>
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	f113 0f02 	cmn.w	r3, #2
 800a646:	d002      	beq.n	800a64e <lfs_file_rawopencfg+0x246>
                err = res;
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	647b      	str	r3, [r7, #68]	; 0x44
                goto cleanup;
 800a64c:	e097      	b.n	800a77e <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d017      	beq.n	800a68a <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65e:	6859      	ldr	r1, [r3, #4]
 800a660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a662:	4613      	mov	r3, r2
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	689a      	ldr	r2, [r3, #8]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a672:	429a      	cmp	r2, r3
 800a674:	d903      	bls.n	800a67e <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 800a676:	f06f 031b 	mvn.w	r3, #27
 800a67a:	647b      	str	r3, [r7, #68]	; 0x44
                goto cleanup;
 800a67c:	e07f      	b.n	800a77e <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800a68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68c:	3301      	adds	r3, #1
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a698:	429a      	cmp	r2, r3
 800a69a:	d395      	bcc.n	800a5c8 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d005      	beq.n	800a6b2 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	64da      	str	r2, [r3, #76]	; 0x4c
 800a6b0:	e010      	b.n	800a6d4 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fb fc1c 	bl	8005ef6 <lfs_malloc>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 800a6cc:	f06f 030b 	mvn.w	r3, #11
 800a6d0:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 800a6d2:	e054      	b.n	800a77e <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	3340      	adds	r3, #64	; 0x40
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7fb fc31 	bl	8005f42 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fc f854 	bl	8006790 <lfs_tag_type3>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f240 2301 	movw	r3, #513	; 0x201
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d141      	bne.n	800a778 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f06f 0201 	mvn.w	r2, #1
 800a6fa:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 800a6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fc f880 	bl	8006804 <lfs_tag_size>
 800a704:	4602      	mov	r2, r0
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2200      	movs	r2, #0
 800a722:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d020      	beq.n	800a778 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	889b      	ldrh	r3, [r3, #4]
 800a740:	029c      	lsls	r4, r3, #10
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a746:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fb fb34 	bl	8005db8 <lfs_min>
 800a750:	4603      	mov	r3, r0
 800a752:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800a754:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	4613      	mov	r3, r2
 800a760:	4a0f      	ldr	r2, [pc, #60]	; (800a7a0 <lfs_file_rawopencfg+0x398>)
 800a762:	4629      	mov	r1, r5
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7fc fc25 	bl	8006fb4 <lfs_dir_get>
 800a76a:	6338      	str	r0, [r7, #48]	; 0x30
            if (res < 0) {
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da02      	bge.n	800a778 <lfs_file_rawopencfg+0x370>
                err = res;
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	647b      	str	r3, [r7, #68]	; 0x44
                goto cleanup;
 800a776:	e002      	b.n	800a77e <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	e00b      	b.n	800a794 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 800a77c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800a78a:	68b9      	ldr	r1, [r7, #8]
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 f823 	bl	800a7d8 <lfs_file_rawclose>
    return err;
 800a792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a794:	4618      	mov	r0, r3
 800a796:	3748      	adds	r7, #72	; 0x48
 800a798:	46bd      	mov	sp, r7
 800a79a:	bdb0      	pop	{r4, r5, r7, pc}
 800a79c:	20100000 	.word	0x20100000
 800a7a0:	700ffc00 	.word	0x700ffc00
 800a7a4:	7ffffc00 	.word	0x7ffffc00

0800a7a8 <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800a7b6:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <lfs_file_rawopen+0x2c>)
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	68b9      	ldr	r1, [r7, #8]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fe21 	bl	800a408 <lfs_file_rawopencfg>
 800a7c6:	6178      	str	r0, [r7, #20]
    return err;
 800a7c8:	697b      	ldr	r3, [r7, #20]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0801309c 	.word	0x0801309c

0800a7d8 <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f9e5 	bl	800abb4 <lfs_file_rawsync>
 800a7ea:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7fc f9bc 	bl	8006b6c <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a802:	4618      	mov	r0, r3
 800a804:	f7fb fb83 	bl	8005f0e <lfs_free>
    }

    return err;
 800a808:	68fb      	ldr	r3, [r7, #12]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800a814:	b590      	push	{r4, r7, lr}
 800a816:	b08d      	sub	sp, #52	; 0x34
 800a818:	af06      	add	r7, sp, #24
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7fc fa2b 	bl	8006c80 <lfs_alloc>
 800a82a:	6138      	str	r0, [r7, #16]
        if (err) {
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d001      	beq.n	800a836 <lfs_file_relocate+0x22>
            return err;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	e0bc      	b.n	800a9b0 <lfs_file_relocate+0x19c>
        }

        err = lfs_bd_erase(lfs, nblock);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7fb fe8a 	bl	8006554 <lfs_bd_erase>
 800a840:	6138      	str	r0, [r7, #16]
        if (err) {
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d006      	beq.n	800a856 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a84e:	f000 809b 	beq.w	800a988 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	e0ac      	b.n	800a9b0 <lfs_file_relocate+0x19c>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
 800a85a:	e069      	b.n	800a930 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d027      	beq.n	800a8b8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	f103 0008 	add.w	r0, r3, #8
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	889b      	ldrh	r3, [r3, #4]
 800a880:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800a882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a88a:	2101      	movs	r1, #1
 800a88c:	9105      	str	r1, [sp, #20]
 800a88e:	f107 010b 	add.w	r1, r7, #11
 800a892:	9104      	str	r1, [sp, #16]
 800a894:	6979      	ldr	r1, [r7, #20]
 800a896:	9103      	str	r1, [sp, #12]
 800a898:	9302      	str	r3, [sp, #8]
 800a89a:	4b47      	ldr	r3, [pc, #284]	; (800a9b8 <lfs_file_relocate+0x1a4>)
 800a89c:	9301      	str	r3, [sp, #4]
 800a89e:	9200      	str	r2, [sp, #0]
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7fc fb9f 	bl	8006fea <lfs_dir_getread>
 800a8ac:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01e      	beq.n	800a8f2 <lfs_file_relocate+0xde>
                    return err;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	e07b      	b.n	800a9b0 <lfs_file_relocate+0x19c>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800a8be:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	1ad4      	subs	r4, r2, r3
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	9203      	str	r2, [sp, #12]
 800a8d0:	f107 020b 	add.w	r2, r7, #11
 800a8d4:	9202      	str	r2, [sp, #8]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	9201      	str	r2, [sp, #4]
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	4623      	mov	r3, r4
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7fb fb45 	bl	8005f70 <lfs_bd_read>
 800a8e6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <lfs_file_relocate+0xde>
                    return err;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	e05e      	b.n	800a9b0 <lfs_file_relocate+0x19c>
                }
            }

            err = lfs_bd_prog(lfs,
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f103 0110 	add.w	r1, r3, #16
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	9203      	str	r2, [sp, #12]
 800a900:	f107 020b 	add.w	r2, r7, #11
 800a904:	9202      	str	r2, [sp, #8]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	2301      	movs	r3, #1
 800a90e:	4602      	mov	r2, r0
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7fb fd73 	bl	80063fc <lfs_bd_prog>
 800a916:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a924:	d032      	beq.n	800a98c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	e042      	b.n	800a9b0 <lfs_file_relocate+0x19c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3301      	adds	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	429a      	cmp	r2, r3
 800a938:	d390      	bcc.n	800a85c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69d9      	ldr	r1, [r3, #28]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	461a      	mov	r2, r3
 800a94a:	f005 fec2 	bl	80106d2 <memcpy>
        file->cache.block = lfs->pcache.block;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	691a      	ldr	r2, [r3, #16]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	695a      	ldr	r2, [r3, #20]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3310      	adds	r3, #16
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7fb fae8 	bl	8005f42 <lfs_cache_zero>

        file->block = nblock;
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800a984:	2300      	movs	r3, #0
 800a986:	e013      	b.n	800a9b0 <lfs_file_relocate+0x19c>
                goto relocate;
 800a988:	bf00      	nop
 800a98a:	e000      	b.n	800a98e <lfs_file_relocate+0x17a>
                    goto relocate;
 800a98c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <lfs_file_relocate+0x1a8>)
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	4613      	mov	r3, r2
 800a996:	f640 4211 	movw	r2, #3089	; 0xc11
 800a99a:	4909      	ldr	r1, [pc, #36]	; (800a9c0 <lfs_file_relocate+0x1ac>)
 800a99c:	4809      	ldr	r0, [pc, #36]	; (800a9c4 <lfs_file_relocate+0x1b0>)
 800a99e:	f006 f973 	bl	8010c88 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3310      	adds	r3, #16
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f7fb fabb 	bl	8005f24 <lfs_cache_drop>
    while (true) {
 800a9ae:	e736      	b.n	800a81e <lfs_file_relocate+0xa>
    }
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd90      	pop	{r4, r7, pc}
 800a9b8:	fff7fc00 	.word	0xfff7fc00
 800a9bc:	08012694 	.word	0x08012694
 800a9c0:	08012598 	.word	0x08012598
 800a9c4:	08012714 	.word	0x08012714

0800a9c8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fc f930 	bl	8006c40 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff ff16 	bl	800a814 <lfs_file_relocate>
 800a9e8:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <lfs_file_outline+0x2c>
        return err;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	e006      	b.n	800aa02 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800aa0c:	b590      	push	{r4, r7, lr}
 800aa0e:	b09f      	sub	sp, #124	; 0x7c
 800aa10:	af02      	add	r7, sp, #8
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d011      	beq.n	800aa46 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d105      	bne.n	800aa3a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	3340      	adds	r3, #64	; 0x40
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7fb fa75 	bl	8005f24 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80a5 	beq.w	800ab9e <lfs_file_flush+0x192>
        lfs_off_t pos = file->pos;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa58:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d177      	bne.n	800ab56 <lfs_file_flush+0x14a>
            // copy over anything after current branch
            lfs_file_t orig = {
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	2254      	movs	r2, #84	; 0x54
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f005 fe3a 	bl	80106e8 <memset>
                .ctz.head = file->ctz.head,
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800aa7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa80:	2301      	movs	r3, #1
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800aa88:	643b      	str	r3, [r7, #64]	; 0x40
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800aa90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7fb fa42 	bl	8005f24 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800aaa0:	e02b      	b.n	800aafa <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800aaa2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800aaa6:	f107 010c 	add.w	r1, r7, #12
 800aaaa:	2301      	movs	r3, #1
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f90d 	bl	800accc <lfs_file_flushedread>
 800aab2:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800aab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da01      	bge.n	800aabe <lfs_file_flush+0xb2>
                    return res;
 800aaba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aabc:	e070      	b.n	800aba0 <lfs_file_flush+0x194>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800aabe:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800aac2:	2301      	movs	r3, #1
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fa08 	bl	800aedc <lfs_file_flushedwrite>
 800aacc:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800aace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da01      	bge.n	800aad8 <lfs_file_flush+0xcc>
                    return res;
 800aad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad6:	e063      	b.n	800aba0 <lfs_file_flush+0x194>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae0:	d00b      	beq.n	800aafa <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800aae2:	f107 030c 	add.w	r3, r7, #12
 800aae6:	3340      	adds	r3, #64	; 0x40
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7fb fa1a 	bl	8005f24 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7fb fa15 	bl	8005f24 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d3cd      	bcc.n	800aaa2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	2301      	movs	r3, #1
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7fb fbc3 	bl	800629c <lfs_bd_flush>
 800ab16:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800ab18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d027      	beq.n	800ab6e <lfs_file_flush+0x162>
                    if (err == LFS_ERR_CORRUPT) {
 800ab1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab20:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ab24:	d001      	beq.n	800ab2a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800ab26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab28:	e03a      	b.n	800aba0 <lfs_file_flush+0x194>
                        goto relocate;
 800ab2a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab30:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <lfs_file_flush+0x19c>)
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	f44f 6246 	mov.w	r2, #3168	; 0xc60
 800ab3a:	491c      	ldr	r1, [pc, #112]	; (800abac <lfs_file_flush+0x1a0>)
 800ab3c:	481c      	ldr	r0, [pc, #112]	; (800abb0 <lfs_file_flush+0x1a4>)
 800ab3e:	f006 f8a3 	bl	8010c88 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff fe65 	bl	800a814 <lfs_file_relocate>
 800ab4a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800ab4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0d9      	beq.n	800ab06 <lfs_file_flush+0xfa>
                    return err;
 800ab52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab54:	e024      	b.n	800aba0 <lfs_file_flush+0x194>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4610      	mov	r0, r2
 800ab62:	f7fb f919 	bl	8005d98 <lfs_max>
 800ab66:	4602      	mov	r2, r0
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	635a      	str	r2, [r3, #52]	; 0x34
 800ab6c:	e000      	b.n	800ab70 <lfs_file_flush+0x164>
                break;
 800ab6e:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab84:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab9c:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3774      	adds	r7, #116	; 0x74
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd90      	pop	{r4, r7, pc}
 800aba8:	08012694 	.word	0x08012694
 800abac:	08012598 	.word	0x08012598
 800abb0:	08012714 	.word	0x08012714

0800abb4 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08c      	sub	sp, #48	; 0x30
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	e07a      	b.n	800acc4 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff ff1b 	bl	800aa0c <lfs_file_flush>
 800abd6:	6238      	str	r0, [r7, #32]
    if (err) {
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d007      	beq.n	800abee <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	e06a      	b.n	800acc4 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d063      	beq.n	800acc2 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fb fcef 	bl	80065e2 <lfs_pair_isnull>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f083 0301 	eor.w	r3, r3, #1
 800ac0a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d058      	beq.n	800acc2 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800ac1c:	f240 2301 	movw	r3, #513	; 0x201
 800ac20:	85fb      	strh	r3, [r7, #46]	; 0x2e
            buffer = file->cache.buffer;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
            size = file->ctz.size;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac2e:	e014      	b.n	800ac5a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800ac30:	f240 2302 	movw	r3, #514	; 0x202
 800ac34:	85fb      	strh	r3, [r7, #46]	; 0x2e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	f107 0308 	add.w	r3, r7, #8
 800ac3c:	3228      	adds	r2, #40	; 0x28
 800ac3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac42:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fb fee9 	bl	8006a22 <lfs_ctz_tole32>
            buffer = &ctz;
 800ac50:	f107 0308 	add.w	r3, r7, #8
 800ac54:	62bb      	str	r3, [r7, #40]	; 0x28
            size = sizeof(ctz);
 800ac56:	2308      	movs	r3, #8
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	f103 0108 	add.w	r1, r3, #8
 800ac60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac62:	051a      	lsls	r2, r3, #20
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	889b      	ldrh	r3, [r3, #4]
 800ac68:	029b      	lsls	r3, r3, #10
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	613b      	str	r3, [r7, #16]
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	889b      	ldrh	r3, [r3, #4]
 800ac7a:	029a      	lsls	r2, r3, #10
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800ac88:	61bb      	str	r3, [r7, #24]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	61fb      	str	r3, [r7, #28]
 800ac92:	f107 0210 	add.w	r2, r7, #16
 800ac96:	2302      	movs	r3, #2
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff f859 	bl	8009d50 <lfs_dir_commit>
 800ac9e:	6238      	str	r0, [r7, #32]
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	e006      	b.n	800acc4 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3730      	adds	r7, #48	; 0x30
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800accc:	b5b0      	push	{r4, r5, r7, lr}
 800acce:	b090      	sub	sp, #64	; 0x40
 800acd0:	af06      	add	r7, sp, #24
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	429a      	cmp	r2, r3
 800acec:	d301      	bcc.n	800acf2 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	e0b7      	b.n	800ae62 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	4619      	mov	r1, r3
 800acfe:	6838      	ldr	r0, [r7, #0]
 800ad00:	f7fb f85a 	bl	8005db8 <lfs_min>
 800ad04:	6038      	str	r0, [r7, #0]
    nsize = size;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800ad0a:	e0a5      	b.n	800ae58 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d006      	beq.n	800ad26 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad20:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d130      	bne.n	800ad88 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d11c      	bne.n	800ad6c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	3138      	adds	r1, #56	; 0x38
 800ad48:	68b8      	ldr	r0, [r7, #8]
 800ad4a:	303c      	adds	r0, #60	; 0x3c
 800ad4c:	9003      	str	r0, [sp, #12]
 800ad4e:	9102      	str	r1, [sp, #8]
 800ad50:	9201      	str	r2, [sp, #4]
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	462b      	mov	r3, r5
 800ad56:	4622      	mov	r2, r4
 800ad58:	2100      	movs	r1, #0
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff f962 	bl	800a024 <lfs_ctz_find>
 800ad60:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d009      	beq.n	800ad7c <lfs_file_flushedread+0xb0>
                    return err;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	e07a      	b.n	800ae62 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f06f 0201 	mvn.w	r2, #1
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad8c:	69da      	ldr	r2, [r3, #28]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	4619      	mov	r1, r3
 800ad96:	6a38      	ldr	r0, [r7, #32]
 800ad98:	f7fb f80e 	bl	8005db8 <lfs_min>
 800ad9c:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d026      	beq.n	800adf8 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f103 0408 	add.w	r4, r3, #8
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 800adba:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	889b      	ldrh	r3, [r3, #4]
 800adc0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800adc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800adce:	69b8      	ldr	r0, [r7, #24]
 800add0:	9005      	str	r0, [sp, #20]
 800add2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800add4:	9004      	str	r0, [sp, #16]
 800add6:	9103      	str	r1, [sp, #12]
 800add8:	9302      	str	r3, [sp, #8]
 800adda:	4b24      	ldr	r3, [pc, #144]	; (800ae6c <lfs_file_flushedread+0x1a0>)
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	9200      	str	r2, [sp, #0]
 800ade0:	462b      	mov	r3, r5
 800ade2:	2200      	movs	r2, #0
 800ade4:	4621      	mov	r1, r4
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7fc f8ff 	bl	8006fea <lfs_dir_getread>
 800adec:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01d      	beq.n	800ae30 <lfs_file_flushedread+0x164>
                return err;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	e034      	b.n	800ae62 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800ae02:	69dc      	ldr	r4, [r3, #28]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ae0c:	69b9      	ldr	r1, [r7, #24]
 800ae0e:	9103      	str	r1, [sp, #12]
 800ae10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae12:	9102      	str	r1, [sp, #8]
 800ae14:	9201      	str	r2, [sp, #4]
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	4623      	mov	r3, r4
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7fb f8a6 	bl	8005f70 <lfs_bd_read>
 800ae24:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <lfs_file_flushedread+0x164>
                return err;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	e018      	b.n	800ae62 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	441a      	add	r2, r3
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	441a      	add	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800ae48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 800ae50:	6a3a      	ldr	r2, [r7, #32]
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f47f af56 	bne.w	800ad0c <lfs_file_flushedread+0x40>
    }

    return size;
 800ae60:	683b      	ldr	r3, [r7, #0]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3728      	adds	r7, #40	; 0x28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bdb0      	pop	{r4, r5, r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	fff7fc00 	.word	0xfff7fc00

0800ae70 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <lfs_file_rawread+0x28>
 800ae8a:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <lfs_file_rawread+0x60>)
 800ae8c:	4a11      	ldr	r2, [pc, #68]	; (800aed4 <lfs_file_rawread+0x64>)
 800ae8e:	f640 41eb 	movw	r1, #3307	; 0xceb
 800ae92:	4811      	ldr	r0, [pc, #68]	; (800aed8 <lfs_file_rawread+0x68>)
 800ae94:	f005 fb90 	bl	80105b8 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d009      	beq.n	800aeb8 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fdb0 	bl	800aa0c <lfs_file_flush>
 800aeac:	6178      	str	r0, [r7, #20]
        if (err) {
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <lfs_file_rawread+0x48>
            return err;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	e006      	b.n	800aec6 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff ff04 	bl	800accc <lfs_file_flushedread>
 800aec4:	4603      	mov	r3, r0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	080128c4 	.word	0x080128c4
 800aed4:	080130a8 	.word	0x080130a8
 800aed8:	08012598 	.word	0x08012598

0800aedc <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800aedc:	b5b0      	push	{r4, r5, r7, lr}
 800aede:	b090      	sub	sp, #64	; 0x40
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 810c 	beq.w	800b118 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	441a      	add	r2, r3
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	4619      	mov	r1, r3
 800af0e:	4610      	mov	r0, r2
 800af10:	f7fa ff42 	bl	8005d98 <lfs_max>
 800af14:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 800af1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800af2c:	08db      	lsrs	r3, r3, #3
 800af2e:	e003      	b.n	800af38 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af34:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 800af36:	08db      	lsrs	r3, r3, #3
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fa ff3c 	bl	8005db8 <lfs_min>
 800af40:	4603      	mov	r3, r0
 800af42:	4619      	mov	r1, r3
 800af44:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800af48:	f7fa ff36 	bl	8005db8 <lfs_min>
 800af4c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800af4e:	429c      	cmp	r4, r3
 800af50:	f240 80e2 	bls.w	800b118 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800af54:	68b9      	ldr	r1, [r7, #8]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff fd36 	bl	800a9c8 <lfs_file_outline>
 800af5c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 80d9 	beq.w	800b118 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	e0d5      	b.n	800b122 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d006      	beq.n	800af90 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af8a:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d16b      	bne.n	800b068 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d157      	bne.n	800b04c <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d12d      	bne.n	800b004 <lfs_file_flushedwrite+0x128>
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afac:	2b00      	cmp	r3, #0
 800afae:	d029      	beq.n	800b004 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800afc2:	3a01      	subs	r2, #1
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	3138      	adds	r1, #56	; 0x38
 800afc8:	68b8      	ldr	r0, [r7, #8]
 800afca:	303c      	adds	r0, #60	; 0x3c
 800afcc:	9003      	str	r0, [sp, #12]
 800afce:	9102      	str	r1, [sp, #8]
 800afd0:	9201      	str	r2, [sp, #4]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	462b      	mov	r3, r5
 800afd6:	4622      	mov	r2, r4
 800afd8:	2100      	movs	r1, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff f822 	bl	800a024 <lfs_ctz_find>
 800afe0:	6238      	str	r0, [r7, #32]
                    if (err) {
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	e094      	b.n	800b122 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	3340      	adds	r3, #64	; 0x40
 800affc:	4619      	mov	r1, r3
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7fa ff9f 	bl	8005f42 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7fb fe1b 	bl	8006c40 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b010:	68fc      	ldr	r4, [r7, #12]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	3238      	adds	r2, #56	; 0x38
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	313c      	adds	r1, #60	; 0x3c
 800b022:	9102      	str	r1, [sp, #8]
 800b024:	9201      	str	r2, [sp, #4]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	462b      	mov	r3, r5
 800b02a:	4622      	mov	r2, r4
 800b02c:	4601      	mov	r1, r0
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff f864 	bl	800a0fc <lfs_ctz_extend>
 800b034:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00f      	beq.n	800b05c <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b040:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	e06a      	b.n	800b122 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f06f 0201 	mvn.w	r2, #1
 800b052:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b060:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	4619      	mov	r1, r3
 800b076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b078:	f7fa fe9e 	bl	8005db8 <lfs_min>
 800b07c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b084:	68fc      	ldr	r4, [r7, #12]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b08e:	69b9      	ldr	r1, [r7, #24]
 800b090:	9103      	str	r1, [sp, #12]
 800b092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b094:	9102      	str	r1, [sp, #8]
 800b096:	9201      	str	r2, [sp, #4]
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	2301      	movs	r3, #1
 800b09c:	4622      	mov	r2, r4
 800b09e:	4601      	mov	r1, r0
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7fb f9ab 	bl	80063fc <lfs_bd_prog>
 800b0a6:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01c      	beq.n	800b0e8 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b0b4:	d007      	beq.n	800b0c6 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	e02d      	b.n	800b122 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 800b0c6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800b0c8:	68b9      	ldr	r1, [r7, #8]
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f7ff fba2 	bl	800a814 <lfs_file_relocate>
 800b0d0:	6178      	str	r0, [r7, #20]
            if (err) {
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0d2      	beq.n	800b07e <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	e01c      	b.n	800b122 <lfs_file_flushedwrite+0x246>
            break;
 800b0e8:	bf00      	nop
            }
        }

        file->pos += diff;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	441a      	add	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	441a      	add	r2, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800b102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	4413      	add	r3, r2
 800b108:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800b10a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7fb fd94 	bl	8006c40 <lfs_alloc_ack>
    while (nsize > 0) {
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f47f af2b 	bne.w	800af76 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 800b120:	683b      	ldr	r3, [r7, #0]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3730      	adds	r7, #48	; 0x30
 800b126:	46bd      	mov	sp, r7
 800b128:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b12c <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	; 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <lfs_file_rawwrite+0x28>
 800b146:	4b38      	ldr	r3, [pc, #224]	; (800b228 <lfs_file_rawwrite+0xfc>)
 800b148:	4a38      	ldr	r2, [pc, #224]	; (800b22c <lfs_file_rawwrite+0x100>)
 800b14a:	f640 5156 	movw	r1, #3414	; 0xd56
 800b14e:	4838      	ldr	r0, [pc, #224]	; (800b230 <lfs_file_rawwrite+0x104>)
 800b150:	f005 fa32 	bl	80105b8 <__assert_func>

    if (file->flags & LFS_F_READING) {
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d009      	beq.n	800b174 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fc52 	bl	800aa0c <lfs_file_flush>
 800b168:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <lfs_file_rawwrite+0x48>
            return err;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	e055      	b.n	800b220 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d009      	beq.n	800b194 <lfs_file_rawwrite+0x68>
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	429a      	cmp	r2, r3
 800b18a:	d203      	bcs.n	800b194 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	441a      	add	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d902      	bls.n	800b1aa <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800b1a4:	f06f 031a 	mvn.w	r3, #26
 800b1a8:	e03a      	b.n	800b220 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d121      	bne.n	800b1fa <lfs_file_rawwrite+0xce>
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d91b      	bls.n	800b1fa <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c6:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800b1d0:	e00e      	b.n	800b1f0 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	75fb      	strb	r3, [r7, #23]
 800b1d6:	f107 0217 	add.w	r2, r7, #23
 800b1da:	2301      	movs	r3, #1
 800b1dc:	68b9      	ldr	r1, [r7, #8]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7ff fe7c 	bl	800aedc <lfs_file_flushedwrite>
 800b1e4:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da01      	bge.n	800b1f0 <lfs_file_rawwrite+0xc4>
                return res;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	e017      	b.n	800b220 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f4:	6a3a      	ldr	r2, [r7, #32]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d8eb      	bhi.n	800b1d2 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff fe6b 	bl	800aedc <lfs_file_flushedwrite>
 800b206:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	da01      	bge.n	800b212 <lfs_file_rawwrite+0xe6>
        return nsize;
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	e006      	b.n	800b220 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b216:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 800b21e:	69bb      	ldr	r3, [r7, #24]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3728      	adds	r7, #40	; 0x28
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	080128f4 	.word	0x080128f4
 800b22c:	080130bc 	.word	0x080130bc
 800b230:	08012598 	.word	0x08012598

0800b234 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b08c      	sub	sp, #48	; 0x30
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <lfs_file_rawseek+0x20>
        npos = off;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b252:	e025      	b.n	800b2a0 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d10f      	bne.n	800b27a <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4413      	add	r3, r2
 800b264:	2b00      	cmp	r3, #0
 800b266:	da02      	bge.n	800b26e <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 800b268:	f06f 0315 	mvn.w	r3, #21
 800b26c:	e067      	b.n	800b33e <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4413      	add	r3, r2
 800b276:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b278:	e012      	b.n	800b2a0 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d10f      	bne.n	800b2a0 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 f85f 	bl	800b346 <lfs_file_rawsize>
 800b288:	4602      	mov	r2, r0
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	2b00      	cmp	r3, #0
 800b294:	da02      	bge.n	800b29c <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 800b296:	f06f 0315 	mvn.w	r3, #21
 800b29a:	e050      	b.n	800b33e <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d902      	bls.n	800b2b0 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 800b2aa:	f06f 0315 	mvn.w	r3, #21
 800b2ae:	e046      	b.n	800b33e <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d101      	bne.n	800b2be <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	e03f      	b.n	800b33e <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d12b      	bne.n	800b322 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	f107 0318 	add.w	r3, r7, #24
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f7fe fe6c 	bl	8009fb4 <lfs_ctz_index>
 800b2dc:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 800b2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e0:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 800b2e2:	f107 0314 	add.w	r3, r7, #20
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7fe fe63 	bl	8009fb4 <lfs_ctz_index>
 800b2ee:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 800b2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d114      	bne.n	800b322 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d80f      	bhi.n	800b322 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30a:	441a      	add	r2, r3
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d907      	bls.n	800b322 <lfs_file_rawseek+0xee>
            file->pos = npos;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b316:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	e00d      	b.n	800b33e <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff fb71 	bl	800aa0c <lfs_file_flush>
 800b32a:	61f8      	str	r0, [r7, #28]
    if (err) {
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <lfs_file_rawseek+0x102>
        return err;
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	e003      	b.n	800b33e <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b33a:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 800b33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3730      	adds	r7, #48	; 0x30
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f7fa fd16 	bl	8005d98 <lfs_max>
 800b36c:	4603      	mov	r3, r0
 800b36e:	e001      	b.n	800b374 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b374:	4618      	mov	r0, r3
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <lfs_rawremove>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b09e      	sub	sp, #120	; 0x78
 800b380:	af02      	add	r7, sp, #8
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 f98c 	bl	800c6a4 <lfs_fs_forceconsistency>
 800b38c:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err) {
 800b38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <lfs_rawremove+0x1c>
        return err;
 800b394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b396:	e0c2      	b.n	800b51e <lfs_rawremove+0x1a2>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 800b398:	463a      	mov	r2, r7
 800b39a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b39e:	2300      	movs	r3, #0
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7fc ffe7 	bl	8008374 <lfs_dir_find>
 800b3a6:	66b8      	str	r0, [r7, #104]	; 0x68
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 800b3a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	db09      	blt.n	800b3c2 <lfs_rawremove+0x46>
 800b3ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fb fa17 	bl	80067e4 <lfs_tag_id>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d107      	bne.n	800b3d2 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 800b3c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	da01      	bge.n	800b3cc <lfs_rawremove+0x50>
 800b3c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3ca:	e0a8      	b.n	800b51e <lfs_rawremove+0x1a2>
 800b3cc:	f06f 0315 	mvn.w	r3, #21
 800b3d0:	e0a5      	b.n	800b51e <lfs_rawremove+0x1a2>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d6:	617b      	str	r3, [r7, #20]
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800b3d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fb f9d8 	bl	8006790 <lfs_tag_type3>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d148      	bne.n	800b478 <lfs_rawremove+0xfc>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 800b3e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fb f9fb 	bl	80067e4 <lfs_tag_id>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 800b3f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3f6:	f043 0308 	orr.w	r3, r3, #8
 800b3fa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b3fe:	f107 020c 	add.w	r2, r7, #12
 800b402:	9200      	str	r2, [sp, #0]
 800b404:	4a48      	ldr	r2, [pc, #288]	; (800b528 <lfs_rawremove+0x1ac>)
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7fb fdd4 	bl	8006fb4 <lfs_dir_get>
 800b40c:	6678      	str	r0, [r7, #100]	; 0x64
        if (res < 0) {
 800b40e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b410:	2b00      	cmp	r3, #0
 800b412:	da01      	bge.n	800b418 <lfs_rawremove+0x9c>
            return (int)res;
 800b414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b416:	e082      	b.n	800b51e <lfs_rawremove+0x1a2>
        }
        lfs_pair_fromle32(pair);
 800b418:	f107 030c 	add.w	r3, r7, #12
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fb f952 	bl	80066c6 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 800b422:	f107 020c 	add.w	r2, r7, #12
 800b426:	f107 0314 	add.w	r3, r7, #20
 800b42a:	3308      	adds	r3, #8
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7fc fe8e 	bl	8008150 <lfs_dir_fetch>
 800b434:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800b436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <lfs_rawremove+0xc4>
            return err;
 800b43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43e:	e06e      	b.n	800b51e <lfs_rawremove+0x1a2>
        }

        if (dir.m.count > 0 || dir.m.split) {
 800b440:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b442:	2b00      	cmp	r3, #0
 800b444:	d103      	bne.n	800b44e <lfs_rawremove+0xd2>
 800b446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <lfs_rawremove+0xd8>
            return LFS_ERR_NOTEMPTY;
 800b44e:	f06f 0326 	mvn.w	r3, #38	; 0x26
 800b452:	e064      	b.n	800b51e <lfs_rawremove+0x1a2>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 800b454:	2101      	movs	r1, #1
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fea6 	bl	800c1a8 <lfs_fs_preporphans>
 800b45c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800b45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <lfs_rawremove+0xec>
            return err;
 800b464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b466:	e05a      	b.n	800b51e <lfs_rawremove+0x1a2>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	76bb      	strb	r3, [r7, #26]
        dir.id = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	833b      	strh	r3, [r7, #24]
        lfs->mlist = &dir;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f107 0214 	add.w	r2, r7, #20
 800b476:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 800b478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fb f9b2 	bl	80067e4 <lfs_tag_id>
 800b480:	4603      	mov	r3, r0
 800b482:	029b      	lsls	r3, r3, #10
 800b484:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800b488:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800b48c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b48e:	2300      	movs	r3, #0
 800b490:	663b      	str	r3, [r7, #96]	; 0x60
 800b492:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b496:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b49a:	2301      	movs	r3, #1
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7fe fc57 	bl	8009d50 <lfs_dir_commit>
 800b4a2:	66f8      	str	r0, [r7, #108]	; 0x6c
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 800b4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d004      	beq.n	800b4b4 <lfs_rawremove+0x138>
        lfs->mlist = dir.next;
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 800b4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4b2:	e034      	b.n	800b51e <lfs_rawremove+0x1a2>
    }

    lfs->mlist = dir.next;
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800b4ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fb f967 	bl	8006790 <lfs_tag_type3>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d129      	bne.n	800b51c <lfs_rawremove+0x1a0>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 800b4c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fe6b 	bl	800c1a8 <lfs_fs_preporphans>
 800b4d2:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800b4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <lfs_rawremove+0x162>
            return err;
 800b4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4dc:	e01f      	b.n	800b51e <lfs_rawremove+0x1a2>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 800b4de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b4e2:	f107 0314 	add.w	r3, r7, #20
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fd7e 	bl	800bfec <lfs_fs_pred>
 800b4f0:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800b4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <lfs_rawremove+0x180>
            return err;
 800b4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4fa:	e010      	b.n	800b51e <lfs_rawremove+0x1a2>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 800b4fc:	f107 0314 	add.w	r3, r7, #20
 800b500:	f103 0208 	add.w	r2, r3, #8
 800b504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7fd fa9a 	bl	8008a44 <lfs_dir_drop>
 800b510:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800b512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <lfs_rawremove+0x1a0>
            return err;
 800b518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b51a:	e000      	b.n	800b51e <lfs_rawremove+0x1a2>
        }
    }

    return 0;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3770      	adds	r7, #112	; 0x70
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	700ffc00 	.word	0x700ffc00

0800b52c <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <lfs_init+0x2c>
 800b54a:	4b9f      	ldr	r3, [pc, #636]	; (800b7c8 <lfs_init+0x29c>)
 800b54c:	4a9f      	ldr	r2, [pc, #636]	; (800b7cc <lfs_init+0x2a0>)
 800b54e:	f640 7147 	movw	r1, #3911	; 0xf47
 800b552:	489f      	ldr	r0, [pc, #636]	; (800b7d0 <lfs_init+0x2a4>)
 800b554:	f005 f830 	bl	80105b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d106      	bne.n	800b570 <lfs_init+0x44>
 800b562:	4b9c      	ldr	r3, [pc, #624]	; (800b7d4 <lfs_init+0x2a8>)
 800b564:	4a99      	ldr	r2, [pc, #612]	; (800b7cc <lfs_init+0x2a0>)
 800b566:	f640 7148 	movw	r1, #3912	; 0xf48
 800b56a:	4899      	ldr	r0, [pc, #612]	; (800b7d0 <lfs_init+0x2a4>)
 800b56c:	f005 f824 	bl	80105b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <lfs_init+0x5c>
 800b57a:	4b97      	ldr	r3, [pc, #604]	; (800b7d8 <lfs_init+0x2ac>)
 800b57c:	4a93      	ldr	r2, [pc, #588]	; (800b7cc <lfs_init+0x2a0>)
 800b57e:	f640 7149 	movw	r1, #3913	; 0xf49
 800b582:	4893      	ldr	r0, [pc, #588]	; (800b7d0 <lfs_init+0x2a4>)
 800b584:	f005 f818 	bl	80105b8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b592:	6952      	ldr	r2, [r2, #20]
 800b594:	fbb3 f1f2 	udiv	r1, r3, r2
 800b598:	fb02 f201 	mul.w	r2, r2, r1
 800b59c:	1a9b      	subs	r3, r3, r2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d006      	beq.n	800b5b0 <lfs_init+0x84>
 800b5a2:	4b8e      	ldr	r3, [pc, #568]	; (800b7dc <lfs_init+0x2b0>)
 800b5a4:	4a89      	ldr	r2, [pc, #548]	; (800b7cc <lfs_init+0x2a0>)
 800b5a6:	f640 714d 	movw	r1, #3917	; 0xf4d
 800b5aa:	4889      	ldr	r0, [pc, #548]	; (800b7d0 <lfs_init+0x2a4>)
 800b5ac:	f005 f804 	bl	80105b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b5ba:	6992      	ldr	r2, [r2, #24]
 800b5bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c0:	fb02 f201 	mul.w	r2, r2, r1
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <lfs_init+0xac>
 800b5ca:	4b85      	ldr	r3, [pc, #532]	; (800b7e0 <lfs_init+0x2b4>)
 800b5cc:	4a7f      	ldr	r2, [pc, #508]	; (800b7cc <lfs_init+0x2a0>)
 800b5ce:	f640 714e 	movw	r1, #3918	; 0xf4e
 800b5d2:	487f      	ldr	r0, [pc, #508]	; (800b7d0 <lfs_init+0x2a4>)
 800b5d4:	f004 fff0 	bl	80105b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b5e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b5e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5e8:	fb02 f201 	mul.w	r2, r2, r1
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d006      	beq.n	800b600 <lfs_init+0xd4>
 800b5f2:	4b7c      	ldr	r3, [pc, #496]	; (800b7e4 <lfs_init+0x2b8>)
 800b5f4:	4a75      	ldr	r2, [pc, #468]	; (800b7cc <lfs_init+0x2a0>)
 800b5f6:	f640 714f 	movw	r1, #3919	; 0xf4f
 800b5fa:	4875      	ldr	r0, [pc, #468]	; (800b7d0 <lfs_init+0x2a4>)
 800b5fc:	f004 ffdc 	bl	80105b8 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	3b08      	subs	r3, #8
 800b608:	f04f 32ff 	mov.w	r2, #4294967295
 800b60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b610:	4618      	mov	r0, r3
 800b612:	f7fa fc08 	bl	8005e26 <lfs_npw2>
 800b616:	4603      	mov	r3, r0
 800b618:	009a      	lsls	r2, r3, #2
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	429a      	cmp	r2, r3
 800b622:	d906      	bls.n	800b632 <lfs_init+0x106>
 800b624:	4b70      	ldr	r3, [pc, #448]	; (800b7e8 <lfs_init+0x2bc>)
 800b626:	4a69      	ldr	r2, [pc, #420]	; (800b7cc <lfs_init+0x2a0>)
 800b628:	f640 7153 	movw	r1, #3923	; 0xf53
 800b62c:	4868      	ldr	r0, [pc, #416]	; (800b7d0 <lfs_init+0x2a4>)
 800b62e:	f004 ffc3 	bl	80105b8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <lfs_init+0x11e>
 800b63c:	4b6b      	ldr	r3, [pc, #428]	; (800b7ec <lfs_init+0x2c0>)
 800b63e:	4a63      	ldr	r2, [pc, #396]	; (800b7cc <lfs_init+0x2a0>)
 800b640:	f640 715b 	movw	r1, #3931	; 0xf5b
 800b644:	4862      	ldr	r0, [pc, #392]	; (800b7d0 <lfs_init+0x2a4>)
 800b646:	f004 ffb7 	bl	80105b8 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d005      	beq.n	800b660 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	e010      	b.n	800b682 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b666:	4618      	mov	r0, r3
 800b668:	f7fa fc45 	bl	8005ef6 <lfs_malloc>
 800b66c:	4602      	mov	r2, r0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800b67a:	f06f 030b 	mvn.w	r3, #11
 800b67e:	60fb      	str	r3, [r7, #12]
            goto cleanup;
 800b680:	e0fe      	b.n	800b880 <lfs_init+0x354>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d005      	beq.n	800b698 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	61da      	str	r2, [r3, #28]
 800b696:	e010      	b.n	800b6ba <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fa fc29 	bl	8005ef6 <lfs_malloc>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d103      	bne.n	800b6ba <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800b6b2:	f06f 030b 	mvn.w	r3, #11
 800b6b6:	60fb      	str	r3, [r7, #12]
            goto cleanup;
 800b6b8:	e0e2      	b.n	800b880 <lfs_init+0x354>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7fa fc3f 	bl	8005f42 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3310      	adds	r3, #16
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7fa fc39 	bl	8005f42 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <lfs_init+0x1bc>
 800b6da:	4b45      	ldr	r3, [pc, #276]	; (800b7f0 <lfs_init+0x2c4>)
 800b6dc:	4a3b      	ldr	r2, [pc, #236]	; (800b7cc <lfs_init+0x2a0>)
 800b6de:	f640 7179 	movw	r1, #3961	; 0xf79
 800b6e2:	483b      	ldr	r0, [pc, #236]	; (800b7d0 <lfs_init+0x2a4>)
 800b6e4:	f004 ff68 	bl	80105b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ee:	f003 0307 	and.w	r3, r3, #7
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <lfs_init+0x1d8>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	f003 0303 	and.w	r3, r3, #3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <lfs_init+0x1e6>
 800b704:	4b3b      	ldr	r3, [pc, #236]	; (800b7f4 <lfs_init+0x2c8>)
 800b706:	4a31      	ldr	r2, [pc, #196]	; (800b7cc <lfs_init+0x2a0>)
 800b708:	f640 717b 	movw	r1, #3963	; 0xf7b
 800b70c:	4830      	ldr	r0, [pc, #192]	; (800b7d0 <lfs_init+0x2a4>)
 800b70e:	f004 ff53 	bl	80105b8 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d005      	beq.n	800b728 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	665a      	str	r2, [r3, #100]	; 0x64
 800b726:	e010      	b.n	800b74a <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fa fbe1 	bl	8005ef6 <lfs_malloc>
 800b734:	4602      	mov	r2, r0
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d103      	bne.n	800b74a <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800b742:	f06f 030b 	mvn.w	r3, #11
 800b746:	60fb      	str	r3, [r7, #12]
            goto cleanup;
 800b748:	e09a      	b.n	800b880 <lfs_init+0x354>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b750:	2bff      	cmp	r3, #255	; 0xff
 800b752:	d906      	bls.n	800b762 <lfs_init+0x236>
 800b754:	4b28      	ldr	r3, [pc, #160]	; (800b7f8 <lfs_init+0x2cc>)
 800b756:	4a1d      	ldr	r2, [pc, #116]	; (800b7cc <lfs_init+0x2a0>)
 800b758:	f640 7187 	movw	r1, #3975	; 0xf87
 800b75c:	481c      	ldr	r0, [pc, #112]	; (800b7d0 <lfs_init+0x2a4>)
 800b75e:	f004 ff2b 	bl	80105b8 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b770:	2b00      	cmp	r3, #0
 800b772:	d102      	bne.n	800b77a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	22ff      	movs	r2, #255	; 0xff
 800b778:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b780:	2b00      	cmp	r3, #0
 800b782:	da06      	bge.n	800b792 <lfs_init+0x266>
 800b784:	4b1d      	ldr	r3, [pc, #116]	; (800b7fc <lfs_init+0x2d0>)
 800b786:	4a11      	ldr	r2, [pc, #68]	; (800b7cc <lfs_init+0x2a0>)
 800b788:	f640 718d 	movw	r1, #3981	; 0xf8d
 800b78c:	4810      	ldr	r0, [pc, #64]	; (800b7d0 <lfs_init+0x2a4>)
 800b78e:	f004 ff13 	bl	80105b8 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <lfs_init+0x280>
        lfs->file_max = LFS_FILE_MAX;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b7aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d924      	bls.n	800b804 <lfs_init+0x2d8>
 800b7ba:	4b11      	ldr	r3, [pc, #68]	; (800b800 <lfs_init+0x2d4>)
 800b7bc:	4a03      	ldr	r2, [pc, #12]	; (800b7cc <lfs_init+0x2a0>)
 800b7be:	f640 7193 	movw	r1, #3987	; 0xf93
 800b7c2:	4803      	ldr	r0, [pc, #12]	; (800b7d0 <lfs_init+0x2a4>)
 800b7c4:	f004 fef8 	bl	80105b8 <__assert_func>
 800b7c8:	08012924 	.word	0x08012924
 800b7cc:	080130d0 	.word	0x080130d0
 800b7d0:	08012598 	.word	0x08012598
 800b7d4:	08012940 	.word	0x08012940
 800b7d8:	0801295c 	.word	0x0801295c
 800b7dc:	08012978 	.word	0x08012978
 800b7e0:	080129a8 	.word	0x080129a8
 800b7e4:	080129d8 	.word	0x080129d8
 800b7e8:	08012a0c 	.word	0x08012a0c
 800b7ec:	08012a58 	.word	0x08012a58
 800b7f0:	08012a74 	.word	0x08012a74
 800b7f4:	08012a94 	.word	0x08012a94
 800b7f8:	08012ae8 	.word	0x08012ae8
 800b7fc:	08012b04 	.word	0x08012b04
 800b800:	08012b28 	.word	0x08012b28
    lfs->attr_max = lfs->cfg->attr_max;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <lfs_init+0x2f2>
        lfs->attr_max = LFS_ATTR_MAX;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b81c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b822:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d906      	bls.n	800b83c <lfs_init+0x310>
 800b82e:	4b18      	ldr	r3, [pc, #96]	; (800b890 <lfs_init+0x364>)
 800b830:	4a18      	ldr	r2, [pc, #96]	; (800b894 <lfs_init+0x368>)
 800b832:	f640 7199 	movw	r1, #3993	; 0xf99
 800b836:	4818      	ldr	r0, [pc, #96]	; (800b898 <lfs_init+0x36c>)
 800b838:	f004 febe 	bl	80105b8 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295
 800b842:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f04f 32ff 	mov.w	r2, #4294967295
 800b84a:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	333c      	adds	r3, #60	; 0x3c
 800b85c:	2200      	movs	r2, #0
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3330      	adds	r3, #48	; 0x30
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	605a      	str	r2, [r3, #4]
 800b86e:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3348      	adds	r3, #72	; 0x48
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	605a      	str	r2, [r3, #4]
 800b87a:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e003      	b.n	800b888 <lfs_init+0x35c>

cleanup:
    lfs_deinit(lfs);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f80b 	bl	800b89c <lfs_deinit>
    return err;
 800b886:	68fb      	ldr	r3, [r7, #12]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	08012b44 	.word	0x08012b44
 800b894:	080130d0 	.word	0x080130d0
 800b898:	08012598 	.word	0x08012598

0800b89c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d104      	bne.n	800b8b8 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fa fb2b 	bl	8005f0e <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d104      	bne.n	800b8cc <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fa fb21 	bl	8005f0e <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d104      	bne.n	800b8e0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fa fb17 	bl	8005f0e <lfs_free>
    }

    return 0;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b09a      	sub	sp, #104	; 0x68
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
    int err = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	667b      	str	r3, [r7, #100]	; 0x64
    {
        err = lfs_init(lfs, cfg);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fe15 	bl	800b52c <lfs_init>
 800b902:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800b904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <lfs_rawformat+0x22>
            return err;
 800b90a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b90c:	e082      	b.n	800ba14 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b918:	461a      	mov	r2, r3
 800b91a:	2100      	movs	r1, #0
 800b91c:	f004 fee4 	bl	80106e8 <memset>
        lfs->free.off = 0;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92c:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fa fa3e 	bl	8005db8 <lfs_min>
 800b93c:	4602      	mov	r2, r0
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7fb f979 	bl	8006c40 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800b94e:	f107 030c 	add.w	r3, r7, #12
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7fc fffb 	bl	8008950 <lfs_dir_alloc>
 800b95a:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800b95c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d14f      	bne.n	800ba02 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800b962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b96c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800b96e:	633b      	str	r3, [r7, #48]	; 0x30
            .block_count = lfs->cfg->block_count,
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b974:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800b976:	637b      	str	r3, [r7, #52]	; 0x34
            .name_max    = lfs->name_max,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800b97c:	63bb      	str	r3, [r7, #56]	; 0x38
            .file_max    = lfs->file_max,
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
            .attr_max    = lfs->attr_max,
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800b988:	643b      	str	r3, [r7, #64]	; 0x40
        };

        lfs_superblock_tole32(&superblock);
 800b98a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fb f897 	bl	8006ac2 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800b994:	4b21      	ldr	r3, [pc, #132]	; (800ba1c <lfs_rawformat+0x130>)
 800b996:	647b      	str	r3, [r7, #68]	; 0x44
 800b998:	2300      	movs	r3, #0
 800b99a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b99c:	4b20      	ldr	r3, [pc, #128]	; (800ba20 <lfs_rawformat+0x134>)
 800b99e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a0:	4b20      	ldr	r3, [pc, #128]	; (800ba24 <lfs_rawformat+0x138>)
 800b9a2:	653b      	str	r3, [r7, #80]	; 0x50
 800b9a4:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <lfs_rawformat+0x13c>)
 800b9a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b9a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9ae:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b9b2:	f107 010c 	add.w	r1, r7, #12
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7fe f9c9 	bl	8009d50 <lfs_dir_commit>
 800b9be:	6678      	str	r0, [r7, #100]	; 0x64
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800b9c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d11f      	bne.n	800ba06 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800b9cc:	f107 010c 	add.w	r1, r7, #12
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7fe f9bb 	bl	8009d50 <lfs_dir_commit>
 800b9da:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800b9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d113      	bne.n	800ba0a <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	663b      	str	r3, [r7, #96]	; 0x60
 800b9ea:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b9ee:	f107 030c 	add.w	r3, r7, #12
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7fc fbab 	bl	8008150 <lfs_dir_fetch>
 800b9fa:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800b9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	e004      	b.n	800ba0c <lfs_rawformat+0x120>
            goto cleanup;
 800ba02:	bf00      	nop
 800ba04:	e002      	b.n	800ba0c <lfs_rawformat+0x120>
            goto cleanup;
 800ba06:	bf00      	nop
 800ba08:	e000      	b.n	800ba0c <lfs_rawformat+0x120>
            goto cleanup;
 800ba0a:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff ff45 	bl	800b89c <lfs_deinit>
    return err;
 800ba12:	6e7b      	ldr	r3, [r7, #100]	; 0x64

}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3768      	adds	r7, #104	; 0x68
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	40100000 	.word	0x40100000
 800ba20:	0ff00008 	.word	0x0ff00008
 800ba24:	08012b74 	.word	0x08012b74
 800ba28:	20100018 	.word	0x20100018

0800ba2c <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b09c      	sub	sp, #112	; 0x70
 800ba30:	af04      	add	r7, sp, #16
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff fd77 	bl	800b52c <lfs_init>
 800ba3e:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800ba40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <lfs_rawmount+0x1e>
        return err;
 800ba46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba48:	e192      	b.n	800bd70 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800ba4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba4e:	2220      	movs	r2, #32
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f004 fe48 	bl	80106e8 <memset>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	643b      	str	r3, [r7, #64]	; 0x40
    lfs_block_t cycle = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800ba60:	e10b      	b.n	800bc7a <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba66:	6a1b      	ldr	r3, [r3, #32]
 800ba68:	085b      	lsrs	r3, r3, #1
 800ba6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d303      	bcc.n	800ba78 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800ba70:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ba74:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800ba76:	e177      	b.n	800bd68 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 800ba78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	647b      	str	r3, [r7, #68]	; 0x44
 800ba82:	4b8a      	ldr	r3, [pc, #552]	; (800bcac <lfs_rawmount+0x280>)
 800ba84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba86:	2308      	movs	r3, #8
 800ba88:	64fb      	str	r3, [r7, #76]	; 0x4c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800ba8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba8e:	f103 0218 	add.w	r2, r3, #24
 800ba92:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ba96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ba9a:	9303      	str	r3, [sp, #12]
 800ba9c:	4b84      	ldr	r3, [pc, #528]	; (800bcb0 <lfs_rawmount+0x284>)
 800ba9e:	9302      	str	r3, [sp, #8]
 800baa0:	2300      	movs	r3, #0
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	4b83      	ldr	r3, [pc, #524]	; (800bcb4 <lfs_rawmount+0x288>)
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4b83      	ldr	r3, [pc, #524]	; (800bcb8 <lfs_rawmount+0x28c>)
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7fb ffde 	bl	8007a6c <lfs_dir_fetchmatch>
 800bab0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800bab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da02      	bge.n	800babe <lfs_rawmount+0x92>
            err = tag;
 800bab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baba:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800babc:	e154      	b.n	800bd68 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800babe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80cd 	beq.w	800bc60 <lfs_rawmount+0x234>
 800bac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fa fe3e 	bl	800674a <lfs_tag_isdelete>
 800bace:	4603      	mov	r3, r0
 800bad0:	f083 0301 	eor.w	r3, r3, #1
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 80c2 	beq.w	800bc60 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 800badc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800bae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800bae8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	4b72      	ldr	r3, [pc, #456]	; (800bcbc <lfs_rawmount+0x290>)
 800baf4:	4a70      	ldr	r2, [pc, #448]	; (800bcb8 <lfs_rawmount+0x28c>)
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7fb fa5c 	bl	8006fb4 <lfs_dir_get>
 800bafc:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800bafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	da02      	bge.n	800bb0a <lfs_rawmount+0xde>
                err = tag;
 800bb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb06:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800bb08:	e12e      	b.n	800bd68 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fa ff9f 	bl	8006a52 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	0c1b      	lsrs	r3, r3, #16
 800bb18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800bb22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d103      	bne.n	800bb32 <lfs_rawmount+0x106>
 800bb2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d011      	beq.n	800bb56 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800bb32:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800bb36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bb3a:	4a61      	ldr	r2, [pc, #388]	; (800bcc0 <lfs_rawmount+0x294>)
 800bb3c:	9201      	str	r2, [sp, #4]
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	460b      	mov	r3, r1
 800bb42:	f241 0235 	movw	r2, #4149	; 0x1035
 800bb46:	495f      	ldr	r1, [pc, #380]	; (800bcc4 <lfs_rawmount+0x298>)
 800bb48:	485f      	ldr	r0, [pc, #380]	; (800bcc8 <lfs_rawmount+0x29c>)
 800bb4a:	f005 f89d 	bl	8010c88 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800bb4e:	f06f 0315 	mvn.w	r3, #21
 800bb52:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800bb54:	e108      	b.n	800bd68 <lfs_rawmount+0x33c>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d018      	beq.n	800bb8e <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d910      	bls.n	800bb88 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800bb66:	69b9      	ldr	r1, [r7, #24]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb6c:	4a54      	ldr	r2, [pc, #336]	; (800bcc0 <lfs_rawmount+0x294>)
 800bb6e:	9201      	str	r2, [sp, #4]
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	460b      	mov	r3, r1
 800bb74:	f241 023e 	movw	r2, #4158	; 0x103e
 800bb78:	4952      	ldr	r1, [pc, #328]	; (800bcc4 <lfs_rawmount+0x298>)
 800bb7a:	4854      	ldr	r0, [pc, #336]	; (800bccc <lfs_rawmount+0x2a0>)
 800bb7c:	f005 f884 	bl	8010c88 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800bb80:	f06f 0315 	mvn.w	r3, #21
 800bb84:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800bb86:	e0ef      	b.n	800bd68 <lfs_rawmount+0x33c>
                }

                lfs->name_max = superblock.name_max;
 800bb88:	69ba      	ldr	r2, [r7, #24]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d018      	beq.n	800bbc6 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800bb94:	69fa      	ldr	r2, [r7, #28]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d910      	bls.n	800bbc0 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800bb9e:	69f9      	ldr	r1, [r7, #28]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	4a46      	ldr	r2, [pc, #280]	; (800bcc0 <lfs_rawmount+0x294>)
 800bba6:	9201      	str	r2, [sp, #4]
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	460b      	mov	r3, r1
 800bbac:	f241 0249 	movw	r2, #4169	; 0x1049
 800bbb0:	4944      	ldr	r1, [pc, #272]	; (800bcc4 <lfs_rawmount+0x298>)
 800bbb2:	4847      	ldr	r0, [pc, #284]	; (800bcd0 <lfs_rawmount+0x2a4>)
 800bbb4:	f005 f868 	bl	8010c88 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800bbb8:	f06f 0315 	mvn.w	r3, #21
 800bbbc:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800bbbe:	e0d3      	b.n	800bd68 <lfs_rawmount+0x33c>
                }

                lfs->file_max = superblock.file_max;
 800bbc0:	69fa      	ldr	r2, [r7, #28]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d018      	beq.n	800bbfe <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 800bbcc:	6a3a      	ldr	r2, [r7, #32]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d910      	bls.n	800bbf8 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800bbd6:	6a39      	ldr	r1, [r7, #32]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbdc:	4a38      	ldr	r2, [pc, #224]	; (800bcc0 <lfs_rawmount+0x294>)
 800bbde:	9201      	str	r2, [sp, #4]
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	f241 0254 	movw	r2, #4180	; 0x1054
 800bbe8:	4936      	ldr	r1, [pc, #216]	; (800bcc4 <lfs_rawmount+0x298>)
 800bbea:	483a      	ldr	r0, [pc, #232]	; (800bcd4 <lfs_rawmount+0x2a8>)
 800bbec:	f005 f84c 	bl	8010c88 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800bbf0:	f06f 0315 	mvn.w	r3, #21
 800bbf4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800bbf6:	e0b7      	b.n	800bd68 <lfs_rawmount+0x33c>
                }

                lfs->attr_max = superblock.attr_max;
 800bbf8:	6a3a      	ldr	r2, [r7, #32]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d011      	beq.n	800bc2e <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800bc0a:	6979      	ldr	r1, [r7, #20]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	4a2b      	ldr	r2, [pc, #172]	; (800bcc0 <lfs_rawmount+0x294>)
 800bc14:	9201      	str	r2, [sp, #4]
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	f241 025e 	movw	r2, #4190	; 0x105e
 800bc1e:	4929      	ldr	r1, [pc, #164]	; (800bcc4 <lfs_rawmount+0x298>)
 800bc20:	482d      	ldr	r0, [pc, #180]	; (800bcd8 <lfs_rawmount+0x2ac>)
 800bc22:	f005 f831 	bl	8010c88 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800bc26:	f06f 0315 	mvn.w	r3, #21
 800bc2a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800bc2c:	e09c      	b.n	800bd68 <lfs_rawmount+0x33c>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d012      	beq.n	800bc60 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800bc3a:	6979      	ldr	r1, [r7, #20]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc40:	6a1b      	ldr	r3, [r3, #32]
 800bc42:	4a1f      	ldr	r2, [pc, #124]	; (800bcc0 <lfs_rawmount+0x294>)
 800bc44:	9201      	str	r2, [sp, #4]
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	f241 0265 	movw	r2, #4197	; 0x1065
 800bc4e:	491d      	ldr	r1, [pc, #116]	; (800bcc4 <lfs_rawmount+0x298>)
 800bc50:	4822      	ldr	r0, [pc, #136]	; (800bcdc <lfs_rawmount+0x2b0>)
 800bc52:	f005 f819 	bl	8010c88 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800bc56:	f06f 0315 	mvn.w	r3, #21
 800bc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800bc5c:	bf00      	nop
 800bc5e:	e083      	b.n	800bd68 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7fc fa8b 	bl	8008188 <lfs_dir_getgstate>
 800bc72:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800bc74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d175      	bne.n	800bd66 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 800bc7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc7e:	3318      	adds	r3, #24
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fa fcae 	bl	80065e2 <lfs_pair_isnull>
 800bc86:	4603      	mov	r3, r0
 800bc88:	f083 0301 	eor.w	r3, r3, #1
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f47f aee7 	bne.w	800ba62 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3320      	adds	r3, #32
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fa fca2 	bl	80065e2 <lfs_pair_isnull>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d01d      	beq.n	800bce0 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 800bca4:	f06f 0315 	mvn.w	r3, #21
 800bca8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800bcaa:	e05d      	b.n	800bd68 <lfs_rawmount+0x33c>
 800bcac:	08012b74 	.word	0x08012b74
 800bcb0:	080082e1 	.word	0x080082e1
 800bcb4:	0ff00008 	.word	0x0ff00008
 800bcb8:	7ffffc00 	.word	0x7ffffc00
 800bcbc:	20100018 	.word	0x20100018
 800bcc0:	08012694 	.word	0x08012694
 800bcc4:	08012598 	.word	0x08012598
 800bcc8:	08012b80 	.word	0x08012b80
 800bccc:	08012bac 	.word	0x08012bac
 800bcd0:	08012be0 	.word	0x08012be0
 800bcd4:	08012c14 	.word	0x08012c14
 800bcd8:	08012c48 	.word	0x08012c48
 800bcdc:	08012c7c 	.word	0x08012c7c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3330      	adds	r3, #48	; 0x30
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fa fdd2 	bl	800688e <lfs_gstate_iszero>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f083 0301 	eor.w	r3, r3, #1
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d010      	beq.n	800bd18 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd02:	491d      	ldr	r1, [pc, #116]	; (800bd78 <lfs_rawmount+0x34c>)
 800bd04:	9102      	str	r1, [sp, #8]
 800bd06:	9201      	str	r2, [sp, #4]
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	f241 027d 	movw	r2, #4221	; 0x107d
 800bd10:	491a      	ldr	r1, [pc, #104]	; (800bd7c <lfs_rawmount+0x350>)
 800bd12:	481b      	ldr	r0, [pc, #108]	; (800bd80 <lfs_rawmount+0x354>)
 800bd14:	f004 ffb8 	bl	8010c88 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fa fd06 	bl	800672e <lfs_tag_isvalid>
 800bd22:	4603      	mov	r3, r0
 800bd24:	f083 0301 	eor.w	r3, r3, #1
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd30:	441a      	add	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	333c      	adds	r3, #60	; 0x3c
 800bd3c:	3230      	adds	r2, #48	; 0x30
 800bd3e:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd40:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bd4c:	6a12      	ldr	r2, [r2, #32]
 800bd4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd52:	fb02 f201 	mul.w	r2, r2, r1
 800bd56:	1a9a      	subs	r2, r3, r2
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7fa ff7e 	bl	8006c5e <lfs_alloc_drop>

    return 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	e004      	b.n	800bd70 <lfs_rawmount+0x344>
            goto cleanup;
 800bd66:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f80b 	bl	800bd84 <lfs_rawunmount>
    return err;
 800bd6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3760      	adds	r7, #96	; 0x60
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	08012694 	.word	0x08012694
 800bd7c:	08012598 	.word	0x08012598
 800bd80:	08012cb0 	.word	0x08012cb0

0800bd84 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff fd85 	bl	800b89c <lfs_deinit>
 800bd92:	4603      	mov	r3, r0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800bd9c:	b590      	push	{r4, r7, lr}
 800bd9e:	b09d      	sub	sp, #116	; 0x74
 800bda0:	af04      	add	r7, sp, #16
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800bdaa:	f107 0318 	add.w	r3, r7, #24
 800bdae:	2220      	movs	r2, #32
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f004 fc98 	bl	80106e8 <memset>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800bdc0:	e0a8      	b.n	800bf14 <lfs_fs_rawtraverse+0x178>
        if (cycle >= lfs->cfg->block_count/2) {
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d302      	bcc.n	800bdd6 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800bdd0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800bdd4:	e103      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
        }
        cycle += 1;
 800bdd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd8:	3301      	adds	r3, #1
 800bdda:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800bddc:	2300      	movs	r3, #0
 800bdde:	65bb      	str	r3, [r7, #88]	; 0x58
 800bde0:	e014      	b.n	800be0c <lfs_fs_rawtraverse+0x70>
            int err = cb(data, dir.tail[i]);
 800bde2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bde4:	3306      	adds	r3, #6
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800bdec:	4413      	add	r3, r2
 800bdee:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
 800bdfa:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <lfs_fs_rawtraverse+0x6a>
                return err;
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	e0eb      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
        for (int i = 0; i < 2; i++) {
 800be06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be08:	3301      	adds	r3, #1
 800be0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be0e:	2b01      	cmp	r3, #1
 800be10:	dde7      	ble.n	800bde2 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800be12:	f107 0318 	add.w	r3, r7, #24
 800be16:	f103 0218 	add.w	r2, r3, #24
 800be1a:	f107 0318 	add.w	r3, r7, #24
 800be1e:	4619      	mov	r1, r3
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7fc f995 	bl	8008150 <lfs_dir_fetch>
 800be26:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <lfs_fs_rawtraverse+0x96>
            return err;
 800be2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be30:	e0d5      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800be32:	2300      	movs	r3, #0
 800be34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800be38:	e067      	b.n	800bf0a <lfs_fs_rawtraverse+0x16e>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800be3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800be3e:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800be40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be44:	f043 0308 	orr.w	r3, r3, #8
 800be48:	f107 0118 	add.w	r1, r7, #24
 800be4c:	f107 0210 	add.w	r2, r7, #16
 800be50:	9200      	str	r2, [sp, #0]
 800be52:	4a65      	ldr	r2, [pc, #404]	; (800bfe8 <lfs_fs_rawtraverse+0x24c>)
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f7fb f8ad 	bl	8006fb4 <lfs_dir_get>
 800be5a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800be5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da05      	bge.n	800be6e <lfs_fs_rawtraverse+0xd2>
                if (tag == LFS_ERR_NOENT) {
 800be62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be64:	f113 0f02 	cmn.w	r3, #2
 800be68:	d049      	beq.n	800befe <lfs_fs_rawtraverse+0x162>
                    continue;
                }
                return tag;
 800be6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6c:	e0b7      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
            }
            lfs_ctz_fromle32(&ctz);
 800be6e:	f107 0310 	add.w	r3, r7, #16
 800be72:	4618      	mov	r0, r3
 800be74:	f7fa fdbd 	bl	80069f2 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800be78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fa fc88 	bl	8006790 <lfs_tag_type3>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	f240 2302 	movw	r3, #514	; 0x202
 800be88:	429a      	cmp	r2, r3
 800be8a:	d113      	bne.n	800beb4 <lfs_fs_rawtraverse+0x118>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800be8c:	68f9      	ldr	r1, [r7, #12]
 800be8e:	6938      	ldr	r0, [r7, #16]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	9202      	str	r2, [sp, #8]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	9201      	str	r2, [sp, #4]
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	4603      	mov	r3, r0
 800be9e:	460a      	mov	r2, r1
 800bea0:	2100      	movs	r1, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7fe fa32 	bl	800a30c <lfs_ctz_traverse>
 800bea8:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800beaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d027      	beq.n	800bf00 <lfs_fs_rawtraverse+0x164>
                    return err;
 800beb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb2:	e094      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
                }
            } else if (includeorphans &&
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d022      	beq.n	800bf00 <lfs_fs_rawtraverse+0x164>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800beba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fa fc67 	bl	8006790 <lfs_tag_type3>
 800bec2:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800bec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bec8:	d11a      	bne.n	800bf00 <lfs_fs_rawtraverse+0x164>
                for (int i = 0; i < 2; i++) {
 800beca:	2300      	movs	r3, #0
 800becc:	653b      	str	r3, [r7, #80]	; 0x50
 800bece:	e012      	b.n	800bef6 <lfs_fs_rawtraverse+0x15a>
                    err = cb(data, (&ctz.head)[i]);
 800bed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	f107 0210 	add.w	r2, r7, #16
 800bed8:	4413      	add	r3, r2
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	4611      	mov	r1, r2
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	4798      	blx	r3
 800bee4:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800bee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <lfs_fs_rawtraverse+0x154>
                        return err;
 800beec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beee:	e076      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
                for (int i = 0; i < 2; i++) {
 800bef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef2:	3301      	adds	r3, #1
 800bef4:	653b      	str	r3, [r7, #80]	; 0x50
 800bef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef8:	2b01      	cmp	r3, #1
 800befa:	dde9      	ble.n	800bed0 <lfs_fs_rawtraverse+0x134>
 800befc:	e000      	b.n	800bf00 <lfs_fs_rawtraverse+0x164>
                    continue;
 800befe:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800bf00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bf04:	3301      	adds	r3, #1
 800bf06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800bf0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf0c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d392      	bcc.n	800be3a <lfs_fs_rawtraverse+0x9e>
    while (!lfs_pair_isnull(dir.tail)) {
 800bf14:	f107 0318 	add.w	r3, r7, #24
 800bf18:	3318      	adds	r3, #24
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fa fb61 	bl	80065e2 <lfs_pair_isnull>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f083 0301 	eor.w	r3, r3, #1
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f47f af4a 	bne.w	800bdc2 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf34:	e04f      	b.n	800bfd6 <lfs_fs_rawtraverse+0x23a>
        if (f->type != LFS_TYPE_REG) {
 800bf36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf38:	799b      	ldrb	r3, [r3, #6]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d147      	bne.n	800bfce <lfs_fs_rawtraverse+0x232>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800bf3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d01d      	beq.n	800bf86 <lfs_fs_rawtraverse+0x1ea>
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d117      	bne.n	800bf86 <lfs_fs_rawtraverse+0x1ea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800bf56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf58:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf60:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800bf62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	9202      	str	r2, [sp, #8]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	9201      	str	r2, [sp, #4]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	4623      	mov	r3, r4
 800bf72:	4602      	mov	r2, r0
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f7fe f9c9 	bl	800a30c <lfs_ctz_traverse>
 800bf7a:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800bf7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <lfs_fs_rawtraverse+0x1ea>
                return err;
 800bf82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf84:	e02b      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800bf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d01e      	beq.n	800bfd0 <lfs_fs_rawtraverse+0x234>
 800bf92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d118      	bne.n	800bfd0 <lfs_fs_rawtraverse+0x234>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800bf9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bfaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	9202      	str	r2, [sp, #8]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	9201      	str	r2, [sp, #4]
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	4623      	mov	r3, r4
 800bfba:	4602      	mov	r2, r0
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7fe f9a5 	bl	800a30c <lfs_ctz_traverse>
 800bfc2:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800bfc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <lfs_fs_rawtraverse+0x234>
                return err;
 800bfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfcc:	e007      	b.n	800bfde <lfs_fs_rawtraverse+0x242>
            continue;
 800bfce:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bfd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1ac      	bne.n	800bf36 <lfs_fs_rawtraverse+0x19a>
            }
        }
    }
#endif

    return 0;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3764      	adds	r7, #100	; 0x64
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd90      	pop	{r4, r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	700ffc00 	.word	0x700ffc00

0800bfec <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800c008:	e024      	b.n	800c054 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	085b      	lsrs	r3, r3, #1
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800c018:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800c01c:	e027      	b.n	800c06e <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	3301      	adds	r3, #1
 800c022:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3318      	adds	r3, #24
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fa faf4 	bl	8006618 <lfs_pair_cmp>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <lfs_fs_pred+0x4e>
            return 0;
 800c036:	2300      	movs	r3, #0
 800c038:	e019      	b.n	800c06e <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3318      	adds	r3, #24
 800c03e:	461a      	mov	r2, r3
 800c040:	6879      	ldr	r1, [r7, #4]
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f7fc f884 	bl	8008150 <lfs_dir_fetch>
 800c048:	6138      	str	r0, [r7, #16]
        if (err) {
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <lfs_fs_pred+0x68>
            return err;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	e00c      	b.n	800c06e <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3318      	adds	r3, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fa fac2 	bl	80065e2 <lfs_pair_isnull>
 800c05e:	4603      	mov	r3, r0
 800c060:	f083 0301 	eor.w	r3, r3, #1
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1cf      	bne.n	800c00a <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800c06a:	f06f 0301 	mvn.w	r3, #1
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800c076:	b5b0      	push	{r4, r5, r7, lr}
 800c078:	b08e      	sub	sp, #56	; 0x38
 800c07a:	af04      	add	r7, sp, #16
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800c096:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800c098:	6a3b      	ldr	r3, [r7, #32]
 800c09a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800c09c:	69dd      	ldr	r5, [r3, #28]
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	69fa      	ldr	r2, [r7, #28]
 800c0a4:	6852      	ldr	r2, [r2, #4]
 800c0a6:	2108      	movs	r1, #8
 800c0a8:	9103      	str	r1, [sp, #12]
 800c0aa:	f107 0110 	add.w	r1, r7, #16
 800c0ae:	9102      	str	r1, [sp, #8]
 800c0b0:	9201      	str	r2, [sp, #4]
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	462b      	mov	r3, r5
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	4601      	mov	r1, r0
 800c0ba:	6a38      	ldr	r0, [r7, #32]
 800c0bc:	f7f9 ff58 	bl	8005f70 <lfs_bd_read>
 800c0c0:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <lfs_fs_parent_match+0x56>
        return err;
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	e012      	b.n	800c0f2 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800c0cc:	f107 0310 	add.w	r3, r7, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fa faf8 	bl	80066c6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	1d1a      	adds	r2, r3, #4
 800c0da:	f107 0310 	add.w	r3, r7, #16
 800c0de:	4611      	mov	r1, r2
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fa fa99 	bl	8006618 <lfs_pair_cmp>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	bf14      	ite	ne
 800c0ec:	2301      	movne	r3, #1
 800c0ee:	2300      	moveq	r3, #0
 800c0f0:	b2db      	uxtb	r3, r3
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3728      	adds	r7, #40	; 0x28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c0fc <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08e      	sub	sp, #56	; 0x38
 800c100:	af04      	add	r7, sp, #16
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800c118:	e02f      	b.n	800c17a <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c11e:	6a1b      	ldr	r3, [r3, #32]
 800c120:	085b      	lsrs	r3, r3, #1
 800c122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c124:	429a      	cmp	r2, r3
 800c126:	d302      	bcc.n	800c12e <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800c128:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800c12c:	e032      	b.n	800c194 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	3301      	adds	r3, #1
 800c132:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800c142:	61bb      	str	r3, [r7, #24]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800c14a:	f107 0314 	add.w	r3, r7, #20
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	4b12      	ldr	r3, [pc, #72]	; (800c19c <lfs_fs_parent+0xa0>)
 800c152:	9302      	str	r3, [sp, #8]
 800c154:	2300      	movs	r3, #0
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	4b11      	ldr	r3, [pc, #68]	; (800c1a0 <lfs_fs_parent+0xa4>)
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4b11      	ldr	r3, [pc, #68]	; (800c1a4 <lfs_fs_parent+0xa8>)
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7fb fc83 	bl	8007a6c <lfs_dir_fetchmatch>
 800c166:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <lfs_fs_parent+0x7e>
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	f113 0f02 	cmn.w	r3, #2
 800c174:	d001      	beq.n	800c17a <lfs_fs_parent+0x7e>
            return tag;
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	e00c      	b.n	800c194 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3318      	adds	r3, #24
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fa fa2f 	bl	80065e2 <lfs_pair_isnull>
 800c184:	4603      	mov	r3, r0
 800c186:	f083 0301 	eor.w	r3, r3, #1
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1c4      	bne.n	800c11a <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800c190:	f06f 0301 	mvn.w	r3, #1
}
 800c194:	4618      	mov	r0, r3
 800c196:	3728      	adds	r7, #40	; 0x28
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	0800c077 	.word	0x0800c077
 800c1a0:	20000008 	.word	0x20000008
 800c1a4:	7ff003ff 	.word	0x7ff003ff

0800c1a8 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800c1a8:	b590      	push	{r4, r7, lr}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fa fb23 	bl	8006804 <lfs_tag_size>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10a      	bne.n	800c1da <lfs_fs_preporphans+0x32>
 800c1c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	da06      	bge.n	800c1da <lfs_fs_preporphans+0x32>
 800c1cc:	4b10      	ldr	r3, [pc, #64]	; (800c210 <lfs_fs_preporphans+0x68>)
 800c1ce:	4a11      	ldr	r2, [pc, #68]	; (800c214 <lfs_fs_preporphans+0x6c>)
 800c1d0:	f241 114d 	movw	r1, #4429	; 0x114d
 800c1d4:	4810      	ldr	r0, [pc, #64]	; (800c218 <lfs_fs_preporphans+0x70>)
 800c1d6:	f004 f9ef 	bl	80105b8 <__assert_func>
    lfs->gstate.tag += orphans;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1e2:	441a      	add	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3330      	adds	r3, #48	; 0x30
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fa fb67 	bl	80068c8 <lfs_gstate_hasorphans>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800c1fe:	ea44 0203 	orr.w	r2, r4, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd90      	pop	{r4, r7, pc}
 800c210:	08012ce8 	.word	0x08012ce8
 800c214:	080130dc 	.word	0x080130dc
 800c218:	08012598 	.word	0x08012598

0800c21c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	460b      	mov	r3, r1
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22e:	4a17      	ldr	r2, [pc, #92]	; (800c28c <lfs_fs_prepmove+0x70>)
 800c230:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800c232:	897b      	ldrh	r3, [r7, #10]
 800c234:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c238:	428b      	cmp	r3, r1
 800c23a:	d006      	beq.n	800c24a <lfs_fs_prepmove+0x2e>
 800c23c:	897b      	ldrh	r3, [r7, #10]
 800c23e:	029b      	lsls	r3, r3, #10
 800c240:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c244:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c248:	e000      	b.n	800c24c <lfs_fs_prepmove+0x30>
 800c24a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800c24c:	431a      	orrs	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800c252:	897b      	ldrh	r3, [r7, #10]
 800c254:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c258:	4293      	cmp	r3, r2
 800c25a:	d002      	beq.n	800c262 <lfs_fs_prepmove+0x46>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	e000      	b.n	800c264 <lfs_fs_prepmove+0x48>
 800c262:	2300      	movs	r3, #0
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800c268:	897b      	ldrh	r3, [r7, #10]
 800c26a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c26e:	4293      	cmp	r3, r2
 800c270:	d003      	beq.n	800c27a <lfs_fs_prepmove+0x5e>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3304      	adds	r3, #4
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	e000      	b.n	800c27c <lfs_fs_prepmove+0x60>
 800c27a:	2300      	movs	r3, #0
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c280:	bf00      	nop
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	800003ff 	.word	0x800003ff

0800c290 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800c290:	b5b0      	push	{r4, r5, r7, lr}
 800c292:	b092      	sub	sp, #72	; 0x48
 800c294:	af04      	add	r7, sp, #16
 800c296:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	333c      	adds	r3, #60	; 0x3c
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fa fb35 	bl	800690c <lfs_gstate_hasmove>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f083 0301 	eor.w	r3, r3, #1
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <lfs_fs_demove+0x22>
        return 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e049      	b.n	800c346 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fa fa90 	bl	80067e4 <lfs_tag_id>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	4b21      	ldr	r3, [pc, #132]	; (800c350 <lfs_fs_demove+0xc0>)
 800c2ca:	9302      	str	r3, [sp, #8]
 800c2cc:	9201      	str	r2, [sp, #4]
 800c2ce:	9400      	str	r4, [sp, #0]
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	f241 126a 	movw	r2, #4458	; 0x116a
 800c2d6:	491f      	ldr	r1, [pc, #124]	; (800c354 <lfs_fs_demove+0xc4>)
 800c2d8:	481f      	ldr	r0, [pc, #124]	; (800c358 <lfs_fs_demove+0xc8>)
 800c2da:	f004 fcd5 	bl	8010c88 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800c2e4:	f107 0308 	add.w	r3, r7, #8
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7fb ff30 	bl	8008150 <lfs_dir_fetch>
 800c2f0:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <lfs_fs_demove+0x6c>
        return err;
 800c2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fa:	e024      	b.n	800c346 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c300:	4618      	mov	r0, r3
 800c302:	f7fa fa6f 	bl	80067e4 <lfs_tag_id>
 800c306:	4603      	mov	r3, r0
 800c308:	867b      	strh	r3, [r7, #50]	; 0x32
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800c30a:	2200      	movs	r2, #0
 800c30c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7ff ff83 	bl	800c21c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800c316:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c318:	029b      	lsls	r3, r3, #10
 800c31a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c31e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c322:	62bb      	str	r3, [r7, #40]	; 0x28
 800c324:	2300      	movs	r3, #0
 800c326:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c328:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	2301      	movs	r3, #1
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f7fd fd0c 	bl	8009d50 <lfs_dir_commit>
 800c338:	6378      	str	r0, [r7, #52]	; 0x34
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <lfs_fs_demove+0xb4>
        return err;
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	e000      	b.n	800c346 <lfs_fs_demove+0xb6>
    }

    return 0;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3738      	adds	r7, #56	; 0x38
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bdb0      	pop	{r4, r5, r7, pc}
 800c34e:	bf00      	nop
 800c350:	08012694 	.word	0x08012694
 800c354:	08012598 	.word	0x08012598
 800c358:	08012d1c 	.word	0x08012d1c

0800c35c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800c35c:	b5b0      	push	{r4, r5, r7, lr}
 800c35e:	b0ac      	sub	sp, #176	; 0xb0
 800c360:	af04      	add	r7, sp, #16
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3330      	adds	r3, #48	; 0x30
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fa faab 	bl	80068c8 <lfs_gstate_hasorphans>
 800c372:	4603      	mov	r3, r0
 800c374:	f083 0301 	eor.w	r3, r3, #1
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <lfs_fs_deorphan+0x26>
        return 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	e17c      	b.n	800c67c <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800c388:	f107 030c 	add.w	r3, r7, #12
 800c38c:	2220      	movs	r2, #32
 800c38e:	2100      	movs	r1, #0
 800c390:	4618      	mov	r0, r3
 800c392:	f004 f9a9 	bl	80106e8 <memset>
 800c396:	2301      	movs	r3, #1
 800c398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c39c:	2301      	movs	r3, #1
 800c39e:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800c3a0:	e148      	b.n	800c634 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800c3a2:	f107 030c 	add.w	r3, r7, #12
 800c3a6:	f103 0218 	add.w	r2, r3, #24
 800c3aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7fb fecd 	bl	8008150 <lfs_dir_fetch>
 800c3b6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800c3ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <lfs_fs_deorphan+0x6c>
                return err;
 800c3c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3c6:	e159      	b.n	800c67c <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800c3c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3cc:	f083 0301 	eor.w	r3, r3, #1
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8124 	beq.w	800c620 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800c3d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c3dc:	f107 030c 	add.w	r3, r7, #12
 800c3e0:	3318      	adds	r3, #24
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff fe89 	bl	800c0fc <lfs_fs_parent>
 800c3ea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800c3ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	da07      	bge.n	800c406 <lfs_fs_deorphan+0xaa>
 800c3f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3fa:	f113 0f02 	cmn.w	r3, #2
 800c3fe:	d002      	beq.n	800c406 <lfs_fs_deorphan+0xaa>
                    return tag;
 800c400:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c404:	e13a      	b.n	800c67c <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 800c406:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c40a:	f113 0f02 	cmn.w	r3, #2
 800c40e:	d155      	bne.n	800c4bc <lfs_fs_deorphan+0x160>
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d052      	beq.n	800c4bc <lfs_fs_deorphan+0x160>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800c416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	4a9a      	ldr	r2, [pc, #616]	; (800c684 <lfs_fs_deorphan+0x328>)
 800c41c:	9201      	str	r2, [sp, #4]
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	460b      	mov	r3, r1
 800c422:	f241 12a3 	movw	r2, #4515	; 0x11a3
 800c426:	4998      	ldr	r1, [pc, #608]	; (800c688 <lfs_fs_deorphan+0x32c>)
 800c428:	4898      	ldr	r0, [pc, #608]	; (800c68c <lfs_fs_deorphan+0x330>)
 800c42a:	f004 fc2d 	bl	8010c88 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7fb fea4 	bl	8008188 <lfs_dir_getgstate>
 800c440:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    if (err) {
 800c444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <lfs_fs_deorphan+0xf6>
                        return err;
 800c44c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c450:	e114      	b.n	800c67c <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800c452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c456:	3318      	adds	r3, #24
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fa f94e 	bl	80066fa <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800c45e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c462:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800c466:	051a      	lsls	r2, r3, #20
 800c468:	4b89      	ldr	r3, [pc, #548]	; (800c690 <lfs_fs_deorphan+0x334>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	677b      	str	r3, [r7, #116]	; 0x74
 800c46e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c472:	3318      	adds	r3, #24
 800c474:	67bb      	str	r3, [r7, #120]	; 0x78
 800c476:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800c47a:	f107 010c 	add.w	r1, r7, #12
 800c47e:	2301      	movs	r3, #1
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7fd f977 	bl	8009774 <lfs_dir_orphaningcommit>
 800c486:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800c48a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c48e:	3318      	adds	r3, #24
 800c490:	4618      	mov	r0, r3
 800c492:	f7fa f918 	bl	80066c6 <lfs_pair_fromle32>
                    if (state < 0) {
 800c496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	da02      	bge.n	800c4a4 <lfs_fs_deorphan+0x148>
                        return state;
 800c49e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4a2:	e0eb      	b.n	800c67c <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 800c4a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800c4b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	f040 80af 	bne.w	800c618 <lfs_fs_deorphan+0x2bc>
                        goto restart;
 800c4ba:	e765      	b.n	800c388 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 800c4bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4c0:	f113 0f02 	cmn.w	r3, #2
 800c4c4:	f000 80ac 	beq.w	800c620 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800c4c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4cc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800c4d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	4a6e      	ldr	r2, [pc, #440]	; (800c694 <lfs_fs_deorphan+0x338>)
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7fa fd6a 	bl	8006fb4 <lfs_dir_get>
 800c4e0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800c4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	da02      	bge.n	800c4f2 <lfs_fs_deorphan+0x196>
                        return state;
 800c4ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4f0:	e0c4      	b.n	800c67c <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 800c4f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fa f8e5 	bl	80066c6 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	f103 0218 	add.w	r2, r3, #24
 800c504:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c508:	4611      	mov	r1, r2
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fa f8ae 	bl	800666c <lfs_pair_sync>
 800c510:	4603      	mov	r3, r0
 800c512:	f083 0301 	eor.w	r3, r3, #1
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 8081 	beq.w	800c620 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800c51e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c524:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c526:	4857      	ldr	r0, [pc, #348]	; (800c684 <lfs_fs_deorphan+0x328>)
 800c528:	9003      	str	r0, [sp, #12]
 800c52a:	9102      	str	r1, [sp, #8]
 800c52c:	9201      	str	r2, [sp, #4]
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	4623      	mov	r3, r4
 800c532:	f241 12ce 	movw	r2, #4558	; 0x11ce
 800c536:	4954      	ldr	r1, [pc, #336]	; (800c688 <lfs_fs_deorphan+0x32c>)
 800c538:	4857      	ldr	r0, [pc, #348]	; (800c698 <lfs_fs_deorphan+0x33c>)
 800c53a:	f004 fba5 	bl	8010c88 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800c53e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c542:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3330      	adds	r3, #48	; 0x30
 800c54a:	f107 020c 	add.w	r2, r7, #12
 800c54e:	4611      	mov	r1, r2
 800c550:	4618      	mov	r0, r3
 800c552:	f7fa f9ee 	bl	8006932 <lfs_gstate_hasmovehere>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01c      	beq.n	800c596 <lfs_fs_deorphan+0x23a>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c560:	4618      	mov	r0, r3
 800c562:	f7fa f93f 	bl	80067e4 <lfs_tag_id>
 800c566:	4603      	mov	r3, r0
 800c568:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                            LFS_DEBUG("Fixing move while fixing orphans "
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800c574:	4943      	ldr	r1, [pc, #268]	; (800c684 <lfs_fs_deorphan+0x328>)
 800c576:	9102      	str	r1, [sp, #8]
 800c578:	9201      	str	r2, [sp, #4]
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	4603      	mov	r3, r0
 800c57e:	f241 12d8 	movw	r2, #4568	; 0x11d8
 800c582:	4941      	ldr	r1, [pc, #260]	; (800c688 <lfs_fs_deorphan+0x32c>)
 800c584:	4845      	ldr	r0, [pc, #276]	; (800c69c <lfs_fs_deorphan+0x340>)
 800c586:	f004 fb7f 	bl	8010c88 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800c58a:	2200      	movs	r2, #0
 800c58c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff fe43 	bl	800c21c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800c596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fa f8ad 	bl	80066fa <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800c5a0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c5a4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d007      	beq.n	800c5bc <lfs_fs_deorphan+0x260>
 800c5ac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c5b0:	029b      	lsls	r3, r3, #10
 800c5b2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c5b6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c5ba:	e000      	b.n	800c5be <lfs_fs_deorphan+0x262>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5c6:	4b36      	ldr	r3, [pc, #216]	; (800c6a0 <lfs_fs_deorphan+0x344>)
 800c5c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c5d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c5d4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800c5d8:	f107 010c 	add.w	r1, r7, #12
 800c5dc:	2302      	movs	r3, #2
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7fd f8c8 	bl	8009774 <lfs_dir_orphaningcommit>
 800c5e4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800c5e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fa f86a 	bl	80066c6 <lfs_pair_fromle32>
                        if (state < 0) {
 800c5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da02      	bge.n	800c600 <lfs_fs_deorphan+0x2a4>
                            return state;
 800c5fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                    return tag;
 800c5fe:	e03d      	b.n	800c67c <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 800c600:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c604:	3301      	adds	r3, #1
 800c606:	b2db      	uxtb	r3, r3
 800c608:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800c60c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c610:	2b03      	cmp	r3, #3
 800c612:	d103      	bne.n	800c61c <lfs_fs_deorphan+0x2c0>
                            goto restart;
 800c614:	bf00      	nop
 800c616:	e6b7      	b.n	800c388 <lfs_fs_deorphan+0x2c>
                    continue;
 800c618:	bf00      	nop
 800c61a:	e00b      	b.n	800c634 <lfs_fs_deorphan+0x2d8>
                        }

                        // refetch tail
                        continue;
 800c61c:	bf00      	nop
 800c61e:	e009      	b.n	800c634 <lfs_fs_deorphan+0x2d8>
                    }
                }
            }

            pdir = dir;
 800c620:	f107 040c 	add.w	r4, r7, #12
 800c624:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 800c628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c62a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c62c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800c634:	f107 030c 	add.w	r3, r7, #12
 800c638:	3318      	adds	r3, #24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f9 ffd1 	bl	80065e2 <lfs_pair_isnull>
 800c640:	4603      	mov	r3, r0
 800c642:	f083 0301 	eor.w	r3, r3, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f47f aeaa 	bne.w	800c3a2 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3330      	adds	r3, #48	; 0x30
 800c652:	4618      	mov	r0, r3
 800c654:	f7fa f94b 	bl	80068ee <lfs_gstate_getorphans>
 800c658:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 800c65a:	461a      	mov	r2, r3
 800c65c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c660:	4619      	mov	r1, r3
 800c662:	4610      	mov	r0, r2
 800c664:	f7f9 fba8 	bl	8005db8 <lfs_min>
 800c668:	4603      	mov	r3, r0
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	425b      	negs	r3, r3
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	b25b      	sxtb	r3, r3
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff fd97 	bl	800c1a8 <lfs_fs_preporphans>
 800c67a:	4603      	mov	r3, r0
            found));
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	37a0      	adds	r7, #160	; 0xa0
 800c680:	46bd      	mov	sp, r7
 800c682:	bdb0      	pop	{r4, r5, r7, pc}
 800c684:	08012694 	.word	0x08012694
 800c688:	08012598 	.word	0x08012598
 800c68c:	08012d50 	.word	0x08012d50
 800c690:	000ffc08 	.word	0x000ffc08
 800c694:	7ffffc00 	.word	0x7ffffc00
 800c698:	08012d80 	.word	0x08012d80
 800c69c:	08012dc8 	.word	0x08012dc8
 800c6a0:	600ffc08 	.word	0x600ffc08

0800c6a4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff fdef 	bl	800c290 <lfs_fs_demove>
 800c6b2:	60f8      	str	r0, [r7, #12]
    if (err) {
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <lfs_fs_forceconsistency+0x1a>
        return err;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	e00a      	b.n	800c6d4 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 800c6be:	2101      	movs	r1, #1
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff fe4b 	bl	800c35c <lfs_fs_deorphan>
 800c6c6:	60f8      	str	r0, [r7, #12]
    if (err) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <lfs_fs_forceconsistency+0x2e>
        return err;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	e000      	b.n	800c6d4 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	601a      	str	r2, [r3, #0]
    return 0;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
	...

0800c704 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800c710:	f107 0208 	add.w	r2, r7, #8
 800c714:	2300      	movs	r3, #0
 800c716:	4907      	ldr	r1, [pc, #28]	; (800c734 <lfs_fs_rawsize+0x30>)
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff fb3f 	bl	800bd9c <lfs_fs_rawtraverse>
 800c71e:	60f8      	str	r0, [r7, #12]
    if (err) {
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <lfs_fs_rawsize+0x26>
        return err;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	e000      	b.n	800c72c <lfs_fs_rawsize+0x28>
    }

    return size;
 800c72a:	68bb      	ldr	r3, [r7, #8]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	0800c6dd 	.word	0x0800c6dd

0800c738 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
    if (err) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <lfs_format+0x18>
        return err;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	e005      	b.n	800c75c <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff f8ca 	bl	800b8ec <lfs_rawformat>
 800c758:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800c75a:	68fb      	ldr	r3, [r7, #12]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800c76e:	2300      	movs	r3, #0
 800c770:	60fb      	str	r3, [r7, #12]
    if (err) {
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <lfs_mount+0x18>
        return err;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	e005      	b.n	800c788 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff f954 	bl	800ba2c <lfs_rawmount>
 800c784:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800c786:	68fb      	ldr	r3, [r7, #12]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800c79a:	2300      	movs	r3, #0
 800c79c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <lfs_remove+0x18>
        return err;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	e005      	b.n	800c7b4 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7fe fde6 	bl	800b37c <lfs_rawremove>
 800c7b0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
 800c7c8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
    if (err) {
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <lfs_file_open+0x1c>
        return err;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	e01a      	b.n	800c80e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7dc:	68b9      	ldr	r1, [r7, #8]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fa f9a7 	bl	8006b32 <lfs_mlist_isopen>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	f083 0301 	eor.w	r3, r3, #1
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d106      	bne.n	800c7fe <lfs_file_open+0x42>
 800c7f0:	4b09      	ldr	r3, [pc, #36]	; (800c818 <lfs_file_open+0x5c>)
 800c7f2:	4a0a      	ldr	r2, [pc, #40]	; (800c81c <lfs_file_open+0x60>)
 800c7f4:	f241 5167 	movw	r1, #5479	; 0x1567
 800c7f8:	4809      	ldr	r0, [pc, #36]	; (800c820 <lfs_file_open+0x64>)
 800c7fa:	f003 fedd 	bl	80105b8 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	68b9      	ldr	r1, [r7, #8]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7fd ffcf 	bl	800a7a8 <lfs_file_rawopen>
 800c80a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800c80c:	697b      	ldr	r3, [r7, #20]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	08012e10 	.word	0x08012e10
 800c81c:	080130f0 	.word	0x080130f0
 800c820:	08012598 	.word	0x08012598

0800c824 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
    if (err) {
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <lfs_file_close+0x18>
        return err;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	e015      	b.n	800c868 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	4618      	mov	r0, r3
 800c844:	f7fa f975 	bl	8006b32 <lfs_mlist_isopen>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d106      	bne.n	800c85c <lfs_file_close+0x38>
 800c84e:	4b08      	ldr	r3, [pc, #32]	; (800c870 <lfs_file_close+0x4c>)
 800c850:	4a08      	ldr	r2, [pc, #32]	; (800c874 <lfs_file_close+0x50>)
 800c852:	f241 518b 	movw	r1, #5515	; 0x158b
 800c856:	4808      	ldr	r0, [pc, #32]	; (800c878 <lfs_file_close+0x54>)
 800c858:	f003 feae 	bl	80105b8 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7fd ffba 	bl	800a7d8 <lfs_file_rawclose>
 800c864:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800c866:	68fb      	ldr	r3, [r7, #12]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	08012e48 	.word	0x08012e48
 800c874:	08013100 	.word	0x08013100
 800c878:	08012598 	.word	0x08012598

0800c87c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800c88a:	2300      	movs	r3, #0
 800c88c:	617b      	str	r3, [r7, #20]
    if (err) {
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <lfs_file_read+0x1c>
        return err;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	e017      	b.n	800c8c8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fa f947 	bl	8006b32 <lfs_mlist_isopen>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <lfs_file_read+0x3c>
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <lfs_file_read+0x54>)
 800c8ac:	4a09      	ldr	r2, [pc, #36]	; (800c8d4 <lfs_file_read+0x58>)
 800c8ae:	f241 51ad 	movw	r1, #5549	; 0x15ad
 800c8b2:	4809      	ldr	r0, [pc, #36]	; (800c8d8 <lfs_file_read+0x5c>)
 800c8b4:	f003 fe80 	bl	80105b8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7fe fad6 	bl	800ae70 <lfs_file_rawread>
 800c8c4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800c8c6:	693b      	ldr	r3, [r7, #16]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	08012e48 	.word	0x08012e48
 800c8d4:	08013110 	.word	0x08013110
 800c8d8:	08012598 	.word	0x08012598

0800c8dc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	617b      	str	r3, [r7, #20]
    if (err) {
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <lfs_file_write+0x1c>
        return err;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	e017      	b.n	800c928 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fa f917 	bl	8006b32 <lfs_mlist_isopen>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d106      	bne.n	800c918 <lfs_file_write+0x3c>
 800c90a:	4b09      	ldr	r3, [pc, #36]	; (800c930 <lfs_file_write+0x54>)
 800c90c:	4a09      	ldr	r2, [pc, #36]	; (800c934 <lfs_file_write+0x58>)
 800c90e:	f241 51bf 	movw	r1, #5567	; 0x15bf
 800c912:	4809      	ldr	r0, [pc, #36]	; (800c938 <lfs_file_write+0x5c>)
 800c914:	f003 fe50 	bl	80105b8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7fe fc04 	bl	800b12c <lfs_file_rawwrite>
 800c924:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800c926:	693b      	ldr	r3, [r7, #16]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	08012e48 	.word	0x08012e48
 800c934:	08013120 	.word	0x08013120
 800c938:	08012598 	.word	0x08012598

0800c93c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800c94a:	2300      	movs	r3, #0
 800c94c:	617b      	str	r3, [r7, #20]
    if (err) {
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <lfs_file_seek+0x1c>
        return err;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	e017      	b.n	800c988 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95c:	68b9      	ldr	r1, [r7, #8]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fa f8e7 	bl	8006b32 <lfs_mlist_isopen>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d106      	bne.n	800c978 <lfs_file_seek+0x3c>
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <lfs_file_seek+0x54>)
 800c96c:	4a09      	ldr	r2, [pc, #36]	; (800c994 <lfs_file_seek+0x58>)
 800c96e:	f241 51d1 	movw	r1, #5585	; 0x15d1
 800c972:	4809      	ldr	r0, [pc, #36]	; (800c998 <lfs_file_seek+0x5c>)
 800c974:	f003 fe20 	bl	80105b8 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	68b9      	ldr	r1, [r7, #8]
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f7fe fc58 	bl	800b234 <lfs_file_rawseek>
 800c984:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800c986:	693b      	ldr	r3, [r7, #16]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3718      	adds	r7, #24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	08012e48 	.word	0x08012e48
 800c994:	08013130 	.word	0x08013130
 800c998:	08012598 	.word	0x08012598

0800c99c <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	617b      	str	r3, [r7, #20]
    if (err) {
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <lfs_dir_open+0x1a>
        return err;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	e019      	b.n	800c9ea <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ba:	68b9      	ldr	r1, [r7, #8]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fa f8b8 	bl	8006b32 <lfs_mlist_isopen>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f083 0301 	eor.w	r3, r3, #1
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <lfs_dir_open+0x40>
 800c9ce:	4b09      	ldr	r3, [pc, #36]	; (800c9f4 <lfs_dir_open+0x58>)
 800c9d0:	4a09      	ldr	r2, [pc, #36]	; (800c9f8 <lfs_dir_open+0x5c>)
 800c9d2:	f241 612e 	movw	r1, #5678	; 0x162e
 800c9d6:	4809      	ldr	r0, [pc, #36]	; (800c9fc <lfs_dir_open+0x60>)
 800c9d8:	f003 fdee 	bl	80105b8 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f7fd f9db 	bl	8009d9c <lfs_dir_rawopen>
 800c9e6:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800c9e8:	697b      	ldr	r3, [r7, #20]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08012e80 	.word	0x08012e80
 800c9f8:	08013140 	.word	0x08013140
 800c9fc:	08012598 	.word	0x08012598

0800ca00 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <lfs_dir_close+0x18>
        return err;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	e005      	b.n	800ca24 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7fd fa38 	bl	8009e90 <lfs_dir_rawclose>
 800ca20:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800ca22:	68fb      	ldr	r3, [r7, #12]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800ca38:	2300      	movs	r3, #0
 800ca3a:	617b      	str	r3, [r7, #20]
    if (err) {
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <lfs_dir_read+0x1a>
        return err;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	e006      	b.n	800ca54 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7fd fa2e 	bl	8009eac <lfs_dir_rawread>
 800ca50:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800ca52:	697b      	ldr	r3, [r7, #20]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <lfs_flash_read>:
 * @param void *buffer					: [out] Output buffer
 * @param lfs_size_t size				: [ in] Size of the output buffer
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]

	/* Calculate first byte's address
	 ------------------------------------------------*/
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	045a      	lsls	r2, r3, #17
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4413      	add	r3, r2
 800ca72:	4a16      	ldr	r2, [pc, #88]	; (800cacc <lfs_flash_read+0x70>)
 800ca74:	4413      	add	r3, r2
 800ca76:	617b      	str	r3, [r7, #20]

	/* Check arguments
	 ------------------------------------------------*/
	if(size == 0) return -5;
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d102      	bne.n	800ca84 <lfs_flash_read+0x28>
 800ca7e:	f06f 0304 	mvn.w	r3, #4
 800ca82:	e01e      	b.n	800cac2 <lfs_flash_read+0x66>
	if(addr < LFS_BASE_ADDR) return -5;
 800ca84:	4a11      	ldr	r2, [pc, #68]	; (800cacc <lfs_flash_read+0x70>)
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d202      	bcs.n	800ca92 <lfs_flash_read+0x36>
 800ca8c:	f06f 0304 	mvn.w	r3, #4
 800ca90:	e017      	b.n	800cac2 <lfs_flash_read+0x66>
	if(addr >= LFS_END_ADDR) return -5;
 800ca92:	4a0f      	ldr	r2, [pc, #60]	; (800cad0 <lfs_flash_read+0x74>)
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d302      	bcc.n	800caa0 <lfs_flash_read+0x44>
 800ca9a:	f06f 0304 	mvn.w	r3, #4
 800ca9e:	e010      	b.n	800cac2 <lfs_flash_read+0x66>

	/* Read from flash and returns 0 if OK
	 ------------------------------------------------*/
	int32_t ret = os_flash_read(addr, buffer, size);
 800caa0:	6a3a      	ldr	r2, [r7, #32]
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6978      	ldr	r0, [r7, #20]
 800caa6:	f7f9 f801 	bl	8005aac <os_flash_read>
 800caaa:	6138      	str	r0, [r7, #16]
	ASSERT(ret >= 0);
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	da04      	bge.n	800cabc <lfs_flash_read+0x60>
 800cab2:	223e      	movs	r2, #62	; 0x3e
 800cab4:	4907      	ldr	r1, [pc, #28]	; (800cad4 <lfs_flash_read+0x78>)
 800cab6:	4808      	ldr	r0, [pc, #32]	; (800cad8 <lfs_flash_read+0x7c>)
 800cab8:	f004 f8e6 	bl	8010c88 <iprintf>
	return ret < 0 ? (int)ret : 0;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	08020000 	.word	0x08020000
 800cad0:	08100000 	.word	0x08100000
 800cad4:	08012eb8 	.word	0x08012eb8
 800cad8:	08012ec4 	.word	0x08012ec4

0800cadc <lfs_flash_write>:
 * @param const void *buffer			: [ in] Input buffer
 * @param lfs_size_t size				: [ in] Size of the output buffer
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_write(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]

	/* Calculate address of the first byte
	 ------------------------------------------------*/
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	045a      	lsls	r2, r3, #17
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4413      	add	r3, r2
 800caf2:	4a0c      	ldr	r2, [pc, #48]	; (800cb24 <lfs_flash_write+0x48>)
 800caf4:	4413      	add	r3, r2
 800caf6:	617b      	str	r3, [r7, #20]

	/* Write buffer in flash and return 0 if OK
	 ------------------------------------------------*/
	int32_t ret = os_flash_write(addr, (uint8_t*)buffer, size);
 800caf8:	6a3a      	ldr	r2, [r7, #32]
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6978      	ldr	r0, [r7, #20]
 800cafe:	f7f8 febd 	bl	800587c <os_flash_write>
 800cb02:	6138      	str	r0, [r7, #16]
	ASSERT(ret >= 0);
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	da04      	bge.n	800cb14 <lfs_flash_write+0x38>
 800cb0a:	2259      	movs	r2, #89	; 0x59
 800cb0c:	4906      	ldr	r1, [pc, #24]	; (800cb28 <lfs_flash_write+0x4c>)
 800cb0e:	4807      	ldr	r0, [pc, #28]	; (800cb2c <lfs_flash_write+0x50>)
 800cb10:	f004 f8ba 	bl	8010c88 <iprintf>
	return ret < 0 ? (int)ret : 0;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	08020000 	.word	0x08020000
 800cb28:	08012eb8 	.word	0x08012eb8
 800cb2c:	08012ec4 	.word	0x08012ec4

0800cb30 <lfs_flash_erase>:
 * @param const struct lfs_config *c	: [ in] Configuration file used
 * @param lfs_block_t block				: [ in] The index of the block
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_erase(const struct lfs_config *c, lfs_block_t block){
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]

	/* Calculate fist address
	 ------------------------------------------------*/
	uint32_t addr = block * SECTOR_SIZE + LFS_BASE_ADDR;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	045b      	lsls	r3, r3, #17
 800cb3e:	4a0b      	ldr	r2, [pc, #44]	; (800cb6c <lfs_flash_erase+0x3c>)
 800cb40:	4413      	add	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]

	/* Erase block and return 0 if ok
	 ------------------------------------------------*/
	int32_t ret = os_flash_erase(addr, 1);
 800cb44:	2101      	movs	r1, #1
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f7f8 fffe 	bl	8005b48 <os_flash_erase>
 800cb4c:	60b8      	str	r0, [r7, #8]
	ASSERT(ret >= 0);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	da04      	bge.n	800cb5e <lfs_flash_erase+0x2e>
 800cb54:	2271      	movs	r2, #113	; 0x71
 800cb56:	4906      	ldr	r1, [pc, #24]	; (800cb70 <lfs_flash_erase+0x40>)
 800cb58:	4806      	ldr	r0, [pc, #24]	; (800cb74 <lfs_flash_erase+0x44>)
 800cb5a:	f004 f895 	bl	8010c88 <iprintf>
	return ret < 0 ? (int)ret : 0;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	08020000 	.word	0x08020000
 800cb70:	08012eb8 	.word	0x08012eb8
 800cb74:	08012ec4 	.word	0x08012ec4

0800cb78 <lfs_flash_sync>:
 *
 * @param const struct lfs_config *c	: [ in] Configuration file used
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_sync(const struct lfs_config *c){
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	return 0;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
	...

0800cb90 <os_lfs_init>:
 * LFS Init
 *
 * @brief This function initializes the file system
 *
 **********************************************************************/
void os_lfs_init(){
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0

	/* Calculate sector size and number of sector using the pieces of information given by the linker
	 ------------------------------------------------*/
	lfs_cfg.block_size = SECTOR_SIZE;
 800cb96:	4b21      	ldr	r3, [pc, #132]	; (800cc1c <os_lfs_init+0x8c>)
 800cb98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cb9c:	61da      	str	r2, [r3, #28]
	lfs_cfg.block_count = (uint32_t)LFS_TOTAL_SIZE/SECTOR_SIZE;
 800cb9e:	4b20      	ldr	r3, [pc, #128]	; (800cc20 <os_lfs_init+0x90>)
 800cba0:	0c5b      	lsrs	r3, r3, #17
 800cba2:	4a1e      	ldr	r2, [pc, #120]	; (800cc1c <os_lfs_init+0x8c>)
 800cba4:	6213      	str	r3, [r2, #32]

	/* Try to mount the file system
	 ------------------------------------------------*/
    int err = lfs_mount(&lfs, &lfs_cfg);
 800cba6:	491d      	ldr	r1, [pc, #116]	; (800cc1c <os_lfs_init+0x8c>)
 800cba8:	481e      	ldr	r0, [pc, #120]	; (800cc24 <os_lfs_init+0x94>)
 800cbaa:	f7ff fddb 	bl	800c764 <lfs_mount>
 800cbae:	6078      	str	r0, [r7, #4]
    if(err < 0){
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	da28      	bge.n	800cc08 <os_lfs_init+0x78>

    	PRINTLN("LFS mount fail %d", err);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	22df      	movs	r2, #223	; 0xdf
 800cbba:	491b      	ldr	r1, [pc, #108]	; (800cc28 <os_lfs_init+0x98>)
 800cbbc:	481b      	ldr	r0, [pc, #108]	; (800cc2c <os_lfs_init+0x9c>)
 800cbbe:	f004 f863 	bl	8010c88 <iprintf>

    	/* Reformat if we can't mount the filesystem
    	 * this should only happen on the first boot
    	 ------------------------------------------------*/
        err = lfs_format(&lfs, &lfs_cfg);
 800cbc2:	4916      	ldr	r1, [pc, #88]	; (800cc1c <os_lfs_init+0x8c>)
 800cbc4:	4817      	ldr	r0, [pc, #92]	; (800cc24 <os_lfs_init+0x94>)
 800cbc6:	f7ff fdb7 	bl	800c738 <lfs_format>
 800cbca:	6078      	str	r0, [r7, #4]
        if(err < 0){
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da05      	bge.n	800cbde <os_lfs_init+0x4e>
        	PRINTLN("LFS format fail %d", err);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	22e6      	movs	r2, #230	; 0xe6
 800cbd6:	4914      	ldr	r1, [pc, #80]	; (800cc28 <os_lfs_init+0x98>)
 800cbd8:	4815      	ldr	r0, [pc, #84]	; (800cc30 <os_lfs_init+0xa0>)
 800cbda:	f004 f855 	bl	8010c88 <iprintf>
        }

    	/* Try to mount the file system again
    	 ------------------------------------------------*/
        err = lfs_mount(&lfs, &lfs_cfg);
 800cbde:	490f      	ldr	r1, [pc, #60]	; (800cc1c <os_lfs_init+0x8c>)
 800cbe0:	4810      	ldr	r0, [pc, #64]	; (800cc24 <os_lfs_init+0x94>)
 800cbe2:	f7ff fdbf 	bl	800c764 <lfs_mount>
 800cbe6:	6078      	str	r0, [r7, #4]
        if(err < 0){
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	da06      	bge.n	800cbfc <os_lfs_init+0x6c>
        	PRINTLN("LFS mount fail %d", err);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	22ed      	movs	r2, #237	; 0xed
 800cbf2:	490d      	ldr	r1, [pc, #52]	; (800cc28 <os_lfs_init+0x98>)
 800cbf4:	480d      	ldr	r0, [pc, #52]	; (800cc2c <os_lfs_init+0x9c>)
 800cbf6:	f004 f847 	bl	8010c88 <iprintf>
	 ------------------------------------------------*/
    else{
    	PRINTLN("LFS Mount OK");
    }

}
 800cbfa:	e00a      	b.n	800cc12 <os_lfs_init+0x82>
        	PRINTLN("LFS Mount OK");
 800cbfc:	22f1      	movs	r2, #241	; 0xf1
 800cbfe:	490a      	ldr	r1, [pc, #40]	; (800cc28 <os_lfs_init+0x98>)
 800cc00:	480c      	ldr	r0, [pc, #48]	; (800cc34 <os_lfs_init+0xa4>)
 800cc02:	f004 f841 	bl	8010c88 <iprintf>
}
 800cc06:	e004      	b.n	800cc12 <os_lfs_init+0x82>
    	PRINTLN("LFS Mount OK");
 800cc08:	22f8      	movs	r2, #248	; 0xf8
 800cc0a:	4907      	ldr	r1, [pc, #28]	; (800cc28 <os_lfs_init+0x98>)
 800cc0c:	4809      	ldr	r0, [pc, #36]	; (800cc34 <os_lfs_init+0xa4>)
 800cc0e:	f004 f83b 	bl	8010c88 <iprintf>
}
 800cc12:	bf00      	nop
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20000270 	.word	0x20000270
 800cc20:	000e0000 	.word	0x000e0000
 800cc24:	20014e10 	.word	0x20014e10
 800cc28:	08012eb8 	.word	0x08012eb8
 800cc2c:	08012ee0 	.word	0x08012ee0
 800cc30:	08012f00 	.word	0x08012f00
 800cc34:	08012f20 	.word	0x08012f20

0800cc38 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800cc38:	b480      	push	{r7}
 800cc3a:	b087      	sub	sp, #28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800cc48:	2300      	movs	r3, #0
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	e024      	b.n	800cc98 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	091a      	lsrs	r2, r3, #4
 800cc52:	6939      	ldr	r1, [r7, #16]
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	440b      	add	r3, r1
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	404b      	eors	r3, r1
 800cc60:	f003 030f 	and.w	r3, r3, #15
 800cc64:	4912      	ldr	r1, [pc, #72]	; (800ccb0 <lfs_crc+0x78>)
 800cc66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc6a:	4053      	eors	r3, r2
 800cc6c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	091a      	lsrs	r2, r3, #4
 800cc72:	6939      	ldr	r1, [r7, #16]
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	440b      	add	r3, r1
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	091b      	lsrs	r3, r3, #4
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	4619      	mov	r1, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	404b      	eors	r3, r1
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	4909      	ldr	r1, [pc, #36]	; (800ccb0 <lfs_crc+0x78>)
 800cc8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc8e:	4053      	eors	r3, r2
 800cc90:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	3301      	adds	r3, #1
 800cc96:	617b      	str	r3, [r7, #20]
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d3d6      	bcc.n	800cc4e <lfs_crc+0x16>
    }

    return crc;
 800cca0:	68fb      	ldr	r3, [r7, #12]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	371c      	adds	r7, #28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	08013150 	.word	0x08013150

0800ccb4 <xmodemCrc>:
 *
 * @return uint16_t : new CRC value
 *
 **********************************************************************/
static uint16_t xmodemCrc(const uint8_t newByte, uint16_t prevResult)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	460a      	mov	r2, r1
 800ccbe:	71fb      	strb	r3, [r7, #7]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	80bb      	strh	r3, [r7, #4]
	prevResult = (uint16_t)((prevResult >> 8) | (prevResult << 8));
 800ccc4:	88bb      	ldrh	r3, [r7, #4]
 800ccc6:	0a1b      	lsrs	r3, r3, #8
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	b21a      	sxth	r2, r3
 800cccc:	88bb      	ldrh	r3, [r7, #4]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	b21b      	sxth	r3, r3
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	b21b      	sxth	r3, r3
 800ccd6:	80bb      	strh	r3, [r7, #4]
	prevResult = (uint16_t)(newByte ^ prevResult);
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	88bb      	ldrh	r3, [r7, #4]
 800ccde:	4053      	eors	r3, r2
 800cce0:	80bb      	strh	r3, [r7, #4]
	prevResult ^= (uint16_t)((prevResult & 0xff) >> 4);
 800cce2:	88bb      	ldrh	r3, [r7, #4]
 800cce4:	111b      	asrs	r3, r3, #4
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	f003 030f 	and.w	r3, r3, #15
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	88bb      	ldrh	r3, [r7, #4]
 800ccf0:	4053      	eors	r3, r2
 800ccf2:	80bb      	strh	r3, [r7, #4]
	prevResult ^= (uint16_t)((prevResult << 8) << 4);
 800ccf4:	88bb      	ldrh	r3, [r7, #4]
 800ccf6:	031b      	lsls	r3, r3, #12
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	88bb      	ldrh	r3, [r7, #4]
 800ccfc:	4053      	eors	r3, r2
 800ccfe:	80bb      	strh	r3, [r7, #4]

	prevResult = (uint16_t)((((uint8_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) << 5)) | ((uint16_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) >> 3) << 8)) ^ prevResult);
 800cd00:	88bb      	ldrh	r3, [r7, #4]
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	015b      	lsls	r3, r3, #5
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	b21a      	sxth	r2, r3
 800cd0a:	88bb      	ldrh	r3, [r7, #4]
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	08db      	lsrs	r3, r3, #3
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	b21b      	sxth	r3, r3
 800cd16:	4313      	orrs	r3, r2
 800cd18:	b21a      	sxth	r2, r3
 800cd1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cd1e:	4053      	eors	r3, r2
 800cd20:	b21b      	sxth	r3, r3
 800cd22:	80bb      	strh	r3, [r7, #4]

	return prevResult;
 800cd24:	88bb      	ldrh	r3, [r7, #4]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <xmodemCrcStream>:
 *
 * @return uint16_t : new CRC value
 *
 **********************************************************************/
static uint16_t xmodemCrcStream(const uint8_t *buffer, size_t length, uint16_t prevResult)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b086      	sub	sp, #24
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	60f8      	str	r0, [r7, #12]
 800cd3a:	60b9      	str	r1, [r7, #8]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	80fb      	strh	r3, [r7, #6]
	size_t position = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	617b      	str	r3, [r7, #20]
	for (; position < length; position++) {
 800cd44:	e00d      	b.n	800cd62 <xmodemCrcStream+0x30>
		prevResult = xmodemCrc(buffer[position], prevResult);
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	88fa      	ldrh	r2, [r7, #6]
 800cd50:	4611      	mov	r1, r2
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff ffae 	bl	800ccb4 <xmodemCrc>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	80fb      	strh	r3, [r7, #6]
	for (; position < length; position++) {
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
 800cd62:	697a      	ldr	r2, [r7, #20]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d3ed      	bcc.n	800cd46 <xmodemCrcStream+0x14>
	}

	return prevResult;
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <sendResponse>:
 *
 * @param uint8_t packet : 	[in] The response to send
 *
 **********************************************************************/
static void sendResponse(uint8_t packet)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 800cd7e:	1df9      	adds	r1, r7, #7
 800cd80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd84:	2201      	movs	r2, #1
 800cd86:	480c      	ldr	r0, [pc, #48]	; (800cdb8 <sendResponse+0x44>)
 800cd88:	f002 fadf 	bl	800f34a <HAL_UART_Transmit>

	if (packet == XMODEM_CMD_CAN) {
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	2b18      	cmp	r3, #24
 800cd90:	d10d      	bne.n	800cdae <sendResponse+0x3a>
		// If packet is CAN, send three times
		HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 800cd92:	1df9      	adds	r1, r7, #7
 800cd94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4807      	ldr	r0, [pc, #28]	; (800cdb8 <sendResponse+0x44>)
 800cd9c:	f002 fad5 	bl	800f34a <HAL_UART_Transmit>
		HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 800cda0:	1df9      	adds	r1, r7, #7
 800cda2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cda6:	2201      	movs	r2, #1
 800cda8:	4803      	ldr	r0, [pc, #12]	; (800cdb8 <sendResponse+0x44>)
 800cdaa:	f002 face 	bl	800f34a <HAL_UART_Transmit>
	}
}
 800cdae:	bf00      	nop
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	20014ecc 	.word	0x20014ecc

0800cdbc <xmodemParsePacket>:
 * @param XmodemPacket_t *packet : [ in] Packet to verify
 * @param uint8_t *response		 : [out] reponse
 *
 **********************************************************************/
static void xmodemParsePacket(XmodemPacket_t *packet, uint8_t *response)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
	uint16_t crc16 = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	81fb      	strh	r3, [r7, #14]

	switch (packet->header) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d069      	beq.n	800cea6 <xmodemParsePacket+0xea>
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	dc04      	bgt.n	800cde0 <xmodemParsePacket+0x24>
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d007      	beq.n	800cdea <xmodemParsePacket+0x2e>
 800cdda:	2b03      	cmp	r3, #3
 800cddc:	d067      	beq.n	800ceae <xmodemParsePacket+0xf2>
 800cdde:	e06a      	b.n	800ceb6 <xmodemParsePacket+0xfa>
 800cde0:	2b18      	cmp	r3, #24
 800cde2:	d064      	beq.n	800ceae <xmodemParsePacket+0xf2>
 800cde4:	2b43      	cmp	r3, #67	; 0x43
 800cde6:	d062      	beq.n	800ceae <xmodemParsePacket+0xf2>
 800cde8:	e065      	b.n	800ceb6 <xmodemParsePacket+0xfa>
	case XMODEM_CMD_SOH:
		// Packet number must start at 1, and must monotonically increase
		if (!started) {
 800cdea:	4b36      	ldr	r3, [pc, #216]	; (800cec4 <xmodemParsePacket+0x108>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	f083 0301 	eor.w	r3, r3, #1
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00b      	beq.n	800ce10 <xmodemParsePacket+0x54>
			if (packet->packetNumber != 0x01) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d003      	beq.n	800ce08 <xmodemParsePacket+0x4c>
				*response = XMODEM_CMD_NAK;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2215      	movs	r2, #21
 800ce04:	701a      	strb	r2, [r3, #0]
				return;
 800ce06:	e05a      	b.n	800cebe <xmodemParsePacket+0x102>
			}
			started = true;
 800ce08:	4b2e      	ldr	r3, [pc, #184]	; (800cec4 <xmodemParsePacket+0x108>)
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	e015      	b.n	800ce3c <xmodemParsePacket+0x80>
		} else {
			if (packet->packetNumber == packetNumber) {
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	785a      	ldrb	r2, [r3, #1]
 800ce14:	4b2c      	ldr	r3, [pc, #176]	; (800cec8 <xmodemParsePacket+0x10c>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d103      	bne.n	800ce24 <xmodemParsePacket+0x68>
				*response = XMODEM_CMD_ACK;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	2206      	movs	r2, #6
 800ce20:	701a      	strb	r2, [r3, #0]
				return;
 800ce22:	e04c      	b.n	800cebe <xmodemParsePacket+0x102>
			} else if (packet->packetNumber != (uint8_t)(packetNumber + 1)) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	785a      	ldrb	r2, [r3, #1]
 800ce28:	4b27      	ldr	r3, [pc, #156]	; (800cec8 <xmodemParsePacket+0x10c>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d003      	beq.n	800ce3c <xmodemParsePacket+0x80>
				*response = XMODEM_CMD_NAK;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2215      	movs	r2, #21
 800ce38:	701a      	strb	r2, [r3, #0]
				return;
 800ce3a:	e040      	b.n	800cebe <xmodemParsePacket+0x102>
			}
		}

		// Byte 3 is the two's complement of the packet number in the second byte
		if (packet->packetNumber + packet->packetNumberC != 0xFF) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	785b      	ldrb	r3, [r3, #1]
 800ce40:	461a      	mov	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	789b      	ldrb	r3, [r3, #2]
 800ce46:	4413      	add	r3, r2
 800ce48:	2bff      	cmp	r3, #255	; 0xff
 800ce4a:	d003      	beq.n	800ce54 <xmodemParsePacket+0x98>
			*response = XMODEM_CMD_NAK;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2215      	movs	r2, #21
 800ce50:	701a      	strb	r2, [r3, #0]
			return;
 800ce52:	e034      	b.n	800cebe <xmodemParsePacket+0x102>
		}

		// Bytes 132-133 contain a 16-bit CRC over the data bytes
		crc16 = xmodemCrcStream(packet->data, XMODEM_DATA_SIZE, crc16);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3303      	adds	r3, #3
 800ce58:	89fa      	ldrh	r2, [r7, #14]
 800ce5a:	2180      	movs	r1, #128	; 0x80
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff ff68 	bl	800cd32 <xmodemCrcStream>
 800ce62:	4603      	mov	r3, r0
 800ce64:	81fb      	strh	r3, [r7, #14]

		if (((crc16 >> 8) & 0xFF) != packet->crcH) {
 800ce66:	89fb      	ldrh	r3, [r7, #14]
 800ce68:	0a1b      	lsrs	r3, r3, #8
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d003      	beq.n	800ce80 <xmodemParsePacket+0xc4>
			*response = XMODEM_CMD_NAK;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2215      	movs	r2, #21
 800ce7c:	701a      	strb	r2, [r3, #0]
			return;
 800ce7e:	e01e      	b.n	800cebe <xmodemParsePacket+0x102>
		}

		if ((crc16 & 0xFF) != packet->crcL) {
 800ce80:	89fb      	ldrh	r3, [r7, #14]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d003      	beq.n	800ce96 <xmodemParsePacket+0xda>
			*response = XMODEM_CMD_NAK;
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2215      	movs	r2, #21
 800ce92:	701a      	strb	r2, [r3, #0]
			return;
 800ce94:	e013      	b.n	800cebe <xmodemParsePacket+0x102>
		}

		packetNumber = packet->packetNumber;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	785a      	ldrb	r2, [r3, #1]
 800ce9a:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <xmodemParsePacket+0x10c>)
 800ce9c:	701a      	strb	r2, [r3, #0]
		*response = XMODEM_CMD_ACK;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	2206      	movs	r2, #6
 800cea2:	701a      	strb	r2, [r3, #0]
		return;
 800cea4:	e00b      	b.n	800cebe <xmodemParsePacket+0x102>

	case XMODEM_CMD_EOT:
		*response = XMODEM_CMD_ACK;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	2206      	movs	r2, #6
 800ceaa:	701a      	strb	r2, [r3, #0]
		return;
 800ceac:	e007      	b.n	800cebe <xmodemParsePacket+0x102>
		break;
	case XMODEM_CMD_CAN:
	case XMODEM_CMD_C:
	case XMODEM_CMD_CTRL_C:
		*response = XMODEM_CMD_CAN;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2218      	movs	r2, #24
 800ceb2:	701a      	strb	r2, [r3, #0]
		return;
 800ceb4:	e003      	b.n	800cebe <xmodemParsePacket+0x102>
	default:
		*response = XMODEM_CMD_CAN;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2218      	movs	r2, #24
 800ceba:	701a      	strb	r2, [r3, #0]
		return;
 800cebc:	bf00      	nop
	}
}
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20014dc1 	.word	0x20014dc1
 800cec8:	20014dc0 	.word	0x20014dc0

0800cecc <xModem_getState>:
 * @brief This functions gets the state of the XMODEM protocol
 *
 * @return bool : (1) on going, (0) idle
 *
 **********************************************************************/
os_xmodem_state xModem_getState(){
 800cecc:	b480      	push	{r7}
 800cece:	af00      	add	r7, sp, #0
	return xmodem_state;
 800ced0:	4b03      	ldr	r3, [pc, #12]	; (800cee0 <xModem_getState+0x14>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	20014dc2 	.word	0x20014dc2

0800cee4 <xModem_rcv>:
 * @brief This functions receives a file via XMODEM protocol
 *
 * @param char* path : [in] the name of the file to create
 *
 **********************************************************************/
void* xModem_rcv(char* path){
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b0c2      	sub	sp, #264	; 0x108
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	1d3b      	adds	r3, r7, #4
 800ceec:	6018      	str	r0, [r3, #0]

	if(os_evt_create(&xmodem_evt_rcv, OS_EVT_MODE_AUTO, NULL) != OS_ERR_OK){
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	489b      	ldr	r0, [pc, #620]	; (800d160 <xModem_rcv+0x27c>)
 800cef4:	f7f5 fcf8 	bl	80028e8 <os_evt_create>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <xModem_rcv+0x1e>
		return NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e129      	b.n	800d156 <xModem_rcv+0x272>
	}

	os_err_e err;
	XmodemState_t state = XMODEM_STATE_WAIT_TO_START;
 800cf02:	2300      	movs	r3, #0
 800cf04:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t packet[133];
	uint8_t response = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	int waitToStart = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	uint16_t receivedBytes;
	uint32_t address = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	lfs_file_t lfs_file;
	lfs_remove(&lfs, path);
 800cf1a:	1d3b      	adds	r3, r7, #4
 800cf1c:	6819      	ldr	r1, [r3, #0]
 800cf1e:	4891      	ldr	r0, [pc, #580]	; (800d164 <xModem_rcv+0x280>)
 800cf20:	f7ff fc36 	bl	800c790 <lfs_remove>
	int32_t file_error = lfs_file_open(&lfs, &lfs_file, path, LFS_O_RDWR | LFS_O_CREAT);
 800cf24:	1d3a      	adds	r2, r7, #4
 800cf26:	f107 0108 	add.w	r1, r7, #8
 800cf2a:	f240 1303 	movw	r3, #259	; 0x103
 800cf2e:	6812      	ldr	r2, [r2, #0]
 800cf30:	488c      	ldr	r0, [pc, #560]	; (800d164 <xModem_rcv+0x280>)
 800cf32:	f7ff fc43 	bl	800c7bc <lfs_file_open>
 800cf36:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	if(file_error<0) {
 800cf3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	da06      	bge.n	800cf50 <xModem_rcv+0x6c>
		os_evt_delete(xmodem_evt_rcv);
 800cf42:	4b87      	ldr	r3, [pc, #540]	; (800d160 <xModem_rcv+0x27c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f5 fd8a 	bl	8002a60 <os_evt_delete>
		return NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e102      	b.n	800d156 <xModem_rcv+0x272>
	}

	HAL_UART_Abort(&USART_CLI);
 800cf50:	4885      	ldr	r0, [pc, #532]	; (800d168 <xModem_rcv+0x284>)
 800cf52:	f002 fae8 	bl	800f526 <HAL_UART_Abort>
	HAL_UART_Abort_IT(&USART_CLI);
 800cf56:	4884      	ldr	r0, [pc, #528]	; (800d168 <xModem_rcv+0x284>)
 800cf58:	f002 fbb4 	bl	800f6c4 <HAL_UART_Abort_IT>
	HAL_UART_AbortReceive(&USART_CLI);
 800cf5c:	4882      	ldr	r0, [pc, #520]	; (800d168 <xModem_rcv+0x284>)
 800cf5e:	f002 fb64 	bl	800f62a <HAL_UART_AbortReceive>
	HAL_UART_AbortReceive_IT(&USART_CLI);
 800cf62:	4881      	ldr	r0, [pc, #516]	; (800d168 <xModem_rcv+0x284>)
 800cf64:	f002 fc52 	bl	800f80c <HAL_UART_AbortReceive_IT>
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 800cf68:	4b7f      	ldr	r3, [pc, #508]	; (800d168 <xModem_rcv+0x284>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]

	xmodem_state = OS_XMODEM_STATE_RUN;
 800cf6e:	4b7f      	ldr	r3, [pc, #508]	; (800d16c <xModem_rcv+0x288>)
 800cf70:	2201      	movs	r2, #1
 800cf72:	701a      	strb	r2, [r3, #0]

	packetNumber = 0;
 800cf74:	4b7e      	ldr	r3, [pc, #504]	; (800d170 <xModem_rcv+0x28c>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	701a      	strb	r2, [r3, #0]
	started = false;
 800cf7a:	4b7e      	ldr	r3, [pc, #504]	; (800d174 <xModem_rcv+0x290>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	701a      	strb	r2, [r3, #0]

	while(state != XMODEM_STATE_COMPLETED && state != XMODEM_STATE_FAILED) {
 800cf80:	e0b4      	b.n	800d0ec <xModem_rcv+0x208>
		if (state == XMODEM_STATE_WAIT_TO_START) {
 800cf82:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d112      	bne.n	800cfb0 <xModem_rcv+0xcc>
			sendResponse(XMODEM_CMD_C);
 800cf8a:	2043      	movs	r0, #67	; 0x43
 800cf8c:	f7ff fef2 	bl	800cd74 <sendResponse>
			waitToStart++;
 800cf90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf94:	3301      	adds	r3, #1
 800cf96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			if (waitToStart > XMODEM_START_TIMEOUT) {
 800cf9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf9e:	2b1e      	cmp	r3, #30
 800cfa0:	dd0b      	ble.n	800cfba <xModem_rcv+0xd6>
				sendResponse(XMODEM_CMD_CAN);
 800cfa2:	2018      	movs	r0, #24
 800cfa4:	f7ff fee6 	bl	800cd74 <sendResponse>
				state = XMODEM_STATE_FAILED;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 800cfae:	e004      	b.n	800cfba <xModem_rcv+0xd6>
			}
		} else {
			if (XMODEM_STATE_IN_PROGRESS) {
				sendResponse(response);
 800cfb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fedd 	bl	800cd74 <sendResponse>
			}
		}
		HAL_UART_Receive_IT(&USART_CLI, packet, 1);
 800cfba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4869      	ldr	r0, [pc, #420]	; (800d168 <xModem_rcv+0x284>)
 800cfc4:	f002 fa5a 	bl	800f47c <HAL_UART_Receive_IT>
		os_obj_single_wait(xmodem_evt_rcv, 1000, &err);
 800cfc8:	4b65      	ldr	r3, [pc, #404]	; (800d160 <xModem_rcv+0x27c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800cfd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7f7 fcff 	bl	80049d8 <os_obj_single_wait>
		receivedBytes = err == OS_ERR_OK ? 1 : 5;
 800cfda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <xModem_rcv+0x102>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <xModem_rcv+0x104>
 800cfe6:	2305      	movs	r3, #5
 800cfe8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 800cfec:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d15a      	bne.n	800d0aa <xModem_rcv+0x1c6>
 800cff4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d156      	bne.n	800d0aa <xModem_rcv+0x1c6>
			state = XMODEM_STATE_IN_PROGRESS;
 800cffc:	2301      	movs	r3, #1
 800cffe:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			HAL_UART_Receive_IT(&USART_CLI, packet + 1, XMODEM_DATA_SIZE + 4);
 800d002:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d006:	3301      	adds	r3, #1
 800d008:	2284      	movs	r2, #132	; 0x84
 800d00a:	4619      	mov	r1, r3
 800d00c:	4856      	ldr	r0, [pc, #344]	; (800d168 <xModem_rcv+0x284>)
 800d00e:	f002 fa35 	bl	800f47c <HAL_UART_Receive_IT>
			os_obj_single_wait(xmodem_evt_rcv, 1000, &err);
 800d012:	4b53      	ldr	r3, [pc, #332]	; (800d160 <xModem_rcv+0x27c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800d01a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d01e:	4618      	mov	r0, r3
 800d020:	f7f7 fcda 	bl	80049d8 <os_obj_single_wait>
			receivedBytes = err == OS_ERR_OK ? (XMODEM_DATA_SIZE + 4) : 5;
 800d024:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <xModem_rcv+0x14c>
 800d02c:	2384      	movs	r3, #132	; 0x84
 800d02e:	e000      	b.n	800d032 <xModem_rcv+0x14e>
 800d030:	2305      	movs	r3, #5
 800d032:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			if (receivedBytes == (XMODEM_DATA_SIZE + 4)) {
 800d036:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800d03a:	2b84      	cmp	r3, #132	; 0x84
 800d03c:	d12e      	bne.n	800d09c <xModem_rcv+0x1b8>
				xmodemParsePacket((XmodemPacket_t *)packet, &response);
 800d03e:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800d042:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d046:	4611      	mov	r1, r2
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff feb7 	bl	800cdbc <xmodemParsePacket>
				if(response == XMODEM_CMD_ACK) {
 800d04e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d052:	2b06      	cmp	r3, #6
 800d054:	d11b      	bne.n	800d08e <xModem_rcv+0x1aa>
					int err = lfs_file_write(&lfs, &lfs_file, ((XmodemPacket_t *)packet)->data, XMODEM_DATA_SIZE);
 800d056:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d05a:	1cda      	adds	r2, r3, #3
 800d05c:	f107 0108 	add.w	r1, r7, #8
 800d060:	2380      	movs	r3, #128	; 0x80
 800d062:	4840      	ldr	r0, [pc, #256]	; (800d164 <xModem_rcv+0x280>)
 800d064:	f7ff fc3a 	bl	800c8dc <lfs_file_write>
 800d068:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
					if (err >= 0) {
 800d06c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d070:	2b00      	cmp	r3, #0
 800d072:	db05      	blt.n	800d080 <xModem_rcv+0x19c>
						address += XMODEM_DATA_SIZE;
 800d074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d078:	3380      	adds	r3, #128	; 0x80
 800d07a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			if (receivedBytes == (XMODEM_DATA_SIZE + 4)) {
 800d07e:	e023      	b.n	800d0c8 <xModem_rcv+0x1e4>
					} else {
						sendResponse(XMODEM_CMD_CAN);
 800d080:	2018      	movs	r0, #24
 800d082:	f7ff fe77 	bl	800cd74 <sendResponse>
						state = XMODEM_STATE_FAILED;
 800d086:	2303      	movs	r3, #3
 800d088:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			if (receivedBytes == (XMODEM_DATA_SIZE + 4)) {
 800d08c:	e01c      	b.n	800d0c8 <xModem_rcv+0x1e4>
					}
				} else {
					sendResponse(XMODEM_CMD_CAN);
 800d08e:	2018      	movs	r0, #24
 800d090:	f7ff fe70 	bl	800cd74 <sendResponse>
					state = XMODEM_STATE_FAILED;
 800d094:	2303      	movs	r3, #3
 800d096:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			if (receivedBytes == (XMODEM_DATA_SIZE + 4)) {
 800d09a:	e015      	b.n	800d0c8 <xModem_rcv+0x1e4>
				}
			} else {
				// if neither ACK nor CAN, the only possibility is NAK - which is not
				// handled currently, since hard to test whether it work
				sendResponse(XMODEM_CMD_CAN);
 800d09c:	2018      	movs	r0, #24
 800d09e:	f7ff fe69 	bl	800cd74 <sendResponse>
				state = XMODEM_STATE_FAILED;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			if (receivedBytes == (XMODEM_DATA_SIZE + 4)) {
 800d0a8:	e00e      	b.n	800d0c8 <xModem_rcv+0x1e4>
			}
		} else {
			if (receivedBytes == 1 && ((XmodemPacket_t *)packet)->header == XMODEM_CMD_EOT) {
 800d0aa:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d10a      	bne.n	800d0c8 <xModem_rcv+0x1e4>
 800d0b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d105      	bne.n	800d0c8 <xModem_rcv+0x1e4>
				sendResponse(XMODEM_CMD_ACK);
 800d0bc:	2006      	movs	r0, #6
 800d0be:	f7ff fe59 	bl	800cd74 <sendResponse>
				state = XMODEM_STATE_COMPLETED;
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			}
		}
		if (state == XMODEM_STATE_IN_PROGRESS && !(receivedBytes == 1 || receivedBytes == 132)) {
 800d0c8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d10d      	bne.n	800d0ec <xModem_rcv+0x208>
 800d0d0:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d009      	beq.n	800d0ec <xModem_rcv+0x208>
 800d0d8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800d0dc:	2b84      	cmp	r3, #132	; 0x84
 800d0de:	d005      	beq.n	800d0ec <xModem_rcv+0x208>
			sendResponse(XMODEM_CMD_CAN);
 800d0e0:	2018      	movs	r0, #24
 800d0e2:	f7ff fe47 	bl	800cd74 <sendResponse>
			state = XMODEM_STATE_FAILED;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	while(state != XMODEM_STATE_COMPLETED && state != XMODEM_STATE_FAILED) {
 800d0ec:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d004      	beq.n	800d0fe <xModem_rcv+0x21a>
 800d0f4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	f47f af42 	bne.w	800cf82 <xModem_rcv+0x9e>
		}
	}

	int lfs_err = lfs_file_close(&lfs, &lfs_file);
 800d0fe:	f107 0308 	add.w	r3, r7, #8
 800d102:	4619      	mov	r1, r3
 800d104:	4817      	ldr	r0, [pc, #92]	; (800d164 <xModem_rcv+0x280>)
 800d106:	f7ff fb8d 	bl	800c824 <lfs_file_close>
 800d10a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	if(lfs_err < 0)
 800d10e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d112:	2b00      	cmp	r3, #0
 800d114:	da07      	bge.n	800d126 <xModem_rcv+0x242>
		PRINTLN("LFS close return error ! %d", lfs_err);
 800d116:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d11a:	f240 1239 	movw	r2, #313	; 0x139
 800d11e:	4916      	ldr	r1, [pc, #88]	; (800d178 <xModem_rcv+0x294>)
 800d120:	4816      	ldr	r0, [pc, #88]	; (800d17c <xModem_rcv+0x298>)
 800d122:	f003 fdb1 	bl	8010c88 <iprintf>

	if(state == XMODEM_STATE_FAILED){
 800d126:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d104      	bne.n	800d138 <xModem_rcv+0x254>
		lfs_remove(&lfs, path);
 800d12e:	1d3b      	adds	r3, r7, #4
 800d130:	6819      	ldr	r1, [r3, #0]
 800d132:	480c      	ldr	r0, [pc, #48]	; (800d164 <xModem_rcv+0x280>)
 800d134:	f7ff fb2c 	bl	800c790 <lfs_remove>
	}

	os_heap_free(path);
 800d138:	1d3b      	adds	r3, r7, #4
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	f7f5 fdb4 	bl	8002ca8 <os_heap_free>
	xmodem_state = OS_XMODEM_STATE_STOP;
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <xModem_rcv+0x288>)
 800d142:	2200      	movs	r2, #0
 800d144:	701a      	strb	r2, [r3, #0]

	os_evt_delete(xmodem_evt_rcv);
 800d146:	4b06      	ldr	r3, [pc, #24]	; (800d160 <xModem_rcv+0x27c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f5 fc88 	bl	8002a60 <os_evt_delete>

	cli_init();
 800d150:	f7f4 fe34 	bl	8001dbc <cli_init>
	return NULL;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	20014e88 	.word	0x20014e88
 800d164:	20014e10 	.word	0x20014e10
 800d168:	20014ecc 	.word	0x20014ecc
 800d16c:	20014dc2 	.word	0x20014dc2
 800d170:	20014dc0 	.word	0x20014dc0
 800d174:	20014dc1 	.word	0x20014dc1
 800d178:	08012f3c 	.word	0x08012f3c
 800d17c:	08012f48 	.word	0x08012f48

0800d180 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08c      	sub	sp, #48	; 0x30
 800d184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d186:	f107 031c 	add.w	r3, r7, #28
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	605a      	str	r2, [r3, #4]
 800d190:	609a      	str	r2, [r3, #8]
 800d192:	60da      	str	r2, [r3, #12]
 800d194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d196:	2300      	movs	r3, #0
 800d198:	61bb      	str	r3, [r7, #24]
 800d19a:	4b66      	ldr	r3, [pc, #408]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19e:	4a65      	ldr	r2, [pc, #404]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1a0:	f043 0310 	orr.w	r3, r3, #16
 800d1a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d1a6:	4b63      	ldr	r3, [pc, #396]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1aa:	f003 0310 	and.w	r3, r3, #16
 800d1ae:	61bb      	str	r3, [r7, #24]
 800d1b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	4b5f      	ldr	r3, [pc, #380]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ba:	4a5e      	ldr	r2, [pc, #376]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1bc:	f043 0304 	orr.w	r3, r3, #4
 800d1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800d1c2:	4b5c      	ldr	r3, [pc, #368]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c6:	f003 0304 	and.w	r3, r3, #4
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	613b      	str	r3, [r7, #16]
 800d1d2:	4b58      	ldr	r3, [pc, #352]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d6:	4a57      	ldr	r2, [pc, #348]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d1de:	4b55      	ldr	r3, [pc, #340]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e6:	613b      	str	r3, [r7, #16]
 800d1e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	4b51      	ldr	r3, [pc, #324]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f2:	4a50      	ldr	r2, [pc, #320]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1f4:	f043 0301 	orr.w	r3, r3, #1
 800d1f8:	6313      	str	r3, [r2, #48]	; 0x30
 800d1fa:	4b4e      	ldr	r3, [pc, #312]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	60fb      	str	r3, [r7, #12]
 800d204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d206:	2300      	movs	r3, #0
 800d208:	60bb      	str	r3, [r7, #8]
 800d20a:	4b4a      	ldr	r3, [pc, #296]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20e:	4a49      	ldr	r2, [pc, #292]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d210:	f043 0302 	orr.w	r3, r3, #2
 800d214:	6313      	str	r3, [r2, #48]	; 0x30
 800d216:	4b47      	ldr	r3, [pc, #284]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21a:	f003 0302 	and.w	r3, r3, #2
 800d21e:	60bb      	str	r3, [r7, #8]
 800d220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d222:	2300      	movs	r3, #0
 800d224:	607b      	str	r3, [r7, #4]
 800d226:	4b43      	ldr	r3, [pc, #268]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d22a:	4a42      	ldr	r2, [pc, #264]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d22c:	f043 0308 	orr.w	r3, r3, #8
 800d230:	6313      	str	r3, [r2, #48]	; 0x30
 800d232:	4b40      	ldr	r3, [pc, #256]	; (800d334 <MX_GPIO_Init+0x1b4>)
 800d234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d236:	f003 0308 	and.w	r3, r3, #8
 800d23a:	607b      	str	r3, [r7, #4]
 800d23c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800d23e:	2200      	movs	r2, #0
 800d240:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800d244:	483c      	ldr	r0, [pc, #240]	; (800d338 <MX_GPIO_Init+0x1b8>)
 800d246:	f001 fa67 	bl	800e718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800d24a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d24e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d250:	2303      	movs	r3, #3
 800d252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d254:	2300      	movs	r3, #0
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d258:	f107 031c 	add.w	r3, r7, #28
 800d25c:	4619      	mov	r1, r3
 800d25e:	4837      	ldr	r0, [pc, #220]	; (800d33c <MX_GPIO_Init+0x1bc>)
 800d260:	f001 f8c0 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800d264:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 800d268:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d26a:	2303      	movs	r3, #3
 800d26c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d272:	f107 031c 	add.w	r3, r7, #28
 800d276:	4619      	mov	r1, r3
 800d278:	4831      	ldr	r0, [pc, #196]	; (800d340 <MX_GPIO_Init+0x1c0>)
 800d27a:	f001 f8b3 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d27e:	2303      	movs	r3, #3
 800d280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d282:	2303      	movs	r3, #3
 800d284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d286:	2300      	movs	r3, #0
 800d288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d28a:	f107 031c 	add.w	r3, r7, #28
 800d28e:	4619      	mov	r1, r3
 800d290:	482c      	ldr	r0, [pc, #176]	; (800d344 <MX_GPIO_Init+0x1c4>)
 800d292:	f001 f8a7 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800d296:	2301      	movs	r3, #1
 800d298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d29a:	4b2b      	ldr	r3, [pc, #172]	; (800d348 <MX_GPIO_Init+0x1c8>)
 800d29c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d2a2:	f107 031c 	add.w	r3, r7, #28
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4828      	ldr	r0, [pc, #160]	; (800d34c <MX_GPIO_Init+0x1cc>)
 800d2aa:	f001 f89b 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800d2ae:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 800d2b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2bc:	f107 031c 	add.w	r3, r7, #28
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4822      	ldr	r0, [pc, #136]	; (800d34c <MX_GPIO_Init+0x1cc>)
 800d2c4:	f001 f88e 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800d2c8:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800d2cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2d6:	f107 031c 	add.w	r3, r7, #28
 800d2da:	4619      	mov	r1, r3
 800d2dc:	481c      	ldr	r0, [pc, #112]	; (800d350 <MX_GPIO_Init+0x1d0>)
 800d2de:	f001 f881 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800d2e2:	f640 73ff 	movw	r3, #4095	; 0xfff
 800d2e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2f0:	f107 031c 	add.w	r3, r7, #28
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4810      	ldr	r0, [pc, #64]	; (800d338 <MX_GPIO_Init+0x1b8>)
 800d2f8:	f001 f874 	bl	800e3e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800d2fc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d302:	2301      	movs	r3, #1
 800d304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d306:	2300      	movs	r3, #0
 800d308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d30a:	2300      	movs	r3, #0
 800d30c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d30e:	f107 031c 	add.w	r3, r7, #28
 800d312:	4619      	mov	r1, r3
 800d314:	4808      	ldr	r0, [pc, #32]	; (800d338 <MX_GPIO_Init+0x1b8>)
 800d316:	f001 f865 	bl	800e3e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 800d31a:	2200      	movs	r2, #0
 800d31c:	210f      	movs	r1, #15
 800d31e:	2006      	movs	r0, #6
 800d320:	f000 fcb5 	bl	800dc8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d324:	2006      	movs	r0, #6
 800d326:	f000 fcce 	bl	800dcc6 <HAL_NVIC_EnableIRQ>

}
 800d32a:	bf00      	nop
 800d32c:	3730      	adds	r7, #48	; 0x30
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	40023800 	.word	0x40023800
 800d338:	40020c00 	.word	0x40020c00
 800d33c:	40021000 	.word	0x40021000
 800d340:	40020800 	.word	0x40020800
 800d344:	40021c00 	.word	0x40021c00
 800d348:	10110000 	.word	0x10110000
 800d34c:	40020000 	.word	0x40020000
 800d350:	40020400 	.word	0x40020400

0800d354 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800d35a:	f000 fb4b 	bl	800d9f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800d35e:	f000 f84d 	bl	800d3fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800d362:	f7ff ff0d 	bl	800d180 <MX_GPIO_Init>
	MX_TIM13_Init();
 800d366:	f000 fa23 	bl	800d7b0 <MX_TIM13_Init>
	MX_USART3_UART_Init();
 800d36a:	f000 fa8d 	bl	800d888 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	cli_init();
 800d36e:	f7f4 fd25 	bl	8001dbc <cli_init>
	PRINTLN("Periph Init Finished");
 800d372:	2261      	movs	r2, #97	; 0x61
 800d374:	491a      	ldr	r1, [pc, #104]	; (800d3e0 <main+0x8c>)
 800d376:	481b      	ldr	r0, [pc, #108]	; (800d3e4 <main+0x90>)
 800d378:	f003 fc86 	bl	8010c88 <iprintf>
	ASSERT(os_init("main", 10, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 800d37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	4b19      	ldr	r3, [pc, #100]	; (800d3e8 <main+0x94>)
 800d384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d388:	210a      	movs	r1, #10
 800d38a:	4818      	ldr	r0, [pc, #96]	; (800d3ec <main+0x98>)
 800d38c:	f7f5 f9ca 	bl	8002724 <os_init>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d004      	beq.n	800d3a0 <main+0x4c>
 800d396:	2262      	movs	r2, #98	; 0x62
 800d398:	4911      	ldr	r1, [pc, #68]	; (800d3e0 <main+0x8c>)
 800d39a:	4815      	ldr	r0, [pc, #84]	; (800d3f0 <main+0x9c>)
 800d39c:	f003 fc74 	bl	8010c88 <iprintf>
	os_scheduler_start();
 800d3a0:	f7f7 fc0e 	bl	8004bc0 <os_scheduler_start>

	PRINTLN("Init OS finished");
 800d3a4:	2265      	movs	r2, #101	; 0x65
 800d3a6:	490e      	ldr	r1, [pc, #56]	; (800d3e0 <main+0x8c>)
 800d3a8:	4812      	ldr	r0, [pc, #72]	; (800d3f4 <main+0xa0>)
 800d3aa:	f003 fc6d 	bl	8010c88 <iprintf>
	os_lfs_init();
 800d3ae:	f7ff fbef 	bl	800cb90 <os_lfs_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t tick_before = HAL_GetTick();
 800d3b2:	f000 fb85 	bl	800dac0 <HAL_GetTick>
 800d3b6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		cli_process();
 800d3b8:	f7f4 fd1e 	bl	8001df8 <cli_process>

		uint32_t tick_now = HAL_GetTick();
 800d3bc:	f000 fb80 	bl	800dac0 <HAL_GetTick>
 800d3c0:	6038      	str	r0, [r7, #0]
		if(tick_now - tick_before > 1000){
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3cc:	d9f4      	bls.n	800d3b8 <main+0x64>
			HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800d3ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d3d2:	4809      	ldr	r0, [pc, #36]	; (800d3f8 <main+0xa4>)
 800d3d4:	f001 f9b9 	bl	800e74a <HAL_GPIO_TogglePin>
			tick_before = tick_now;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	607b      	str	r3, [r7, #4]
	{
 800d3dc:	e7ec      	b.n	800d3b8 <main+0x64>
 800d3de:	bf00      	nop
 800d3e0:	08012f70 	.word	0x08012f70
 800d3e4:	08012f78 	.word	0x08012f78
 800d3e8:	08012f9c 	.word	0x08012f9c
 800d3ec:	08012fa4 	.word	0x08012fa4
 800d3f0:	08012fac 	.word	0x08012fac
 800d3f4:	08012fc8 	.word	0x08012fc8
 800d3f8:	40020c00 	.word	0x40020c00

0800d3fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b094      	sub	sp, #80	; 0x50
 800d400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d402:	f107 0320 	add.w	r3, r7, #32
 800d406:	2230      	movs	r2, #48	; 0x30
 800d408:	2100      	movs	r1, #0
 800d40a:	4618      	mov	r0, r3
 800d40c:	f003 f96c 	bl	80106e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d410:	f107 030c 	add.w	r3, r7, #12
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	609a      	str	r2, [r3, #8]
 800d41c:	60da      	str	r2, [r3, #12]
 800d41e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800d420:	2300      	movs	r3, #0
 800d422:	60bb      	str	r3, [r7, #8]
 800d424:	4b27      	ldr	r3, [pc, #156]	; (800d4c4 <SystemClock_Config+0xc8>)
 800d426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d428:	4a26      	ldr	r2, [pc, #152]	; (800d4c4 <SystemClock_Config+0xc8>)
 800d42a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d42e:	6413      	str	r3, [r2, #64]	; 0x40
 800d430:	4b24      	ldr	r3, [pc, #144]	; (800d4c4 <SystemClock_Config+0xc8>)
 800d432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d438:	60bb      	str	r3, [r7, #8]
 800d43a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d43c:	2300      	movs	r3, #0
 800d43e:	607b      	str	r3, [r7, #4]
 800d440:	4b21      	ldr	r3, [pc, #132]	; (800d4c8 <SystemClock_Config+0xcc>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a20      	ldr	r2, [pc, #128]	; (800d4c8 <SystemClock_Config+0xcc>)
 800d446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	4b1e      	ldr	r3, [pc, #120]	; (800d4c8 <SystemClock_Config+0xcc>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d454:	607b      	str	r3, [r7, #4]
 800d456:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d458:	2302      	movs	r3, #2
 800d45a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d45c:	2301      	movs	r3, #1
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d460:	2310      	movs	r3, #16
 800d462:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d464:	2302      	movs	r3, #2
 800d466:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d468:	2300      	movs	r3, #0
 800d46a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800d46c:	2308      	movs	r3, #8
 800d46e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800d470:	2354      	movs	r3, #84	; 0x54
 800d472:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d474:	2302      	movs	r3, #2
 800d476:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800d478:	2307      	movs	r3, #7
 800d47a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d47c:	f107 0320 	add.w	r3, r7, #32
 800d480:	4618      	mov	r0, r3
 800d482:	f001 f9a1 	bl	800e7c8 <HAL_RCC_OscConfig>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800d48c:	f000 f81e 	bl	800d4cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d490:	230f      	movs	r3, #15
 800d492:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d494:	2302      	movs	r3, #2
 800d496:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d498:	2300      	movs	r3, #0
 800d49a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d4a6:	f107 030c 	add.w	r3, r7, #12
 800d4aa:	2102      	movs	r1, #2
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f001 fbfb 	bl	800eca8 <HAL_RCC_ClockConfig>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800d4b8:	f000 f808 	bl	800d4cc <Error_Handler>
	}
}
 800d4bc:	bf00      	nop
 800d4be:	3750      	adds	r7, #80	; 0x50
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	40023800 	.word	0x40023800
 800d4c8:	40007000 	.word	0x40007000

0800d4cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800d4d0:	bf00      	nop
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
	...

0800d4dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	607b      	str	r3, [r7, #4]
 800d4e6:	4b21      	ldr	r3, [pc, #132]	; (800d56c <HAL_MspInit+0x90>)
 800d4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ea:	4a20      	ldr	r2, [pc, #128]	; (800d56c <HAL_MspInit+0x90>)
 800d4ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4f0:	6453      	str	r3, [r2, #68]	; 0x44
 800d4f2:	4b1e      	ldr	r3, [pc, #120]	; (800d56c <HAL_MspInit+0x90>)
 800d4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4fa:	607b      	str	r3, [r7, #4]
 800d4fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4fe:	2300      	movs	r3, #0
 800d500:	603b      	str	r3, [r7, #0]
 800d502:	4b1a      	ldr	r3, [pc, #104]	; (800d56c <HAL_MspInit+0x90>)
 800d504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d506:	4a19      	ldr	r2, [pc, #100]	; (800d56c <HAL_MspInit+0x90>)
 800d508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d50c:	6413      	str	r3, [r2, #64]	; 0x40
 800d50e:	4b17      	ldr	r3, [pc, #92]	; (800d56c <HAL_MspInit+0x90>)
 800d510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d516:	603b      	str	r3, [r7, #0]
 800d518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 800d51a:	2200      	movs	r2, #0
 800d51c:	210f      	movs	r1, #15
 800d51e:	f06f 000b 	mvn.w	r0, #11
 800d522:	f000 fbb4 	bl	800dc8e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 800d526:	2200      	movs	r2, #0
 800d528:	210f      	movs	r1, #15
 800d52a:	f06f 000a 	mvn.w	r0, #10
 800d52e:	f000 fbae 	bl	800dc8e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800d532:	2200      	movs	r2, #0
 800d534:	210f      	movs	r1, #15
 800d536:	f06f 0009 	mvn.w	r0, #9
 800d53a:	f000 fba8 	bl	800dc8e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800d53e:	2200      	movs	r2, #0
 800d540:	210f      	movs	r1, #15
 800d542:	f06f 0004 	mvn.w	r0, #4
 800d546:	f000 fba2 	bl	800dc8e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800d54a:	2200      	movs	r2, #0
 800d54c:	210f      	movs	r1, #15
 800d54e:	f06f 0003 	mvn.w	r0, #3
 800d552:	f000 fb9c 	bl	800dc8e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d556:	2200      	movs	r2, #0
 800d558:	210f      	movs	r1, #15
 800d55a:	f06f 0001 	mvn.w	r0, #1
 800d55e:	f000 fb96 	bl	800dc8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d562:	bf00      	nop
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	40023800 	.word	0x40023800

0800d570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d570:	b480      	push	{r7}
 800d572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d574:	bf00      	nop
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d57e:	b480      	push	{r7}
 800d580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d582:	e7fe      	b.n	800d582 <HardFault_Handler+0x4>

0800d584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d588:	e7fe      	b.n	800d588 <MemManage_Handler+0x4>

0800d58a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d58a:	b480      	push	{r7}
 800d58c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d58e:	e7fe      	b.n	800d58e <BusFault_Handler+0x4>

0800d590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d590:	b480      	push	{r7}
 800d592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d594:	e7fe      	b.n	800d594 <UsageFault_Handler+0x4>

0800d596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d596:	b480      	push	{r7}
 800d598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d59a:	bf00      	nop
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d5a8:	bf00      	nop
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d5b6:	f000 fa6f 	bl	800da98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	f7f8 f8d8 	bl	8005770 <os_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800d5c0:	bf00      	nop
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	f001 f8d9 	bl	800e780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800d5ce:	bf00      	nop
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d5d8:	4802      	ldr	r0, [pc, #8]	; (800d5e4 <USART3_IRQHandler+0x10>)
 800d5da:	f002 f96f 	bl	800f8bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d5de:	bf00      	nop
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20014ecc 	.word	0x20014ecc

0800d5e8 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;


int __io_putchar(int ch){
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 800d5f0:	1d39      	adds	r1, r7, #4
 800d5f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	4803      	ldr	r0, [pc, #12]	; (800d608 <__io_putchar+0x20>)
 800d5fa:	f001 fea6 	bl	800f34a <HAL_UART_Transmit>
	return 0;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20014ecc 	.word	0x20014ecc

0800d60c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d60c:	b480      	push	{r7}
 800d60e:	af00      	add	r7, sp, #0
	return 1;
 800d610:	2301      	movs	r3, #1
}
 800d612:	4618      	mov	r0, r3
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <_kill>:

int _kill(int pid, int sig)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d626:	f002 ffe5 	bl	80105f4 <__errno>
 800d62a:	4602      	mov	r2, r0
 800d62c:	2316      	movs	r3, #22
 800d62e:	6013      	str	r3, [r2, #0]
	return -1;
 800d630:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <_exit>:

void _exit (int status)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d644:	f04f 31ff 	mov.w	r1, #4294967295
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7ff ffe7 	bl	800d61c <_kill>
	while (1) {}		/* Make sure we hang here */
 800d64e:	e7fe      	b.n	800d64e <_exit+0x12>

0800d650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d65c:	2300      	movs	r3, #0
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	e00a      	b.n	800d678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d662:	f3af 8000 	nop.w
 800d666:	4601      	mov	r1, r0
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	60ba      	str	r2, [r7, #8]
 800d66e:	b2ca      	uxtb	r2, r1
 800d670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	3301      	adds	r3, #1
 800d676:	617b      	str	r3, [r7, #20]
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	dbf0      	blt.n	800d662 <_read+0x12>
	}

return len;
 800d680:	687b      	ldr	r3, [r7, #4]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b086      	sub	sp, #24
 800d68e:	af00      	add	r7, sp, #0
 800d690:	60f8      	str	r0, [r7, #12]
 800d692:	60b9      	str	r1, [r7, #8]
 800d694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d696:	2300      	movs	r3, #0
 800d698:	617b      	str	r3, [r7, #20]
 800d69a:	e009      	b.n	800d6b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	60ba      	str	r2, [r7, #8]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff ff9f 	bl	800d5e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	dbf1      	blt.n	800d69c <_write+0x12>
	}
	return len;
 800d6b8:	687b      	ldr	r3, [r7, #4]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <_close>:

int _close(int file)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b083      	sub	sp, #12
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
	return -1;
 800d6ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d6ea:	605a      	str	r2, [r3, #4]
	return 0;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <_isatty>:

int _isatty(int file)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b083      	sub	sp, #12
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
	return 1;
 800d702:	2301      	movs	r3, #1
}
 800d704:	4618      	mov	r0, r3
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
	return 0;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d734:	4b11      	ldr	r3, [pc, #68]	; (800d77c <_sbrk+0x50>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d102      	bne.n	800d742 <_sbrk+0x16>
		heap_end = &end;
 800d73c:	4b0f      	ldr	r3, [pc, #60]	; (800d77c <_sbrk+0x50>)
 800d73e:	4a10      	ldr	r2, [pc, #64]	; (800d780 <_sbrk+0x54>)
 800d740:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d742:	4b0e      	ldr	r3, [pc, #56]	; (800d77c <_sbrk+0x50>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d748:	4b0c      	ldr	r3, [pc, #48]	; (800d77c <_sbrk+0x50>)
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4413      	add	r3, r2
 800d750:	466a      	mov	r2, sp
 800d752:	4293      	cmp	r3, r2
 800d754:	d907      	bls.n	800d766 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d756:	f002 ff4d 	bl	80105f4 <__errno>
 800d75a:	4602      	mov	r2, r0
 800d75c:	230c      	movs	r3, #12
 800d75e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d760:	f04f 33ff 	mov.w	r3, #4294967295
 800d764:	e006      	b.n	800d774 <_sbrk+0x48>
	}

	heap_end += incr;
 800d766:	4b05      	ldr	r3, [pc, #20]	; (800d77c <_sbrk+0x50>)
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4413      	add	r3, r2
 800d76e:	4a03      	ldr	r2, [pc, #12]	; (800d77c <_sbrk+0x50>)
 800d770:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d772:	68fb      	ldr	r3, [r7, #12]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20014dc4 	.word	0x20014dc4
 800d780:	20014f38 	.word	0x20014f38

0800d784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d784:	b480      	push	{r7}
 800d786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d788:	4b08      	ldr	r3, [pc, #32]	; (800d7ac <SystemInit+0x28>)
 800d78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d78e:	4a07      	ldr	r2, [pc, #28]	; (800d7ac <SystemInit+0x28>)
 800d790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d798:	4b04      	ldr	r3, [pc, #16]	; (800d7ac <SystemInit+0x28>)
 800d79a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d79e:	609a      	str	r2, [r3, #8]
#endif
}
 800d7a0:	bf00      	nop
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	e000ed00 	.word	0xe000ed00

0800d7b0 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 800d7b4:	4b12      	ldr	r3, [pc, #72]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7b6:	4a13      	ldr	r2, [pc, #76]	; (800d804 <MX_TIM13_Init+0x54>)
 800d7b8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800d7ba:	4b11      	ldr	r3, [pc, #68]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d7c0:	4b0f      	ldr	r3, [pc, #60]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0xFFFF;
 800d7c6:	4b0e      	ldr	r3, [pc, #56]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7cc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d7ce:	4b0c      	ldr	r3, [pc, #48]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800d7da:	4809      	ldr	r0, [pc, #36]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7dc:	f001 fc56 	bl	800f08c <HAL_TIM_Base_Init>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800d7e6:	f7ff fe71 	bl	800d4cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 800d7ea:	2108      	movs	r1, #8
 800d7ec:	4804      	ldr	r0, [pc, #16]	; (800d800 <MX_TIM13_Init+0x50>)
 800d7ee:	f001 fc78 	bl	800f0e2 <HAL_TIM_OnePulse_Init>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 800d7f8:	f7ff fe68 	bl	800d4cc <Error_Handler>
  }

}
 800d7fc:	bf00      	nop
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20014e8c 	.word	0x20014e8c
 800d804:	40001c00 	.word	0x40001c00

0800d808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a0b      	ldr	r2, [pc, #44]	; (800d844 <HAL_TIM_Base_MspInit+0x3c>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d10d      	bne.n	800d836 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800d81a:	2300      	movs	r3, #0
 800d81c:	60fb      	str	r3, [r7, #12]
 800d81e:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <HAL_TIM_Base_MspInit+0x40>)
 800d820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d822:	4a09      	ldr	r2, [pc, #36]	; (800d848 <HAL_TIM_Base_MspInit+0x40>)
 800d824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d828:	6413      	str	r3, [r2, #64]	; 0x40
 800d82a:	4b07      	ldr	r3, [pc, #28]	; (800d848 <HAL_TIM_Base_MspInit+0x40>)
 800d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d832:	60fb      	str	r3, [r7, #12]
 800d834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	40001c00 	.word	0x40001c00
 800d848:	40023800 	.word	0x40023800

0800d84c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
	if(huart == &USART_CLI){
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a0a      	ldr	r2, [pc, #40]	; (800d880 <HAL_UART_RxCpltCallback+0x34>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d10c      	bne.n	800d876 <HAL_UART_RxCpltCallback+0x2a>
		if(xModem_getState() == 1){
 800d85c:	f7ff fb36 	bl	800cecc <xModem_getState>
 800d860:	4603      	mov	r3, r0
 800d862:	2b01      	cmp	r3, #1
 800d864:	d105      	bne.n	800d872 <HAL_UART_RxCpltCallback+0x26>
			os_evt_set(xmodem_evt_rcv);
 800d866:	4b07      	ldr	r3, [pc, #28]	; (800d884 <HAL_UART_RxCpltCallback+0x38>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7f5 f8bc 	bl	80029e8 <os_evt_set>
		}
		else{
			cli_rcv_char_cb_irq();
		}
	}
}
 800d870:	e001      	b.n	800d876 <HAL_UART_RxCpltCallback+0x2a>
			cli_rcv_char_cb_irq();
 800d872:	f7f4 fa8d 	bl	8001d90 <cli_rcv_char_cb_irq>
}
 800d876:	bf00      	nop
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20014ecc 	.word	0x20014ecc
 800d884:	20014e88 	.word	0x20014e88

0800d888 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800d88c:	4b11      	ldr	r3, [pc, #68]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d88e:	4a12      	ldr	r2, [pc, #72]	; (800d8d8 <MX_USART3_UART_Init+0x50>)
 800d890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800d892:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d89a:	4b0e      	ldr	r3, [pc, #56]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d8a0:	4b0c      	ldr	r3, [pc, #48]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d8a6:	4b0b      	ldr	r3, [pc, #44]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d8ac:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d8ae:	220c      	movs	r2, #12
 800d8b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d8b2:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d8b8:	4b06      	ldr	r3, [pc, #24]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d8be:	4805      	ldr	r0, [pc, #20]	; (800d8d4 <MX_USART3_UART_Init+0x4c>)
 800d8c0:	f001 fcf6 	bl	800f2b0 <HAL_UART_Init>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d001      	beq.n	800d8ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d8ca:	f7ff fdff 	bl	800d4cc <Error_Handler>
  }

}
 800d8ce:	bf00      	nop
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20014ecc 	.word	0x20014ecc
 800d8d8:	40004800 	.word	0x40004800

0800d8dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08a      	sub	sp, #40	; 0x28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8e4:	f107 0314 	add.w	r3, r7, #20
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	605a      	str	r2, [r3, #4]
 800d8ee:	609a      	str	r2, [r3, #8]
 800d8f0:	60da      	str	r2, [r3, #12]
 800d8f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a26      	ldr	r2, [pc, #152]	; (800d994 <HAL_UART_MspInit+0xb8>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d145      	bne.n	800d98a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d8fe:	2300      	movs	r3, #0
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	4b25      	ldr	r3, [pc, #148]	; (800d998 <HAL_UART_MspInit+0xbc>)
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	4a24      	ldr	r2, [pc, #144]	; (800d998 <HAL_UART_MspInit+0xbc>)
 800d908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d90c:	6413      	str	r3, [r2, #64]	; 0x40
 800d90e:	4b22      	ldr	r3, [pc, #136]	; (800d998 <HAL_UART_MspInit+0xbc>)
 800d910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
 800d91e:	4b1e      	ldr	r3, [pc, #120]	; (800d998 <HAL_UART_MspInit+0xbc>)
 800d920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d922:	4a1d      	ldr	r2, [pc, #116]	; (800d998 <HAL_UART_MspInit+0xbc>)
 800d924:	f043 0304 	orr.w	r3, r3, #4
 800d928:	6313      	str	r3, [r2, #48]	; 0x30
 800d92a:	4b1b      	ldr	r3, [pc, #108]	; (800d998 <HAL_UART_MspInit+0xbc>)
 800d92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92e:	f003 0304 	and.w	r3, r3, #4
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d93c:	2302      	movs	r3, #2
 800d93e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d944:	2303      	movs	r3, #3
 800d946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d948:	2307      	movs	r3, #7
 800d94a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	4619      	mov	r1, r3
 800d952:	4812      	ldr	r0, [pc, #72]	; (800d99c <HAL_UART_MspInit+0xc0>)
 800d954:	f000 fd46 	bl	800e3e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d95c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d95e:	2302      	movs	r3, #2
 800d960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d962:	2301      	movs	r3, #1
 800d964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d966:	2303      	movs	r3, #3
 800d968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d96a:	2307      	movs	r3, #7
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d96e:	f107 0314 	add.w	r3, r7, #20
 800d972:	4619      	mov	r1, r3
 800d974:	4809      	ldr	r0, [pc, #36]	; (800d99c <HAL_UART_MspInit+0xc0>)
 800d976:	f000 fd35 	bl	800e3e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 800d97a:	2200      	movs	r2, #0
 800d97c:	210f      	movs	r1, #15
 800d97e:	2027      	movs	r0, #39	; 0x27
 800d980:	f000 f985 	bl	800dc8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d984:	2027      	movs	r0, #39	; 0x27
 800d986:	f000 f99e 	bl	800dcc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800d98a:	bf00      	nop
 800d98c:	3728      	adds	r7, #40	; 0x28
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	40004800 	.word	0x40004800
 800d998:	40023800 	.word	0x40023800
 800d99c:	40020800 	.word	0x40020800

0800d9a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d9a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d9d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d9a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d9a6:	e003      	b.n	800d9b0 <LoopCopyDataInit>

0800d9a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d9a8:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d9aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d9ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d9ae:	3104      	adds	r1, #4

0800d9b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d9b0:	480b      	ldr	r0, [pc, #44]	; (800d9e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d9b2:	4b0c      	ldr	r3, [pc, #48]	; (800d9e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d9b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d9b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d9b8:	d3f6      	bcc.n	800d9a8 <CopyDataInit>
  ldr  r2, =_sbss
 800d9ba:	4a0b      	ldr	r2, [pc, #44]	; (800d9e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d9bc:	e002      	b.n	800d9c4 <LoopFillZerobss>

0800d9be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d9be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d9c0:	f842 3b04 	str.w	r3, [r2], #4

0800d9c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d9c4:	4b09      	ldr	r3, [pc, #36]	; (800d9ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d9c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d9c8:	d3f9      	bcc.n	800d9be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d9ca:	f7ff fedb 	bl	800d784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d9ce:	f002 fe29 	bl	8010624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d9d2:	f7ff fcbf 	bl	800d354 <main>
  bx  lr    
 800d9d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d9d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d9dc:	08013398 	.word	0x08013398
  ldr  r0, =_sdata
 800d9e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d9e4:	20000498 	.word	0x20000498
  ldr  r2, =_sbss
 800d9e8:	20000498 	.word	0x20000498
  ldr  r3, = _ebss
 800d9ec:	20014f34 	.word	0x20014f34

0800d9f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d9f0:	e7fe      	b.n	800d9f0 <ADC_IRQHandler>
	...

0800d9f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d9f8:	4b0e      	ldr	r3, [pc, #56]	; (800da34 <HAL_Init+0x40>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a0d      	ldr	r2, [pc, #52]	; (800da34 <HAL_Init+0x40>)
 800d9fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800da04:	4b0b      	ldr	r3, [pc, #44]	; (800da34 <HAL_Init+0x40>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a0a      	ldr	r2, [pc, #40]	; (800da34 <HAL_Init+0x40>)
 800da0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800da10:	4b08      	ldr	r3, [pc, #32]	; (800da34 <HAL_Init+0x40>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a07      	ldr	r2, [pc, #28]	; (800da34 <HAL_Init+0x40>)
 800da16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800da1c:	2003      	movs	r0, #3
 800da1e:	f000 f92b 	bl	800dc78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800da22:	200f      	movs	r0, #15
 800da24:	f000 f808 	bl	800da38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800da28:	f7ff fd58 	bl	800d4dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	40023c00 	.word	0x40023c00

0800da38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800da40:	4b12      	ldr	r3, [pc, #72]	; (800da8c <HAL_InitTick+0x54>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	4b12      	ldr	r3, [pc, #72]	; (800da90 <HAL_InitTick+0x58>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	4619      	mov	r1, r3
 800da4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da52:	fbb2 f3f3 	udiv	r3, r2, r3
 800da56:	4618      	mov	r0, r3
 800da58:	f000 f943 	bl	800dce2 <HAL_SYSTICK_Config>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e00e      	b.n	800da84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b0f      	cmp	r3, #15
 800da6a:	d80a      	bhi.n	800da82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800da6c:	2200      	movs	r2, #0
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	f04f 30ff 	mov.w	r0, #4294967295
 800da74:	f000 f90b 	bl	800dc8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800da78:	4a06      	ldr	r2, [pc, #24]	; (800da94 <HAL_InitTick+0x5c>)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	e000      	b.n	800da84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800da82:	2301      	movs	r3, #1
}
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	200002bc 	.word	0x200002bc
 800da90:	200002c4 	.word	0x200002c4
 800da94:	200002c0 	.word	0x200002c0

0800da98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800da9c:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <HAL_IncTick+0x20>)
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	461a      	mov	r2, r3
 800daa2:	4b06      	ldr	r3, [pc, #24]	; (800dabc <HAL_IncTick+0x24>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4413      	add	r3, r2
 800daa8:	4a04      	ldr	r2, [pc, #16]	; (800dabc <HAL_IncTick+0x24>)
 800daaa:	6013      	str	r3, [r2, #0]
}
 800daac:	bf00      	nop
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	200002c4 	.word	0x200002c4
 800dabc:	20014f0c 	.word	0x20014f0c

0800dac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
  return uwTick;
 800dac4:	4b03      	ldr	r3, [pc, #12]	; (800dad4 <HAL_GetTick+0x14>)
 800dac6:	681b      	ldr	r3, [r3, #0]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	20014f0c 	.word	0x20014f0c

0800dad8 <__NVIC_SetPriorityGrouping>:
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f003 0307 	and.w	r3, r3, #7
 800dae6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <__NVIC_SetPriorityGrouping+0x44>)
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800daf4:	4013      	ands	r3, r2
 800daf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800db00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800db04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800db0a:	4a04      	ldr	r2, [pc, #16]	; (800db1c <__NVIC_SetPriorityGrouping+0x44>)
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	60d3      	str	r3, [r2, #12]
}
 800db10:	bf00      	nop
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	e000ed00 	.word	0xe000ed00

0800db20 <__NVIC_GetPriorityGrouping>:
{
 800db20:	b480      	push	{r7}
 800db22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <__NVIC_GetPriorityGrouping+0x18>)
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	0a1b      	lsrs	r3, r3, #8
 800db2a:	f003 0307 	and.w	r3, r3, #7
}
 800db2e:	4618      	mov	r0, r3
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	e000ed00 	.word	0xe000ed00

0800db3c <__NVIC_EnableIRQ>:
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	4603      	mov	r3, r0
 800db44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	db0b      	blt.n	800db66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db4e:	79fb      	ldrb	r3, [r7, #7]
 800db50:	f003 021f 	and.w	r2, r3, #31
 800db54:	4907      	ldr	r1, [pc, #28]	; (800db74 <__NVIC_EnableIRQ+0x38>)
 800db56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db5a:	095b      	lsrs	r3, r3, #5
 800db5c:	2001      	movs	r0, #1
 800db5e:	fa00 f202 	lsl.w	r2, r0, r2
 800db62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800db66:	bf00      	nop
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	e000e100 	.word	0xe000e100

0800db78 <__NVIC_SetPriority>:
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	6039      	str	r1, [r7, #0]
 800db82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	db0a      	blt.n	800dba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	490c      	ldr	r1, [pc, #48]	; (800dbc4 <__NVIC_SetPriority+0x4c>)
 800db92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db96:	0112      	lsls	r2, r2, #4
 800db98:	b2d2      	uxtb	r2, r2
 800db9a:	440b      	add	r3, r1
 800db9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dba0:	e00a      	b.n	800dbb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	4908      	ldr	r1, [pc, #32]	; (800dbc8 <__NVIC_SetPriority+0x50>)
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	f003 030f 	and.w	r3, r3, #15
 800dbae:	3b04      	subs	r3, #4
 800dbb0:	0112      	lsls	r2, r2, #4
 800dbb2:	b2d2      	uxtb	r2, r2
 800dbb4:	440b      	add	r3, r1
 800dbb6:	761a      	strb	r2, [r3, #24]
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	e000e100 	.word	0xe000e100
 800dbc8:	e000ed00 	.word	0xe000ed00

0800dbcc <NVIC_EncodePriority>:
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b089      	sub	sp, #36	; 0x24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f003 0307 	and.w	r3, r3, #7
 800dbde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	f1c3 0307 	rsb	r3, r3, #7
 800dbe6:	2b04      	cmp	r3, #4
 800dbe8:	bf28      	it	cs
 800dbea:	2304      	movcs	r3, #4
 800dbec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	2b06      	cmp	r3, #6
 800dbf4:	d902      	bls.n	800dbfc <NVIC_EncodePriority+0x30>
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	3b03      	subs	r3, #3
 800dbfa:	e000      	b.n	800dbfe <NVIC_EncodePriority+0x32>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc00:	f04f 32ff 	mov.w	r2, #4294967295
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0a:	43da      	mvns	r2, r3
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	401a      	ands	r2, r3
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dc14:	f04f 31ff 	mov.w	r1, #4294967295
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc1e:	43d9      	mvns	r1, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc24:	4313      	orrs	r3, r2
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3724      	adds	r7, #36	; 0x24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
	...

0800dc34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dc44:	d301      	bcc.n	800dc4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dc46:	2301      	movs	r3, #1
 800dc48:	e00f      	b.n	800dc6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dc4a:	4a0a      	ldr	r2, [pc, #40]	; (800dc74 <SysTick_Config+0x40>)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dc52:	210f      	movs	r1, #15
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	f7ff ff8e 	bl	800db78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dc5c:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <SysTick_Config+0x40>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dc62:	4b04      	ldr	r3, [pc, #16]	; (800dc74 <SysTick_Config+0x40>)
 800dc64:	2207      	movs	r2, #7
 800dc66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	e000e010 	.word	0xe000e010

0800dc78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff ff29 	bl	800dad8 <__NVIC_SetPriorityGrouping>
}
 800dc86:	bf00      	nop
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b086      	sub	sp, #24
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	4603      	mov	r3, r0
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
 800dc9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dca0:	f7ff ff3e 	bl	800db20 <__NVIC_GetPriorityGrouping>
 800dca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	68b9      	ldr	r1, [r7, #8]
 800dcaa:	6978      	ldr	r0, [r7, #20]
 800dcac:	f7ff ff8e 	bl	800dbcc <NVIC_EncodePriority>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff ff5d 	bl	800db78 <__NVIC_SetPriority>
}
 800dcbe:	bf00      	nop
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	4603      	mov	r3, r0
 800dcce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dcd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff ff31 	bl	800db3c <__NVIC_EnableIRQ>
}
 800dcda:	bf00      	nop
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff ffa2 	bl	800dc34 <SysTick_Config>
 800dcf0:	4603      	mov	r3, r0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd06:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800dd08:	f7ff feda 	bl	800dac0 <HAL_GetTick>
 800dd0c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d008      	beq.n	800dd2c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2280      	movs	r2, #128	; 0x80
 800dd1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e052      	b.n	800ddd2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f022 0216 	bic.w	r2, r2, #22
 800dd3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	695a      	ldr	r2, [r3, #20]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd4a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d103      	bne.n	800dd5c <HAL_DMA_Abort+0x62>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d007      	beq.n	800dd6c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f022 0208 	bic.w	r2, r2, #8
 800dd6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f022 0201 	bic.w	r2, r2, #1
 800dd7a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dd7c:	e013      	b.n	800dda6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800dd7e:	f7ff fe9f 	bl	800dac0 <HAL_GetTick>
 800dd82:	4602      	mov	r2, r0
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	2b05      	cmp	r3, #5
 800dd8a:	d90c      	bls.n	800dda6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800dda2:	2303      	movs	r3, #3
 800dda4:	e015      	b.n	800ddd2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e4      	bne.n	800dd7e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddb8:	223f      	movs	r2, #63	; 0x3f
 800ddba:	409a      	lsls	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ddda:	b480      	push	{r7}
 800dddc:	b083      	sub	sp, #12
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d004      	beq.n	800ddf8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2280      	movs	r2, #128	; 0x80
 800ddf2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e00c      	b.n	800de12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2205      	movs	r2, #5
 800ddfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f022 0201 	bic.w	r2, r2, #1
 800de0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800de1e:	b480      	push	{r7}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
	...

0800de38 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800de4a:	4b23      	ldr	r3, [pc, #140]	; (800ded8 <HAL_FLASH_Program+0xa0>)
 800de4c:	7e1b      	ldrb	r3, [r3, #24]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d101      	bne.n	800de56 <HAL_FLASH_Program+0x1e>
 800de52:	2302      	movs	r3, #2
 800de54:	e03b      	b.n	800dece <HAL_FLASH_Program+0x96>
 800de56:	4b20      	ldr	r3, [pc, #128]	; (800ded8 <HAL_FLASH_Program+0xa0>)
 800de58:	2201      	movs	r2, #1
 800de5a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800de5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800de60:	f000 f870 	bl	800df44 <FLASH_WaitForLastOperation>
 800de64:	4603      	mov	r3, r0
 800de66:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800de68:	7dfb      	ldrb	r3, [r7, #23]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d12b      	bne.n	800dec6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d105      	bne.n	800de80 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800de74:	783b      	ldrb	r3, [r7, #0]
 800de76:	4619      	mov	r1, r3
 800de78:	68b8      	ldr	r0, [r7, #8]
 800de7a:	f000 f919 	bl	800e0b0 <FLASH_Program_Byte>
 800de7e:	e016      	b.n	800deae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d105      	bne.n	800de92 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800de86:	883b      	ldrh	r3, [r7, #0]
 800de88:	4619      	mov	r1, r3
 800de8a:	68b8      	ldr	r0, [r7, #8]
 800de8c:	f000 f8ec 	bl	800e068 <FLASH_Program_HalfWord>
 800de90:	e00d      	b.n	800deae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d105      	bne.n	800dea4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	4619      	mov	r1, r3
 800de9c:	68b8      	ldr	r0, [r7, #8]
 800de9e:	f000 f8c1 	bl	800e024 <FLASH_Program_Word>
 800dea2:	e004      	b.n	800deae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800dea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dea8:	68b8      	ldr	r0, [r7, #8]
 800deaa:	f000 f88b 	bl	800dfc4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800deae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800deb2:	f000 f847 	bl	800df44 <FLASH_WaitForLastOperation>
 800deb6:	4603      	mov	r3, r0
 800deb8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800deba:	4b08      	ldr	r3, [pc, #32]	; (800dedc <HAL_FLASH_Program+0xa4>)
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	4a07      	ldr	r2, [pc, #28]	; (800dedc <HAL_FLASH_Program+0xa4>)
 800dec0:	f023 0301 	bic.w	r3, r3, #1
 800dec4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dec6:	4b04      	ldr	r3, [pc, #16]	; (800ded8 <HAL_FLASH_Program+0xa0>)
 800dec8:	2200      	movs	r2, #0
 800deca:	761a      	strb	r2, [r3, #24]
  
  return status;
 800decc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20014f10 	.word	0x20014f10
 800dedc:	40023c00 	.word	0x40023c00

0800dee0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800deea:	4b0b      	ldr	r3, [pc, #44]	; (800df18 <HAL_FLASH_Unlock+0x38>)
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	2b00      	cmp	r3, #0
 800def0:	da0b      	bge.n	800df0a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800def2:	4b09      	ldr	r3, [pc, #36]	; (800df18 <HAL_FLASH_Unlock+0x38>)
 800def4:	4a09      	ldr	r2, [pc, #36]	; (800df1c <HAL_FLASH_Unlock+0x3c>)
 800def6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800def8:	4b07      	ldr	r3, [pc, #28]	; (800df18 <HAL_FLASH_Unlock+0x38>)
 800defa:	4a09      	ldr	r2, [pc, #36]	; (800df20 <HAL_FLASH_Unlock+0x40>)
 800defc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800defe:	4b06      	ldr	r3, [pc, #24]	; (800df18 <HAL_FLASH_Unlock+0x38>)
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	da01      	bge.n	800df0a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800df0a:	79fb      	ldrb	r3, [r7, #7]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	40023c00 	.word	0x40023c00
 800df1c:	45670123 	.word	0x45670123
 800df20:	cdef89ab 	.word	0xcdef89ab

0800df24 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800df24:	b480      	push	{r7}
 800df26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800df28:	4b05      	ldr	r3, [pc, #20]	; (800df40 <HAL_FLASH_Lock+0x1c>)
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	4a04      	ldr	r2, [pc, #16]	; (800df40 <HAL_FLASH_Lock+0x1c>)
 800df2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df32:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	40023c00 	.word	0x40023c00

0800df44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800df4c:	2300      	movs	r3, #0
 800df4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800df50:	4b1a      	ldr	r3, [pc, #104]	; (800dfbc <FLASH_WaitForLastOperation+0x78>)
 800df52:	2200      	movs	r2, #0
 800df54:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800df56:	f7ff fdb3 	bl	800dac0 <HAL_GetTick>
 800df5a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800df5c:	e010      	b.n	800df80 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df64:	d00c      	beq.n	800df80 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d007      	beq.n	800df7c <FLASH_WaitForLastOperation+0x38>
 800df6c:	f7ff fda8 	bl	800dac0 <HAL_GetTick>
 800df70:	4602      	mov	r2, r0
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d201      	bcs.n	800df80 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800df7c:	2303      	movs	r3, #3
 800df7e:	e019      	b.n	800dfb4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800df80:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <FLASH_WaitForLastOperation+0x7c>)
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1e8      	bne.n	800df5e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800df8c:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <FLASH_WaitForLastOperation+0x7c>)
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800df98:	4b09      	ldr	r3, [pc, #36]	; (800dfc0 <FLASH_WaitForLastOperation+0x7c>)
 800df9a:	2201      	movs	r2, #1
 800df9c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800df9e:	4b08      	ldr	r3, [pc, #32]	; (800dfc0 <FLASH_WaitForLastOperation+0x7c>)
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800dfaa:	f000 f8a3 	bl	800e0f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800dfb2:	2300      	movs	r3, #0
  
}  
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20014f10 	.word	0x20014f10
 800dfc0:	40023c00 	.word	0x40023c00

0800dfc4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800dfc4:	b490      	push	{r4, r7}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dfd0:	4b13      	ldr	r3, [pc, #76]	; (800e020 <FLASH_Program_DoubleWord+0x5c>)
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	4a12      	ldr	r2, [pc, #72]	; (800e020 <FLASH_Program_DoubleWord+0x5c>)
 800dfd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800dfdc:	4b10      	ldr	r3, [pc, #64]	; (800e020 <FLASH_Program_DoubleWord+0x5c>)
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	4a0f      	ldr	r2, [pc, #60]	; (800e020 <FLASH_Program_DoubleWord+0x5c>)
 800dfe2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dfe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800dfe8:	4b0d      	ldr	r3, [pc, #52]	; (800e020 <FLASH_Program_DoubleWord+0x5c>)
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	4a0c      	ldr	r2, [pc, #48]	; (800e020 <FLASH_Program_DoubleWord+0x5c>)
 800dfee:	f043 0301 	orr.w	r3, r3, #1
 800dff2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800dffa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800dffe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e002:	f04f 0300 	mov.w	r3, #0
 800e006:	f04f 0400 	mov.w	r4, #0
 800e00a:	0013      	movs	r3, r2
 800e00c:	2400      	movs	r4, #0
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	3204      	adds	r2, #4
 800e012:	6013      	str	r3, [r2, #0]
}
 800e014:	bf00      	nop
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bc90      	pop	{r4, r7}
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	40023c00 	.word	0x40023c00

0800e024 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e02e:	4b0d      	ldr	r3, [pc, #52]	; (800e064 <FLASH_Program_Word+0x40>)
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	4a0c      	ldr	r2, [pc, #48]	; (800e064 <FLASH_Program_Word+0x40>)
 800e034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e038:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800e03a:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <FLASH_Program_Word+0x40>)
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	4a09      	ldr	r2, [pc, #36]	; (800e064 <FLASH_Program_Word+0x40>)
 800e040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e044:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e046:	4b07      	ldr	r3, [pc, #28]	; (800e064 <FLASH_Program_Word+0x40>)
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	4a06      	ldr	r2, [pc, #24]	; (800e064 <FLASH_Program_Word+0x40>)
 800e04c:	f043 0301 	orr.w	r3, r3, #1
 800e050:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	601a      	str	r2, [r3, #0]
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	40023c00 	.word	0x40023c00

0800e068 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	460b      	mov	r3, r1
 800e072:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e074:	4b0d      	ldr	r3, [pc, #52]	; (800e0ac <FLASH_Program_HalfWord+0x44>)
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	4a0c      	ldr	r2, [pc, #48]	; (800e0ac <FLASH_Program_HalfWord+0x44>)
 800e07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e07e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <FLASH_Program_HalfWord+0x44>)
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	4a09      	ldr	r2, [pc, #36]	; (800e0ac <FLASH_Program_HalfWord+0x44>)
 800e086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e08a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e08c:	4b07      	ldr	r3, [pc, #28]	; (800e0ac <FLASH_Program_HalfWord+0x44>)
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	4a06      	ldr	r2, [pc, #24]	; (800e0ac <FLASH_Program_HalfWord+0x44>)
 800e092:	f043 0301 	orr.w	r3, r3, #1
 800e096:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	887a      	ldrh	r2, [r7, #2]
 800e09c:	801a      	strh	r2, [r3, #0]
}
 800e09e:	bf00      	nop
 800e0a0:	370c      	adds	r7, #12
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	40023c00 	.word	0x40023c00

0800e0b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	; (800e0f0 <FLASH_Program_Byte+0x40>)
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	4a0b      	ldr	r2, [pc, #44]	; (800e0f0 <FLASH_Program_Byte+0x40>)
 800e0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800e0c8:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <FLASH_Program_Byte+0x40>)
 800e0ca:	4a09      	ldr	r2, [pc, #36]	; (800e0f0 <FLASH_Program_Byte+0x40>)
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e0d0:	4b07      	ldr	r3, [pc, #28]	; (800e0f0 <FLASH_Program_Byte+0x40>)
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	4a06      	ldr	r2, [pc, #24]	; (800e0f0 <FLASH_Program_Byte+0x40>)
 800e0d6:	f043 0301 	orr.w	r3, r3, #1
 800e0da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	78fa      	ldrb	r2, [r7, #3]
 800e0e0:	701a      	strb	r2, [r3, #0]
}
 800e0e2:	bf00      	nop
 800e0e4:	370c      	adds	r7, #12
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	40023c00 	.word	0x40023c00

0800e0f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e0f4:	b480      	push	{r7}
 800e0f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e0f8:	4b27      	ldr	r3, [pc, #156]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f003 0310 	and.w	r3, r3, #16
 800e100:	2b00      	cmp	r3, #0
 800e102:	d008      	beq.n	800e116 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e104:	4b25      	ldr	r3, [pc, #148]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e106:	69db      	ldr	r3, [r3, #28]
 800e108:	f043 0310 	orr.w	r3, r3, #16
 800e10c:	4a23      	ldr	r2, [pc, #140]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e10e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e110:	4b21      	ldr	r3, [pc, #132]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e112:	2210      	movs	r2, #16
 800e114:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e116:	4b20      	ldr	r3, [pc, #128]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f003 0320 	and.w	r3, r3, #32
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d008      	beq.n	800e134 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e122:	4b1e      	ldr	r3, [pc, #120]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	f043 0308 	orr.w	r3, r3, #8
 800e12a:	4a1c      	ldr	r2, [pc, #112]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e12c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e12e:	4b1a      	ldr	r3, [pc, #104]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e130:	2220      	movs	r2, #32
 800e132:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e134:	4b18      	ldr	r3, [pc, #96]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d008      	beq.n	800e152 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e140:	4b16      	ldr	r3, [pc, #88]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	f043 0304 	orr.w	r3, r3, #4
 800e148:	4a14      	ldr	r2, [pc, #80]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e14a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e14c:	4b12      	ldr	r3, [pc, #72]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e14e:	2240      	movs	r2, #64	; 0x40
 800e150:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e152:	4b11      	ldr	r3, [pc, #68]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e15e:	4b0f      	ldr	r3, [pc, #60]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	f043 0302 	orr.w	r3, r3, #2
 800e166:	4a0d      	ldr	r2, [pc, #52]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e168:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e16a:	4b0b      	ldr	r3, [pc, #44]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e16c:	2280      	movs	r2, #128	; 0x80
 800e16e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e170:	4b09      	ldr	r3, [pc, #36]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	f003 0302 	and.w	r3, r3, #2
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d008      	beq.n	800e18e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e17c:	4b07      	ldr	r3, [pc, #28]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e17e:	69db      	ldr	r3, [r3, #28]
 800e180:	f043 0320 	orr.w	r3, r3, #32
 800e184:	4a05      	ldr	r2, [pc, #20]	; (800e19c <FLASH_SetErrorCode+0xa8>)
 800e186:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e188:	4b03      	ldr	r3, [pc, #12]	; (800e198 <FLASH_SetErrorCode+0xa4>)
 800e18a:	2202      	movs	r2, #2
 800e18c:	60da      	str	r2, [r3, #12]
  }
}
 800e18e:	bf00      	nop
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	40023c00 	.word	0x40023c00
 800e19c:	20014f10 	.word	0x20014f10

0800e1a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e1b2:	4b31      	ldr	r3, [pc, #196]	; (800e278 <HAL_FLASHEx_Erase+0xd8>)
 800e1b4:	7e1b      	ldrb	r3, [r3, #24]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d101      	bne.n	800e1be <HAL_FLASHEx_Erase+0x1e>
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	e058      	b.n	800e270 <HAL_FLASHEx_Erase+0xd0>
 800e1be:	4b2e      	ldr	r3, [pc, #184]	; (800e278 <HAL_FLASHEx_Erase+0xd8>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e1c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e1c8:	f7ff febc 	bl	800df44 <FLASH_WaitForLastOperation>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d148      	bne.n	800e268 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1dc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d115      	bne.n	800e212 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4610      	mov	r0, r2
 800e1f4:	f000 f844 	bl	800e280 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e1f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e1fc:	f7ff fea2 	bl	800df44 <FLASH_WaitForLastOperation>
 800e200:	4603      	mov	r3, r0
 800e202:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800e204:	4b1d      	ldr	r3, [pc, #116]	; (800e27c <HAL_FLASHEx_Erase+0xdc>)
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	4a1c      	ldr	r2, [pc, #112]	; (800e27c <HAL_FLASHEx_Erase+0xdc>)
 800e20a:	f023 0304 	bic.w	r3, r3, #4
 800e20e:	6113      	str	r3, [r2, #16]
 800e210:	e028      	b.n	800e264 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	60bb      	str	r3, [r7, #8]
 800e218:	e01c      	b.n	800e254 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	4619      	mov	r1, r3
 800e222:	68b8      	ldr	r0, [r7, #8]
 800e224:	f000 f850 	bl	800e2c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e22c:	f7ff fe8a 	bl	800df44 <FLASH_WaitForLastOperation>
 800e230:	4603      	mov	r3, r0
 800e232:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800e234:	4b11      	ldr	r3, [pc, #68]	; (800e27c <HAL_FLASHEx_Erase+0xdc>)
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	4a10      	ldr	r2, [pc, #64]	; (800e27c <HAL_FLASHEx_Erase+0xdc>)
 800e23a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800e23e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800e240:	7bfb      	ldrb	r3, [r7, #15]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d003      	beq.n	800e24e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	601a      	str	r2, [r3, #0]
          break;
 800e24c:	e00a      	b.n	800e264 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	3301      	adds	r3, #1
 800e252:	60bb      	str	r3, [r7, #8]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	68da      	ldr	r2, [r3, #12]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	4413      	add	r3, r2
 800e25e:	68ba      	ldr	r2, [r7, #8]
 800e260:	429a      	cmp	r2, r3
 800e262:	d3da      	bcc.n	800e21a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800e264:	f000 f878 	bl	800e358 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e268:	4b03      	ldr	r3, [pc, #12]	; (800e278 <HAL_FLASHEx_Erase+0xd8>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	761a      	strb	r2, [r3, #24]

  return status;
 800e26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20014f10 	.word	0x20014f10
 800e27c:	40023c00 	.word	0x40023c00

0800e280 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	4603      	mov	r3, r0
 800e288:	6039      	str	r1, [r7, #0]
 800e28a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e28c:	4b0d      	ldr	r3, [pc, #52]	; (800e2c4 <FLASH_MassErase+0x44>)
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	4a0c      	ldr	r2, [pc, #48]	; (800e2c4 <FLASH_MassErase+0x44>)
 800e292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800e298:	4b0a      	ldr	r3, [pc, #40]	; (800e2c4 <FLASH_MassErase+0x44>)
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	4a09      	ldr	r2, [pc, #36]	; (800e2c4 <FLASH_MassErase+0x44>)
 800e29e:	f043 0304 	orr.w	r3, r3, #4
 800e2a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800e2a4:	4b07      	ldr	r3, [pc, #28]	; (800e2c4 <FLASH_MassErase+0x44>)
 800e2a6:	691a      	ldr	r2, [r3, #16]
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	021b      	lsls	r3, r3, #8
 800e2ac:	4313      	orrs	r3, r2
 800e2ae:	4a05      	ldr	r2, [pc, #20]	; (800e2c4 <FLASH_MassErase+0x44>)
 800e2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e2b4:	6113      	str	r3, [r2, #16]
}
 800e2b6:	bf00      	nop
 800e2b8:	370c      	adds	r7, #12
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	40023c00 	.word	0x40023c00

0800e2c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e2d8:	78fb      	ldrb	r3, [r7, #3]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d102      	bne.n	800e2e4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	e010      	b.n	800e306 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e2e4:	78fb      	ldrb	r3, [r7, #3]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d103      	bne.n	800e2f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800e2ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	e009      	b.n	800e306 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800e2f2:	78fb      	ldrb	r3, [r7, #3]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d103      	bne.n	800e300 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800e2f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	e002      	b.n	800e306 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800e300:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e304:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e306:	4b13      	ldr	r3, [pc, #76]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	4a12      	ldr	r2, [pc, #72]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e30c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e310:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800e312:	4b10      	ldr	r3, [pc, #64]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e314:	691a      	ldr	r2, [r3, #16]
 800e316:	490f      	ldr	r1, [pc, #60]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800e31e:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	4a0c      	ldr	r2, [pc, #48]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e324:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e328:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800e32a:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e32c:	691a      	ldr	r2, [r3, #16]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	00db      	lsls	r3, r3, #3
 800e332:	4313      	orrs	r3, r2
 800e334:	4a07      	ldr	r2, [pc, #28]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e336:	f043 0302 	orr.w	r3, r3, #2
 800e33a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800e33c:	4b05      	ldr	r3, [pc, #20]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	4a04      	ldr	r2, [pc, #16]	; (800e354 <FLASH_Erase_Sector+0x8c>)
 800e342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e346:	6113      	str	r3, [r2, #16]
}
 800e348:	bf00      	nop
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	40023c00 	.word	0x40023c00

0800e358 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e358:	b480      	push	{r7}
 800e35a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800e35c:	4b20      	ldr	r3, [pc, #128]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e364:	2b00      	cmp	r3, #0
 800e366:	d017      	beq.n	800e398 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e368:	4b1d      	ldr	r3, [pc, #116]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a1c      	ldr	r2, [pc, #112]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e36e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e372:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e374:	4b1a      	ldr	r3, [pc, #104]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a19      	ldr	r2, [pc, #100]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e37a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e37e:	6013      	str	r3, [r2, #0]
 800e380:	4b17      	ldr	r3, [pc, #92]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a16      	ldr	r2, [pc, #88]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e38a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e38c:	4b14      	ldr	r3, [pc, #80]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a13      	ldr	r2, [pc, #76]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e396:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800e398:	4b11      	ldr	r3, [pc, #68]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d017      	beq.n	800e3d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e3a4:	4b0e      	ldr	r3, [pc, #56]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a0d      	ldr	r2, [pc, #52]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e3b0:	4b0b      	ldr	r3, [pc, #44]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a0a      	ldr	r2, [pc, #40]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e3ba:	6013      	str	r3, [r2, #0]
 800e3bc:	4b08      	ldr	r3, [pc, #32]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a07      	ldr	r2, [pc, #28]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e3c8:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a04      	ldr	r2, [pc, #16]	; (800e3e0 <FLASH_FlushCaches+0x88>)
 800e3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e3d2:	6013      	str	r3, [r2, #0]
  }
}
 800e3d4:	bf00      	nop
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	40023c00 	.word	0x40023c00

0800e3e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b089      	sub	sp, #36	; 0x24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61fb      	str	r3, [r7, #28]
 800e3fe:	e16b      	b.n	800e6d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e400:	2201      	movs	r2, #1
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	fa02 f303 	lsl.w	r3, r2, r3
 800e408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	697a      	ldr	r2, [r7, #20]
 800e410:	4013      	ands	r3, r2
 800e412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e414:	693a      	ldr	r2, [r7, #16]
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	429a      	cmp	r2, r3
 800e41a:	f040 815a 	bne.w	800e6d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d00b      	beq.n	800e43e <HAL_GPIO_Init+0x5a>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d007      	beq.n	800e43e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e432:	2b11      	cmp	r3, #17
 800e434:	d003      	beq.n	800e43e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	2b12      	cmp	r3, #18
 800e43c:	d130      	bne.n	800e4a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	2203      	movs	r2, #3
 800e44a:	fa02 f303 	lsl.w	r3, r2, r3
 800e44e:	43db      	mvns	r3, r3
 800e450:	69ba      	ldr	r2, [r7, #24]
 800e452:	4013      	ands	r3, r2
 800e454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	fa02 f303 	lsl.w	r3, r2, r3
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	4313      	orrs	r3, r2
 800e466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	69ba      	ldr	r2, [r7, #24]
 800e46c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e474:	2201      	movs	r2, #1
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	fa02 f303 	lsl.w	r3, r2, r3
 800e47c:	43db      	mvns	r3, r3
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	4013      	ands	r3, r2
 800e482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	091b      	lsrs	r3, r3, #4
 800e48a:	f003 0201 	and.w	r2, r3, #1
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	fa02 f303 	lsl.w	r3, r2, r3
 800e494:	69ba      	ldr	r2, [r7, #24]
 800e496:	4313      	orrs	r3, r2
 800e498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	69ba      	ldr	r2, [r7, #24]
 800e49e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	2203      	movs	r2, #3
 800e4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b0:	43db      	mvns	r3, r3
 800e4b2:	69ba      	ldr	r2, [r7, #24]
 800e4b4:	4013      	ands	r3, r2
 800e4b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	689a      	ldr	r2, [r3, #8]
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c4:	69ba      	ldr	r2, [r7, #24]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d003      	beq.n	800e4e0 <HAL_GPIO_Init+0xfc>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	2b12      	cmp	r3, #18
 800e4de:	d123      	bne.n	800e528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	08da      	lsrs	r2, r3, #3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	3208      	adds	r2, #8
 800e4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	f003 0307 	and.w	r3, r3, #7
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	220f      	movs	r2, #15
 800e4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4fc:	43db      	mvns	r3, r3
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	4013      	ands	r3, r2
 800e502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	691a      	ldr	r2, [r3, #16]
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	f003 0307 	and.w	r3, r3, #7
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	fa02 f303 	lsl.w	r3, r2, r3
 800e514:	69ba      	ldr	r2, [r7, #24]
 800e516:	4313      	orrs	r3, r2
 800e518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	08da      	lsrs	r2, r3, #3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	3208      	adds	r2, #8
 800e522:	69b9      	ldr	r1, [r7, #24]
 800e524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	2203      	movs	r2, #3
 800e534:	fa02 f303 	lsl.w	r3, r2, r3
 800e538:	43db      	mvns	r3, r3
 800e53a:	69ba      	ldr	r2, [r7, #24]
 800e53c:	4013      	ands	r3, r2
 800e53e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	f003 0203 	and.w	r2, r3, #3
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	fa02 f303 	lsl.w	r3, r2, r3
 800e550:	69ba      	ldr	r2, [r7, #24]
 800e552:	4313      	orrs	r3, r2
 800e554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	69ba      	ldr	r2, [r7, #24]
 800e55a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 80b4 	beq.w	800e6d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]
 800e56e:	4b5f      	ldr	r3, [pc, #380]	; (800e6ec <HAL_GPIO_Init+0x308>)
 800e570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e572:	4a5e      	ldr	r2, [pc, #376]	; (800e6ec <HAL_GPIO_Init+0x308>)
 800e574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e578:	6453      	str	r3, [r2, #68]	; 0x44
 800e57a:	4b5c      	ldr	r3, [pc, #368]	; (800e6ec <HAL_GPIO_Init+0x308>)
 800e57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e57e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e586:	4a5a      	ldr	r2, [pc, #360]	; (800e6f0 <HAL_GPIO_Init+0x30c>)
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	089b      	lsrs	r3, r3, #2
 800e58c:	3302      	adds	r3, #2
 800e58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	f003 0303 	and.w	r3, r3, #3
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	220f      	movs	r2, #15
 800e59e:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a2:	43db      	mvns	r3, r3
 800e5a4:	69ba      	ldr	r2, [r7, #24]
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4a51      	ldr	r2, [pc, #324]	; (800e6f4 <HAL_GPIO_Init+0x310>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d02b      	beq.n	800e60a <HAL_GPIO_Init+0x226>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a50      	ldr	r2, [pc, #320]	; (800e6f8 <HAL_GPIO_Init+0x314>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d025      	beq.n	800e606 <HAL_GPIO_Init+0x222>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a4f      	ldr	r2, [pc, #316]	; (800e6fc <HAL_GPIO_Init+0x318>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d01f      	beq.n	800e602 <HAL_GPIO_Init+0x21e>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a4e      	ldr	r2, [pc, #312]	; (800e700 <HAL_GPIO_Init+0x31c>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d019      	beq.n	800e5fe <HAL_GPIO_Init+0x21a>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a4d      	ldr	r2, [pc, #308]	; (800e704 <HAL_GPIO_Init+0x320>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d013      	beq.n	800e5fa <HAL_GPIO_Init+0x216>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a4c      	ldr	r2, [pc, #304]	; (800e708 <HAL_GPIO_Init+0x324>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d00d      	beq.n	800e5f6 <HAL_GPIO_Init+0x212>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a4b      	ldr	r2, [pc, #300]	; (800e70c <HAL_GPIO_Init+0x328>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d007      	beq.n	800e5f2 <HAL_GPIO_Init+0x20e>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a4a      	ldr	r2, [pc, #296]	; (800e710 <HAL_GPIO_Init+0x32c>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d101      	bne.n	800e5ee <HAL_GPIO_Init+0x20a>
 800e5ea:	2307      	movs	r3, #7
 800e5ec:	e00e      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e5ee:	2308      	movs	r3, #8
 800e5f0:	e00c      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e5f2:	2306      	movs	r3, #6
 800e5f4:	e00a      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e5f6:	2305      	movs	r3, #5
 800e5f8:	e008      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e5fa:	2304      	movs	r3, #4
 800e5fc:	e006      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e5fe:	2303      	movs	r3, #3
 800e600:	e004      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e602:	2302      	movs	r3, #2
 800e604:	e002      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e606:	2301      	movs	r3, #1
 800e608:	e000      	b.n	800e60c <HAL_GPIO_Init+0x228>
 800e60a:	2300      	movs	r3, #0
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	f002 0203 	and.w	r2, r2, #3
 800e612:	0092      	lsls	r2, r2, #2
 800e614:	4093      	lsls	r3, r2
 800e616:	69ba      	ldr	r2, [r7, #24]
 800e618:	4313      	orrs	r3, r2
 800e61a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e61c:	4934      	ldr	r1, [pc, #208]	; (800e6f0 <HAL_GPIO_Init+0x30c>)
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	089b      	lsrs	r3, r3, #2
 800e622:	3302      	adds	r3, #2
 800e624:	69ba      	ldr	r2, [r7, #24]
 800e626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e62a:	4b3a      	ldr	r3, [pc, #232]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	43db      	mvns	r3, r3
 800e634:	69ba      	ldr	r2, [r7, #24]
 800e636:	4013      	ands	r3, r2
 800e638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800e646:	69ba      	ldr	r2, [r7, #24]
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e64e:	4a31      	ldr	r2, [pc, #196]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800e654:	4b2f      	ldr	r3, [pc, #188]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	43db      	mvns	r3, r3
 800e65e:	69ba      	ldr	r2, [r7, #24]
 800e660:	4013      	ands	r3, r2
 800e662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d003      	beq.n	800e678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800e670:	69ba      	ldr	r2, [r7, #24]
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	4313      	orrs	r3, r2
 800e676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e678:	4a26      	ldr	r2, [pc, #152]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e67e:	4b25      	ldr	r3, [pc, #148]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	43db      	mvns	r3, r3
 800e688:	69ba      	ldr	r2, [r7, #24]
 800e68a:	4013      	ands	r3, r2
 800e68c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800e69a:	69ba      	ldr	r2, [r7, #24]
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e6a2:	4a1c      	ldr	r2, [pc, #112]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e6a8:	4b1a      	ldr	r3, [pc, #104]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	43db      	mvns	r3, r3
 800e6b2:	69ba      	ldr	r2, [r7, #24]
 800e6b4:	4013      	ands	r3, r2
 800e6b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800e6c4:	69ba      	ldr	r2, [r7, #24]
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e6cc:	4a11      	ldr	r2, [pc, #68]	; (800e714 <HAL_GPIO_Init+0x330>)
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b0f      	cmp	r3, #15
 800e6dc:	f67f ae90 	bls.w	800e400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	3724      	adds	r7, #36	; 0x24
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	40023800 	.word	0x40023800
 800e6f0:	40013800 	.word	0x40013800
 800e6f4:	40020000 	.word	0x40020000
 800e6f8:	40020400 	.word	0x40020400
 800e6fc:	40020800 	.word	0x40020800
 800e700:	40020c00 	.word	0x40020c00
 800e704:	40021000 	.word	0x40021000
 800e708:	40021400 	.word	0x40021400
 800e70c:	40021800 	.word	0x40021800
 800e710:	40021c00 	.word	0x40021c00
 800e714:	40013c00 	.word	0x40013c00

0800e718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	807b      	strh	r3, [r7, #2]
 800e724:	4613      	mov	r3, r2
 800e726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e728:	787b      	ldrb	r3, [r7, #1]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e72e:	887a      	ldrh	r2, [r7, #2]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e734:	e003      	b.n	800e73e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e736:	887b      	ldrh	r3, [r7, #2]
 800e738:	041a      	lsls	r2, r3, #16
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	619a      	str	r2, [r3, #24]
}
 800e73e:	bf00      	nop
 800e740:	370c      	adds	r7, #12
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b083      	sub	sp, #12
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	460b      	mov	r3, r1
 800e754:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	695a      	ldr	r2, [r3, #20]
 800e75a:	887b      	ldrh	r3, [r7, #2]
 800e75c:	401a      	ands	r2, r3
 800e75e:	887b      	ldrh	r3, [r7, #2]
 800e760:	429a      	cmp	r2, r3
 800e762:	d104      	bne.n	800e76e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e764:	887b      	ldrh	r3, [r7, #2]
 800e766:	041a      	lsls	r2, r3, #16
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800e76c:	e002      	b.n	800e774 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800e76e:	887a      	ldrh	r2, [r7, #2]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	619a      	str	r2, [r3, #24]
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e78a:	4b08      	ldr	r3, [pc, #32]	; (800e7ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e78c:	695a      	ldr	r2, [r3, #20]
 800e78e:	88fb      	ldrh	r3, [r7, #6]
 800e790:	4013      	ands	r3, r2
 800e792:	2b00      	cmp	r3, #0
 800e794:	d006      	beq.n	800e7a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e796:	4a05      	ldr	r2, [pc, #20]	; (800e7ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e798:	88fb      	ldrh	r3, [r7, #6]
 800e79a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e79c:	88fb      	ldrh	r3, [r7, #6]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f806 	bl	800e7b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800e7a4:	bf00      	nop
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	40013c00 	.word	0x40013c00

0800e7b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800e7ba:	bf00      	nop
 800e7bc:	370c      	adds	r7, #12
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
	...

0800e7c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d101      	bne.n	800e7da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e25b      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f003 0301 	and.w	r3, r3, #1
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d075      	beq.n	800e8d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e7e6:	4ba3      	ldr	r3, [pc, #652]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	f003 030c 	and.w	r3, r3, #12
 800e7ee:	2b04      	cmp	r3, #4
 800e7f0:	d00c      	beq.n	800e80c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e7f2:	4ba0      	ldr	r3, [pc, #640]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e7fa:	2b08      	cmp	r3, #8
 800e7fc:	d112      	bne.n	800e824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e7fe:	4b9d      	ldr	r3, [pc, #628]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e80a:	d10b      	bne.n	800e824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e80c:	4b99      	ldr	r3, [pc, #612]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d05b      	beq.n	800e8d0 <HAL_RCC_OscConfig+0x108>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d157      	bne.n	800e8d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	e236      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e82c:	d106      	bne.n	800e83c <HAL_RCC_OscConfig+0x74>
 800e82e:	4b91      	ldr	r3, [pc, #580]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a90      	ldr	r2, [pc, #576]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e838:	6013      	str	r3, [r2, #0]
 800e83a:	e01d      	b.n	800e878 <HAL_RCC_OscConfig+0xb0>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e844:	d10c      	bne.n	800e860 <HAL_RCC_OscConfig+0x98>
 800e846:	4b8b      	ldr	r3, [pc, #556]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a8a      	ldr	r2, [pc, #552]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e84c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e850:	6013      	str	r3, [r2, #0]
 800e852:	4b88      	ldr	r3, [pc, #544]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a87      	ldr	r2, [pc, #540]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	e00b      	b.n	800e878 <HAL_RCC_OscConfig+0xb0>
 800e860:	4b84      	ldr	r3, [pc, #528]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a83      	ldr	r2, [pc, #524]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e86a:	6013      	str	r3, [r2, #0]
 800e86c:	4b81      	ldr	r3, [pc, #516]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a80      	ldr	r2, [pc, #512]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d013      	beq.n	800e8a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e880:	f7ff f91e 	bl	800dac0 <HAL_GetTick>
 800e884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e886:	e008      	b.n	800e89a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e888:	f7ff f91a 	bl	800dac0 <HAL_GetTick>
 800e88c:	4602      	mov	r2, r0
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	2b64      	cmp	r3, #100	; 0x64
 800e894:	d901      	bls.n	800e89a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e896:	2303      	movs	r3, #3
 800e898:	e1fb      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e89a:	4b76      	ldr	r3, [pc, #472]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d0f0      	beq.n	800e888 <HAL_RCC_OscConfig+0xc0>
 800e8a6:	e014      	b.n	800e8d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e8a8:	f7ff f90a 	bl	800dac0 <HAL_GetTick>
 800e8ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e8ae:	e008      	b.n	800e8c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e8b0:	f7ff f906 	bl	800dac0 <HAL_GetTick>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	2b64      	cmp	r3, #100	; 0x64
 800e8bc:	d901      	bls.n	800e8c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e8be:	2303      	movs	r3, #3
 800e8c0:	e1e7      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e8c2:	4b6c      	ldr	r3, [pc, #432]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d1f0      	bne.n	800e8b0 <HAL_RCC_OscConfig+0xe8>
 800e8ce:	e000      	b.n	800e8d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e8d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d063      	beq.n	800e9a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e8de:	4b65      	ldr	r3, [pc, #404]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	f003 030c 	and.w	r3, r3, #12
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00b      	beq.n	800e902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e8ea:	4b62      	ldr	r3, [pc, #392]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e8f2:	2b08      	cmp	r3, #8
 800e8f4:	d11c      	bne.n	800e930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e8f6:	4b5f      	ldr	r3, [pc, #380]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d116      	bne.n	800e930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e902:	4b5c      	ldr	r3, [pc, #368]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f003 0302 	and.w	r3, r3, #2
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d005      	beq.n	800e91a <HAL_RCC_OscConfig+0x152>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d001      	beq.n	800e91a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	e1bb      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e91a:	4b56      	ldr	r3, [pc, #344]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	4952      	ldr	r1, [pc, #328]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e92a:	4313      	orrs	r3, r2
 800e92c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e92e:	e03a      	b.n	800e9a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d020      	beq.n	800e97a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e938:	4b4f      	ldr	r3, [pc, #316]	; (800ea78 <HAL_RCC_OscConfig+0x2b0>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e93e:	f7ff f8bf 	bl	800dac0 <HAL_GetTick>
 800e942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e944:	e008      	b.n	800e958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e946:	f7ff f8bb 	bl	800dac0 <HAL_GetTick>
 800e94a:	4602      	mov	r2, r0
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	2b02      	cmp	r3, #2
 800e952:	d901      	bls.n	800e958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e954:	2303      	movs	r3, #3
 800e956:	e19c      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e958:	4b46      	ldr	r3, [pc, #280]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f003 0302 	and.w	r3, r3, #2
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0f0      	beq.n	800e946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e964:	4b43      	ldr	r3, [pc, #268]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	00db      	lsls	r3, r3, #3
 800e972:	4940      	ldr	r1, [pc, #256]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e974:	4313      	orrs	r3, r2
 800e976:	600b      	str	r3, [r1, #0]
 800e978:	e015      	b.n	800e9a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e97a:	4b3f      	ldr	r3, [pc, #252]	; (800ea78 <HAL_RCC_OscConfig+0x2b0>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e980:	f7ff f89e 	bl	800dac0 <HAL_GetTick>
 800e984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e986:	e008      	b.n	800e99a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e988:	f7ff f89a 	bl	800dac0 <HAL_GetTick>
 800e98c:	4602      	mov	r2, r0
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	2b02      	cmp	r3, #2
 800e994:	d901      	bls.n	800e99a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e996:	2303      	movs	r3, #3
 800e998:	e17b      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e99a:	4b36      	ldr	r3, [pc, #216]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1f0      	bne.n	800e988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 0308 	and.w	r3, r3, #8
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d030      	beq.n	800ea14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d016      	beq.n	800e9e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e9ba:	4b30      	ldr	r3, [pc, #192]	; (800ea7c <HAL_RCC_OscConfig+0x2b4>)
 800e9bc:	2201      	movs	r2, #1
 800e9be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9c0:	f7ff f87e 	bl	800dac0 <HAL_GetTick>
 800e9c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e9c6:	e008      	b.n	800e9da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e9c8:	f7ff f87a 	bl	800dac0 <HAL_GetTick>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	2b02      	cmp	r3, #2
 800e9d4:	d901      	bls.n	800e9da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	e15b      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e9da:	4b26      	ldr	r3, [pc, #152]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800e9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9de:	f003 0302 	and.w	r3, r3, #2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d0f0      	beq.n	800e9c8 <HAL_RCC_OscConfig+0x200>
 800e9e6:	e015      	b.n	800ea14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e9e8:	4b24      	ldr	r3, [pc, #144]	; (800ea7c <HAL_RCC_OscConfig+0x2b4>)
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e9ee:	f7ff f867 	bl	800dac0 <HAL_GetTick>
 800e9f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9f4:	e008      	b.n	800ea08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e9f6:	f7ff f863 	bl	800dac0 <HAL_GetTick>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	d901      	bls.n	800ea08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ea04:	2303      	movs	r3, #3
 800ea06:	e144      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ea08:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800ea0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea0c:	f003 0302 	and.w	r3, r3, #2
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1f0      	bne.n	800e9f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f003 0304 	and.w	r3, r3, #4
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 80a0 	beq.w	800eb62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ea22:	2300      	movs	r3, #0
 800ea24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea26:	4b13      	ldr	r3, [pc, #76]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800ea28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10f      	bne.n	800ea52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea32:	2300      	movs	r3, #0
 800ea34:	60bb      	str	r3, [r7, #8]
 800ea36:	4b0f      	ldr	r3, [pc, #60]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800ea38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3a:	4a0e      	ldr	r2, [pc, #56]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800ea3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea40:	6413      	str	r3, [r2, #64]	; 0x40
 800ea42:	4b0c      	ldr	r3, [pc, #48]	; (800ea74 <HAL_RCC_OscConfig+0x2ac>)
 800ea44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea4a:	60bb      	str	r3, [r7, #8]
 800ea4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea52:	4b0b      	ldr	r3, [pc, #44]	; (800ea80 <HAL_RCC_OscConfig+0x2b8>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d121      	bne.n	800eaa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea5e:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <HAL_RCC_OscConfig+0x2b8>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a07      	ldr	r2, [pc, #28]	; (800ea80 <HAL_RCC_OscConfig+0x2b8>)
 800ea64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ea6a:	f7ff f829 	bl	800dac0 <HAL_GetTick>
 800ea6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea70:	e011      	b.n	800ea96 <HAL_RCC_OscConfig+0x2ce>
 800ea72:	bf00      	nop
 800ea74:	40023800 	.word	0x40023800
 800ea78:	42470000 	.word	0x42470000
 800ea7c:	42470e80 	.word	0x42470e80
 800ea80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea84:	f7ff f81c 	bl	800dac0 <HAL_GetTick>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d901      	bls.n	800ea96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ea92:	2303      	movs	r3, #3
 800ea94:	e0fd      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea96:	4b81      	ldr	r3, [pc, #516]	; (800ec9c <HAL_RCC_OscConfig+0x4d4>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0f0      	beq.n	800ea84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d106      	bne.n	800eab8 <HAL_RCC_OscConfig+0x2f0>
 800eaaa:	4b7d      	ldr	r3, [pc, #500]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eaac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaae:	4a7c      	ldr	r2, [pc, #496]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eab0:	f043 0301 	orr.w	r3, r3, #1
 800eab4:	6713      	str	r3, [r2, #112]	; 0x70
 800eab6:	e01c      	b.n	800eaf2 <HAL_RCC_OscConfig+0x32a>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	2b05      	cmp	r3, #5
 800eabe:	d10c      	bne.n	800eada <HAL_RCC_OscConfig+0x312>
 800eac0:	4b77      	ldr	r3, [pc, #476]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eac4:	4a76      	ldr	r2, [pc, #472]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eac6:	f043 0304 	orr.w	r3, r3, #4
 800eaca:	6713      	str	r3, [r2, #112]	; 0x70
 800eacc:	4b74      	ldr	r3, [pc, #464]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead0:	4a73      	ldr	r2, [pc, #460]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	6713      	str	r3, [r2, #112]	; 0x70
 800ead8:	e00b      	b.n	800eaf2 <HAL_RCC_OscConfig+0x32a>
 800eada:	4b71      	ldr	r3, [pc, #452]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eade:	4a70      	ldr	r2, [pc, #448]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eae0:	f023 0301 	bic.w	r3, r3, #1
 800eae4:	6713      	str	r3, [r2, #112]	; 0x70
 800eae6:	4b6e      	ldr	r3, [pc, #440]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaea:	4a6d      	ldr	r2, [pc, #436]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eaec:	f023 0304 	bic.w	r3, r3, #4
 800eaf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d015      	beq.n	800eb26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eafa:	f7fe ffe1 	bl	800dac0 <HAL_GetTick>
 800eafe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb00:	e00a      	b.n	800eb18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb02:	f7fe ffdd 	bl	800dac0 <HAL_GetTick>
 800eb06:	4602      	mov	r2, r0
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d901      	bls.n	800eb18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800eb14:	2303      	movs	r3, #3
 800eb16:	e0bc      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb18:	4b61      	ldr	r3, [pc, #388]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eb1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb1c:	f003 0302 	and.w	r3, r3, #2
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d0ee      	beq.n	800eb02 <HAL_RCC_OscConfig+0x33a>
 800eb24:	e014      	b.n	800eb50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb26:	f7fe ffcb 	bl	800dac0 <HAL_GetTick>
 800eb2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb2c:	e00a      	b.n	800eb44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb2e:	f7fe ffc7 	bl	800dac0 <HAL_GetTick>
 800eb32:	4602      	mov	r2, r0
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d901      	bls.n	800eb44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800eb40:	2303      	movs	r3, #3
 800eb42:	e0a6      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb44:	4b56      	ldr	r3, [pc, #344]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eb46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb48:	f003 0302 	and.w	r3, r3, #2
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1ee      	bne.n	800eb2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800eb50:	7dfb      	ldrb	r3, [r7, #23]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d105      	bne.n	800eb62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb56:	4b52      	ldr	r3, [pc, #328]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5a:	4a51      	ldr	r2, [pc, #324]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eb5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 8092 	beq.w	800ec90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eb6c:	4b4c      	ldr	r3, [pc, #304]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	f003 030c 	and.w	r3, r3, #12
 800eb74:	2b08      	cmp	r3, #8
 800eb76:	d05c      	beq.n	800ec32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d141      	bne.n	800ec04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb80:	4b48      	ldr	r3, [pc, #288]	; (800eca4 <HAL_RCC_OscConfig+0x4dc>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb86:	f7fe ff9b 	bl	800dac0 <HAL_GetTick>
 800eb8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb8c:	e008      	b.n	800eba0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eb8e:	f7fe ff97 	bl	800dac0 <HAL_GetTick>
 800eb92:	4602      	mov	r2, r0
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	1ad3      	subs	r3, r2, r3
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d901      	bls.n	800eba0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800eb9c:	2303      	movs	r3, #3
 800eb9e:	e078      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eba0:	4b3f      	ldr	r3, [pc, #252]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1f0      	bne.n	800eb8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	69da      	ldr	r2, [r3, #28]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebba:	019b      	lsls	r3, r3, #6
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	085b      	lsrs	r3, r3, #1
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	041b      	lsls	r3, r3, #16
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebce:	061b      	lsls	r3, r3, #24
 800ebd0:	4933      	ldr	r1, [pc, #204]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ebd6:	4b33      	ldr	r3, [pc, #204]	; (800eca4 <HAL_RCC_OscConfig+0x4dc>)
 800ebd8:	2201      	movs	r2, #1
 800ebda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ebdc:	f7fe ff70 	bl	800dac0 <HAL_GetTick>
 800ebe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ebe2:	e008      	b.n	800ebf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ebe4:	f7fe ff6c 	bl	800dac0 <HAL_GetTick>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	d901      	bls.n	800ebf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ebf2:	2303      	movs	r3, #3
 800ebf4:	e04d      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ebf6:	4b2a      	ldr	r3, [pc, #168]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0f0      	beq.n	800ebe4 <HAL_RCC_OscConfig+0x41c>
 800ec02:	e045      	b.n	800ec90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec04:	4b27      	ldr	r3, [pc, #156]	; (800eca4 <HAL_RCC_OscConfig+0x4dc>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec0a:	f7fe ff59 	bl	800dac0 <HAL_GetTick>
 800ec0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec10:	e008      	b.n	800ec24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec12:	f7fe ff55 	bl	800dac0 <HAL_GetTick>
 800ec16:	4602      	mov	r2, r0
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	2b02      	cmp	r3, #2
 800ec1e:	d901      	bls.n	800ec24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ec20:	2303      	movs	r3, #3
 800ec22:	e036      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec24:	4b1e      	ldr	r3, [pc, #120]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1f0      	bne.n	800ec12 <HAL_RCC_OscConfig+0x44a>
 800ec30:	e02e      	b.n	800ec90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d101      	bne.n	800ec3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e029      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ec3e:	4b18      	ldr	r3, [pc, #96]	; (800eca0 <HAL_RCC_OscConfig+0x4d8>)
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d11c      	bne.n	800ec8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d115      	bne.n	800ec8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ec66:	4013      	ands	r3, r2
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d10d      	bne.n	800ec8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d106      	bne.n	800ec8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d001      	beq.n	800ec90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e000      	b.n	800ec92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800ec90:	2300      	movs	r3, #0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3718      	adds	r7, #24
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	40007000 	.word	0x40007000
 800eca0:	40023800 	.word	0x40023800
 800eca4:	42470060 	.word	0x42470060

0800eca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	e0cc      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ecbc:	4b68      	ldr	r3, [pc, #416]	; (800ee60 <HAL_RCC_ClockConfig+0x1b8>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 030f 	and.w	r3, r3, #15
 800ecc4:	683a      	ldr	r2, [r7, #0]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d90c      	bls.n	800ece4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ecca:	4b65      	ldr	r3, [pc, #404]	; (800ee60 <HAL_RCC_ClockConfig+0x1b8>)
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	b2d2      	uxtb	r2, r2
 800ecd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ecd2:	4b63      	ldr	r3, [pc, #396]	; (800ee60 <HAL_RCC_ClockConfig+0x1b8>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f003 030f 	and.w	r3, r3, #15
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d001      	beq.n	800ece4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	e0b8      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 0302 	and.w	r3, r3, #2
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d020      	beq.n	800ed32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ecfc:	4b59      	ldr	r3, [pc, #356]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	4a58      	ldr	r2, [pc, #352]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ed06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f003 0308 	and.w	r3, r3, #8
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d005      	beq.n	800ed20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ed14:	4b53      	ldr	r3, [pc, #332]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	4a52      	ldr	r2, [pc, #328]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ed1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ed20:	4b50      	ldr	r3, [pc, #320]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed22:	689b      	ldr	r3, [r3, #8]
 800ed24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	494d      	ldr	r1, [pc, #308]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d044      	beq.n	800edc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d107      	bne.n	800ed56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed46:	4b47      	ldr	r3, [pc, #284]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d119      	bne.n	800ed86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	e07f      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d003      	beq.n	800ed66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed62:	2b03      	cmp	r3, #3
 800ed64:	d107      	bne.n	800ed76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed66:	4b3f      	ldr	r3, [pc, #252]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d109      	bne.n	800ed86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e06f      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed76:	4b3b      	ldr	r3, [pc, #236]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f003 0302 	and.w	r3, r3, #2
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e067      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed86:	4b37      	ldr	r3, [pc, #220]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f023 0203 	bic.w	r2, r3, #3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	4934      	ldr	r1, [pc, #208]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ed94:	4313      	orrs	r3, r2
 800ed96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ed98:	f7fe fe92 	bl	800dac0 <HAL_GetTick>
 800ed9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed9e:	e00a      	b.n	800edb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eda0:	f7fe fe8e 	bl	800dac0 <HAL_GetTick>
 800eda4:	4602      	mov	r2, r0
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800edae:	4293      	cmp	r3, r2
 800edb0:	d901      	bls.n	800edb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e04f      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800edb6:	4b2b      	ldr	r3, [pc, #172]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	f003 020c 	and.w	r2, r3, #12
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d1eb      	bne.n	800eda0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800edc8:	4b25      	ldr	r3, [pc, #148]	; (800ee60 <HAL_RCC_ClockConfig+0x1b8>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	683a      	ldr	r2, [r7, #0]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d20c      	bcs.n	800edf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edd6:	4b22      	ldr	r3, [pc, #136]	; (800ee60 <HAL_RCC_ClockConfig+0x1b8>)
 800edd8:	683a      	ldr	r2, [r7, #0]
 800edda:	b2d2      	uxtb	r2, r2
 800eddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800edde:	4b20      	ldr	r3, [pc, #128]	; (800ee60 <HAL_RCC_ClockConfig+0x1b8>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f003 030f 	and.w	r3, r3, #15
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d001      	beq.n	800edf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	e032      	b.n	800ee56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 0304 	and.w	r3, r3, #4
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d008      	beq.n	800ee0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800edfc:	4b19      	ldr	r3, [pc, #100]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	4916      	ldr	r1, [pc, #88]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f003 0308 	and.w	r3, r3, #8
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d009      	beq.n	800ee2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ee1a:	4b12      	ldr	r3, [pc, #72]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	490e      	ldr	r1, [pc, #56]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ee2e:	f000 f821 	bl	800ee74 <HAL_RCC_GetSysClockFreq>
 800ee32:	4601      	mov	r1, r0
 800ee34:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <HAL_RCC_ClockConfig+0x1bc>)
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	091b      	lsrs	r3, r3, #4
 800ee3a:	f003 030f 	and.w	r3, r3, #15
 800ee3e:	4a0a      	ldr	r2, [pc, #40]	; (800ee68 <HAL_RCC_ClockConfig+0x1c0>)
 800ee40:	5cd3      	ldrb	r3, [r2, r3]
 800ee42:	fa21 f303 	lsr.w	r3, r1, r3
 800ee46:	4a09      	ldr	r2, [pc, #36]	; (800ee6c <HAL_RCC_ClockConfig+0x1c4>)
 800ee48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ee4a:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <HAL_RCC_ClockConfig+0x1c8>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fe fdf2 	bl	800da38 <HAL_InitTick>

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	40023c00 	.word	0x40023c00
 800ee64:	40023800 	.word	0x40023800
 800ee68:	08013190 	.word	0x08013190
 800ee6c:	200002bc 	.word	0x200002bc
 800ee70:	200002c0 	.word	0x200002c0

0800ee74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ee74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	607b      	str	r3, [r7, #4]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	2300      	movs	r3, #0
 800ee84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ee86:	2300      	movs	r3, #0
 800ee88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee8a:	4b63      	ldr	r3, [pc, #396]	; (800f018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f003 030c 	and.w	r3, r3, #12
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d007      	beq.n	800eea6 <HAL_RCC_GetSysClockFreq+0x32>
 800ee96:	2b08      	cmp	r3, #8
 800ee98:	d008      	beq.n	800eeac <HAL_RCC_GetSysClockFreq+0x38>
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f040 80b4 	bne.w	800f008 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800eea0:	4b5e      	ldr	r3, [pc, #376]	; (800f01c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800eea2:	60bb      	str	r3, [r7, #8]
       break;
 800eea4:	e0b3      	b.n	800f00e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800eea6:	4b5e      	ldr	r3, [pc, #376]	; (800f020 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800eea8:	60bb      	str	r3, [r7, #8]
      break;
 800eeaa:	e0b0      	b.n	800f00e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eeac:	4b5a      	ldr	r3, [pc, #360]	; (800f018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eeb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eeb6:	4b58      	ldr	r3, [pc, #352]	; (800f018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d04a      	beq.n	800ef58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eec2:	4b55      	ldr	r3, [pc, #340]	; (800f018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	099b      	lsrs	r3, r3, #6
 800eec8:	f04f 0400 	mov.w	r4, #0
 800eecc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800eed0:	f04f 0200 	mov.w	r2, #0
 800eed4:	ea03 0501 	and.w	r5, r3, r1
 800eed8:	ea04 0602 	and.w	r6, r4, r2
 800eedc:	4629      	mov	r1, r5
 800eede:	4632      	mov	r2, r6
 800eee0:	f04f 0300 	mov.w	r3, #0
 800eee4:	f04f 0400 	mov.w	r4, #0
 800eee8:	0154      	lsls	r4, r2, #5
 800eeea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800eeee:	014b      	lsls	r3, r1, #5
 800eef0:	4619      	mov	r1, r3
 800eef2:	4622      	mov	r2, r4
 800eef4:	1b49      	subs	r1, r1, r5
 800eef6:	eb62 0206 	sbc.w	r2, r2, r6
 800eefa:	f04f 0300 	mov.w	r3, #0
 800eefe:	f04f 0400 	mov.w	r4, #0
 800ef02:	0194      	lsls	r4, r2, #6
 800ef04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ef08:	018b      	lsls	r3, r1, #6
 800ef0a:	1a5b      	subs	r3, r3, r1
 800ef0c:	eb64 0402 	sbc.w	r4, r4, r2
 800ef10:	f04f 0100 	mov.w	r1, #0
 800ef14:	f04f 0200 	mov.w	r2, #0
 800ef18:	00e2      	lsls	r2, r4, #3
 800ef1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ef1e:	00d9      	lsls	r1, r3, #3
 800ef20:	460b      	mov	r3, r1
 800ef22:	4614      	mov	r4, r2
 800ef24:	195b      	adds	r3, r3, r5
 800ef26:	eb44 0406 	adc.w	r4, r4, r6
 800ef2a:	f04f 0100 	mov.w	r1, #0
 800ef2e:	f04f 0200 	mov.w	r2, #0
 800ef32:	0262      	lsls	r2, r4, #9
 800ef34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800ef38:	0259      	lsls	r1, r3, #9
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	4614      	mov	r4, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	4621      	mov	r1, r4
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f04f 0400 	mov.w	r4, #0
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4623      	mov	r3, r4
 800ef4c:	f7f1 f9a8 	bl	80002a0 <__aeabi_uldivmod>
 800ef50:	4603      	mov	r3, r0
 800ef52:	460c      	mov	r4, r1
 800ef54:	60fb      	str	r3, [r7, #12]
 800ef56:	e049      	b.n	800efec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef58:	4b2f      	ldr	r3, [pc, #188]	; (800f018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	099b      	lsrs	r3, r3, #6
 800ef5e:	f04f 0400 	mov.w	r4, #0
 800ef62:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	ea03 0501 	and.w	r5, r3, r1
 800ef6e:	ea04 0602 	and.w	r6, r4, r2
 800ef72:	4629      	mov	r1, r5
 800ef74:	4632      	mov	r2, r6
 800ef76:	f04f 0300 	mov.w	r3, #0
 800ef7a:	f04f 0400 	mov.w	r4, #0
 800ef7e:	0154      	lsls	r4, r2, #5
 800ef80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ef84:	014b      	lsls	r3, r1, #5
 800ef86:	4619      	mov	r1, r3
 800ef88:	4622      	mov	r2, r4
 800ef8a:	1b49      	subs	r1, r1, r5
 800ef8c:	eb62 0206 	sbc.w	r2, r2, r6
 800ef90:	f04f 0300 	mov.w	r3, #0
 800ef94:	f04f 0400 	mov.w	r4, #0
 800ef98:	0194      	lsls	r4, r2, #6
 800ef9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ef9e:	018b      	lsls	r3, r1, #6
 800efa0:	1a5b      	subs	r3, r3, r1
 800efa2:	eb64 0402 	sbc.w	r4, r4, r2
 800efa6:	f04f 0100 	mov.w	r1, #0
 800efaa:	f04f 0200 	mov.w	r2, #0
 800efae:	00e2      	lsls	r2, r4, #3
 800efb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800efb4:	00d9      	lsls	r1, r3, #3
 800efb6:	460b      	mov	r3, r1
 800efb8:	4614      	mov	r4, r2
 800efba:	195b      	adds	r3, r3, r5
 800efbc:	eb44 0406 	adc.w	r4, r4, r6
 800efc0:	f04f 0100 	mov.w	r1, #0
 800efc4:	f04f 0200 	mov.w	r2, #0
 800efc8:	02a2      	lsls	r2, r4, #10
 800efca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800efce:	0299      	lsls	r1, r3, #10
 800efd0:	460b      	mov	r3, r1
 800efd2:	4614      	mov	r4, r2
 800efd4:	4618      	mov	r0, r3
 800efd6:	4621      	mov	r1, r4
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f04f 0400 	mov.w	r4, #0
 800efde:	461a      	mov	r2, r3
 800efe0:	4623      	mov	r3, r4
 800efe2:	f7f1 f95d 	bl	80002a0 <__aeabi_uldivmod>
 800efe6:	4603      	mov	r3, r0
 800efe8:	460c      	mov	r4, r1
 800efea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800efec:	4b0a      	ldr	r3, [pc, #40]	; (800f018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	0c1b      	lsrs	r3, r3, #16
 800eff2:	f003 0303 	and.w	r3, r3, #3
 800eff6:	3301      	adds	r3, #1
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	fbb2 f3f3 	udiv	r3, r2, r3
 800f004:	60bb      	str	r3, [r7, #8]
      break;
 800f006:	e002      	b.n	800f00e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f008:	4b04      	ldr	r3, [pc, #16]	; (800f01c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f00a:	60bb      	str	r3, [r7, #8]
      break;
 800f00c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f00e:	68bb      	ldr	r3, [r7, #8]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3714      	adds	r7, #20
 800f014:	46bd      	mov	sp, r7
 800f016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f018:	40023800 	.word	0x40023800
 800f01c:	00f42400 	.word	0x00f42400
 800f020:	007a1200 	.word	0x007a1200

0800f024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f024:	b480      	push	{r7}
 800f026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f028:	4b03      	ldr	r3, [pc, #12]	; (800f038 <HAL_RCC_GetHCLKFreq+0x14>)
 800f02a:	681b      	ldr	r3, [r3, #0]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	200002bc 	.word	0x200002bc

0800f03c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f040:	f7ff fff0 	bl	800f024 <HAL_RCC_GetHCLKFreq>
 800f044:	4601      	mov	r1, r0
 800f046:	4b05      	ldr	r3, [pc, #20]	; (800f05c <HAL_RCC_GetPCLK1Freq+0x20>)
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	0a9b      	lsrs	r3, r3, #10
 800f04c:	f003 0307 	and.w	r3, r3, #7
 800f050:	4a03      	ldr	r2, [pc, #12]	; (800f060 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f052:	5cd3      	ldrb	r3, [r2, r3]
 800f054:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f058:	4618      	mov	r0, r3
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	40023800 	.word	0x40023800
 800f060:	080131a0 	.word	0x080131a0

0800f064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f068:	f7ff ffdc 	bl	800f024 <HAL_RCC_GetHCLKFreq>
 800f06c:	4601      	mov	r1, r0
 800f06e:	4b05      	ldr	r3, [pc, #20]	; (800f084 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	0b5b      	lsrs	r3, r3, #13
 800f074:	f003 0307 	and.w	r3, r3, #7
 800f078:	4a03      	ldr	r2, [pc, #12]	; (800f088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f07a:	5cd3      	ldrb	r3, [r2, r3]
 800f07c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f080:	4618      	mov	r0, r3
 800f082:	bd80      	pop	{r7, pc}
 800f084:	40023800 	.word	0x40023800
 800f088:	080131a0 	.word	0x080131a0

0800f08c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d101      	bne.n	800f09e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	e01d      	b.n	800f0da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7fe fba8 	bl	800d808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	4610      	mov	r0, r2
 800f0cc:	f000 f850 	bl	800f170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e02d      	b.n	800f152 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d106      	bne.n	800f110 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 f825 	bl	800f15a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2202      	movs	r2, #2
 800f114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3304      	adds	r3, #4
 800f120:	4619      	mov	r1, r3
 800f122:	4610      	mov	r0, r2
 800f124:	f000 f824 	bl	800f170 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f022 0208 	bic.w	r2, r2, #8
 800f136:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6819      	ldr	r1, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	430a      	orrs	r2, r1
 800f146:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2201      	movs	r2, #1
 800f14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b083      	sub	sp, #12
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800f162:	bf00      	nop
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
	...

0800f170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a40      	ldr	r2, [pc, #256]	; (800f284 <TIM_Base_SetConfig+0x114>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d013      	beq.n	800f1b0 <TIM_Base_SetConfig+0x40>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f18e:	d00f      	beq.n	800f1b0 <TIM_Base_SetConfig+0x40>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a3d      	ldr	r2, [pc, #244]	; (800f288 <TIM_Base_SetConfig+0x118>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d00b      	beq.n	800f1b0 <TIM_Base_SetConfig+0x40>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a3c      	ldr	r2, [pc, #240]	; (800f28c <TIM_Base_SetConfig+0x11c>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d007      	beq.n	800f1b0 <TIM_Base_SetConfig+0x40>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a3b      	ldr	r2, [pc, #236]	; (800f290 <TIM_Base_SetConfig+0x120>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d003      	beq.n	800f1b0 <TIM_Base_SetConfig+0x40>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a3a      	ldr	r2, [pc, #232]	; (800f294 <TIM_Base_SetConfig+0x124>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d108      	bne.n	800f1c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	4a2f      	ldr	r2, [pc, #188]	; (800f284 <TIM_Base_SetConfig+0x114>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d02b      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1d0:	d027      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4a2c      	ldr	r2, [pc, #176]	; (800f288 <TIM_Base_SetConfig+0x118>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d023      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a2b      	ldr	r2, [pc, #172]	; (800f28c <TIM_Base_SetConfig+0x11c>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d01f      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a2a      	ldr	r2, [pc, #168]	; (800f290 <TIM_Base_SetConfig+0x120>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d01b      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a29      	ldr	r2, [pc, #164]	; (800f294 <TIM_Base_SetConfig+0x124>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d017      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a28      	ldr	r2, [pc, #160]	; (800f298 <TIM_Base_SetConfig+0x128>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d013      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a27      	ldr	r2, [pc, #156]	; (800f29c <TIM_Base_SetConfig+0x12c>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d00f      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4a26      	ldr	r2, [pc, #152]	; (800f2a0 <TIM_Base_SetConfig+0x130>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d00b      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a25      	ldr	r2, [pc, #148]	; (800f2a4 <TIM_Base_SetConfig+0x134>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d007      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a24      	ldr	r2, [pc, #144]	; (800f2a8 <TIM_Base_SetConfig+0x138>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d003      	beq.n	800f222 <TIM_Base_SetConfig+0xb2>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4a23      	ldr	r2, [pc, #140]	; (800f2ac <TIM_Base_SetConfig+0x13c>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d108      	bne.n	800f234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	4313      	orrs	r3, r2
 800f232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	4313      	orrs	r3, r2
 800f240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	689a      	ldr	r2, [r3, #8]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4a0a      	ldr	r2, [pc, #40]	; (800f284 <TIM_Base_SetConfig+0x114>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d003      	beq.n	800f268 <TIM_Base_SetConfig+0xf8>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a0c      	ldr	r2, [pc, #48]	; (800f294 <TIM_Base_SetConfig+0x124>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d103      	bne.n	800f270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	691a      	ldr	r2, [r3, #16]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	615a      	str	r2, [r3, #20]
}
 800f276:	bf00      	nop
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	40010000 	.word	0x40010000
 800f288:	40000400 	.word	0x40000400
 800f28c:	40000800 	.word	0x40000800
 800f290:	40000c00 	.word	0x40000c00
 800f294:	40010400 	.word	0x40010400
 800f298:	40014000 	.word	0x40014000
 800f29c:	40014400 	.word	0x40014400
 800f2a0:	40014800 	.word	0x40014800
 800f2a4:	40001800 	.word	0x40001800
 800f2a8:	40001c00 	.word	0x40001c00
 800f2ac:	40002000 	.word	0x40002000

0800f2b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e03f      	b.n	800f342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d106      	bne.n	800f2dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7fe fb00 	bl	800d8dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2224      	movs	r2, #36	; 0x24
 800f2e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68da      	ldr	r2, [r3, #12]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f2f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fde3 	bl	800fec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	691a      	ldr	r2, [r3, #16]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	695a      	ldr	r2, [r3, #20]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68da      	ldr	r2, [r3, #12]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2200      	movs	r2, #0
 800f32e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2220      	movs	r2, #32
 800f334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2220      	movs	r2, #32
 800f33c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b088      	sub	sp, #32
 800f34e:	af02      	add	r7, sp, #8
 800f350:	60f8      	str	r0, [r7, #12]
 800f352:	60b9      	str	r1, [r7, #8]
 800f354:	603b      	str	r3, [r7, #0]
 800f356:	4613      	mov	r3, r2
 800f358:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b20      	cmp	r3, #32
 800f368:	f040 8083 	bne.w	800f472 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d002      	beq.n	800f378 <HAL_UART_Transmit+0x2e>
 800f372:	88fb      	ldrh	r3, [r7, #6]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d101      	bne.n	800f37c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	e07b      	b.n	800f474 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f382:	2b01      	cmp	r3, #1
 800f384:	d101      	bne.n	800f38a <HAL_UART_Transmit+0x40>
 800f386:	2302      	movs	r3, #2
 800f388:	e074      	b.n	800f474 <HAL_UART_Transmit+0x12a>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2201      	movs	r2, #1
 800f38e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2200      	movs	r2, #0
 800f396:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2221      	movs	r2, #33	; 0x21
 800f39c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f3a0:	f7fe fb8e 	bl	800dac0 <HAL_GetTick>
 800f3a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	88fa      	ldrh	r2, [r7, #6]
 800f3aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	88fa      	ldrh	r2, [r7, #6]
 800f3b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800f3ba:	e042      	b.n	800f442 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3d2:	d122      	bne.n	800f41a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	2180      	movs	r1, #128	; 0x80
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f000 fb94 	bl	800fb0c <UART_WaitOnFlagUntilTimeout>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800f3ea:	2303      	movs	r3, #3
 800f3ec:	e042      	b.n	800f474 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	881b      	ldrh	r3, [r3, #0]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f400:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d103      	bne.n	800f412 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	3302      	adds	r3, #2
 800f40e:	60bb      	str	r3, [r7, #8]
 800f410:	e017      	b.n	800f442 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3301      	adds	r3, #1
 800f416:	60bb      	str	r3, [r7, #8]
 800f418:	e013      	b.n	800f442 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	2200      	movs	r2, #0
 800f422:	2180      	movs	r1, #128	; 0x80
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f000 fb71 	bl	800fb0c <UART_WaitOnFlagUntilTimeout>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d001      	beq.n	800f434 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800f430:	2303      	movs	r3, #3
 800f432:	e01f      	b.n	800f474 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	60ba      	str	r2, [r7, #8]
 800f43a:	781a      	ldrb	r2, [r3, #0]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f446:	b29b      	uxth	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1b7      	bne.n	800f3bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	2200      	movs	r2, #0
 800f454:	2140      	movs	r1, #64	; 0x40
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f000 fb58 	bl	800fb0c <UART_WaitOnFlagUntilTimeout>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800f462:	2303      	movs	r3, #3
 800f464:	e006      	b.n	800f474 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2220      	movs	r2, #32
 800f46a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800f46e:	2300      	movs	r3, #0
 800f470:	e000      	b.n	800f474 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800f472:	2302      	movs	r3, #2
  }
}
 800f474:	4618      	mov	r0, r3
 800f476:	3718      	adds	r7, #24
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	4613      	mov	r3, r2
 800f488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b20      	cmp	r3, #32
 800f494:	d140      	bne.n	800f518 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d002      	beq.n	800f4a2 <HAL_UART_Receive_IT+0x26>
 800f49c:	88fb      	ldrh	r3, [r7, #6]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e039      	b.n	800f51a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d101      	bne.n	800f4b4 <HAL_UART_Receive_IT+0x38>
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	e032      	b.n	800f51a <HAL_UART_Receive_IT+0x9e>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	88fa      	ldrh	r2, [r7, #6]
 800f4c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	88fa      	ldrh	r2, [r7, #6]
 800f4cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2222      	movs	r2, #34	; 0x22
 800f4d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68da      	ldr	r2, [r3, #12]
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f4f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	695a      	ldr	r2, [r3, #20]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f042 0201 	orr.w	r2, r2, #1
 800f502:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	68da      	ldr	r2, [r3, #12]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f042 0220 	orr.w	r2, r2, #32
 800f512:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	e000      	b.n	800f51a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800f518:	2302      	movs	r3, #2
  }
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b082      	sub	sp, #8
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68da      	ldr	r2, [r3, #12]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800f53c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	695a      	ldr	r2, [r3, #20]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f022 0201 	bic.w	r2, r2, #1
 800f54c:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	695b      	ldr	r3, [r3, #20]
 800f554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f558:	2b80      	cmp	r3, #128	; 0x80
 800f55a:	d124      	bne.n	800f5a6 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	695a      	ldr	r2, [r3, #20]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f56a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f570:	2b00      	cmp	r3, #0
 800f572:	d018      	beq.n	800f5a6 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f578:	2200      	movs	r2, #0
 800f57a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f580:	4618      	mov	r0, r3
 800f582:	f7fe fbba 	bl	800dcfa <HAL_DMA_Abort>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00c      	beq.n	800f5a6 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f590:	4618      	mov	r0, r3
 800f592:	f7fe fc44 	bl	800de1e <HAL_DMA_GetError>
 800f596:	4603      	mov	r3, r0
 800f598:	2b20      	cmp	r3, #32
 800f59a:	d104      	bne.n	800f5a6 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2210      	movs	r2, #16
 800f5a0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800f5a2:	2303      	movs	r3, #3
 800f5a4:	e03d      	b.n	800f622 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5b0:	2b40      	cmp	r3, #64	; 0x40
 800f5b2:	d124      	bne.n	800f5fe <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	695a      	ldr	r2, [r3, #20]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5c2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d018      	beq.n	800f5fe <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fe fb8e 	bl	800dcfa <HAL_DMA_Abort>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00c      	beq.n	800f5fe <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe fc18 	bl	800de1e <HAL_DMA_GetError>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b20      	cmp	r3, #32
 800f5f2:	d104      	bne.n	800f5fe <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2210      	movs	r2, #16
 800f5f8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	e011      	b.n	800f622 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2220      	movs	r2, #32
 800f614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2220      	movs	r2, #32
 800f61c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f640:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	695a      	ldr	r2, [r3, #20]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f022 0201 	bic.w	r2, r2, #1
 800f650:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	695b      	ldr	r3, [r3, #20]
 800f658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f65c:	2b40      	cmp	r3, #64	; 0x40
 800f65e:	d124      	bne.n	800f6aa <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	695a      	ldr	r2, [r3, #20]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f66e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f674:	2b00      	cmp	r3, #0
 800f676:	d018      	beq.n	800f6aa <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f67c:	2200      	movs	r2, #0
 800f67e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f684:	4618      	mov	r0, r3
 800f686:	f7fe fb38 	bl	800dcfa <HAL_DMA_Abort>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d00c      	beq.n	800f6aa <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f694:	4618      	mov	r0, r3
 800f696:	f7fe fbc2 	bl	800de1e <HAL_DMA_GetError>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b20      	cmp	r3, #32
 800f69e:	d104      	bne.n	800f6aa <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2210      	movs	r2, #16
 800f6a4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	e007      	b.n	800f6ba <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2220      	movs	r2, #32
 800f6b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
	...

0800f6c4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68da      	ldr	r2, [r3, #12]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800f6de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	695a      	ldr	r2, [r3, #20]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f022 0201 	bic.w	r2, r2, #1
 800f6ee:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00f      	beq.n	800f718 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f702:	2b80      	cmp	r3, #128	; 0x80
 800f704:	d104      	bne.n	800f710 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f70a:	4a3e      	ldr	r2, [pc, #248]	; (800f804 <HAL_UART_Abort_IT+0x140>)
 800f70c:	651a      	str	r2, [r3, #80]	; 0x50
 800f70e:	e003      	b.n	800f718 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f714:	2200      	movs	r2, #0
 800f716:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00f      	beq.n	800f740 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f72a:	2b40      	cmp	r3, #64	; 0x40
 800f72c:	d104      	bne.n	800f738 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f732:	4a35      	ldr	r2, [pc, #212]	; (800f808 <HAL_UART_Abort_IT+0x144>)
 800f734:	651a      	str	r2, [r3, #80]	; 0x50
 800f736:	e003      	b.n	800f740 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f73c:	2200      	movs	r2, #0
 800f73e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	695b      	ldr	r3, [r3, #20]
 800f746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f74a:	2b80      	cmp	r3, #128	; 0x80
 800f74c:	d11a      	bne.n	800f784 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	695a      	ldr	r2, [r3, #20]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f75c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00e      	beq.n	800f784 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe fb35 	bl	800ddda <HAL_DMA_Abort_IT>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d004      	beq.n	800f780 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f77a:	2200      	movs	r2, #0
 800f77c:	651a      	str	r2, [r3, #80]	; 0x50
 800f77e:	e001      	b.n	800f784 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800f780:	2300      	movs	r3, #0
 800f782:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f78e:	2b40      	cmp	r3, #64	; 0x40
 800f790:	d11c      	bne.n	800f7cc <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	695a      	ldr	r2, [r3, #20]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7a0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d010      	beq.n	800f7cc <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fe fb13 	bl	800ddda <HAL_DMA_Abort_IT>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7be:	2200      	movs	r2, #0
 800f7c0:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	60fb      	str	r3, [r7, #12]
 800f7c6:	e001      	b.n	800f7cc <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d113      	bne.n	800f7fa <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2220      	movs	r2, #32
 800f7e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2220      	movs	r2, #32
 800f7f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 f975 	bl	800fae4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3710      	adds	r7, #16
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	0800fc05 	.word	0x0800fc05
 800f808:	0800fc5f 	.word	0x0800fc5f

0800f80c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68da      	ldr	r2, [r3, #12]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f822:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	695a      	ldr	r2, [r3, #20]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f022 0201 	bic.w	r2, r2, #1
 800f832:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	695b      	ldr	r3, [r3, #20]
 800f83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f83e:	2b40      	cmp	r3, #64	; 0x40
 800f840:	d12a      	bne.n	800f898 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	695a      	ldr	r2, [r3, #20]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f850:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f856:	2b00      	cmp	r3, #0
 800f858:	d013      	beq.n	800f882 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f85e:	4a16      	ldr	r2, [pc, #88]	; (800f8b8 <HAL_UART_AbortReceive_IT+0xac>)
 800f860:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f866:	4618      	mov	r0, r3
 800f868:	f7fe fab7 	bl	800ddda <HAL_DMA_Abort_IT>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d01c      	beq.n	800f8ac <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f87c:	4610      	mov	r0, r2
 800f87e:	4798      	blx	r3
 800f880:	e014      	b.n	800f8ac <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2200      	movs	r2, #0
 800f886:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2220      	movs	r2, #32
 800f88c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f931 	bl	800faf8 <HAL_UART_AbortReceiveCpltCallback>
 800f896:	e009      	b.n	800f8ac <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2220      	movs	r2, #32
 800f8a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f926 	bl	800faf8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	0800fcb9 	.word	0x0800fcb9

0800f8bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b088      	sub	sp, #32
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	695b      	ldr	r3, [r3, #20]
 800f8da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	f003 030f 	and.w	r3, r3, #15
 800f8ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d10d      	bne.n	800f90e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	f003 0320 	and.w	r3, r3, #32
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d008      	beq.n	800f90e <HAL_UART_IRQHandler+0x52>
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	f003 0320 	and.w	r3, r3, #32
 800f902:	2b00      	cmp	r3, #0
 800f904:	d003      	beq.n	800f90e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fa59 	bl	800fdbe <UART_Receive_IT>
      return;
 800f90c:	e0d1      	b.n	800fab2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	2b00      	cmp	r3, #0
 800f912:	f000 80b0 	beq.w	800fa76 <HAL_UART_IRQHandler+0x1ba>
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f003 0301 	and.w	r3, r3, #1
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d105      	bne.n	800f92c <HAL_UART_IRQHandler+0x70>
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f926:	2b00      	cmp	r3, #0
 800f928:	f000 80a5 	beq.w	800fa76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	f003 0301 	and.w	r3, r3, #1
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00a      	beq.n	800f94c <HAL_UART_IRQHandler+0x90>
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d005      	beq.n	800f94c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f944:	f043 0201 	orr.w	r2, r3, #1
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	f003 0304 	and.w	r3, r3, #4
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00a      	beq.n	800f96c <HAL_UART_IRQHandler+0xb0>
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	f003 0301 	and.w	r3, r3, #1
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f964:	f043 0202 	orr.w	r2, r3, #2
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	f003 0302 	and.w	r3, r3, #2
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00a      	beq.n	800f98c <HAL_UART_IRQHandler+0xd0>
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	f003 0301 	and.w	r3, r3, #1
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d005      	beq.n	800f98c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f984:	f043 0204 	orr.w	r2, r3, #4
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	f003 0308 	and.w	r3, r3, #8
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00f      	beq.n	800f9b6 <HAL_UART_IRQHandler+0xfa>
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	f003 0320 	and.w	r3, r3, #32
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d104      	bne.n	800f9aa <HAL_UART_IRQHandler+0xee>
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d005      	beq.n	800f9b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ae:	f043 0208 	orr.w	r2, r3, #8
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d078      	beq.n	800fab0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	f003 0320 	and.w	r3, r3, #32
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d007      	beq.n	800f9d8 <HAL_UART_IRQHandler+0x11c>
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	f003 0320 	and.w	r3, r3, #32
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d002      	beq.n	800f9d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f9f3 	bl	800fdbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9e2:	2b40      	cmp	r3, #64	; 0x40
 800f9e4:	bf0c      	ite	eq
 800f9e6:	2301      	moveq	r3, #1
 800f9e8:	2300      	movne	r3, #0
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9f2:	f003 0308 	and.w	r3, r3, #8
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d102      	bne.n	800fa00 <HAL_UART_IRQHandler+0x144>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d031      	beq.n	800fa64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f8cd 	bl	800fba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	695b      	ldr	r3, [r3, #20]
 800fa0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa10:	2b40      	cmp	r3, #64	; 0x40
 800fa12:	d123      	bne.n	800fa5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	695a      	ldr	r2, [r3, #20]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d013      	beq.n	800fa54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa30:	4a21      	ldr	r2, [pc, #132]	; (800fab8 <HAL_UART_IRQHandler+0x1fc>)
 800fa32:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe f9ce 	bl	800ddda <HAL_DMA_Abort_IT>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d016      	beq.n	800fa72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fa4e:	4610      	mov	r0, r2
 800fa50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa52:	e00e      	b.n	800fa72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 f83b 	bl	800fad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa5a:	e00a      	b.n	800fa72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 f837 	bl	800fad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa62:	e006      	b.n	800fa72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f833 	bl	800fad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800fa70:	e01e      	b.n	800fab0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa72:	bf00      	nop
    return;
 800fa74:	e01c      	b.n	800fab0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d008      	beq.n	800fa92 <HAL_UART_IRQHandler+0x1d6>
 800fa80:	69bb      	ldr	r3, [r7, #24]
 800fa82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d003      	beq.n	800fa92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f929 	bl	800fce2 <UART_Transmit_IT>
    return;
 800fa90:	e00f      	b.n	800fab2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d00a      	beq.n	800fab2 <HAL_UART_IRQHandler+0x1f6>
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d005      	beq.n	800fab2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f971 	bl	800fd8e <UART_EndTransmit_IT>
    return;
 800faac:	bf00      	nop
 800faae:	e000      	b.n	800fab2 <HAL_UART_IRQHandler+0x1f6>
    return;
 800fab0:	bf00      	nop
  }
}
 800fab2:	3720      	adds	r7, #32
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	0800fbdd 	.word	0x0800fbdd

0800fabc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fac4:	bf00      	nop
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800fb00:	bf00      	nop
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	603b      	str	r3, [r7, #0]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb1c:	e02c      	b.n	800fb78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb24:	d028      	beq.n	800fb78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d007      	beq.n	800fb3c <UART_WaitOnFlagUntilTimeout+0x30>
 800fb2c:	f7fd ffc8 	bl	800dac0 <HAL_GetTick>
 800fb30:	4602      	mov	r2, r0
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	69ba      	ldr	r2, [r7, #24]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d21d      	bcs.n	800fb78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68da      	ldr	r2, [r3, #12]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	695a      	ldr	r2, [r3, #20]
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f022 0201 	bic.w	r2, r2, #1
 800fb5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2220      	movs	r2, #32
 800fb60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2220      	movs	r2, #32
 800fb68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800fb74:	2303      	movs	r3, #3
 800fb76:	e00f      	b.n	800fb98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	4013      	ands	r3, r2
 800fb82:	68ba      	ldr	r2, [r7, #8]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	bf0c      	ite	eq
 800fb88:	2301      	moveq	r3, #1
 800fb8a:	2300      	movne	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	461a      	mov	r2, r3
 800fb90:	79fb      	ldrb	r3, [r7, #7]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d0c3      	beq.n	800fb1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68da      	ldr	r2, [r3, #12]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fbb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	695a      	ldr	r2, [r3, #20]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f022 0201 	bic.w	r2, r2, #1
 800fbc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2220      	movs	r2, #32
 800fbcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800fbd0:	bf00      	nop
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f7ff ff6a 	bl	800fad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbfc:	bf00      	nop
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc10:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc16:	2200      	movs	r2, #0
 800fc18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d004      	beq.n	800fc2c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d114      	bne.n	800fc56 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2200      	movs	r2, #0
 800fc36:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2220      	movs	r2, #32
 800fc42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2220      	movs	r2, #32
 800fc4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f7ff ff48 	bl	800fae4 <HAL_UART_AbortCpltCallback>
 800fc54:	e000      	b.n	800fc58 <UART_DMATxAbortCallback+0x54>
      return;
 800fc56:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}

0800fc5e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b084      	sub	sp, #16
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc70:	2200      	movs	r2, #0
 800fc72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d004      	beq.n	800fc86 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d114      	bne.n	800fcb0 <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2220      	movs	r2, #32
 800fc9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2220      	movs	r2, #32
 800fca4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f7ff ff1b 	bl	800fae4 <HAL_UART_AbortCpltCallback>
 800fcae:	e000      	b.n	800fcb2 <UART_DMARxAbortCallback+0x54>
      return;
 800fcb0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2220      	movs	r2, #32
 800fcd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff ff0f 	bl	800faf8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fce2:	b480      	push	{r7}
 800fce4:	b085      	sub	sp, #20
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b21      	cmp	r3, #33	; 0x21
 800fcf4:	d144      	bne.n	800fd80 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcfe:	d11a      	bne.n	800fd36 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	881b      	ldrh	r3, [r3, #0]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd14:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d105      	bne.n	800fd2a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	1c9a      	adds	r2, r3, #2
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	621a      	str	r2, [r3, #32]
 800fd28:	e00e      	b.n	800fd48 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6a1b      	ldr	r3, [r3, #32]
 800fd2e:	1c5a      	adds	r2, r3, #1
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	621a      	str	r2, [r3, #32]
 800fd34:	e008      	b.n	800fd48 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	1c59      	adds	r1, r3, #1
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	6211      	str	r1, [r2, #32]
 800fd40:	781a      	ldrb	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	4619      	mov	r1, r3
 800fd56:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10f      	bne.n	800fd7c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	68da      	ldr	r2, [r3, #12]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68da      	ldr	r2, [r3, #12]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	e000      	b.n	800fd82 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800fd80:	2302      	movs	r3, #2
  }
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3714      	adds	r7, #20
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr

0800fd8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b082      	sub	sp, #8
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	68da      	ldr	r2, [r3, #12]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fda4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2220      	movs	r2, #32
 800fdaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff fe84 	bl	800fabc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b22      	cmp	r3, #34	; 0x22
 800fdd0:	d171      	bne.n	800feb6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdda:	d123      	bne.n	800fe24 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d10e      	bne.n	800fe08 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe00:	1c9a      	adds	r2, r3, #2
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	629a      	str	r2, [r3, #40]	; 0x28
 800fe06:	e029      	b.n	800fe5c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	629a      	str	r2, [r3, #40]	; 0x28
 800fe22:	e01b      	b.n	800fe5c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10a      	bne.n	800fe42 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6858      	ldr	r0, [r3, #4]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe36:	1c59      	adds	r1, r3, #1
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	6291      	str	r1, [r2, #40]	; 0x28
 800fe3c:	b2c2      	uxtb	r2, r0
 800fe3e:	701a      	strb	r2, [r3, #0]
 800fe40:	e00c      	b.n	800fe5c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe4e:	1c58      	adds	r0, r3, #1
 800fe50:	6879      	ldr	r1, [r7, #4]
 800fe52:	6288      	str	r0, [r1, #40]	; 0x28
 800fe54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fe58:	b2d2      	uxtb	r2, r2
 800fe5a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	3b01      	subs	r3, #1
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	4619      	mov	r1, r3
 800fe6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d120      	bne.n	800feb2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68da      	ldr	r2, [r3, #12]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f022 0220 	bic.w	r2, r2, #32
 800fe7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68da      	ldr	r2, [r3, #12]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	695a      	ldr	r2, [r3, #20]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f022 0201 	bic.w	r2, r2, #1
 800fe9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2220      	movs	r2, #32
 800fea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7fd fccf 	bl	800d84c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800feae:	2300      	movs	r3, #0
 800feb0:	e002      	b.n	800feb8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800feb2:	2300      	movs	r3, #0
 800feb4:	e000      	b.n	800feb8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800feb6:	2302      	movs	r3, #2
  }
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	b085      	sub	sp, #20
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	691b      	ldr	r3, [r3, #16]
 800fed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	68da      	ldr	r2, [r3, #12]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	430a      	orrs	r2, r1
 800fede:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	689a      	ldr	r2, [r3, #8]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	691b      	ldr	r3, [r3, #16]
 800fee8:	431a      	orrs	r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	431a      	orrs	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	69db      	ldr	r3, [r3, #28]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ff02:	f023 030c 	bic.w	r3, r3, #12
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6812      	ldr	r2, [r2, #0]
 800ff0a:	68f9      	ldr	r1, [r7, #12]
 800ff0c:	430b      	orrs	r3, r1
 800ff0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	699a      	ldr	r2, [r3, #24]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	69db      	ldr	r3, [r3, #28]
 800ff2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff2e:	f040 818b 	bne.w	8010248 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4ac1      	ldr	r2, [pc, #772]	; (801023c <UART_SetConfig+0x37c>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d005      	beq.n	800ff48 <UART_SetConfig+0x88>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4abf      	ldr	r2, [pc, #764]	; (8010240 <UART_SetConfig+0x380>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	f040 80bd 	bne.w	80100c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ff48:	f7ff f88c 	bl	800f064 <HAL_RCC_GetPCLK2Freq>
 800ff4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	461d      	mov	r5, r3
 800ff52:	f04f 0600 	mov.w	r6, #0
 800ff56:	46a8      	mov	r8, r5
 800ff58:	46b1      	mov	r9, r6
 800ff5a:	eb18 0308 	adds.w	r3, r8, r8
 800ff5e:	eb49 0409 	adc.w	r4, r9, r9
 800ff62:	4698      	mov	r8, r3
 800ff64:	46a1      	mov	r9, r4
 800ff66:	eb18 0805 	adds.w	r8, r8, r5
 800ff6a:	eb49 0906 	adc.w	r9, r9, r6
 800ff6e:	f04f 0100 	mov.w	r1, #0
 800ff72:	f04f 0200 	mov.w	r2, #0
 800ff76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ff7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ff82:	4688      	mov	r8, r1
 800ff84:	4691      	mov	r9, r2
 800ff86:	eb18 0005 	adds.w	r0, r8, r5
 800ff8a:	eb49 0106 	adc.w	r1, r9, r6
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	461d      	mov	r5, r3
 800ff94:	f04f 0600 	mov.w	r6, #0
 800ff98:	196b      	adds	r3, r5, r5
 800ff9a:	eb46 0406 	adc.w	r4, r6, r6
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	4623      	mov	r3, r4
 800ffa2:	f7f0 f97d 	bl	80002a0 <__aeabi_uldivmod>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	460c      	mov	r4, r1
 800ffaa:	461a      	mov	r2, r3
 800ffac:	4ba5      	ldr	r3, [pc, #660]	; (8010244 <UART_SetConfig+0x384>)
 800ffae:	fba3 2302 	umull	r2, r3, r3, r2
 800ffb2:	095b      	lsrs	r3, r3, #5
 800ffb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	461d      	mov	r5, r3
 800ffbc:	f04f 0600 	mov.w	r6, #0
 800ffc0:	46a9      	mov	r9, r5
 800ffc2:	46b2      	mov	sl, r6
 800ffc4:	eb19 0309 	adds.w	r3, r9, r9
 800ffc8:	eb4a 040a 	adc.w	r4, sl, sl
 800ffcc:	4699      	mov	r9, r3
 800ffce:	46a2      	mov	sl, r4
 800ffd0:	eb19 0905 	adds.w	r9, r9, r5
 800ffd4:	eb4a 0a06 	adc.w	sl, sl, r6
 800ffd8:	f04f 0100 	mov.w	r1, #0
 800ffdc:	f04f 0200 	mov.w	r2, #0
 800ffe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffec:	4689      	mov	r9, r1
 800ffee:	4692      	mov	sl, r2
 800fff0:	eb19 0005 	adds.w	r0, r9, r5
 800fff4:	eb4a 0106 	adc.w	r1, sl, r6
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	461d      	mov	r5, r3
 800fffe:	f04f 0600 	mov.w	r6, #0
 8010002:	196b      	adds	r3, r5, r5
 8010004:	eb46 0406 	adc.w	r4, r6, r6
 8010008:	461a      	mov	r2, r3
 801000a:	4623      	mov	r3, r4
 801000c:	f7f0 f948 	bl	80002a0 <__aeabi_uldivmod>
 8010010:	4603      	mov	r3, r0
 8010012:	460c      	mov	r4, r1
 8010014:	461a      	mov	r2, r3
 8010016:	4b8b      	ldr	r3, [pc, #556]	; (8010244 <UART_SetConfig+0x384>)
 8010018:	fba3 1302 	umull	r1, r3, r3, r2
 801001c:	095b      	lsrs	r3, r3, #5
 801001e:	2164      	movs	r1, #100	; 0x64
 8010020:	fb01 f303 	mul.w	r3, r1, r3
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	00db      	lsls	r3, r3, #3
 8010028:	3332      	adds	r3, #50	; 0x32
 801002a:	4a86      	ldr	r2, [pc, #536]	; (8010244 <UART_SetConfig+0x384>)
 801002c:	fba2 2303 	umull	r2, r3, r2, r3
 8010030:	095b      	lsrs	r3, r3, #5
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010038:	4498      	add	r8, r3
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	461d      	mov	r5, r3
 801003e:	f04f 0600 	mov.w	r6, #0
 8010042:	46a9      	mov	r9, r5
 8010044:	46b2      	mov	sl, r6
 8010046:	eb19 0309 	adds.w	r3, r9, r9
 801004a:	eb4a 040a 	adc.w	r4, sl, sl
 801004e:	4699      	mov	r9, r3
 8010050:	46a2      	mov	sl, r4
 8010052:	eb19 0905 	adds.w	r9, r9, r5
 8010056:	eb4a 0a06 	adc.w	sl, sl, r6
 801005a:	f04f 0100 	mov.w	r1, #0
 801005e:	f04f 0200 	mov.w	r2, #0
 8010062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801006a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801006e:	4689      	mov	r9, r1
 8010070:	4692      	mov	sl, r2
 8010072:	eb19 0005 	adds.w	r0, r9, r5
 8010076:	eb4a 0106 	adc.w	r1, sl, r6
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	461d      	mov	r5, r3
 8010080:	f04f 0600 	mov.w	r6, #0
 8010084:	196b      	adds	r3, r5, r5
 8010086:	eb46 0406 	adc.w	r4, r6, r6
 801008a:	461a      	mov	r2, r3
 801008c:	4623      	mov	r3, r4
 801008e:	f7f0 f907 	bl	80002a0 <__aeabi_uldivmod>
 8010092:	4603      	mov	r3, r0
 8010094:	460c      	mov	r4, r1
 8010096:	461a      	mov	r2, r3
 8010098:	4b6a      	ldr	r3, [pc, #424]	; (8010244 <UART_SetConfig+0x384>)
 801009a:	fba3 1302 	umull	r1, r3, r3, r2
 801009e:	095b      	lsrs	r3, r3, #5
 80100a0:	2164      	movs	r1, #100	; 0x64
 80100a2:	fb01 f303 	mul.w	r3, r1, r3
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	00db      	lsls	r3, r3, #3
 80100aa:	3332      	adds	r3, #50	; 0x32
 80100ac:	4a65      	ldr	r2, [pc, #404]	; (8010244 <UART_SetConfig+0x384>)
 80100ae:	fba2 2303 	umull	r2, r3, r2, r3
 80100b2:	095b      	lsrs	r3, r3, #5
 80100b4:	f003 0207 	and.w	r2, r3, #7
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4442      	add	r2, r8
 80100be:	609a      	str	r2, [r3, #8]
 80100c0:	e26f      	b.n	80105a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80100c2:	f7fe ffbb 	bl	800f03c <HAL_RCC_GetPCLK1Freq>
 80100c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	461d      	mov	r5, r3
 80100cc:	f04f 0600 	mov.w	r6, #0
 80100d0:	46a8      	mov	r8, r5
 80100d2:	46b1      	mov	r9, r6
 80100d4:	eb18 0308 	adds.w	r3, r8, r8
 80100d8:	eb49 0409 	adc.w	r4, r9, r9
 80100dc:	4698      	mov	r8, r3
 80100de:	46a1      	mov	r9, r4
 80100e0:	eb18 0805 	adds.w	r8, r8, r5
 80100e4:	eb49 0906 	adc.w	r9, r9, r6
 80100e8:	f04f 0100 	mov.w	r1, #0
 80100ec:	f04f 0200 	mov.w	r2, #0
 80100f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80100f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80100f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80100fc:	4688      	mov	r8, r1
 80100fe:	4691      	mov	r9, r2
 8010100:	eb18 0005 	adds.w	r0, r8, r5
 8010104:	eb49 0106 	adc.w	r1, r9, r6
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	461d      	mov	r5, r3
 801010e:	f04f 0600 	mov.w	r6, #0
 8010112:	196b      	adds	r3, r5, r5
 8010114:	eb46 0406 	adc.w	r4, r6, r6
 8010118:	461a      	mov	r2, r3
 801011a:	4623      	mov	r3, r4
 801011c:	f7f0 f8c0 	bl	80002a0 <__aeabi_uldivmod>
 8010120:	4603      	mov	r3, r0
 8010122:	460c      	mov	r4, r1
 8010124:	461a      	mov	r2, r3
 8010126:	4b47      	ldr	r3, [pc, #284]	; (8010244 <UART_SetConfig+0x384>)
 8010128:	fba3 2302 	umull	r2, r3, r3, r2
 801012c:	095b      	lsrs	r3, r3, #5
 801012e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	461d      	mov	r5, r3
 8010136:	f04f 0600 	mov.w	r6, #0
 801013a:	46a9      	mov	r9, r5
 801013c:	46b2      	mov	sl, r6
 801013e:	eb19 0309 	adds.w	r3, r9, r9
 8010142:	eb4a 040a 	adc.w	r4, sl, sl
 8010146:	4699      	mov	r9, r3
 8010148:	46a2      	mov	sl, r4
 801014a:	eb19 0905 	adds.w	r9, r9, r5
 801014e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010152:	f04f 0100 	mov.w	r1, #0
 8010156:	f04f 0200 	mov.w	r2, #0
 801015a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801015e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010162:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010166:	4689      	mov	r9, r1
 8010168:	4692      	mov	sl, r2
 801016a:	eb19 0005 	adds.w	r0, r9, r5
 801016e:	eb4a 0106 	adc.w	r1, sl, r6
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	461d      	mov	r5, r3
 8010178:	f04f 0600 	mov.w	r6, #0
 801017c:	196b      	adds	r3, r5, r5
 801017e:	eb46 0406 	adc.w	r4, r6, r6
 8010182:	461a      	mov	r2, r3
 8010184:	4623      	mov	r3, r4
 8010186:	f7f0 f88b 	bl	80002a0 <__aeabi_uldivmod>
 801018a:	4603      	mov	r3, r0
 801018c:	460c      	mov	r4, r1
 801018e:	461a      	mov	r2, r3
 8010190:	4b2c      	ldr	r3, [pc, #176]	; (8010244 <UART_SetConfig+0x384>)
 8010192:	fba3 1302 	umull	r1, r3, r3, r2
 8010196:	095b      	lsrs	r3, r3, #5
 8010198:	2164      	movs	r1, #100	; 0x64
 801019a:	fb01 f303 	mul.w	r3, r1, r3
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	00db      	lsls	r3, r3, #3
 80101a2:	3332      	adds	r3, #50	; 0x32
 80101a4:	4a27      	ldr	r2, [pc, #156]	; (8010244 <UART_SetConfig+0x384>)
 80101a6:	fba2 2303 	umull	r2, r3, r2, r3
 80101aa:	095b      	lsrs	r3, r3, #5
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80101b2:	4498      	add	r8, r3
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	461d      	mov	r5, r3
 80101b8:	f04f 0600 	mov.w	r6, #0
 80101bc:	46a9      	mov	r9, r5
 80101be:	46b2      	mov	sl, r6
 80101c0:	eb19 0309 	adds.w	r3, r9, r9
 80101c4:	eb4a 040a 	adc.w	r4, sl, sl
 80101c8:	4699      	mov	r9, r3
 80101ca:	46a2      	mov	sl, r4
 80101cc:	eb19 0905 	adds.w	r9, r9, r5
 80101d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80101d4:	f04f 0100 	mov.w	r1, #0
 80101d8:	f04f 0200 	mov.w	r2, #0
 80101dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101e8:	4689      	mov	r9, r1
 80101ea:	4692      	mov	sl, r2
 80101ec:	eb19 0005 	adds.w	r0, r9, r5
 80101f0:	eb4a 0106 	adc.w	r1, sl, r6
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	461d      	mov	r5, r3
 80101fa:	f04f 0600 	mov.w	r6, #0
 80101fe:	196b      	adds	r3, r5, r5
 8010200:	eb46 0406 	adc.w	r4, r6, r6
 8010204:	461a      	mov	r2, r3
 8010206:	4623      	mov	r3, r4
 8010208:	f7f0 f84a 	bl	80002a0 <__aeabi_uldivmod>
 801020c:	4603      	mov	r3, r0
 801020e:	460c      	mov	r4, r1
 8010210:	461a      	mov	r2, r3
 8010212:	4b0c      	ldr	r3, [pc, #48]	; (8010244 <UART_SetConfig+0x384>)
 8010214:	fba3 1302 	umull	r1, r3, r3, r2
 8010218:	095b      	lsrs	r3, r3, #5
 801021a:	2164      	movs	r1, #100	; 0x64
 801021c:	fb01 f303 	mul.w	r3, r1, r3
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	00db      	lsls	r3, r3, #3
 8010224:	3332      	adds	r3, #50	; 0x32
 8010226:	4a07      	ldr	r2, [pc, #28]	; (8010244 <UART_SetConfig+0x384>)
 8010228:	fba2 2303 	umull	r2, r3, r2, r3
 801022c:	095b      	lsrs	r3, r3, #5
 801022e:	f003 0207 	and.w	r2, r3, #7
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4442      	add	r2, r8
 8010238:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801023a:	e1b2      	b.n	80105a2 <UART_SetConfig+0x6e2>
 801023c:	40011000 	.word	0x40011000
 8010240:	40011400 	.word	0x40011400
 8010244:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4ad7      	ldr	r2, [pc, #860]	; (80105ac <UART_SetConfig+0x6ec>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d005      	beq.n	801025e <UART_SetConfig+0x39e>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4ad6      	ldr	r2, [pc, #856]	; (80105b0 <UART_SetConfig+0x6f0>)
 8010258:	4293      	cmp	r3, r2
 801025a:	f040 80d1 	bne.w	8010400 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801025e:	f7fe ff01 	bl	800f064 <HAL_RCC_GetPCLK2Freq>
 8010262:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	469a      	mov	sl, r3
 8010268:	f04f 0b00 	mov.w	fp, #0
 801026c:	46d0      	mov	r8, sl
 801026e:	46d9      	mov	r9, fp
 8010270:	eb18 0308 	adds.w	r3, r8, r8
 8010274:	eb49 0409 	adc.w	r4, r9, r9
 8010278:	4698      	mov	r8, r3
 801027a:	46a1      	mov	r9, r4
 801027c:	eb18 080a 	adds.w	r8, r8, sl
 8010280:	eb49 090b 	adc.w	r9, r9, fp
 8010284:	f04f 0100 	mov.w	r1, #0
 8010288:	f04f 0200 	mov.w	r2, #0
 801028c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010290:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010294:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010298:	4688      	mov	r8, r1
 801029a:	4691      	mov	r9, r2
 801029c:	eb1a 0508 	adds.w	r5, sl, r8
 80102a0:	eb4b 0609 	adc.w	r6, fp, r9
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	4619      	mov	r1, r3
 80102aa:	f04f 0200 	mov.w	r2, #0
 80102ae:	f04f 0300 	mov.w	r3, #0
 80102b2:	f04f 0400 	mov.w	r4, #0
 80102b6:	0094      	lsls	r4, r2, #2
 80102b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102bc:	008b      	lsls	r3, r1, #2
 80102be:	461a      	mov	r2, r3
 80102c0:	4623      	mov	r3, r4
 80102c2:	4628      	mov	r0, r5
 80102c4:	4631      	mov	r1, r6
 80102c6:	f7ef ffeb 	bl	80002a0 <__aeabi_uldivmod>
 80102ca:	4603      	mov	r3, r0
 80102cc:	460c      	mov	r4, r1
 80102ce:	461a      	mov	r2, r3
 80102d0:	4bb8      	ldr	r3, [pc, #736]	; (80105b4 <UART_SetConfig+0x6f4>)
 80102d2:	fba3 2302 	umull	r2, r3, r3, r2
 80102d6:	095b      	lsrs	r3, r3, #5
 80102d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	469b      	mov	fp, r3
 80102e0:	f04f 0c00 	mov.w	ip, #0
 80102e4:	46d9      	mov	r9, fp
 80102e6:	46e2      	mov	sl, ip
 80102e8:	eb19 0309 	adds.w	r3, r9, r9
 80102ec:	eb4a 040a 	adc.w	r4, sl, sl
 80102f0:	4699      	mov	r9, r3
 80102f2:	46a2      	mov	sl, r4
 80102f4:	eb19 090b 	adds.w	r9, r9, fp
 80102f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102fc:	f04f 0100 	mov.w	r1, #0
 8010300:	f04f 0200 	mov.w	r2, #0
 8010304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801030c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010310:	4689      	mov	r9, r1
 8010312:	4692      	mov	sl, r2
 8010314:	eb1b 0509 	adds.w	r5, fp, r9
 8010318:	eb4c 060a 	adc.w	r6, ip, sl
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	4619      	mov	r1, r3
 8010322:	f04f 0200 	mov.w	r2, #0
 8010326:	f04f 0300 	mov.w	r3, #0
 801032a:	f04f 0400 	mov.w	r4, #0
 801032e:	0094      	lsls	r4, r2, #2
 8010330:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010334:	008b      	lsls	r3, r1, #2
 8010336:	461a      	mov	r2, r3
 8010338:	4623      	mov	r3, r4
 801033a:	4628      	mov	r0, r5
 801033c:	4631      	mov	r1, r6
 801033e:	f7ef ffaf 	bl	80002a0 <__aeabi_uldivmod>
 8010342:	4603      	mov	r3, r0
 8010344:	460c      	mov	r4, r1
 8010346:	461a      	mov	r2, r3
 8010348:	4b9a      	ldr	r3, [pc, #616]	; (80105b4 <UART_SetConfig+0x6f4>)
 801034a:	fba3 1302 	umull	r1, r3, r3, r2
 801034e:	095b      	lsrs	r3, r3, #5
 8010350:	2164      	movs	r1, #100	; 0x64
 8010352:	fb01 f303 	mul.w	r3, r1, r3
 8010356:	1ad3      	subs	r3, r2, r3
 8010358:	011b      	lsls	r3, r3, #4
 801035a:	3332      	adds	r3, #50	; 0x32
 801035c:	4a95      	ldr	r2, [pc, #596]	; (80105b4 <UART_SetConfig+0x6f4>)
 801035e:	fba2 2303 	umull	r2, r3, r2, r3
 8010362:	095b      	lsrs	r3, r3, #5
 8010364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010368:	4498      	add	r8, r3
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	469b      	mov	fp, r3
 801036e:	f04f 0c00 	mov.w	ip, #0
 8010372:	46d9      	mov	r9, fp
 8010374:	46e2      	mov	sl, ip
 8010376:	eb19 0309 	adds.w	r3, r9, r9
 801037a:	eb4a 040a 	adc.w	r4, sl, sl
 801037e:	4699      	mov	r9, r3
 8010380:	46a2      	mov	sl, r4
 8010382:	eb19 090b 	adds.w	r9, r9, fp
 8010386:	eb4a 0a0c 	adc.w	sl, sl, ip
 801038a:	f04f 0100 	mov.w	r1, #0
 801038e:	f04f 0200 	mov.w	r2, #0
 8010392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010396:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801039a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801039e:	4689      	mov	r9, r1
 80103a0:	4692      	mov	sl, r2
 80103a2:	eb1b 0509 	adds.w	r5, fp, r9
 80103a6:	eb4c 060a 	adc.w	r6, ip, sl
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	4619      	mov	r1, r3
 80103b0:	f04f 0200 	mov.w	r2, #0
 80103b4:	f04f 0300 	mov.w	r3, #0
 80103b8:	f04f 0400 	mov.w	r4, #0
 80103bc:	0094      	lsls	r4, r2, #2
 80103be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103c2:	008b      	lsls	r3, r1, #2
 80103c4:	461a      	mov	r2, r3
 80103c6:	4623      	mov	r3, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	4631      	mov	r1, r6
 80103cc:	f7ef ff68 	bl	80002a0 <__aeabi_uldivmod>
 80103d0:	4603      	mov	r3, r0
 80103d2:	460c      	mov	r4, r1
 80103d4:	461a      	mov	r2, r3
 80103d6:	4b77      	ldr	r3, [pc, #476]	; (80105b4 <UART_SetConfig+0x6f4>)
 80103d8:	fba3 1302 	umull	r1, r3, r3, r2
 80103dc:	095b      	lsrs	r3, r3, #5
 80103de:	2164      	movs	r1, #100	; 0x64
 80103e0:	fb01 f303 	mul.w	r3, r1, r3
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	011b      	lsls	r3, r3, #4
 80103e8:	3332      	adds	r3, #50	; 0x32
 80103ea:	4a72      	ldr	r2, [pc, #456]	; (80105b4 <UART_SetConfig+0x6f4>)
 80103ec:	fba2 2303 	umull	r2, r3, r2, r3
 80103f0:	095b      	lsrs	r3, r3, #5
 80103f2:	f003 020f 	and.w	r2, r3, #15
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4442      	add	r2, r8
 80103fc:	609a      	str	r2, [r3, #8]
 80103fe:	e0d0      	b.n	80105a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010400:	f7fe fe1c 	bl	800f03c <HAL_RCC_GetPCLK1Freq>
 8010404:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	469a      	mov	sl, r3
 801040a:	f04f 0b00 	mov.w	fp, #0
 801040e:	46d0      	mov	r8, sl
 8010410:	46d9      	mov	r9, fp
 8010412:	eb18 0308 	adds.w	r3, r8, r8
 8010416:	eb49 0409 	adc.w	r4, r9, r9
 801041a:	4698      	mov	r8, r3
 801041c:	46a1      	mov	r9, r4
 801041e:	eb18 080a 	adds.w	r8, r8, sl
 8010422:	eb49 090b 	adc.w	r9, r9, fp
 8010426:	f04f 0100 	mov.w	r1, #0
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010432:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010436:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801043a:	4688      	mov	r8, r1
 801043c:	4691      	mov	r9, r2
 801043e:	eb1a 0508 	adds.w	r5, sl, r8
 8010442:	eb4b 0609 	adc.w	r6, fp, r9
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	4619      	mov	r1, r3
 801044c:	f04f 0200 	mov.w	r2, #0
 8010450:	f04f 0300 	mov.w	r3, #0
 8010454:	f04f 0400 	mov.w	r4, #0
 8010458:	0094      	lsls	r4, r2, #2
 801045a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801045e:	008b      	lsls	r3, r1, #2
 8010460:	461a      	mov	r2, r3
 8010462:	4623      	mov	r3, r4
 8010464:	4628      	mov	r0, r5
 8010466:	4631      	mov	r1, r6
 8010468:	f7ef ff1a 	bl	80002a0 <__aeabi_uldivmod>
 801046c:	4603      	mov	r3, r0
 801046e:	460c      	mov	r4, r1
 8010470:	461a      	mov	r2, r3
 8010472:	4b50      	ldr	r3, [pc, #320]	; (80105b4 <UART_SetConfig+0x6f4>)
 8010474:	fba3 2302 	umull	r2, r3, r3, r2
 8010478:	095b      	lsrs	r3, r3, #5
 801047a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	469b      	mov	fp, r3
 8010482:	f04f 0c00 	mov.w	ip, #0
 8010486:	46d9      	mov	r9, fp
 8010488:	46e2      	mov	sl, ip
 801048a:	eb19 0309 	adds.w	r3, r9, r9
 801048e:	eb4a 040a 	adc.w	r4, sl, sl
 8010492:	4699      	mov	r9, r3
 8010494:	46a2      	mov	sl, r4
 8010496:	eb19 090b 	adds.w	r9, r9, fp
 801049a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801049e:	f04f 0100 	mov.w	r1, #0
 80104a2:	f04f 0200 	mov.w	r2, #0
 80104a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104b2:	4689      	mov	r9, r1
 80104b4:	4692      	mov	sl, r2
 80104b6:	eb1b 0509 	adds.w	r5, fp, r9
 80104ba:	eb4c 060a 	adc.w	r6, ip, sl
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	4619      	mov	r1, r3
 80104c4:	f04f 0200 	mov.w	r2, #0
 80104c8:	f04f 0300 	mov.w	r3, #0
 80104cc:	f04f 0400 	mov.w	r4, #0
 80104d0:	0094      	lsls	r4, r2, #2
 80104d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104d6:	008b      	lsls	r3, r1, #2
 80104d8:	461a      	mov	r2, r3
 80104da:	4623      	mov	r3, r4
 80104dc:	4628      	mov	r0, r5
 80104de:	4631      	mov	r1, r6
 80104e0:	f7ef fede 	bl	80002a0 <__aeabi_uldivmod>
 80104e4:	4603      	mov	r3, r0
 80104e6:	460c      	mov	r4, r1
 80104e8:	461a      	mov	r2, r3
 80104ea:	4b32      	ldr	r3, [pc, #200]	; (80105b4 <UART_SetConfig+0x6f4>)
 80104ec:	fba3 1302 	umull	r1, r3, r3, r2
 80104f0:	095b      	lsrs	r3, r3, #5
 80104f2:	2164      	movs	r1, #100	; 0x64
 80104f4:	fb01 f303 	mul.w	r3, r1, r3
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	011b      	lsls	r3, r3, #4
 80104fc:	3332      	adds	r3, #50	; 0x32
 80104fe:	4a2d      	ldr	r2, [pc, #180]	; (80105b4 <UART_SetConfig+0x6f4>)
 8010500:	fba2 2303 	umull	r2, r3, r2, r3
 8010504:	095b      	lsrs	r3, r3, #5
 8010506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801050a:	4498      	add	r8, r3
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	469b      	mov	fp, r3
 8010510:	f04f 0c00 	mov.w	ip, #0
 8010514:	46d9      	mov	r9, fp
 8010516:	46e2      	mov	sl, ip
 8010518:	eb19 0309 	adds.w	r3, r9, r9
 801051c:	eb4a 040a 	adc.w	r4, sl, sl
 8010520:	4699      	mov	r9, r3
 8010522:	46a2      	mov	sl, r4
 8010524:	eb19 090b 	adds.w	r9, r9, fp
 8010528:	eb4a 0a0c 	adc.w	sl, sl, ip
 801052c:	f04f 0100 	mov.w	r1, #0
 8010530:	f04f 0200 	mov.w	r2, #0
 8010534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801053c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010540:	4689      	mov	r9, r1
 8010542:	4692      	mov	sl, r2
 8010544:	eb1b 0509 	adds.w	r5, fp, r9
 8010548:	eb4c 060a 	adc.w	r6, ip, sl
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	4619      	mov	r1, r3
 8010552:	f04f 0200 	mov.w	r2, #0
 8010556:	f04f 0300 	mov.w	r3, #0
 801055a:	f04f 0400 	mov.w	r4, #0
 801055e:	0094      	lsls	r4, r2, #2
 8010560:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010564:	008b      	lsls	r3, r1, #2
 8010566:	461a      	mov	r2, r3
 8010568:	4623      	mov	r3, r4
 801056a:	4628      	mov	r0, r5
 801056c:	4631      	mov	r1, r6
 801056e:	f7ef fe97 	bl	80002a0 <__aeabi_uldivmod>
 8010572:	4603      	mov	r3, r0
 8010574:	460c      	mov	r4, r1
 8010576:	461a      	mov	r2, r3
 8010578:	4b0e      	ldr	r3, [pc, #56]	; (80105b4 <UART_SetConfig+0x6f4>)
 801057a:	fba3 1302 	umull	r1, r3, r3, r2
 801057e:	095b      	lsrs	r3, r3, #5
 8010580:	2164      	movs	r1, #100	; 0x64
 8010582:	fb01 f303 	mul.w	r3, r1, r3
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	011b      	lsls	r3, r3, #4
 801058a:	3332      	adds	r3, #50	; 0x32
 801058c:	4a09      	ldr	r2, [pc, #36]	; (80105b4 <UART_SetConfig+0x6f4>)
 801058e:	fba2 2303 	umull	r2, r3, r2, r3
 8010592:	095b      	lsrs	r3, r3, #5
 8010594:	f003 020f 	and.w	r2, r3, #15
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4442      	add	r2, r8
 801059e:	609a      	str	r2, [r3, #8]
}
 80105a0:	e7ff      	b.n	80105a2 <UART_SetConfig+0x6e2>
 80105a2:	bf00      	nop
 80105a4:	3714      	adds	r7, #20
 80105a6:	46bd      	mov	sp, r7
 80105a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ac:	40011000 	.word	0x40011000
 80105b0:	40011400 	.word	0x40011400
 80105b4:	51eb851f 	.word	0x51eb851f

080105b8 <__assert_func>:
 80105b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105ba:	461c      	mov	r4, r3
 80105bc:	4b09      	ldr	r3, [pc, #36]	; (80105e4 <__assert_func+0x2c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4605      	mov	r5, r0
 80105c2:	68d8      	ldr	r0, [r3, #12]
 80105c4:	b152      	cbz	r2, 80105dc <__assert_func+0x24>
 80105c6:	4b08      	ldr	r3, [pc, #32]	; (80105e8 <__assert_func+0x30>)
 80105c8:	9100      	str	r1, [sp, #0]
 80105ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80105ce:	4907      	ldr	r1, [pc, #28]	; (80105ec <__assert_func+0x34>)
 80105d0:	462b      	mov	r3, r5
 80105d2:	4622      	mov	r2, r4
 80105d4:	f000 f814 	bl	8010600 <fiprintf>
 80105d8:	f000 fda6 	bl	8011128 <abort>
 80105dc:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <__assert_func+0x38>)
 80105de:	461a      	mov	r2, r3
 80105e0:	e7f2      	b.n	80105c8 <__assert_func+0x10>
 80105e2:	bf00      	nop
 80105e4:	200002c8 	.word	0x200002c8
 80105e8:	080131a8 	.word	0x080131a8
 80105ec:	080131b5 	.word	0x080131b5
 80105f0:	080131e3 	.word	0x080131e3

080105f4 <__errno>:
 80105f4:	4b01      	ldr	r3, [pc, #4]	; (80105fc <__errno+0x8>)
 80105f6:	6818      	ldr	r0, [r3, #0]
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	200002c8 	.word	0x200002c8

08010600 <fiprintf>:
 8010600:	b40e      	push	{r1, r2, r3}
 8010602:	b503      	push	{r0, r1, lr}
 8010604:	4601      	mov	r1, r0
 8010606:	ab03      	add	r3, sp, #12
 8010608:	4805      	ldr	r0, [pc, #20]	; (8010620 <fiprintf+0x20>)
 801060a:	f853 2b04 	ldr.w	r2, [r3], #4
 801060e:	6800      	ldr	r0, [r0, #0]
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	f000 f89b 	bl	801074c <_vfiprintf_r>
 8010616:	b002      	add	sp, #8
 8010618:	f85d eb04 	ldr.w	lr, [sp], #4
 801061c:	b003      	add	sp, #12
 801061e:	4770      	bx	lr
 8010620:	200002c8 	.word	0x200002c8

08010624 <__libc_init_array>:
 8010624:	b570      	push	{r4, r5, r6, lr}
 8010626:	4e0d      	ldr	r6, [pc, #52]	; (801065c <__libc_init_array+0x38>)
 8010628:	4c0d      	ldr	r4, [pc, #52]	; (8010660 <__libc_init_array+0x3c>)
 801062a:	1ba4      	subs	r4, r4, r6
 801062c:	10a4      	asrs	r4, r4, #2
 801062e:	2500      	movs	r5, #0
 8010630:	42a5      	cmp	r5, r4
 8010632:	d109      	bne.n	8010648 <__libc_init_array+0x24>
 8010634:	4e0b      	ldr	r6, [pc, #44]	; (8010664 <__libc_init_array+0x40>)
 8010636:	4c0c      	ldr	r4, [pc, #48]	; (8010668 <__libc_init_array+0x44>)
 8010638:	f001 faa8 	bl	8011b8c <_init>
 801063c:	1ba4      	subs	r4, r4, r6
 801063e:	10a4      	asrs	r4, r4, #2
 8010640:	2500      	movs	r5, #0
 8010642:	42a5      	cmp	r5, r4
 8010644:	d105      	bne.n	8010652 <__libc_init_array+0x2e>
 8010646:	bd70      	pop	{r4, r5, r6, pc}
 8010648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801064c:	4798      	blx	r3
 801064e:	3501      	adds	r5, #1
 8010650:	e7ee      	b.n	8010630 <__libc_init_array+0xc>
 8010652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010656:	4798      	blx	r3
 8010658:	3501      	adds	r5, #1
 801065a:	e7f2      	b.n	8010642 <__libc_init_array+0x1e>
 801065c:	08013390 	.word	0x08013390
 8010660:	08013390 	.word	0x08013390
 8010664:	08013390 	.word	0x08013390
 8010668:	08013394 	.word	0x08013394

0801066c <__locale_ctype_ptr_l>:
 801066c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010670:	4770      	bx	lr
	...

08010674 <__locale_ctype_ptr>:
 8010674:	4b04      	ldr	r3, [pc, #16]	; (8010688 <__locale_ctype_ptr+0x14>)
 8010676:	4a05      	ldr	r2, [pc, #20]	; (801068c <__locale_ctype_ptr+0x18>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	2b00      	cmp	r3, #0
 801067e:	bf08      	it	eq
 8010680:	4613      	moveq	r3, r2
 8010682:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010686:	4770      	bx	lr
 8010688:	200002c8 	.word	0x200002c8
 801068c:	2000032c 	.word	0x2000032c

08010690 <__ascii_mbtowc>:
 8010690:	b082      	sub	sp, #8
 8010692:	b901      	cbnz	r1, 8010696 <__ascii_mbtowc+0x6>
 8010694:	a901      	add	r1, sp, #4
 8010696:	b142      	cbz	r2, 80106aa <__ascii_mbtowc+0x1a>
 8010698:	b14b      	cbz	r3, 80106ae <__ascii_mbtowc+0x1e>
 801069a:	7813      	ldrb	r3, [r2, #0]
 801069c:	600b      	str	r3, [r1, #0]
 801069e:	7812      	ldrb	r2, [r2, #0]
 80106a0:	1c10      	adds	r0, r2, #0
 80106a2:	bf18      	it	ne
 80106a4:	2001      	movne	r0, #1
 80106a6:	b002      	add	sp, #8
 80106a8:	4770      	bx	lr
 80106aa:	4610      	mov	r0, r2
 80106ac:	e7fb      	b.n	80106a6 <__ascii_mbtowc+0x16>
 80106ae:	f06f 0001 	mvn.w	r0, #1
 80106b2:	e7f8      	b.n	80106a6 <__ascii_mbtowc+0x16>

080106b4 <memcmp>:
 80106b4:	b530      	push	{r4, r5, lr}
 80106b6:	2400      	movs	r4, #0
 80106b8:	42a2      	cmp	r2, r4
 80106ba:	d101      	bne.n	80106c0 <memcmp+0xc>
 80106bc:	2000      	movs	r0, #0
 80106be:	e007      	b.n	80106d0 <memcmp+0x1c>
 80106c0:	5d03      	ldrb	r3, [r0, r4]
 80106c2:	3401      	adds	r4, #1
 80106c4:	190d      	adds	r5, r1, r4
 80106c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80106ca:	42ab      	cmp	r3, r5
 80106cc:	d0f4      	beq.n	80106b8 <memcmp+0x4>
 80106ce:	1b58      	subs	r0, r3, r5
 80106d0:	bd30      	pop	{r4, r5, pc}

080106d2 <memcpy>:
 80106d2:	b510      	push	{r4, lr}
 80106d4:	1e43      	subs	r3, r0, #1
 80106d6:	440a      	add	r2, r1
 80106d8:	4291      	cmp	r1, r2
 80106da:	d100      	bne.n	80106de <memcpy+0xc>
 80106dc:	bd10      	pop	{r4, pc}
 80106de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106e6:	e7f7      	b.n	80106d8 <memcpy+0x6>

080106e8 <memset>:
 80106e8:	4402      	add	r2, r0
 80106ea:	4603      	mov	r3, r0
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d100      	bne.n	80106f2 <memset+0xa>
 80106f0:	4770      	bx	lr
 80106f2:	f803 1b01 	strb.w	r1, [r3], #1
 80106f6:	e7f9      	b.n	80106ec <memset+0x4>

080106f8 <__sfputc_r>:
 80106f8:	6893      	ldr	r3, [r2, #8]
 80106fa:	3b01      	subs	r3, #1
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	b410      	push	{r4}
 8010700:	6093      	str	r3, [r2, #8]
 8010702:	da08      	bge.n	8010716 <__sfputc_r+0x1e>
 8010704:	6994      	ldr	r4, [r2, #24]
 8010706:	42a3      	cmp	r3, r4
 8010708:	db01      	blt.n	801070e <__sfputc_r+0x16>
 801070a:	290a      	cmp	r1, #10
 801070c:	d103      	bne.n	8010716 <__sfputc_r+0x1e>
 801070e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010712:	f000 bc3b 	b.w	8010f8c <__swbuf_r>
 8010716:	6813      	ldr	r3, [r2, #0]
 8010718:	1c58      	adds	r0, r3, #1
 801071a:	6010      	str	r0, [r2, #0]
 801071c:	7019      	strb	r1, [r3, #0]
 801071e:	4608      	mov	r0, r1
 8010720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010724:	4770      	bx	lr

08010726 <__sfputs_r>:
 8010726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010728:	4606      	mov	r6, r0
 801072a:	460f      	mov	r7, r1
 801072c:	4614      	mov	r4, r2
 801072e:	18d5      	adds	r5, r2, r3
 8010730:	42ac      	cmp	r4, r5
 8010732:	d101      	bne.n	8010738 <__sfputs_r+0x12>
 8010734:	2000      	movs	r0, #0
 8010736:	e007      	b.n	8010748 <__sfputs_r+0x22>
 8010738:	463a      	mov	r2, r7
 801073a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073e:	4630      	mov	r0, r6
 8010740:	f7ff ffda 	bl	80106f8 <__sfputc_r>
 8010744:	1c43      	adds	r3, r0, #1
 8010746:	d1f3      	bne.n	8010730 <__sfputs_r+0xa>
 8010748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801074c <_vfiprintf_r>:
 801074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010750:	460c      	mov	r4, r1
 8010752:	b09d      	sub	sp, #116	; 0x74
 8010754:	4617      	mov	r7, r2
 8010756:	461d      	mov	r5, r3
 8010758:	4606      	mov	r6, r0
 801075a:	b118      	cbz	r0, 8010764 <_vfiprintf_r+0x18>
 801075c:	6983      	ldr	r3, [r0, #24]
 801075e:	b90b      	cbnz	r3, 8010764 <_vfiprintf_r+0x18>
 8010760:	f000 fdda 	bl	8011318 <__sinit>
 8010764:	4b7c      	ldr	r3, [pc, #496]	; (8010958 <_vfiprintf_r+0x20c>)
 8010766:	429c      	cmp	r4, r3
 8010768:	d158      	bne.n	801081c <_vfiprintf_r+0xd0>
 801076a:	6874      	ldr	r4, [r6, #4]
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	0718      	lsls	r0, r3, #28
 8010770:	d55e      	bpl.n	8010830 <_vfiprintf_r+0xe4>
 8010772:	6923      	ldr	r3, [r4, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d05b      	beq.n	8010830 <_vfiprintf_r+0xe4>
 8010778:	2300      	movs	r3, #0
 801077a:	9309      	str	r3, [sp, #36]	; 0x24
 801077c:	2320      	movs	r3, #32
 801077e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010782:	2330      	movs	r3, #48	; 0x30
 8010784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010788:	9503      	str	r5, [sp, #12]
 801078a:	f04f 0b01 	mov.w	fp, #1
 801078e:	46b8      	mov	r8, r7
 8010790:	4645      	mov	r5, r8
 8010792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010796:	b10b      	cbz	r3, 801079c <_vfiprintf_r+0x50>
 8010798:	2b25      	cmp	r3, #37	; 0x25
 801079a:	d154      	bne.n	8010846 <_vfiprintf_r+0xfa>
 801079c:	ebb8 0a07 	subs.w	sl, r8, r7
 80107a0:	d00b      	beq.n	80107ba <_vfiprintf_r+0x6e>
 80107a2:	4653      	mov	r3, sl
 80107a4:	463a      	mov	r2, r7
 80107a6:	4621      	mov	r1, r4
 80107a8:	4630      	mov	r0, r6
 80107aa:	f7ff ffbc 	bl	8010726 <__sfputs_r>
 80107ae:	3001      	adds	r0, #1
 80107b0:	f000 80c2 	beq.w	8010938 <_vfiprintf_r+0x1ec>
 80107b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b6:	4453      	add	r3, sl
 80107b8:	9309      	str	r3, [sp, #36]	; 0x24
 80107ba:	f898 3000 	ldrb.w	r3, [r8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f000 80ba 	beq.w	8010938 <_vfiprintf_r+0x1ec>
 80107c4:	2300      	movs	r3, #0
 80107c6:	f04f 32ff 	mov.w	r2, #4294967295
 80107ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107ce:	9304      	str	r3, [sp, #16]
 80107d0:	9307      	str	r3, [sp, #28]
 80107d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107d6:	931a      	str	r3, [sp, #104]	; 0x68
 80107d8:	46a8      	mov	r8, r5
 80107da:	2205      	movs	r2, #5
 80107dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80107e0:	485e      	ldr	r0, [pc, #376]	; (801095c <_vfiprintf_r+0x210>)
 80107e2:	f7ef fd0d 	bl	8000200 <memchr>
 80107e6:	9b04      	ldr	r3, [sp, #16]
 80107e8:	bb78      	cbnz	r0, 801084a <_vfiprintf_r+0xfe>
 80107ea:	06d9      	lsls	r1, r3, #27
 80107ec:	bf44      	itt	mi
 80107ee:	2220      	movmi	r2, #32
 80107f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80107f4:	071a      	lsls	r2, r3, #28
 80107f6:	bf44      	itt	mi
 80107f8:	222b      	movmi	r2, #43	; 0x2b
 80107fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80107fe:	782a      	ldrb	r2, [r5, #0]
 8010800:	2a2a      	cmp	r2, #42	; 0x2a
 8010802:	d02a      	beq.n	801085a <_vfiprintf_r+0x10e>
 8010804:	9a07      	ldr	r2, [sp, #28]
 8010806:	46a8      	mov	r8, r5
 8010808:	2000      	movs	r0, #0
 801080a:	250a      	movs	r5, #10
 801080c:	4641      	mov	r1, r8
 801080e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010812:	3b30      	subs	r3, #48	; 0x30
 8010814:	2b09      	cmp	r3, #9
 8010816:	d969      	bls.n	80108ec <_vfiprintf_r+0x1a0>
 8010818:	b360      	cbz	r0, 8010874 <_vfiprintf_r+0x128>
 801081a:	e024      	b.n	8010866 <_vfiprintf_r+0x11a>
 801081c:	4b50      	ldr	r3, [pc, #320]	; (8010960 <_vfiprintf_r+0x214>)
 801081e:	429c      	cmp	r4, r3
 8010820:	d101      	bne.n	8010826 <_vfiprintf_r+0xda>
 8010822:	68b4      	ldr	r4, [r6, #8]
 8010824:	e7a2      	b.n	801076c <_vfiprintf_r+0x20>
 8010826:	4b4f      	ldr	r3, [pc, #316]	; (8010964 <_vfiprintf_r+0x218>)
 8010828:	429c      	cmp	r4, r3
 801082a:	bf08      	it	eq
 801082c:	68f4      	ldreq	r4, [r6, #12]
 801082e:	e79d      	b.n	801076c <_vfiprintf_r+0x20>
 8010830:	4621      	mov	r1, r4
 8010832:	4630      	mov	r0, r6
 8010834:	f000 fc0a 	bl	801104c <__swsetup_r>
 8010838:	2800      	cmp	r0, #0
 801083a:	d09d      	beq.n	8010778 <_vfiprintf_r+0x2c>
 801083c:	f04f 30ff 	mov.w	r0, #4294967295
 8010840:	b01d      	add	sp, #116	; 0x74
 8010842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010846:	46a8      	mov	r8, r5
 8010848:	e7a2      	b.n	8010790 <_vfiprintf_r+0x44>
 801084a:	4a44      	ldr	r2, [pc, #272]	; (801095c <_vfiprintf_r+0x210>)
 801084c:	1a80      	subs	r0, r0, r2
 801084e:	fa0b f000 	lsl.w	r0, fp, r0
 8010852:	4318      	orrs	r0, r3
 8010854:	9004      	str	r0, [sp, #16]
 8010856:	4645      	mov	r5, r8
 8010858:	e7be      	b.n	80107d8 <_vfiprintf_r+0x8c>
 801085a:	9a03      	ldr	r2, [sp, #12]
 801085c:	1d11      	adds	r1, r2, #4
 801085e:	6812      	ldr	r2, [r2, #0]
 8010860:	9103      	str	r1, [sp, #12]
 8010862:	2a00      	cmp	r2, #0
 8010864:	db01      	blt.n	801086a <_vfiprintf_r+0x11e>
 8010866:	9207      	str	r2, [sp, #28]
 8010868:	e004      	b.n	8010874 <_vfiprintf_r+0x128>
 801086a:	4252      	negs	r2, r2
 801086c:	f043 0302 	orr.w	r3, r3, #2
 8010870:	9207      	str	r2, [sp, #28]
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	f898 3000 	ldrb.w	r3, [r8]
 8010878:	2b2e      	cmp	r3, #46	; 0x2e
 801087a:	d10e      	bne.n	801089a <_vfiprintf_r+0x14e>
 801087c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010880:	2b2a      	cmp	r3, #42	; 0x2a
 8010882:	d138      	bne.n	80108f6 <_vfiprintf_r+0x1aa>
 8010884:	9b03      	ldr	r3, [sp, #12]
 8010886:	1d1a      	adds	r2, r3, #4
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	9203      	str	r2, [sp, #12]
 801088c:	2b00      	cmp	r3, #0
 801088e:	bfb8      	it	lt
 8010890:	f04f 33ff 	movlt.w	r3, #4294967295
 8010894:	f108 0802 	add.w	r8, r8, #2
 8010898:	9305      	str	r3, [sp, #20]
 801089a:	4d33      	ldr	r5, [pc, #204]	; (8010968 <_vfiprintf_r+0x21c>)
 801089c:	f898 1000 	ldrb.w	r1, [r8]
 80108a0:	2203      	movs	r2, #3
 80108a2:	4628      	mov	r0, r5
 80108a4:	f7ef fcac 	bl	8000200 <memchr>
 80108a8:	b140      	cbz	r0, 80108bc <_vfiprintf_r+0x170>
 80108aa:	2340      	movs	r3, #64	; 0x40
 80108ac:	1b40      	subs	r0, r0, r5
 80108ae:	fa03 f000 	lsl.w	r0, r3, r0
 80108b2:	9b04      	ldr	r3, [sp, #16]
 80108b4:	4303      	orrs	r3, r0
 80108b6:	f108 0801 	add.w	r8, r8, #1
 80108ba:	9304      	str	r3, [sp, #16]
 80108bc:	f898 1000 	ldrb.w	r1, [r8]
 80108c0:	482a      	ldr	r0, [pc, #168]	; (801096c <_vfiprintf_r+0x220>)
 80108c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108c6:	2206      	movs	r2, #6
 80108c8:	f108 0701 	add.w	r7, r8, #1
 80108cc:	f7ef fc98 	bl	8000200 <memchr>
 80108d0:	2800      	cmp	r0, #0
 80108d2:	d037      	beq.n	8010944 <_vfiprintf_r+0x1f8>
 80108d4:	4b26      	ldr	r3, [pc, #152]	; (8010970 <_vfiprintf_r+0x224>)
 80108d6:	bb1b      	cbnz	r3, 8010920 <_vfiprintf_r+0x1d4>
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	3307      	adds	r3, #7
 80108dc:	f023 0307 	bic.w	r3, r3, #7
 80108e0:	3308      	adds	r3, #8
 80108e2:	9303      	str	r3, [sp, #12]
 80108e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108e6:	444b      	add	r3, r9
 80108e8:	9309      	str	r3, [sp, #36]	; 0x24
 80108ea:	e750      	b.n	801078e <_vfiprintf_r+0x42>
 80108ec:	fb05 3202 	mla	r2, r5, r2, r3
 80108f0:	2001      	movs	r0, #1
 80108f2:	4688      	mov	r8, r1
 80108f4:	e78a      	b.n	801080c <_vfiprintf_r+0xc0>
 80108f6:	2300      	movs	r3, #0
 80108f8:	f108 0801 	add.w	r8, r8, #1
 80108fc:	9305      	str	r3, [sp, #20]
 80108fe:	4619      	mov	r1, r3
 8010900:	250a      	movs	r5, #10
 8010902:	4640      	mov	r0, r8
 8010904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010908:	3a30      	subs	r2, #48	; 0x30
 801090a:	2a09      	cmp	r2, #9
 801090c:	d903      	bls.n	8010916 <_vfiprintf_r+0x1ca>
 801090e:	2b00      	cmp	r3, #0
 8010910:	d0c3      	beq.n	801089a <_vfiprintf_r+0x14e>
 8010912:	9105      	str	r1, [sp, #20]
 8010914:	e7c1      	b.n	801089a <_vfiprintf_r+0x14e>
 8010916:	fb05 2101 	mla	r1, r5, r1, r2
 801091a:	2301      	movs	r3, #1
 801091c:	4680      	mov	r8, r0
 801091e:	e7f0      	b.n	8010902 <_vfiprintf_r+0x1b6>
 8010920:	ab03      	add	r3, sp, #12
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	4622      	mov	r2, r4
 8010926:	4b13      	ldr	r3, [pc, #76]	; (8010974 <_vfiprintf_r+0x228>)
 8010928:	a904      	add	r1, sp, #16
 801092a:	4630      	mov	r0, r6
 801092c:	f3af 8000 	nop.w
 8010930:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010934:	4681      	mov	r9, r0
 8010936:	d1d5      	bne.n	80108e4 <_vfiprintf_r+0x198>
 8010938:	89a3      	ldrh	r3, [r4, #12]
 801093a:	065b      	lsls	r3, r3, #25
 801093c:	f53f af7e 	bmi.w	801083c <_vfiprintf_r+0xf0>
 8010940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010942:	e77d      	b.n	8010840 <_vfiprintf_r+0xf4>
 8010944:	ab03      	add	r3, sp, #12
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	4622      	mov	r2, r4
 801094a:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <_vfiprintf_r+0x228>)
 801094c:	a904      	add	r1, sp, #16
 801094e:	4630      	mov	r0, r6
 8010950:	f000 f888 	bl	8010a64 <_printf_i>
 8010954:	e7ec      	b.n	8010930 <_vfiprintf_r+0x1e4>
 8010956:	bf00      	nop
 8010958:	08013348 	.word	0x08013348
 801095c:	080131f2 	.word	0x080131f2
 8010960:	08013368 	.word	0x08013368
 8010964:	08013328 	.word	0x08013328
 8010968:	080131f8 	.word	0x080131f8
 801096c:	080131fc 	.word	0x080131fc
 8010970:	00000000 	.word	0x00000000
 8010974:	08010727 	.word	0x08010727

08010978 <_printf_common>:
 8010978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801097c:	4691      	mov	r9, r2
 801097e:	461f      	mov	r7, r3
 8010980:	688a      	ldr	r2, [r1, #8]
 8010982:	690b      	ldr	r3, [r1, #16]
 8010984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010988:	4293      	cmp	r3, r2
 801098a:	bfb8      	it	lt
 801098c:	4613      	movlt	r3, r2
 801098e:	f8c9 3000 	str.w	r3, [r9]
 8010992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010996:	4606      	mov	r6, r0
 8010998:	460c      	mov	r4, r1
 801099a:	b112      	cbz	r2, 80109a2 <_printf_common+0x2a>
 801099c:	3301      	adds	r3, #1
 801099e:	f8c9 3000 	str.w	r3, [r9]
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	0699      	lsls	r1, r3, #26
 80109a6:	bf42      	ittt	mi
 80109a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80109ac:	3302      	addmi	r3, #2
 80109ae:	f8c9 3000 	strmi.w	r3, [r9]
 80109b2:	6825      	ldr	r5, [r4, #0]
 80109b4:	f015 0506 	ands.w	r5, r5, #6
 80109b8:	d107      	bne.n	80109ca <_printf_common+0x52>
 80109ba:	f104 0a19 	add.w	sl, r4, #25
 80109be:	68e3      	ldr	r3, [r4, #12]
 80109c0:	f8d9 2000 	ldr.w	r2, [r9]
 80109c4:	1a9b      	subs	r3, r3, r2
 80109c6:	42ab      	cmp	r3, r5
 80109c8:	dc28      	bgt.n	8010a1c <_printf_common+0xa4>
 80109ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80109ce:	6822      	ldr	r2, [r4, #0]
 80109d0:	3300      	adds	r3, #0
 80109d2:	bf18      	it	ne
 80109d4:	2301      	movne	r3, #1
 80109d6:	0692      	lsls	r2, r2, #26
 80109d8:	d42d      	bmi.n	8010a36 <_printf_common+0xbe>
 80109da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109de:	4639      	mov	r1, r7
 80109e0:	4630      	mov	r0, r6
 80109e2:	47c0      	blx	r8
 80109e4:	3001      	adds	r0, #1
 80109e6:	d020      	beq.n	8010a2a <_printf_common+0xb2>
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	68e5      	ldr	r5, [r4, #12]
 80109ec:	f8d9 2000 	ldr.w	r2, [r9]
 80109f0:	f003 0306 	and.w	r3, r3, #6
 80109f4:	2b04      	cmp	r3, #4
 80109f6:	bf08      	it	eq
 80109f8:	1aad      	subeq	r5, r5, r2
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	6922      	ldr	r2, [r4, #16]
 80109fe:	bf0c      	ite	eq
 8010a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a04:	2500      	movne	r5, #0
 8010a06:	4293      	cmp	r3, r2
 8010a08:	bfc4      	itt	gt
 8010a0a:	1a9b      	subgt	r3, r3, r2
 8010a0c:	18ed      	addgt	r5, r5, r3
 8010a0e:	f04f 0900 	mov.w	r9, #0
 8010a12:	341a      	adds	r4, #26
 8010a14:	454d      	cmp	r5, r9
 8010a16:	d11a      	bne.n	8010a4e <_printf_common+0xd6>
 8010a18:	2000      	movs	r0, #0
 8010a1a:	e008      	b.n	8010a2e <_printf_common+0xb6>
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	4652      	mov	r2, sl
 8010a20:	4639      	mov	r1, r7
 8010a22:	4630      	mov	r0, r6
 8010a24:	47c0      	blx	r8
 8010a26:	3001      	adds	r0, #1
 8010a28:	d103      	bne.n	8010a32 <_printf_common+0xba>
 8010a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a32:	3501      	adds	r5, #1
 8010a34:	e7c3      	b.n	80109be <_printf_common+0x46>
 8010a36:	18e1      	adds	r1, r4, r3
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	2030      	movs	r0, #48	; 0x30
 8010a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a40:	4422      	add	r2, r4
 8010a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a4a:	3302      	adds	r3, #2
 8010a4c:	e7c5      	b.n	80109da <_printf_common+0x62>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	4622      	mov	r2, r4
 8010a52:	4639      	mov	r1, r7
 8010a54:	4630      	mov	r0, r6
 8010a56:	47c0      	blx	r8
 8010a58:	3001      	adds	r0, #1
 8010a5a:	d0e6      	beq.n	8010a2a <_printf_common+0xb2>
 8010a5c:	f109 0901 	add.w	r9, r9, #1
 8010a60:	e7d8      	b.n	8010a14 <_printf_common+0x9c>
	...

08010a64 <_printf_i>:
 8010a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010a6c:	460c      	mov	r4, r1
 8010a6e:	7e09      	ldrb	r1, [r1, #24]
 8010a70:	b085      	sub	sp, #20
 8010a72:	296e      	cmp	r1, #110	; 0x6e
 8010a74:	4617      	mov	r7, r2
 8010a76:	4606      	mov	r6, r0
 8010a78:	4698      	mov	r8, r3
 8010a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a7c:	f000 80b3 	beq.w	8010be6 <_printf_i+0x182>
 8010a80:	d822      	bhi.n	8010ac8 <_printf_i+0x64>
 8010a82:	2963      	cmp	r1, #99	; 0x63
 8010a84:	d036      	beq.n	8010af4 <_printf_i+0x90>
 8010a86:	d80a      	bhi.n	8010a9e <_printf_i+0x3a>
 8010a88:	2900      	cmp	r1, #0
 8010a8a:	f000 80b9 	beq.w	8010c00 <_printf_i+0x19c>
 8010a8e:	2958      	cmp	r1, #88	; 0x58
 8010a90:	f000 8083 	beq.w	8010b9a <_printf_i+0x136>
 8010a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010a9c:	e032      	b.n	8010b04 <_printf_i+0xa0>
 8010a9e:	2964      	cmp	r1, #100	; 0x64
 8010aa0:	d001      	beq.n	8010aa6 <_printf_i+0x42>
 8010aa2:	2969      	cmp	r1, #105	; 0x69
 8010aa4:	d1f6      	bne.n	8010a94 <_printf_i+0x30>
 8010aa6:	6820      	ldr	r0, [r4, #0]
 8010aa8:	6813      	ldr	r3, [r2, #0]
 8010aaa:	0605      	lsls	r5, r0, #24
 8010aac:	f103 0104 	add.w	r1, r3, #4
 8010ab0:	d52a      	bpl.n	8010b08 <_printf_i+0xa4>
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	6011      	str	r1, [r2, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	da03      	bge.n	8010ac2 <_printf_i+0x5e>
 8010aba:	222d      	movs	r2, #45	; 0x2d
 8010abc:	425b      	negs	r3, r3
 8010abe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010ac2:	486f      	ldr	r0, [pc, #444]	; (8010c80 <_printf_i+0x21c>)
 8010ac4:	220a      	movs	r2, #10
 8010ac6:	e039      	b.n	8010b3c <_printf_i+0xd8>
 8010ac8:	2973      	cmp	r1, #115	; 0x73
 8010aca:	f000 809d 	beq.w	8010c08 <_printf_i+0x1a4>
 8010ace:	d808      	bhi.n	8010ae2 <_printf_i+0x7e>
 8010ad0:	296f      	cmp	r1, #111	; 0x6f
 8010ad2:	d020      	beq.n	8010b16 <_printf_i+0xb2>
 8010ad4:	2970      	cmp	r1, #112	; 0x70
 8010ad6:	d1dd      	bne.n	8010a94 <_printf_i+0x30>
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	f043 0320 	orr.w	r3, r3, #32
 8010ade:	6023      	str	r3, [r4, #0]
 8010ae0:	e003      	b.n	8010aea <_printf_i+0x86>
 8010ae2:	2975      	cmp	r1, #117	; 0x75
 8010ae4:	d017      	beq.n	8010b16 <_printf_i+0xb2>
 8010ae6:	2978      	cmp	r1, #120	; 0x78
 8010ae8:	d1d4      	bne.n	8010a94 <_printf_i+0x30>
 8010aea:	2378      	movs	r3, #120	; 0x78
 8010aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010af0:	4864      	ldr	r0, [pc, #400]	; (8010c84 <_printf_i+0x220>)
 8010af2:	e055      	b.n	8010ba0 <_printf_i+0x13c>
 8010af4:	6813      	ldr	r3, [r2, #0]
 8010af6:	1d19      	adds	r1, r3, #4
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	6011      	str	r1, [r2, #0]
 8010afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b04:	2301      	movs	r3, #1
 8010b06:	e08c      	b.n	8010c22 <_printf_i+0x1be>
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	6011      	str	r1, [r2, #0]
 8010b0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b10:	bf18      	it	ne
 8010b12:	b21b      	sxthne	r3, r3
 8010b14:	e7cf      	b.n	8010ab6 <_printf_i+0x52>
 8010b16:	6813      	ldr	r3, [r2, #0]
 8010b18:	6825      	ldr	r5, [r4, #0]
 8010b1a:	1d18      	adds	r0, r3, #4
 8010b1c:	6010      	str	r0, [r2, #0]
 8010b1e:	0628      	lsls	r0, r5, #24
 8010b20:	d501      	bpl.n	8010b26 <_printf_i+0xc2>
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	e002      	b.n	8010b2c <_printf_i+0xc8>
 8010b26:	0668      	lsls	r0, r5, #25
 8010b28:	d5fb      	bpl.n	8010b22 <_printf_i+0xbe>
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	4854      	ldr	r0, [pc, #336]	; (8010c80 <_printf_i+0x21c>)
 8010b2e:	296f      	cmp	r1, #111	; 0x6f
 8010b30:	bf14      	ite	ne
 8010b32:	220a      	movne	r2, #10
 8010b34:	2208      	moveq	r2, #8
 8010b36:	2100      	movs	r1, #0
 8010b38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b3c:	6865      	ldr	r5, [r4, #4]
 8010b3e:	60a5      	str	r5, [r4, #8]
 8010b40:	2d00      	cmp	r5, #0
 8010b42:	f2c0 8095 	blt.w	8010c70 <_printf_i+0x20c>
 8010b46:	6821      	ldr	r1, [r4, #0]
 8010b48:	f021 0104 	bic.w	r1, r1, #4
 8010b4c:	6021      	str	r1, [r4, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d13d      	bne.n	8010bce <_printf_i+0x16a>
 8010b52:	2d00      	cmp	r5, #0
 8010b54:	f040 808e 	bne.w	8010c74 <_printf_i+0x210>
 8010b58:	4665      	mov	r5, ip
 8010b5a:	2a08      	cmp	r2, #8
 8010b5c:	d10b      	bne.n	8010b76 <_printf_i+0x112>
 8010b5e:	6823      	ldr	r3, [r4, #0]
 8010b60:	07db      	lsls	r3, r3, #31
 8010b62:	d508      	bpl.n	8010b76 <_printf_i+0x112>
 8010b64:	6923      	ldr	r3, [r4, #16]
 8010b66:	6862      	ldr	r2, [r4, #4]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	bfde      	ittt	le
 8010b6c:	2330      	movle	r3, #48	; 0x30
 8010b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b76:	ebac 0305 	sub.w	r3, ip, r5
 8010b7a:	6123      	str	r3, [r4, #16]
 8010b7c:	f8cd 8000 	str.w	r8, [sp]
 8010b80:	463b      	mov	r3, r7
 8010b82:	aa03      	add	r2, sp, #12
 8010b84:	4621      	mov	r1, r4
 8010b86:	4630      	mov	r0, r6
 8010b88:	f7ff fef6 	bl	8010978 <_printf_common>
 8010b8c:	3001      	adds	r0, #1
 8010b8e:	d14d      	bne.n	8010c2c <_printf_i+0x1c8>
 8010b90:	f04f 30ff 	mov.w	r0, #4294967295
 8010b94:	b005      	add	sp, #20
 8010b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b9a:	4839      	ldr	r0, [pc, #228]	; (8010c80 <_printf_i+0x21c>)
 8010b9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010ba0:	6813      	ldr	r3, [r2, #0]
 8010ba2:	6821      	ldr	r1, [r4, #0]
 8010ba4:	1d1d      	adds	r5, r3, #4
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	6015      	str	r5, [r2, #0]
 8010baa:	060a      	lsls	r2, r1, #24
 8010bac:	d50b      	bpl.n	8010bc6 <_printf_i+0x162>
 8010bae:	07ca      	lsls	r2, r1, #31
 8010bb0:	bf44      	itt	mi
 8010bb2:	f041 0120 	orrmi.w	r1, r1, #32
 8010bb6:	6021      	strmi	r1, [r4, #0]
 8010bb8:	b91b      	cbnz	r3, 8010bc2 <_printf_i+0x15e>
 8010bba:	6822      	ldr	r2, [r4, #0]
 8010bbc:	f022 0220 	bic.w	r2, r2, #32
 8010bc0:	6022      	str	r2, [r4, #0]
 8010bc2:	2210      	movs	r2, #16
 8010bc4:	e7b7      	b.n	8010b36 <_printf_i+0xd2>
 8010bc6:	064d      	lsls	r5, r1, #25
 8010bc8:	bf48      	it	mi
 8010bca:	b29b      	uxthmi	r3, r3
 8010bcc:	e7ef      	b.n	8010bae <_printf_i+0x14a>
 8010bce:	4665      	mov	r5, ip
 8010bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bd4:	fb02 3311 	mls	r3, r2, r1, r3
 8010bd8:	5cc3      	ldrb	r3, [r0, r3]
 8010bda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010bde:	460b      	mov	r3, r1
 8010be0:	2900      	cmp	r1, #0
 8010be2:	d1f5      	bne.n	8010bd0 <_printf_i+0x16c>
 8010be4:	e7b9      	b.n	8010b5a <_printf_i+0xf6>
 8010be6:	6813      	ldr	r3, [r2, #0]
 8010be8:	6825      	ldr	r5, [r4, #0]
 8010bea:	6961      	ldr	r1, [r4, #20]
 8010bec:	1d18      	adds	r0, r3, #4
 8010bee:	6010      	str	r0, [r2, #0]
 8010bf0:	0628      	lsls	r0, r5, #24
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	d501      	bpl.n	8010bfa <_printf_i+0x196>
 8010bf6:	6019      	str	r1, [r3, #0]
 8010bf8:	e002      	b.n	8010c00 <_printf_i+0x19c>
 8010bfa:	066a      	lsls	r2, r5, #25
 8010bfc:	d5fb      	bpl.n	8010bf6 <_printf_i+0x192>
 8010bfe:	8019      	strh	r1, [r3, #0]
 8010c00:	2300      	movs	r3, #0
 8010c02:	6123      	str	r3, [r4, #16]
 8010c04:	4665      	mov	r5, ip
 8010c06:	e7b9      	b.n	8010b7c <_printf_i+0x118>
 8010c08:	6813      	ldr	r3, [r2, #0]
 8010c0a:	1d19      	adds	r1, r3, #4
 8010c0c:	6011      	str	r1, [r2, #0]
 8010c0e:	681d      	ldr	r5, [r3, #0]
 8010c10:	6862      	ldr	r2, [r4, #4]
 8010c12:	2100      	movs	r1, #0
 8010c14:	4628      	mov	r0, r5
 8010c16:	f7ef faf3 	bl	8000200 <memchr>
 8010c1a:	b108      	cbz	r0, 8010c20 <_printf_i+0x1bc>
 8010c1c:	1b40      	subs	r0, r0, r5
 8010c1e:	6060      	str	r0, [r4, #4]
 8010c20:	6863      	ldr	r3, [r4, #4]
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	2300      	movs	r3, #0
 8010c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c2a:	e7a7      	b.n	8010b7c <_printf_i+0x118>
 8010c2c:	6923      	ldr	r3, [r4, #16]
 8010c2e:	462a      	mov	r2, r5
 8010c30:	4639      	mov	r1, r7
 8010c32:	4630      	mov	r0, r6
 8010c34:	47c0      	blx	r8
 8010c36:	3001      	adds	r0, #1
 8010c38:	d0aa      	beq.n	8010b90 <_printf_i+0x12c>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	079b      	lsls	r3, r3, #30
 8010c3e:	d413      	bmi.n	8010c68 <_printf_i+0x204>
 8010c40:	68e0      	ldr	r0, [r4, #12]
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	4298      	cmp	r0, r3
 8010c46:	bfb8      	it	lt
 8010c48:	4618      	movlt	r0, r3
 8010c4a:	e7a3      	b.n	8010b94 <_printf_i+0x130>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	464a      	mov	r2, r9
 8010c50:	4639      	mov	r1, r7
 8010c52:	4630      	mov	r0, r6
 8010c54:	47c0      	blx	r8
 8010c56:	3001      	adds	r0, #1
 8010c58:	d09a      	beq.n	8010b90 <_printf_i+0x12c>
 8010c5a:	3501      	adds	r5, #1
 8010c5c:	68e3      	ldr	r3, [r4, #12]
 8010c5e:	9a03      	ldr	r2, [sp, #12]
 8010c60:	1a9b      	subs	r3, r3, r2
 8010c62:	42ab      	cmp	r3, r5
 8010c64:	dcf2      	bgt.n	8010c4c <_printf_i+0x1e8>
 8010c66:	e7eb      	b.n	8010c40 <_printf_i+0x1dc>
 8010c68:	2500      	movs	r5, #0
 8010c6a:	f104 0919 	add.w	r9, r4, #25
 8010c6e:	e7f5      	b.n	8010c5c <_printf_i+0x1f8>
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1ac      	bne.n	8010bce <_printf_i+0x16a>
 8010c74:	7803      	ldrb	r3, [r0, #0]
 8010c76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c7e:	e76c      	b.n	8010b5a <_printf_i+0xf6>
 8010c80:	08013203 	.word	0x08013203
 8010c84:	08013214 	.word	0x08013214

08010c88 <iprintf>:
 8010c88:	b40f      	push	{r0, r1, r2, r3}
 8010c8a:	4b0a      	ldr	r3, [pc, #40]	; (8010cb4 <iprintf+0x2c>)
 8010c8c:	b513      	push	{r0, r1, r4, lr}
 8010c8e:	681c      	ldr	r4, [r3, #0]
 8010c90:	b124      	cbz	r4, 8010c9c <iprintf+0x14>
 8010c92:	69a3      	ldr	r3, [r4, #24]
 8010c94:	b913      	cbnz	r3, 8010c9c <iprintf+0x14>
 8010c96:	4620      	mov	r0, r4
 8010c98:	f000 fb3e 	bl	8011318 <__sinit>
 8010c9c:	ab05      	add	r3, sp, #20
 8010c9e:	9a04      	ldr	r2, [sp, #16]
 8010ca0:	68a1      	ldr	r1, [r4, #8]
 8010ca2:	9301      	str	r3, [sp, #4]
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f7ff fd51 	bl	801074c <_vfiprintf_r>
 8010caa:	b002      	add	sp, #8
 8010cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cb0:	b004      	add	sp, #16
 8010cb2:	4770      	bx	lr
 8010cb4:	200002c8 	.word	0x200002c8

08010cb8 <sniprintf>:
 8010cb8:	b40c      	push	{r2, r3}
 8010cba:	b530      	push	{r4, r5, lr}
 8010cbc:	4b17      	ldr	r3, [pc, #92]	; (8010d1c <sniprintf+0x64>)
 8010cbe:	1e0c      	subs	r4, r1, #0
 8010cc0:	b09d      	sub	sp, #116	; 0x74
 8010cc2:	681d      	ldr	r5, [r3, #0]
 8010cc4:	da08      	bge.n	8010cd8 <sniprintf+0x20>
 8010cc6:	238b      	movs	r3, #139	; 0x8b
 8010cc8:	602b      	str	r3, [r5, #0]
 8010cca:	f04f 30ff 	mov.w	r0, #4294967295
 8010cce:	b01d      	add	sp, #116	; 0x74
 8010cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cd4:	b002      	add	sp, #8
 8010cd6:	4770      	bx	lr
 8010cd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010cdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ce0:	bf14      	ite	ne
 8010ce2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010ce6:	4623      	moveq	r3, r4
 8010ce8:	9304      	str	r3, [sp, #16]
 8010cea:	9307      	str	r3, [sp, #28]
 8010cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cf0:	9002      	str	r0, [sp, #8]
 8010cf2:	9006      	str	r0, [sp, #24]
 8010cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010cf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010cfa:	ab21      	add	r3, sp, #132	; 0x84
 8010cfc:	a902      	add	r1, sp, #8
 8010cfe:	4628      	mov	r0, r5
 8010d00:	9301      	str	r3, [sp, #4]
 8010d02:	f000 fd41 	bl	8011788 <_svfiprintf_r>
 8010d06:	1c43      	adds	r3, r0, #1
 8010d08:	bfbc      	itt	lt
 8010d0a:	238b      	movlt	r3, #139	; 0x8b
 8010d0c:	602b      	strlt	r3, [r5, #0]
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	d0dd      	beq.n	8010cce <sniprintf+0x16>
 8010d12:	9b02      	ldr	r3, [sp, #8]
 8010d14:	2200      	movs	r2, #0
 8010d16:	701a      	strb	r2, [r3, #0]
 8010d18:	e7d9      	b.n	8010cce <sniprintf+0x16>
 8010d1a:	bf00      	nop
 8010d1c:	200002c8 	.word	0x200002c8

08010d20 <strchr>:
 8010d20:	b2c9      	uxtb	r1, r1
 8010d22:	4603      	mov	r3, r0
 8010d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d28:	b11a      	cbz	r2, 8010d32 <strchr+0x12>
 8010d2a:	428a      	cmp	r2, r1
 8010d2c:	d1f9      	bne.n	8010d22 <strchr+0x2>
 8010d2e:	4618      	mov	r0, r3
 8010d30:	4770      	bx	lr
 8010d32:	2900      	cmp	r1, #0
 8010d34:	bf18      	it	ne
 8010d36:	2300      	movne	r3, #0
 8010d38:	e7f9      	b.n	8010d2e <strchr+0xe>

08010d3a <strcpy>:
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d40:	f803 2b01 	strb.w	r2, [r3], #1
 8010d44:	2a00      	cmp	r2, #0
 8010d46:	d1f9      	bne.n	8010d3c <strcpy+0x2>
 8010d48:	4770      	bx	lr

08010d4a <strcspn>:
 8010d4a:	b570      	push	{r4, r5, r6, lr}
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	461a      	mov	r2, r3
 8010d50:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010d54:	b14d      	cbz	r5, 8010d6a <strcspn+0x20>
 8010d56:	1e4c      	subs	r4, r1, #1
 8010d58:	e001      	b.n	8010d5e <strcspn+0x14>
 8010d5a:	42ae      	cmp	r6, r5
 8010d5c:	d005      	beq.n	8010d6a <strcspn+0x20>
 8010d5e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8010d62:	2e00      	cmp	r6, #0
 8010d64:	d1f9      	bne.n	8010d5a <strcspn+0x10>
 8010d66:	4613      	mov	r3, r2
 8010d68:	e7f1      	b.n	8010d4e <strcspn+0x4>
 8010d6a:	1a18      	subs	r0, r3, r0
 8010d6c:	bd70      	pop	{r4, r5, r6, pc}

08010d6e <strspn>:
 8010d6e:	b570      	push	{r4, r5, r6, lr}
 8010d70:	4603      	mov	r3, r0
 8010d72:	461a      	mov	r2, r3
 8010d74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010d78:	b13d      	cbz	r5, 8010d8a <strspn+0x1c>
 8010d7a:	1e4c      	subs	r4, r1, #1
 8010d7c:	e001      	b.n	8010d82 <strspn+0x14>
 8010d7e:	42ae      	cmp	r6, r5
 8010d80:	d005      	beq.n	8010d8e <strspn+0x20>
 8010d82:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8010d86:	2e00      	cmp	r6, #0
 8010d88:	d1f9      	bne.n	8010d7e <strspn+0x10>
 8010d8a:	1a18      	subs	r0, r3, r0
 8010d8c:	bd70      	pop	{r4, r5, r6, pc}
 8010d8e:	4613      	mov	r3, r2
 8010d90:	e7ef      	b.n	8010d72 <strspn+0x4>
	...

08010d94 <strtok>:
 8010d94:	4b13      	ldr	r3, [pc, #76]	; (8010de4 <strtok+0x50>)
 8010d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9a:	681d      	ldr	r5, [r3, #0]
 8010d9c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8010d9e:	4606      	mov	r6, r0
 8010da0:	460f      	mov	r7, r1
 8010da2:	b9b4      	cbnz	r4, 8010dd2 <strtok+0x3e>
 8010da4:	2050      	movs	r0, #80	; 0x50
 8010da6:	f000 fba5 	bl	80114f4 <malloc>
 8010daa:	65a8      	str	r0, [r5, #88]	; 0x58
 8010dac:	e9c0 4400 	strd	r4, r4, [r0]
 8010db0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010db4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010db8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010dbc:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010dc0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010dc4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010dc8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010dcc:	6184      	str	r4, [r0, #24]
 8010dce:	7704      	strb	r4, [r0, #28]
 8010dd0:	6244      	str	r4, [r0, #36]	; 0x24
 8010dd2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dde:	f000 b803 	b.w	8010de8 <__strtok_r>
 8010de2:	bf00      	nop
 8010de4:	200002c8 	.word	0x200002c8

08010de8 <__strtok_r>:
 8010de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dea:	b918      	cbnz	r0, 8010df4 <__strtok_r+0xc>
 8010dec:	6810      	ldr	r0, [r2, #0]
 8010dee:	b908      	cbnz	r0, 8010df4 <__strtok_r+0xc>
 8010df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010df2:	4620      	mov	r0, r4
 8010df4:	4604      	mov	r4, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010dfc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010e00:	b91e      	cbnz	r6, 8010e0a <__strtok_r+0x22>
 8010e02:	b96d      	cbnz	r5, 8010e20 <__strtok_r+0x38>
 8010e04:	6015      	str	r5, [r2, #0]
 8010e06:	4628      	mov	r0, r5
 8010e08:	e7f2      	b.n	8010df0 <__strtok_r+0x8>
 8010e0a:	42b5      	cmp	r5, r6
 8010e0c:	d1f6      	bne.n	8010dfc <__strtok_r+0x14>
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d1ef      	bne.n	8010df2 <__strtok_r+0xa>
 8010e12:	6014      	str	r4, [r2, #0]
 8010e14:	7003      	strb	r3, [r0, #0]
 8010e16:	e7eb      	b.n	8010df0 <__strtok_r+0x8>
 8010e18:	462b      	mov	r3, r5
 8010e1a:	e00d      	b.n	8010e38 <__strtok_r+0x50>
 8010e1c:	b926      	cbnz	r6, 8010e28 <__strtok_r+0x40>
 8010e1e:	461c      	mov	r4, r3
 8010e20:	4623      	mov	r3, r4
 8010e22:	460f      	mov	r7, r1
 8010e24:	f813 5b01 	ldrb.w	r5, [r3], #1
 8010e28:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010e2c:	42b5      	cmp	r5, r6
 8010e2e:	d1f5      	bne.n	8010e1c <__strtok_r+0x34>
 8010e30:	2d00      	cmp	r5, #0
 8010e32:	d0f1      	beq.n	8010e18 <__strtok_r+0x30>
 8010e34:	2100      	movs	r1, #0
 8010e36:	7021      	strb	r1, [r4, #0]
 8010e38:	6013      	str	r3, [r2, #0]
 8010e3a:	e7d9      	b.n	8010df0 <__strtok_r+0x8>

08010e3c <_strtol_l.isra.0>:
 8010e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e40:	4680      	mov	r8, r0
 8010e42:	4689      	mov	r9, r1
 8010e44:	4692      	mov	sl, r2
 8010e46:	461e      	mov	r6, r3
 8010e48:	460f      	mov	r7, r1
 8010e4a:	463d      	mov	r5, r7
 8010e4c:	9808      	ldr	r0, [sp, #32]
 8010e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e52:	f7ff fc0b 	bl	801066c <__locale_ctype_ptr_l>
 8010e56:	4420      	add	r0, r4
 8010e58:	7843      	ldrb	r3, [r0, #1]
 8010e5a:	f013 0308 	ands.w	r3, r3, #8
 8010e5e:	d132      	bne.n	8010ec6 <_strtol_l.isra.0+0x8a>
 8010e60:	2c2d      	cmp	r4, #45	; 0x2d
 8010e62:	d132      	bne.n	8010eca <_strtol_l.isra.0+0x8e>
 8010e64:	787c      	ldrb	r4, [r7, #1]
 8010e66:	1cbd      	adds	r5, r7, #2
 8010e68:	2201      	movs	r2, #1
 8010e6a:	2e00      	cmp	r6, #0
 8010e6c:	d05d      	beq.n	8010f2a <_strtol_l.isra.0+0xee>
 8010e6e:	2e10      	cmp	r6, #16
 8010e70:	d109      	bne.n	8010e86 <_strtol_l.isra.0+0x4a>
 8010e72:	2c30      	cmp	r4, #48	; 0x30
 8010e74:	d107      	bne.n	8010e86 <_strtol_l.isra.0+0x4a>
 8010e76:	782b      	ldrb	r3, [r5, #0]
 8010e78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e7c:	2b58      	cmp	r3, #88	; 0x58
 8010e7e:	d14f      	bne.n	8010f20 <_strtol_l.isra.0+0xe4>
 8010e80:	786c      	ldrb	r4, [r5, #1]
 8010e82:	2610      	movs	r6, #16
 8010e84:	3502      	adds	r5, #2
 8010e86:	2a00      	cmp	r2, #0
 8010e88:	bf14      	ite	ne
 8010e8a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8010e8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8010e92:	2700      	movs	r7, #0
 8010e94:	fbb1 fcf6 	udiv	ip, r1, r6
 8010e98:	4638      	mov	r0, r7
 8010e9a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8010e9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010ea2:	2b09      	cmp	r3, #9
 8010ea4:	d817      	bhi.n	8010ed6 <_strtol_l.isra.0+0x9a>
 8010ea6:	461c      	mov	r4, r3
 8010ea8:	42a6      	cmp	r6, r4
 8010eaa:	dd23      	ble.n	8010ef4 <_strtol_l.isra.0+0xb8>
 8010eac:	1c7b      	adds	r3, r7, #1
 8010eae:	d007      	beq.n	8010ec0 <_strtol_l.isra.0+0x84>
 8010eb0:	4584      	cmp	ip, r0
 8010eb2:	d31c      	bcc.n	8010eee <_strtol_l.isra.0+0xb2>
 8010eb4:	d101      	bne.n	8010eba <_strtol_l.isra.0+0x7e>
 8010eb6:	45a6      	cmp	lr, r4
 8010eb8:	db19      	blt.n	8010eee <_strtol_l.isra.0+0xb2>
 8010eba:	fb00 4006 	mla	r0, r0, r6, r4
 8010ebe:	2701      	movs	r7, #1
 8010ec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ec4:	e7eb      	b.n	8010e9e <_strtol_l.isra.0+0x62>
 8010ec6:	462f      	mov	r7, r5
 8010ec8:	e7bf      	b.n	8010e4a <_strtol_l.isra.0+0xe>
 8010eca:	2c2b      	cmp	r4, #43	; 0x2b
 8010ecc:	bf04      	itt	eq
 8010ece:	1cbd      	addeq	r5, r7, #2
 8010ed0:	787c      	ldrbeq	r4, [r7, #1]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	e7c9      	b.n	8010e6a <_strtol_l.isra.0+0x2e>
 8010ed6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010eda:	2b19      	cmp	r3, #25
 8010edc:	d801      	bhi.n	8010ee2 <_strtol_l.isra.0+0xa6>
 8010ede:	3c37      	subs	r4, #55	; 0x37
 8010ee0:	e7e2      	b.n	8010ea8 <_strtol_l.isra.0+0x6c>
 8010ee2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010ee6:	2b19      	cmp	r3, #25
 8010ee8:	d804      	bhi.n	8010ef4 <_strtol_l.isra.0+0xb8>
 8010eea:	3c57      	subs	r4, #87	; 0x57
 8010eec:	e7dc      	b.n	8010ea8 <_strtol_l.isra.0+0x6c>
 8010eee:	f04f 37ff 	mov.w	r7, #4294967295
 8010ef2:	e7e5      	b.n	8010ec0 <_strtol_l.isra.0+0x84>
 8010ef4:	1c7b      	adds	r3, r7, #1
 8010ef6:	d108      	bne.n	8010f0a <_strtol_l.isra.0+0xce>
 8010ef8:	2322      	movs	r3, #34	; 0x22
 8010efa:	f8c8 3000 	str.w	r3, [r8]
 8010efe:	4608      	mov	r0, r1
 8010f00:	f1ba 0f00 	cmp.w	sl, #0
 8010f04:	d107      	bne.n	8010f16 <_strtol_l.isra.0+0xda>
 8010f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f0a:	b102      	cbz	r2, 8010f0e <_strtol_l.isra.0+0xd2>
 8010f0c:	4240      	negs	r0, r0
 8010f0e:	f1ba 0f00 	cmp.w	sl, #0
 8010f12:	d0f8      	beq.n	8010f06 <_strtol_l.isra.0+0xca>
 8010f14:	b10f      	cbz	r7, 8010f1a <_strtol_l.isra.0+0xde>
 8010f16:	f105 39ff 	add.w	r9, r5, #4294967295
 8010f1a:	f8ca 9000 	str.w	r9, [sl]
 8010f1e:	e7f2      	b.n	8010f06 <_strtol_l.isra.0+0xca>
 8010f20:	2430      	movs	r4, #48	; 0x30
 8010f22:	2e00      	cmp	r6, #0
 8010f24:	d1af      	bne.n	8010e86 <_strtol_l.isra.0+0x4a>
 8010f26:	2608      	movs	r6, #8
 8010f28:	e7ad      	b.n	8010e86 <_strtol_l.isra.0+0x4a>
 8010f2a:	2c30      	cmp	r4, #48	; 0x30
 8010f2c:	d0a3      	beq.n	8010e76 <_strtol_l.isra.0+0x3a>
 8010f2e:	260a      	movs	r6, #10
 8010f30:	e7a9      	b.n	8010e86 <_strtol_l.isra.0+0x4a>
	...

08010f34 <strtol>:
 8010f34:	4b08      	ldr	r3, [pc, #32]	; (8010f58 <strtol+0x24>)
 8010f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f38:	681c      	ldr	r4, [r3, #0]
 8010f3a:	4d08      	ldr	r5, [pc, #32]	; (8010f5c <strtol+0x28>)
 8010f3c:	6a23      	ldr	r3, [r4, #32]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	bf08      	it	eq
 8010f42:	462b      	moveq	r3, r5
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	4613      	mov	r3, r2
 8010f48:	460a      	mov	r2, r1
 8010f4a:	4601      	mov	r1, r0
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f7ff ff75 	bl	8010e3c <_strtol_l.isra.0>
 8010f52:	b003      	add	sp, #12
 8010f54:	bd30      	pop	{r4, r5, pc}
 8010f56:	bf00      	nop
 8010f58:	200002c8 	.word	0x200002c8
 8010f5c:	2000032c 	.word	0x2000032c

08010f60 <viprintf>:
 8010f60:	4b09      	ldr	r3, [pc, #36]	; (8010f88 <viprintf+0x28>)
 8010f62:	b570      	push	{r4, r5, r6, lr}
 8010f64:	681c      	ldr	r4, [r3, #0]
 8010f66:	4605      	mov	r5, r0
 8010f68:	460e      	mov	r6, r1
 8010f6a:	b124      	cbz	r4, 8010f76 <viprintf+0x16>
 8010f6c:	69a3      	ldr	r3, [r4, #24]
 8010f6e:	b913      	cbnz	r3, 8010f76 <viprintf+0x16>
 8010f70:	4620      	mov	r0, r4
 8010f72:	f000 f9d1 	bl	8011318 <__sinit>
 8010f76:	4633      	mov	r3, r6
 8010f78:	462a      	mov	r2, r5
 8010f7a:	68a1      	ldr	r1, [r4, #8]
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f82:	f7ff bbe3 	b.w	801074c <_vfiprintf_r>
 8010f86:	bf00      	nop
 8010f88:	200002c8 	.word	0x200002c8

08010f8c <__swbuf_r>:
 8010f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8e:	460e      	mov	r6, r1
 8010f90:	4614      	mov	r4, r2
 8010f92:	4605      	mov	r5, r0
 8010f94:	b118      	cbz	r0, 8010f9e <__swbuf_r+0x12>
 8010f96:	6983      	ldr	r3, [r0, #24]
 8010f98:	b90b      	cbnz	r3, 8010f9e <__swbuf_r+0x12>
 8010f9a:	f000 f9bd 	bl	8011318 <__sinit>
 8010f9e:	4b21      	ldr	r3, [pc, #132]	; (8011024 <__swbuf_r+0x98>)
 8010fa0:	429c      	cmp	r4, r3
 8010fa2:	d12a      	bne.n	8010ffa <__swbuf_r+0x6e>
 8010fa4:	686c      	ldr	r4, [r5, #4]
 8010fa6:	69a3      	ldr	r3, [r4, #24]
 8010fa8:	60a3      	str	r3, [r4, #8]
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	071a      	lsls	r2, r3, #28
 8010fae:	d52e      	bpl.n	801100e <__swbuf_r+0x82>
 8010fb0:	6923      	ldr	r3, [r4, #16]
 8010fb2:	b363      	cbz	r3, 801100e <__swbuf_r+0x82>
 8010fb4:	6923      	ldr	r3, [r4, #16]
 8010fb6:	6820      	ldr	r0, [r4, #0]
 8010fb8:	1ac0      	subs	r0, r0, r3
 8010fba:	6963      	ldr	r3, [r4, #20]
 8010fbc:	b2f6      	uxtb	r6, r6
 8010fbe:	4283      	cmp	r3, r0
 8010fc0:	4637      	mov	r7, r6
 8010fc2:	dc04      	bgt.n	8010fce <__swbuf_r+0x42>
 8010fc4:	4621      	mov	r1, r4
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f000 f93c 	bl	8011244 <_fflush_r>
 8010fcc:	bb28      	cbnz	r0, 801101a <__swbuf_r+0x8e>
 8010fce:	68a3      	ldr	r3, [r4, #8]
 8010fd0:	3b01      	subs	r3, #1
 8010fd2:	60a3      	str	r3, [r4, #8]
 8010fd4:	6823      	ldr	r3, [r4, #0]
 8010fd6:	1c5a      	adds	r2, r3, #1
 8010fd8:	6022      	str	r2, [r4, #0]
 8010fda:	701e      	strb	r6, [r3, #0]
 8010fdc:	6963      	ldr	r3, [r4, #20]
 8010fde:	3001      	adds	r0, #1
 8010fe0:	4283      	cmp	r3, r0
 8010fe2:	d004      	beq.n	8010fee <__swbuf_r+0x62>
 8010fe4:	89a3      	ldrh	r3, [r4, #12]
 8010fe6:	07db      	lsls	r3, r3, #31
 8010fe8:	d519      	bpl.n	801101e <__swbuf_r+0x92>
 8010fea:	2e0a      	cmp	r6, #10
 8010fec:	d117      	bne.n	801101e <__swbuf_r+0x92>
 8010fee:	4621      	mov	r1, r4
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	f000 f927 	bl	8011244 <_fflush_r>
 8010ff6:	b190      	cbz	r0, 801101e <__swbuf_r+0x92>
 8010ff8:	e00f      	b.n	801101a <__swbuf_r+0x8e>
 8010ffa:	4b0b      	ldr	r3, [pc, #44]	; (8011028 <__swbuf_r+0x9c>)
 8010ffc:	429c      	cmp	r4, r3
 8010ffe:	d101      	bne.n	8011004 <__swbuf_r+0x78>
 8011000:	68ac      	ldr	r4, [r5, #8]
 8011002:	e7d0      	b.n	8010fa6 <__swbuf_r+0x1a>
 8011004:	4b09      	ldr	r3, [pc, #36]	; (801102c <__swbuf_r+0xa0>)
 8011006:	429c      	cmp	r4, r3
 8011008:	bf08      	it	eq
 801100a:	68ec      	ldreq	r4, [r5, #12]
 801100c:	e7cb      	b.n	8010fa6 <__swbuf_r+0x1a>
 801100e:	4621      	mov	r1, r4
 8011010:	4628      	mov	r0, r5
 8011012:	f000 f81b 	bl	801104c <__swsetup_r>
 8011016:	2800      	cmp	r0, #0
 8011018:	d0cc      	beq.n	8010fb4 <__swbuf_r+0x28>
 801101a:	f04f 37ff 	mov.w	r7, #4294967295
 801101e:	4638      	mov	r0, r7
 8011020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011022:	bf00      	nop
 8011024:	08013348 	.word	0x08013348
 8011028:	08013368 	.word	0x08013368
 801102c:	08013328 	.word	0x08013328

08011030 <__ascii_wctomb>:
 8011030:	b149      	cbz	r1, 8011046 <__ascii_wctomb+0x16>
 8011032:	2aff      	cmp	r2, #255	; 0xff
 8011034:	bf85      	ittet	hi
 8011036:	238a      	movhi	r3, #138	; 0x8a
 8011038:	6003      	strhi	r3, [r0, #0]
 801103a:	700a      	strbls	r2, [r1, #0]
 801103c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011040:	bf98      	it	ls
 8011042:	2001      	movls	r0, #1
 8011044:	4770      	bx	lr
 8011046:	4608      	mov	r0, r1
 8011048:	4770      	bx	lr
	...

0801104c <__swsetup_r>:
 801104c:	4b32      	ldr	r3, [pc, #200]	; (8011118 <__swsetup_r+0xcc>)
 801104e:	b570      	push	{r4, r5, r6, lr}
 8011050:	681d      	ldr	r5, [r3, #0]
 8011052:	4606      	mov	r6, r0
 8011054:	460c      	mov	r4, r1
 8011056:	b125      	cbz	r5, 8011062 <__swsetup_r+0x16>
 8011058:	69ab      	ldr	r3, [r5, #24]
 801105a:	b913      	cbnz	r3, 8011062 <__swsetup_r+0x16>
 801105c:	4628      	mov	r0, r5
 801105e:	f000 f95b 	bl	8011318 <__sinit>
 8011062:	4b2e      	ldr	r3, [pc, #184]	; (801111c <__swsetup_r+0xd0>)
 8011064:	429c      	cmp	r4, r3
 8011066:	d10f      	bne.n	8011088 <__swsetup_r+0x3c>
 8011068:	686c      	ldr	r4, [r5, #4]
 801106a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801106e:	b29a      	uxth	r2, r3
 8011070:	0715      	lsls	r5, r2, #28
 8011072:	d42c      	bmi.n	80110ce <__swsetup_r+0x82>
 8011074:	06d0      	lsls	r0, r2, #27
 8011076:	d411      	bmi.n	801109c <__swsetup_r+0x50>
 8011078:	2209      	movs	r2, #9
 801107a:	6032      	str	r2, [r6, #0]
 801107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011080:	81a3      	strh	r3, [r4, #12]
 8011082:	f04f 30ff 	mov.w	r0, #4294967295
 8011086:	e03e      	b.n	8011106 <__swsetup_r+0xba>
 8011088:	4b25      	ldr	r3, [pc, #148]	; (8011120 <__swsetup_r+0xd4>)
 801108a:	429c      	cmp	r4, r3
 801108c:	d101      	bne.n	8011092 <__swsetup_r+0x46>
 801108e:	68ac      	ldr	r4, [r5, #8]
 8011090:	e7eb      	b.n	801106a <__swsetup_r+0x1e>
 8011092:	4b24      	ldr	r3, [pc, #144]	; (8011124 <__swsetup_r+0xd8>)
 8011094:	429c      	cmp	r4, r3
 8011096:	bf08      	it	eq
 8011098:	68ec      	ldreq	r4, [r5, #12]
 801109a:	e7e6      	b.n	801106a <__swsetup_r+0x1e>
 801109c:	0751      	lsls	r1, r2, #29
 801109e:	d512      	bpl.n	80110c6 <__swsetup_r+0x7a>
 80110a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110a2:	b141      	cbz	r1, 80110b6 <__swsetup_r+0x6a>
 80110a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110a8:	4299      	cmp	r1, r3
 80110aa:	d002      	beq.n	80110b2 <__swsetup_r+0x66>
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 fa43 	bl	8011538 <_free_r>
 80110b2:	2300      	movs	r3, #0
 80110b4:	6363      	str	r3, [r4, #52]	; 0x34
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110bc:	81a3      	strh	r3, [r4, #12]
 80110be:	2300      	movs	r3, #0
 80110c0:	6063      	str	r3, [r4, #4]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	89a3      	ldrh	r3, [r4, #12]
 80110c8:	f043 0308 	orr.w	r3, r3, #8
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	b94b      	cbnz	r3, 80110e6 <__swsetup_r+0x9a>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110dc:	d003      	beq.n	80110e6 <__swsetup_r+0x9a>
 80110de:	4621      	mov	r1, r4
 80110e0:	4630      	mov	r0, r6
 80110e2:	f000 f9c7 	bl	8011474 <__smakebuf_r>
 80110e6:	89a2      	ldrh	r2, [r4, #12]
 80110e8:	f012 0301 	ands.w	r3, r2, #1
 80110ec:	d00c      	beq.n	8011108 <__swsetup_r+0xbc>
 80110ee:	2300      	movs	r3, #0
 80110f0:	60a3      	str	r3, [r4, #8]
 80110f2:	6963      	ldr	r3, [r4, #20]
 80110f4:	425b      	negs	r3, r3
 80110f6:	61a3      	str	r3, [r4, #24]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	b953      	cbnz	r3, 8011112 <__swsetup_r+0xc6>
 80110fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011100:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011104:	d1ba      	bne.n	801107c <__swsetup_r+0x30>
 8011106:	bd70      	pop	{r4, r5, r6, pc}
 8011108:	0792      	lsls	r2, r2, #30
 801110a:	bf58      	it	pl
 801110c:	6963      	ldrpl	r3, [r4, #20]
 801110e:	60a3      	str	r3, [r4, #8]
 8011110:	e7f2      	b.n	80110f8 <__swsetup_r+0xac>
 8011112:	2000      	movs	r0, #0
 8011114:	e7f7      	b.n	8011106 <__swsetup_r+0xba>
 8011116:	bf00      	nop
 8011118:	200002c8 	.word	0x200002c8
 801111c:	08013348 	.word	0x08013348
 8011120:	08013368 	.word	0x08013368
 8011124:	08013328 	.word	0x08013328

08011128 <abort>:
 8011128:	b508      	push	{r3, lr}
 801112a:	2006      	movs	r0, #6
 801112c:	f000 fc5c 	bl	80119e8 <raise>
 8011130:	2001      	movs	r0, #1
 8011132:	f7fc fa83 	bl	800d63c <_exit>
	...

08011138 <__sflush_r>:
 8011138:	898a      	ldrh	r2, [r1, #12]
 801113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113e:	4605      	mov	r5, r0
 8011140:	0710      	lsls	r0, r2, #28
 8011142:	460c      	mov	r4, r1
 8011144:	d458      	bmi.n	80111f8 <__sflush_r+0xc0>
 8011146:	684b      	ldr	r3, [r1, #4]
 8011148:	2b00      	cmp	r3, #0
 801114a:	dc05      	bgt.n	8011158 <__sflush_r+0x20>
 801114c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801114e:	2b00      	cmp	r3, #0
 8011150:	dc02      	bgt.n	8011158 <__sflush_r+0x20>
 8011152:	2000      	movs	r0, #0
 8011154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801115a:	2e00      	cmp	r6, #0
 801115c:	d0f9      	beq.n	8011152 <__sflush_r+0x1a>
 801115e:	2300      	movs	r3, #0
 8011160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011164:	682f      	ldr	r7, [r5, #0]
 8011166:	6a21      	ldr	r1, [r4, #32]
 8011168:	602b      	str	r3, [r5, #0]
 801116a:	d032      	beq.n	80111d2 <__sflush_r+0x9a>
 801116c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801116e:	89a3      	ldrh	r3, [r4, #12]
 8011170:	075a      	lsls	r2, r3, #29
 8011172:	d505      	bpl.n	8011180 <__sflush_r+0x48>
 8011174:	6863      	ldr	r3, [r4, #4]
 8011176:	1ac0      	subs	r0, r0, r3
 8011178:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801117a:	b10b      	cbz	r3, 8011180 <__sflush_r+0x48>
 801117c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801117e:	1ac0      	subs	r0, r0, r3
 8011180:	2300      	movs	r3, #0
 8011182:	4602      	mov	r2, r0
 8011184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011186:	6a21      	ldr	r1, [r4, #32]
 8011188:	4628      	mov	r0, r5
 801118a:	47b0      	blx	r6
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	89a3      	ldrh	r3, [r4, #12]
 8011190:	d106      	bne.n	80111a0 <__sflush_r+0x68>
 8011192:	6829      	ldr	r1, [r5, #0]
 8011194:	291d      	cmp	r1, #29
 8011196:	d848      	bhi.n	801122a <__sflush_r+0xf2>
 8011198:	4a29      	ldr	r2, [pc, #164]	; (8011240 <__sflush_r+0x108>)
 801119a:	40ca      	lsrs	r2, r1
 801119c:	07d6      	lsls	r6, r2, #31
 801119e:	d544      	bpl.n	801122a <__sflush_r+0xf2>
 80111a0:	2200      	movs	r2, #0
 80111a2:	6062      	str	r2, [r4, #4]
 80111a4:	04d9      	lsls	r1, r3, #19
 80111a6:	6922      	ldr	r2, [r4, #16]
 80111a8:	6022      	str	r2, [r4, #0]
 80111aa:	d504      	bpl.n	80111b6 <__sflush_r+0x7e>
 80111ac:	1c42      	adds	r2, r0, #1
 80111ae:	d101      	bne.n	80111b4 <__sflush_r+0x7c>
 80111b0:	682b      	ldr	r3, [r5, #0]
 80111b2:	b903      	cbnz	r3, 80111b6 <__sflush_r+0x7e>
 80111b4:	6560      	str	r0, [r4, #84]	; 0x54
 80111b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111b8:	602f      	str	r7, [r5, #0]
 80111ba:	2900      	cmp	r1, #0
 80111bc:	d0c9      	beq.n	8011152 <__sflush_r+0x1a>
 80111be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111c2:	4299      	cmp	r1, r3
 80111c4:	d002      	beq.n	80111cc <__sflush_r+0x94>
 80111c6:	4628      	mov	r0, r5
 80111c8:	f000 f9b6 	bl	8011538 <_free_r>
 80111cc:	2000      	movs	r0, #0
 80111ce:	6360      	str	r0, [r4, #52]	; 0x34
 80111d0:	e7c0      	b.n	8011154 <__sflush_r+0x1c>
 80111d2:	2301      	movs	r3, #1
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b0      	blx	r6
 80111d8:	1c41      	adds	r1, r0, #1
 80111da:	d1c8      	bne.n	801116e <__sflush_r+0x36>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0c5      	beq.n	801116e <__sflush_r+0x36>
 80111e2:	2b1d      	cmp	r3, #29
 80111e4:	d001      	beq.n	80111ea <__sflush_r+0xb2>
 80111e6:	2b16      	cmp	r3, #22
 80111e8:	d101      	bne.n	80111ee <__sflush_r+0xb6>
 80111ea:	602f      	str	r7, [r5, #0]
 80111ec:	e7b1      	b.n	8011152 <__sflush_r+0x1a>
 80111ee:	89a3      	ldrh	r3, [r4, #12]
 80111f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111f4:	81a3      	strh	r3, [r4, #12]
 80111f6:	e7ad      	b.n	8011154 <__sflush_r+0x1c>
 80111f8:	690f      	ldr	r7, [r1, #16]
 80111fa:	2f00      	cmp	r7, #0
 80111fc:	d0a9      	beq.n	8011152 <__sflush_r+0x1a>
 80111fe:	0793      	lsls	r3, r2, #30
 8011200:	680e      	ldr	r6, [r1, #0]
 8011202:	bf08      	it	eq
 8011204:	694b      	ldreq	r3, [r1, #20]
 8011206:	600f      	str	r7, [r1, #0]
 8011208:	bf18      	it	ne
 801120a:	2300      	movne	r3, #0
 801120c:	eba6 0807 	sub.w	r8, r6, r7
 8011210:	608b      	str	r3, [r1, #8]
 8011212:	f1b8 0f00 	cmp.w	r8, #0
 8011216:	dd9c      	ble.n	8011152 <__sflush_r+0x1a>
 8011218:	4643      	mov	r3, r8
 801121a:	463a      	mov	r2, r7
 801121c:	6a21      	ldr	r1, [r4, #32]
 801121e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011220:	4628      	mov	r0, r5
 8011222:	47b0      	blx	r6
 8011224:	2800      	cmp	r0, #0
 8011226:	dc06      	bgt.n	8011236 <__sflush_r+0xfe>
 8011228:	89a3      	ldrh	r3, [r4, #12]
 801122a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801122e:	81a3      	strh	r3, [r4, #12]
 8011230:	f04f 30ff 	mov.w	r0, #4294967295
 8011234:	e78e      	b.n	8011154 <__sflush_r+0x1c>
 8011236:	4407      	add	r7, r0
 8011238:	eba8 0800 	sub.w	r8, r8, r0
 801123c:	e7e9      	b.n	8011212 <__sflush_r+0xda>
 801123e:	bf00      	nop
 8011240:	20400001 	.word	0x20400001

08011244 <_fflush_r>:
 8011244:	b538      	push	{r3, r4, r5, lr}
 8011246:	690b      	ldr	r3, [r1, #16]
 8011248:	4605      	mov	r5, r0
 801124a:	460c      	mov	r4, r1
 801124c:	b1db      	cbz	r3, 8011286 <_fflush_r+0x42>
 801124e:	b118      	cbz	r0, 8011258 <_fflush_r+0x14>
 8011250:	6983      	ldr	r3, [r0, #24]
 8011252:	b90b      	cbnz	r3, 8011258 <_fflush_r+0x14>
 8011254:	f000 f860 	bl	8011318 <__sinit>
 8011258:	4b0c      	ldr	r3, [pc, #48]	; (801128c <_fflush_r+0x48>)
 801125a:	429c      	cmp	r4, r3
 801125c:	d109      	bne.n	8011272 <_fflush_r+0x2e>
 801125e:	686c      	ldr	r4, [r5, #4]
 8011260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011264:	b17b      	cbz	r3, 8011286 <_fflush_r+0x42>
 8011266:	4621      	mov	r1, r4
 8011268:	4628      	mov	r0, r5
 801126a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801126e:	f7ff bf63 	b.w	8011138 <__sflush_r>
 8011272:	4b07      	ldr	r3, [pc, #28]	; (8011290 <_fflush_r+0x4c>)
 8011274:	429c      	cmp	r4, r3
 8011276:	d101      	bne.n	801127c <_fflush_r+0x38>
 8011278:	68ac      	ldr	r4, [r5, #8]
 801127a:	e7f1      	b.n	8011260 <_fflush_r+0x1c>
 801127c:	4b05      	ldr	r3, [pc, #20]	; (8011294 <_fflush_r+0x50>)
 801127e:	429c      	cmp	r4, r3
 8011280:	bf08      	it	eq
 8011282:	68ec      	ldreq	r4, [r5, #12]
 8011284:	e7ec      	b.n	8011260 <_fflush_r+0x1c>
 8011286:	2000      	movs	r0, #0
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	08013348 	.word	0x08013348
 8011290:	08013368 	.word	0x08013368
 8011294:	08013328 	.word	0x08013328

08011298 <std>:
 8011298:	2300      	movs	r3, #0
 801129a:	b510      	push	{r4, lr}
 801129c:	4604      	mov	r4, r0
 801129e:	e9c0 3300 	strd	r3, r3, [r0]
 80112a2:	6083      	str	r3, [r0, #8]
 80112a4:	8181      	strh	r1, [r0, #12]
 80112a6:	6643      	str	r3, [r0, #100]	; 0x64
 80112a8:	81c2      	strh	r2, [r0, #14]
 80112aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112ae:	6183      	str	r3, [r0, #24]
 80112b0:	4619      	mov	r1, r3
 80112b2:	2208      	movs	r2, #8
 80112b4:	305c      	adds	r0, #92	; 0x5c
 80112b6:	f7ff fa17 	bl	80106e8 <memset>
 80112ba:	4b05      	ldr	r3, [pc, #20]	; (80112d0 <std+0x38>)
 80112bc:	6263      	str	r3, [r4, #36]	; 0x24
 80112be:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <std+0x3c>)
 80112c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80112c2:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <std+0x40>)
 80112c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112c6:	4b05      	ldr	r3, [pc, #20]	; (80112dc <std+0x44>)
 80112c8:	6224      	str	r4, [r4, #32]
 80112ca:	6323      	str	r3, [r4, #48]	; 0x30
 80112cc:	bd10      	pop	{r4, pc}
 80112ce:	bf00      	nop
 80112d0:	08011a21 	.word	0x08011a21
 80112d4:	08011a43 	.word	0x08011a43
 80112d8:	08011a7b 	.word	0x08011a7b
 80112dc:	08011a9f 	.word	0x08011a9f

080112e0 <_cleanup_r>:
 80112e0:	4901      	ldr	r1, [pc, #4]	; (80112e8 <_cleanup_r+0x8>)
 80112e2:	f000 b885 	b.w	80113f0 <_fwalk_reent>
 80112e6:	bf00      	nop
 80112e8:	08011245 	.word	0x08011245

080112ec <__sfmoreglue>:
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	1e4a      	subs	r2, r1, #1
 80112f0:	2568      	movs	r5, #104	; 0x68
 80112f2:	4355      	muls	r5, r2
 80112f4:	460e      	mov	r6, r1
 80112f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112fa:	f000 f96b 	bl	80115d4 <_malloc_r>
 80112fe:	4604      	mov	r4, r0
 8011300:	b140      	cbz	r0, 8011314 <__sfmoreglue+0x28>
 8011302:	2100      	movs	r1, #0
 8011304:	e9c0 1600 	strd	r1, r6, [r0]
 8011308:	300c      	adds	r0, #12
 801130a:	60a0      	str	r0, [r4, #8]
 801130c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011310:	f7ff f9ea 	bl	80106e8 <memset>
 8011314:	4620      	mov	r0, r4
 8011316:	bd70      	pop	{r4, r5, r6, pc}

08011318 <__sinit>:
 8011318:	6983      	ldr	r3, [r0, #24]
 801131a:	b510      	push	{r4, lr}
 801131c:	4604      	mov	r4, r0
 801131e:	bb33      	cbnz	r3, 801136e <__sinit+0x56>
 8011320:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011324:	6503      	str	r3, [r0, #80]	; 0x50
 8011326:	4b12      	ldr	r3, [pc, #72]	; (8011370 <__sinit+0x58>)
 8011328:	4a12      	ldr	r2, [pc, #72]	; (8011374 <__sinit+0x5c>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	6282      	str	r2, [r0, #40]	; 0x28
 801132e:	4298      	cmp	r0, r3
 8011330:	bf04      	itt	eq
 8011332:	2301      	moveq	r3, #1
 8011334:	6183      	streq	r3, [r0, #24]
 8011336:	f000 f81f 	bl	8011378 <__sfp>
 801133a:	6060      	str	r0, [r4, #4]
 801133c:	4620      	mov	r0, r4
 801133e:	f000 f81b 	bl	8011378 <__sfp>
 8011342:	60a0      	str	r0, [r4, #8]
 8011344:	4620      	mov	r0, r4
 8011346:	f000 f817 	bl	8011378 <__sfp>
 801134a:	2200      	movs	r2, #0
 801134c:	60e0      	str	r0, [r4, #12]
 801134e:	2104      	movs	r1, #4
 8011350:	6860      	ldr	r0, [r4, #4]
 8011352:	f7ff ffa1 	bl	8011298 <std>
 8011356:	2201      	movs	r2, #1
 8011358:	2109      	movs	r1, #9
 801135a:	68a0      	ldr	r0, [r4, #8]
 801135c:	f7ff ff9c 	bl	8011298 <std>
 8011360:	2202      	movs	r2, #2
 8011362:	2112      	movs	r1, #18
 8011364:	68e0      	ldr	r0, [r4, #12]
 8011366:	f7ff ff97 	bl	8011298 <std>
 801136a:	2301      	movs	r3, #1
 801136c:	61a3      	str	r3, [r4, #24]
 801136e:	bd10      	pop	{r4, pc}
 8011370:	080131e4 	.word	0x080131e4
 8011374:	080112e1 	.word	0x080112e1

08011378 <__sfp>:
 8011378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137a:	4b1b      	ldr	r3, [pc, #108]	; (80113e8 <__sfp+0x70>)
 801137c:	681e      	ldr	r6, [r3, #0]
 801137e:	69b3      	ldr	r3, [r6, #24]
 8011380:	4607      	mov	r7, r0
 8011382:	b913      	cbnz	r3, 801138a <__sfp+0x12>
 8011384:	4630      	mov	r0, r6
 8011386:	f7ff ffc7 	bl	8011318 <__sinit>
 801138a:	3648      	adds	r6, #72	; 0x48
 801138c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011390:	3b01      	subs	r3, #1
 8011392:	d503      	bpl.n	801139c <__sfp+0x24>
 8011394:	6833      	ldr	r3, [r6, #0]
 8011396:	b133      	cbz	r3, 80113a6 <__sfp+0x2e>
 8011398:	6836      	ldr	r6, [r6, #0]
 801139a:	e7f7      	b.n	801138c <__sfp+0x14>
 801139c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113a0:	b16d      	cbz	r5, 80113be <__sfp+0x46>
 80113a2:	3468      	adds	r4, #104	; 0x68
 80113a4:	e7f4      	b.n	8011390 <__sfp+0x18>
 80113a6:	2104      	movs	r1, #4
 80113a8:	4638      	mov	r0, r7
 80113aa:	f7ff ff9f 	bl	80112ec <__sfmoreglue>
 80113ae:	6030      	str	r0, [r6, #0]
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d1f1      	bne.n	8011398 <__sfp+0x20>
 80113b4:	230c      	movs	r3, #12
 80113b6:	603b      	str	r3, [r7, #0]
 80113b8:	4604      	mov	r4, r0
 80113ba:	4620      	mov	r0, r4
 80113bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113be:	4b0b      	ldr	r3, [pc, #44]	; (80113ec <__sfp+0x74>)
 80113c0:	6665      	str	r5, [r4, #100]	; 0x64
 80113c2:	e9c4 5500 	strd	r5, r5, [r4]
 80113c6:	60a5      	str	r5, [r4, #8]
 80113c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80113cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80113d0:	2208      	movs	r2, #8
 80113d2:	4629      	mov	r1, r5
 80113d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113d8:	f7ff f986 	bl	80106e8 <memset>
 80113dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113e4:	e7e9      	b.n	80113ba <__sfp+0x42>
 80113e6:	bf00      	nop
 80113e8:	080131e4 	.word	0x080131e4
 80113ec:	ffff0001 	.word	0xffff0001

080113f0 <_fwalk_reent>:
 80113f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113f4:	4680      	mov	r8, r0
 80113f6:	4689      	mov	r9, r1
 80113f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80113fc:	2600      	movs	r6, #0
 80113fe:	b914      	cbnz	r4, 8011406 <_fwalk_reent+0x16>
 8011400:	4630      	mov	r0, r6
 8011402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011406:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801140a:	3f01      	subs	r7, #1
 801140c:	d501      	bpl.n	8011412 <_fwalk_reent+0x22>
 801140e:	6824      	ldr	r4, [r4, #0]
 8011410:	e7f5      	b.n	80113fe <_fwalk_reent+0xe>
 8011412:	89ab      	ldrh	r3, [r5, #12]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d907      	bls.n	8011428 <_fwalk_reent+0x38>
 8011418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801141c:	3301      	adds	r3, #1
 801141e:	d003      	beq.n	8011428 <_fwalk_reent+0x38>
 8011420:	4629      	mov	r1, r5
 8011422:	4640      	mov	r0, r8
 8011424:	47c8      	blx	r9
 8011426:	4306      	orrs	r6, r0
 8011428:	3568      	adds	r5, #104	; 0x68
 801142a:	e7ee      	b.n	801140a <_fwalk_reent+0x1a>

0801142c <__swhatbuf_r>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	460e      	mov	r6, r1
 8011430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011434:	2900      	cmp	r1, #0
 8011436:	b096      	sub	sp, #88	; 0x58
 8011438:	4614      	mov	r4, r2
 801143a:	461d      	mov	r5, r3
 801143c:	da07      	bge.n	801144e <__swhatbuf_r+0x22>
 801143e:	2300      	movs	r3, #0
 8011440:	602b      	str	r3, [r5, #0]
 8011442:	89b3      	ldrh	r3, [r6, #12]
 8011444:	061a      	lsls	r2, r3, #24
 8011446:	d410      	bmi.n	801146a <__swhatbuf_r+0x3e>
 8011448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801144c:	e00e      	b.n	801146c <__swhatbuf_r+0x40>
 801144e:	466a      	mov	r2, sp
 8011450:	f000 fb4c 	bl	8011aec <_fstat_r>
 8011454:	2800      	cmp	r0, #0
 8011456:	dbf2      	blt.n	801143e <__swhatbuf_r+0x12>
 8011458:	9a01      	ldr	r2, [sp, #4]
 801145a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801145e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011462:	425a      	negs	r2, r3
 8011464:	415a      	adcs	r2, r3
 8011466:	602a      	str	r2, [r5, #0]
 8011468:	e7ee      	b.n	8011448 <__swhatbuf_r+0x1c>
 801146a:	2340      	movs	r3, #64	; 0x40
 801146c:	2000      	movs	r0, #0
 801146e:	6023      	str	r3, [r4, #0]
 8011470:	b016      	add	sp, #88	; 0x58
 8011472:	bd70      	pop	{r4, r5, r6, pc}

08011474 <__smakebuf_r>:
 8011474:	898b      	ldrh	r3, [r1, #12]
 8011476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011478:	079d      	lsls	r5, r3, #30
 801147a:	4606      	mov	r6, r0
 801147c:	460c      	mov	r4, r1
 801147e:	d507      	bpl.n	8011490 <__smakebuf_r+0x1c>
 8011480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	6123      	str	r3, [r4, #16]
 8011488:	2301      	movs	r3, #1
 801148a:	6163      	str	r3, [r4, #20]
 801148c:	b002      	add	sp, #8
 801148e:	bd70      	pop	{r4, r5, r6, pc}
 8011490:	ab01      	add	r3, sp, #4
 8011492:	466a      	mov	r2, sp
 8011494:	f7ff ffca 	bl	801142c <__swhatbuf_r>
 8011498:	9900      	ldr	r1, [sp, #0]
 801149a:	4605      	mov	r5, r0
 801149c:	4630      	mov	r0, r6
 801149e:	f000 f899 	bl	80115d4 <_malloc_r>
 80114a2:	b948      	cbnz	r0, 80114b8 <__smakebuf_r+0x44>
 80114a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114a8:	059a      	lsls	r2, r3, #22
 80114aa:	d4ef      	bmi.n	801148c <__smakebuf_r+0x18>
 80114ac:	f023 0303 	bic.w	r3, r3, #3
 80114b0:	f043 0302 	orr.w	r3, r3, #2
 80114b4:	81a3      	strh	r3, [r4, #12]
 80114b6:	e7e3      	b.n	8011480 <__smakebuf_r+0xc>
 80114b8:	4b0d      	ldr	r3, [pc, #52]	; (80114f0 <__smakebuf_r+0x7c>)
 80114ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80114bc:	89a3      	ldrh	r3, [r4, #12]
 80114be:	6020      	str	r0, [r4, #0]
 80114c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c4:	81a3      	strh	r3, [r4, #12]
 80114c6:	9b00      	ldr	r3, [sp, #0]
 80114c8:	6163      	str	r3, [r4, #20]
 80114ca:	9b01      	ldr	r3, [sp, #4]
 80114cc:	6120      	str	r0, [r4, #16]
 80114ce:	b15b      	cbz	r3, 80114e8 <__smakebuf_r+0x74>
 80114d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114d4:	4630      	mov	r0, r6
 80114d6:	f000 fb1b 	bl	8011b10 <_isatty_r>
 80114da:	b128      	cbz	r0, 80114e8 <__smakebuf_r+0x74>
 80114dc:	89a3      	ldrh	r3, [r4, #12]
 80114de:	f023 0303 	bic.w	r3, r3, #3
 80114e2:	f043 0301 	orr.w	r3, r3, #1
 80114e6:	81a3      	strh	r3, [r4, #12]
 80114e8:	89a3      	ldrh	r3, [r4, #12]
 80114ea:	431d      	orrs	r5, r3
 80114ec:	81a5      	strh	r5, [r4, #12]
 80114ee:	e7cd      	b.n	801148c <__smakebuf_r+0x18>
 80114f0:	080112e1 	.word	0x080112e1

080114f4 <malloc>:
 80114f4:	4b02      	ldr	r3, [pc, #8]	; (8011500 <malloc+0xc>)
 80114f6:	4601      	mov	r1, r0
 80114f8:	6818      	ldr	r0, [r3, #0]
 80114fa:	f000 b86b 	b.w	80115d4 <_malloc_r>
 80114fe:	bf00      	nop
 8011500:	200002c8 	.word	0x200002c8

08011504 <memmove>:
 8011504:	4288      	cmp	r0, r1
 8011506:	b510      	push	{r4, lr}
 8011508:	eb01 0302 	add.w	r3, r1, r2
 801150c:	d807      	bhi.n	801151e <memmove+0x1a>
 801150e:	1e42      	subs	r2, r0, #1
 8011510:	4299      	cmp	r1, r3
 8011512:	d00a      	beq.n	801152a <memmove+0x26>
 8011514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011518:	f802 4f01 	strb.w	r4, [r2, #1]!
 801151c:	e7f8      	b.n	8011510 <memmove+0xc>
 801151e:	4283      	cmp	r3, r0
 8011520:	d9f5      	bls.n	801150e <memmove+0xa>
 8011522:	1881      	adds	r1, r0, r2
 8011524:	1ad2      	subs	r2, r2, r3
 8011526:	42d3      	cmn	r3, r2
 8011528:	d100      	bne.n	801152c <memmove+0x28>
 801152a:	bd10      	pop	{r4, pc}
 801152c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011530:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011534:	e7f7      	b.n	8011526 <memmove+0x22>
	...

08011538 <_free_r>:
 8011538:	b538      	push	{r3, r4, r5, lr}
 801153a:	4605      	mov	r5, r0
 801153c:	2900      	cmp	r1, #0
 801153e:	d045      	beq.n	80115cc <_free_r+0x94>
 8011540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011544:	1f0c      	subs	r4, r1, #4
 8011546:	2b00      	cmp	r3, #0
 8011548:	bfb8      	it	lt
 801154a:	18e4      	addlt	r4, r4, r3
 801154c:	f000 fb02 	bl	8011b54 <__malloc_lock>
 8011550:	4a1f      	ldr	r2, [pc, #124]	; (80115d0 <_free_r+0x98>)
 8011552:	6813      	ldr	r3, [r2, #0]
 8011554:	4610      	mov	r0, r2
 8011556:	b933      	cbnz	r3, 8011566 <_free_r+0x2e>
 8011558:	6063      	str	r3, [r4, #4]
 801155a:	6014      	str	r4, [r2, #0]
 801155c:	4628      	mov	r0, r5
 801155e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011562:	f000 baf8 	b.w	8011b56 <__malloc_unlock>
 8011566:	42a3      	cmp	r3, r4
 8011568:	d90c      	bls.n	8011584 <_free_r+0x4c>
 801156a:	6821      	ldr	r1, [r4, #0]
 801156c:	1862      	adds	r2, r4, r1
 801156e:	4293      	cmp	r3, r2
 8011570:	bf04      	itt	eq
 8011572:	681a      	ldreq	r2, [r3, #0]
 8011574:	685b      	ldreq	r3, [r3, #4]
 8011576:	6063      	str	r3, [r4, #4]
 8011578:	bf04      	itt	eq
 801157a:	1852      	addeq	r2, r2, r1
 801157c:	6022      	streq	r2, [r4, #0]
 801157e:	6004      	str	r4, [r0, #0]
 8011580:	e7ec      	b.n	801155c <_free_r+0x24>
 8011582:	4613      	mov	r3, r2
 8011584:	685a      	ldr	r2, [r3, #4]
 8011586:	b10a      	cbz	r2, 801158c <_free_r+0x54>
 8011588:	42a2      	cmp	r2, r4
 801158a:	d9fa      	bls.n	8011582 <_free_r+0x4a>
 801158c:	6819      	ldr	r1, [r3, #0]
 801158e:	1858      	adds	r0, r3, r1
 8011590:	42a0      	cmp	r0, r4
 8011592:	d10b      	bne.n	80115ac <_free_r+0x74>
 8011594:	6820      	ldr	r0, [r4, #0]
 8011596:	4401      	add	r1, r0
 8011598:	1858      	adds	r0, r3, r1
 801159a:	4282      	cmp	r2, r0
 801159c:	6019      	str	r1, [r3, #0]
 801159e:	d1dd      	bne.n	801155c <_free_r+0x24>
 80115a0:	6810      	ldr	r0, [r2, #0]
 80115a2:	6852      	ldr	r2, [r2, #4]
 80115a4:	605a      	str	r2, [r3, #4]
 80115a6:	4401      	add	r1, r0
 80115a8:	6019      	str	r1, [r3, #0]
 80115aa:	e7d7      	b.n	801155c <_free_r+0x24>
 80115ac:	d902      	bls.n	80115b4 <_free_r+0x7c>
 80115ae:	230c      	movs	r3, #12
 80115b0:	602b      	str	r3, [r5, #0]
 80115b2:	e7d3      	b.n	801155c <_free_r+0x24>
 80115b4:	6820      	ldr	r0, [r4, #0]
 80115b6:	1821      	adds	r1, r4, r0
 80115b8:	428a      	cmp	r2, r1
 80115ba:	bf04      	itt	eq
 80115bc:	6811      	ldreq	r1, [r2, #0]
 80115be:	6852      	ldreq	r2, [r2, #4]
 80115c0:	6062      	str	r2, [r4, #4]
 80115c2:	bf04      	itt	eq
 80115c4:	1809      	addeq	r1, r1, r0
 80115c6:	6021      	streq	r1, [r4, #0]
 80115c8:	605c      	str	r4, [r3, #4]
 80115ca:	e7c7      	b.n	801155c <_free_r+0x24>
 80115cc:	bd38      	pop	{r3, r4, r5, pc}
 80115ce:	bf00      	nop
 80115d0:	20014dc8 	.word	0x20014dc8

080115d4 <_malloc_r>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	1ccd      	adds	r5, r1, #3
 80115d8:	f025 0503 	bic.w	r5, r5, #3
 80115dc:	3508      	adds	r5, #8
 80115de:	2d0c      	cmp	r5, #12
 80115e0:	bf38      	it	cc
 80115e2:	250c      	movcc	r5, #12
 80115e4:	2d00      	cmp	r5, #0
 80115e6:	4606      	mov	r6, r0
 80115e8:	db01      	blt.n	80115ee <_malloc_r+0x1a>
 80115ea:	42a9      	cmp	r1, r5
 80115ec:	d903      	bls.n	80115f6 <_malloc_r+0x22>
 80115ee:	230c      	movs	r3, #12
 80115f0:	6033      	str	r3, [r6, #0]
 80115f2:	2000      	movs	r0, #0
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	f000 faad 	bl	8011b54 <__malloc_lock>
 80115fa:	4a21      	ldr	r2, [pc, #132]	; (8011680 <_malloc_r+0xac>)
 80115fc:	6814      	ldr	r4, [r2, #0]
 80115fe:	4621      	mov	r1, r4
 8011600:	b991      	cbnz	r1, 8011628 <_malloc_r+0x54>
 8011602:	4c20      	ldr	r4, [pc, #128]	; (8011684 <_malloc_r+0xb0>)
 8011604:	6823      	ldr	r3, [r4, #0]
 8011606:	b91b      	cbnz	r3, 8011610 <_malloc_r+0x3c>
 8011608:	4630      	mov	r0, r6
 801160a:	f000 f9b5 	bl	8011978 <_sbrk_r>
 801160e:	6020      	str	r0, [r4, #0]
 8011610:	4629      	mov	r1, r5
 8011612:	4630      	mov	r0, r6
 8011614:	f000 f9b0 	bl	8011978 <_sbrk_r>
 8011618:	1c43      	adds	r3, r0, #1
 801161a:	d124      	bne.n	8011666 <_malloc_r+0x92>
 801161c:	230c      	movs	r3, #12
 801161e:	6033      	str	r3, [r6, #0]
 8011620:	4630      	mov	r0, r6
 8011622:	f000 fa98 	bl	8011b56 <__malloc_unlock>
 8011626:	e7e4      	b.n	80115f2 <_malloc_r+0x1e>
 8011628:	680b      	ldr	r3, [r1, #0]
 801162a:	1b5b      	subs	r3, r3, r5
 801162c:	d418      	bmi.n	8011660 <_malloc_r+0x8c>
 801162e:	2b0b      	cmp	r3, #11
 8011630:	d90f      	bls.n	8011652 <_malloc_r+0x7e>
 8011632:	600b      	str	r3, [r1, #0]
 8011634:	50cd      	str	r5, [r1, r3]
 8011636:	18cc      	adds	r4, r1, r3
 8011638:	4630      	mov	r0, r6
 801163a:	f000 fa8c 	bl	8011b56 <__malloc_unlock>
 801163e:	f104 000b 	add.w	r0, r4, #11
 8011642:	1d23      	adds	r3, r4, #4
 8011644:	f020 0007 	bic.w	r0, r0, #7
 8011648:	1ac3      	subs	r3, r0, r3
 801164a:	d0d3      	beq.n	80115f4 <_malloc_r+0x20>
 801164c:	425a      	negs	r2, r3
 801164e:	50e2      	str	r2, [r4, r3]
 8011650:	e7d0      	b.n	80115f4 <_malloc_r+0x20>
 8011652:	428c      	cmp	r4, r1
 8011654:	684b      	ldr	r3, [r1, #4]
 8011656:	bf16      	itet	ne
 8011658:	6063      	strne	r3, [r4, #4]
 801165a:	6013      	streq	r3, [r2, #0]
 801165c:	460c      	movne	r4, r1
 801165e:	e7eb      	b.n	8011638 <_malloc_r+0x64>
 8011660:	460c      	mov	r4, r1
 8011662:	6849      	ldr	r1, [r1, #4]
 8011664:	e7cc      	b.n	8011600 <_malloc_r+0x2c>
 8011666:	1cc4      	adds	r4, r0, #3
 8011668:	f024 0403 	bic.w	r4, r4, #3
 801166c:	42a0      	cmp	r0, r4
 801166e:	d005      	beq.n	801167c <_malloc_r+0xa8>
 8011670:	1a21      	subs	r1, r4, r0
 8011672:	4630      	mov	r0, r6
 8011674:	f000 f980 	bl	8011978 <_sbrk_r>
 8011678:	3001      	adds	r0, #1
 801167a:	d0cf      	beq.n	801161c <_malloc_r+0x48>
 801167c:	6025      	str	r5, [r4, #0]
 801167e:	e7db      	b.n	8011638 <_malloc_r+0x64>
 8011680:	20014dc8 	.word	0x20014dc8
 8011684:	20014dcc 	.word	0x20014dcc

08011688 <_realloc_r>:
 8011688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168a:	4607      	mov	r7, r0
 801168c:	4614      	mov	r4, r2
 801168e:	460e      	mov	r6, r1
 8011690:	b921      	cbnz	r1, 801169c <_realloc_r+0x14>
 8011692:	4611      	mov	r1, r2
 8011694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011698:	f7ff bf9c 	b.w	80115d4 <_malloc_r>
 801169c:	b922      	cbnz	r2, 80116a8 <_realloc_r+0x20>
 801169e:	f7ff ff4b 	bl	8011538 <_free_r>
 80116a2:	4625      	mov	r5, r4
 80116a4:	4628      	mov	r0, r5
 80116a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a8:	f000 fa56 	bl	8011b58 <_malloc_usable_size_r>
 80116ac:	42a0      	cmp	r0, r4
 80116ae:	d20f      	bcs.n	80116d0 <_realloc_r+0x48>
 80116b0:	4621      	mov	r1, r4
 80116b2:	4638      	mov	r0, r7
 80116b4:	f7ff ff8e 	bl	80115d4 <_malloc_r>
 80116b8:	4605      	mov	r5, r0
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d0f2      	beq.n	80116a4 <_realloc_r+0x1c>
 80116be:	4631      	mov	r1, r6
 80116c0:	4622      	mov	r2, r4
 80116c2:	f7ff f806 	bl	80106d2 <memcpy>
 80116c6:	4631      	mov	r1, r6
 80116c8:	4638      	mov	r0, r7
 80116ca:	f7ff ff35 	bl	8011538 <_free_r>
 80116ce:	e7e9      	b.n	80116a4 <_realloc_r+0x1c>
 80116d0:	4635      	mov	r5, r6
 80116d2:	e7e7      	b.n	80116a4 <_realloc_r+0x1c>

080116d4 <__ssputs_r>:
 80116d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d8:	688e      	ldr	r6, [r1, #8]
 80116da:	429e      	cmp	r6, r3
 80116dc:	4682      	mov	sl, r0
 80116de:	460c      	mov	r4, r1
 80116e0:	4690      	mov	r8, r2
 80116e2:	4699      	mov	r9, r3
 80116e4:	d837      	bhi.n	8011756 <__ssputs_r+0x82>
 80116e6:	898a      	ldrh	r2, [r1, #12]
 80116e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116ec:	d031      	beq.n	8011752 <__ssputs_r+0x7e>
 80116ee:	6825      	ldr	r5, [r4, #0]
 80116f0:	6909      	ldr	r1, [r1, #16]
 80116f2:	1a6f      	subs	r7, r5, r1
 80116f4:	6965      	ldr	r5, [r4, #20]
 80116f6:	2302      	movs	r3, #2
 80116f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8011700:	f109 0301 	add.w	r3, r9, #1
 8011704:	443b      	add	r3, r7
 8011706:	429d      	cmp	r5, r3
 8011708:	bf38      	it	cc
 801170a:	461d      	movcc	r5, r3
 801170c:	0553      	lsls	r3, r2, #21
 801170e:	d530      	bpl.n	8011772 <__ssputs_r+0x9e>
 8011710:	4629      	mov	r1, r5
 8011712:	f7ff ff5f 	bl	80115d4 <_malloc_r>
 8011716:	4606      	mov	r6, r0
 8011718:	b950      	cbnz	r0, 8011730 <__ssputs_r+0x5c>
 801171a:	230c      	movs	r3, #12
 801171c:	f8ca 3000 	str.w	r3, [sl]
 8011720:	89a3      	ldrh	r3, [r4, #12]
 8011722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	f04f 30ff 	mov.w	r0, #4294967295
 801172c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011730:	463a      	mov	r2, r7
 8011732:	6921      	ldr	r1, [r4, #16]
 8011734:	f7fe ffcd 	bl	80106d2 <memcpy>
 8011738:	89a3      	ldrh	r3, [r4, #12]
 801173a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801173e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011742:	81a3      	strh	r3, [r4, #12]
 8011744:	6126      	str	r6, [r4, #16]
 8011746:	6165      	str	r5, [r4, #20]
 8011748:	443e      	add	r6, r7
 801174a:	1bed      	subs	r5, r5, r7
 801174c:	6026      	str	r6, [r4, #0]
 801174e:	60a5      	str	r5, [r4, #8]
 8011750:	464e      	mov	r6, r9
 8011752:	454e      	cmp	r6, r9
 8011754:	d900      	bls.n	8011758 <__ssputs_r+0x84>
 8011756:	464e      	mov	r6, r9
 8011758:	4632      	mov	r2, r6
 801175a:	4641      	mov	r1, r8
 801175c:	6820      	ldr	r0, [r4, #0]
 801175e:	f7ff fed1 	bl	8011504 <memmove>
 8011762:	68a3      	ldr	r3, [r4, #8]
 8011764:	1b9b      	subs	r3, r3, r6
 8011766:	60a3      	str	r3, [r4, #8]
 8011768:	6823      	ldr	r3, [r4, #0]
 801176a:	441e      	add	r6, r3
 801176c:	6026      	str	r6, [r4, #0]
 801176e:	2000      	movs	r0, #0
 8011770:	e7dc      	b.n	801172c <__ssputs_r+0x58>
 8011772:	462a      	mov	r2, r5
 8011774:	f7ff ff88 	bl	8011688 <_realloc_r>
 8011778:	4606      	mov	r6, r0
 801177a:	2800      	cmp	r0, #0
 801177c:	d1e2      	bne.n	8011744 <__ssputs_r+0x70>
 801177e:	6921      	ldr	r1, [r4, #16]
 8011780:	4650      	mov	r0, sl
 8011782:	f7ff fed9 	bl	8011538 <_free_r>
 8011786:	e7c8      	b.n	801171a <__ssputs_r+0x46>

08011788 <_svfiprintf_r>:
 8011788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	461d      	mov	r5, r3
 801178e:	898b      	ldrh	r3, [r1, #12]
 8011790:	061f      	lsls	r7, r3, #24
 8011792:	b09d      	sub	sp, #116	; 0x74
 8011794:	4680      	mov	r8, r0
 8011796:	460c      	mov	r4, r1
 8011798:	4616      	mov	r6, r2
 801179a:	d50f      	bpl.n	80117bc <_svfiprintf_r+0x34>
 801179c:	690b      	ldr	r3, [r1, #16]
 801179e:	b96b      	cbnz	r3, 80117bc <_svfiprintf_r+0x34>
 80117a0:	2140      	movs	r1, #64	; 0x40
 80117a2:	f7ff ff17 	bl	80115d4 <_malloc_r>
 80117a6:	6020      	str	r0, [r4, #0]
 80117a8:	6120      	str	r0, [r4, #16]
 80117aa:	b928      	cbnz	r0, 80117b8 <_svfiprintf_r+0x30>
 80117ac:	230c      	movs	r3, #12
 80117ae:	f8c8 3000 	str.w	r3, [r8]
 80117b2:	f04f 30ff 	mov.w	r0, #4294967295
 80117b6:	e0c8      	b.n	801194a <_svfiprintf_r+0x1c2>
 80117b8:	2340      	movs	r3, #64	; 0x40
 80117ba:	6163      	str	r3, [r4, #20]
 80117bc:	2300      	movs	r3, #0
 80117be:	9309      	str	r3, [sp, #36]	; 0x24
 80117c0:	2320      	movs	r3, #32
 80117c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117c6:	2330      	movs	r3, #48	; 0x30
 80117c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117cc:	9503      	str	r5, [sp, #12]
 80117ce:	f04f 0b01 	mov.w	fp, #1
 80117d2:	4637      	mov	r7, r6
 80117d4:	463d      	mov	r5, r7
 80117d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80117da:	b10b      	cbz	r3, 80117e0 <_svfiprintf_r+0x58>
 80117dc:	2b25      	cmp	r3, #37	; 0x25
 80117de:	d13e      	bne.n	801185e <_svfiprintf_r+0xd6>
 80117e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80117e4:	d00b      	beq.n	80117fe <_svfiprintf_r+0x76>
 80117e6:	4653      	mov	r3, sl
 80117e8:	4632      	mov	r2, r6
 80117ea:	4621      	mov	r1, r4
 80117ec:	4640      	mov	r0, r8
 80117ee:	f7ff ff71 	bl	80116d4 <__ssputs_r>
 80117f2:	3001      	adds	r0, #1
 80117f4:	f000 80a4 	beq.w	8011940 <_svfiprintf_r+0x1b8>
 80117f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117fa:	4453      	add	r3, sl
 80117fc:	9309      	str	r3, [sp, #36]	; 0x24
 80117fe:	783b      	ldrb	r3, [r7, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	f000 809d 	beq.w	8011940 <_svfiprintf_r+0x1b8>
 8011806:	2300      	movs	r3, #0
 8011808:	f04f 32ff 	mov.w	r2, #4294967295
 801180c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011810:	9304      	str	r3, [sp, #16]
 8011812:	9307      	str	r3, [sp, #28]
 8011814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011818:	931a      	str	r3, [sp, #104]	; 0x68
 801181a:	462f      	mov	r7, r5
 801181c:	2205      	movs	r2, #5
 801181e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011822:	4850      	ldr	r0, [pc, #320]	; (8011964 <_svfiprintf_r+0x1dc>)
 8011824:	f7ee fcec 	bl	8000200 <memchr>
 8011828:	9b04      	ldr	r3, [sp, #16]
 801182a:	b9d0      	cbnz	r0, 8011862 <_svfiprintf_r+0xda>
 801182c:	06d9      	lsls	r1, r3, #27
 801182e:	bf44      	itt	mi
 8011830:	2220      	movmi	r2, #32
 8011832:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011836:	071a      	lsls	r2, r3, #28
 8011838:	bf44      	itt	mi
 801183a:	222b      	movmi	r2, #43	; 0x2b
 801183c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011840:	782a      	ldrb	r2, [r5, #0]
 8011842:	2a2a      	cmp	r2, #42	; 0x2a
 8011844:	d015      	beq.n	8011872 <_svfiprintf_r+0xea>
 8011846:	9a07      	ldr	r2, [sp, #28]
 8011848:	462f      	mov	r7, r5
 801184a:	2000      	movs	r0, #0
 801184c:	250a      	movs	r5, #10
 801184e:	4639      	mov	r1, r7
 8011850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011854:	3b30      	subs	r3, #48	; 0x30
 8011856:	2b09      	cmp	r3, #9
 8011858:	d94d      	bls.n	80118f6 <_svfiprintf_r+0x16e>
 801185a:	b1b8      	cbz	r0, 801188c <_svfiprintf_r+0x104>
 801185c:	e00f      	b.n	801187e <_svfiprintf_r+0xf6>
 801185e:	462f      	mov	r7, r5
 8011860:	e7b8      	b.n	80117d4 <_svfiprintf_r+0x4c>
 8011862:	4a40      	ldr	r2, [pc, #256]	; (8011964 <_svfiprintf_r+0x1dc>)
 8011864:	1a80      	subs	r0, r0, r2
 8011866:	fa0b f000 	lsl.w	r0, fp, r0
 801186a:	4318      	orrs	r0, r3
 801186c:	9004      	str	r0, [sp, #16]
 801186e:	463d      	mov	r5, r7
 8011870:	e7d3      	b.n	801181a <_svfiprintf_r+0x92>
 8011872:	9a03      	ldr	r2, [sp, #12]
 8011874:	1d11      	adds	r1, r2, #4
 8011876:	6812      	ldr	r2, [r2, #0]
 8011878:	9103      	str	r1, [sp, #12]
 801187a:	2a00      	cmp	r2, #0
 801187c:	db01      	blt.n	8011882 <_svfiprintf_r+0xfa>
 801187e:	9207      	str	r2, [sp, #28]
 8011880:	e004      	b.n	801188c <_svfiprintf_r+0x104>
 8011882:	4252      	negs	r2, r2
 8011884:	f043 0302 	orr.w	r3, r3, #2
 8011888:	9207      	str	r2, [sp, #28]
 801188a:	9304      	str	r3, [sp, #16]
 801188c:	783b      	ldrb	r3, [r7, #0]
 801188e:	2b2e      	cmp	r3, #46	; 0x2e
 8011890:	d10c      	bne.n	80118ac <_svfiprintf_r+0x124>
 8011892:	787b      	ldrb	r3, [r7, #1]
 8011894:	2b2a      	cmp	r3, #42	; 0x2a
 8011896:	d133      	bne.n	8011900 <_svfiprintf_r+0x178>
 8011898:	9b03      	ldr	r3, [sp, #12]
 801189a:	1d1a      	adds	r2, r3, #4
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	9203      	str	r2, [sp, #12]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	bfb8      	it	lt
 80118a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80118a8:	3702      	adds	r7, #2
 80118aa:	9305      	str	r3, [sp, #20]
 80118ac:	4d2e      	ldr	r5, [pc, #184]	; (8011968 <_svfiprintf_r+0x1e0>)
 80118ae:	7839      	ldrb	r1, [r7, #0]
 80118b0:	2203      	movs	r2, #3
 80118b2:	4628      	mov	r0, r5
 80118b4:	f7ee fca4 	bl	8000200 <memchr>
 80118b8:	b138      	cbz	r0, 80118ca <_svfiprintf_r+0x142>
 80118ba:	2340      	movs	r3, #64	; 0x40
 80118bc:	1b40      	subs	r0, r0, r5
 80118be:	fa03 f000 	lsl.w	r0, r3, r0
 80118c2:	9b04      	ldr	r3, [sp, #16]
 80118c4:	4303      	orrs	r3, r0
 80118c6:	3701      	adds	r7, #1
 80118c8:	9304      	str	r3, [sp, #16]
 80118ca:	7839      	ldrb	r1, [r7, #0]
 80118cc:	4827      	ldr	r0, [pc, #156]	; (801196c <_svfiprintf_r+0x1e4>)
 80118ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118d2:	2206      	movs	r2, #6
 80118d4:	1c7e      	adds	r6, r7, #1
 80118d6:	f7ee fc93 	bl	8000200 <memchr>
 80118da:	2800      	cmp	r0, #0
 80118dc:	d038      	beq.n	8011950 <_svfiprintf_r+0x1c8>
 80118de:	4b24      	ldr	r3, [pc, #144]	; (8011970 <_svfiprintf_r+0x1e8>)
 80118e0:	bb13      	cbnz	r3, 8011928 <_svfiprintf_r+0x1a0>
 80118e2:	9b03      	ldr	r3, [sp, #12]
 80118e4:	3307      	adds	r3, #7
 80118e6:	f023 0307 	bic.w	r3, r3, #7
 80118ea:	3308      	adds	r3, #8
 80118ec:	9303      	str	r3, [sp, #12]
 80118ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118f0:	444b      	add	r3, r9
 80118f2:	9309      	str	r3, [sp, #36]	; 0x24
 80118f4:	e76d      	b.n	80117d2 <_svfiprintf_r+0x4a>
 80118f6:	fb05 3202 	mla	r2, r5, r2, r3
 80118fa:	2001      	movs	r0, #1
 80118fc:	460f      	mov	r7, r1
 80118fe:	e7a6      	b.n	801184e <_svfiprintf_r+0xc6>
 8011900:	2300      	movs	r3, #0
 8011902:	3701      	adds	r7, #1
 8011904:	9305      	str	r3, [sp, #20]
 8011906:	4619      	mov	r1, r3
 8011908:	250a      	movs	r5, #10
 801190a:	4638      	mov	r0, r7
 801190c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011910:	3a30      	subs	r2, #48	; 0x30
 8011912:	2a09      	cmp	r2, #9
 8011914:	d903      	bls.n	801191e <_svfiprintf_r+0x196>
 8011916:	2b00      	cmp	r3, #0
 8011918:	d0c8      	beq.n	80118ac <_svfiprintf_r+0x124>
 801191a:	9105      	str	r1, [sp, #20]
 801191c:	e7c6      	b.n	80118ac <_svfiprintf_r+0x124>
 801191e:	fb05 2101 	mla	r1, r5, r1, r2
 8011922:	2301      	movs	r3, #1
 8011924:	4607      	mov	r7, r0
 8011926:	e7f0      	b.n	801190a <_svfiprintf_r+0x182>
 8011928:	ab03      	add	r3, sp, #12
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	4622      	mov	r2, r4
 801192e:	4b11      	ldr	r3, [pc, #68]	; (8011974 <_svfiprintf_r+0x1ec>)
 8011930:	a904      	add	r1, sp, #16
 8011932:	4640      	mov	r0, r8
 8011934:	f3af 8000 	nop.w
 8011938:	f1b0 3fff 	cmp.w	r0, #4294967295
 801193c:	4681      	mov	r9, r0
 801193e:	d1d6      	bne.n	80118ee <_svfiprintf_r+0x166>
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	065b      	lsls	r3, r3, #25
 8011944:	f53f af35 	bmi.w	80117b2 <_svfiprintf_r+0x2a>
 8011948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801194a:	b01d      	add	sp, #116	; 0x74
 801194c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011950:	ab03      	add	r3, sp, #12
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	4622      	mov	r2, r4
 8011956:	4b07      	ldr	r3, [pc, #28]	; (8011974 <_svfiprintf_r+0x1ec>)
 8011958:	a904      	add	r1, sp, #16
 801195a:	4640      	mov	r0, r8
 801195c:	f7ff f882 	bl	8010a64 <_printf_i>
 8011960:	e7ea      	b.n	8011938 <_svfiprintf_r+0x1b0>
 8011962:	bf00      	nop
 8011964:	080131f2 	.word	0x080131f2
 8011968:	080131f8 	.word	0x080131f8
 801196c:	080131fc 	.word	0x080131fc
 8011970:	00000000 	.word	0x00000000
 8011974:	080116d5 	.word	0x080116d5

08011978 <_sbrk_r>:
 8011978:	b538      	push	{r3, r4, r5, lr}
 801197a:	4c06      	ldr	r4, [pc, #24]	; (8011994 <_sbrk_r+0x1c>)
 801197c:	2300      	movs	r3, #0
 801197e:	4605      	mov	r5, r0
 8011980:	4608      	mov	r0, r1
 8011982:	6023      	str	r3, [r4, #0]
 8011984:	f7fb fed2 	bl	800d72c <_sbrk>
 8011988:	1c43      	adds	r3, r0, #1
 801198a:	d102      	bne.n	8011992 <_sbrk_r+0x1a>
 801198c:	6823      	ldr	r3, [r4, #0]
 801198e:	b103      	cbz	r3, 8011992 <_sbrk_r+0x1a>
 8011990:	602b      	str	r3, [r5, #0]
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	20014f30 	.word	0x20014f30

08011998 <_raise_r>:
 8011998:	291f      	cmp	r1, #31
 801199a:	b538      	push	{r3, r4, r5, lr}
 801199c:	4604      	mov	r4, r0
 801199e:	460d      	mov	r5, r1
 80119a0:	d904      	bls.n	80119ac <_raise_r+0x14>
 80119a2:	2316      	movs	r3, #22
 80119a4:	6003      	str	r3, [r0, #0]
 80119a6:	f04f 30ff 	mov.w	r0, #4294967295
 80119aa:	bd38      	pop	{r3, r4, r5, pc}
 80119ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119ae:	b112      	cbz	r2, 80119b6 <_raise_r+0x1e>
 80119b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119b4:	b94b      	cbnz	r3, 80119ca <_raise_r+0x32>
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 f830 	bl	8011a1c <_getpid_r>
 80119bc:	462a      	mov	r2, r5
 80119be:	4601      	mov	r1, r0
 80119c0:	4620      	mov	r0, r4
 80119c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119c6:	f000 b817 	b.w	80119f8 <_kill_r>
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d00a      	beq.n	80119e4 <_raise_r+0x4c>
 80119ce:	1c59      	adds	r1, r3, #1
 80119d0:	d103      	bne.n	80119da <_raise_r+0x42>
 80119d2:	2316      	movs	r3, #22
 80119d4:	6003      	str	r3, [r0, #0]
 80119d6:	2001      	movs	r0, #1
 80119d8:	e7e7      	b.n	80119aa <_raise_r+0x12>
 80119da:	2400      	movs	r4, #0
 80119dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119e0:	4628      	mov	r0, r5
 80119e2:	4798      	blx	r3
 80119e4:	2000      	movs	r0, #0
 80119e6:	e7e0      	b.n	80119aa <_raise_r+0x12>

080119e8 <raise>:
 80119e8:	4b02      	ldr	r3, [pc, #8]	; (80119f4 <raise+0xc>)
 80119ea:	4601      	mov	r1, r0
 80119ec:	6818      	ldr	r0, [r3, #0]
 80119ee:	f7ff bfd3 	b.w	8011998 <_raise_r>
 80119f2:	bf00      	nop
 80119f4:	200002c8 	.word	0x200002c8

080119f8 <_kill_r>:
 80119f8:	b538      	push	{r3, r4, r5, lr}
 80119fa:	4c07      	ldr	r4, [pc, #28]	; (8011a18 <_kill_r+0x20>)
 80119fc:	2300      	movs	r3, #0
 80119fe:	4605      	mov	r5, r0
 8011a00:	4608      	mov	r0, r1
 8011a02:	4611      	mov	r1, r2
 8011a04:	6023      	str	r3, [r4, #0]
 8011a06:	f7fb fe09 	bl	800d61c <_kill>
 8011a0a:	1c43      	adds	r3, r0, #1
 8011a0c:	d102      	bne.n	8011a14 <_kill_r+0x1c>
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	b103      	cbz	r3, 8011a14 <_kill_r+0x1c>
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	bd38      	pop	{r3, r4, r5, pc}
 8011a16:	bf00      	nop
 8011a18:	20014f30 	.word	0x20014f30

08011a1c <_getpid_r>:
 8011a1c:	f7fb bdf6 	b.w	800d60c <_getpid>

08011a20 <__sread>:
 8011a20:	b510      	push	{r4, lr}
 8011a22:	460c      	mov	r4, r1
 8011a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a28:	f000 f89e 	bl	8011b68 <_read_r>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	bfab      	itete	ge
 8011a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a32:	89a3      	ldrhlt	r3, [r4, #12]
 8011a34:	181b      	addge	r3, r3, r0
 8011a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a3a:	bfac      	ite	ge
 8011a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a3e:	81a3      	strhlt	r3, [r4, #12]
 8011a40:	bd10      	pop	{r4, pc}

08011a42 <__swrite>:
 8011a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a46:	461f      	mov	r7, r3
 8011a48:	898b      	ldrh	r3, [r1, #12]
 8011a4a:	05db      	lsls	r3, r3, #23
 8011a4c:	4605      	mov	r5, r0
 8011a4e:	460c      	mov	r4, r1
 8011a50:	4616      	mov	r6, r2
 8011a52:	d505      	bpl.n	8011a60 <__swrite+0x1e>
 8011a54:	2302      	movs	r3, #2
 8011a56:	2200      	movs	r2, #0
 8011a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5c:	f000 f868 	bl	8011b30 <_lseek_r>
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a6a:	81a3      	strh	r3, [r4, #12]
 8011a6c:	4632      	mov	r2, r6
 8011a6e:	463b      	mov	r3, r7
 8011a70:	4628      	mov	r0, r5
 8011a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a76:	f000 b817 	b.w	8011aa8 <_write_r>

08011a7a <__sseek>:
 8011a7a:	b510      	push	{r4, lr}
 8011a7c:	460c      	mov	r4, r1
 8011a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a82:	f000 f855 	bl	8011b30 <_lseek_r>
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	bf15      	itete	ne
 8011a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a96:	81a3      	strheq	r3, [r4, #12]
 8011a98:	bf18      	it	ne
 8011a9a:	81a3      	strhne	r3, [r4, #12]
 8011a9c:	bd10      	pop	{r4, pc}

08011a9e <__sclose>:
 8011a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa2:	f000 b813 	b.w	8011acc <_close_r>
	...

08011aa8 <_write_r>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4c07      	ldr	r4, [pc, #28]	; (8011ac8 <_write_r+0x20>)
 8011aac:	4605      	mov	r5, r0
 8011aae:	4608      	mov	r0, r1
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	6022      	str	r2, [r4, #0]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	f7fb fde7 	bl	800d68a <_write>
 8011abc:	1c43      	adds	r3, r0, #1
 8011abe:	d102      	bne.n	8011ac6 <_write_r+0x1e>
 8011ac0:	6823      	ldr	r3, [r4, #0]
 8011ac2:	b103      	cbz	r3, 8011ac6 <_write_r+0x1e>
 8011ac4:	602b      	str	r3, [r5, #0]
 8011ac6:	bd38      	pop	{r3, r4, r5, pc}
 8011ac8:	20014f30 	.word	0x20014f30

08011acc <_close_r>:
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	4c06      	ldr	r4, [pc, #24]	; (8011ae8 <_close_r+0x1c>)
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	4605      	mov	r5, r0
 8011ad4:	4608      	mov	r0, r1
 8011ad6:	6023      	str	r3, [r4, #0]
 8011ad8:	f7fb fdf3 	bl	800d6c2 <_close>
 8011adc:	1c43      	adds	r3, r0, #1
 8011ade:	d102      	bne.n	8011ae6 <_close_r+0x1a>
 8011ae0:	6823      	ldr	r3, [r4, #0]
 8011ae2:	b103      	cbz	r3, 8011ae6 <_close_r+0x1a>
 8011ae4:	602b      	str	r3, [r5, #0]
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	20014f30 	.word	0x20014f30

08011aec <_fstat_r>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	4c07      	ldr	r4, [pc, #28]	; (8011b0c <_fstat_r+0x20>)
 8011af0:	2300      	movs	r3, #0
 8011af2:	4605      	mov	r5, r0
 8011af4:	4608      	mov	r0, r1
 8011af6:	4611      	mov	r1, r2
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	f7fb fdee 	bl	800d6da <_fstat>
 8011afe:	1c43      	adds	r3, r0, #1
 8011b00:	d102      	bne.n	8011b08 <_fstat_r+0x1c>
 8011b02:	6823      	ldr	r3, [r4, #0]
 8011b04:	b103      	cbz	r3, 8011b08 <_fstat_r+0x1c>
 8011b06:	602b      	str	r3, [r5, #0]
 8011b08:	bd38      	pop	{r3, r4, r5, pc}
 8011b0a:	bf00      	nop
 8011b0c:	20014f30 	.word	0x20014f30

08011b10 <_isatty_r>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	4c06      	ldr	r4, [pc, #24]	; (8011b2c <_isatty_r+0x1c>)
 8011b14:	2300      	movs	r3, #0
 8011b16:	4605      	mov	r5, r0
 8011b18:	4608      	mov	r0, r1
 8011b1a:	6023      	str	r3, [r4, #0]
 8011b1c:	f7fb fded 	bl	800d6fa <_isatty>
 8011b20:	1c43      	adds	r3, r0, #1
 8011b22:	d102      	bne.n	8011b2a <_isatty_r+0x1a>
 8011b24:	6823      	ldr	r3, [r4, #0]
 8011b26:	b103      	cbz	r3, 8011b2a <_isatty_r+0x1a>
 8011b28:	602b      	str	r3, [r5, #0]
 8011b2a:	bd38      	pop	{r3, r4, r5, pc}
 8011b2c:	20014f30 	.word	0x20014f30

08011b30 <_lseek_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4c07      	ldr	r4, [pc, #28]	; (8011b50 <_lseek_r+0x20>)
 8011b34:	4605      	mov	r5, r0
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	6022      	str	r2, [r4, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	f7fb fde6 	bl	800d710 <_lseek>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_lseek_r+0x1e>
 8011b48:	6823      	ldr	r3, [r4, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_lseek_r+0x1e>
 8011b4c:	602b      	str	r3, [r5, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	20014f30 	.word	0x20014f30

08011b54 <__malloc_lock>:
 8011b54:	4770      	bx	lr

08011b56 <__malloc_unlock>:
 8011b56:	4770      	bx	lr

08011b58 <_malloc_usable_size_r>:
 8011b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b5c:	1f18      	subs	r0, r3, #4
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	bfbc      	itt	lt
 8011b62:	580b      	ldrlt	r3, [r1, r0]
 8011b64:	18c0      	addlt	r0, r0, r3
 8011b66:	4770      	bx	lr

08011b68 <_read_r>:
 8011b68:	b538      	push	{r3, r4, r5, lr}
 8011b6a:	4c07      	ldr	r4, [pc, #28]	; (8011b88 <_read_r+0x20>)
 8011b6c:	4605      	mov	r5, r0
 8011b6e:	4608      	mov	r0, r1
 8011b70:	4611      	mov	r1, r2
 8011b72:	2200      	movs	r2, #0
 8011b74:	6022      	str	r2, [r4, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	f7fb fd6a 	bl	800d650 <_read>
 8011b7c:	1c43      	adds	r3, r0, #1
 8011b7e:	d102      	bne.n	8011b86 <_read_r+0x1e>
 8011b80:	6823      	ldr	r3, [r4, #0]
 8011b82:	b103      	cbz	r3, 8011b86 <_read_r+0x1e>
 8011b84:	602b      	str	r3, [r5, #0]
 8011b86:	bd38      	pop	{r3, r4, r5, pc}
 8011b88:	20014f30 	.word	0x20014f30

08011b8c <_init>:
 8011b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8e:	bf00      	nop
 8011b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b92:	bc08      	pop	{r3}
 8011b94:	469e      	mov	lr, r3
 8011b96:	4770      	bx	lr

08011b98 <_fini>:
 8011b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9a:	bf00      	nop
 8011b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b9e:	bc08      	pop	{r3}
 8011ba0:	469e      	mov	lr, r3
 8011ba2:	4770      	bx	lr
