
My_Kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001760  080108f8  080108f8  000208f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012058  08012058  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  08012058  08012058  00022058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012060  08012060  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012060  08012060  00022060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012064  08012064  00022064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08012068  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015298  200004a0  08012504  000304a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20015738  08012504  00035738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .lfs          000e0000  08020000  08020000  00040000  2**0
                  ALLOC
 13 .debug_info   0002a42b  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005432  00000000  00000000  0005a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001768  00000000  00000000  0005fd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028bfe  00000000  00000000  00061498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ad6e  00000000  00000000  0008a096  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0574  00000000  00000000  000a4e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175378  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001828  00000000  00000000  001753f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00006c38  00000000  00000000  00176c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a0 	.word	0x200004a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080108e0 	.word	0x080108e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a4 	.word	0x200004a4
 80001cc:	080108e0 	.word	0x080108e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b986 	b.w	80005a4 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9e08      	ldr	r6, [sp, #32]
 80002de:	4604      	mov	r4, r0
 80002e0:	4688      	mov	r8, r1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d14b      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e6:	428a      	cmp	r2, r1
 80002e8:	4615      	mov	r5, r2
 80002ea:	d967      	bls.n	80003bc <__udivmoddi4+0xe4>
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	b14a      	cbz	r2, 8000306 <__udivmoddi4+0x2e>
 80002f2:	f1c2 0720 	rsb	r7, r2, #32
 80002f6:	fa01 f302 	lsl.w	r3, r1, r2
 80002fa:	fa20 f707 	lsr.w	r7, r0, r7
 80002fe:	4095      	lsls	r5, r2
 8000300:	ea47 0803 	orr.w	r8, r7, r3
 8000304:	4094      	lsls	r4, r2
 8000306:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000310:	fa1f fc85 	uxth.w	ip, r5
 8000314:	fb0e 8817 	mls	r8, lr, r7, r8
 8000318:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031c:	fb07 f10c 	mul.w	r1, r7, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x60>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f107 30ff 	add.w	r0, r7, #4294967295
 800032a:	f080 811b 	bcs.w	8000564 <__udivmoddi4+0x28c>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 8118 	bls.w	8000564 <__udivmoddi4+0x28c>
 8000334:	3f02      	subs	r7, #2
 8000336:	442b      	add	r3, r5
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000340:	fb0e 3310 	mls	r3, lr, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 fc0c 	mul.w	ip, r0, ip
 800034c:	45a4      	cmp	ip, r4
 800034e:	d909      	bls.n	8000364 <__udivmoddi4+0x8c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x290>
 800035a:	45a4      	cmp	ip, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x290>
 8000360:	3802      	subs	r0, #2
 8000362:	442c      	add	r4, r5
 8000364:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000368:	eba4 040c 	sub.w	r4, r4, ip
 800036c:	2700      	movs	r7, #0
 800036e:	b11e      	cbz	r6, 8000378 <__udivmoddi4+0xa0>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c6 4300 	strd	r4, r3, [r6]
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xbe>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80eb 	beq.w	800055e <__udivmoddi4+0x286>
 8000388:	2700      	movs	r7, #0
 800038a:	e9c6 0100 	strd	r0, r1, [r6]
 800038e:	4638      	mov	r0, r7
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f783 	clz	r7, r3
 800039a:	2f00      	cmp	r7, #0
 800039c:	d147      	bne.n	800042e <__udivmoddi4+0x156>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd0>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80fa 	bhi.w	800059c <__udivmoddi4+0x2c4>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4698      	mov	r8, r3
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa0>
 80003b6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa0>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xe8>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 808f 	bne.w	80004e8 <__udivmoddi4+0x210>
 80003ca:	1b49      	subs	r1, r1, r5
 80003cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d0:	fa1f f885 	uxth.w	r8, r5
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80003da:	0c23      	lsrs	r3, r4, #16
 80003dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb08 f10c 	mul.w	r1, r8, ip
 80003e8:	4299      	cmp	r1, r3
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x124>
 80003ec:	18eb      	adds	r3, r5, r3
 80003ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x122>
 80003f4:	4299      	cmp	r1, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2bc>
 80003fa:	4684      	mov	ip, r0
 80003fc:	1a59      	subs	r1, r3, r1
 80003fe:	b2a3      	uxth	r3, r4
 8000400:	fbb1 f0fe 	udiv	r0, r1, lr
 8000404:	fb0e 1410 	mls	r4, lr, r0, r1
 8000408:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800040c:	fb08 f800 	mul.w	r8, r8, r0
 8000410:	45a0      	cmp	r8, r4
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x14c>
 8000414:	192c      	adds	r4, r5, r4
 8000416:	f100 33ff 	add.w	r3, r0, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x14a>
 800041c:	45a0      	cmp	r8, r4
 800041e:	f200 80b6 	bhi.w	800058e <__udivmoddi4+0x2b6>
 8000422:	4618      	mov	r0, r3
 8000424:	eba4 0408 	sub.w	r4, r4, r8
 8000428:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800042c:	e79f      	b.n	800036e <__udivmoddi4+0x96>
 800042e:	f1c7 0c20 	rsb	ip, r7, #32
 8000432:	40bb      	lsls	r3, r7
 8000434:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000438:	ea4e 0e03 	orr.w	lr, lr, r3
 800043c:	fa01 f407 	lsl.w	r4, r1, r7
 8000440:	fa20 f50c 	lsr.w	r5, r0, ip
 8000444:	fa21 f30c 	lsr.w	r3, r1, ip
 8000448:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800044c:	4325      	orrs	r5, r4
 800044e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000452:	0c2c      	lsrs	r4, r5, #16
 8000454:	fb08 3319 	mls	r3, r8, r9, r3
 8000458:	fa1f fa8e 	uxth.w	sl, lr
 800045c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000460:	fb09 f40a 	mul.w	r4, r9, sl
 8000464:	429c      	cmp	r4, r3
 8000466:	fa02 f207 	lsl.w	r2, r2, r7
 800046a:	fa00 f107 	lsl.w	r1, r0, r7
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b0>
 8000470:	eb1e 0303 	adds.w	r3, lr, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	f080 8087 	bcs.w	800058a <__udivmoddi4+0x2b2>
 800047c:	429c      	cmp	r4, r3
 800047e:	f240 8084 	bls.w	800058a <__udivmoddi4+0x2b2>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4473      	add	r3, lr
 8000488:	1b1b      	subs	r3, r3, r4
 800048a:	b2ad      	uxth	r5, r5
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3310 	mls	r3, r8, r0, r3
 8000494:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000498:	fb00 fa0a 	mul.w	sl, r0, sl
 800049c:	45a2      	cmp	sl, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1da>
 80004a0:	eb1e 0404 	adds.w	r4, lr, r4
 80004a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a8:	d26b      	bcs.n	8000582 <__udivmoddi4+0x2aa>
 80004aa:	45a2      	cmp	sl, r4
 80004ac:	d969      	bls.n	8000582 <__udivmoddi4+0x2aa>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4474      	add	r4, lr
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	eba4 040a 	sub.w	r4, r4, sl
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c2      	mov	sl, r8
 80004c2:	464b      	mov	r3, r9
 80004c4:	d354      	bcc.n	8000570 <__udivmoddi4+0x298>
 80004c6:	d051      	beq.n	800056c <__udivmoddi4+0x294>
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d069      	beq.n	80005a0 <__udivmoddi4+0x2c8>
 80004cc:	ebb1 050a 	subs.w	r5, r1, sl
 80004d0:	eb64 0403 	sbc.w	r4, r4, r3
 80004d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	40fc      	lsrs	r4, r7
 80004dc:	ea4c 0505 	orr.w	r5, ip, r5
 80004e0:	e9c6 5400 	strd	r5, r4, [r6]
 80004e4:	2700      	movs	r7, #0
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0xa0>
 80004e8:	f1c2 0320 	rsb	r3, r2, #32
 80004ec:	fa20 f703 	lsr.w	r7, r0, r3
 80004f0:	4095      	lsls	r5, r2
 80004f2:	fa01 f002 	lsl.w	r0, r1, r2
 80004f6:	fa21 f303 	lsr.w	r3, r1, r3
 80004fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004fe:	4338      	orrs	r0, r7
 8000500:	0c01      	lsrs	r1, r0, #16
 8000502:	fbb3 f7fe 	udiv	r7, r3, lr
 8000506:	fa1f f885 	uxth.w	r8, r5
 800050a:	fb0e 3317 	mls	r3, lr, r7, r3
 800050e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000512:	fb07 f308 	mul.w	r3, r7, r8
 8000516:	428b      	cmp	r3, r1
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x256>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f107 3cff 	add.w	ip, r7, #4294967295
 8000524:	d22f      	bcs.n	8000586 <__udivmoddi4+0x2ae>
 8000526:	428b      	cmp	r3, r1
 8000528:	d92d      	bls.n	8000586 <__udivmoddi4+0x2ae>
 800052a:	3f02      	subs	r7, #2
 800052c:	4429      	add	r1, r5
 800052e:	1acb      	subs	r3, r1, r3
 8000530:	b281      	uxth	r1, r0
 8000532:	fbb3 f0fe 	udiv	r0, r3, lr
 8000536:	fb0e 3310 	mls	r3, lr, r0, r3
 800053a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053e:	fb00 f308 	mul.w	r3, r0, r8
 8000542:	428b      	cmp	r3, r1
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x27e>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f100 3cff 	add.w	ip, r0, #4294967295
 800054c:	d217      	bcs.n	800057e <__udivmoddi4+0x2a6>
 800054e:	428b      	cmp	r3, r1
 8000550:	d915      	bls.n	800057e <__udivmoddi4+0x2a6>
 8000552:	3802      	subs	r0, #2
 8000554:	4429      	add	r1, r5
 8000556:	1ac9      	subs	r1, r1, r3
 8000558:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800055c:	e73b      	b.n	80003d6 <__udivmoddi4+0xfe>
 800055e:	4637      	mov	r7, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e709      	b.n	8000378 <__udivmoddi4+0xa0>
 8000564:	4607      	mov	r7, r0
 8000566:	e6e7      	b.n	8000338 <__udivmoddi4+0x60>
 8000568:	4618      	mov	r0, r3
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x8c>
 800056c:	4541      	cmp	r1, r8
 800056e:	d2ab      	bcs.n	80004c8 <__udivmoddi4+0x1f0>
 8000570:	ebb8 0a02 	subs.w	sl, r8, r2
 8000574:	eb69 020e 	sbc.w	r2, r9, lr
 8000578:	3801      	subs	r0, #1
 800057a:	4613      	mov	r3, r2
 800057c:	e7a4      	b.n	80004c8 <__udivmoddi4+0x1f0>
 800057e:	4660      	mov	r0, ip
 8000580:	e7e9      	b.n	8000556 <__udivmoddi4+0x27e>
 8000582:	4618      	mov	r0, r3
 8000584:	e795      	b.n	80004b2 <__udivmoddi4+0x1da>
 8000586:	4667      	mov	r7, ip
 8000588:	e7d1      	b.n	800052e <__udivmoddi4+0x256>
 800058a:	4681      	mov	r9, r0
 800058c:	e77c      	b.n	8000488 <__udivmoddi4+0x1b0>
 800058e:	3802      	subs	r0, #2
 8000590:	442c      	add	r4, r5
 8000592:	e747      	b.n	8000424 <__udivmoddi4+0x14c>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	442b      	add	r3, r5
 800059a:	e72f      	b.n	80003fc <__udivmoddi4+0x124>
 800059c:	4638      	mov	r0, r7
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xda>
 80005a0:	4637      	mov	r7, r6
 80005a2:	e6e9      	b.n	8000378 <__udivmoddi4+0xa0>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <cli_is_terminator>:

/**********************************************
 * PRIVATE FUNCTIONS
 *********************************************/
 
static inline bool cli_is_terminator(cliElement_t const * const e){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <cli_is_terminator+0x12>
 80005b6:	2300      	movs	r3, #0
 80005b8:	e019      	b.n	80005ee <cli_is_terminator+0x46>
    return (e->name == NULL && e->action == NULL && e->args == NULL && e->desc == NULL && e->argsDesc == NULL);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d111      	bne.n	80005e6 <cli_is_terminator+0x3e>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10d      	bne.n	80005e6 <cli_is_terminator+0x3e>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d109      	bne.n	80005e6 <cli_is_terminator+0x3e>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d105      	bne.n	80005e6 <cli_is_terminator+0x3e>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <cli_is_terminator+0x3e>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <cli_is_terminator+0x40>
 80005e6:	2300      	movs	r3, #0
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <cli_is_sub_menu>:

static inline bool cli_is_sub_menu(cliElement_t const * const e){
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <cli_is_sub_menu+0x12>
 8000608:	2300      	movs	r3, #0
 800060a:	e006      	b.n	800061a <cli_is_sub_menu+0x20>
    return (e->subMenuRef != NULL);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <cli_is_action>:

static inline bool cli_is_action(cliElement_t const * const e){
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d101      	bne.n	8000638 <cli_is_action+0x12>
 8000634:	2300      	movs	r3, #0
 8000636:	e006      	b.n	8000646 <cli_is_action+0x20>
    return (e->action != NULL);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	b2db      	uxtb	r3, r3
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <cli_verify_args_str>:

static int64_t cli_verify_args_str(cliElement_t const * const e, bool* elipsisPresent){
 8000652:	b590      	push	{r4, r7, lr}
 8000654:	b087      	sub	sp, #28
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
    if(e->args == NULL) return -1;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d104      	bne.n	800066e <cli_verify_args_str+0x1c>
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	f04f 34ff 	mov.w	r4, #4294967295
 800066c:	e063      	b.n	8000736 <cli_verify_args_str+0xe4>
    
    size_t len = strlen(e->args);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fdac 	bl	80001d0 <strlen>
 8000678:	60f8      	str	r0, [r7, #12]
    size_t argsLen = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
    *elipsisPresent = 0;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
    
    for(int i = 0; i < len; i++){
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	e04e      	b.n	8000728 <cli_verify_args_str+0xd6>
        switch(e->args[i]){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	68da      	ldr	r2, [r3, #12]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b62      	cmp	r3, #98	; 0x62
 8000696:	d00c      	beq.n	80006b2 <cli_verify_args_str+0x60>
 8000698:	2b62      	cmp	r3, #98	; 0x62
 800069a:	dc04      	bgt.n	80006a6 <cli_verify_args_str+0x54>
 800069c:	2b2a      	cmp	r3, #42	; 0x2a
 800069e:	d008      	beq.n	80006b2 <cli_verify_args_str+0x60>
 80006a0:	2b2e      	cmp	r3, #46	; 0x2e
 80006a2:	d00a      	beq.n	80006ba <cli_verify_args_str+0x68>
 80006a4:	e038      	b.n	8000718 <cli_verify_args_str+0xc6>
 80006a6:	2b73      	cmp	r3, #115	; 0x73
 80006a8:	d003      	beq.n	80006b2 <cli_verify_args_str+0x60>
 80006aa:	2b75      	cmp	r3, #117	; 0x75
 80006ac:	d001      	beq.n	80006b2 <cli_verify_args_str+0x60>
 80006ae:	2b69      	cmp	r3, #105	; 0x69
 80006b0:	d132      	bne.n	8000718 <cli_verify_args_str+0xc6>
            case 'u' :
            case 'i' :
            case 's' :
            case 'b' :
            case '*' : {
                argsLen++;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
                break;
 80006b8:	e033      	b.n	8000722 <cli_verify_args_str+0xd0>
            }
            
            case '.' : {
                if(len < i + 2 || e->args[i + 1] != '.' || e->args[i + 2] != '.'){
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	3302      	adds	r3, #2
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d30f      	bcc.n	80006e6 <cli_verify_args_str+0x94>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b2e      	cmp	r3, #46	; 0x2e
 80006d4:	d107      	bne.n	80006e6 <cli_verify_args_str+0x94>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3302      	adds	r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b2e      	cmp	r3, #46	; 0x2e
 80006e4:	d004      	beq.n	80006f0 <cli_verify_args_str+0x9e>
                    ERR_PRINTLN("Arguments string list contains incomplete elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	f04f 34ff 	mov.w	r4, #4294967295
 80006ee:	e022      	b.n	8000736 <cli_verify_args_str+0xe4>
                }
                
                DBG_PRINTLN("%d, %d", len, i);
                
                if(len > i + 3){
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3303      	adds	r3, #3
 80006f4:	461a      	mov	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d904      	bls.n	8000706 <cli_verify_args_str+0xb4>
                    ERR_PRINTLN("Arguments string list contains arguments after elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	f04f 34ff 	mov.w	r4, #4294967295
 8000704:	e017      	b.n	8000736 <cli_verify_args_str+0xe4>
                }
                
                *elipsisPresent = 1;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
                return argsLen++;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	617a      	str	r2, [r7, #20]
 8000712:	f04f 0400 	mov.w	r4, #0
 8000716:	e00e      	b.n	8000736 <cli_verify_args_str+0xe4>
            }
            
            default : {
                ERR_PRINTLN("Unrecognized character in argument list index %d for action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                ERR_PRINTLN("");
                return -1;
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	f04f 34ff 	mov.w	r4, #4294967295
 8000720:	e009      	b.n	8000736 <cli_verify_args_str+0xe4>
    for(int i = 0; i < len; i++){
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	3301      	adds	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8ac      	bhi.n	800068a <cli_verify_args_str+0x38>
            }
        }
    }
    
    return argsLen;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	f04f 0400 	mov.w	r4, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	4621      	mov	r1, r4
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <cli_print_element>:

static void cli_print_element(cliElement_t const * const e){
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d04b      	beq.n	80007e6 <cli_print_element+0xa6>
    
    bool const is_sub_menu = cli_is_sub_menu(e);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff53 	bl	80005fa <cli_is_sub_menu>
 8000754:	4603      	mov	r3, r0
 8000756:	76fb      	strb	r3, [r7, #27]

    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <cli_print_element+0x26>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	e000      	b.n	8000768 <cli_print_element+0x28>
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <cli_print_element+0xb0>)
 8000768:	617b      	str	r3, [r7, #20]
    
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 800076a:	7efb      	ldrb	r3, [r7, #27]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <cli_print_element+0x34>
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <cli_print_element+0xb4>)
 8000772:	e000      	b.n	8000776 <cli_print_element+0x36>
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <cli_print_element+0xb8>)
 8000776:	461a      	mov	r2, r3
 8000778:	6979      	ldr	r1, [r7, #20]
 800077a:	4820      	ldr	r0, [pc, #128]	; (80007fc <cli_print_element+0xbc>)
 800077c:	f001 fae6 	bl	8001d4c <cli_printf>

    size_t len = (size_t)(strlen(name) + (size_t)(3 * is_sub_menu) + 1); //name length with '... '
 8000780:	6978      	ldr	r0, [r7, #20]
 8000782:	f7ff fd25 	bl	80001d0 <strlen>
 8000786:	4601      	mov	r1, r0
 8000788:	7efa      	ldrb	r2, [r7, #27]
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	440b      	add	r3, r1
 8000792:	3301      	adds	r3, #1
 8000794:	613b      	str	r3, [r7, #16]

    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	3316      	adds	r3, #22
 800079a:	4a19      	ldr	r2, [pc, #100]	; (8000800 <cli_print_element+0xc0>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	2216      	movs	r2, #22
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	60fb      	str	r3, [r7, #12]

    spaces -= len;
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	60fb      	str	r3, [r7, #12]

    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e005      	b.n	80007c4 <cli_print_element+0x84>
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <cli_print_element+0xb8>)
 80007ba:	f001 fac7 	bl	8001d4c <cli_printf>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	69fa      	ldr	r2, [r7, #28]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d3f5      	bcc.n	80007b8 <cli_print_element+0x78>
    
    MENU_PRINTLN("- %s", ( (e->desc == NULL) ? "NULL_DESC" : e->desc) );
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <cli_print_element+0x9a>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	e000      	b.n	80007dc <cli_print_element+0x9c>
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <cli_print_element+0xc4>)
 80007dc:	4619      	mov	r1, r3
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <cli_print_element+0xc8>)
 80007e0:	f001 fab4 	bl	8001d4c <cli_printf>
 80007e4:	e000      	b.n	80007e8 <cli_print_element+0xa8>
    if(e == NULL) return;
 80007e6:	bf00      	nop
} 
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0801095c 	.word	0x0801095c
 80007f4:	08010968 	.word	0x08010968
 80007f8:	08010970 	.word	0x08010970
 80007fc:	08010974 	.word	0x08010974
 8000800:	ba2e8ba3 	.word	0xba2e8ba3
 8000804:	0801097c 	.word	0x0801097c
 8000808:	08010988 	.word	0x08010988

0800080c <cli_print_menu>:

static void cli_print_menu(cliElement_t const * const e){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d029      	beq.n	800086e <cli_print_menu+0x62>
    if(e->subMenuRef == NULL){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d027      	beq.n	8000872 <cli_print_menu+0x66>
        ERR_PRINTLN("Reference of menu '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;  
    } 

    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e00d      	b.n	8000844 <cli_print_menu+0x38>
        cli_print_element(&e->subMenuRef[i]);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6859      	ldr	r1, [r3, #4]
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	440b      	add	r3, r1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff81 	bl	8000740 <cli_print_element>
    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	3301      	adds	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fea7 	bl	80005a8 <cli_is_terminator>
 800085a:	4603      	mov	r3, r0
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1e0      	bne.n	8000828 <cli_print_menu+0x1c>
        
    MENU_PRINTLN("");
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <cli_print_menu+0x70>)
 8000868:	f001 fa70 	bl	8001d4c <cli_printf>
 800086c:	e002      	b.n	8000874 <cli_print_menu+0x68>
    if(e == NULL) return;
 800086e:	bf00      	nop
 8000870:	e000      	b.n	8000874 <cli_print_menu+0x68>
        return;  
 8000872:	bf00      	nop
}
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08010990 	.word	0x08010990

08000880 <cli_print_action>:

static void cli_print_action(cliElement_t const * const e){
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 80dd 	beq.w	8000a4a <cli_print_action+0x1ca>
    if(e->args == NULL) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f000 80da 	beq.w	8000a4e <cli_print_action+0x1ce>
        ERR_PRINTLN("Action of element '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    MENU_PRINTLN("Action '%s' - %s - usage :", ( (e->name == NULL) ? "NULL_NAME" : e->name), ( (e->desc == NULL) ? "NULL_DESC" : e->desc ) );
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <cli_print_action+0x28>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	e000      	b.n	80008aa <cli_print_action+0x2a>
 80008a8:	496c      	ldr	r1, [pc, #432]	; (8000a5c <cli_print_action+0x1dc>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <cli_print_action+0x38>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	e000      	b.n	80008ba <cli_print_action+0x3a>
 80008b8:	4b69      	ldr	r3, [pc, #420]	; (8000a60 <cli_print_action+0x1e0>)
 80008ba:	461a      	mov	r2, r3
 80008bc:	4869      	ldr	r0, [pc, #420]	; (8000a64 <cli_print_action+0x1e4>)
 80008be:	f001 fa45 	bl	8001d4c <cli_printf>
    
    bool elipsisPresent = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80008c6:	f107 030f 	add.w	r3, r7, #15
 80008ca:	4619      	mov	r1, r3
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fec0 	bl	8000652 <cli_verify_args_str>
 80008d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    if(len == -1){
 80008d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008da:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008de:	bf08      	it	eq
 80008e0:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 80008e4:	f000 80b5 	beq.w	8000a52 <cli_print_action+0x1d2>
        return;
    }
    
    if(len == 0){
 80008e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008ec:	4323      	orrs	r3, r4
 80008ee:	d103      	bne.n	80008f8 <cli_print_action+0x78>
        MENU_PRINTLN("   No arguments");
 80008f0:	485d      	ldr	r0, [pc, #372]	; (8000a68 <cli_print_action+0x1e8>)
 80008f2:	f001 fa2b 	bl	8001d4c <cli_printf>
        return;
 80008f6:	e0ad      	b.n	8000a54 <cli_print_action+0x1d4>
    }
    
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d004      	beq.n	800090a <cli_print_action+0x8a>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <cli_print_action+0x8e>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <cli_print_action+0x90>
 800090e:	2300      	movs	r3, #0
 8000910:	77fb      	strb	r3, [r7, #31]
 8000912:	7ffb      	ldrb	r3, [r7, #31]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	77fb      	strb	r3, [r7, #31]
    
    int i = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < len; i++){
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	e054      	b.n	80009ce <cli_print_action+0x14e>
        switch(e->args[i]){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b69      	cmp	r3, #105	; 0x69
 8000930:	d00e      	beq.n	8000950 <cli_print_action+0xd0>
 8000932:	2b69      	cmp	r3, #105	; 0x69
 8000934:	dc04      	bgt.n	8000940 <cli_print_action+0xc0>
 8000936:	2b2a      	cmp	r3, #42	; 0x2a
 8000938:	d016      	beq.n	8000968 <cli_print_action+0xe8>
 800093a:	2b62      	cmp	r3, #98	; 0x62
 800093c:	d010      	beq.n	8000960 <cli_print_action+0xe0>
 800093e:	e017      	b.n	8000970 <cli_print_action+0xf0>
 8000940:	2b73      	cmp	r3, #115	; 0x73
 8000942:	d009      	beq.n	8000958 <cli_print_action+0xd8>
 8000944:	2b75      	cmp	r3, #117	; 0x75
 8000946:	d113      	bne.n	8000970 <cli_print_action+0xf0>
            #if (defined(CLI_FLOAT_EN) && CLI_FLOAT_EN == 1)
            case 'f' : MENU_PRINTF("   < float   > - "); break;
            #endif

            case 'u' : MENU_PRINTF("   < uint64  > - "); break;
 8000948:	4848      	ldr	r0, [pc, #288]	; (8000a6c <cli_print_action+0x1ec>)
 800094a:	f001 f9ff 	bl	8001d4c <cli_printf>
 800094e:	e013      	b.n	8000978 <cli_print_action+0xf8>
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 8000950:	4847      	ldr	r0, [pc, #284]	; (8000a70 <cli_print_action+0x1f0>)
 8000952:	f001 f9fb 	bl	8001d4c <cli_printf>
 8000956:	e00f      	b.n	8000978 <cli_print_action+0xf8>
            case 's' : MENU_PRINTF("   < string  > - "); break;
 8000958:	4846      	ldr	r0, [pc, #280]	; (8000a74 <cli_print_action+0x1f4>)
 800095a:	f001 f9f7 	bl	8001d4c <cli_printf>
 800095e:	e00b      	b.n	8000978 <cli_print_action+0xf8>
            case 'b' : MENU_PRINTF("   < buffer  > - "); break;
 8000960:	4845      	ldr	r0, [pc, #276]	; (8000a78 <cli_print_action+0x1f8>)
 8000962:	f001 f9f3 	bl	8001d4c <cli_printf>
 8000966:	e007      	b.n	8000978 <cli_print_action+0xf8>
            case '*' : MENU_PRINTF("   < any     > - "); break;
 8000968:	4844      	ldr	r0, [pc, #272]	; (8000a7c <cli_print_action+0x1fc>)
 800096a:	f001 f9ef 	bl	8001d4c <cli_printf>
 800096e:	e003      	b.n	8000978 <cli_print_action+0xf8>
            default  : MENU_PRINTF("   < unknown > - "); break;
 8000970:	4843      	ldr	r0, [pc, #268]	; (8000a80 <cli_print_action+0x200>)
 8000972:	f001 f9eb 	bl	8001d4c <cli_printf>
 8000976:	bf00      	nop
        }
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10b      	bne.n	8000996 <cli_print_action+0x116>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <cli_print_action+0x116>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <cli_print_action+0x11a>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <cli_print_action+0x11c>
 800099a:	2300      	movs	r3, #0
 800099c:	77fb      	strb	r3, [r7, #31]
 800099e:	7ffb      	ldrb	r3, [r7, #31]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	77fb      	strb	r3, [r7, #31]
        
        if(argsDescEnded){
 80009a6:	7ffb      	ldrb	r3, [r7, #31]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d003      	beq.n	80009b4 <cli_print_action+0x134>
            MENU_PRINTLN("");
 80009ac:	4835      	ldr	r0, [pc, #212]	; (8000a84 <cli_print_action+0x204>)
 80009ae:	f001 f9cd 	bl	8001d4c <cli_printf>
            continue;
 80009b2:	e009      	b.n	80009c8 <cli_print_action+0x148>
        }
        
        MENU_PRINTLN("%s", e->argsDesc[i]);   
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4831      	ldr	r0, [pc, #196]	; (8000a88 <cli_print_action+0x208>)
 80009c4:	f001 f9c2 	bl	8001d4c <cli_printf>
    for(i = 0; i < len; i++){
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	3301      	adds	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4619      	mov	r1, r3
 80009d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80009d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009da:	4299      	cmp	r1, r3
 80009dc:	eb72 0304 	sbcs.w	r3, r2, r4
 80009e0:	dba0      	blt.n	8000924 <cli_print_action+0xa4>
    }
    
    if(elipsisPresent){
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d02c      	beq.n	8000a42 <cli_print_action+0x1c2>
        MENU_PRINTF("   < various > - ");
 80009e8:	4828      	ldr	r0, [pc, #160]	; (8000a8c <cli_print_action+0x20c>)
 80009ea:	f001 f9af 	bl	8001d4c <cli_printf>
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 80009ee:	7ffb      	ldrb	r3, [r7, #31]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10b      	bne.n	8000a0c <cli_print_action+0x18c>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <cli_print_action+0x18c>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	695a      	ldr	r2, [r3, #20]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d101      	bne.n	8000a10 <cli_print_action+0x190>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e000      	b.n	8000a12 <cli_print_action+0x192>
 8000a10:	2300      	movs	r3, #0
 8000a12:	77fb      	strb	r3, [r7, #31]
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	77fb      	strb	r3, [r7, #31]

        if(!argsDescEnded) MENU_PRINTLN("%s", e->argsDesc[i]);
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <cli_print_action+0x1bc>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <cli_print_action+0x208>)
 8000a38:	f001 f988 	bl	8001d4c <cli_printf>

        MENU_PRINTLN("");
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <cli_print_action+0x204>)
 8000a3e:	f001 f985 	bl	8001d4c <cli_printf>
    }
    
    MENU_PRINTLN("");
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <cli_print_action+0x204>)
 8000a44:	f001 f982 	bl	8001d4c <cli_printf>
 8000a48:	e004      	b.n	8000a54 <cli_print_action+0x1d4>
    if(e == NULL) return;
 8000a4a:	bf00      	nop
 8000a4c:	e002      	b.n	8000a54 <cli_print_action+0x1d4>
        return;
 8000a4e:	bf00      	nop
 8000a50:	e000      	b.n	8000a54 <cli_print_action+0x1d4>
        return;
 8000a52:	bf00      	nop
}
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	0801095c 	.word	0x0801095c
 8000a60:	0801097c 	.word	0x0801097c
 8000a64:	08010994 	.word	0x08010994
 8000a68:	080109b4 	.word	0x080109b4
 8000a6c:	080109c8 	.word	0x080109c8
 8000a70:	080109dc 	.word	0x080109dc
 8000a74:	080109f0 	.word	0x080109f0
 8000a78:	08010a04 	.word	0x08010a04
 8000a7c:	08010a18 	.word	0x08010a18
 8000a80:	08010a2c 	.word	0x08010a2c
 8000a84:	08010990 	.word	0x08010990
 8000a88:	08010a40 	.word	0x08010a40
 8000a8c:	08010a48 	.word	0x08010a48

08000a90 <cli_str_starts_with>:

static bool cli_str_starts_with(char const tkn[], char const str[]){
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    if(tkn == NULL || str == NULL) return false;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <cli_str_starts_with+0x16>
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <cli_str_starts_with+0x1a>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e04f      	b.n	8000b4a <cli_str_starts_with+0xba>
    
    size_t const lenTkn = strlen(tkn);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fb90 	bl	80001d0 <strlen>
 8000ab0:	6138      	str	r0, [r7, #16]
    size_t const lenStr = strlen(str);
 8000ab2:	6838      	ldr	r0, [r7, #0]
 8000ab4:	f7ff fb8c 	bl	80001d0 <strlen>
 8000ab8:	60f8      	str	r0, [r7, #12]
    
    if(lenTkn == 0 || lenStr == 0) return false;
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <cli_str_starts_with+0x36>
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <cli_str_starts_with+0x3a>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e03f      	b.n	8000b4a <cli_str_starts_with+0xba>
    if(lenTkn > lenStr) return false;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d901      	bls.n	8000ad6 <cli_str_starts_with+0x46>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e039      	b.n	8000b4a <cli_str_starts_with+0xba>

    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	e02f      	b.n	8000b3c <cli_str_starts_with+0xac>
        if(tolower(tkn[i]) != tolower(str[i])) return false;
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	72fb      	strb	r3, [r7, #11]
 8000ae6:	f00e fc6f 	bl	800f3c8 <__locale_ctype_ptr>
 8000aea:	4602      	mov	r2, r0
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d103      	bne.n	8000b04 <cli_str_starts_with+0x74>
 8000afc:	7afb      	ldrb	r3, [r7, #11]
 8000afe:	f103 0420 	add.w	r4, r3, #32
 8000b02:	e000      	b.n	8000b06 <cli_str_starts_with+0x76>
 8000b04:	7afc      	ldrb	r4, [r7, #11]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	72bb      	strb	r3, [r7, #10]
 8000b10:	f00e fc5a 	bl	800f3c8 <__locale_ctype_ptr>
 8000b14:	4602      	mov	r2, r0
 8000b16:	7abb      	ldrb	r3, [r7, #10]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d102      	bne.n	8000b2c <cli_str_starts_with+0x9c>
 8000b26:	7abb      	ldrb	r3, [r7, #10]
 8000b28:	3320      	adds	r3, #32
 8000b2a:	e000      	b.n	8000b2e <cli_str_starts_with+0x9e>
 8000b2c:	7abb      	ldrb	r3, [r7, #10]
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	d001      	beq.n	8000b36 <cli_str_starts_with+0xa6>
 8000b32:	2300      	movs	r3, #0
 8000b34:	e009      	b.n	8000b4a <cli_str_starts_with+0xba>
    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1c9      	bne.n	8000adc <cli_str_starts_with+0x4c>
    }
    
    return true;
 8000b48:	2301      	movs	r3, #1
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	371c      	adds	r7, #28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}

08000b52 <cli_find_element_in_menu>:

static cliElement_t* cli_find_element_in_menu(char* tkn, char cliBuffer[], size_t maxLen, cliElement_t currentMenu[]){
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
    if(tkn == NULL) return NULL;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <cli_find_element_in_menu+0x18>
 8000b66:	2300      	movs	r3, #0
 8000b68:	e05e      	b.n	8000c28 <cli_find_element_in_menu+0xd6>
    if(maxLen == 0) return NULL;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <cli_find_element_in_menu+0x22>
 8000b70:	2300      	movs	r3, #0
 8000b72:	e059      	b.n	8000c28 <cli_find_element_in_menu+0xd6>
    if(cliBuffer == NULL) return NULL;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <cli_find_element_in_menu+0x2c>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e054      	b.n	8000c28 <cli_find_element_in_menu+0xd6>
    if(currentMenu == NULL) return NULL;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <cli_find_element_in_menu+0x36>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e04f      	b.n	8000c28 <cli_find_element_in_menu+0xd6>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <cli_find_element_in_menu+0x42>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e049      	b.n	8000c28 <cli_find_element_in_menu+0xd6>
    
    cliElement_t* ret = NULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
    
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	74fb      	strb	r3, [r7, #19]
 8000b9c:	e032      	b.n	8000c04 <cli_find_element_in_menu+0xb2>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	6859      	ldr	r1, [r3, #4]
 8000ba2:	7cfa      	ldrb	r2, [r7, #19]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d021      	beq.n	8000bf8 <cli_find_element_in_menu+0xa6>
        
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	6859      	ldr	r1, [r3, #4]
 8000bb8:	7cfa      	ldrb	r2, [r7, #19]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff ff61 	bl	8000a90 <cli_str_starts_with>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d110      	bne.n	8000bfc <cli_find_element_in_menu+0xaa>
        
        if(ret != NULL){
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <cli_find_element_in_menu+0x92>
            ERR_PRINTLN("Command not unique");
            return NULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e021      	b.n	8000c28 <cli_find_element_in_menu+0xd6>
        } 
        
        ret = (cliElement_t*) &currentMenu->subMenuRef[i];
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6859      	ldr	r1, [r3, #4]
 8000be8:	7cfa      	ldrb	r2, [r7, #19]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e002      	b.n	8000bfe <cli_find_element_in_menu+0xac>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000bf8:	bf00      	nop
 8000bfa:	e000      	b.n	8000bfe <cli_find_element_in_menu+0xac>
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bfc:	bf00      	nop
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	3301      	adds	r3, #1
 8000c02:	74fb      	strb	r3, [r7, #19]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	6859      	ldr	r1, [r3, #4]
 8000c08:	7cfa      	ldrb	r2, [r7, #19]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fcc7 	bl	80005a8 <cli_is_terminator>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1bb      	bne.n	8000b9e <cli_find_element_in_menu+0x4c>
    }
    
    DBG_PRINTLN("%s", ret == NULL ? "Not found" : "Sub menu or action found" );
    
    return ret;
 8000c26:	697b      	ldr	r3, [r7, #20]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <cli_arg_str_len>:

static int32_t cli_arg_str_len(char* arg){
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    if(arg ==  NULL) return -1;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <cli_arg_str_len+0x14>
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e050      	b.n	8000ce6 <cli_arg_str_len+0xb6>
    
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b7b      	cmp	r3, #123	; 0x7b
 8000c4a:	d003      	beq.n	8000c54 <cli_arg_str_len+0x24>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b22      	cmp	r3, #34	; 0x22
 8000c52:	d101      	bne.n	8000c58 <cli_arg_str_len+0x28>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <cli_arg_str_len+0x2a>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
    
    while(1){
        switch(arg[0]){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b22      	cmp	r3, #34	; 0x22
 8000c62:	d001      	beq.n	8000c68 <cli_arg_str_len+0x38>
 8000c64:	2b7b      	cmp	r3, #123	; 0x7b
 8000c66:	d129      	bne.n	8000cbc <cli_arg_str_len+0x8c>
            
            case '{' :
            case '"' : {
                if(arg[i] == '\0') return -1;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <cli_arg_str_len+0x4a>
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e035      	b.n	8000ce6 <cli_arg_str_len+0xb6>
                
                if(arg[0] == '{' && arg[i] == '}'){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b7b      	cmp	r3, #123	; 0x7b
 8000c80:	d108      	bne.n	8000c94 <cli_arg_str_len+0x64>
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b7d      	cmp	r3, #125	; 0x7d
 8000c8c:	d102      	bne.n	8000c94 <cli_arg_str_len+0x64>
                    return i+1;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	e028      	b.n	8000ce6 <cli_arg_str_len+0xb6>
                }
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b22      	cmp	r3, #34	; 0x22
 8000c9a:	d11d      	bne.n	8000cd8 <cli_arg_str_len+0xa8>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b22      	cmp	r3, #34	; 0x22
 8000ca6:	d117      	bne.n	8000cd8 <cli_arg_str_len+0xa8>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b5c      	cmp	r3, #92	; 0x5c
 8000cb4:	d010      	beq.n	8000cd8 <cli_arg_str_len+0xa8>
                    return i+1;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	e014      	b.n	8000ce6 <cli_arg_str_len+0xb6>
                }
                break;
            }
            
            default : {
                if(arg[i] == ' ' || arg[i] == '\0') return i;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b20      	cmp	r3, #32
 8000cc6:	d005      	beq.n	8000cd4 <cli_arg_str_len+0xa4>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d103      	bne.n	8000cdc <cli_arg_str_len+0xac>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	e006      	b.n	8000ce6 <cli_arg_str_len+0xb6>
                break;
 8000cd8:	bf00      	nop
 8000cda:	e000      	b.n	8000cde <cli_arg_str_len+0xae>
                break;
 8000cdc:	bf00      	nop
            } 
        }
        
        i++;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
        switch(arg[0]){
 8000ce4:	e7ba      	b.n	8000c5c <cli_arg_str_len+0x2c>
    }
    
    return -1;
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <cli_go_to_next_argument>:

static char* cli_go_to_next_argument(char* arg){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
    if(arg == NULL) return NULL;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <cli_go_to_next_argument+0x12>
 8000d00:	2300      	movs	r3, #0
 8000d02:	e01c      	b.n	8000d3e <cli_go_to_next_argument+0x4c>
    
    int32_t size = cli_arg_str_len(arg);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff93 	bl	8000c30 <cli_arg_str_len>
 8000d0a:	60f8      	str	r0, [r7, #12]
    
    if(size == -1) return NULL;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d12:	d101      	bne.n	8000d18 <cli_go_to_next_argument+0x26>
 8000d14:	2300      	movs	r3, #0
 8000d16:	e012      	b.n	8000d3e <cli_go_to_next_argument+0x4c>
    
    arg += size;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	607b      	str	r3, [r7, #4]
    
    while(arg[0] != '\0'){ 
 8000d20:	e006      	b.n	8000d30 <cli_go_to_next_argument+0x3e>
        //if(arg[0] == '-' || arg[0] == '{' || arg[0] == '"' || ('0' <= arg[0] && arg[0] <= '9')) break;
        if(arg[0] != ' ') break;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b20      	cmp	r3, #32
 8000d28:	d107      	bne.n	8000d3a <cli_go_to_next_argument+0x48>
        arg++;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
    while(arg[0] != '\0'){ 
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f4      	bne.n	8000d22 <cli_go_to_next_argument+0x30>
 8000d38:	e000      	b.n	8000d3c <cli_go_to_next_argument+0x4a>
        if(arg[0] != ' ') break;
 8000d3a:	bf00      	nop
    }
    
    return arg;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <cli_print_arg>:

static void cli_print_arg(char* s){
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
    int len = cli_arg_str_len(s);
    DBG_PRINTF("Argument size %d = ", len);
    for(int i = 0; i < len; i++) DBG_PRINTF("%c", s[i]);
    DBG_PRINTLN("");
#endif
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <cli_verify_int>:
    
    return true;
}
#endif

static bool cli_verify_int(char* tkn, bool isUnsigned, bool printEn){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b088      	sub	sp, #32
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	70bb      	strb	r3, [r7, #2]
    int32_t len = cli_arg_str_len(tkn);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff60 	bl	8000c30 <cli_arg_str_len>
 8000d70:	6178      	str	r0, [r7, #20]
    bool is_negative = false;
 8000d72:	2300      	movs	r3, #0
 8000d74:	77fb      	strb	r3, [r7, #31]
    int32_t i = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]

    if(isUnsigned == false && tkn[0] == '-'){
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80cf 	beq.w	8000f26 <cli_verify_int+0x1cc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b2d      	cmp	r3, #45	; 0x2d
 8000d8e:	f040 80ca 	bne.w	8000f26 <cli_verify_int+0x1cc>
        if(len == 1) {
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <cli_verify_int+0x42>
            if(printEn) ERR_PRINTLN("Negative int does not begin");
            return false;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e0ca      	b.n	8000f32 <cli_verify_int+0x1d8>
        }
        is_negative = true;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	77fb      	strb	r3, [r7, #31]
        i++;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	3301      	adds	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
    }
    
    while(i < len){
 8000da6:	e0be      	b.n	8000f26 <cli_verify_int+0x1cc>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	74fb      	strb	r3, [r7, #19]
 8000db2:	f00e fb09 	bl	800f3c8 <__locale_ctype_ptr>
 8000db6:	4602      	mov	r2, r0
 8000db8:	7cfb      	ldrb	r3, [r7, #19]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d102      	bne.n	8000dce <cli_verify_int+0x74>
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
 8000dca:	3320      	adds	r3, #32
 8000dcc:	e000      	b.n	8000dd0 <cli_verify_int+0x76>
 8000dce:	7cfb      	ldrb	r3, [r7, #19]
 8000dd0:	2b78      	cmp	r3, #120	; 0x78
 8000dd2:	d152      	bne.n	8000e7a <cli_verify_int+0x120>
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b30      	cmp	r3, #48	; 0x30
 8000de0:	d149      	bne.n	8000e76 <cli_verify_int+0x11c>
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	3b02      	subs	r3, #2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b20      	cmp	r3, #32
 8000dee:	d006      	beq.n	8000dfe <cli_verify_int+0xa4>
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	3b02      	subs	r3, #2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d13b      	bne.n	8000e76 <cli_verify_int+0x11c>
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	3301      	adds	r3, #1
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b2f      	cmp	r3, #47	; 0x2f
 8000e0a:	d906      	bls.n	8000e1a <cli_verify_int+0xc0>
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b39      	cmp	r3, #57	; 0x39
 8000e18:	d92f      	bls.n	8000e7a <cli_verify_int+0x120>
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	74bb      	strb	r3, [r7, #18]
 8000e26:	f00e facf 	bl	800f3c8 <__locale_ctype_ptr>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	7cbb      	ldrb	r3, [r7, #18]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d102      	bne.n	8000e42 <cli_verify_int+0xe8>
 8000e3c:	7cbb      	ldrb	r3, [r7, #18]
 8000e3e:	3320      	adds	r3, #32
 8000e40:	e000      	b.n	8000e44 <cli_verify_int+0xea>
 8000e42:	7cbb      	ldrb	r3, [r7, #18]
 8000e44:	2b60      	cmp	r3, #96	; 0x60
 8000e46:	dd16      	ble.n	8000e76 <cli_verify_int+0x11c>
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	747b      	strb	r3, [r7, #17]
 8000e54:	f00e fab8 	bl	800f3c8 <__locale_ctype_ptr>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	7c7b      	ldrb	r3, [r7, #17]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d102      	bne.n	8000e70 <cli_verify_int+0x116>
 8000e6a:	7c7b      	ldrb	r3, [r7, #17]
 8000e6c:	3320      	adds	r3, #32
 8000e6e:	e000      	b.n	8000e72 <cli_verify_int+0x118>
 8000e70:	7c7b      	ldrb	r3, [r7, #17]
 8000e72:	2b66      	cmp	r3, #102	; 0x66
 8000e74:	dd01      	ble.n	8000e7a <cli_verify_int+0x120>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ));
            return false;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e05b      	b.n	8000f32 <cli_verify_int+0x1d8>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b2f      	cmp	r3, #47	; 0x2f
 8000e84:	d905      	bls.n	8000e92 <cli_verify_int+0x138>
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b39      	cmp	r3, #57	; 0x39
 8000e90:	d946      	bls.n	8000f20 <cli_verify_int+0x1c6>
 8000e92:	7ffb      	ldrb	r3, [r7, #31]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d141      	bne.n	8000f1c <cli_verify_int+0x1c2>
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	743b      	strb	r3, [r7, #16]
 8000ea2:	f00e fa91 	bl	800f3c8 <__locale_ctype_ptr>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	7c3b      	ldrb	r3, [r7, #16]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d102      	bne.n	8000ebe <cli_verify_int+0x164>
 8000eb8:	7c3b      	ldrb	r3, [r7, #16]
 8000eba:	3320      	adds	r3, #32
 8000ebc:	e000      	b.n	8000ec0 <cli_verify_int+0x166>
 8000ebe:	7c3b      	ldrb	r3, [r7, #16]
 8000ec0:	2b60      	cmp	r3, #96	; 0x60
 8000ec2:	dd15      	ble.n	8000ef0 <cli_verify_int+0x196>
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	f00e fa7b 	bl	800f3c8 <__locale_ctype_ptr>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d102      	bne.n	8000eea <cli_verify_int+0x190>
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3320      	adds	r3, #32
 8000ee8:	e000      	b.n	8000eec <cli_verify_int+0x192>
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b66      	cmp	r3, #102	; 0x66
 8000eee:	dd17      	ble.n	8000f20 <cli_verify_int+0x1c6>
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	73bb      	strb	r3, [r7, #14]
 8000efa:	f00e fa65 	bl	800f3c8 <__locale_ctype_ptr>
 8000efe:	4602      	mov	r2, r0
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <cli_verify_int+0x1bc>
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	3320      	adds	r3, #32
 8000f14:	e000      	b.n	8000f18 <cli_verify_int+0x1be>
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	2b78      	cmp	r3, #120	; 0x78
 8000f1a:	d001      	beq.n	8000f20 <cli_verify_int+0x1c6>
            if(printEn) ERR_PRINTLN("Invalid character in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ) );
            return false;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e008      	b.n	8000f32 <cli_verify_int+0x1d8>
        }

        i++;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	3301      	adds	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
    while(i < len){
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	f6ff af3c 	blt.w	8000da8 <cli_verify_int+0x4e>
    }  
    
    return true;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <cli_verify_buffer>:

static bool cli_verify_buffer(char* tkn, bool printEn){
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
    int i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
    
    if(tkn == NULL) return false;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <cli_verify_buffer+0x1a>
 8000f50:	2300      	movs	r3, #0
 8000f52:	e0ef      	b.n	8001134 <cli_verify_buffer+0x1fa>
    if(tkn[0] != '"' && tkn[0] != '{') {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b22      	cmp	r3, #34	; 0x22
 8000f5a:	d005      	beq.n	8000f68 <cli_verify_buffer+0x2e>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b7b      	cmp	r3, #123	; 0x7b
 8000f62:	d001      	beq.n	8000f68 <cli_verify_buffer+0x2e>
        if(printEn) ERR_PRINTLN("Buffer argument does not begin with '\"' nor '{'");
        return false;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e0e5      	b.n	8001134 <cli_verify_buffer+0x1fa>
    }
    
    int32_t len = cli_arg_str_len(tkn);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fe61 	bl	8000c30 <cli_arg_str_len>
 8000f6e:	6138      	str	r0, [r7, #16]
    
    if(len == -1) {
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f76:	d101      	bne.n	8000f7c <cli_verify_buffer+0x42>
        if(printEn) ERR_PRINTLN("Buffer beginning with '%c' does not end", tkn[0]);
        return false;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e0db      	b.n	8001134 <cli_verify_buffer+0x1fa>
    }
    
    if(tkn[0] == '"') return true;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b22      	cmp	r3, #34	; 0x22
 8000f82:	d101      	bne.n	8000f88 <cli_verify_buffer+0x4e>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0d5      	b.n	8001134 <cli_verify_buffer+0x1fa>
    
    for(i = 1; i < len; i++){
 8000f88:	2301      	movs	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e0ca      	b.n	8001124 <cli_verify_buffer+0x1ea>
        if(tkn[i] == '}') break; 
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b7d      	cmp	r3, #125	; 0x7d
 8000f98:	f000 80ca 	beq.w	8001130 <cli_verify_buffer+0x1f6>
        
        if(tkn[i] == ' ') continue;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	f000 80b9 	beq.w	800111c <cli_verify_buffer+0x1e2>
        
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	f00e fa08 	bl	800f3c8 <__locale_ctype_ptr>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <cli_verify_buffer+0x96>
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	3320      	adds	r3, #32
 8000fce:	e000      	b.n	8000fd2 <cli_verify_buffer+0x98>
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b78      	cmp	r3, #120	; 0x78
 8000fd4:	d152      	bne.n	800107c <cli_verify_buffer+0x142>
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b30      	cmp	r3, #48	; 0x30
 8000fe2:	d149      	bne.n	8001078 <cli_verify_buffer+0x13e>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b20      	cmp	r3, #32
 8000ff0:	d006      	beq.n	8001000 <cli_verify_buffer+0xc6>
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b7b      	cmp	r3, #123	; 0x7b
 8000ffe:	d13b      	bne.n	8001078 <cli_verify_buffer+0x13e>
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b2f      	cmp	r3, #47	; 0x2f
 800100c:	d906      	bls.n	800101c <cli_verify_buffer+0xe2>
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b39      	cmp	r3, #57	; 0x39
 800101a:	d92f      	bls.n	800107c <cli_verify_buffer+0x142>
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	f00e f9ce 	bl	800f3c8 <__locale_ctype_ptr>
 800102c:	4602      	mov	r2, r0
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <cli_verify_buffer+0x10a>
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	3320      	adds	r3, #32
 8001042:	e000      	b.n	8001046 <cli_verify_buffer+0x10c>
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	2b60      	cmp	r3, #96	; 0x60
 8001048:	dd16      	ble.n	8001078 <cli_verify_buffer+0x13e>
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	737b      	strb	r3, [r7, #13]
 8001056:	f00e f9b7 	bl	800f3c8 <__locale_ctype_ptr>
 800105a:	4602      	mov	r2, r0
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	3301      	adds	r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d102      	bne.n	8001072 <cli_verify_buffer+0x138>
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	3320      	adds	r3, #32
 8001070:	e000      	b.n	8001074 <cli_verify_buffer+0x13a>
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	2b66      	cmp	r3, #102	; 0x66
 8001076:	dd01      	ble.n	800107c <cli_verify_buffer+0x142>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in buffer beginning with '{'");
            return false;
 8001078:	2300      	movs	r3, #0
 800107a:	e05b      	b.n	8001134 <cli_verify_buffer+0x1fa>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b2f      	cmp	r3, #47	; 0x2f
 8001086:	d905      	bls.n	8001094 <cli_verify_buffer+0x15a>
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b39      	cmp	r3, #57	; 0x39
 8001092:	d944      	bls.n	800111e <cli_verify_buffer+0x1e4>
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	733b      	strb	r3, [r7, #12]
 800109e:	f00e f993 	bl	800f3c8 <__locale_ctype_ptr>
 80010a2:	4602      	mov	r2, r0
 80010a4:	7b3b      	ldrb	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <cli_verify_buffer+0x180>
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	3320      	adds	r3, #32
 80010b8:	e000      	b.n	80010bc <cli_verify_buffer+0x182>
 80010ba:	7b3b      	ldrb	r3, [r7, #12]
 80010bc:	2b60      	cmp	r3, #96	; 0x60
 80010be:	dd15      	ble.n	80010ec <cli_verify_buffer+0x1b2>
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	72fb      	strb	r3, [r7, #11]
 80010ca:	f00e f97d 	bl	800f3c8 <__locale_ctype_ptr>
 80010ce:	4602      	mov	r2, r0
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d102      	bne.n	80010e6 <cli_verify_buffer+0x1ac>
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	3320      	adds	r3, #32
 80010e4:	e000      	b.n	80010e8 <cli_verify_buffer+0x1ae>
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	2b66      	cmp	r3, #102	; 0x66
 80010ea:	dd18      	ble.n	800111e <cli_verify_buffer+0x1e4>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	72bb      	strb	r3, [r7, #10]
 80010f6:	f00e f967 	bl	800f3c8 <__locale_ctype_ptr>
 80010fa:	4602      	mov	r2, r0
 80010fc:	7abb      	ldrb	r3, [r7, #10]
 80010fe:	3301      	adds	r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d102      	bne.n	8001112 <cli_verify_buffer+0x1d8>
 800110c:	7abb      	ldrb	r3, [r7, #10]
 800110e:	3320      	adds	r3, #32
 8001110:	e000      	b.n	8001114 <cli_verify_buffer+0x1da>
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	2b78      	cmp	r3, #120	; 0x78
 8001116:	d002      	beq.n	800111e <cli_verify_buffer+0x1e4>
            if(printEn) ERR_PRINTLN("Invalid character in buffer beginning with '{'");
            return false;
 8001118:	2300      	movs	r3, #0
 800111a:	e00b      	b.n	8001134 <cli_verify_buffer+0x1fa>
        if(tkn[i] == ' ') continue;
 800111c:	bf00      	nop
    for(i = 1; i < len; i++){
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	f6ff af30 	blt.w	8000f8e <cli_verify_buffer+0x54>
 800112e:	e000      	b.n	8001132 <cli_verify_buffer+0x1f8>
        if(tkn[i] == '}') break; 
 8001130:	bf00      	nop
        }
    }
    
    return true;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <cli_verify_arguments>:

static bool cli_verify_arguments(cliElement_t* e){
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <cli_verify_arguments+0x12>
 800114a:	2300      	movs	r3, #0
 800114c:	e0be      	b.n	80012cc <cli_verify_arguments+0x190>
    if(e->args == NULL) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <cli_verify_arguments+0x1e>
        ERR_PRINTLN("Arguments string is null for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return false;
 8001156:	2300      	movs	r3, #0
 8001158:	e0b8      	b.n	80012cc <cli_verify_arguments+0x190>
    }
    
    DBG_PRINTLN("args = %s", argsStr);
    
    char* argTkn = argsStr;
 800115a:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <cli_verify_arguments+0x198>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61fb      	str	r3, [r7, #28]
    
    bool elipsisPresent = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8001164:	f107 030f 	add.w	r3, r7, #15
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fa71 	bl	8000652 <cli_verify_args_str>
 8001170:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    DBG_PRINTLN("Len = %d, elipsisPresent = %d", len, elipsisPresent);
    
    if(len == -1){
 8001174:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001178:	f1b4 3fff 	cmp.w	r4, #4294967295
 800117c:	bf08      	it	eq
 800117e:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8001182:	d101      	bne.n	8001188 <cli_verify_arguments+0x4c>
        return false;
 8001184:	2300      	movs	r3, #0
 8001186:	e0a1      	b.n	80012cc <cli_verify_arguments+0x190>
    }
    
    size_t i = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    
    for(i = 0; i < len; i++){
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	e05e      	b.n	8001250 <cli_verify_arguments+0x114>
        if(argTkn == NULL) {
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <cli_verify_arguments+0x60>
            ERR_PRINTLN("No arguments in argument list for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 8001198:	2300      	movs	r3, #0
 800119a:	e097      	b.n	80012cc <cli_verify_arguments+0x190>
        }
        
        if(argTkn[0] == '\0'){
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <cli_verify_arguments+0x6c>
            ERR_PRINTLN("Expected more arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e091      	b.n	80012cc <cli_verify_arguments+0x190>
        }
        
        cli_print_arg(argTkn);
 80011a8:	69f8      	ldr	r0, [r7, #28]
 80011aa:	f7ff fdcc 	bl	8000d46 <cli_print_arg>

        switch(e->args[i]){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b69      	cmp	r3, #105	; 0x69
 80011ba:	d00b      	beq.n	80011d4 <cli_verify_arguments+0x98>
 80011bc:	2b69      	cmp	r3, #105	; 0x69
 80011be:	dc04      	bgt.n	80011ca <cli_verify_arguments+0x8e>
 80011c0:	2b2a      	cmp	r3, #42	; 0x2a
 80011c2:	d024      	beq.n	800120e <cli_verify_arguments+0xd2>
 80011c4:	2b62      	cmp	r3, #98	; 0x62
 80011c6:	d019      	beq.n	80011fc <cli_verify_arguments+0xc0>
 80011c8:	e032      	b.n	8001230 <cli_verify_arguments+0xf4>
 80011ca:	2b73      	cmp	r3, #115	; 0x73
 80011cc:	d016      	beq.n	80011fc <cli_verify_arguments+0xc0>
 80011ce:	2b75      	cmp	r3, #117	; 0x75
 80011d0:	d00a      	beq.n	80011e8 <cli_verify_arguments+0xac>
 80011d2:	e02d      	b.n	8001230 <cli_verify_arguments+0xf4>
                return false;
            }
            #endif
            
            case 'i' : {
                if(cli_verify_int(argTkn, false, true)) break;
 80011d4:	2201      	movs	r2, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	69f8      	ldr	r0, [r7, #28]
 80011da:	f7ff fdbe 	bl	8000d5a <cli_verify_int>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d127      	bne.n	8001234 <cli_verify_arguments+0xf8>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e071      	b.n	80012cc <cli_verify_arguments+0x190>
            }
            
            case 'u' : {
                if(cli_verify_int(argTkn, true, true)) break;
 80011e8:	2201      	movs	r2, #1
 80011ea:	2101      	movs	r1, #1
 80011ec:	69f8      	ldr	r0, [r7, #28]
 80011ee:	f7ff fdb4 	bl	8000d5a <cli_verify_int>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d11f      	bne.n	8001238 <cli_verify_arguments+0xfc>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e067      	b.n	80012cc <cli_verify_arguments+0x190>
            }
            
            case 's' :
            case 'b' : {
                if(cli_verify_buffer(argTkn, true)) break;
 80011fc:	2101      	movs	r1, #1
 80011fe:	69f8      	ldr	r0, [r7, #28]
 8001200:	f7ff fe9b 	bl	8000f3a <cli_verify_buffer>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d118      	bne.n	800123c <cli_verify_arguments+0x100>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 800120a:	2300      	movs	r3, #0
 800120c:	e05e      	b.n	80012cc <cli_verify_arguments+0x190>
            }
            
            case '*' : {
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	69f8      	ldr	r0, [r7, #28]
 8001214:	f7ff fda1 	bl	8000d5a <cli_verify_int>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d110      	bne.n	8001240 <cli_verify_arguments+0x104>
 800121e:	2100      	movs	r1, #0
 8001220:	69f8      	ldr	r0, [r7, #28]
 8001222:	f7ff fe8a 	bl	8000f3a <cli_verify_buffer>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <cli_verify_arguments+0x104>
                {
                    break;
                }
                
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e04d      	b.n	80012cc <cli_verify_arguments+0x190>
            }
            
            default : {
                DBG_PRINTLN("Unrecognized arguments");
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001230:	2300      	movs	r3, #0
 8001232:	e04b      	b.n	80012cc <cli_verify_arguments+0x190>
                if(cli_verify_int(argTkn, false, true)) break;
 8001234:	bf00      	nop
 8001236:	e004      	b.n	8001242 <cli_verify_arguments+0x106>
                if(cli_verify_int(argTkn, true, true)) break;
 8001238:	bf00      	nop
 800123a:	e002      	b.n	8001242 <cli_verify_arguments+0x106>
                if(cli_verify_buffer(argTkn, true)) break;
 800123c:	bf00      	nop
 800123e:	e000      	b.n	8001242 <cli_verify_arguments+0x106>
            }
        }
        
        argTkn = cli_go_to_next_argument(argTkn);
 8001240:	bf00      	nop
 8001242:	69f8      	ldr	r0, [r7, #28]
 8001244:	f7ff fd55 	bl	8000cf2 <cli_go_to_next_argument>
 8001248:	61f8      	str	r0, [r7, #28]
    for(i = 0; i < len; i++){
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	3301      	adds	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800125c:	4299      	cmp	r1, r3
 800125e:	eb72 0304 	sbcs.w	r3, r2, r4
 8001262:	db96      	blt.n	8001192 <cli_verify_arguments+0x56>
    }
    
    if(elipsisPresent){
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d026      	beq.n	80012b8 <cli_verify_arguments+0x17c>
        while(argTkn != NULL && argTkn[0] != '\0'){
 800126a:	e01d      	b.n	80012a8 <cli_verify_arguments+0x16c>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	69f8      	ldr	r0, [r7, #28]
 8001272:	f7ff fd72 	bl	8000d5a <cli_verify_int>
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <cli_verify_arguments+0x15e>
 8001282:	2100      	movs	r1, #0
 8001284:	69f8      	ldr	r0, [r7, #28]
 8001286:	f7ff fe58 	bl	8000f3a <cli_verify_buffer>
 800128a:	4603      	mov	r3, r0
 800128c:	f083 0301 	eor.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <cli_verify_arguments+0x15e>
                #endif
            
                ) ) 
            {
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ));
                return false;
 8001296:	2300      	movs	r3, #0
 8001298:	e018      	b.n	80012cc <cli_verify_arguments+0x190>
            }
            
            argTkn = cli_go_to_next_argument(argTkn);
 800129a:	69f8      	ldr	r0, [r7, #28]
 800129c:	f7ff fd29 	bl	8000cf2 <cli_go_to_next_argument>
 80012a0:	61f8      	str	r0, [r7, #28]
            i++;
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
        while(argTkn != NULL && argTkn[0] != '\0'){
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <cli_verify_arguments+0x18e>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1da      	bne.n	800126c <cli_verify_arguments+0x130>
 80012b6:	e008      	b.n	80012ca <cli_verify_arguments+0x18e>
        }
    }
    
    else {
        if(argTkn != NULL && argTkn[0] != '\0'){
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <cli_verify_arguments+0x18e>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <cli_verify_arguments+0x18e>
            ERR_PRINTLN("Expected less arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <cli_verify_arguments+0x190>
        }
    }
    
    //if(argTkn[0] != '\0') ERR_PRINTLN();
    return true;
 80012ca:	2301      	movs	r3, #1
    //return ( (argTkn[0] == '\0') ? true : false );
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	200004c0 	.word	0x200004c0

080012d8 <cli_execute_action>:

static void cli_execute_action(cliElement_t* e){
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80be 	beq.w	8001464 <cli_execute_action+0x18c>
    if(e->args == NULL) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80bb 	beq.w	8001468 <cli_execute_action+0x190>
        ERR_PRINTLN("Argument list NULL in action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    do{
        bool elipsisPresent = false;
 80012f2:	2300      	movs	r3, #0
 80012f4:	737b      	strb	r3, [r7, #13]
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80012f6:	f107 030d 	add.w	r3, r7, #13
 80012fa:	4619      	mov	r1, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff f9a8 	bl	8000652 <cli_verify_args_str>
 8001302:	e9c7 0104 	strd	r0, r1, [r7, #16]
        
        if(len == -1) return;
 8001306:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800130a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800130e:	bf08      	it	eq
 8001310:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8001314:	f000 80aa 	beq.w	800146c <cli_execute_action+0x194>

        argsStr = strtok(NULL, "\0");
 8001318:	4956      	ldr	r1, [pc, #344]	; (8001474 <cli_execute_action+0x19c>)
 800131a:	2000      	movs	r0, #0
 800131c:	f00e fca4 	bl	800fc68 <strtok>
 8001320:	4602      	mov	r2, r0
 8001322:	4b55      	ldr	r3, [pc, #340]	; (8001478 <cli_execute_action+0x1a0>)
 8001324:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL) argsStr = "";
 8001326:	4b54      	ldr	r3, [pc, #336]	; (8001478 <cli_execute_action+0x1a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <cli_execute_action+0x5c>
 800132e:	4b52      	ldr	r3, [pc, #328]	; (8001478 <cli_execute_action+0x1a0>)
 8001330:	4a52      	ldr	r2, [pc, #328]	; (800147c <cli_execute_action+0x1a4>)
 8001332:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <cli_execute_action+0x1a0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d14c      	bne.n	80013d6 <cli_execute_action+0xfe>
 800133c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001340:	4323      	orrs	r3, r4
 8001342:	d17d      	bne.n	8001440 <cli_execute_action+0x168>
        
        while(argsStr != NULL && argsStr[0] != '\0') {
 8001344:	e047      	b.n	80013d6 <cli_execute_action+0xfe>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8001346:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <cli_execute_action+0x1a0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b2d      	cmp	r3, #45	; 0x2d
 800134e:	d04b      	beq.n	80013e8 <cli_execute_action+0x110>
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <cli_execute_action+0x1a0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b7b      	cmp	r3, #123	; 0x7b
 8001358:	d046      	beq.n	80013e8 <cli_execute_action+0x110>
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <cli_execute_action+0x1a0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b22      	cmp	r3, #34	; 0x22
 8001362:	d041      	beq.n	80013e8 <cli_execute_action+0x110>
 8001364:	4b44      	ldr	r3, [pc, #272]	; (8001478 <cli_execute_action+0x1a0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b2f      	cmp	r3, #47	; 0x2f
 800136c:	d904      	bls.n	8001378 <cli_execute_action+0xa0>
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <cli_execute_action+0x1a0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b39      	cmp	r3, #57	; 0x39
 8001376:	d937      	bls.n	80013e8 <cli_execute_action+0x110>
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <cli_execute_action+0x1a0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	f00e f822 	bl	800f3c8 <__locale_ctype_ptr>
 8001384:	4602      	mov	r2, r0
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <cli_execute_action+0xc4>
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3320      	adds	r3, #32
 800139a:	e000      	b.n	800139e <cli_execute_action+0xc6>
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b60      	cmp	r3, #96	; 0x60
 80013a0:	dd14      	ble.n	80013cc <cli_execute_action+0xf4>
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <cli_execute_action+0x1a0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	73bb      	strb	r3, [r7, #14]
 80013aa:	f00e f80d 	bl	800f3c8 <__locale_ctype_ptr>
 80013ae:	4602      	mov	r2, r0
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <cli_execute_action+0xee>
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3320      	adds	r3, #32
 80013c4:	e000      	b.n	80013c8 <cli_execute_action+0xf0>
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	2b66      	cmp	r3, #102	; 0x66
 80013ca:	dd0d      	ble.n	80013e8 <cli_execute_action+0x110>
            argsStr++;
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <cli_execute_action+0x1a0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <cli_execute_action+0x1a0>)
 80013d4:	6013      	str	r3, [r2, #0]
        while(argsStr != NULL && argsStr[0] != '\0') {
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <cli_execute_action+0x1a0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <cli_execute_action+0x110>
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <cli_execute_action+0x1a0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ae      	bne.n	8001346 <cli_execute_action+0x6e>
        }
        
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <cli_execute_action+0x1a0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <cli_execute_action+0x12a>
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <cli_execute_action+0x1a0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <cli_execute_action+0x12a>
 80013fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013fe:	4323      	orrs	r3, r4
 8001400:	d120      	bne.n	8001444 <cli_execute_action+0x16c>
        
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe9a 	bl	800113c <cli_verify_arguments>
 8001408:	4603      	mov	r3, r0
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d119      	bne.n	8001448 <cli_execute_action+0x170>
        
        if(e->action == NULL) { 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <cli_execute_action+0x14c>
            ERR_PRINTLN("No action configured for action '%s'", ( (e->name == NULL)  ? "NULL_NAME" : e->name ) );
            ERR_PRINTLN("");
            argsStr = NULL;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <cli_execute_action+0x1a0>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
            return;
 8001422:	e024      	b.n	800146e <cli_execute_action+0x196>
        }
        
        currEl = e;
 8001424:	4a16      	ldr	r2, [pc, #88]	; (8001480 <cli_execute_action+0x1a8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
        
        e->action();
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4798      	blx	r3
        
        currEl = NULL;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <cli_execute_action+0x1a8>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
        argsStr = NULL;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <cli_execute_action+0x1a0>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
        
        return;
 800143c:	bf00      	nop
 800143e:	e016      	b.n	800146e <cli_execute_action+0x196>
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8001440:	bf00      	nop
 8001442:	e002      	b.n	800144a <cli_execute_action+0x172>
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8001444:	bf00      	nop
 8001446:	e000      	b.n	800144a <cli_execute_action+0x172>
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 8001448:	bf00      	nop
        
    }while(0);
    
    argsStr = NULL;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <cli_execute_action+0x1a0>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <cli_execute_action+0x1ac>)
 8001452:	f000 fc7b 	bl	8001d4c <cli_printf>
    MENU_PRINTLN("");
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <cli_execute_action+0x1b0>)
 8001458:	f000 fc78 	bl	8001d4c <cli_printf>
    cli_print_action(e);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fa0f 	bl	8000880 <cli_print_action>
 8001462:	e004      	b.n	800146e <cli_execute_action+0x196>
    if(e == NULL) return;
 8001464:	bf00      	nop
 8001466:	e002      	b.n	800146e <cli_execute_action+0x196>
        return;
 8001468:	bf00      	nop
 800146a:	e000      	b.n	800146e <cli_execute_action+0x196>
        if(len == -1) return;
 800146c:	bf00      	nop
}
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	08010a5c 	.word	0x08010a5c
 8001478:	200004c0 	.word	0x200004c0
 800147c:	08010a60 	.word	0x08010a60
 8001480:	200004c4 	.word	0x200004c4
 8001484:	08010a64 	.word	0x08010a64
 8001488:	08010990 	.word	0x08010990

0800148c <cli_find_action>:

static void cli_find_action(char cliBuffer[], size_t maxLen){
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d048      	beq.n	800152e <cli_find_action+0xa2>
    if(cliBuffer == NULL) return;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d047      	beq.n	8001532 <cli_find_action+0xa6>
    
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <cli_find_action+0xb4>)
 80014a4:	f107 040c 	add.w	r4, r7, #12
 80014a8:	461d      	mov	r5, r3
 80014aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b2:	e884 0003 	stmia.w	r4, {r0, r1}
    cliElement_t* currentMenu = &init;
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    char* tkn = strtok((char*)cliBuffer, " ");
 80014bc:	4921      	ldr	r1, [pc, #132]	; (8001544 <cli_find_action+0xb8>)
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f00e fbd2 	bl	800fc68 <strtok>
 80014c4:	62b8      	str	r0, [r7, #40]	; 0x28
    
    while(tkn != NULL){
 80014c6:	e021      	b.n	800150c <cli_find_action+0x80>
        cliElement_t* e = cli_find_element_in_menu(tkn, cliBuffer, maxLen, currentMenu);
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014d0:	f7ff fb3f 	bl	8000b52 <cli_find_element_in_menu>
 80014d4:	6278      	str	r0, [r7, #36]	; 0x24
        
        if(e == NULL){
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d01b      	beq.n	8001514 <cli_find_action+0x88>
            break;
        }
        
        if(cli_is_sub_menu(e)){
 80014dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014de:	f7ff f88c 	bl	80005fa <cli_is_sub_menu>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <cli_find_action+0x62>
            DBG_PRINTLN("Entering submenu '%s'", e->name);
            currentMenu = e;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ec:	e009      	b.n	8001502 <cli_find_action+0x76>
        }
        
        else if(cli_is_action(e)){
 80014ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f0:	f7ff f899 	bl	8000626 <cli_is_action>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01d      	beq.n	8001536 <cli_find_action+0xaa>
            DBG_PRINTLN("Action '%s' found", e->name);
            cli_execute_action(e);
 80014fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014fc:	f7ff feec 	bl	80012d8 <cli_execute_action>
            return;
 8001500:	e01a      	b.n	8001538 <cli_find_action+0xac>
            ERR_PRINTLN("Unknown type of CLI element (check for NULLs in CLIs defines ref cli.h lines 49 - 52)");
            ERR_PRINTLN("");
            return;
        }

        tkn = strtok(NULL, " ");
 8001502:	4910      	ldr	r1, [pc, #64]	; (8001544 <cli_find_action+0xb8>)
 8001504:	2000      	movs	r0, #0
 8001506:	f00e fbaf 	bl	800fc68 <strtok>
 800150a:	62b8      	str	r0, [r7, #40]	; 0x28
    while(tkn != NULL){
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1da      	bne.n	80014c8 <cli_find_action+0x3c>
 8001512:	e000      	b.n	8001516 <cli_find_action+0x8a>
            break;
 8001514:	bf00      	nop
    }
    
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	461a      	mov	r2, r3
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <cli_find_action+0xbc>)
 8001522:	f000 fc13 	bl	8001d4c <cli_printf>
    cli_print_menu(currentMenu);
 8001526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001528:	f7ff f970 	bl	800080c <cli_print_menu>
 800152c:	e004      	b.n	8001538 <cli_find_action+0xac>
    if(maxLen == 0) return;
 800152e:	bf00      	nop
 8001530:	e002      	b.n	8001538 <cli_find_action+0xac>
    if(cliBuffer == NULL) return;
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <cli_find_action+0xac>
            return;
 8001536:	bf00      	nop
}
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bdb0      	pop	{r4, r5, r7, pc}
 800153e:	bf00      	nop
 8001540:	08010b0c 	.word	0x08010b0c
 8001544:	08010970 	.word	0x08010970
 8001548:	08010ae4 	.word	0x08010ae4

0800154c <cli_buff_element_is_hex>:

static bool cli_buff_element_is_hex(char* base, size_t argLen){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b30      	cmp	r3, #48	; 0x30
 800155c:	d115      	bne.n	800158a <cli_buff_element_is_hex+0x3e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	72fb      	strb	r3, [r7, #11]
 8001564:	f00d ff30 	bl	800f3c8 <__locale_ctype_ptr>
 8001568:	4602      	mov	r2, r0
 800156a:	7afb      	ldrb	r3, [r7, #11]
 800156c:	3301      	adds	r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <cli_buff_element_is_hex+0x34>
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	3320      	adds	r3, #32
 800157e:	e000      	b.n	8001582 <cli_buff_element_is_hex+0x36>
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	2b78      	cmp	r3, #120	; 0x78
 8001584:	d101      	bne.n	800158a <cli_buff_element_is_hex+0x3e>
 8001586:	2301      	movs	r3, #1
 8001588:	e038      	b.n	80015fc <cli_buff_element_is_hex+0xb0>
    
    for(size_t i = 0; i < argLen; i++){
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e030      	b.n	80015f2 <cli_buff_element_is_hex+0xa6>
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	72bb      	strb	r3, [r7, #10]
 800159a:	f00d ff15 	bl	800f3c8 <__locale_ctype_ptr>
 800159e:	4602      	mov	r2, r0
 80015a0:	7abb      	ldrb	r3, [r7, #10]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <cli_buff_element_is_hex+0x6a>
 80015b0:	7abb      	ldrb	r3, [r7, #10]
 80015b2:	3320      	adds	r3, #32
 80015b4:	e000      	b.n	80015b8 <cli_buff_element_is_hex+0x6c>
 80015b6:	7abb      	ldrb	r3, [r7, #10]
 80015b8:	2b60      	cmp	r3, #96	; 0x60
 80015ba:	dd17      	ble.n	80015ec <cli_buff_element_is_hex+0xa0>
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	727b      	strb	r3, [r7, #9]
 80015c6:	f00d feff 	bl	800f3c8 <__locale_ctype_ptr>
 80015ca:	4602      	mov	r2, r0
 80015cc:	7a7b      	ldrb	r3, [r7, #9]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d102      	bne.n	80015e2 <cli_buff_element_is_hex+0x96>
 80015dc:	7a7b      	ldrb	r3, [r7, #9]
 80015de:	3320      	adds	r3, #32
 80015e0:	e000      	b.n	80015e4 <cli_buff_element_is_hex+0x98>
 80015e2:	7a7b      	ldrb	r3, [r7, #9]
 80015e4:	2b66      	cmp	r3, #102	; 0x66
 80015e6:	dc01      	bgt.n	80015ec <cli_buff_element_is_hex+0xa0>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e007      	b.n	80015fc <cli_buff_element_is_hex+0xb0>
    for(size_t i = 0; i < argLen; i++){
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3ca      	bcc.n	8001590 <cli_buff_element_is_hex+0x44>
    }
    
    return false;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <cli_get_int_arg>:

static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b08d      	sub	sp, #52	; 0x34
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	71fb      	strb	r3, [r7, #7]
    if(currEl == NULL || argsStr == NULL) {
 8001612:	4b59      	ldr	r3, [pc, #356]	; (8001778 <cli_get_int_arg+0x174>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <cli_get_int_arg+0x1e>
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <cli_get_int_arg+0x178>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <cli_get_int_arg+0x22>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 8001622:	2300      	movs	r3, #0
 8001624:	e0a4      	b.n	8001770 <cli_get_int_arg+0x16c>
    }
    
    if(currEl->args == NULL) {
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <cli_get_int_arg+0x174>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <cli_get_int_arg+0x30>
        ERR_PRINTLN("Argument string is null");
        return false;
 8001630:	2300      	movs	r3, #0
 8001632:	e09d      	b.n	8001770 <cli_get_int_arg+0x16c>
    }
    
    bool elipsisPresent = false;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <cli_get_int_arg+0x174>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f107 0217 	add.w	r2, r7, #23
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f805 	bl	8000652 <cli_verify_args_str>
 8001648:	e9c7 0108 	strd	r0, r1, [r7, #32]
    
    if(argNum >= len && !elipsisPresent) {
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001658:	4299      	cmp	r1, r3
 800165a:	eb72 0304 	sbcs.w	r3, r2, r4
 800165e:	db07      	blt.n	8001670 <cli_get_int_arg+0x6c>
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	f083 0301 	eor.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <cli_get_int_arg+0x6c>
        ERR_PRINTLN("Argument index out of bounds");
        return false;
 800166c:	2300      	movs	r3, #0
 800166e:	e07f      	b.n	8001770 <cli_get_int_arg+0x16c>
    }
    
    char* argBase = argsStr;
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <cli_get_int_arg+0x178>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for(size_t i = 0; i < argNum; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
 800167a:	e006      	b.n	800168a <cli_get_int_arg+0x86>
        argBase = cli_go_to_next_argument(argBase);
 800167c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800167e:	f7ff fb38 	bl	8000cf2 <cli_go_to_next_argument>
 8001682:	62f8      	str	r0, [r7, #44]	; 0x2c
    for(size_t i = 0; i < argNum; i++)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	3301      	adds	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
 800168a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3f4      	bcc.n	800167c <cli_get_int_arg+0x78>
        
    if(argBase[0] == '\0'){ 
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <cli_get_int_arg+0x9a>
        ERR_PRINTLN("Argument '%c' index %u not found in buffer", ( (isUnsigned) ? 'u' : 'i' ), argNum);
        return false; 
 800169a:	2300      	movs	r3, #0
 800169c:	e068      	b.n	8001770 <cli_get_int_arg+0x16c>
    }

    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016aa:	4299      	cmp	r1, r3
 80016ac:	eb72 0304 	sbcs.w	r3, r2, r4
 80016b0:	da22      	bge.n	80016f8 <cli_get_int_arg+0xf4>
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <cli_get_int_arg+0xc4>
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <cli_get_int_arg+0x174>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b75      	cmp	r3, #117	; 0x75
 80016c6:	d10d      	bne.n	80016e4 <cli_get_int_arg+0xe0>
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f083 0301 	eor.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d011      	beq.n	80016f8 <cli_get_int_arg+0xf4>
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <cli_get_int_arg+0x174>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b69      	cmp	r3, #105	; 0x69
 80016e2:	d009      	beq.n	80016f8 <cli_get_int_arg+0xf4>
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <cli_get_int_arg+0x174>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b2a      	cmp	r3, #42	; 0x2a
 80016f2:	d001      	beq.n	80016f8 <cli_get_int_arg+0xf4>
        ERR_PRINTLN("Expected argument of type '%c', but argument list says '%c' in index %u", ( (isUnsigned) ? 'u' : 'i' ) , currEl->args[argNum], argNum);
        return false;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e03b      	b.n	8001770 <cli_get_int_arg+0x16c>
    }
    else if(argNum >= len || currEl->args[argNum] == '*'){
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001704:	4299      	cmp	r1, r3
 8001706:	eb72 0304 	sbcs.w	r3, r2, r4
 800170a:	da07      	bge.n	800171c <cli_get_int_arg+0x118>
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <cli_get_int_arg+0x174>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b2a      	cmp	r3, #42	; 0x2a
 800171a:	d10d      	bne.n	8001738 <cli_get_int_arg+0x134>
        if(!cli_verify_int(argBase, isUnsigned, true)) return false;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2201      	movs	r2, #1
 8001720:	4619      	mov	r1, r3
 8001722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001724:	f7ff fb19 	bl	8000d5a <cli_verify_int>
 8001728:	4603      	mov	r3, r0
 800172a:	f083 0301 	eor.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <cli_get_int_arg+0x134>
 8001734:	2300      	movs	r3, #0
 8001736:	e01b      	b.n	8001770 <cli_get_int_arg+0x16c>
    }
        
    int32_t argLen = cli_arg_str_len(argBase);
 8001738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800173a:	f7ff fa79 	bl	8000c30 <cli_arg_str_len>
 800173e:	61f8      	str	r0, [r7, #28]
    
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4619      	mov	r1, r3
 8001744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001746:	f7ff ff01 	bl	800154c <cli_buff_element_is_hex>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <cli_get_int_arg+0x150>
 8001750:	2310      	movs	r3, #16
 8001752:	e000      	b.n	8001756 <cli_get_int_arg+0x152>
 8001754:	230a      	movs	r3, #10
 8001756:	61bb      	str	r3, [r7, #24]
        
    *res = strtol(argBase, NULL, num_base);
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	2100      	movs	r1, #0
 800175c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175e:	f00e fb53 	bl	800fe08 <strtol>
 8001762:	4603      	mov	r3, r0
 8001764:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	e9c2 3400 	strd	r3, r4, [r2]

    return true;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3734      	adds	r7, #52	; 0x34
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	200004c4 	.word	0x200004c4
 800177c:	200004c0 	.word	0x200004c0

08001780 <cli_get_quotes>:

static bool cli_get_quotes(char* base, int32_t argLen, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
	size_t pos = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    bool err = true;
 8001792:	2301      	movs	r3, #1
 8001794:	76fb      	strb	r3, [r7, #27]
    size_t endString = ( (isString == true) ? 1 : 0 );
 8001796:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800179a:	613b      	str	r3, [r7, #16]
    
    for(int i = 1; i < argLen - 1; i++){
 800179c:	2301      	movs	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e06e      	b.n	8001880 <cli_get_quotes+0x100>
        
        if(pos >= buffLen - endString){
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d302      	bcc.n	80017b4 <cli_get_quotes+0x34>
            ERR_PRINTLN("Buffer received is too tiny, exiting...");
            err = false;
 80017ae:	2300      	movs	r3, #0
 80017b0:	76fb      	strb	r3, [r7, #27]
            break;
 80017b2:	e06a      	b.n	800188a <cli_get_quotes+0x10a>
        }
        
        if(base[i] == '\\'){
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b5c      	cmp	r3, #92	; 0x5c
 80017be:	d152      	bne.n	8001866 <cli_get_quotes+0xe6>
            switch(base[i + 1]){
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b5c      	cmp	r3, #92	; 0x5c
 80017cc:	d00b      	beq.n	80017e6 <cli_get_quotes+0x66>
 80017ce:	2b5c      	cmp	r3, #92	; 0x5c
 80017d0:	dc04      	bgt.n	80017dc <cli_get_quotes+0x5c>
 80017d2:	2b22      	cmp	r3, #34	; 0x22
 80017d4:	d012      	beq.n	80017fc <cli_get_quotes+0x7c>
 80017d6:	2b30      	cmp	r3, #48	; 0x30
 80017d8:	d01b      	beq.n	8001812 <cli_get_quotes+0x92>
 80017da:	e03b      	b.n	8001854 <cli_get_quotes+0xd4>
 80017dc:	2b6e      	cmp	r3, #110	; 0x6e
 80017de:	d023      	beq.n	8001828 <cli_get_quotes+0xa8>
 80017e0:	2b72      	cmp	r3, #114	; 0x72
 80017e2:	d02c      	beq.n	800183e <cli_get_quotes+0xbe>
 80017e4:	e036      	b.n	8001854 <cli_get_quotes+0xd4>
                case '\\' : buff[pos++] = '\\'; i++; break;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	61fa      	str	r2, [r7, #28]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	225c      	movs	r2, #92	; 0x5c
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e033      	b.n	8001864 <cli_get_quotes+0xe4>
                case '"'  : buff[pos++] = '"';  i++; break;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	61fa      	str	r2, [r7, #28]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	2222      	movs	r2, #34	; 0x22
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e028      	b.n	8001864 <cli_get_quotes+0xe4>
                case '0'  : buff[pos++] = '\0'; i++; break;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	61fa      	str	r2, [r7, #28]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e01d      	b.n	8001864 <cli_get_quotes+0xe4>
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	61fa      	str	r2, [r7, #28]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	220a      	movs	r2, #10
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e012      	b.n	8001864 <cli_get_quotes+0xe4>
                case 'r'  : buff[pos++] = '\r'; i++; break;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	61fa      	str	r2, [r7, #28]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	220d      	movs	r2, #13
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e007      	b.n	8001864 <cli_get_quotes+0xe4>
                
                default   : buff[pos++] = '\\'; break;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	61fa      	str	r2, [r7, #28]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	225c      	movs	r2, #92	; 0x5c
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	bf00      	nop
            }
            continue;
 8001864:	e009      	b.n	800187a <cli_get_quotes+0xfa>
        }
        
        buff[pos++] = base[i];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	441a      	add	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	1c59      	adds	r1, r3, #1
 8001870:	61f9      	str	r1, [r7, #28]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	440b      	add	r3, r1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < argLen - 1; i++){
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3b01      	subs	r3, #1
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	429a      	cmp	r2, r3
 8001888:	db8b      	blt.n	80017a2 <cli_get_quotes+0x22>
    }
    
    if(isString && pos < buffLen) buff[pos++] = '\0';
 800188a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <cli_get_quotes+0x128>
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d206      	bcs.n	80018a8 <cli_get_quotes+0x128>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	61fa      	str	r2, [r7, #28]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    
    *res = pos;
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	601a      	str	r2, [r3, #0]
    
    return err;
 80018ae:	7efb      	ldrb	r3, [r7, #27]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <cli_get_curly_braces>:

static bool cli_get_curly_braces(char* base, int32_t argLen, uint8_t buff[], size_t buffLen, size_t *res,  bool isString){
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b08d      	sub	sp, #52	; 0x34
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
	size_t pos = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool err = true;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    size_t endString = ( (isString == true) ? 1 : 0 );
 80018d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018d8:	623b      	str	r3, [r7, #32]

    for(int i = 1; i < argLen - 1; i++){
 80018da:	2301      	movs	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e04d      	b.n	800197c <cli_get_curly_braces+0xc0>
        
        if(base[i] == ' ') continue;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d043      	beq.n	8001974 <cli_get_curly_braces+0xb8>

        int32_t sz = cli_arg_str_len(&base[i]);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f99c 	bl	8000c30 <cli_arg_str_len>
 80018f8:	61f8      	str	r0, [r7, #28]
        
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe21 	bl	800154c <cli_buff_element_is_hex>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <cli_get_curly_braces+0x58>
 8001910:	2310      	movs	r3, #16
 8001912:	e000      	b.n	8001916 <cli_get_curly_braces+0x5a>
 8001914:	230a      	movs	r3, #10
 8001916:	61bb      	str	r3, [r7, #24]
        
        uint64_t num = (uint64_t)strtol(&base[i], NULL, num_base);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f00e fa70 	bl	800fe08 <strtol>
 8001928:	4603      	mov	r3, r0
 800192a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800192e:	e9c7 3404 	strd	r3, r4, [r7, #16]
        
        if(num > 255){
 8001932:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001936:	2c00      	cmp	r4, #0
 8001938:	bf08      	it	eq
 800193a:	f5b3 7f80 	cmpeq.w	r3, #256	; 0x100
 800193e:	d303      	bcc.n	8001948 <cli_get_curly_braces+0x8c>
            ERR_PRINTLN("Buffer argument error in byte number %u : Exceeded maximum value", pos);
            err = false;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8001946:	e01e      	b.n	8001986 <cli_get_curly_braces+0xca>
        }
        
        if(pos >= buffLen - endString){
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001950:	429a      	cmp	r2, r3
 8001952:	d303      	bcc.n	800195c <cli_get_curly_braces+0xa0>
            ERR_PRINTLN("Buffer received is too tiny, exiting...");
            err = false;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 800195a:	e014      	b.n	8001986 <cli_get_curly_braces+0xca>
        }
        
        buff[pos++] = (uint8_t) num;
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	7c3a      	ldrb	r2, [r7, #16]
 8001968:	701a      	strb	r2, [r3, #0]
        
        i += sz;
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e000      	b.n	8001976 <cli_get_curly_braces+0xba>
        if(base[i] == ' ') continue;
 8001974:	bf00      	nop
    for(int i = 1; i < argLen - 1; i++){
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	3301      	adds	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3b01      	subs	r3, #1
 8001980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001982:	429a      	cmp	r2, r3
 8001984:	dbac      	blt.n	80018e0 <cli_get_curly_braces+0x24>
    }
    
    if(isString && pos < buffLen) buff[pos++] = '\0';
 8001986:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <cli_get_curly_braces+0xe8>
 800198e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d206      	bcs.n	80019a4 <cli_get_curly_braces+0xe8>
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
    
    *res = pos;
 80019a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a8:	601a      	str	r2, [r3, #0]
    
    return err;
 80019aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3734      	adds	r7, #52	; 0x34
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
	...

080019b8 <cli_get_buff_arg>:

static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08d      	sub	sp, #52	; 0x34
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
    if(currEl == NULL || argsStr == NULL) {
 80019c6:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <cli_get_buff_arg+0x188>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <cli_get_buff_arg+0x1e>
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <cli_get_buff_arg+0x18c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <cli_get_buff_arg+0x22>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e0ad      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    }
    
    if(currEl->args == NULL) {
 80019da:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <cli_get_buff_arg+0x188>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <cli_get_buff_arg+0x30>
        ERR_PRINTLN("Argument string is null");
        return false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e0a6      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    }
    
    bool elipsisPresent = false;
 80019e8:	2300      	movs	r3, #0
 80019ea:	74fb      	strb	r3, [r7, #19]
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 80019ec:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <cli_get_buff_arg+0x188>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f107 0213 	add.w	r2, r7, #19
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fe2b 	bl	8000652 <cli_verify_args_str>
 80019fc:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
    if(argNum >= len && !elipsisPresent) { 
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a0c:	4299      	cmp	r1, r3
 8001a0e:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a12:	db07      	blt.n	8001a24 <cli_get_buff_arg+0x6c>
 8001a14:	7cfb      	ldrb	r3, [r7, #19]
 8001a16:	f083 0301 	eor.w	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <cli_get_buff_arg+0x6c>
        ERR_PRINTLN("Argument index out of bounds");
        return false;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e088      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    }
    
    char* argBase = argsStr;
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <cli_get_buff_arg+0x18c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    
    for(size_t i = 0; i < argNum; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
 8001a2e:	e006      	b.n	8001a3e <cli_get_buff_arg+0x86>
        argBase = cli_go_to_next_argument(argBase);
 8001a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a32:	f7ff f95e 	bl	8000cf2 <cli_go_to_next_argument>
 8001a36:	6278      	str	r0, [r7, #36]	; 0x24
    for(size_t i = 0; i < argNum; i++)
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	6a3a      	ldr	r2, [r7, #32]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3f4      	bcc.n	8001a30 <cli_get_buff_arg+0x78>
        
    if(argBase[0] == '\0') {
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <cli_get_buff_arg+0x9a>
        ERR_PRINTLN("Argument '%c' number %u not found in buffer", ( (isString) ? 's' : 'b' ), argNum );
        return false;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e071      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    }
    
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a5e:	4299      	cmp	r1, r3
 8001a60:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a64:	da24      	bge.n	8001ab0 <cli_get_buff_arg+0xf8>
 8001a66:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <cli_get_buff_arg+0xcc>
 8001a74:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <cli_get_buff_arg+0x188>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b62      	cmp	r3, #98	; 0x62
 8001a82:	d10b      	bne.n	8001a9c <cli_get_buff_arg+0xe4>
 8001a84:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d011      	beq.n	8001ab0 <cli_get_buff_arg+0xf8>
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <cli_get_buff_arg+0x188>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b73      	cmp	r3, #115	; 0x73
 8001a9a:	d009      	beq.n	8001ab0 <cli_get_buff_arg+0xf8>
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <cli_get_buff_arg+0x188>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aaa:	d001      	beq.n	8001ab0 <cli_get_buff_arg+0xf8>
        ERR_PRINTLN("Expected argument of type 's', but argument list says %c in index %u", currEl->args[argNum], argNum);
        return false;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e042      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    }
    else if(argNum >= len || currEl->args[argNum] == '*'){
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001abc:	4299      	cmp	r1, r3
 8001abe:	eb72 0304 	sbcs.w	r3, r2, r4
 8001ac2:	da07      	bge.n	8001ad4 <cli_get_buff_arg+0x11c>
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <cli_get_buff_arg+0x188>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ad2:	d103      	bne.n	8001adc <cli_get_buff_arg+0x124>
        cli_verify_buffer(argBase, true);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ad8:	f7ff fa2f 	bl	8000f3a <cli_verify_buffer>
    }
    
    int32_t argLen = cli_arg_str_len(argBase);
 8001adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ade:	f7ff f8a7 	bl	8000c30 <cli_arg_str_len>
 8001ae2:	6178      	str	r0, [r7, #20]
    
    if(argLen == -1) { 
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d101      	bne.n	8001af0 <cli_get_buff_arg+0x138>
        ERR_PRINTLN("Buffer in argument %u does not end", argNum);
        return false;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e022      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    }

    if(argBase[0] == '{') 
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b7b      	cmp	r3, #123	; 0x7b
 8001af6:	d10c      	bne.n	8001b12 <cli_get_buff_arg+0x15a>
        return cli_get_curly_braces(argBase, argLen, buff, buffLen, res, isString);
 8001af8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	6979      	ldr	r1, [r7, #20]
 8001b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b0a:	f7ff fed7 	bl	80018bc <cli_get_curly_braces>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	e011      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    else if(argBase[0] == '"')
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b22      	cmp	r3, #34	; 0x22
 8001b18:	d10c      	bne.n	8001b34 <cli_get_buff_arg+0x17c>
        return cli_get_quotes(argBase, argLen, buff, buffLen, res, isString);
 8001b1a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	6979      	ldr	r1, [r7, #20]
 8001b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2c:	f7ff fe28 	bl	8001780 <cli_get_quotes>
 8001b30:	4603      	mov	r3, r0
 8001b32:	e000      	b.n	8001b36 <cli_get_buff_arg+0x17e>
    
    ERR_PRINTLN("Buffer does not begin with \" nor {");
    return false;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200004c4 	.word	0x200004c4
 8001b44:	200004c0 	.word	0x200004c0

08001b48 <cli_treat_command>:

/**********************************************
 * PRIVATE / PUBLIC FUNCTIONS
 *********************************************/
 
void cli_treat_command(char cliBuffer[], size_t maxLen){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d019      	beq.n	8001b8c <cli_treat_command+0x44>
    if(cliBuffer == NULL) return;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d018      	beq.n	8001b90 <cli_treat_command+0x48>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment == false) return;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <cli_treat_command+0x54>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d113      	bne.n	8001b94 <cli_treat_command+0x4c>
    
    cli_cmd_waiting_treatment = false; 
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <cli_treat_command+0x54>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
#endif //CLI_POLLING_EN
    
    cli_find_action(cliBuffer, maxLen);
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fc89 	bl	800148c <cli_find_action>
    
    len = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <cli_treat_command+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    memset(cliBuffer, 0, maxLen);
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f00d fc69 	bl	800f45c <memset>
 8001b8a:	e004      	b.n	8001b96 <cli_treat_command+0x4e>
    if(maxLen == 0) return;
 8001b8c:	bf00      	nop
 8001b8e:	e002      	b.n	8001b96 <cli_treat_command+0x4e>
    if(cliBuffer == NULL) return;
 8001b90:	bf00      	nop
 8001b92:	e000      	b.n	8001b96 <cli_treat_command+0x4e>
    if(cli_cmd_waiting_treatment == false) return;
 8001b94:	bf00      	nop
    DBG_PRINT("Cmd treated, enter new command = ");
}
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200004c8 	.word	0x200004c8
 8001ba0:	200004bc 	.word	0x200004bc

08001ba4 <cli_get_int_argument>:

/**********************************************
 * PUBLIC FUNCTIONS
 *********************************************/

int64_t cli_get_int_argument(size_t argNum, bool *res){
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    int64_t ret = 0;
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	f04f 0400 	mov.w	r4, #0
 8001bb6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    bool success = cli_get_int_arg(argNum, &ret, false);
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fd1e 	bl	8001604 <cli_get_int_arg>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = success;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <cli_get_int_argument+0x34>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	7dfa      	ldrb	r2, [r7, #23]
 8001bd6:	701a      	strb	r2, [r3, #0]
    
    return ret;
 8001bd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4621      	mov	r1, r4
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}

08001be6 <cli_get_uint_argument>:

uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8001be6:	b590      	push	{r4, r7, lr}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
    uint64_t ret = 0;
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    bool success = cli_get_int_arg(argNum, (int64_t*)&ret, true);
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	2201      	movs	r2, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fcfd 	bl	8001604 <cli_get_int_arg>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = success;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <cli_get_uint_argument+0x34>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7dfa      	ldrb	r2, [r7, #23]
 8001c18:	701a      	strb	r2, [r3, #0]
    
    return ret;
 8001c1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4621      	mov	r1, r4
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <cli_get_buffer_argument>:
    
    return ret;
}
#endif

size_t cli_get_buffer_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
    size_t bRead = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, false);
 8001c3a:	f107 0210 	add.w	r2, r7, #16
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff feb5 	bl	80019b8 <cli_get_buff_arg>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = ret;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <cli_get_buffer_argument+0x36>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7dfa      	ldrb	r2, [r7, #23]
 8001c5c:	701a      	strb	r2, [r3, #0]
    
    return bRead;
 8001c5e:	693b      	ldr	r3, [r7, #16]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <cli_get_string_argument>:
    if(res != NULL) *res = ret;
    
    return bRead;
}

size_t cli_get_string_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
    size_t bRead = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, true);
 8001c7a:	f107 0210 	add.w	r2, r7, #16
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fe95 	bl	80019b8 <cli_get_buff_arg>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = ret;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <cli_get_string_argument+0x36>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7dfa      	ldrb	r2, [r7, #23]
 8001c9c:	701a      	strb	r2, [r3, #0]
    
    return bRead;
 8001c9e:	693b      	ldr	r3, [r7, #16]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <cli_insert_char>:

cli_status_e cli_insert_char(char cliBuffer[], size_t maxLen, char const c){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	71fb      	strb	r3, [r7, #7]
    if(maxLen == 0) return CLI_ERR;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <cli_insert_char+0x18>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e03d      	b.n	8001d3c <cli_insert_char+0x94>
    if(cliBuffer == NULL) return CLI_ERR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <cli_insert_char+0x22>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e038      	b.n	8001d3c <cli_insert_char+0x94>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment){
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <cli_insert_char+0x9c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <cli_insert_char+0x2e>
        ERR_PRINTLN("Command waiting for treatment");
        return CLI_WAITING_TREATMENT;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e032      	b.n	8001d3c <cli_insert_char+0x94>
    }
#endif //CLI_POLLING_EN

    if(c == '\r') return CLI_CONTINUE;
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b0d      	cmp	r3, #13
 8001cda:	d101      	bne.n	8001ce0 <cli_insert_char+0x38>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e02d      	b.n	8001d3c <cli_insert_char+0x94>

    if(c != '\n'){
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d011      	beq.n	8001d0a <cli_insert_char+0x62>
        cliBuffer[((len++)%maxLen)] = c;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <cli_insert_char+0xa0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <cli_insert_char+0xa0>)
 8001cee:	600a      	str	r2, [r1, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	fb01 f202 	mul.w	r2, r1, r2
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	79fa      	ldrb	r2, [r7, #7]
 8001d04:	701a      	strb	r2, [r3, #0]
        return CLI_CONTINUE;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e018      	b.n	8001d3c <cli_insert_char+0x94>
    }
    
    if(len >= maxLen){
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <cli_insert_char+0xa0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d809      	bhi.n	8001d28 <cli_insert_char+0x80>
        len = 0;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <cli_insert_char+0xa0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
        memset(cliBuffer, 0, maxLen);
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f00d fb9c 	bl	800f45c <memset>
        ERR_PRINT("COMMAND TOO LARGE! Enter new command = ");
        return CLI_TOO_BIG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e009      	b.n	8001d3c <cli_insert_char+0x94>
    }
    
    cliBuffer[len] = '\0';
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <cli_insert_char+0xa0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 0)
    cli_treat_command(cliBuffer, maxLen);
    return CLI_COMMAND_RCV;
#else
    cli_cmd_waiting_treatment = true;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <cli_insert_char+0x9c>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    return CLI_WAITING_TREATMENT;
 8001d3a:	2304      	movs	r3, #4
#endif //CLI_POLLING_EN
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200004c8 	.word	0x200004c8
 8001d48:	200004bc 	.word	0x200004bc

08001d4c <cli_printf>:

__attribute__((weak)) void cli_printf(char const * const str, ...){
 8001d4c:	b40f      	push	{r0, r1, r2, r3}
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, str);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	607b      	str	r3, [r7, #4]
    vprintf(str, args);
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	6938      	ldr	r0, [r7, #16]
 8001d5e:	f00e f869 	bl	800fe34 <viprintf>
    va_end(args);

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d6c:	b004      	add	sp, #16
 8001d6e:	4770      	bx	lr

08001d70 <cli_rcv_char_cb_irq>:
 * CLI Receive char (IRQ)
 *
 * @brief This function receives a character and puts in the cli buffer
 *
 **********************************************************************/
void cli_rcv_char_cb_irq(){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	cli_insert_char(cliBuffer, sizeof(cliBuffer), c);
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <cli_rcv_char_cb_irq+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <cli_rcv_char_cb_irq+0x24>)
 8001d7e:	f7ff ff93 	bl	8001ca8 <cli_insert_char>
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 8001d82:	2201      	movs	r2, #1
 8001d84:	4902      	ldr	r1, [pc, #8]	; (8001d90 <cli_rcv_char_cb_irq+0x20>)
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <cli_rcv_char_cb_irq+0x28>)
 8001d88:	f00c fa22 	bl	800e1d0 <HAL_UART_Receive_IT>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200004c9 	.word	0x200004c9
 8001d94:	200004cc 	.word	0x200004cc
 8001d98:	200156d0 	.word	0x200156d0

08001d9c <cli_init>:
 * CLI INIT
 *
 * @brief This function initializes the CLI
 *
 **********************************************************************/
void cli_init(){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	memset(cliBuffer, 0, sizeof(cliBuffer));
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	2100      	movs	r1, #0
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <cli_init+0x30>)
 8001da6:	f00d fb59 	bl	800f45c <memset>
	HAL_UART_Abort(&USART_CLI);
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <cli_init+0x34>)
 8001dac:	f00c fa65 	bl	800e27a <HAL_UART_Abort>
	HAL_UART_AbortReceive_IT(&USART_CLI);
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <cli_init+0x34>)
 8001db2:	f00c fbd5 	bl	800e560 <HAL_UART_AbortReceive_IT>
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <cli_init+0x34>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4905      	ldr	r1, [pc, #20]	; (8001dd4 <cli_init+0x38>)
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <cli_init+0x34>)
 8001dc2:	f00c fa05 	bl	800e1d0 <HAL_UART_Receive_IT>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200004cc 	.word	0x200004cc
 8001dd0:	200156d0 	.word	0x200156d0
 8001dd4:	200004c9 	.word	0x200004c9

08001dd8 <cli_process>:
 * CLI Process
 *
 * @brief This function treats the command sent by CLI
 *
 **********************************************************************/
void cli_process(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	cli_treat_command(cliBuffer, sizeof(cliBuffer));
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <cli_process+0x10>)
 8001de0:	f7ff feb2 	bl	8001b48 <cli_treat_command>
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200004cc 	.word	0x200004cc

08001dec <read>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void read(){
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001df2:	2100      	movs	r1, #0
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fef6 	bl	8001be6 <cli_get_uint_argument>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	613b      	str	r3, [r7, #16]
	uint32_t len = cli_get_uint32_argument(1, NULL);
 8001e00:	2100      	movs	r1, #0
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff feef 	bl	8001be6 <cli_get_uint_argument>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	60fb      	str	r3, [r7, #12]

	/* Allocate buffer
	 --------------------------------------------------*/
	uint8_t* buffer = (uint8_t*)os_heap_alloc(len);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fd34 	bl	800287c <os_heap_alloc>
 8001e14:	60b8      	str	r0, [r7, #8]
	ASSERT(buffer != NULL);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <read+0x3a>
 8001e1c:	222c      	movs	r2, #44	; 0x2c
 8001e1e:	491e      	ldr	r1, [pc, #120]	; (8001e98 <read+0xac>)
 8001e20:	481e      	ldr	r0, [pc, #120]	; (8001e9c <read+0xb0>)
 8001e22:	f00d fe93 	bl	800fb4c <iprintf>

	/* Read from flash
	 --------------------------------------------------*/
	int32_t readB = os_flash_read(addr, buffer, len);
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6938      	ldr	r0, [r7, #16]
 8001e2c:	f002 fca8 	bl	8004780 <os_flash_read>
 8001e30:	6078      	str	r0, [r7, #4]
	ASSERT(readB >= 0);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da04      	bge.n	8001e42 <read+0x56>
 8001e38:	2231      	movs	r2, #49	; 0x31
 8001e3a:	4917      	ldr	r1, [pc, #92]	; (8001e98 <read+0xac>)
 8001e3c:	4817      	ldr	r0, [pc, #92]	; (8001e9c <read+0xb0>)
 8001e3e:	f00d fe85 	bl	800fb4c <iprintf>

	/* Show values
	 --------------------------------------------------*/
	PRINTLN("Read %ld bytes", readB);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2235      	movs	r2, #53	; 0x35
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <read+0xac>)
 8001e48:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <read+0xb4>)
 8001e4a:	f00d fe7f 	bl	800fb4c <iprintf>
	for(int i = 0; i < readB; i++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e00d      	b.n	8001e70 <read+0x84>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2237      	movs	r2, #55	; 0x37
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <read+0xac>)
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <read+0xb8>)
 8001e66:	f00d fe71 	bl	800fb4c <iprintf>
	for(int i = 0; i < readB; i++){
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbed      	blt.n	8001e54 <read+0x68>
	}

	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f000 fd65 	bl	8002948 <os_heap_free>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <read+0xa2>
 8001e84:	223a      	movs	r2, #58	; 0x3a
 8001e86:	4904      	ldr	r1, [pc, #16]	; (8001e98 <read+0xac>)
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <read+0xb0>)
 8001e8a:	f00d fe5f 	bl	800fb4c <iprintf>
}
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08010bb4 	.word	0x08010bb4
 8001e9c:	08010bc0 	.word	0x08010bc0
 8001ea0:	08010bdc 	.word	0x08010bdc
 8001ea4:	08010bf8 	.word	0x08010bf8

08001ea8 <write>:

static void write(){
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b0b9      	sub	sp, #228	; 0xe4
 8001eac:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	uint8_t buffer[200];
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fe98 	bl	8001be6 <cli_get_uint_argument>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001ebe:	4639      	mov	r1, r7
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	22c8      	movs	r2, #200	; 0xc8
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff feaf 	bl	8001c28 <cli_get_buffer_argument>
 8001eca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	/* Write into flash
	 --------------------------------------------------*/
	int32_t writeB = os_flash_write(addr, buffer, realSize);
 8001ece:	463b      	mov	r3, r7
 8001ed0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001eda:	f002 fb47 	bl	800456c <os_flash_write>
 8001ede:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	ASSERT(writeB >= 0);
 8001ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da04      	bge.n	8001ef4 <write+0x4c>
 8001eea:	2248      	movs	r2, #72	; 0x48
 8001eec:	4915      	ldr	r1, [pc, #84]	; (8001f44 <write+0x9c>)
 8001eee:	4816      	ldr	r0, [pc, #88]	; (8001f48 <write+0xa0>)
 8001ef0:	f00d fe2c 	bl	800fb4c <iprintf>

	/* Show written values
	 --------------------------------------------------*/
	PRINTLN("Write %ld bytes", writeB);
 8001ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ef8:	224c      	movs	r2, #76	; 0x4c
 8001efa:	4912      	ldr	r1, [pc, #72]	; (8001f44 <write+0x9c>)
 8001efc:	4813      	ldr	r0, [pc, #76]	; (8001f4c <write+0xa4>)
 8001efe:	f00d fe25 	bl	800fb4c <iprintf>
	for(int i = 0; i < realSize; i++){
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f08:	e011      	b.n	8001f2e <write+0x86>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f1a:	224e      	movs	r2, #78	; 0x4e
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <write+0x9c>)
 8001f1e:	480c      	ldr	r0, [pc, #48]	; (8001f50 <write+0xa8>)
 8001f20:	f00d fe14 	bl	800fb4c <iprintf>
	for(int i = 0; i < realSize; i++){
 8001f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f32:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d8e7      	bhi.n	8001f0a <write+0x62>
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	37dc      	adds	r7, #220	; 0xdc
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	08010bb4 	.word	0x08010bb4
 8001f48:	08010bc0 	.word	0x08010bc0
 8001f4c:	08010c18 	.word	0x08010c18
 8001f50:	08010bf8 	.word	0x08010bf8

08001f54 <erase>:

static void erase(){
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff fe42 	bl	8001be6 <cli_get_uint_argument>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	60fb      	str	r3, [r7, #12]
	uint32_t num = cli_get_uint32_argument(1, NULL);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff fe3b 	bl	8001be6 <cli_get_uint_argument>
 8001f70:	4603      	mov	r3, r0
 8001f72:	460c      	mov	r4, r1
 8001f74:	60bb      	str	r3, [r7, #8]

	/* Erase sectors
	 --------------------------------------------------*/
	int32_t erase = os_flash_erase(addrB, num);
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f002 fc41 	bl	8004800 <os_flash_erase>
 8001f7e:	6078      	str	r0, [r7, #4]
	ASSERT(erase >= 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da04      	bge.n	8001f90 <erase+0x3c>
 8001f86:	225c      	movs	r2, #92	; 0x5c
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <erase+0x50>)
 8001f8a:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <erase+0x54>)
 8001f8c:	f00d fdde 	bl	800fb4c <iprintf>

	/* Feedback
	 --------------------------------------------------*/
	PRINTLN("erase %ld sectors", erase);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2260      	movs	r2, #96	; 0x60
 8001f94:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <erase+0x50>)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <erase+0x58>)
 8001f98:	f00d fdd8 	bl	800fb4c <iprintf>
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	08010bb4 	.word	0x08010bb4
 8001fa8:	08010bc0 	.word	0x08010bc0
 8001fac:	08010c34 	.word	0x08010c34

08001fb0 <open>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void open(){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b090      	sub	sp, #64	; 0x40
 8001fb4:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8001fb6:	4639      	mov	r1, r7
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2232      	movs	r2, #50	; 0x32
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fe53 	bl	8001c68 <cli_get_string_argument>

	/* Open file
	 --------------------------------------------------*/
	int err = lfs_file_open(&lfs, &lfs_file, name, LFS_O_CREAT | LFS_O_RDWR);
 8001fc2:	463a      	mov	r2, r7
 8001fc4:	f240 1303 	movw	r3, #259	; 0x103
 8001fc8:	490d      	ldr	r1, [pc, #52]	; (8002000 <open+0x50>)
 8001fca:	480e      	ldr	r0, [pc, #56]	; (8002004 <open+0x54>)
 8001fcc:	f009 fa44 	bl	800b458 <lfs_file_open>
 8001fd0:	6378      	str	r0, [r7, #52]	; 0x34
	if(err < 0)
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da09      	bge.n	8001fec <open+0x3c>
		PRINTLN("lfs open '%s' error %d", name, err);
 8001fd8:	463a      	mov	r2, r7
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	2229      	movs	r2, #41	; 0x29
 8001fe2:	4909      	ldr	r1, [pc, #36]	; (8002008 <open+0x58>)
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <open+0x5c>)
 8001fe6:	f00d fdb1 	bl	800fb4c <iprintf>
	else{
		PRINTLN("Open '%s' OK", name);
	}
}
 8001fea:	e005      	b.n	8001ff8 <open+0x48>
		PRINTLN("Open '%s' OK", name);
 8001fec:	463b      	mov	r3, r7
 8001fee:	222b      	movs	r2, #43	; 0x2b
 8001ff0:	4905      	ldr	r1, [pc, #20]	; (8002008 <open+0x58>)
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <open+0x60>)
 8001ff4:	f00d fdaa 	bl	800fb4c <iprintf>
}
 8001ff8:	bf00      	nop
 8001ffa:	3738      	adds	r7, #56	; 0x38
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000054c 	.word	0x2000054c
 8002004:	20015618 	.word	0x20015618
 8002008:	08010ca8 	.word	0x08010ca8
 800200c:	08010cb4 	.word	0x08010cb4
 8002010:	08010cd8 	.word	0x08010cd8

08002014 <bRead>:

static void bRead(){
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 800201a:	2100      	movs	r1, #0
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff fde2 	bl	8001be6 <cli_get_uint_argument>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	60bb      	str	r3, [r7, #8]

	/* Allocate buffer
	 --------------------------------------------------*/
	uint8_t* buffer = os_heap_alloc(nBytes);
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f000 fc27 	bl	800287c <os_heap_alloc>
 800202e:	6078      	str	r0, [r7, #4]

	/* read from file
	 --------------------------------------------------*/
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4918      	ldr	r1, [pc, #96]	; (8002098 <bRead+0x84>)
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <bRead+0x88>)
 8002038:	f009 fa6e 	bl	800b518 <lfs_file_read>
 800203c:	6038      	str	r0, [r7, #0]
	if(err < 0)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da06      	bge.n	8002052 <bRead+0x3e>
		PRINTLN("lfs read error %ld", err);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	223d      	movs	r2, #61	; 0x3d
 8002048:	4915      	ldr	r1, [pc, #84]	; (80020a0 <bRead+0x8c>)
 800204a:	4816      	ldr	r0, [pc, #88]	; (80020a4 <bRead+0x90>)
 800204c:	f00d fd7e 	bl	800fb4c <iprintf>
 8002050:	e01a      	b.n	8002088 <bRead+0x74>
	else{
		/* Show values
		 --------------------------------------------------*/
		PRINTLN("Read %ld bytes", err);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	4912      	ldr	r1, [pc, #72]	; (80020a0 <bRead+0x8c>)
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <bRead+0x94>)
 800205a:	f00d fd77 	bl	800fb4c <iprintf>
		for(int i = 0; i < nBytes; i++){
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e00d      	b.n	8002080 <bRead+0x6c>
			PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2243      	movs	r2, #67	; 0x43
 8002072:	490b      	ldr	r1, [pc, #44]	; (80020a0 <bRead+0x8c>)
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <bRead+0x98>)
 8002076:	f00d fd69 	bl	800fb4c <iprintf>
		for(int i = 0; i < nBytes; i++){
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8ed      	bhi.n	8002064 <bRead+0x50>
	}


	/* free buffer
	 --------------------------------------------------*/
	os_heap_free(buffer);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fc5d 	bl	8002948 <os_heap_free>
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bd90      	pop	{r4, r7, pc}
 8002096:	bf00      	nop
 8002098:	2000054c 	.word	0x2000054c
 800209c:	20015618 	.word	0x20015618
 80020a0:	08010ca8 	.word	0x08010ca8
 80020a4:	08010cf4 	.word	0x08010cf4
 80020a8:	08010d14 	.word	0x08010d14
 80020ac:	08010d30 	.word	0x08010d30

080020b0 <read>:

static void read(){
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 80020b6:	2100      	movs	r1, #0
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff fd94 	bl	8001be6 <cli_get_uint_argument>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	60fb      	str	r3, [r7, #12]

	/* Allocate buffer
	 --------------------------------------------------*/
	uint8_t* buffer = os_heap_alloc(nBytes+1);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fbd7 	bl	800287c <os_heap_alloc>
 80020ce:	60b8      	str	r0, [r7, #8]
	buffer[nBytes] = '\0';
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]

	/* read from file
	 --------------------------------------------------*/
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4913      	ldr	r1, [pc, #76]	; (800212c <read+0x7c>)
 80020e0:	4813      	ldr	r0, [pc, #76]	; (8002130 <read+0x80>)
 80020e2:	f009 fa19 	bl	800b518 <lfs_file_read>
 80020e6:	6078      	str	r0, [r7, #4]
	if(err < 0)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da06      	bge.n	80020fc <read+0x4c>
		PRINTLN("lfs read error %ld", err);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	225c      	movs	r2, #92	; 0x5c
 80020f2:	4910      	ldr	r1, [pc, #64]	; (8002134 <read+0x84>)
 80020f4:	4810      	ldr	r0, [pc, #64]	; (8002138 <read+0x88>)
 80020f6:	f00d fd29 	bl	800fb4c <iprintf>
 80020fa:	e010      	b.n	800211e <read+0x6e>
	else{

		buffer[err] = '\0';
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4413      	add	r3, r2
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
		/* Show values
		 --------------------------------------------------*/
		PRINTLN("Read %ld bytes", err);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2262      	movs	r2, #98	; 0x62
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <read+0x84>)
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <read+0x8c>)
 800210e:	f00d fd1d 	bl	800fb4c <iprintf>
		PRINTLN("File : %s", buffer);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2263      	movs	r2, #99	; 0x63
 8002116:	4907      	ldr	r1, [pc, #28]	; (8002134 <read+0x84>)
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <read+0x90>)
 800211a:	f00d fd17 	bl	800fb4c <iprintf>
	}

	/* free buffer
	 --------------------------------------------------*/
	os_heap_free(buffer);
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f000 fc12 	bl	8002948 <os_heap_free>
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	2000054c 	.word	0x2000054c
 8002130:	20015618 	.word	0x20015618
 8002134:	08010ca8 	.word	0x08010ca8
 8002138:	08010cf4 	.word	0x08010cf4
 800213c:	08010d14 	.word	0x08010d14
 8002140:	08010d50 	.word	0x08010d50

08002144 <write>:

static void write(){
 8002144:	b580      	push	{r7, lr}
 8002146:	b0b4      	sub	sp, #208	; 0xd0
 8002148:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	uint8_t buffer[200];
	uint32_t nBytes = cli_get_string_argument(0, buffer, sizeof(buffer), NULL);
 800214a:	4639      	mov	r1, r7
 800214c:	2300      	movs	r3, #0
 800214e:	22c8      	movs	r2, #200	; 0xc8
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff fd89 	bl	8001c68 <cli_get_string_argument>
 8002156:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	/* write into file
	 --------------------------------------------------*/
	lfs_ssize_t err = lfs_file_write(&lfs, &lfs_file, buffer, nBytes);
 800215a:	463a      	mov	r2, r7
 800215c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002160:	490d      	ldr	r1, [pc, #52]	; (8002198 <write+0x54>)
 8002162:	480e      	ldr	r0, [pc, #56]	; (800219c <write+0x58>)
 8002164:	f009 fa08 	bl	800b578 <lfs_file_write>
 8002168:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	if(err < 0)
 800216c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002170:	2b00      	cmp	r3, #0
 8002172:	da07      	bge.n	8002184 <write+0x40>
		PRINTLN("lfs write error %ld", err);
 8002174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002178:	2276      	movs	r2, #118	; 0x76
 800217a:	4909      	ldr	r1, [pc, #36]	; (80021a0 <write+0x5c>)
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <write+0x60>)
 800217e:	f00d fce5 	bl	800fb4c <iprintf>
	else{
		PRINTLN("write OK");
	}
}
 8002182:	e004      	b.n	800218e <write+0x4a>
		PRINTLN("write OK");
 8002184:	2278      	movs	r2, #120	; 0x78
 8002186:	4906      	ldr	r1, [pc, #24]	; (80021a0 <write+0x5c>)
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <write+0x64>)
 800218a:	f00d fcdf 	bl	800fb4c <iprintf>
}
 800218e:	bf00      	nop
 8002190:	37d0      	adds	r7, #208	; 0xd0
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000054c 	.word	0x2000054c
 800219c:	20015618 	.word	0x20015618
 80021a0:	08010ca8 	.word	0x08010ca8
 80021a4:	08010d68 	.word	0x08010d68
 80021a8:	08010d88 	.word	0x08010d88

080021ac <seek>:

static void seek(){
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	lfs_soff_t pos = (lfs_soff_t)cli_get_int32_argument(0, NULL);
 80021b2:	2100      	movs	r1, #0
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff fcf5 	bl	8001ba4 <cli_get_int_argument>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	607b      	str	r3, [r7, #4]

	/* write into file
	 --------------------------------------------------*/
	lfs_soff_t err = lfs_file_seek(&lfs, &lfs_file, pos, LFS_SEEK_SET);
 80021c0:	2300      	movs	r3, #0
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <seek+0x48>)
 80021c6:	480c      	ldr	r0, [pc, #48]	; (80021f8 <seek+0x4c>)
 80021c8:	f009 fa06 	bl	800b5d8 <lfs_file_seek>
 80021cc:	6038      	str	r0, [r7, #0]
	if(err < 0)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da06      	bge.n	80021e2 <seek+0x36>
		PRINTLN("lfs seek error %ld", err);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2286      	movs	r2, #134	; 0x86
 80021d8:	4908      	ldr	r1, [pc, #32]	; (80021fc <seek+0x50>)
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <seek+0x54>)
 80021dc:	f00d fcb6 	bl	800fb4c <iprintf>
	else{
		PRINTLN("seek OK");
	}
}
 80021e0:	e004      	b.n	80021ec <seek+0x40>
		PRINTLN("seek OK");
 80021e2:	2288      	movs	r2, #136	; 0x88
 80021e4:	4905      	ldr	r1, [pc, #20]	; (80021fc <seek+0x50>)
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <seek+0x58>)
 80021e8:	f00d fcb0 	bl	800fb4c <iprintf>
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	2000054c 	.word	0x2000054c
 80021f8:	20015618 	.word	0x20015618
 80021fc:	08010ca8 	.word	0x08010ca8
 8002200:	08010da0 	.word	0x08010da0
 8002204:	08010dc0 	.word	0x08010dc0

08002208 <close>:

static void close(){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0

	/* Close current file
	 --------------------------------------------------*/
	int err = lfs_file_close(&lfs, &lfs_file);
 800220e:	490c      	ldr	r1, [pc, #48]	; (8002240 <close+0x38>)
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <close+0x3c>)
 8002212:	f009 f955 	bl	800b4c0 <lfs_file_close>
 8002216:	6078      	str	r0, [r7, #4]
	if(err < 0)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	da06      	bge.n	800222c <close+0x24>
		PRINTLN("lfs close error %d", err);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2292      	movs	r2, #146	; 0x92
 8002222:	4909      	ldr	r1, [pc, #36]	; (8002248 <close+0x40>)
 8002224:	4809      	ldr	r0, [pc, #36]	; (800224c <close+0x44>)
 8002226:	f00d fc91 	bl	800fb4c <iprintf>
	else{
		PRINTLN("Close OK");
	}
}
 800222a:	e004      	b.n	8002236 <close+0x2e>
		PRINTLN("Close OK");
 800222c:	2294      	movs	r2, #148	; 0x94
 800222e:	4906      	ldr	r1, [pc, #24]	; (8002248 <close+0x40>)
 8002230:	4807      	ldr	r0, [pc, #28]	; (8002250 <close+0x48>)
 8002232:	f00d fc8b 	bl	800fb4c <iprintf>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000054c 	.word	0x2000054c
 8002244:	20015618 	.word	0x20015618
 8002248:	08010ca8 	.word	0x08010ca8
 800224c:	08010dd4 	.word	0x08010dd4
 8002250:	08010df4 	.word	0x08010df4

08002254 <delete>:

static void delete(){
 8002254:	b580      	push	{r7, lr}
 8002256:	b090      	sub	sp, #64	; 0x40
 8002258:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 800225a:	4639      	mov	r1, r7
 800225c:	2300      	movs	r3, #0
 800225e:	2232      	movs	r2, #50	; 0x32
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fd01 	bl	8001c68 <cli_get_string_argument>

	/* Remove file / dir
	 --------------------------------------------------*/
	int err = lfs_remove(&lfs, name);
 8002266:	463b      	mov	r3, r7
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <delete+0x4c>)
 800226c:	f009 f8de 	bl	800b42c <lfs_remove>
 8002270:	6378      	str	r0, [r7, #52]	; 0x34
	if(err < 0)
 8002272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002274:	2b00      	cmp	r3, #0
 8002276:	da09      	bge.n	800228c <delete+0x38>
		PRINTLN("lfs remove '%s' error %d", name, err);
 8002278:	463a      	mov	r2, r7
 800227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	22a3      	movs	r2, #163	; 0xa3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <delete+0x50>)
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <delete+0x54>)
 8002286:	f00d fc61 	bl	800fb4c <iprintf>
	else{
		PRINTLN("Remove '%s' OK", name);
	}
}
 800228a:	e005      	b.n	8002298 <delete+0x44>
		PRINTLN("Remove '%s' OK", name);
 800228c:	463b      	mov	r3, r7
 800228e:	22a5      	movs	r2, #165	; 0xa5
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <delete+0x50>)
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <delete+0x58>)
 8002294:	f00d fc5a 	bl	800fb4c <iprintf>
}
 8002298:	bf00      	nop
 800229a:	3738      	adds	r7, #56	; 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20015618 	.word	0x20015618
 80022a4:	08010ca8 	.word	0x08010ca8
 80022a8:	08010e0c 	.word	0x08010e0c
 80022ac:	08010e34 	.word	0x08010e34

080022b0 <ls>:

static void ls(){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0d2      	sub	sp, #328	; 0x148
 80022b4:	af02      	add	r7, sp, #8

	/* Open current directory
	 --------------------------------------------------*/
	lfs_dir_t dir;
	int err = lfs_dir_open(&lfs, &dir, cur_dir);
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <ls+0xc0>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022be:	4619      	mov	r1, r3
 80022c0:	482c      	ldr	r0, [pc, #176]	; (8002374 <ls+0xc4>)
 80022c2:	f009 f9e5 	bl	800b690 <lfs_dir_open>
 80022c6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	if(err < 0){
 80022ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da07      	bge.n	80022e2 <ls+0x32>
		PRINTLN("Dir open err %d", err);
 80022d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022d6:	22b0      	movs	r2, #176	; 0xb0
 80022d8:	4927      	ldr	r1, [pc, #156]	; (8002378 <ls+0xc8>)
 80022da:	4828      	ldr	r0, [pc, #160]	; (800237c <ls+0xcc>)
 80022dc:	f00d fc36 	bl	800fb4c <iprintf>
 80022e0:	e041      	b.n	8002366 <ls+0xb6>
	struct lfs_info info;
	while(1){

		/* Get its info
		 --------------------------------------------------*/
		err = lfs_dir_read(&lfs, &dir, &info);
 80022e2:	463a      	mov	r2, r7
 80022e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022e8:	4619      	mov	r1, r3
 80022ea:	4822      	ldr	r0, [pc, #136]	; (8002374 <ls+0xc4>)
 80022ec:	f009 fa18 	bl	800b720 <lfs_dir_read>
 80022f0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
		if(err < 0){
 80022f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da07      	bge.n	800230c <ls+0x5c>
			PRINTLN("Dir open err %d", err);
 80022fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002300:	22bd      	movs	r2, #189	; 0xbd
 8002302:	491d      	ldr	r1, [pc, #116]	; (8002378 <ls+0xc8>)
 8002304:	481d      	ldr	r0, [pc, #116]	; (800237c <ls+0xcc>)
 8002306:	f00d fc21 	bl	800fb4c <iprintf>
			break;
 800230a:	e019      	b.n	8002340 <ls+0x90>
		}

		/* If it has no name, stop
		 --------------------------------------------------*/
		if(strlen(info.name) == 0)
 800230c:	463b      	mov	r3, r7
 800230e:	3308      	adds	r3, #8
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d013      	beq.n	800233e <ls+0x8e>
			break;

		/* Print filename and size
		 --------------------------------------------------*/
		PRINTLN("[%s] %s, size = %lu", info.type == LFS_TYPE_REG ? "File" : "Dir", info.name, info.size);
 8002316:	463b      	mov	r3, r7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <ls+0x72>
 800231e:	4a18      	ldr	r2, [pc, #96]	; (8002380 <ls+0xd0>)
 8002320:	e000      	b.n	8002324 <ls+0x74>
 8002322:	4a18      	ldr	r2, [pc, #96]	; (8002384 <ls+0xd4>)
 8002324:	463b      	mov	r3, r7
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	463b      	mov	r3, r7
 800232c:	3308      	adds	r3, #8
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	22c8      	movs	r2, #200	; 0xc8
 8002334:	4910      	ldr	r1, [pc, #64]	; (8002378 <ls+0xc8>)
 8002336:	4814      	ldr	r0, [pc, #80]	; (8002388 <ls+0xd8>)
 8002338:	f00d fc08 	bl	800fb4c <iprintf>
		err = lfs_dir_read(&lfs, &dir, &info);
 800233c:	e7d1      	b.n	80022e2 <ls+0x32>
			break;
 800233e:	bf00      	nop
	};

	/* Close directory
	 --------------------------------------------------*/
	err = lfs_dir_close(&lfs, &dir);
 8002340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002344:	4619      	mov	r1, r3
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <ls+0xc4>)
 8002348:	f009 f9d4 	bl	800b6f4 <lfs_dir_close>
 800234c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	if(err < 0){
 8002350:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002354:	2b00      	cmp	r3, #0
 8002356:	da06      	bge.n	8002366 <ls+0xb6>
		PRINTLN("Dir close err %d", err);
 8002358:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800235c:	22cf      	movs	r2, #207	; 0xcf
 800235e:	4906      	ldr	r1, [pc, #24]	; (8002378 <ls+0xc8>)
 8002360:	480a      	ldr	r0, [pc, #40]	; (800238c <ls+0xdc>)
 8002362:	f00d fbf3 	bl	800fb4c <iprintf>
	}
}
 8002366:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200000d8 	.word	0x200000d8
 8002374:	20015618 	.word	0x20015618
 8002378:	08010ca8 	.word	0x08010ca8
 800237c:	08010e50 	.word	0x08010e50
 8002380:	08010e6c 	.word	0x08010e6c
 8002384:	08010e74 	.word	0x08010e74
 8002388:	08010e78 	.word	0x08010e78
 800238c:	08010e98 	.word	0x08010e98

08002390 <xmodem>:

static void xmodem(){
 8002390:	b580      	push	{r7, lr}
 8002392:	b08e      	sub	sp, #56	; 0x38
 8002394:	af00      	add	r7, sp, #0

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8002396:	1d39      	adds	r1, r7, #4
 8002398:	2300      	movs	r3, #0
 800239a:	2232      	movs	r2, #50	; 0x32
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff fc63 	bl	8001c68 <cli_get_string_argument>

	/* Open file
	 --------------------------------------------------*/
	xModem_rcv(name);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4618      	mov	r0, r3
 80023a6:	f009 fc0b 	bl	800bbc0 <xModem_rcv>
}
 80023aa:	bf00      	nop
 80023ac:	3738      	adds	r7, #56	; 0x38
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023b8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <__NVIC_SystemReset+0x20>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <__NVIC_SystemReset+0x20>)
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_SystemReset+0x24>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
 80023cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <__NVIC_SystemReset+0x1c>
 80023d4:	e000ed00 	.word	0xe000ed00
 80023d8:	05fa0004 	.word	0x05fa0004

080023dc <reset>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void reset(){
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 80023e0:	f7ff ffe8 	bl	80023b4 <__NVIC_SystemReset>

080023e4 <top>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void top(){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af02      	add	r7, sp, #8

	/* For each task
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <top+0x60>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	607b      	str	r3, [r7, #4]
	PRINTLN("Curent Tasks : ");
 80023f0:	221d      	movs	r2, #29
 80023f2:	4915      	ldr	r1, [pc, #84]	; (8002448 <top+0x64>)
 80023f4:	4815      	ldr	r0, [pc, #84]	; (800244c <top+0x68>)
 80023f6:	f00d fba9 	bl	800fb4c <iprintf>
	PRINTLN("PID,   name");
 80023fa:	221e      	movs	r2, #30
 80023fc:	4912      	ldr	r1, [pc, #72]	; (8002448 <top+0x64>)
 80023fe:	4814      	ldr	r0, [pc, #80]	; (8002450 <top+0x6c>)
 8002400:	f00d fba4 	bl	800fb4c <iprintf>
	while(it != NULL){
 8002404:	e017      	b.n	8002436 <top+0x52>
		PRINTLN("%05d, %s", ((os_task_t*)it->element)->pid, ((os_task_t*)it->element)->obj.name == NULL ? "No name" : ((os_task_t*)it->element)->obj.name);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <top+0x3c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	e000      	b.n	8002422 <top+0x3e>
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <top+0x70>)
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	2220      	movs	r2, #32
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <top+0x64>)
 800242a:	480b      	ldr	r0, [pc, #44]	; (8002458 <top+0x74>)
 800242c:	f00d fb8e 	bl	800fb4c <iprintf>
		it = it->next;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	607b      	str	r3, [r7, #4]
	while(it != NULL){
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e4      	bne.n	8002406 <top+0x22>
	}
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200155f8 	.word	0x200155f8
 8002448:	08011038 	.word	0x08011038
 800244c:	08011044 	.word	0x08011044
 8002450:	08011060 	.word	0x08011060
 8002454:	08011078 	.word	0x08011078
 8002458:	08011080 	.word	0x08011080

0800245c <exec>:

static void exec(){
 800245c:	b580      	push	{r7, lr}
 800245e:	b0ac      	sub	sp, #176	; 0xb0
 8002460:	af02      	add	r7, sp, #8

	/* Get arguments
	 --------------------------------------------------*/
	char name[50];
	size_t len = cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8002462:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002466:	2300      	movs	r3, #0
 8002468:	2232      	movs	r2, #50	; 0x32
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff fbfc 	bl	8001c68 <cli_get_string_argument>
 8002470:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	//uint32_t addr = cli_get_uint32_argument(1, NULL);

	/* Open file
	 --------------------------------------------------*/
	lfs_file_t file;
	int err = lfs_file_open(&lfs, &file, name, LFS_O_RDONLY);
 8002474:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002478:	f107 0108 	add.w	r1, r7, #8
 800247c:	2301      	movs	r3, #1
 800247e:	4847      	ldr	r0, [pc, #284]	; (800259c <exec+0x140>)
 8002480:	f008 ffea 	bl	800b458 <lfs_file_open>
 8002484:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	if(err < 0){
 8002488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800248c:	2b00      	cmp	r3, #0
 800248e:	da05      	bge.n	800249c <exec+0x40>
		PRINTLN("Open Error");
 8002490:	2232      	movs	r2, #50	; 0x32
 8002492:	4943      	ldr	r1, [pc, #268]	; (80025a0 <exec+0x144>)
 8002494:	4843      	ldr	r0, [pc, #268]	; (80025a4 <exec+0x148>)
 8002496:	f00d fb59 	bl	800fb4c <iprintf>
		return;
 800249a:	e07c      	b.n	8002596 <exec+0x13a>
	}

	/* Allocate name
	 --------------------------------------------------*/
	char* taskName = (char*)os_heap_alloc(len);
 800249c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80024a0:	f000 f9ec 	bl	800287c <os_heap_alloc>
 80024a4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	if(taskName == NULL){
 80024a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <exec+0x60>
		PRINTLN("Aloc error");
 80024b0:	223a      	movs	r2, #58	; 0x3a
 80024b2:	493b      	ldr	r1, [pc, #236]	; (80025a0 <exec+0x144>)
 80024b4:	483c      	ldr	r0, [pc, #240]	; (80025a8 <exec+0x14c>)
 80024b6:	f00d fb49 	bl	800fb4c <iprintf>
		return;
 80024ba:	e06c      	b.n	8002596 <exec+0x13a>
	}

	snprintf(taskName, len, "%s", name);
 80024bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024c0:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <exec+0x150>)
 80024c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024c6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80024ca:	f00d fb67 	bl	800fb9c <sniprintf>

	/* Allocate code space
	 --------------------------------------------------*/
	uint8_t* code = (uint8_t*)os_heap_alloc((uint32_t)lfs_file_size(&lfs, &file));
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4619      	mov	r1, r3
 80024d4:	4831      	ldr	r0, [pc, #196]	; (800259c <exec+0x140>)
 80024d6:	f009 f8af 	bl	800b638 <lfs_file_size>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f9cd 	bl	800287c <os_heap_alloc>
 80024e2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	if(code == NULL){
 80024e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <exec+0xa6>
		PRINTLN("Aloc error");
 80024ee:	2244      	movs	r2, #68	; 0x44
 80024f0:	492b      	ldr	r1, [pc, #172]	; (80025a0 <exec+0x144>)
 80024f2:	482d      	ldr	r0, [pc, #180]	; (80025a8 <exec+0x14c>)
 80024f4:	f00d fb2a 	bl	800fb4c <iprintf>
		os_heap_free(taskName);
 80024f8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80024fc:	f000 fa24 	bl	8002948 <os_heap_free>
		return;
 8002500:	e049      	b.n	8002596 <exec+0x13a>
	}

	/* Load file in RAM
	 --------------------------------------------------*/
	lfs_ssize_t rErr = lfs_file_read(&lfs, &file, code, (lfs_size_t)lfs_file_size(&lfs, &file));
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	4619      	mov	r1, r3
 8002508:	4824      	ldr	r0, [pc, #144]	; (800259c <exec+0x140>)
 800250a:	f009 f895 	bl	800b638 <lfs_file_size>
 800250e:	4603      	mov	r3, r0
 8002510:	f107 0108 	add.w	r1, r7, #8
 8002514:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002518:	4820      	ldr	r0, [pc, #128]	; (800259c <exec+0x140>)
 800251a:	f008 fffd 	bl	800b518 <lfs_file_read>
 800251e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(rErr < 0){
 8002522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002526:	2b00      	cmp	r3, #0
 8002528:	da05      	bge.n	8002536 <exec+0xda>
		PRINTLN("read Error");
 800252a:	224d      	movs	r2, #77	; 0x4d
 800252c:	491c      	ldr	r1, [pc, #112]	; (80025a0 <exec+0x144>)
 800252e:	4820      	ldr	r0, [pc, #128]	; (80025b0 <exec+0x154>)
 8002530:	f00d fb0c 	bl	800fb4c <iprintf>
		return;
 8002534:	e02f      	b.n	8002596 <exec+0x13a>
	}

	/* Close file
	 --------------------------------------------------*/
	err = lfs_file_close(&lfs, &file);
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	4619      	mov	r1, r3
 800253c:	4817      	ldr	r0, [pc, #92]	; (800259c <exec+0x140>)
 800253e:	f008 ffbf 	bl	800b4c0 <lfs_file_close>
 8002542:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	if(err < 0)
 8002546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800254a:	2b00      	cmp	r3, #0
 800254c:	da04      	bge.n	8002558 <exec+0xfc>
		PRINTLN("close error");
 800254e:	2255      	movs	r2, #85	; 0x55
 8002550:	4913      	ldr	r1, [pc, #76]	; (80025a0 <exec+0x144>)
 8002552:	4818      	ldr	r0, [pc, #96]	; (80025b4 <exec+0x158>)
 8002554:	f00d fafa 	bl	800fb4c <iprintf>

	/* Calculate main address
	 --------------------------------------------------*/
	uint32_t addr = ((uint32_t volatile * ) code)[1];
 8002558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	addr -= FLASH_BASE_ADDR;
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <exec+0x15c>)
 8002564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	addr += (uint32_t)&code[0];
 800256e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002572:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002576:	4413      	add	r3, r2
 8002578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	/* Create task
	 --------------------------------------------------*/
	os_handle_t h;
	os_task_create(&h, taskName, (void* (*)(void*))(addr), 10, OS_DEFAULT_STACK_SIZE, NULL);
 800257c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002580:	1d38      	adds	r0, r7, #4
 8002582:	2300      	movs	r3, #0
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	230a      	movs	r3, #10
 800258e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002592:	f001 fae1 	bl	8003b58 <os_task_create>
}
 8002596:	37a8      	adds	r7, #168	; 0xa8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20015618 	.word	0x20015618
 80025a0:	08011038 	.word	0x08011038
 80025a4:	08011098 	.word	0x08011098
 80025a8:	080110b0 	.word	0x080110b0
 80025ac:	080110c8 	.word	0x080110c8
 80025b0:	080110cc 	.word	0x080110cc
 80025b4:	080110e4 	.word	0x080110e4
 80025b8:	08000000 	.word	0x08000000

080025bc <kill>:

static void kill(){
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0

	/* Get argument
	 ------------------------------------------------------*/
	uint16_t pid = cli_get_uint16_argument(0, NULL);
 80025c2:	2100      	movs	r1, #0
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7ff fb0e 	bl	8001be6 <cli_get_uint_argument>
 80025ca:	4603      	mov	r3, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	80fb      	strh	r3, [r7, #6]

	/* Get task by PID
	 ------------------------------------------------------*/
	os_handle_t h = os_task_getByPID(pid);
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 ff08 	bl	80043e8 <os_task_getByPID>
 80025d8:	6038      	str	r0, [r7, #0]

	/* Delete task
	 ------------------------------------------------------*/
	os_task_delete(h);
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	f001 fddc 	bl	8004198 <os_task_delete>

	/* Feedback
	 ------------------------------------------------------*/
	if(h == NULL)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <kill+0x38>
		PRINTLN("Task PID %d not found", pid);
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2274      	movs	r2, #116	; 0x74
 80025ea:	4907      	ldr	r1, [pc, #28]	; (8002608 <kill+0x4c>)
 80025ec:	4807      	ldr	r0, [pc, #28]	; (800260c <kill+0x50>)
 80025ee:	f00d faad 	bl	800fb4c <iprintf>
	else{
		PRINTLN("Task PID %d killed", pid);
	}
}
 80025f2:	e005      	b.n	8002600 <kill+0x44>
		PRINTLN("Task PID %d killed", pid);
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	2276      	movs	r2, #118	; 0x76
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <kill+0x4c>)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <kill+0x54>)
 80025fc:	f00d faa6 	bl	800fb4c <iprintf>
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	08011038 	.word	0x08011038
 800260c:	080110fc 	.word	0x080110fc
 8002610:	08011120 	.word	0x08011120

08002614 <readELF>:

static void readELF(){
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0

	/* Get argument
	 ------------------------------------------------------*/
	char name[50];
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 800261a:	1d39      	adds	r1, r7, #4
 800261c:	2300      	movs	r3, #0
 800261e:	2232      	movs	r2, #50	; 0x32
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fb21 	bl	8001c68 <cli_get_string_argument>

	void os_task_createProcess(char* file);
	os_task_createProcess(name);
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4618      	mov	r0, r3
 800262a:	f001 fd3f 	bl	80040ac <os_task_createProcess>
}
 800262e:	bf00      	nop
 8002630:	3738      	adds	r7, #56	; 0x38
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <os_init_get>:
 * @brief This function informs other processes that the OS is initialized
 *
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	return os_init_done;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <os_init_get+0x14>)
 800263e:	781b      	ldrb	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200005a0 	.word	0x200005a0

08002650 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	460b      	mov	r3, r1
 800265e:	72fb      	strb	r3, [r7, #11]

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <os_init+0xbc>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <os_init+0x1c>
 8002668:	2305      	movs	r3, #5
 800266a:	e04a      	b.n	8002702 <os_init+0xb2>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <os_init+0xc0>)
 800266e:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	; 0xd80
 8002672:	4a27      	ldr	r2, [pc, #156]	; (8002710 <os_init+0xc0>)
 8002674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002678:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <os_init+0xc4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <os_init+0xc4>)
 8002682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002686:	6013      	str	r3, [r2, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <os_init+0xc4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a21      	ldr	r2, [pc, #132]	; (8002714 <os_init+0xc4>)
 800268e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002692:	6013      	str	r3, [r2, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <os_init+0xc0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <os_init+0xc0>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6093      	str	r3, [r2, #8]
	OS_SYSTICK_SET_PRIO(14);
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <os_init+0xc0>)
 80026a2:	22e0      	movs	r2, #224	; 0xe0
 80026a4:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <os_init+0xc0>)
 80026aa:	22f0      	movs	r2, #240	; 0xf0
 80026ac:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <os_init+0xc0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a16      	ldr	r2, [pc, #88]	; (8002710 <os_init+0xc0>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6093      	str	r3, [r2, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 80026bc:	f000 f8c6 	bl	800284c <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 80026c0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f001 f96b 	bl	80039a4 <os_task_init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK)
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <os_init+0x8c>
		return ret;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	e012      	b.n	8002702 <os_init+0xb2>

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <os_init+0xbc>)
 80026ea:	701a      	strb	r2, [r3, #0]

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, 0, idle_stack_size, NULL);
 80026ec:	2300      	movs	r3, #0
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <os_init+0xc8>)
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <os_init+0xcc>)
 80026fc:	f001 fa2c 	bl	8003b58 <os_task_create>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200005a0 	.word	0x200005a0
 8002710:	e000e008 	.word	0xe000e008
 8002714:	e000ef34 	.word	0xe000ef34
 8002718:	08002721 	.word	0x08002721
 800271c:	200155f4 	.word	0x200155f4

08002720 <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(i);
	while(1){
 8002728:	e7fe      	b.n	8002728 <os_idle_task_fn+0x8>

0800272a <os_no_task_ready_cb>:
 * or is unblocked by an interrupt that this function will stop calling
 *
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
	return;
 800272e:	bf00      	nop
}
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <os_insufficient_heap_cb>:
 *
 * @brief This function is called by the OS when an os_alloc fails due to
 * not enogh memory
 *
 **********************************************************************/
__weak void os_insufficient_heap_cb(){
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
	return;
 800273c:	bf00      	nop
}
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <os_heap_BlockGetSize>:
 *
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	if(p == NULL) return 0; //Avoid explosion
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <os_heap_BlockGetSize+0x12>
 8002756:	2300      	movs	r3, #0
 8002758:	e00b      	b.n	8002772 <os_heap_BlockGetSize+0x2a>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <os_heap_BlockGetSize+0x24>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	e002      	b.n	8002772 <os_heap_BlockGetSize+0x2a>
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <os_heap_BlockGetSize+0x38>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	1ad3      	subs	r3, r2, r3
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200145a8 	.word	0x200145a8

08002784 <os_heap_AllocateBeginning>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateBeginning(os_heap_header_t* p, uint32_t size){
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <os_heap_AllocateBeginning+0x14>
 8002794:	2300      	movs	r3, #0
 8002796:	e01f      	b.n	80027d8 <os_heap_AllocateBeginning+0x54>
	if(size == 0) return NULL;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <os_heap_AllocateBeginning+0x1e>
 800279e:	2300      	movs	r3, #0
 80027a0:	e01a      	b.n	80027d8 <os_heap_AllocateBeginning+0x54>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	os_heap_header_t* newBlock   = p;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	3308      	adds	r3, #8
 80027ae:	60bb      	str	r3, [r7, #8]

	/* Add Block to list
	 ---------------------------------------------------*/
	newTopHead->addr_next = newBlock->addr_next != (uint32_t)newTopHead ? newBlock->addr_next : newTopHead->addr_next;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d002      	beq.n	80027c0 <os_heap_AllocateBeginning+0x3c>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	e001      	b.n	80027c4 <os_heap_AllocateBeginning+0x40>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	6013      	str	r3, [r2, #0]
	newBlock->addr_next	  = (uint32_t) newTopHead;
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3308      	adds	r3, #8
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <os_heap_AllocateEnd>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateEnd(os_heap_header_t* p, uint32_t size){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <os_heap_AllocateEnd+0x14>
 80027f4:	2300      	movs	r3, #0
 80027f6:	e024      	b.n	8002842 <os_heap_AllocateEnd+0x5e>
	if(size == 0) return NULL;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <os_heap_AllocateEnd+0x1e>
 80027fe:	2300      	movs	r3, #0
 8002800:	e01f      	b.n	8002842 <os_heap_AllocateEnd+0x5e>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	uint32_t block_size = os_heap_BlockGetSize(p);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa0 	bl	8002748 <os_heap_BlockGetSize>
 8002808:	6178      	str	r0, [r7, #20]
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	441a      	add	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	3b08      	subs	r3, #8
 8002816:	613b      	str	r3, [r7, #16]
	os_heap_header_t* oldTopHead = (os_heap_header_t*) (p);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60fb      	str	r3, [r7, #12]

	/* Add Block to list
	 ---------------------------------------------------*/
	newBlock->addr_next   = oldTopHead->addr_next;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	601a      	str	r2, [r3, #0]
	oldTopHead->addr_next = newBlock != oldTopHead ? (uint32_t) newBlock : oldTopHead->addr_next;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d102      	bne.n	8002832 <os_heap_AllocateEnd+0x4e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	e000      	b.n	8002834 <os_heap_AllocateEnd+0x50>
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6013      	str	r3, [r2, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2201      	movs	r2, #1
 800283c:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	3308      	adds	r3, #8

}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <os_heap_clear>:
 * OS Heap Clear
 *
 * @brief This function clears the heap
 *
 **********************************************************************/
void os_heap_clear(){
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 8002852:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8002856:	2100      	movs	r1, #0
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <os_heap_clear+0x2c>)
 800285a:	f00c fdff 	bl	800f45c <memset>

	/* Get header pointers
	 ---------------------------------------------------*/
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <os_heap_clear+0x2c>)
 8002860:	607b      	str	r3, [r7, #4]

	/* Initialize headers
	 ---------------------------------------------------*/
	p->block_used = 0; //Mark as not used
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
	p->addr_next  = 0; //Point outside of the heap to indicate end
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200005a8 	.word	0x200005a8

0800287c <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <os_heap_alloc+0x12>
 800288a:	2300      	movs	r3, #0
 800288c:	e054      	b.n	8002938 <os_heap_alloc+0xbc>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800288e:	f3ef 8310 	mrs	r3, PRIMASK
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	b672      	cpsid	i
 8002896:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t min_size = 0xFFFFFFFF;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	623b      	str	r3, [r7, #32]
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <os_heap_alloc+0xc4>)
 80028a6:	61fb      	str	r3, [r7, #28]

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3307      	adds	r3, #7
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	61bb      	str	r3, [r7, #24]
	while(p != NULL){
 80028b2:	e018      	b.n	80028e6 <os_heap_alloc+0x6a>

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 80028b4:	69f8      	ldr	r0, [r7, #28]
 80028b6:	f7ff ff47 	bl	8002748 <os_heap_BlockGetSize>
 80028ba:	4603      	mov	r3, r0
 80028bc:	3b08      	subs	r3, #8
 80028be:	613b      	str	r3, [r7, #16]
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <os_heap_alloc+0x64>
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <os_heap_alloc+0x64>
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d303      	bcc.n	80028e0 <os_heap_alloc+0x64>
			pBlock = p;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
			min_size = data_size;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	623b      	str	r3, [r7, #32]
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61fb      	str	r3, [r7, #28]
	while(p != NULL){
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e3      	bne.n	80028b4 <os_heap_alloc+0x38>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <os_heap_alloc+0xc4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d303      	bcc.n	80028fc <os_heap_alloc+0x80>
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <os_heap_alloc+0xc8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d908      	bls.n	800290e <os_heap_alloc+0x92>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 80028fc:	f7ff ff1c 	bl	8002738 <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f383 8810 	msr	PRIMASK, r3
 8002906:	f3bf 8f6f 	isb	sy
		return NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	e014      	b.n	8002938 <os_heap_alloc+0xbc>
	}

	/* If pBlock is not NULL, reserve a memory block
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b31      	cmp	r3, #49	; 0x31
 8002912:	d805      	bhi.n	8002920 <os_heap_alloc+0xa4>
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002918:	f7ff ff34 	bl	8002784 <os_heap_AllocateBeginning>
 800291c:	4603      	mov	r3, r0
 800291e:	e004      	b.n	800292a <os_heap_alloc+0xae>
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002924:	f7ff ff5e 	bl	80027e4 <os_heap_AllocateEnd>
 8002928:	4603      	mov	r3, r0
 800292a:	617b      	str	r3, [r7, #20]
	OS_EXIT_CRITICAL();
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f383 8810 	msr	PRIMASK, r3
 8002932:	f3bf 8f6f 	isb	sy
	return ret;
 8002936:	697b      	ldr	r3, [r7, #20]

}
 8002938:	4618      	mov	r0, r3
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200005a8 	.word	0x200005a8
 8002944:	200145a7 	.word	0x200145a7

08002948 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <os_heap_free+0x12>
 8002956:	2301      	movs	r3, #1
 8002958:	e088      	b.n	8002a6c <os_heap_free+0x124>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a46      	ldr	r2, [pc, #280]	; (8002a78 <os_heap_free+0x130>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d303      	bcc.n	800296a <os_heap_free+0x22>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a45      	ldr	r2, [pc, #276]	; (8002a7c <os_heap_free+0x134>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <os_heap_free+0x26>
 800296a:	2301      	movs	r3, #1
 800296c:	e07e      	b.n	8002a6c <os_heap_free+0x124>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800296e:	f3ef 8310 	mrs	r3, PRIMASK
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	b672      	cpsid	i
 8002976:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <os_heap_free+0x138>)
 800297c:	61fb      	str	r3, [r7, #28]

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
	os_heap_header_t* pPrev = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]

	/* Search for the target block while still inside the heap
	 ---------------------------------------------------*/
	bool inBounds = false;
 8002986:	2300      	movs	r3, #0
 8002988:	74fb      	strb	r3, [r7, #19]
	bool BlockFound = false;
 800298a:	2300      	movs	r3, #0
 800298c:	74bb      	strb	r3, [r7, #18]
	while(1){

		/* Calculate if out of bounds of block found
		 ---------------------------------------------------*/
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <os_heap_free+0x138>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d305      	bcc.n	80029a2 <os_heap_free+0x5a>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <os_heap_free+0x134>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d801      	bhi.n	80029a2 <os_heap_free+0x5a>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <os_heap_free+0x5c>
 80029a2:	2300      	movs	r3, #0
 80029a4:	74fb      	strb	r3, [r7, #19]
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	74fb      	strb	r3, [r7, #19]
		BlockFound = (uint32_t)cur <= (uint32_t)p && (cur->addr_next == 0 || (uint32_t)p <= (uint32_t)cur->addr_next );
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d80a      	bhi.n	80029cc <os_heap_free+0x84>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <os_heap_free+0x80>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d301      	bcc.n	80029cc <os_heap_free+0x84>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <os_heap_free+0x86>
 80029cc:	2300      	movs	r3, #0
 80029ce:	74bb      	strb	r3, [r7, #18]
 80029d0:	7cbb      	ldrb	r3, [r7, #18]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	74bb      	strb	r3, [r7, #18]

		/* Break if we finished searching
		 ---------------------------------------------------*/
		if(!inBounds || BlockFound) break;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d108      	bne.n	80029f6 <os_heap_free+0xae>
 80029e4:	7cbb      	ldrb	r3, [r7, #18]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <os_heap_free+0xae>

		/* Save current block and go to next block
		 ---------------------------------------------------*/
		pPrev = cur;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	61bb      	str	r3, [r7, #24]
		cur = (os_heap_header_t*) ( cur->addr_next );
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61fb      	str	r3, [r7, #28]
		inBounds = (uint32_t)&os_heap[0] <= (uint32_t)cur && (uint32_t)cur <= (uint32_t)&os_heap[sizeof(os_heap) - 1];
 80029f4:	e7cb      	b.n	800298e <os_heap_free+0x46>
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if( !BlockFound || !inBounds ) {
 80029f6:	7cbb      	ldrb	r3, [r7, #18]
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d105      	bne.n	8002a0e <os_heap_free+0xc6>
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <os_heap_free+0xd4>
		OS_EXIT_CRITICAL();
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f383 8810 	msr	PRIMASK, r3
 8002a14:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e027      	b.n	8002a6c <os_heap_free+0x124>
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <os_heap_free+0xfc>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <os_heap_free+0xfc>
		cur->addr_next = pNext->addr_next;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	601a      	str	r2, [r3, #0]
		pNext->addr_next = 0; //For principle, but not necessary
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <os_heap_free+0x118>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <os_heap_free+0x118>
		pPrev->addr_next = cur->addr_next;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	601a      	str	r2, [r3, #0]
		cur->addr_next = 0; //For principle, but not necessary
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
	}

	OS_EXIT_CRITICAL();
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f383 8810 	msr	PRIMASK, r3
 8002a66:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3724      	adds	r7, #36	; 0x24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	200005b0 	.word	0x200005b0
 8002a7c:	200145a7 	.word	0x200145a7
 8002a80:	200005a8 	.word	0x200005a8

08002a84 <os_mutex_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the mutex
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_mutex_udpatePrio(os_handle_t h){
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

	/* Error Check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <os_mutex_udpatePrio+0x12>
 8002a92:	2300      	movs	r3, #0
 8002a94:	e032      	b.n	8002afc <os_mutex_udpatePrio+0x78>
	if(h->type != OS_OBJ_MUTEX) return false;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d001      	beq.n	8002aa2 <os_mutex_udpatePrio+0x1e>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e02c      	b.n	8002afc <os_mutex_udpatePrio+0x78>

	/* Convet reference and store previous priority
	 ---------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*)h;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	617b      	str	r3, [r7, #20]
	int8_t prev_max_prio = mutex->max_prio;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	7f5b      	ldrb	r3, [r3, #29]
 8002aaa:	74fb      	strb	r3, [r7, #19]

	/* Get reference to the first blocked task
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8002aac:	23ff      	movs	r3, #255	; 0xff
 8002aae:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8002abc:	e00f      	b.n	8002ade <os_mutex_udpatePrio+0x5a>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ac6:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002ac8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002acc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	da01      	bge.n	8002ad8 <os_mutex_udpatePrio+0x54>
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
 8002ad6:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ec      	bne.n	8002abe <os_mutex_udpatePrio+0x3a>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	mutex->max_prio = maxPrio;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	7ffa      	ldrb	r2, [r7, #31]
 8002ae8:	775a      	strb	r2, [r3, #29]
	return prev_max_prio != maxPrio;
 8002aea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002aee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <os_task_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the task
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_task_udpatePrio(os_handle_t h){
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <os_task_udpatePrio+0x12>
 8002b16:	2300      	movs	r3, #0
 8002b18:	e04e      	b.n	8002bb8 <os_task_udpatePrio+0xb0>
	if(h->type != OS_OBJ_TASK) return false;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <os_task_udpatePrio+0x1e>
 8002b22:	2300      	movs	r3, #0
 8002b24:	e048      	b.n	8002bb8 <os_task_udpatePrio+0xb0>

	/* Store priority
	 ---------------------------------------------------*/
	os_task_t* tsk = (os_task_t*)h;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	617b      	str	r3, [r7, #20]
	int8_t prev_prio = tsk->priority;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b30:	74fb      	strb	r3, [r7, #19]

	/* Point to the first task on block list
	 ---------------------------------------------------*/
	int8_t maxPrio = tsk->basePriority;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	7e5b      	ldrb	r3, [r3, #25]
 8002b36:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8002b44:	e00f      	b.n	8002b66 <os_task_udpatePrio+0x5e>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b4e:	72bb      	strb	r3, [r7, #10]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002b50:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002b54:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	da01      	bge.n	8002b60 <os_task_udpatePrio+0x58>
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ec      	bne.n	8002b46 <os_task_udpatePrio+0x3e>
	}

	/* Point to the first mutex in the owned list
	 ---------------------------------------------------*/
	head = (os_list_head_t*) ( ((os_task_t*)h)->ownedMutex);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	60fb      	str	r3, [r7, #12]
	it = head->head.next;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]

	/* While it is a valid mutex
	 ---------------------------------------------------*/
	while(it != NULL){
 8002b78:	e00e      	b.n	8002b98 <os_task_udpatePrio+0x90>

		/* Get mutex' priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	7f5b      	ldrb	r3, [r3, #29]
 8002b80:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002b82:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002b86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	da01      	bge.n	8002b92 <os_task_udpatePrio+0x8a>
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	77fb      	strb	r3, [r7, #31]

		/* Goes to next mutex
		 ---------------------------------------------------*/
		it = it->next;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1ed      	bne.n	8002b7a <os_task_udpatePrio+0x72>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	tsk->priority = maxPrio;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	7ffa      	ldrb	r2, [r7, #31]
 8002ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return prev_prio != maxPrio;
 8002ba6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002baa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3724      	adds	r7, #36	; 0x24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <os_obj_updatePrio>:
 * @param os_handle_t h : [in] The reference to the object
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
void os_obj_updatePrio(os_handle_t h){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

	/* Enter critical section
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	b672      	cpsid	i
 8002bd4:	f3bf 8f6f 	isb	sy

	/* If the object is a mutex, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d10a      	bne.n	8002bf6 <os_obj_updatePrio+0x32>
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff4f 	bl	8002a84 <os_mutex_udpatePrio>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <os_obj_updatePrio+0x32>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ffe7 	bl	8002bc4 <os_obj_updatePrio>
	}

	/* If the object is a task, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d13d      	bne.n	8002c7a <os_obj_updatePrio+0xb6>
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ff82 	bl	8002b08 <os_task_udpatePrio>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d037      	beq.n	8002c7a <os_obj_updatePrio+0xb6>

		/* If its priority changed, we must update the objects the task is waiting
		 ---------------------------------------------------*/
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e02f      	b.n	8002c70 <os_obj_updatePrio+0xac>

			/* objects that are not tasks or mutexes
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d008      	beq.n	8002c34 <os_obj_updatePrio+0x70>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <os_obj_updatePrio+0x82>

				/* Update object's priority
				 ---------------------------------------------------*/
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ffbf 	bl	8002bc4 <os_obj_updatePrio>
			}

			/* update msgQ
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d108      	bne.n	8002c6a <os_obj_updatePrio+0xa6>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fc75 	bl	8003554 <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3ca      	bcc.n	8002c10 <os_obj_updatePrio+0x4c>
		}
	}

	/* Exit critical section
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
 8002c80:	f3bf 8f6f 	isb	sy
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <os_list_init>:
 *
 * @brief This function initializes a list
 *
 * @return os_list_head_t* : reference to the head of the list
 **********************************************************************/
os_list_head_t* os_list_init(){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0

	/* Allocate head
	 ---------------------------------------------------*/
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 8002c92:	201c      	movs	r0, #28
 8002c94:	f7ff fdf2 	bl	800287c <os_heap_alloc>
 8002c98:	6078      	str	r0, [r7, #4]
	if(ret == NULL) return NULL;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <os_list_init+0x18>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e012      	b.n	8002cca <os_list_init+0x3e>

	/* Init head and return
	 ---------------------------------------------------*/
	ret->head.next = NULL;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
	ret->head.prev = NULL;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
	ret->head.element = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
	ret->first = NULL;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
	ret->last = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
	ret->listSize = 0;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]

	return ret;
 8002cc8:	687b      	ldr	r3, [r7, #4]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <os_list_search>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	  		   : [in] element to search
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(el == NULL) return NULL;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <os_list_search+0x14>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e01f      	b.n	8002d26 <os_list_search+0x54>
	if(head == NULL) return NULL;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <os_list_search+0x1e>
 8002cec:	2300      	movs	r3, #0
 8002cee:	e01a      	b.n	8002d26 <os_list_search+0x54>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	b672      	cpsid	i
 8002cf8:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8002d02:	e002      	b.n	8002d0a <os_list_search+0x38>
		it = it->next;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <os_list_search+0x48>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d1f4      	bne.n	8002d04 <os_list_search+0x32>
	}

	OS_EXIT_CRITICAL();
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
 8002d20:	f3bf 8f6f 	isb	sy
	return it;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <os_list_add>:
 * @param void* el	   		    : [in] reference to the element
 * @param os_list_add_pos_e pos : [in] flag to indicate whether to add at the first or last position
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8002d40:	f3ef 8310 	mrs	r3, PRIMASK
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	b672      	cpsid	i
 8002d48:	f3bf 8f6f 	isb	sy

	/* Allocate cell
	 ------------------------------------------------------*/
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 8002d4c:	2010      	movs	r0, #16
 8002d4e:	f7ff fd95 	bl	800287c <os_heap_alloc>
 8002d52:	6178      	str	r0, [r7, #20]

	/* Check allocation
	 ------------------------------------------------------*/
	if(new == NULL) {
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <os_list_add+0x36>

		/* EXIT Critical Section
		 ------------------------------------------------------*/
		OS_EXIT_CRITICAL();
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
 8002d60:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e04e      	b.n	8002e06 <os_list_add+0xd4>
	}

	/* Store information on new cell
	 ------------------------------------------------------*/
	new->order  = head->listSize++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	6191      	str	r1, [r2, #24]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	60d3      	str	r3, [r2, #12]
	new->element = el;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]

	/* Add first element
	 ------------------------------------------------------*/
	if(head->head.next == NULL) {
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10f      	bne.n	8002da4 <os_list_add+0x72>
		head->last = new;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	615a      	str	r2, [r3, #20]
		new->prev = &head->head;
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	605a      	str	r2, [r3, #4]
		new->next = NULL;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
		head->head.next = new;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	601a      	str	r2, [r3, #0]
		head->first = new;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	e02a      	b.n	8002dfa <os_list_add+0xc8>
	}
	else{

		/* Add cell at the beginning
		 ------------------------------------------------------*/
		if(pos == OS_LIST_FIRST){
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d114      	bne.n	8002dd4 <os_list_add+0xa2>
			new->prev = head->first->prev;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	605a      	str	r2, [r3, #4]
			new->next = head->first;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]
			head->first->prev->next = new;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	601a      	str	r2, [r3, #0]
			head->first->prev = new;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	605a      	str	r2, [r3, #4]
			head->first = new;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	611a      	str	r2, [r3, #16]
		}

		/* Add cell at the end
		 ------------------------------------------------------*/
		if(pos == OS_LIST_LAST){
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10f      	bne.n	8002dfa <os_list_add+0xc8>
			new->next  = head->last->next;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	601a      	str	r2, [r3, #0]
			new->prev  = head->last;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	605a      	str	r2, [r3, #4]
			head->last->next = new;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	601a      	str	r2, [r3, #0]
			head->last = new;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	615a      	str	r2, [r3, #20]
		}
	}
	OS_EXIT_CRITICAL();
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f383 8810 	msr	PRIMASK, r3
 8002e00:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <os_list_remove>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	   		   : [in]  reference to the element
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_remove(os_list_head_t* head, void* el){
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b088      	sub	sp, #32
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) el;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	617b      	str	r3, [r7, #20]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <os_list_remove+0x18>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e042      	b.n	8002eac <os_list_remove+0x9e>

	/* Search cell to verify it is in the list
	 ------------------------------------------------------*/
	os_list_cell_t* pCell = os_list_search(head, el);
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff52 	bl	8002cd2 <os_list_search>
 8002e2e:	6138      	str	r0, [r7, #16]

	/* Return if not
	 ------------------------------------------------------*/
	if(pCell == NULL) return OS_ERR_INVALID;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <os_list_remove+0x2c>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e038      	b.n	8002eac <os_list_remove+0x9e>

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	b672      	cpsid	i
 8002e42:	f3bf 8f6f 	isb	sy

	/* Declare Iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = &head->head;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* pPrev = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]

	/* Search for the task
	 ------------------------------------------------------*/
	while(it->next != NULL){
 8002e4e:	e016      	b.n	8002e7e <os_list_remove+0x70>

		/* Update order
		 ------------------------------------------------------*/
		if(it->next->order > pCell->order) it->next->order--;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d904      	bls.n	8002e68 <os_list_remove+0x5a>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	3a01      	subs	r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

		/* Store previous
		 ------------------------------------------------------*/
		if(it->next->element == el) pPrev = it;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d101      	bne.n	8002e78 <os_list_remove+0x6a>
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]

		/* Go to next
		 ------------------------------------------------------*/
		it = it->next;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61fb      	str	r3, [r7, #28]
	while(it->next != NULL){
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e4      	bne.n	8002e50 <os_list_remove+0x42>
	}

	/* Kill cell
	 ------------------------------------------------------*/
	pPrev->next = pPrev->next->next;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	619a      	str	r2, [r3, #24]
	OS_EXIT_CRITICAL();
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
 8002ea0:	f3bf 8f6f 	isb	sy
	return os_heap_free(pCell);
 8002ea4:	6938      	ldr	r0, [r7, #16]
 8002ea6:	f7ff fd4f 	bl	8002948 <os_heap_free>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <os_list_clear>:
 * @brief This function clears a list, freeing all its cells and head
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_list_clear(os_list_head_t* head){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01c      	beq.n	8002efc <os_list_clear+0x48>

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8002ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	b672      	cpsid	i
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e007      	b.n	8002ee4 <os_list_clear+0x30>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f7ff fd32 	bl	8002948 <os_heap_free>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f4      	bne.n	8002ed4 <os_list_clear+0x20>
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fd2c 	bl	8002948 <os_heap_free>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f383 8810 	msr	PRIMASK, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	e000      	b.n	8002efe <os_list_clear+0x4a>
	if(head == NULL) return;
 8002efc:	bf00      	nop

		/* Free head
		 ---------------------------------------------------*/
		os_heap_free(head);
	);
}
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <os_task_list_sort>:
 * Must be used on task lists
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_task_list_sort(os_list_head_t* head){
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b08b      	sub	sp, #44	; 0x2c
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8098 	beq.w	8003044 <os_task_list_sort+0x140>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002f14:	f3ef 8310 	mrs	r3, PRIMASK
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	b672      	cpsid	i
 8002f1c:	f3bf 8f6f 	isb	sy

	/* Update priority for all tasks
	 ---------------------------------------------------*/
	os_list_cell_t* p = head->head.next;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8002f26:	e00c      	b.n	8002f42 <os_task_list_sort+0x3e>
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	689c      	ldr	r4, [r3, #8]
 8002f30:	4610      	mov	r0, r2
 8002f32:	f001 fa07 	bl	8004344 <os_task_getPrio>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		p = p->next;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ef      	bne.n	8002f28 <os_task_list_sort+0x24>
	}

	/* Begin sort
	 ---------------------------------------------------*/
	os_list_cell_t* it_slow = &head->head;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 8002f4c:	e069      	b.n	8003022 <os_task_list_sort+0x11e>

		/* For each cell
		 ---------------------------------------------------*/
		bool changeMade = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	77fb      	strb	r3, [r7, #31]
		os_list_cell_t* it_fast = &head->head;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8002f56:	e052      	b.n	8002ffe <os_task_list_sort+0xfa>

			/* Decide to swap or not
			 ---------------------------------------------------*/
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f993 204c 	ldrsb.w	r2, [r3, #76]	; 0x4c
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	75fb      	strb	r3, [r7, #23]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	68d1      	ldr	r1, [r2, #12]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	68d2      	ldr	r2, [r2, #12]
 8002f88:	4291      	cmp	r1, r2
 8002f8a:	bf8c      	ite	hi
 8002f8c:	2201      	movhi	r2, #1
 8002f8e:	2200      	movls	r2, #0
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]
				 swap |= ((os_task_t*)it_fast->next->element)->priority < ((os_task_t*)it_fast->next->next->element)->priority;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	f992 104c 	ldrsb.w	r1, [r2, #76]	; 0x4c
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	f992 204c 	ldrsb.w	r2, [r2, #76]	; 0x4c
 8002fb6:	4291      	cmp	r1, r2
 8002fb8:	bfb4      	ite	lt
 8002fba:	2201      	movlt	r2, #1
 8002fbc:	2200      	movge	r2, #0
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]

			/* Swap cells
			 ---------------------------------------------------*/
			if(swap){
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d012      	beq.n	8002ff8 <os_task_list_sort+0xf4>

				/* Store references
				 ---------------------------------------------------*/
				os_list_cell_t* pN1 = it_fast->next;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
				os_list_cell_t* pN2 = it_fast->next->next;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

				/* Swap
				 ---------------------------------------------------*/
				it_fast->next = pN2;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]
				pN1->next = pN2->next;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	601a      	str	r2, [r3, #0]
				pN2->next = pN1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	601a      	str	r2, [r3, #0]

				changeMade = 1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]

			}

			it_fast = it_fast->next;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <os_task_list_sort+0x10c>
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1a3      	bne.n	8002f58 <os_task_list_sort+0x54>

		}

		/* If no changement was made, we finished
		 ---------------------------------------------------*/
		if(changeMade == 0) break;
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10c      	bne.n	8003036 <os_task_list_sort+0x132>

		it_slow = it_slow->next;
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <os_task_list_sort+0x134>
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d18c      	bne.n	8002f4e <os_task_list_sort+0x4a>
 8003034:	e000      	b.n	8003038 <os_task_list_sort+0x134>
		if(changeMade == 0) break;
 8003036:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f383 8810 	msr	PRIMASK, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	e000      	b.n	8003046 <os_task_list_sort+0x142>
	if(head == NULL) return;
 8003044:	bf00      	nop
}
 8003046:	372c      	adds	r7, #44	; 0x2c
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}

0800304c <os_handle_list_getObjToUpdate>:
 *
 * @brief This function searches for an object in the object list that needs to update. Must be used in a handle list
 *
 * @return os_handle_t handle to the object to update or NULL if nothing to do
 **********************************************************************/
os_handle_t os_handle_list_getObjToUpdate(){
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0

	/* Search object list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <os_handle_list_getObjToUpdate+0x38>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	e00a      	b.n	8003070 <os_handle_list_getObjToUpdate+0x24>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	7a1b      	ldrb	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <os_handle_list_getObjToUpdate+0x1e>
			return it->element;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	e006      	b.n	8003078 <os_handle_list_getObjToUpdate+0x2c>
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f1      	bne.n	800305a <os_handle_list_getObjToUpdate+0xe>
	}

	return NULL;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	20014dd8 	.word	0x20014dd8

08003088 <os_task_list_isObjFreeOnTask>:
 * @param os_handle_t obj  : [in] object to scan
 * @param os_handle_t task : [in] task to stop the scan
 *
 * @return bool : 1 = object is free ; 0 = object is not free
 **********************************************************************/
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003092:	f3ef 8310 	mrs	r3, PRIMASK
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	b672      	cpsid	i
 800309a:	f3bf 8f6f 	isb	sy

	/* Get current free count
	 ---------------------------------------------------*/
	uint32_t freeCount = obj->getFreeCount(obj);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
 80030a6:	6278      	str	r0, [r7, #36]	; 0x24

	/* If it is 0, return 0 immediately
	 ---------------------------------------------------*/
	if(freeCount == 0) {
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <os_task_list_isObjFreeOnTask+0x34>
		OS_EXIT_CRITICAL();
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f383 8810 	msr	PRIMASK, r3
 80030b4:	f3bf 8f6f 	isb	sy
		return 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e0a8      	b.n	800320e <os_task_list_isObjFreeOnTask+0x186>
	}

	/* If it can be taken more times than the number of tasks waiting for it return 1
	 ---------------------------------------------------*/
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d203      	bcs.n	80030d0 <os_task_list_isObjFreeOnTask+0x48>
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d106      	bne.n	80030de <os_task_list_isObjFreeOnTask+0x56>
		OS_EXIT_CRITICAL();
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f383 8810 	msr	PRIMASK, r3
 80030d6:	f3bf 8f6f 	isb	sy
		return 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	e097      	b.n	800320e <os_task_list_isObjFreeOnTask+0x186>
	}

	/* Otherwise, sort and start scan
	 ---------------------------------------------------*/
	os_task_list_sort(obj->blockList);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff0e 	bl	8002f04 <os_task_list_sort>

	/* Start scan by pointing to the first waiting task
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	e07c      	b.n	80031ec <os_task_list_isObjFreeOnTask+0x164>

		/* Convert address
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*) it->element;
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	613b      	str	r3, [r7, #16]

		/* Return if the object has no more free counters
		 ---------------------------------------------------*/
		if(freeCount == 0) {
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <os_task_list_isObjFreeOnTask+0x84>
			OS_EXIT_CRITICAL();
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f383 8810 	msr	PRIMASK, r3
 8003104:	f3bf 8f6f 	isb	sy
			return 0;
 8003108:	2300      	movs	r3, #0
 800310a:	e080      	b.n	800320e <os_task_list_isObjFreeOnTask+0x186>
		}

		/* Stop scanning if we are pointing at the task we are searching
		 ---------------------------------------------------*/
		if(it->element == task) break;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d06f      	beq.n	80031f6 <os_task_list_isObjFreeOnTask+0x16e>

		/* Do not consider deleting or ended tasks
		 ---------------------------------------------------*/
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	7e1b      	ldrb	r3, [r3, #24]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d062      	beq.n	80031e4 <os_task_list_isObjFreeOnTask+0x15c>
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	7e1b      	ldrb	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d05e      	beq.n	80031e4 <os_task_list_isObjFreeOnTask+0x15c>

		/* If the task is waiting one object
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d121      	bne.n	8003174 <os_task_list_isObjFreeOnTask+0xec>

			/* Search for the position on the array of the object
			 ---------------------------------------------------*/
			size_t i = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < t->sizeObjs; i++){
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	e00b      	b.n	8003152 <os_task_list_isObjFreeOnTask+0xca>
				if(t->objWaited[i] == obj) break;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d008      	beq.n	800315e <os_task_list_isObjFreeOnTask+0xd6>
			for(i = 0; i < t->sizeObjs; i++){
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3301      	adds	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	429a      	cmp	r2, r3
 800315a:	d3ee      	bcc.n	800313a <os_task_list_isObjFreeOnTask+0xb2>
 800315c:	e000      	b.n	8003160 <os_task_list_isObjFreeOnTask+0xd8>
				if(t->objWaited[i] == obj) break;
 800315e:	bf00      	nop
			}

			/* If the position of the object is smaller than the current object the task wants, it will switch
			 ---------------------------------------------------*/
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	429a      	cmp	r2, r3
 8003168:	d202      	bcs.n	8003170 <os_task_list_isObjFreeOnTask+0xe8>
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	3b01      	subs	r3, #1
 800316e:	e000      	b.n	8003172 <os_task_list_isObjFreeOnTask+0xea>
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If the task is waiting all objects
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317a:	2b01      	cmp	r3, #1
 800317c:	d133      	bne.n	80031e6 <os_task_list_isObjFreeOnTask+0x15e>

			/* Scan all objects to know if all of them are available
			 ---------------------------------------------------*/
			bool getObjs = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	76fb      	strb	r3, [r7, #27]
			for(size_t i = 0; i < t->sizeObjs; i++){
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e01f      	b.n	80031c8 <os_task_list_isObjFreeOnTask+0x140>

				/* Skip current object
				 ---------------------------------------------------*/
				if(t->objWaited[i] == obj) continue;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d012      	beq.n	80031c0 <os_task_list_isObjFreeOnTask+0x138>

				/* If one of the objects is not free on the task, we must wait
				 ---------------------------------------------------*/
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6939      	ldr	r1, [r7, #16]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff6d 	bl	8003088 <os_task_list_isObjFreeOnTask>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <os_task_list_isObjFreeOnTask+0x13a>
					getObjs = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	76fb      	strb	r3, [r7, #27]
					break;
 80031be:	e008      	b.n	80031d2 <os_task_list_isObjFreeOnTask+0x14a>
				if(t->objWaited[i] == obj) continue;
 80031c0:	bf00      	nop
			for(size_t i = 0; i < t->sizeObjs; i++){
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3301      	adds	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d3da      	bcc.n	8003188 <os_task_list_isObjFreeOnTask+0x100>
				}
			}

			/* Decrement freeCount if all objects are free
			 ---------------------------------------------------*/
			freeCount = getObjs ? freeCount - 1 : freeCount;
 80031d2:	7efb      	ldrb	r3, [r7, #27]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <os_task_list_isObjFreeOnTask+0x156>
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	3b01      	subs	r3, #1
 80031dc:	e000      	b.n	80031e0 <os_task_list_isObjFreeOnTask+0x158>
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e000      	b.n	80031e6 <os_task_list_isObjFreeOnTask+0x15e>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80031e4:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f47f af7f 	bne.w	80030f2 <os_task_list_isObjFreeOnTask+0x6a>
 80031f4:	e000      	b.n	80031f8 <os_task_list_isObjFreeOnTask+0x170>
		if(it->element == task) break;
 80031f6:	bf00      	nop
		}
	}

	/* Return if the object is free or not
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f383 8810 	msr	PRIMASK, r3
 80031fe:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
}
 800320e:	4618      	mov	r0, r3
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <os_handle_list_updateAndCheck>:
 *
 * @param os_handle_t h : [in] handle to the object to update
 *
 * @return bool : 1 = current task must yield
 **********************************************************************/
bool os_handle_list_updateAndCheck(os_handle_t h){
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003220:	f3ef 8310 	mrs	r3, PRIMASK
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	b672      	cpsid	i
 8003228:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 800322c:	23ff      	movs	r3, #255	; 0xff
 800322e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(h != NULL){
 8003232:	e167      	b.n	8003504 <os_handle_list_updateAndCheck+0x2ec>

		/* Sort List
		 ---------------------------------------------------*/
		os_task_list_sort(h->blockList);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fe63 	bl	8002f04 <os_task_list_sort>

		/* Get the number of times we can get the object
		 ---------------------------------------------------*/
		uint32_t freeCount = h->getFreeCount(h);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	6338      	str	r0, [r7, #48]	; 0x30

		/* Updates every task on the block list
		 ---------------------------------------------------*/
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003250:	e14e      	b.n	80034f0 <os_handle_list_updateAndCheck+0x2d8>

			/* Ignore deleting and ended tasks
			 ---------------------------------------------------*/
			os_task_t* t = (os_task_t*)it->element;
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	7e1b      	ldrb	r3, [r3, #24]
 800325c:	2b04      	cmp	r3, #4
 800325e:	f000 8143 	beq.w	80034e8 <os_handle_list_updateAndCheck+0x2d0>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	7e1b      	ldrb	r3, [r3, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	f000 813e 	beq.w	80034e8 <os_handle_list_updateAndCheck+0x2d0>

			/* If the task is only waiting one object
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8091 	bne.w	800339a <os_handle_list_updateAndCheck+0x182>

				/* Search the position of the object in the task array
				 ---------------------------------------------------*/
				size_t i = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
				for(i = 0; i < t->sizeObjs; i++){
 800327c:	2300      	movs	r3, #0
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003280:	e00b      	b.n	800329a <os_handle_list_updateAndCheck+0x82>
					if(t->objWaited[i] == h) break;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d008      	beq.n	80032a6 <os_handle_list_updateAndCheck+0x8e>
				for(i = 0; i < t->sizeObjs; i++){
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	3301      	adds	r3, #1
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3ee      	bcc.n	8003282 <os_handle_list_updateAndCheck+0x6a>
 80032a4:	e000      	b.n	80032a8 <os_handle_list_updateAndCheck+0x90>
					if(t->objWaited[i] == h) break;
 80032a6:	bf00      	nop
				}

				/* If the object can still be taken
				 ---------------------------------------------------*/
				if(freeCount != 0){
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d026      	beq.n	80032fc <os_handle_list_updateAndCheck+0xe4>

					/* Only do something if the current object has a smaller index than the one the task is waiting for
					 ---------------------------------------------------*/
					if(i < t->objWanted){
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d270      	bcs.n	800339a <os_handle_list_updateAndCheck+0x182>

						/* Since the task will switch to the smaller index object, we must update the old object
						 * This update can possibly wake a task
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d208      	bcs.n	80032d6 <os_handle_list_updateAndCheck+0xbe>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	721a      	strb	r2, [r3, #8]

						/* Store the object's index and tag task as ready
						 ---------------------------------------------------*/
						t->objWanted = i;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032da:	63da      	str	r2, [r3, #60]	; 0x3c
						t->state = OS_TASK_READY;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2202      	movs	r2, #2
 80032e0:	761a      	strb	r2, [r3, #24]

						/* Decrement freecount if needed
						 ---------------------------------------------------*/
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d005      	beq.n	80032f6 <os_handle_list_updateAndCheck+0xde>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <os_handle_list_updateAndCheck+0xde>
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	3b01      	subs	r3, #1
 80032f4:	e000      	b.n	80032f8 <os_handle_list_updateAndCheck+0xe0>
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
 80032fa:	e04e      	b.n	800339a <os_handle_list_updateAndCheck+0x182>
				 ---------------------------------------------------*/
				else{

					/* Only do something if the current waited object is no longer available
					 ---------------------------------------------------*/
					if(t->objWanted == i){
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003302:	429a      	cmp	r2, r3
 8003304:	d149      	bne.n	800339a <os_handle_list_updateAndCheck+0x182>

						/* Search for an available object in higher indexes
						 ---------------------------------------------------*/
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	3301      	adds	r3, #1
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
 800330e:	e00f      	b.n	8003330 <os_handle_list_updateAndCheck+0x118>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6979      	ldr	r1, [r7, #20]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff feb2 	bl	8003088 <os_task_list_isObjFreeOnTask>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <os_handle_list_updateAndCheck+0x124>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	3301      	adds	r3, #1
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003336:	429a      	cmp	r2, r3
 8003338:	d3ea      	bcc.n	8003310 <os_handle_list_updateAndCheck+0xf8>
 800333a:	e000      	b.n	800333e <os_handle_list_updateAndCheck+0x126>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 800333c:	bf00      	nop


						/* Tag task as ready if there is an available object, or blocked if not timeout
						 ---------------------------------------------------*/
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003344:	429a      	cmp	r2, r3
 8003346:	d201      	bcs.n	800334c <os_handle_list_updateAndCheck+0x134>
 8003348:	2202      	movs	r2, #2
 800334a:	e000      	b.n	800334e <os_handle_list_updateAndCheck+0x136>
 800334c:	2203      	movs	r2, #3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	761a      	strb	r2, [r3, #24]
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <os_handle_list_updateAndCheck+0x148>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	7e1a      	ldrb	r2, [r3, #24]
 800335e:	e000      	b.n	8003362 <os_handle_list_updateAndCheck+0x14a>
 8003360:	2202      	movs	r2, #2
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	761a      	strb	r2, [r3, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336c:	429a      	cmp	r2, r3
 800336e:	d201      	bcs.n	8003374 <os_handle_list_updateAndCheck+0x15c>
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	e001      	b.n	8003378 <os_handle_list_updateAndCheck+0x160>
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	63d3      	str	r3, [r2, #60]	; 0x3c

						/* If the task switched to a higher index object, update it
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <os_handle_list_updateAndCheck+0x182>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	721a      	strb	r2, [r3, #8]
				}
			}

			/* If the task is waiting all objects
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 808d 	bne.w	80034c0 <os_handle_list_updateAndCheck+0x2a8>

				/* Store objWanted to use it later
				 ---------------------------------------------------*/
				size_t last_objWanted = t->objWanted;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	613b      	str	r3, [r7, #16]

				/* If the current object is available
				 ---------------------------------------------------*/
				if(freeCount != 0){
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d056      	beq.n	8003460 <os_handle_list_updateAndCheck+0x248>

					/* Check if all other objects are available
					 ---------------------------------------------------*/
					bool getObjs = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(size_t i = 0; i < t->sizeObjs; i++){
 80033b8:	2300      	movs	r3, #0
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	e020      	b.n	8003400 <os_handle_list_updateAndCheck+0x1e8>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d013      	beq.n	80033f8 <os_handle_list_updateAndCheck+0x1e0>

						/* If one of the objects is not free on the task, we must wait
						 ---------------------------------------------------*/
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6979      	ldr	r1, [r7, #20]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fe52 	bl	8003088 <os_task_list_isObjFreeOnTask>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f083 0301 	eor.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <os_handle_list_updateAndCheck+0x1e2>
							getObjs = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 80033f6:	e008      	b.n	800340a <os_handle_list_updateAndCheck+0x1f2>
						if(t->objWaited[i] == h) continue;
 80033f8:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	3301      	adds	r3, #1
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	429a      	cmp	r2, r3
 8003408:	d3d9      	bcc.n	80033be <os_handle_list_updateAndCheck+0x1a6>
						}
					}

					/* Update task infos according to the result
					 ---------------------------------------------------*/
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 800340a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <os_handle_list_updateAndCheck+0x1fe>
 8003412:	2200      	movs	r2, #0
 8003414:	e001      	b.n	800341a <os_handle_list_updateAndCheck+0x202>
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	63da      	str	r2, [r3, #60]	; 0x3c
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800341e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <os_handle_list_updateAndCheck+0x212>
 8003426:	2202      	movs	r2, #2
 8003428:	e000      	b.n	800342c <os_handle_list_updateAndCheck+0x214>
 800342a:	2203      	movs	r2, #3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	761a      	strb	r2, [r3, #24]
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <os_handle_list_updateAndCheck+0x226>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	7e1a      	ldrb	r2, [r3, #24]
 800343c:	e000      	b.n	8003440 <os_handle_list_updateAndCheck+0x228>
 800343e:	2202      	movs	r2, #2
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	761a      	strb	r2, [r3, #24]

					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 8003444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <os_handle_list_updateAndCheck+0x242>
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d002      	beq.n	800345a <os_handle_list_updateAndCheck+0x242>
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	3b01      	subs	r3, #1
 8003458:	e000      	b.n	800345c <os_handle_list_updateAndCheck+0x244>
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	633b      	str	r3, [r7, #48]	; 0x30
 800345e:	e00c      	b.n	800347a <os_handle_list_updateAndCheck+0x262>
				 ---------------------------------------------------*/
				else{

					/* Just update task infos
					 ---------------------------------------------------*/
					t->objWanted = 0xFFFFFFFF;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f04f 32ff 	mov.w	r2, #4294967295
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <os_handle_list_updateAndCheck+0x25c>
 8003470:	2202      	movs	r2, #2
 8003472:	e000      	b.n	8003476 <os_handle_list_updateAndCheck+0x25e>
 8003474:	2203      	movs	r2, #3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	761a      	strb	r2, [r3, #24]
				}

				/* Detects that the objWanted changed
				 ---------------------------------------------------*/
				if(last_objWanted != t->objWanted){
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	429a      	cmp	r2, r3
 8003482:	d01d      	beq.n	80034c0 <os_handle_list_updateAndCheck+0x2a8>

					/* If the task was waiting and now wants to get them all (all of them are available)
					 * or if the task wanted to get them all and now is waiting (one of them is no longer available)
					 * we must tag the other objects to update as well
					 ---------------------------------------------------*/
					for(size_t i = 0; i < t->sizeObjs; i++){
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e015      	b.n	80034b6 <os_handle_list_updateAndCheck+0x29e>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d008      	beq.n	80034ae <os_handle_list_updateAndCheck+0x296>

						/* Tag all objects to update
						 ---------------------------------------------------*/
						t->objWaited[i]->objUpdate = 1;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	721a      	strb	r2, [r3, #8]
 80034ac:	e000      	b.n	80034b0 <os_handle_list_updateAndCheck+0x298>
						if(t->objWaited[i] == h) continue;
 80034ae:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3301      	adds	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d3e4      	bcc.n	800348a <os_handle_list_updateAndCheck+0x272>
				}
			}

			/* If the task is ready, get its priority to check if we should yeild
			 ---------------------------------------------------*/
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	7e1b      	ldrb	r3, [r3, #24]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d10a      	bne.n	80034de <os_handle_list_updateAndCheck+0x2c6>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80034ce:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80034d2:	429a      	cmp	r2, r3
 80034d4:	da03      	bge.n	80034de <os_handle_list_updateAndCheck+0x2c6>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80034dc:	e001      	b.n	80034e2 <os_handle_list_updateAndCheck+0x2ca>
 80034de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80034e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034e6:	e000      	b.n	80034ea <os_handle_list_updateAndCheck+0x2d2>
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80034e8:	bf00      	nop
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f47f aead 	bne.w	8003252 <os_handle_list_updateAndCheck+0x3a>
		}

		/* End of while. All tasks have been updated, so we remove the update flag
		 ---------------------------------------------------*/
		h->objUpdate = 0;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	721a      	strb	r2, [r3, #8]
		 * This logic is important for 2 reasons
		 *
		 * 1 - avoids extra recursive calls
		 * 2 - makes sure that an object is updated ultil the end before switching to another one
		 ---------------------------------------------------*/
		h = os_handle_list_getObjToUpdate();
 80034fe:	f7ff fda5 	bl	800304c <os_handle_list_getObjToUpdate>
 8003502:	6078      	str	r0, [r7, #4]
	while(h != NULL){
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f47f ae94 	bne.w	8003234 <os_handle_list_updateAndCheck+0x1c>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 800350c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003510:	2b00      	cmp	r3, #0
 8003512:	dd0d      	ble.n	8003530 <os_handle_list_updateAndCheck+0x318>
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <os_handle_list_updateAndCheck+0x338>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 ff12 	bl	8004344 <os_task_getPrio>
 8003520:	4603      	mov	r3, r0
 8003522:	461a      	mov	r2, r3
 8003524:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003528:	4293      	cmp	r3, r2
 800352a:	dd01      	ble.n	8003530 <os_handle_list_updateAndCheck+0x318>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <os_handle_list_updateAndCheck+0x31a>
 8003530:	2300      	movs	r3, #0
 8003532:	76fb      	strb	r3, [r7, #27]
 8003534:	7efb      	ldrb	r3, [r7, #27]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	76fb      	strb	r3, [r7, #27]

	OS_EXIT_CRITICAL();
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f383 8810 	msr	PRIMASK, r3
 8003542:	f3bf 8f6f 	isb	sy
	return mustYield;
 8003546:	7efb      	ldrb	r3, [r7, #27]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3738      	adds	r7, #56	; 0x38
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	200145ac 	.word	0x200145ac

08003554 <os_msgQ_updateAndCheck>:
 * @param os_hMsgQ_t msgQ : [in] msgQ to update
 *
 * @return bool : (1) current task should yeild
 *
 **********************************************************************/
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(msgQ == NULL) return 0;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <os_msgQ_updateAndCheck+0x12>
 8003562:	2300      	movs	r3, #0
 8003564:	e081      	b.n	800366a <os_msgQ_updateAndCheck+0x116>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b05      	cmp	r3, #5
 800356c:	d001      	beq.n	8003572 <os_msgQ_updateAndCheck+0x1e>
 800356e:	2300      	movs	r3, #0
 8003570:	e07b      	b.n	800366a <os_msgQ_updateAndCheck+0x116>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	b672      	cpsid	i
 800357a:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 800357e:	23ff      	movs	r3, #255	; 0xff
 8003580:	77fb      	strb	r3, [r7, #31]

	/* Sort List
	 ---------------------------------------------------*/
	os_task_list_sort(msgQ->obj.blockList);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fcbc 	bl	8002f04 <os_task_list_sort>

	/* Get the number of times we can get the object
	 ---------------------------------------------------*/
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	61bb      	str	r3, [r7, #24]

	/* Updates every task on the block list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e044      	b.n	8003628 <os_msgQ_updateAndCheck+0xd4>

		/* Ignore deleting and ended tasks
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*)it->element;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60fb      	str	r3, [r7, #12]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	7e1b      	ldrb	r3, [r3, #24]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d039      	beq.n	8003620 <os_msgQ_updateAndCheck+0xcc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	7e1b      	ldrb	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d035      	beq.n	8003620 <os_msgQ_updateAndCheck+0xcc>

		/* If the object can still be taken
		 ---------------------------------------------------*/
		if(freeCount != 0){
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <os_msgQ_updateAndCheck+0x8c>

			/* Tag task as ready
			 ---------------------------------------------------*/
			t->objWanted = 0;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
			t->state = OS_TASK_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2202      	movs	r2, #2
 80035c4:	761a      	strb	r2, [r3, #24]

			/* Decrement freecount if needed
			 ---------------------------------------------------*/
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d005      	beq.n	80035da <os_msgQ_updateAndCheck+0x86>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <os_msgQ_updateAndCheck+0x86>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	e000      	b.n	80035dc <os_msgQ_updateAndCheck+0x88>
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	e00c      	b.n	80035fa <os_msgQ_updateAndCheck+0xa6>
		 ---------------------------------------------------*/
		else{

			/* Just update task infos
			 ---------------------------------------------------*/
			t->objWanted = 0xFFFFFFFF;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f04f 32ff 	mov.w	r2, #4294967295
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <os_msgQ_updateAndCheck+0xa0>
 80035f0:	2202      	movs	r2, #2
 80035f2:	e000      	b.n	80035f6 <os_msgQ_updateAndCheck+0xa2>
 80035f4:	2203      	movs	r2, #3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	761a      	strb	r2, [r3, #24]
		}

		/* If the task is ready, get its priority to check if we should yeild
		 ---------------------------------------------------*/
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	7e1b      	ldrb	r3, [r3, #24]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d10a      	bne.n	8003618 <os_msgQ_updateAndCheck+0xc4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003608:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800360c:	429a      	cmp	r2, r3
 800360e:	da03      	bge.n	8003618 <os_msgQ_updateAndCheck+0xc4>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003616:	e001      	b.n	800361c <os_msgQ_updateAndCheck+0xc8>
 8003618:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e000      	b.n	8003622 <os_msgQ_updateAndCheck+0xce>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8003620:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1b7      	bne.n	800359e <os_msgQ_updateAndCheck+0x4a>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 800362e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dd0d      	ble.n	8003652 <os_msgQ_updateAndCheck+0xfe>
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <os_msgQ_updateAndCheck+0x120>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fe81 	bl	8004344 <os_task_getPrio>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800364a:	4293      	cmp	r3, r2
 800364c:	dd01      	ble.n	8003652 <os_msgQ_updateAndCheck+0xfe>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <os_msgQ_updateAndCheck+0x100>
 8003652:	2300      	movs	r3, #0
 8003654:	74fb      	strb	r3, [r7, #19]
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	74fb      	strb	r3, [r7, #19]

	OS_EXIT_CRITICAL();
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f383 8810 	msr	PRIMASK, r3
 8003664:	f3bf 8f6f 	isb	sy
	return mustYield;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200145ac 	.word	0x200145ac

08003678 <os_round_robin>:
 *
 * @brief This function decides the task that will gain the cpu
 *
 * @return task_list_t : Reference to the chosen task
 **********************************************************************/
static os_list_cell_t* os_round_robin(){
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0

	/* Declare iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <os_round_robin+0xe4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* it_low = os_cur_task;
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <os_round_robin+0xe8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]

	/* Saves first higher priority available in the higher side (all tasks before the current one in list order)
	 ------------------------------------------------------*/
	int8_t highSidePrio = -1;
 800368a:	23ff      	movs	r3, #255	; 0xff
 800368c:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* highSide= NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]

	/* Saves first higher priority available in the lower side (all tasks after and including the current one in list order)
	 ------------------------------------------------------*/
	int8_t lowSidePrio = -1;
 8003692:	23ff      	movs	r3, #255	; 0xff
 8003694:	73fb      	strb	r3, [r7, #15]
	os_list_cell_t* lowSide = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]

	/* Search the high side of the list
	 ------------------------------------------------------*/
	while(it != os_cur_task){
 800369a:	e018      	b.n	80036ce <os_round_robin+0x56>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	7e1b      	ldrb	r3, [r3, #24]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d110      	bne.n	80036c8 <os_round_robin+0x50>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fe4a 	bl	8004344 <os_task_getPrio>
 80036b0:	4603      	mov	r3, r0
 80036b2:	71bb      	strb	r3, [r7, #6]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(highSidePrio <= task_prio){
 80036b4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80036b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80036bc:	429a      	cmp	r2, r3
 80036be:	dc03      	bgt.n	80036c8 <os_round_robin+0x50>
				highSidePrio = task_prio;
 80036c0:	79bb      	ldrb	r3, [r7, #6]
 80036c2:	75fb      	strb	r3, [r7, #23]
				highSide = it;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	613b      	str	r3, [r7, #16]

		}

		/* Otherwise continue
		 ------------------------------------------------------*/
		it = it->next;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61fb      	str	r3, [r7, #28]
	while(it != os_cur_task){
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <os_round_robin+0xe8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1e1      	bne.n	800369c <os_round_robin+0x24>
	}

	/* Search the low side of the list
	 ------------------------------------------------------*/
	while(it_low != NULL){
 80036d8:	e018      	b.n	800370c <os_round_robin+0x94>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	7e1b      	ldrb	r3, [r3, #24]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d110      	bne.n	8003706 <os_round_robin+0x8e>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fe2b 	bl	8004344 <os_task_getPrio>
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(lowSidePrio <= task_prio ){
 80036f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	dc03      	bgt.n	8003706 <os_round_robin+0x8e>
				lowSidePrio = task_prio;
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	73fb      	strb	r3, [r7, #15]
				lowSide = it_low;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	60bb      	str	r3, [r7, #8]
			}

		}

		it_low = it_low->next;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	61bb      	str	r3, [r7, #24]
	while(it_low != NULL){
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e3      	bne.n	80036da <os_round_robin+0x62>
	}

	/* If nothing was found, return NULL
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide == NULL) return NULL;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <os_round_robin+0xaa>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <os_round_robin+0xaa>
 800371e:	2300      	movs	r3, #0
 8003720:	e018      	b.n	8003754 <os_round_robin+0xdc>

	/* If only the low side found something, return it
	 ------------------------------------------------------*/
	if(highSide == NULL && lowSide != NULL) return lowSide;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <os_round_robin+0xba>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <os_round_robin+0xba>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	e010      	b.n	8003754 <os_round_robin+0xdc>

	/* If only the high side found something, return it
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide != NULL) return highSide;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <os_round_robin+0xca>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <os_round_robin+0xca>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	e008      	b.n	8003754 <os_round_robin+0xdc>

	/* If both found something, return the task with higher priority.
	 * If both are equal, chose the lower side to peform the round robin for the same priority task
	 ------------------------------------------------------*/
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 8003742:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800374a:	429a      	cmp	r2, r3
 800374c:	dd01      	ble.n	8003752 <os_round_robin+0xda>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	e000      	b.n	8003754 <os_round_robin+0xdc>
 8003752:	693b      	ldr	r3, [r7, #16]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200155f8 	.word	0x200155f8
 8003760:	200145ac 	.word	0x200145ac

08003764 <os_scheduler>:
 * OS Scheduler
 *
 * @brief This function performs the stack management of the context change (must be called in PENDSV interrupt)
 *
 **********************************************************************/
__used static void os_scheduler(){
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <os_scheduler+0x8c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d139      	bne.n	80037e6 <os_scheduler+0x82>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__os_disable_irq();
 8003772:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	603b      	str	r3, [r7, #0]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8003778:	f3ef 8309 	mrs	r3, PSP
 800377c:	603b      	str	r3, [r7, #0]

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <os_scheduler+0x90>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <os_scheduler+0x2c>
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <os_scheduler+0x90>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	621a      	str	r2, [r3, #32]

	/* Save last task
	 ------------------------------------------------------*/
	os_list_cell_t* last_task = os_cur_task;
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <os_scheduler+0x90>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	607b      	str	r3, [r7, #4]
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 8003796:	f7ff ff6f 	bl	8003678 <os_round_robin>
 800379a:	4602      	mov	r2, r0
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <os_scheduler+0x90>)
 800379e:	601a      	str	r2, [r3, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <os_scheduler+0x90>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <os_scheduler+0x4c>
			__os_enable_irq();
 80037a8:	b662      	cpsie	i
			os_no_task_ready_cb();
 80037aa:	f7fe ffbe 	bl	800272a <os_no_task_ready_cb>
			__os_disable_irq();
 80037ae:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <os_scheduler+0x90>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ee      	beq.n	8003796 <os_scheduler+0x32>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <os_scheduler+0x90>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	603b      	str	r3, [r7, #0]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <os_scheduler+0x7e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	7e1b      	ldrb	r3, [r3, #24]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <os_scheduler+0x7e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fcdb 	bl	8004198 <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__os_enable_irq();
 80037e2:	b662      	cpsie	i
 80037e4:	e000      	b.n	80037e8 <os_scheduler+0x84>
	if(state != OS_SCHEDULER_START) return;
 80037e6:	bf00      	nop

}
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200145a8 	.word	0x200145a8
 80037f4:	200145ac 	.word	0x200145ac

080037f8 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 80037f8:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 80037fc:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8003800:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 8003802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 8003806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 800380a:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 800380e:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 8003810:	f7ff ffa8 	bl	8003764 <os_scheduler>
	__asm volatile ("pop {lr}");
 8003814:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8003818:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 800381c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8003820:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8003824:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 8003826:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 800382a:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 800382e:	4770      	bx	lr

}
 8003830:	bf00      	nop
	...

08003834 <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 800383a:	f7fe fefd 	bl	8002638 <os_init_get>
 800383e:	4603      	mov	r3, r0
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <os_scheduler_start+0x1a>
 800384a:	2304      	movs	r3, #4
 800384c:	e01b      	b.n	8003886 <os_scheduler_start+0x52>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	b672      	cpsid	i
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <os_scheduler_start+0x5c>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	f000 f936 	bl	8003ad0 <os_task_must_yeild>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <os_scheduler_start+0x46>
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <os_scheduler_start+0x60>)
 800386c:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <os_scheduler_start+0x60>)
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003876:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f383 8810 	msr	PRIMASK, r3
 8003880:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200145a8 	.word	0x200145a8
 8003894:	e000e008 	.word	0xe000e008

08003898 <os_scheduler_state_get>:
 * @brief Returns the state of the scheduler
 *
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
	return state;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <os_scheduler_state_get+0x14>)
 800389e:	781b      	ldrb	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200145a8 	.word	0x200145a8

080038b0 <os_task_init_stack>:
 * @param uint32_t interruptStackSize : [in] size of the interrupt stack
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_init_stack(uint32_t interruptStackSize){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ------------------------------------------------------*/
	if(interruptStackSize < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80038be:	d201      	bcs.n	80038c4 <os_task_init_stack+0x14>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e021      	b.n	8003908 <os_task_init_stack+0x58>

	/* Allocate the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe ffd9 	bl	800287c <os_heap_alloc>
 80038ca:	4603      	mov	r3, r0
 80038cc:	60fb      	str	r3, [r7, #12]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <os_task_init_stack+0x28>
 80038d4:	2303      	movs	r3, #3
 80038d6:	e017      	b.n	8003908 <os_task_init_stack+0x58>

	/* Save context and make PSP = MSP
	 ------------------------------------------------------*/
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 80038d8:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 80038da:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 80038de:	f386 8809 	msr	PSP, r6

	/* Position MSP to interrput stack
	 ------------------------------------------------------*/
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	f023 0307 	bic.w	r3, r3, #7
 80038ec:	60bb      	str	r3, [r7, #8]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 80038f2:	f386 8808 	msr	MSP, r6

	/* Select PSP as current stack pointer
	 ------------------------------------------------------*/
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 80038f6:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 80038fa:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 80038fe:	f386 8814 	msr	CONTROL, r6

	/* Recover stack
	 ------------------------------------------------------*/
	__asm volatile ("pop {r6, lr}");
 8003902:	e8bd 4040 	ldmia.w	sp!, {r6, lr}

	return OS_ERR_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <os_task_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_task_getFreeCount(os_handle_t h){
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <os_task_getFreeCount+0x12>
 800391e:	2300      	movs	r3, #0
 8003920:	e031      	b.n	8003986 <os_task_getFreeCount+0x76>
	if(h->type != OS_OBJ_TASK) return 0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <os_task_getFreeCount+0x1e>
 800392a:	2300      	movs	r3, #0
 800392c:	e02b      	b.n	8003986 <os_task_getFreeCount+0x76>

	/* Check if task ended
	 ------------------------------------------------------*/
	os_task_state_e state = os_task_getState(h);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fd24 	bl	800437c <os_task_getState>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]

	/* Determines if task ended
	 ------------------------------------------------------*/
	bool task_ended  = (state == OS_TASK_NOT_EXIST);
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_ENDED);
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	2a01      	cmp	r2, #1
 800394a:	bf0c      	ite	eq
 800394c:	2201      	moveq	r2, #1
 800394e:	2200      	movne	r2, #0
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4313      	orrs	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_DELETING);
 800395e:	7bbb      	ldrb	r3, [r7, #14]
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	2a04      	cmp	r2, #4
 8003964:	bf0c      	ite	eq
 8003966:	2201      	moveq	r2, #1
 8003968:	2200      	movne	r2, #0
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4313      	orrs	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	73bb      	strb	r3, [r7, #14]

	return task_ended ? OS_OBJ_COUNT_INF : 0;
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <os_task_getFreeCount+0x74>
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	e000      	b.n	8003986 <os_task_getFreeCount+0x76>
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <os_task_objTake>:
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static void os_task_objTake(os_handle_t h, os_handle_t takingTask){
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	460b      	mov	r3, r1
 80039b2:	72fb      	strb	r3, [r7, #11]

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 80039b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da01      	bge.n	80039c0 <os_task_init+0x1c>
 80039bc:	2301      	movs	r3, #1
 80039be:	e076      	b.n	8003aae <os_task_init+0x10a>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80039c6:	d201      	bcs.n	80039cc <os_task_init+0x28>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e070      	b.n	8003aae <os_task_init+0x10a>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80039d2:	d201      	bcs.n	80039d8 <os_task_init+0x34>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e06a      	b.n	8003aae <os_task_init+0x10a>

	/* Init stack by changing the register used (MSP to PSP) and allocate interrupt stack
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init_stack(interrput_stack_size);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff69 	bl	80038b0 <os_task_init_stack>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <os_task_init+0x48>
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	e060      	b.n	8003aae <os_task_init+0x10a>

	/* Allocate task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 80039ec:	2050      	movs	r0, #80	; 0x50
 80039ee:	f7fe ff45 	bl	800287c <os_heap_alloc>
 80039f2:	6138      	str	r0, [r7, #16]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <os_task_init+0x5a>
 80039fa:	2303      	movs	r3, #3
 80039fc:	e057      	b.n	8003aae <os_task_init+0x10a>

	/* Init main task
	 ------------------------------------------------------*/
	t->obj.objUpdate		= 0;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2200      	movs	r2, #0
 8003a02:	721a      	strb	r2, [r3, #8]
	t->obj.type				= OS_OBJ_TASK;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <os_task_init+0x114>)
 8003a0e:	60da      	str	r2, [r3, #12]
	t->obj.blockList		= os_list_init();
 8003a10:	f7ff f93c 	bl	8002c8c <os_list_init>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	615a      	str	r2, [r3, #20]
	t->obj.obj_take			= &os_task_objTake;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <os_task_init+0x118>)
 8003a1e:	611a      	str	r2, [r3, #16]
	t->obj.name 			= main_name;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	605a      	str	r2, [r3, #4]

	t->basePriority 		= main_task_priority;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	7afa      	ldrb	r2, [r7, #11]
 8003a2a:	765a      	strb	r2, [r3, #25]
	t->priority		    	= main_task_priority;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	7afa      	ldrb	r2, [r7, #11]
 8003a30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	t->pid					= 0;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2200      	movs	r2, #0
 8003a38:	859a      	strh	r2, [r3, #44]	; 0x2c
	t->state	 			= OS_TASK_READY;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	761a      	strb	r2, [r3, #24]
	t->pStack   			= NULL;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2200      	movs	r2, #0
 8003a44:	621a      	str	r2, [r3, #32]
	t->wakeCoutdown  		= 0;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	61da      	str	r2, [r3, #28]
	t->stackBase	    	= 0;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	629a      	str	r2, [r3, #40]	; 0x28
	t->objWaited			= NULL;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2200      	movs	r2, #0
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34
	t->sizeObjs 			= 0;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
	t->retVal				= NULL;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2200      	movs	r2, #0
 8003a62:	649a      	str	r2, [r3, #72]	; 0x48

	t->ownedMutex			= os_list_init();
 8003a64:	f7ff f912 	bl	8002c8c <os_list_init>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44

	/* Init head list and Add main task
	 ------------------------------------------------------*/
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	6939      	ldr	r1, [r7, #16]
 8003a72:	4813      	ldr	r0, [pc, #76]	; (8003ac0 <os_task_init+0x11c>)
 8003a74:	f7ff f95d 	bl	8002d32 <os_list_add>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <os_task_init+0xe2>
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	e013      	b.n	8003aae <os_task_init+0x10a>

	/* Add object to object list
	 ------------------------------------------------------*/
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8003a86:	2200      	movs	r2, #0
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <os_task_init+0x120>)
 8003a8c:	f7ff f951 	bl	8002d32 <os_list_add>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <os_task_init+0xfa>
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	e007      	b.n	8003aae <os_task_init+0x10a>

	/* Point to current task
	 ------------------------------------------------------*/
	os_cur_task = os_head.head.next;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <os_task_init+0x11c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <os_task_init+0x124>)
 8003aa4:	6013      	str	r3, [r2, #0]

	/* Link handle with task
	 ------------------------------------------------------*/
	main_task = (os_handle_t) t;
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <os_task_init+0x128>)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	6013      	str	r3, [r2, #0]

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08003911 	.word	0x08003911
 8003abc:	0800398f 	.word	0x0800398f
 8003ac0:	200155f8 	.word	0x200155f8
 8003ac4:	20014dd8 	.word	0x20014dd8
 8003ac8:	200145ac 	.word	0x200145ac
 8003acc:	20015614 	.word	0x20015614

08003ad0 <os_task_must_yeild>:
 * @brief This function checks the priority of all tasks and decides if the current task should yield
 *
 * @return bool : 1 = yeild
 *
 **********************************************************************/
bool os_task_must_yeild(){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0

	/* Enter critical
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8003ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	b672      	cpsid	i
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <os_task_must_yeild+0x80>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <os_task_must_yeild+0x84>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <os_task_must_yeild+0x30>
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <os_task_must_yeild+0x84>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc24 	bl	8004344 <os_task_getPrio>
 8003afc:	4603      	mov	r3, r0
 8003afe:	e001      	b.n	8003b04 <os_task_must_yeild+0x34>
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	72fb      	strb	r3, [r7, #11]
 8003b06:	e016      	b.n	8003b36 <os_task_must_yeild+0x66>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fc19 	bl	8004344 <os_task_getPrio>
 8003b12:	4603      	mov	r3, r0
 8003b14:	72bb      	strb	r3, [r7, #10]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	7e1b      	ldrb	r3, [r3, #24]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d107      	bne.n	8003b30 <os_task_must_yeild+0x60>
 8003b20:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8003b24:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	da01      	bge.n	8003b30 <os_task_must_yeild+0x60>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e00b      	b.n	8003b48 <os_task_must_yeild+0x78>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <os_task_must_yeild+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
 8003b42:	f3bf 8f6f 	isb	sy
			 ------------------------------------------------------*/
			it = it->next;
		}
	);

	return false;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200155f8 	.word	0x200155f8
 8003b54:	200145ac 	.word	0x200145ac

08003b58 <os_task_create>:
 * @param void* arg				: [ in] Argument to be passed to the task
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), int8_t priority, uint32_t stack_size, void* arg){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	70fb      	strb	r3, [r7, #3]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <os_task_create+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e16d      	b.n	8003e4c <os_task_create+0x2f4>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <os_task_create+0x22>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e168      	b.n	8003e4c <os_task_create+0x2f4>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 8003b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da01      	bge.n	8003b86 <os_task_create+0x2e>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e162      	b.n	8003e4c <os_task_create+0x2f4>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003b8c:	d201      	bcs.n	8003b92 <os_task_create+0x3a>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e15c      	b.n	8003e4c <os_task_create+0x2f4>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 8003b92:	f7fe fd51 	bl	8002638 <os_init_get>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f083 0301 	eor.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <os_task_create+0x4e>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e152      	b.n	8003e4c <os_task_create+0x2f4>

	/* Alloc the task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8003ba6:	2050      	movs	r0, #80	; 0x50
 8003ba8:	f7fe fe68 	bl	800287c <os_heap_alloc>
 8003bac:	6238      	str	r0, [r7, #32]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <os_task_create+0x60>
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e149      	b.n	8003e4c <os_task_create+0x2f4>

	/* Alloc the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f7fe fe5f 	bl	800287c <os_heap_alloc>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	61fb      	str	r3, [r7, #28]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <os_task_create+0x74>
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e13f      	b.n	8003e4c <os_task_create+0x2f4>

	/* Create a unique PID
	 ------------------------------------------------------*/
	uint16_t pid = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	837b      	strh	r3, [r7, #26]
	uint32_t attempts = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
	while(1){

		/* Generate PID using the tick
		 ------------------------------------------------------*/
		uint32_t ms = os_getMsTick() + attempts;
 8003bd4:	f000 fc38 	bl	8004448 <os_getMsTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	4413      	add	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
		pid = (uint16_t)( (ms & 0xFF) ^ ((ms >> 16) & 0xFF) );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	4053      	eors	r3, r2
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	837b      	strh	r3, [r7, #26]

		/* Check if PID exists
		 ------------------------------------------------------*/
		if(os_task_getByPID(pid) == NULL){
 8003bf2:	8b7b      	ldrh	r3, [r7, #26]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fbf7 	bl	80043e8 <os_task_getByPID>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <os_task_create+0xb0>
			break;
		}

		attempts++;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3301      	adds	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
	while(1){
 8003c06:	e7e5      	b.n	8003bd4 <os_task_create+0x7c>
			break;
 8003c08:	bf00      	nop
	}

	/* Init Task
	 ------------------------------------------------------*/
	t->obj.objUpdate	= 0;
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	721a      	strb	r2, [r3, #8]
	t->obj.type			= OS_OBJ_TASK;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	4a8e      	ldr	r2, [pc, #568]	; (8003e54 <os_task_create+0x2fc>)
 8003c1a:	60da      	str	r2, [r3, #12]
	t->obj.blockList	= os_list_init();
 8003c1c:	f7ff f836 	bl	8002c8c <os_list_init>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	615a      	str	r2, [r3, #20]
	t->obj.obj_take		= &os_task_objTake;
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	4a8b      	ldr	r2, [pc, #556]	; (8003e58 <os_task_create+0x300>)
 8003c2a:	611a      	str	r2, [r3, #16]
	t->obj.name			= (char*) name;
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	605a      	str	r2, [r3, #4]

	t->fnPtr			= fn;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
	t->basePriority		= priority;
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	765a      	strb	r2, [r3, #25]
	t->priority		    = priority;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	t->pid				= pid;
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	8b7a      	ldrh	r2, [r7, #26]
 8003c4a:	859a      	strh	r2, [r3, #44]	; 0x2c
	t->state			= OS_TASK_READY;
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	761a      	strb	r2, [r3, #24]
	t->wakeCoutdown	 	= 0;
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	2200      	movs	r2, #0
 8003c56:	61da      	str	r2, [r3, #28]
	t->stackBase		= (stk + stack_size);
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	441a      	add	r2, r3
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize 		= stack_size;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f023 0307 	bic.w	r3, r3, #7
 8003c70:	461a      	mov	r2, r3
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	621a      	str	r2, [r3, #32]
	t->objWaited		= NULL;
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34
	t->sizeObjs 		= 0;
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
	t->retVal			= NULL;
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2200      	movs	r2, #0
 8003c86:	649a      	str	r2, [r3, #72]	; 0x48

	t->ownedMutex		= os_list_init();
 8003c88:	f7ff f800 	bl	8002c8c <os_list_init>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44

	/* Init Task Stack
	 ------------------------------------------------------*/
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	1f1a      	subs	r2, r3, #4
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	621a      	str	r2, [r3, #32]
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ca4:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) fn;				//Return
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	1f1a      	subs	r2, r3, #4
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	621a      	str	r2, [r3, #32]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) &os_task_return;  //LR
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	1f1a      	subs	r2, r3, #4
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	621a      	str	r2, [r3, #32]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	4a65      	ldr	r2, [pc, #404]	; (8003e5c <os_task_create+0x304>)
 8003cc8:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R12
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	1f1a      	subs	r2, r3, #4
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	621a      	str	r2, [r3, #32]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	1f1a      	subs	r2, r3, #4
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	621a      	str	r2, [r3, #32]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R2
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	1f1a      	subs	r2, r3, #4
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	621a      	str	r2, [r3, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R1
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	1f1a      	subs	r2, r3, #4
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	621a      	str	r2, [r3, #32]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) arg;			 	//R0 (argument)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	1f1a      	subs	r2, r3, #4
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	621a      	str	r2, [r3, #32]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d22:	601a      	str	r2, [r3, #0]

	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	1f1a      	subs	r2, r3, #4
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	621a      	str	r2, [r3, #32]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f06f 0202 	mvn.w	r2, #2
 8003d36:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R11
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	1f1a      	subs	r2, r3, #4
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	621a      	str	r2, [r3, #32]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R10
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	1f1a      	subs	r2, r3, #4
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0; 			 	//R9
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	1f1a      	subs	r2, r3, #4
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	621a      	str	r2, [r3, #32]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R8
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	1f1a      	subs	r2, r3, #4
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	621a      	str	r2, [r3, #32]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R7
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1f1a      	subs	r2, r3, #4
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R6
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	1f1a      	subs	r2, r3, #4
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	621a      	str	r2, [r3, #32]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R5
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	1f1a      	subs	r2, r3, #4
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	621a      	str	r2, [r3, #32]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R4
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	1f1a      	subs	r2, r3, #4
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	621a      	str	r2, [r3, #32]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

	/* Add task to list
	 ------------------------------------------------------*/
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	6a39      	ldr	r1, [r7, #32]
 8003dcc:	4824      	ldr	r0, [pc, #144]	; (8003e60 <os_task_create+0x308>)
 8003dce:	f7fe ffb0 	bl	8002d32 <os_list_add>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]
	if(err != OS_ERR_OK) return err;
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <os_task_create+0x288>
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	e035      	b.n	8003e4c <os_task_create+0x2f4>

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8003de0:	2200      	movs	r2, #0
 8003de2:	6a39      	ldr	r1, [r7, #32]
 8003de4:	481f      	ldr	r0, [pc, #124]	; (8003e64 <os_task_create+0x30c>)
 8003de6:	f7fe ffa4 	bl	8002d32 <os_list_add>
 8003dea:	4603      	mov	r3, r0
 8003dec:	74bb      	strb	r3, [r7, #18]
	if(ret != OS_ERR_OK) return ret;
 8003dee:	7cbb      	ldrb	r3, [r7, #18]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <os_task_create+0x2a0>
 8003df4:	7cbb      	ldrb	r3, [r7, #18]
 8003df6:	e029      	b.n	8003e4c <os_task_create+0x2f4>

	/* Calculate task priority
	 ------------------------------------------------------*/
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 8003df8:	6a38      	ldr	r0, [r7, #32]
 8003dfa:	f000 faa3 	bl	8004344 <os_task_getPrio>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	747b      	strb	r3, [r7, #17]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8003e02:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <os_task_create+0x310>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <os_task_create+0x2c2>
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <os_task_create+0x310>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fa97 	bl	8004344 <os_task_getPrio>
 8003e16:	4603      	mov	r3, r0
 8003e18:	e001      	b.n	8003e1e <os_task_create+0x2c6>
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	743b      	strb	r3, [r7, #16]

	/* If created task was a higher priority, and scheduler is running, yeild
	 ---------------------------------------------------*/
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8003e20:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8003e24:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	dd06      	ble.n	8003e3a <os_task_create+0x2e2>
 8003e2c:	f7ff fd34 	bl	8003898 <os_scheduler_state_get>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <os_task_create+0x2e2>
 8003e36:	f000 fa73 	bl	8004320 <os_task_yeild>

	/* link handle with task object
	 ---------------------------------------------------*/
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <os_task_create+0x2ec>
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	e000      	b.n	8003e46 <os_task_create+0x2ee>
 8003e44:	2300      	movs	r3, #0
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6013      	str	r3, [r2, #0]

	return err;
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	08003911 	.word	0x08003911
 8003e58:	0800398f 	.word	0x0800398f
 8003e5c:	08004141 	.word	0x08004141
 8003e60:	200155f8 	.word	0x200155f8
 8003e64:	20014dd8 	.word	0x20014dd8
 8003e68:	200145ac 	.word	0x200145ac

08003e6c <os_checkElfHeader>:
	uint32_t 	p_memsz;	//Size in bytes of the segment in memory. May be 0.
	uint32_t 	p_flags;	//Segment-dependent flags (position for 32-bit structure).
	uint32_t	p_align;	//0 and 1 specify no alignment. Otherwise should be a positive, integral power of 2, with p_vaddr equating p_offset modulus p_align
} __packed os_elfProgramHeader_t;

static int os_checkElfHeader(os_elfHeader_t* header, lfs_file_t* lfs_file){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

	int err = lfs_file_read(&lfs, lfs_file, header, sizeof(*header));
 8003e76:	2334      	movs	r3, #52	; 0x34
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	4821      	ldr	r0, [pc, #132]	; (8003f04 <os_checkElfHeader+0x98>)
 8003e7e:	f007 fb4b 	bl	800b518 <lfs_file_read>
 8003e82:	60f8      	str	r0, [r7, #12]
	if(err < 0){
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da08      	bge.n	8003e9c <os_checkElfHeader+0x30>
		PRINTLN("read error %d", err);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8003e90:	491d      	ldr	r1, [pc, #116]	; (8003f08 <os_checkElfHeader+0x9c>)
 8003e92:	481e      	ldr	r0, [pc, #120]	; (8003f0c <os_checkElfHeader+0xa0>)
 8003e94:	f00b fe5a 	bl	800fb4c <iprintf>
		return err;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	e02e      	b.n	8003efa <os_checkElfHeader+0x8e>
	}

	if(header->e_ident.magic[0] != 0x7F || header->e_ident.magic[1] != 'E' || header->e_ident.magic[2] != 'L' || header->e_ident.magic[3] != 'F'){
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ea2:	d10b      	bne.n	8003ebc <os_checkElfHeader+0x50>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b45      	cmp	r3, #69	; 0x45
 8003eaa:	d107      	bne.n	8003ebc <os_checkElfHeader+0x50>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	2b4c      	cmp	r3, #76	; 0x4c
 8003eb2:	d103      	bne.n	8003ebc <os_checkElfHeader+0x50>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2b46      	cmp	r3, #70	; 0x46
 8003eba:	d002      	beq.n	8003ec2 <os_checkElfHeader+0x56>
		return -1;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	e01b      	b.n	8003efa <os_checkElfHeader+0x8e>
	}

	if(header->e_ident.class != 1 || header->e_ident.data != 1 || header->e_ident.version != 1){
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <os_checkElfHeader+0x6e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	795b      	ldrb	r3, [r3, #5]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d103      	bne.n	8003eda <os_checkElfHeader+0x6e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	799b      	ldrb	r3, [r3, #6]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d002      	beq.n	8003ee0 <os_checkElfHeader+0x74>
		return -1;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e00c      	b.n	8003efa <os_checkElfHeader+0x8e>
	}

	if(header->e_machine != 40 || header->e_version != 1){
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8a5b      	ldrh	r3, [r3, #18]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b28      	cmp	r3, #40	; 0x28
 8003ee8:	d103      	bne.n	8003ef2 <os_checkElfHeader+0x86>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d002      	beq.n	8003ef8 <os_checkElfHeader+0x8c>
		return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e000      	b.n	8003efa <os_checkElfHeader+0x8e>
	}

	return 0;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20015618 	.word	0x20015618
 8003f08:	080111b4 	.word	0x080111b4
 8003f0c:	080111c0 	.word	0x080111c0

08003f10 <os_loadElfSegments>:

uint8_t benga[2048];
static int os_loadElfSegments(os_elfHeader_t* header, lfs_file_t* lfs_file){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b096      	sub	sp, #88	; 0x58
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]

	os_elfProgramHeader_t data;
	uint32_t memToAlloc = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	657b      	str	r3, [r7, #84]	; 0x54

	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003f1e:	2300      	movs	r3, #0
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
 8003f22:	e02d      	b.n	8003f80 <os_loadElfSegments+0x70>
		lfs_file_seek(&lfs, lfs_file, header->e_phoff + i * header->e_phentsize, LFS_SEEK_SET);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f32:	fb03 f301 	mul.w	r3, r3, r1
 8003f36:	4413      	add	r3, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	4854      	ldr	r0, [pc, #336]	; (8004090 <os_loadElfSegments+0x180>)
 8003f40:	f007 fb4a 	bl	800b5d8 <lfs_file_seek>

		int err = lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 8003f44:	f107 020c 	add.w	r2, r7, #12
 8003f48:	2320      	movs	r3, #32
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	4850      	ldr	r0, [pc, #320]	; (8004090 <os_loadElfSegments+0x180>)
 8003f4e:	f007 fae3 	bl	800b518 <lfs_file_read>
 8003f52:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(err < 0){
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da08      	bge.n	8003f6c <os_loadElfSegments+0x5c>
			PRINTLN("read error %d", err);
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8003f60:	494c      	ldr	r1, [pc, #304]	; (8004094 <os_loadElfSegments+0x184>)
 8003f62:	484d      	ldr	r0, [pc, #308]	; (8004098 <os_loadElfSegments+0x188>)
 8003f64:	f00b fdf2 	bl	800fb4c <iprintf>
			return err;
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	e08d      	b.n	8004088 <os_loadElfSegments+0x178>
		}

		memToAlloc += (data.p_memsz + 16) & ~0xF ;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	3310      	adds	r3, #16
 8003f70:	f023 030f 	bic.w	r3, r3, #15
 8003f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f76:	4413      	add	r3, r2
 8003f78:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d3ca      	bcc.n	8003f24 <os_loadElfSegments+0x14>
	}

	//uint8_t* codeSpace = (uint8_t*)os_heap_alloc(memToAlloc);
int pos = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	64fb      	str	r3, [r7, #76]	; 0x4c
uint32_t vAddr;
int jeba = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint32_t i = 0; i < header->e_phnum; i++){
 8003f96:	2300      	movs	r3, #0
 8003f98:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9a:	e052      	b.n	8004042 <os_loadElfSegments+0x132>
		lfs_file_seek(&lfs, lfs_file, header->e_phoff + i * header->e_phentsize, LFS_SEEK_SET);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003faa:	fb03 f301 	mul.w	r3, r3, r1
 8003fae:	4413      	add	r3, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	4836      	ldr	r0, [pc, #216]	; (8004090 <os_loadElfSegments+0x180>)
 8003fb8:	f007 fb0e 	bl	800b5d8 <lfs_file_seek>

		int err = lfs_file_read(&lfs, lfs_file, &data, sizeof(data));
 8003fbc:	f107 020c 	add.w	r2, r7, #12
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	4832      	ldr	r0, [pc, #200]	; (8004090 <os_loadElfSegments+0x180>)
 8003fc6:	f007 faa7 	bl	800b518 <lfs_file_read>
 8003fca:	6338      	str	r0, [r7, #48]	; 0x30
		if(err < 0){
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da08      	bge.n	8003fe4 <os_loadElfSegments+0xd4>
			PRINTLN("read error %d", err);
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	f240 12e9 	movw	r2, #489	; 0x1e9
 8003fd8:	492e      	ldr	r1, [pc, #184]	; (8004094 <os_loadElfSegments+0x184>)
 8003fda:	482f      	ldr	r0, [pc, #188]	; (8004098 <os_loadElfSegments+0x188>)
 8003fdc:	f00b fdb6 	bl	800fb4c <iprintf>
			return err;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	e051      	b.n	8004088 <os_loadElfSegments+0x178>
		}

		lfs_file_seek(&lfs, lfs_file, data.p_offset, LFS_SEEK_SET);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6839      	ldr	r1, [r7, #0]
 8003fec:	4828      	ldr	r0, [pc, #160]	; (8004090 <os_loadElfSegments+0x180>)
 8003fee:	f007 faf3 	bl	800b5d8 <lfs_file_seek>
		err = lfs_file_read(&lfs, lfs_file, &benga[pos], data.p_filesz);
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff4:	4a29      	ldr	r2, [pc, #164]	; (800409c <os_loadElfSegments+0x18c>)
 8003ff6:	441a      	add	r2, r3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	4824      	ldr	r0, [pc, #144]	; (8004090 <os_loadElfSegments+0x180>)
 8003ffe:	f007 fa8b 	bl	800b518 <lfs_file_read>
 8004002:	6338      	str	r0, [r7, #48]	; 0x30
		if(err < 0){
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	2b00      	cmp	r3, #0
 8004008:	da08      	bge.n	800401c <os_loadElfSegments+0x10c>
			PRINTLN("read error %d", err);
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8004010:	4920      	ldr	r1, [pc, #128]	; (8004094 <os_loadElfSegments+0x184>)
 8004012:	4821      	ldr	r0, [pc, #132]	; (8004098 <os_loadElfSegments+0x188>)
 8004014:	f00b fd9a 	bl	800fb4c <iprintf>
			return err;
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	e035      	b.n	8004088 <os_loadElfSegments+0x178>
		}
		vAddr = data.p_vaddr;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48
		pos += (err + 16) & ~0xF;
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	3310      	adds	r3, #16
 8004024:	f023 030f 	bic.w	r3, r3, #15
 8004028:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800402a:	4413      	add	r3, r2
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
		jeba = jeba == 0 ? pos : jeba;
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <os_loadElfSegments+0x128>
 8004034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004036:	e000      	b.n	800403a <os_loadElfSegments+0x12a>
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint32_t i = 0; i < header->e_phnum; i++){
 800403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403e:	3301      	adds	r3, #1
 8004040:	643b      	str	r3, [r7, #64]	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404c:	4293      	cmp	r3, r2
 800404e:	d3a5      	bcc.n	8003f9c <os_loadElfSegments+0x8c>

	}

	uint32_t* p = (uint32_t*)&benga[852];
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <os_loadElfSegments+0x190>)
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t addr = *p;
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
	addr = addr - vAddr + jeba + (uint32_t)benga;
 800405a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004062:	4413      	add	r3, r2
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <os_loadElfSegments+0x18c>)
 8004066:	4413      	add	r3, r2
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
	*p = addr;
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800406e:	601a      	str	r2, [r3, #0]

	uint32_t jumpAddr = *((uint32_t*)&benga[4]);
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <os_loadElfSegments+0x194>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
	jumpAddr = jumpAddr - FLASH_BASE_ADDR + (uint32_t)benga;
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <os_loadElfSegments+0x18c>)
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <os_loadElfSegments+0x198>)
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800407e:	4413      	add	r3, r2
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
	((int(*)())jumpAddr)();
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004084:	4798      	blx	r3

	return 0;
 8004086:	2300      	movs	r3, #0

}
 8004088:	4618      	mov	r0, r3
 800408a:	3758      	adds	r7, #88	; 0x58
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20015618 	.word	0x20015618
 8004094:	080111b4 	.word	0x080111b4
 8004098:	080111c0 	.word	0x080111c0
 800409c:	20014df4 	.word	0x20014df4
 80040a0:	20015148 	.word	0x20015148
 80040a4:	20014df8 	.word	0x20014df8
 80040a8:	08000000 	.word	0x08000000

080040ac <os_task_createProcess>:

void os_task_createProcess(char* file){
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0a6      	sub	sp, #152	; 0x98
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

	/* Open file
	 --------------------------------------------------*/
	lfs_file_t lfs_file;
	int err = lfs_file_open(&lfs, &lfs_file, file, LFS_O_RDONLY);
 80040b4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80040b8:	2301      	movs	r3, #1
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	481c      	ldr	r0, [pc, #112]	; (8004130 <os_task_createProcess+0x84>)
 80040be:	f007 f9cb 	bl	800b458 <lfs_file_open>
 80040c2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(err < 0){
 80040c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da06      	bge.n	80040dc <os_task_createProcess+0x30>
		PRINTLN("Open Error");
 80040ce:	f240 220d 	movw	r2, #525	; 0x20d
 80040d2:	4918      	ldr	r1, [pc, #96]	; (8004134 <os_task_createProcess+0x88>)
 80040d4:	4818      	ldr	r0, [pc, #96]	; (8004138 <os_task_createProcess+0x8c>)
 80040d6:	f00b fd39 	bl	800fb4c <iprintf>
		return;
 80040da:	e025      	b.n	8004128 <os_task_createProcess+0x7c>
	}

	os_elfHeader_t header;
	if(os_checkElfHeader(&header, &lfs_file) < 0) {
 80040dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fec0 	bl	8003e6c <os_checkElfHeader>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da0c      	bge.n	800410c <os_task_createProcess+0x60>
		lfs_file_close(&lfs, &lfs_file);
 80040f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040f6:	4619      	mov	r1, r3
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <os_task_createProcess+0x84>)
 80040fa:	f007 f9e1 	bl	800b4c0 <lfs_file_close>
		PRINTLN("error in header");
 80040fe:	f44f 7205 	mov.w	r2, #532	; 0x214
 8004102:	490c      	ldr	r1, [pc, #48]	; (8004134 <os_task_createProcess+0x88>)
 8004104:	480d      	ldr	r0, [pc, #52]	; (800413c <os_task_createProcess+0x90>)
 8004106:	f00b fd21 	bl	800fb4c <iprintf>
		return;
 800410a:	e00d      	b.n	8004128 <os_task_createProcess+0x7c>
	}

	os_loadElfSegments(&header, &lfs_file);
 800410c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fefa 	bl	8003f10 <os_loadElfSegments>
	lfs_file_close(&lfs, &lfs_file);
 800411c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004120:	4619      	mov	r1, r3
 8004122:	4803      	ldr	r0, [pc, #12]	; (8004130 <os_task_createProcess+0x84>)
 8004124:	f007 f9cc 	bl	800b4c0 <lfs_file_close>
}
 8004128:	3798      	adds	r7, #152	; 0x98
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20015618 	.word	0x20015618
 8004134:	080111b4 	.word	0x080111b4
 8004138:	080111dc 	.word	0x080111dc
 800413c:	080111f4 	.word	0x080111f4

08004140 <os_task_return>:
 * @param void* retVal : [in] return value
 *
 * @return os_err_e : should never return. If it does, a problem occurred
 *
 **********************************************************************/
os_err_e os_task_return(void* retVal){
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

	/* Check scheduler
	 ------------------------------------------------------*/
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8004148:	f7ff fba6 	bl	8003898 <os_scheduler_state_get>
 800414c:	4603      	mov	r3, r0
 800414e:	2b01      	cmp	r3, #1
 8004150:	d001      	beq.n	8004156 <os_task_return+0x16>
 8004152:	2304      	movs	r3, #4
 8004154:	e019      	b.n	800418a <os_task_return+0x4a>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8004156:	f3ef 8310 	mrs	r3, PRIMASK
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	b672      	cpsid	i
 800415e:	f3bf 8f6f 	isb	sy

	/* Store return value and tag as ended
	 ------------------------------------------------------*/
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <os_task_return+0x54>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2201      	movs	r2, #1
 800416a:	761a      	strb	r2, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <os_task_return+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	649a      	str	r2, [r3, #72]	; 0x48

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(os_cur_task->element);
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <os_task_return+0x54>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f84b 	bl	8003218 <os_handle_list_updateAndCheck>
	 ------------------------------------------------------*/
	while(1){

		/* Yeild task
		 ------------------------------------------------------*/
		os_task_yeild();
 8004182:	f000 f8cd 	bl	8004320 <os_task_yeild>

		/* Enable IRQ no matter what
		 ------------------------------------------------------*/
		__os_enable_irq();
 8004186:	b662      	cpsie	i
		os_task_yeild();
 8004188:	e7fb      	b.n	8004182 <os_task_return+0x42>
	OS_EXIT_CRITICAL();

	/* Another Failsafe
	 ------------------------------------------------------*/
	return OS_ERR_UNKNOWN;
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200145ac 	.word	0x200145ac

08004198 <os_task_delete>:
 * @param os_handle_t h : [in] handle containing the task to kill
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_delete(os_handle_t h){
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	613b      	str	r3, [r7, #16]

	/* Search to see if task exists
	 ------------------------------------------------------*/
	os_list_cell_t* list = os_list_search(&os_head, h);
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	485b      	ldr	r0, [pc, #364]	; (8004314 <os_task_delete+0x17c>)
 80041a8:	f7fe fd93 	bl	8002cd2 <os_list_search>
 80041ac:	60f8      	str	r0, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <os_task_delete+0x20>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0a8      	b.n	800430a <os_task_delete+0x172>
	if(list == NULL) return OS_ERR_INVALID;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <os_task_delete+0x2a>
 80041be:	2302      	movs	r3, #2
 80041c0:	e0a3      	b.n	800430a <os_task_delete+0x172>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <os_task_delete+0x36>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e09d      	b.n	800430a <os_task_delete+0x172>

	/* Check scheduler, we cannot kill the current task if scheduler is not ready
	 ------------------------------------------------------*/
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 80041ce:	4b52      	ldr	r3, [pc, #328]	; (8004318 <os_task_delete+0x180>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d106      	bne.n	80041e8 <os_task_delete+0x50>
 80041da:	f7ff fb5d 	bl	8003898 <os_scheduler_state_get>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <os_task_delete+0x50>
 80041e4:	2304      	movs	r3, #4
 80041e6:	e090      	b.n	800430a <os_task_delete+0x172>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	b672      	cpsid	i
 80041f0:	f3bf 8f6f 	isb	sy

	/* Tag as ended
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2201      	movs	r2, #1
 80041f8:	761a      	strb	r2, [r3, #24]

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(h);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff f80c 	bl	8003218 <os_handle_list_updateAndCheck>

	/* Check and store if we are killing the current task
	 ------------------------------------------------------*/
	if(h == os_cur_task->element){
 8004200:	4b45      	ldr	r3, [pc, #276]	; (8004318 <os_task_delete+0x180>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d106      	bne.n	800421a <os_task_delete+0x82>

		/* Tag task to delete
		 ------------------------------------------------------*/
		t->state = OS_TASK_DELETING;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2204      	movs	r2, #4
 8004210:	761a      	strb	r2, [r3, #24]
		 ------------------------------------------------------*/
		while(1){

			/* Yeild task
			 ------------------------------------------------------*/
			os_task_yeild();
 8004212:	f000 f885 	bl	8004320 <os_task_yeild>

			/* Enable IRQ no matter what
			 ------------------------------------------------------*/
			__os_enable_irq();
 8004216:	b662      	cpsie	i
			os_task_yeild();
 8004218:	e7fb      	b.n	8004212 <os_task_delete+0x7a>
		return OS_ERR_UNKNOWN;
	}

	/* Remove task from object block list if needed
	 ------------------------------------------------------*/
	if( t->objWaited != NULL) {
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	2b00      	cmp	r3, #0
 8004220:	d031      	beq.n	8004286 <os_task_delete+0xee>

		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e029      	b.n	800427c <os_task_delete+0xe4>

			/* Failsafe
			 ------------------------------------------------------*/
			if(t->objWaited[i] == NULL) continue;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01d      	beq.n	8004274 <os_task_delete+0xdc>

			/* Remove from block list
			 ------------------------------------------------------*/
			os_list_remove(t->objWaited[i]->blockList, h);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fde0 	bl	8002e0e <os_list_remove>

			/* Update object's priority
			 ------------------------------------------------------*/
			os_obj_updatePrio(t->objWaited[i]);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fcb2 	bl	8002bc4 <os_obj_updatePrio>

			/* Update block list
			 ------------------------------------------------------*/
			os_handle_list_updateAndCheck(t->objWaited[i]);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe ffd3 	bl	8003218 <os_handle_list_updateAndCheck>
 8004272:	e000      	b.n	8004276 <os_task_delete+0xde>
			if(t->objWaited[i] == NULL) continue;
 8004274:	bf00      	nop
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3301      	adds	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	429a      	cmp	r2, r3
 8004284:	d3d0      	bcc.n	8004228 <os_task_delete+0x90>

	}

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4824      	ldr	r0, [pc, #144]	; (800431c <os_task_delete+0x184>)
 800428a:	f7fe fdc0 	bl	8002e0e <os_list_remove>

	/* Remove task from list
	 ------------------------------------------------------*/
	os_list_remove(&os_head, h);
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4820      	ldr	r0, [pc, #128]	; (8004314 <os_task_delete+0x17c>)
 8004292:	f7fe fdbc 	bl	8002e0e <os_list_remove>

	/* Clear blocked list
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fe0a 	bl	8002eb4 <os_list_clear>

	/* Clear owned mutex list
	 ------------------------------------------------------*/
	os_list_clear(t->ownedMutex);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fe05 	bl	8002eb4 <os_list_clear>

	/* Free the stack memory
	 ------------------------------------------------------*/
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe fb47 	bl	8002948 <os_heap_free>

	/* Reset values just in case
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2201      	movs	r2, #1
 80042be:	761a      	strb	r2, [r3, #24]
	t->objWaited = NULL;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2200      	movs	r2, #0
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34
	t->sizeObjs = 0;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2200      	movs	r2, #0
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
	t->pStack = 0;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2200      	movs	r2, #0
 80042d0:	621a      	str	r2, [r3, #32]
	t->stackBase = 0;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2200      	movs	r2, #0
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize = 0;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2200      	movs	r2, #0
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24
	t->wakeCoutdown = 0;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2200      	movs	r2, #0
 80042e2:	61da      	str	r2, [r3, #28]

	/* Free code and name
	 ------------------------------------------------------*/
	os_heap_free(t->fnPtr);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe fb2d 	bl	8002948 <os_heap_free>
	os_heap_free(h->name);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fb28 	bl	8002948 <os_heap_free>

	/* Delete task
	 ------------------------------------------------------*/
	os_heap_free(h);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fe fb25 	bl	8002948 <os_heap_free>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f383 8810 	msr	PRIMASK, r3
 8004304:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200155f8 	.word	0x200155f8
 8004318:	200145ac 	.word	0x200145ac
 800431c:	20014dd8 	.word	0x20014dd8

08004320 <os_task_yeild>:
 * OS Task Yeild
 *
 * @brief This function calls the scheduler in order to let other tasks to run
 *
 **********************************************************************/
void os_task_yeild(){
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <os_task_yeild+0x20>)
 8004326:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800432a:	4a05      	ldr	r2, [pc, #20]	; (8004340 <os_task_yeild+0x20>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e008 	.word	0xe000e008

08004344 <os_task_getPrio>:
 * @param task_t* t : [in] handle to task
 *
 * @return int8_t : The effective priority or -1 if argument error
 *
 **********************************************************************/
int8_t os_task_getPrio(os_handle_t h){
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60fb      	str	r3, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <os_task_getPrio+0x18>
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	e009      	b.n	8004370 <os_task_getPrio+0x2c>
	if(h->type != OS_OBJ_TASK) return -1;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d002      	beq.n	800436a <os_task_getPrio+0x26>
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	e002      	b.n	8004370 <os_task_getPrio+0x2c>

	return t->priority;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60fb      	str	r3, [r7, #12]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <os_task_getState+0x16>
 800438e:	2300      	movs	r3, #0
 8004390:	e023      	b.n	80043da <os_task_getState+0x5e>
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <os_task_getState+0x22>
 800439a:	2300      	movs	r3, #0
 800439c:	e01d      	b.n	80043da <os_task_getState+0x5e>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4810      	ldr	r0, [pc, #64]	; (80043e4 <os_task_getState+0x68>)
 80043a2:	f7fe fc96 	bl	8002cd2 <os_list_search>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <os_task_getState+0x34>
 80043ac:	2300      	movs	r3, #0
 80043ae:	e014      	b.n	80043da <os_task_getState+0x5e>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	7e1b      	ldrb	r3, [r3, #24]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d101      	bne.n	80043bc <os_task_getState+0x40>
 80043b8:	2300      	movs	r3, #0
 80043ba:	e00e      	b.n	80043da <os_task_getState+0x5e>

	/* Check if task is ended
	 ------------------------------------------------------*/
	os_task_state_e state = task->state;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	7e1b      	ldrb	r3, [r3, #24]
 80043c0:	72fb      	strb	r3, [r7, #11]

	/* Force blocked if task is waiting for an object
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d103      	bne.n	80043d0 <os_task_getState+0x54>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <os_task_getState+0x58>
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	e000      	b.n	80043d6 <os_task_getState+0x5a>
 80043d4:	2303      	movs	r3, #3
 80043d6:	72fb      	strb	r3, [r7, #11]

	return state;
 80043d8:	7afb      	ldrb	r3, [r7, #11]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200155f8 	.word	0x200155f8

080043e8 <os_task_getByPID>:
 *
 * @param uint16_t pid : [in] PID of the searched task
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_handle_t os_task_getByPID(uint16_t pid){
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80043f2:	f3ef 8310 	mrs	r3, PRIMASK
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	b672      	cpsid	i
 80043fa:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <os_task_getByPID+0x5c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
	while(it != NULL && ((os_task_t*)it->element)->pid != pid){
 8004404:	e002      	b.n	800440c <os_task_getByPID+0x24>
		it = it->next;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
	while(it != NULL && ((os_task_t*)it->element)->pid != pid){
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <os_task_getByPID+0x36>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004418:	88fa      	ldrh	r2, [r7, #6]
 800441a:	429a      	cmp	r2, r3
 800441c:	d1f3      	bne.n	8004406 <os_task_getByPID+0x1e>
	}

	OS_EXIT_CRITICAL();
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f383 8810 	msr	PRIMASK, r3
 8004424:	f3bf 8f6f 	isb	sy
	return it == NULL ? NULL : it->element;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <os_task_getByPID+0x4c>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	e000      	b.n	8004436 <os_task_getByPID+0x4e>
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200155f8 	.word	0x200155f8

08004448 <os_getMsTick>:
 *
 * @brief This function returns the OS' ms tick count
 *
 * @return uint32_t tick count
 **********************************************************************/
uint32_t os_getMsTick(){
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
	return os_ticks_ms;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <os_getMsTick+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200145b0 	.word	0x200145b0

08004460 <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8004468:	f3ef 8310 	mrs	r3, PRIMASK
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	b672      	cpsid	i
 8004470:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <os_tick+0x100>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	4a38      	ldr	r2, [pc, #224]	; (8004560 <os_tick+0x100>)
 800447e:	6013      	str	r3, [r2, #0]

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* it = os_head.head.next;
 8004484:	4b37      	ldr	r3, [pc, #220]	; (8004564 <os_tick+0x104>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <os_tick+0x108>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <os_tick+0x42>
 8004492:	4b35      	ldr	r3, [pc, #212]	; (8004568 <os_tick+0x108>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff53 	bl	8004344 <os_task_getPrio>
 800449e:	4603      	mov	r3, r0
 80044a0:	e001      	b.n	80044a6 <os_tick+0x46>
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295
 80044a6:	73fb      	strb	r3, [r7, #15]

	/* Check if there is any high priority task to execute and wake up tasks
	 ------------------------------------------------------*/
	while(it != NULL){
 80044a8:	e044      	b.n	8004534 <os_tick+0xd4>

		/* Tick counter if necessary
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <os_tick+0x80>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d00f      	beq.n	80044e0 <os_tick+0x80>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d805      	bhi.n	80044d8 <os_tick+0x78>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	e000      	b.n	80044da <os_tick+0x7a>
 80044d8:	2300      	movs	r3, #0
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	6892      	ldr	r2, [r2, #8]
 80044de:	61d3      	str	r3, [r2, #28]

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <os_tick+0x9c>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d103      	bne.n	80044fc <os_tick+0x9c>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2202      	movs	r2, #2
 80044fa:	761a      	strb	r2, [r3, #24]

		/* If current task is ready
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	7e1b      	ldrb	r3, [r3, #24]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d113      	bne.n	800452e <os_tick+0xce>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio(it->element);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ff1a 	bl	8004344 <os_task_getPrio>
 8004510:	4603      	mov	r3, r0
 8004512:	73bb      	strb	r3, [r7, #14]

			/* If there is a task with priority higher or equal to current task that is ready, than scheduling is called
			 ------------------------------------------------------*/
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 8004514:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800451c:	429a      	cmp	r2, r3
 800451e:	db06      	blt.n	800452e <os_tick+0xce>
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <os_tick+0x108>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	429a      	cmp	r2, r3
 8004528:	d001      	beq.n	800452e <os_tick+0xce>
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]

		}

		/* Keep going
		 ------------------------------------------------------*/
		it = it->next;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	613b      	str	r3, [r7, #16]
	while(it != NULL){
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1b7      	bne.n	80044aa <os_tick+0x4a>
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <os_tick+0xee>
 8004540:	f7ff f9aa 	bl	8003898 <os_scheduler_state_get>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <os_tick+0xee>
 800454a:	f7ff fee9 	bl	8004320 <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f383 8810 	msr	PRIMASK, r3
 8004554:	f3bf 8f6f 	isb	sy
	return;
 8004558:	bf00      	nop
}
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	200145b0 	.word	0x200145b0
 8004564:	200155f8 	.word	0x200155f8
 8004568:	200145ac 	.word	0x200145ac

0800456c <os_flash_write>:
 * @param size_t len 		: [in] Size of the data buffer
 *
 * @return int32_t : <0 if error. Otherwise the number of bytes written
 *
 **********************************************************************/
int32_t os_flash_write(uint32_t addr, uint8_t buffer[], size_t len){
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b08f      	sub	sp, #60	; 0x3c
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(len == 0) return -2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <os_flash_write+0x18>
 800457e:	f06f 0301 	mvn.w	r3, #1
 8004582:	e0f0      	b.n	8004766 <os_flash_write+0x1fa>
	if(buffer == NULL) return -2;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <os_flash_write+0x24>
 800458a:	f06f 0301 	mvn.w	r3, #1
 800458e:	e0ea      	b.n	8004766 <os_flash_write+0x1fa>
	if(addr < FLASH_BASE_ADDR) return -2;
 8004590:	4a77      	ldr	r2, [pc, #476]	; (8004770 <os_flash_write+0x204>)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4293      	cmp	r3, r2
 8004596:	d202      	bcs.n	800459e <os_flash_write+0x32>
 8004598:	f06f 0301 	mvn.w	r3, #1
 800459c:	e0e3      	b.n	8004766 <os_flash_write+0x1fa>
	if(addr >= FLASH_END_ADDR) return -2;
 800459e:	4a75      	ldr	r2, [pc, #468]	; (8004774 <os_flash_write+0x208>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d302      	bcc.n	80045ac <os_flash_write+0x40>
 80045a6:	f06f 0301 	mvn.w	r3, #1
 80045aa:	e0dc      	b.n	8004766 <os_flash_write+0x1fa>

	/* Wait for last operation
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 80045ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b0:	f008 fae6 	bl	800cb80 <FLASH_WaitForLastOperation>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ASSERT(ret == HAL_OK);
 80045ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <os_flash_write+0x60>
 80045c2:	2227      	movs	r2, #39	; 0x27
 80045c4:	496c      	ldr	r1, [pc, #432]	; (8004778 <os_flash_write+0x20c>)
 80045c6:	486d      	ldr	r0, [pc, #436]	; (800477c <os_flash_write+0x210>)
 80045c8:	f00b fac0 	bl	800fb4c <iprintf>
	if(ret != HAL_OK)
 80045cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <os_flash_write+0x6e>
		return -1;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	e0c5      	b.n	8004766 <os_flash_write+0x1fa>

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
 80045da:	f008 fa9f 	bl	800cb1c <HAL_FLASH_Unlock>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ASSERT(ret == HAL_OK);
 80045e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <os_flash_write+0x8a>
 80045ec:	222e      	movs	r2, #46	; 0x2e
 80045ee:	4962      	ldr	r1, [pc, #392]	; (8004778 <os_flash_write+0x20c>)
 80045f0:	4862      	ldr	r0, [pc, #392]	; (800477c <os_flash_write+0x210>)
 80045f2:	f00b faab 	bl	800fb4c <iprintf>
	if(ret != HAL_OK)
 80045f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <os_flash_write+0x98>
		return -1;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	e0b0      	b.n	8004766 <os_flash_write+0x1fa>

	/* Write into flash. You can write 1, 2, or 4 bytes at a time
	 ------------------------------------------------------*/
	bool err = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t pos = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
	while(1){

		/* Check alignment and border requirements
		 ------------------------------------------------------*/
		uint32_t writePermitted = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
		writePermitted = ( (addr + 1) <= FLASH_END_ADDR ) 				   ? 1 : writePermitted;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	4a57      	ldr	r2, [pc, #348]	; (8004774 <os_flash_write+0x208>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <os_flash_write+0xb4>
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	e000      	b.n	8004622 <os_flash_write+0xb6>
 8004620:	2301      	movs	r3, #1
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
		writePermitted = ( (addr % 2) == 0 && addr + 2 <= FLASH_END_ADDR ) ? 2 : writePermitted;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <os_flash_write+0xcc>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3302      	adds	r3, #2
 8004632:	4a50      	ldr	r2, [pc, #320]	; (8004774 <os_flash_write+0x208>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <os_flash_write+0xd0>
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	e000      	b.n	800463e <os_flash_write+0xd2>
 800463c:	2302      	movs	r3, #2
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
		writePermitted = ( (addr % 4) == 0 && addr + 4 <= FLASH_END_ADDR ) ? 4 : writePermitted;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <os_flash_write+0xe8>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3304      	adds	r3, #4
 800464e:	4a49      	ldr	r2, [pc, #292]	; (8004774 <os_flash_write+0x208>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <os_flash_write+0xec>
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	e000      	b.n	800465a <os_flash_write+0xee>
 8004658:	2304      	movs	r3, #4
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Calculates the number of bytes to write
		 ------------------------------------------------------*/
		uint32_t lenToWrite = writePermitted < len ? writePermitted : len;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	4293      	cmp	r3, r2
 8004662:	bf28      	it	cs
 8004664:	4613      	movcs	r3, r2
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
		lenToWrite = lenToWrite == 3 ? 2 : lenToWrite;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	2b03      	cmp	r3, #3
 800466c:	d001      	beq.n	8004672 <os_flash_write+0x106>
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	e000      	b.n	8004674 <os_flash_write+0x108>
 8004672:	2302      	movs	r3, #2
 8004674:	627b      	str	r3, [r7, #36]	; 0x24

		/* Finished writing
		 ------------------------------------------------------*/
		if(lenToWrite == 0 || len == 0) break;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05e      	beq.n	800473a <os_flash_write+0x1ce>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d05b      	beq.n	800473a <os_flash_write+0x1ce>

		/* Calculates the writing flag used
		 ------------------------------------------------------*/
		uint32_t writeFlag = FLASH_TYPEPROGRAM_BYTE;
 8004682:	2300      	movs	r3, #0
 8004684:	623b      	str	r3, [r7, #32]
		writeFlag = lenToWrite == 2 ? FLASH_TYPEPROGRAM_HALFWORD : writeFlag;
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2b02      	cmp	r3, #2
 800468a:	d001      	beq.n	8004690 <os_flash_write+0x124>
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	e000      	b.n	8004692 <os_flash_write+0x126>
 8004690:	2301      	movs	r3, #1
 8004692:	623b      	str	r3, [r7, #32]
		writeFlag = lenToWrite == 4 ?     FLASH_TYPEPROGRAM_WORD : writeFlag;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2b04      	cmp	r3, #4
 8004698:	d001      	beq.n	800469e <os_flash_write+0x132>
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	e000      	b.n	80046a0 <os_flash_write+0x134>
 800469e:	2302      	movs	r3, #2
 80046a0:	623b      	str	r3, [r7, #32]

		/* Store data in a uint64_t to avoid possible alignment issues
		 ------------------------------------------------------*/
		uint64_t data = 0;
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(&data, &buffer[pos], lenToWrite);
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	18d1      	adds	r1, r2, r3
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	4618      	mov	r0, r3
 80046bc:	f00a fec3 	bl	800f446 <memcpy>

		/* Program flash
		 ------------------------------------------------------*/
		ret = HAL_FLASH_Program(writeFlag, addr, data);
 80046c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	6a38      	ldr	r0, [r7, #32]
 80046cc:	f008 f9d2 	bl	800ca74 <HAL_FLASH_Program>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ASSERT(ret == HAL_OK);
 80046d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <os_flash_write+0x17c>
 80046de:	2256      	movs	r2, #86	; 0x56
 80046e0:	4925      	ldr	r1, [pc, #148]	; (8004778 <os_flash_write+0x20c>)
 80046e2:	4826      	ldr	r0, [pc, #152]	; (800477c <os_flash_write+0x210>)
 80046e4:	f00b fa32 	bl	800fb4c <iprintf>
		if(ret != HAL_OK){
 80046e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <os_flash_write+0x18c>
			err = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 80046f6:	e020      	b.n	800473a <os_flash_write+0x1ce>
		}

		/* Manipulate local vaiables
		 ------------------------------------------------------*/
		pos += (int32_t)lenToWrite; //Counts the number of bytes actually written
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fc:	4413      	add	r3, r2
 80046fe:	633b      	str	r3, [r7, #48]	; 0x30
		addr += lenToWrite; //Moves to the next address
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	4413      	add	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
		len -= lenToWrite; //reduces length
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	607b      	str	r3, [r7, #4]

		/* Wait for operation to end
		 ------------------------------------------------------*/
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8004710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004714:	f008 fa34 	bl	800cb80 <FLASH_WaitForLastOperation>
 8004718:	4603      	mov	r3, r0
 800471a:	77fb      	strb	r3, [r7, #31]
		ASSERT(ret == HAL_OK);
 800471c:	7ffb      	ldrb	r3, [r7, #31]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <os_flash_write+0x1c0>
 8004722:	2265      	movs	r2, #101	; 0x65
 8004724:	4914      	ldr	r1, [pc, #80]	; (8004778 <os_flash_write+0x20c>)
 8004726:	4815      	ldr	r0, [pc, #84]	; (800477c <os_flash_write+0x210>)
 8004728:	f00b fa10 	bl	800fb4c <iprintf>
		if(ret != HAL_OK){
 800472c:	7ffb      	ldrb	r3, [r7, #31]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f43f af6d 	beq.w	800460e <os_flash_write+0xa2>
			err = 1;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}

	/* Lock flash again and return error or the amount of bytes
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Lock();
 800473a:	f008 fa11 	bl	800cb60 <HAL_FLASH_Lock>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ASSERT(ret == HAL_OK);
 8004744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <os_flash_write+0x1ea>
 800474c:	226f      	movs	r2, #111	; 0x6f
 800474e:	490a      	ldr	r1, [pc, #40]	; (8004778 <os_flash_write+0x20c>)
 8004750:	480a      	ldr	r0, [pc, #40]	; (800477c <os_flash_write+0x210>)
 8004752:	f00b f9fb 	bl	800fb4c <iprintf>
	return err == 1 ? -1 : pos;
 8004756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <os_flash_write+0x1f8>
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e000      	b.n	8004766 <os_flash_write+0x1fa>
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004766:	4618      	mov	r0, r3
 8004768:	373c      	adds	r7, #60	; 0x3c
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}
 800476e:	bf00      	nop
 8004770:	08000000 	.word	0x08000000
 8004774:	08100000 	.word	0x08100000
 8004778:	08011210 	.word	0x08011210
 800477c:	0801121c 	.word	0x0801121c

08004780 <os_flash_read>:
 * @param size_t len 		: [ in] Size of the data buffer
 *
 * @return int32_t : <0 if error. Otherwise the number of read bytes
 *
 **********************************************************************/
int32_t os_flash_read(uint32_t addr, uint8_t buffer[], size_t len){
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

	/* Argument check
	 ------------------------------------------------------*/
	if(len == 0) return -2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <os_flash_read+0x18>
 8004792:	f06f 0301 	mvn.w	r3, #1
 8004796:	e02a      	b.n	80047ee <os_flash_read+0x6e>
	if(buffer == NULL) return -2;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <os_flash_read+0x24>
 800479e:	f06f 0301 	mvn.w	r3, #1
 80047a2:	e024      	b.n	80047ee <os_flash_read+0x6e>
	if(addr < FLASH_BASE_ADDR) return -2;
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <os_flash_read+0x78>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d202      	bcs.n	80047b2 <os_flash_read+0x32>
 80047ac:	f06f 0301 	mvn.w	r3, #1
 80047b0:	e01d      	b.n	80047ee <os_flash_read+0x6e>
	if(addr >= FLASH_END_ADDR) return -2;
 80047b2:	4a12      	ldr	r2, [pc, #72]	; (80047fc <os_flash_read+0x7c>)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d302      	bcc.n	80047c0 <os_flash_read+0x40>
 80047ba:	f06f 0301 	mvn.w	r3, #1
 80047be:	e016      	b.n	80047ee <os_flash_read+0x6e>

	/* Check border and calculates the amout of data to read
	 ------------------------------------------------------*/
	size_t readBytes = len;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	617b      	str	r3, [r7, #20]
	if(addr + len > FLASH_END_ADDR){
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4413      	add	r3, r2
 80047ca:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <os_flash_read+0x7c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d907      	bls.n	80047e0 <os_flash_read+0x60>
		readBytes -= addr + len - FLASH_END_ADDR;
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <os_flash_read+0x7c>)
 80047dc:	4413      	add	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
	}

	/* Copy data into buffer
	 ------------------------------------------------------*/
	memcpy(buffer, (void*)addr, readBytes);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4619      	mov	r1, r3
 80047e6:	68b8      	ldr	r0, [r7, #8]
 80047e8:	f00a fe2d 	bl	800f446 <memcpy>

	/* Return the amount of bytes
	 ------------------------------------------------------*/
	return (int32_t)readBytes;
 80047ec:	697b      	ldr	r3, [r7, #20]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	08000000 	.word	0x08000000
 80047fc:	08100000 	.word	0x08100000

08004800 <os_flash_erase>:
 * @param uint32_t secNum   : [in] Number of sectors to erase
 *
 * @return int32_t : <0 if error. Otherwise the number of sectors erased
 *
 **********************************************************************/
int32_t os_flash_erase(uint32_t addrBeg, uint32_t secNum){
 8004800:	b580      	push	{r7, lr}
 8004802:	b08c      	sub	sp, #48	; 0x30
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]

	/* Check arguments
	 ------------------------------------------------------*/
	if(addrBeg < FLASH_BASE_ADDR) return -2;
 800480a:	4a7b      	ldr	r2, [pc, #492]	; (80049f8 <os_flash_erase+0x1f8>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4293      	cmp	r3, r2
 8004810:	d202      	bcs.n	8004818 <os_flash_erase+0x18>
 8004812:	f06f 0301 	mvn.w	r3, #1
 8004816:	e0ea      	b.n	80049ee <os_flash_erase+0x1ee>
	if(addrBeg >= FLASH_END_ADDR) return -2;
 8004818:	4a78      	ldr	r2, [pc, #480]	; (80049fc <os_flash_erase+0x1fc>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4293      	cmp	r3, r2
 800481e:	d302      	bcc.n	8004826 <os_flash_erase+0x26>
 8004820:	f06f 0301 	mvn.w	r3, #1
 8004824:	e0e3      	b.n	80049ee <os_flash_erase+0x1ee>

	/* Select first sector
	 ------------------------------------------------------*/
	int firstSector = -1;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(addrBeg == 0x08000000) firstSector = FLASH_SECTOR_0;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004832:	d101      	bne.n	8004838 <os_flash_erase+0x38>
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08004000) firstSector = FLASH_SECTOR_1;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a71      	ldr	r2, [pc, #452]	; (8004a00 <os_flash_erase+0x200>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <os_flash_erase+0x44>
 8004840:	2301      	movs	r3, #1
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08008000) firstSector = FLASH_SECTOR_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a6f      	ldr	r2, [pc, #444]	; (8004a04 <os_flash_erase+0x204>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <os_flash_erase+0x50>
 800484c:	2302      	movs	r3, #2
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x0800C000) firstSector = FLASH_SECTOR_3;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a6d      	ldr	r2, [pc, #436]	; (8004a08 <os_flash_erase+0x208>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <os_flash_erase+0x5c>
 8004858:	2303      	movs	r3, #3
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08010000) firstSector = FLASH_SECTOR_4;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a6b      	ldr	r2, [pc, #428]	; (8004a0c <os_flash_erase+0x20c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <os_flash_erase+0x68>
 8004864:	2304      	movs	r3, #4
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08020000) firstSector = FLASH_SECTOR_5;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a69      	ldr	r2, [pc, #420]	; (8004a10 <os_flash_erase+0x210>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <os_flash_erase+0x74>
 8004870:	2305      	movs	r3, #5
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08040000) firstSector = FLASH_SECTOR_6;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a67      	ldr	r2, [pc, #412]	; (8004a14 <os_flash_erase+0x214>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <os_flash_erase+0x80>
 800487c:	2306      	movs	r3, #6
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08060000) firstSector = FLASH_SECTOR_7;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <os_flash_erase+0x218>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <os_flash_erase+0x8c>
 8004888:	2307      	movs	r3, #7
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x08080000) firstSector = FLASH_SECTOR_8;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <os_flash_erase+0x21c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <os_flash_erase+0x98>
 8004894:	2308      	movs	r3, #8
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x080A0000) firstSector = FLASH_SECTOR_9;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a61      	ldr	r2, [pc, #388]	; (8004a20 <os_flash_erase+0x220>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <os_flash_erase+0xa4>
 80048a0:	2309      	movs	r3, #9
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x080C0000) firstSector = FLASH_SECTOR_10;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a5f      	ldr	r2, [pc, #380]	; (8004a24 <os_flash_erase+0x224>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <os_flash_erase+0xb0>
 80048ac:	230a      	movs	r3, #10
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(addrBeg == 0x080E0000) firstSector = FLASH_SECTOR_11;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a5d      	ldr	r2, [pc, #372]	; (8004a28 <os_flash_erase+0x228>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d101      	bne.n	80048bc <os_flash_erase+0xbc>
 80048b8:	230b      	movs	r3, #11
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(firstSector < 0)	return -2;
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da02      	bge.n	80048c8 <os_flash_erase+0xc8>
 80048c2:	f06f 0301 	mvn.w	r3, #1
 80048c6:	e092      	b.n	80049ee <os_flash_erase+0x1ee>

	/* Wait for operation to end
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 80048c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048cc:	f008 f958 	bl	800cb80 <FLASH_WaitForLastOperation>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 80048d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <os_flash_erase+0xe8>
 80048de:	22d1      	movs	r2, #209	; 0xd1
 80048e0:	4952      	ldr	r1, [pc, #328]	; (8004a2c <os_flash_erase+0x22c>)
 80048e2:	4853      	ldr	r0, [pc, #332]	; (8004a30 <os_flash_erase+0x230>)
 80048e4:	f00b f932 	bl	800fb4c <iprintf>
	if(ret != HAL_OK)
 80048e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <os_flash_erase+0xf6>
		return -1;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	e07b      	b.n	80049ee <os_flash_erase+0x1ee>

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
 80048f6:	f008 f911 	bl	800cb1c <HAL_FLASH_Unlock>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8004900:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <os_flash_erase+0x112>
 8004908:	22d8      	movs	r2, #216	; 0xd8
 800490a:	4948      	ldr	r1, [pc, #288]	; (8004a2c <os_flash_erase+0x22c>)
 800490c:	4848      	ldr	r0, [pc, #288]	; (8004a30 <os_flash_erase+0x230>)
 800490e:	f00b f91d 	bl	800fb4c <iprintf>
	if(ret != HAL_OK)
 8004912:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <os_flash_erase+0x120>
		return -1;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	e066      	b.n	80049ee <os_flash_erase+0x1ee>

	/* Calculates the maximum number of sectors we can erase, and cap accordingly
	 ------------------------------------------------------*/
	uint32_t sect_nb_max = (uint32_t) (11 - firstSector + 1);
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	f1c3 030c 	rsb	r3, r3, #12
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
	secNum = sect_nb_max < secNum ? sect_nb_max : secNum;
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	4293      	cmp	r3, r2
 800492e:	bf28      	it	cs
 8004930:	4613      	movcs	r3, r2
 8004932:	603b      	str	r3, [r7, #0]

	/* Prepare erase configuration
	 ------------------------------------------------------*/
	bool error = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint32_t SectorError;
	FLASH_EraseInitTypeDef eraseConf = {
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	2301      	movs	r3, #1
 8004940:	613b      	str	r3, [r7, #16]
			.TypeErase    = FLASH_TYPEERASE_SECTORS, // Erase sectors, not mass erase
			.Banks	      = FLASH_BANK_1,			 // Unused outside of mass erase
			.Sector	      = (uint32_t) firstSector,	 // Inform first sector to erase
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	FLASH_EraseInitTypeDef eraseConf = {
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	2302      	movs	r3, #2
 800494c:	61fb      	str	r3, [r7, #28]
			.VoltageRange = FLASH_VOLTAGE_RANGE_3,	 // Select voltage range
	};

	/* Erase sectors
	 ------------------------------------------------------*/
	ret = HAL_FLASHEx_Erase(&eraseConf, &SectorError);
 800494e:	f107 0220 	add.w	r2, r7, #32
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f008 fa3f 	bl	800cddc <HAL_FLASHEx_Erase>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8004964:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <os_flash_erase+0x176>
 800496c:	22f0      	movs	r2, #240	; 0xf0
 800496e:	492f      	ldr	r1, [pc, #188]	; (8004a2c <os_flash_erase+0x22c>)
 8004970:	482f      	ldr	r0, [pc, #188]	; (8004a30 <os_flash_erase+0x230>)
 8004972:	f00b f8eb 	bl	800fb4c <iprintf>
	if(ret != HAL_OK){
 8004976:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <os_flash_erase+0x184>
		error = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	/* Wait for operation to end
	 ------------------------------------------------------*/
	ret = FLASH_WaitForLastOperation(1000);
 8004984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004988:	f008 f8fa 	bl	800cb80 <FLASH_WaitForLastOperation>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 8004992:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <os_flash_erase+0x1a4>
 800499a:	22f8      	movs	r2, #248	; 0xf8
 800499c:	4923      	ldr	r1, [pc, #140]	; (8004a2c <os_flash_erase+0x22c>)
 800499e:	4824      	ldr	r0, [pc, #144]	; (8004a30 <os_flash_erase+0x230>)
 80049a0:	f00b f8d4 	bl	800fb4c <iprintf>
	if(ret != HAL_OK){
 80049a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <os_flash_erase+0x1b2>
		error = 1;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	/* Lock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Lock();
 80049b2:	f008 f8d5 	bl	800cb60 <HAL_FLASH_Lock>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ASSERT(ret == HAL_OK);
 80049bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <os_flash_erase+0x1d0>
 80049c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c8:	4918      	ldr	r1, [pc, #96]	; (8004a2c <os_flash_erase+0x22c>)
 80049ca:	4819      	ldr	r0, [pc, #100]	; (8004a30 <os_flash_erase+0x230>)
 80049cc:	f00b f8be 	bl	800fb4c <iprintf>
	if(ret != HAL_OK){
 80049d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <os_flash_erase+0x1de>
		error = 1;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	return error == 1 ? -1 : (int32_t)secNum;
 80049de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <os_flash_erase+0x1ec>
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ea:	e000      	b.n	80049ee <os_flash_erase+0x1ee>
 80049ec:	683b      	ldr	r3, [r7, #0]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3730      	adds	r7, #48	; 0x30
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	08000000 	.word	0x08000000
 80049fc:	08100000 	.word	0x08100000
 8004a00:	08004000 	.word	0x08004000
 8004a04:	08008000 	.word	0x08008000
 8004a08:	0800c000 	.word	0x0800c000
 8004a0c:	08010000 	.word	0x08010000
 8004a10:	08020000 	.word	0x08020000
 8004a14:	08040000 	.word	0x08040000
 8004a18:	08060000 	.word	0x08060000
 8004a1c:	08080000 	.word	0x08080000
 8004a20:	080a0000 	.word	0x080a0000
 8004a24:	080c0000 	.word	0x080c0000
 8004a28:	080e0000 	.word	0x080e0000
 8004a2c:	08011210 	.word	0x08011210
 8004a30:	0801121c 	.word	0x0801121c

08004a34 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bf38      	it	cc
 8004a46:	4613      	movcc	r3, r2
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	bf28      	it	cs
 8004a66:	4613      	movcs	r3, r2
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	fb01 f202 	mul.w	r2, r1, r2
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	4413      	add	r3, r2
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ffde 	bl	8004a74 <lfs_aligndown>
 8004ab8:	4603      	mov	r3, r0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return (uint32_t)(32 - __builtin_clz(a-1));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return (uint32_t)__builtin_ctz(a);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return (uint32_t)__builtin_popcount(a);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fb fbd1 	bl	80002b0 <__popcountsi2>
 8004b0e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 8004b3c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ffee 	bl	8004b34 <lfs_fromle32>
 8004b58:	4603      	mov	r3, r0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffed 	bl	8004b62 <lfs_frombe32>
 8004b88:	4603      	mov	r3, r0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f00a fc22 	bl	800f3e4 <malloc>
 8004ba0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f00a fc1e 	bl	800f3f4 <free>
#else
    (void)p;
#endif
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	601a      	str	r2, [r3, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68d8      	ldr	r0, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	21ff      	movs	r1, #255	; 0xff
 8004bf6:	f00a fc31 	bl	800f45c <memset>
    pcache->block = LFS_BLOCK_NULL;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8004c0c:	b5b0      	push	{r4, r5, r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d208      	bcs.n	8004c3c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8004c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c34:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f240 811b 	bls.w	8004e72 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8004c3c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004c40:	e11c      	b.n	8004e7c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8004c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c44:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d03f      	beq.n	8004ccc <lfs_bd_read+0xc0>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d13a      	bne.n	8004ccc <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8004c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d232      	bcs.n	8004ccc <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d324      	bcc.n	8004cba <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	1acb      	subs	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	69b8      	ldr	r0, [r7, #24]
 8004c82:	f7ff fee7 	bl	8004a54 <lfs_min>
 8004c86:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c92:	1acb      	subs	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	69f8      	ldr	r0, [r7, #28]
 8004c9c:	f00a fbd3 	bl	800f446 <memcpy>

                data += diff;
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	4413      	add	r3, r2
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004cb8:	e0db      	b.n	8004e72 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	69b8      	ldr	r0, [r7, #24]
 8004cc6:	f7ff fec5 	bl	8004a54 <lfs_min>
 8004cca:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d13a      	bne.n	8004d4c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	4413      	add	r3, r2
        if (block == rcache->block &&
 8004ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d232      	bcs.n	8004d4c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d324      	bcc.n	8004d3a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	1acb      	subs	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	69b8      	ldr	r0, [r7, #24]
 8004d02:	f7ff fea7 	bl	8004a54 <lfs_min>
 8004d06:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d12:	1acb      	subs	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	69f8      	ldr	r0, [r7, #28]
 8004d1c:	f00a fb93 	bl	800f446 <memcpy>

                data += diff;
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	4413      	add	r3, r2
 8004d26:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004d38:	e09b      	b.n	8004e72 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	69b8      	ldr	r0, [r7, #24]
 8004d46:	f7ff fe85 	bl	8004a54 <lfs_min>
 8004d4a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8004d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d336      	bcc.n	8004dc2 <lfs_bd_read+0x1b6>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d60:	fb02 f201 	mul.w	r2, r2, r1
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d12b      	bne.n	8004dc2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8004d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d325      	bcc.n	8004dc2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	69b8      	ldr	r0, [r7, #24]
 8004d80:	f7ff fe78 	bl	8004a74 <lfs_aligndown>
 8004d84:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8a:	685c      	ldr	r4, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d9a:	47a0      	blx	r4
 8004d9c:	6178      	str	r0, [r7, #20]
            if (err) {
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <lfs_bd_read+0x19c>
                return err;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e069      	b.n	8004e7c <lfs_bd_read+0x270>
            }

            data += diff;
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	4413      	add	r3, r2
 8004dae:	61fb      	str	r3, [r7, #28]
            off += diff;
 8004db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	4413      	add	r3, r2
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8004db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8004dc0:	e057      	b.n	8004e72 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d305      	bcc.n	8004dda <lfs_bd_read+0x1ce>
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <lfs_bd_read+0x278>)
 8004dd0:	4a2d      	ldr	r2, [pc, #180]	; (8004e88 <lfs_bd_read+0x27c>)
 8004dd2:	216a      	movs	r1, #106	; 0x6a
 8004dd4:	482d      	ldr	r0, [pc, #180]	; (8004e8c <lfs_bd_read+0x280>)
 8004dd6:	f00a fa99 	bl	800f30c <__assert_func>
        rcache->block = block;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dde:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4619      	mov	r1, r3
 8004de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004dea:	f7ff fe43 	bl	8004a74 <lfs_aligndown>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8004df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7ff fe4b 	bl	8004a9e <lfs_alignup>
 8004e08:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7ff fe1e 	bl	8004a54 <lfs_min>
 8004e18:	4602      	mov	r2, r0
                - rcache->off,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8004e1e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7ff fe13 	bl	8004a54 <lfs_min>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e38:	685c      	ldr	r4, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	462b      	mov	r3, r5
 8004e52:	47a0      	blx	r4
 8004e54:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd05      	ble.n	8004e68 <lfs_bd_read+0x25c>
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <lfs_bd_read+0x284>)
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <lfs_bd_read+0x27c>)
 8004e60:	2175      	movs	r1, #117	; 0x75
 8004e62:	480a      	ldr	r0, [pc, #40]	; (8004e8c <lfs_bd_read+0x280>)
 8004e64:	f00a fa52 	bl	800f30c <__assert_func>
        if (err) {
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <lfs_bd_read+0x266>
            return err;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	e004      	b.n	8004e7c <lfs_bd_read+0x270>
    while (size > 0) {
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f aee4 	bne.w	8004c42 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdb0      	pop	{r4, r5, r7, pc}
 8004e84:	08011238 	.word	0x08011238
 8004e88:	08011cc0 	.word	0x08011cc0
 8004e8c:	08011258 	.word	0x08011258
 8004e90:	08011274 	.word	0x08011274

08004e94 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08e      	sub	sp, #56	; 0x38
 8004e98:	af04      	add	r7, sp, #16
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8004eaa:	2300      	movs	r3, #0
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	e039      	b.n	8004f24 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8004eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2108      	movs	r1, #8
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fdcb 	bl	8004a54 <lfs_min>
 8004ebe:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad1      	subs	r1, r2, r3
 8004ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	4413      	add	r3, r2
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	9203      	str	r2, [sp, #12]
 8004ed0:	f107 0210 	add.w	r2, r7, #16
 8004ed4:	9202      	str	r2, [sp, #8]
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	460b      	mov	r3, r1
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fe92 	bl	8004c0c <lfs_bd_read>
 8004ee8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <lfs_bd_cmp+0x60>
            return res;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	e01c      	b.n	8004f2e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8004ef4:	6a3a      	ldr	r2, [r7, #32]
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	18d1      	adds	r1, r2, r3
 8004efa:	f107 0310 	add.w	r3, r7, #16
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f00a fa91 	bl	800f428 <memcmp>
 8004f06:	61b8      	str	r0, [r7, #24]
        if (res) {
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da01      	bge.n	8004f18 <lfs_bd_cmp+0x84>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e00a      	b.n	8004f2e <lfs_bd_cmp+0x9a>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e008      	b.n	8004f2e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3c1      	bcc.n	8004eb0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	; 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b08c      	sub	sp, #48	; 0x30
 8004f3c:	af04      	add	r7, sp, #16
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d061      	beq.n	8005014 <lfs_bd_flush+0xdc>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f113 0f02 	cmn.w	r3, #2
 8004f58:	d05c      	beq.n	8005014 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d305      	bcc.n	8004f74 <lfs_bd_flush+0x3c>
 8004f68:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <lfs_bd_flush+0xe8>)
 8004f6a:	4a2e      	ldr	r2, [pc, #184]	; (8005024 <lfs_bd_flush+0xec>)
 8004f6c:	219d      	movs	r1, #157	; 0x9d
 8004f6e:	482e      	ldr	r0, [pc, #184]	; (8005028 <lfs_bd_flush+0xf0>)
 8004f70:	f00a f9cc 	bl	800f30c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7ff fd8c 	bl	8004a9e <lfs_alignup>
 8004f86:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f8c:	689c      	ldr	r4, [r3, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	47a0      	blx	r4
 8004fa6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dd05      	ble.n	8004fba <lfs_bd_flush+0x82>
 8004fae:	4b1f      	ldr	r3, [pc, #124]	; (800502c <lfs_bd_flush+0xf4>)
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <lfs_bd_flush+0xec>)
 8004fb2:	21a1      	movs	r1, #161	; 0xa1
 8004fb4:	481c      	ldr	r0, [pc, #112]	; (8005028 <lfs_bd_flush+0xf0>)
 8004fb6:	f00a f9a9 	bl	800f30c <__assert_func>
        if (err) {
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <lfs_bd_flush+0x8c>
            return err;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	e028      	b.n	8005016 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d020      	beq.n	800500c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fdf7 	bl	8004bc0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8004fde:	69f8      	ldr	r0, [r7, #28]
 8004fe0:	9003      	str	r0, [sp, #12]
 8004fe2:	9102      	str	r1, [sp, #8]
 8004fe4:	9201      	str	r2, [sp, #4]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	2100      	movs	r1, #0
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff ff50 	bl	8004e94 <lfs_bd_cmp>
 8004ff4:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	da01      	bge.n	8005000 <lfs_bd_flush+0xc8>
                return res;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	e00a      	b.n	8005016 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8005006:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800500a:	e004      	b.n	8005016 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fde5 	bl	8004bde <lfs_cache_zero>
    }

    return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bdb0      	pop	{r4, r5, r7, pc}
 800501e:	bf00      	nop
 8005020:	08011280 	.word	0x08011280
 8005024:	08011ccc 	.word	0x08011ccc
 8005028:	08011258 	.word	0x08011258
 800502c:	08011274 	.word	0x08011274

08005030 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff fdbd 	bl	8004bc0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff ff73 	bl	8004f38 <lfs_bd_flush>
 8005052:	6178      	str	r0, [r7, #20]
    if (err) {
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <lfs_bd_sync+0x2e>
        return err;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	e011      	b.n	8005082 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005068:	4610      	mov	r0, r2
 800506a:	4798      	blx	r3
 800506c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dd05      	ble.n	8005080 <lfs_bd_sync+0x50>
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <lfs_bd_sync+0x5c>)
 8005076:	4a06      	ldr	r2, [pc, #24]	; (8005090 <lfs_bd_sync+0x60>)
 8005078:	21c7      	movs	r1, #199	; 0xc7
 800507a:	4806      	ldr	r0, [pc, #24]	; (8005094 <lfs_bd_sync+0x64>)
 800507c:	f00a f946 	bl	800f30c <__assert_func>
    return err;
 8005080:	697b      	ldr	r3, [r7, #20]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	08011274 	.word	0x08011274
 8005090:	08011cdc 	.word	0x08011cdc
 8005094:	08011258 	.word	0x08011258

08005098 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	f113 0f02 	cmn.w	r3, #2
 80050b0:	d00b      	beq.n	80050ca <lfs_bd_prog+0x32>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d305      	bcc.n	80050ca <lfs_bd_prog+0x32>
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <lfs_bd_prog+0x144>)
 80050c0:	4a47      	ldr	r2, [pc, #284]	; (80051e0 <lfs_bd_prog+0x148>)
 80050c2:	21d2      	movs	r1, #210	; 0xd2
 80050c4:	4847      	ldr	r0, [pc, #284]	; (80051e4 <lfs_bd_prog+0x14c>)
 80050c6:	f00a f921 	bl	800f30c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80050ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d977      	bls.n	80051ca <lfs_bd_prog+0x132>
 80050da:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <lfs_bd_prog+0x150>)
 80050dc:	4a40      	ldr	r2, [pc, #256]	; (80051e0 <lfs_bd_prog+0x148>)
 80050de:	21d3      	movs	r1, #211	; 0xd3
 80050e0:	4840      	ldr	r0, [pc, #256]	; (80051e4 <lfs_bd_prog+0x14c>)
 80050e2:	f00a f913 	bl	800f30c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d151      	bne.n	8005194 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80050f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d34c      	bcc.n	8005194 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	4413      	add	r3, r2
                off >= pcache->off &&
 8005106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005108:	429a      	cmp	r2, r3
 800510a:	d243      	bcs.n	8005194 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800511a:	4413      	add	r3, r2
 800511c:	4619      	mov	r1, r3
 800511e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005120:	f7ff fc98 	bl	8004a54 <lfs_min>
 8005124:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005130:	1acb      	subs	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	69f9      	ldr	r1, [r7, #28]
 8005138:	4618      	mov	r0, r3
 800513a:	f00a f984 	bl	800f446 <memcpy>

            data += diff;
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	4413      	add	r3, r2
 8005144:	61fb      	str	r3, [r7, #28]
            off += diff;
 8005146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	4413      	add	r3, r2
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800514e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6898      	ldr	r0, [r3, #8]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	4619      	mov	r1, r3
 8005164:	f7ff fc66 	bl	8004a34 <lfs_max>
 8005168:	4602      	mov	r2, r0
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	429a      	cmp	r2, r3
 800517a:	d126      	bne.n	80051ca <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fed8 	bl	8004f38 <lfs_bd_flush>
 8005188:	6178      	str	r0, [r7, #20]
                if (err) {
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01c      	beq.n	80051ca <lfs_bd_prog+0x132>
                    return err;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	e01e      	b.n	80051d2 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d005      	beq.n	80051aa <lfs_bd_prog+0x112>
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <lfs_bd_prog+0x154>)
 80051a0:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <lfs_bd_prog+0x148>)
 80051a2:	21f0      	movs	r1, #240	; 0xf0
 80051a4:	480f      	ldr	r0, [pc, #60]	; (80051e4 <lfs_bd_prog+0x14c>)
 80051a6:	f00a f8b1 	bl	800f30c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ae:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	4619      	mov	r1, r3
 80051b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ba:	f7ff fc5b 	bl	8004a74 <lfs_aligndown>
 80051be:	4602      	mov	r2, r0
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80051ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d18a      	bne.n	80050e6 <lfs_bd_prog+0x4e>
    }

    return 0;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	080112a8 	.word	0x080112a8
 80051e0:	08011ce8 	.word	0x08011ce8
 80051e4:	08011258 	.word	0x08011258
 80051e8:	080112e4 	.word	0x080112e4
 80051ec:	08011308 	.word	0x08011308

080051f0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d305      	bcc.n	8005212 <lfs_bd_erase+0x22>
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <lfs_bd_erase+0x54>)
 8005208:	4a0f      	ldr	r2, [pc, #60]	; (8005248 <lfs_bd_erase+0x58>)
 800520a:	21fe      	movs	r1, #254	; 0xfe
 800520c:	480f      	ldr	r0, [pc, #60]	; (800524c <lfs_bd_erase+0x5c>)
 800520e:	f00a f87d 	bl	800f30c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	4610      	mov	r0, r2
 8005220:	4798      	blx	r3
 8005222:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	dd06      	ble.n	8005238 <lfs_bd_erase+0x48>
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <lfs_bd_erase+0x60>)
 800522c:	4a06      	ldr	r2, [pc, #24]	; (8005248 <lfs_bd_erase+0x58>)
 800522e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005232:	4806      	ldr	r0, [pc, #24]	; (800524c <lfs_bd_erase+0x5c>)
 8005234:	f00a f86a 	bl	800f30c <__assert_func>
    return err;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	08011238 	.word	0x08011238
 8005248:	08011cf4 	.word	0x08011cf4
 800524c:	08011258 	.word	0x08011258
 8005250:	08011274 	.word	0x08011274

08005254 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d005      	beq.n	800529c <lfs_pair_isnull+0x1e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3304      	adds	r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d101      	bne.n	80052a0 <lfs_pair_isnull+0x22>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <lfs_pair_isnull+0x24>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	b2db      	uxtb	r3, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d017      	beq.n	80052fa <lfs_pair_cmp+0x46>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	3304      	adds	r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d00f      	beq.n	80052fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	3304      	adds	r3, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d008      	beq.n	80052fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d001      	beq.n	80052fa <lfs_pair_cmp+0x46>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <lfs_pair_cmp+0x48>
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d107      	bne.n	800532e <lfs_pair_sync+0x26>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	3304      	adds	r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d00d      	beq.n	800534a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d108      	bne.n	800534e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d101      	bne.n	800534e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <lfs_pair_sync+0x48>
 800534e:	2300      	movs	r3, #0
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	b2db      	uxtb	r3, r3
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8005362:	b590      	push	{r4, r7, lr}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fbe0 	bl	8004b34 <lfs_fromle32>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1d1c      	adds	r4, r3, #4
 8005384:	4610      	mov	r0, r2
 8005386:	f7ff fbd5 	bl	8004b34 <lfs_fromle32>
 800538a:	4603      	mov	r3, r0
 800538c:	6023      	str	r3, [r4, #0]
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}

08005396 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8005396:	b590      	push	{r4, r7, lr}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fbd1 	bl	8004b4a <lfs_tole32>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1d1c      	adds	r4, r3, #4
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7ff fbc6 	bl	8004b4a <lfs_tole32>
 80053be:	4603      	mov	r3, r0
 80053c0:	6023      	str	r3, [r4, #0]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd90      	pop	{r4, r7, pc}

080053ca <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	0fdb      	lsrs	r3, r3, #31
 80053d8:	b2db      	uxtb	r3, r3
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	059b      	lsls	r3, r3, #22
 80053f2:	159b      	asrs	r3, r3, #22
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	0d1b      	lsrs	r3, r3, #20
 8005418:	b29b      	uxth	r3, r3
 800541a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800541e:	b29b      	uxth	r3, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	0d1b      	lsrs	r3, r3, #20
 8005438:	b29b      	uxth	r3, r3
 800543a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543e:	b29b      	uxth	r3, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	0d1b      	lsrs	r3, r3, #20
 8005458:	b2db      	uxtb	r3, r3
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ffec 	bl	800544c <lfs_tag_chunk>
 8005474:	4603      	mov	r3, r0
 8005476:	b25b      	sxtb	r3, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	0a9b      	lsrs	r3, r3, #10
 800548c:	b29b      	uxth	r3, r3
 800548e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005492:	b29b      	uxth	r3, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff8f 	bl	80053e6 <lfs_tag_isdelete>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff ffe5 	bl	80054a0 <lfs_tag_size>
 80054d6:	4603      	mov	r3, r0
 80054d8:	3304      	adds	r3, #4
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e012      	b.n	8005518 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	4413      	add	r3, r2
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4403      	add	r3, r0
 800550e:	404a      	eors	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b02      	cmp	r3, #2
 800551c:	dde9      	ble.n	80054f2 <lfs_gstate_xor+0x10>
    }
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e00b      	b.n	8005550 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <lfs_gstate_iszero+0x20>
            return false;
 8005546:	2300      	movs	r3, #0
 8005548:	e006      	b.n	8005558 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b02      	cmp	r3, #2
 8005554:	ddf0      	ble.n	8005538 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8005556:	2301      	movs	r3, #1
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff95 	bl	80054a0 <lfs_tag_size>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff ff82 	bl	80054a0 <lfs_tag_size>
 800559c:	4603      	mov	r3, r0
 800559e:	b2db      	uxtb	r3, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff ff29 	bl	800540c <lfs_tag_type1>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ff15 	bl	800540c <lfs_tag_type1>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <lfs_gstate_hasmovehere+0x30>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fe60 	bl	80052b4 <lfs_pair_cmp>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <lfs_gstate_hasmovehere+0x30>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <lfs_gstate_hasmovehere+0x32>
 80055fe:	2300      	movs	r3, #0
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fa8a 	bl	8004b34 <lfs_fromle32>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fa82 	bl	8004b34 <lfs_fromle32>
 8005630:	4602      	mov	r2, r0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fa7a 	bl	8004b34 <lfs_fromle32>
 8005640:	4602      	mov	r2, r0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	609a      	str	r2, [r3, #8]
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fa75 	bl	8004b4a <lfs_tole32>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fa6d 	bl	8004b4a <lfs_tole32>
 8005670:	4602      	mov	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fa65 	bl	8004b4a <lfs_tole32>
 8005680:	4602      	mov	r2, r0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fa4a 	bl	8004b34 <lfs_fromle32>
 80056a0:	4602      	mov	r2, r0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fa42 	bl	8004b34 <lfs_fromle32>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	605a      	str	r2, [r3, #4]
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fa3d 	bl	8004b4a <lfs_tole32>
 80056d0:	4602      	mov	r2, r0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fa35 	bl	8004b4a <lfs_tole32>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fa1a 	bl	8004b34 <lfs_fromle32>
 8005700:	4602      	mov	r2, r0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fa12 	bl	8004b34 <lfs_fromle32>
 8005710:	4602      	mov	r2, r0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fa0a 	bl	8004b34 <lfs_fromle32>
 8005720:	4602      	mov	r2, r0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fa02 	bl	8004b34 <lfs_fromle32>
 8005730:	4602      	mov	r2, r0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff f9fa 	bl	8004b34 <lfs_fromle32>
 8005740:	4602      	mov	r2, r0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff f9f2 	bl	8004b34 <lfs_fromle32>
 8005750:	4602      	mov	r2, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	615a      	str	r2, [r3, #20]
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff f9ed 	bl	8004b4a <lfs_tole32>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff f9e5 	bl	8004b4a <lfs_tole32>
 8005780:	4602      	mov	r2, r0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff f9dd 	bl	8004b4a <lfs_tole32>
 8005790:	4602      	mov	r2, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff f9d5 	bl	8004b4a <lfs_tole32>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff f9cd 	bl	8004b4a <lfs_tole32>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff f9c5 	bl	8004b4a <lfs_tole32>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	615a      	str	r2, [r3, #20]
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e009      	b.n	80057f2 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d101      	bne.n	80057ec <lfs_mlist_isopen+0x1e>
            return true;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e007      	b.n	80057fc <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f1      	bne.n	80057de <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3328      	adds	r3, #40	; 0x28
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	e00d      	b.n	8005836 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d105      	bne.n	8005830 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]
            break;
 800582e:	e006      	b.n	800583e <lfs_mlist_remove+0x36>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1ed      	bne.n	800581a <lfs_mlist_remove+0x12>
        }
    }
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4413      	add	r3, r2
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005890:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8005892:	fbb3 f1f2 	udiv	r1, r3, r2
 8005896:	fb02 f201 	mul.w	r2, r2, r1
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d212      	bcs.n	80058ce <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	009a      	lsls	r2, r3, #2
 80058b2:	440a      	add	r2, r1
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	f002 021f 	and.w	r2, r2, #31
 80058bc:	2001      	movs	r0, #1
 80058be:	fa00 f202 	lsl.w	r2, r0, r2
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4403      	add	r3, r0
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	661a      	str	r2, [r3, #96]	; 0x60
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffe4 	bl	80058dc <lfs_alloc_ack>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8005926:	e04f      	b.n	80059c8 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592c:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d132      	bne.n	80059c8 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4413      	add	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800596e:	6a12      	ldr	r2, [r2, #32]
 8005970:	fbb3 f1f2 	udiv	r1, r3, r2
 8005974:	fb02 f201 	mul.w	r2, r2, r1
 8005978:	1a9a      	subs	r2, r3, r2
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800597e:	e009      	b.n	8005994 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	429a      	cmp	r2, r3
 800599e:	d011      	beq.n	80059c4 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2101      	movs	r1, #1
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1dd      	bne.n	8005980 <lfs_alloc+0x64>
                }

                return 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e051      	b.n	8005a6c <lfs_alloc+0x150>
        while (lfs->free.i != lfs->free.size) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d1a9      	bne.n	8005928 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d110      	bne.n	80059fe <lfs_alloc+0xe2>
            LFS_ERROR("No more free space %"PRIu32,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	441a      	add	r2, r3
 80059e6:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <lfs_alloc+0x158>)
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	f240 2247 	movw	r2, #583	; 0x247
 80059f0:	4921      	ldr	r1, [pc, #132]	; (8005a78 <lfs_alloc+0x15c>)
 80059f2:	4822      	ldr	r0, [pc, #136]	; (8005a7c <lfs_alloc+0x160>)
 80059f4:	f00a f8aa 	bl	800fb4c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80059f8:	f06f 031b 	mvn.w	r3, #27
 80059fc:	e036      	b.n	8005a6c <lfs_alloc+0x150>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a0c:	6a12      	ldr	r2, [r2, #32]
 8005a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a12:	fb02 f201 	mul.w	r2, r2, r1
 8005a16:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	00da      	lsls	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7ff f812 	bl	8004a54 <lfs_min>
 8005a30:	4602      	mov	r2, r0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	461a      	mov	r2, r3
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f009 fd07 	bl	800f45c <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8005a4e:	2301      	movs	r3, #1
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	490b      	ldr	r1, [pc, #44]	; (8005a80 <lfs_alloc+0x164>)
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f004 ffef 	bl	800aa38 <lfs_fs_rawtraverse>
 8005a5a:	60f8      	str	r0, [r7, #12]
        if (err) {
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f43f af61 	beq.w	8005926 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff48 	bl	80058fa <lfs_alloc_drop>
            return err;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08011354 	.word	0x08011354
 8005a78:	08011258 	.word	0x08011258
 8005a7c:	0801132c 	.word	0x0801132c
 8005a80:	0800586f 	.word	0x0800586f

08005a84 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b08f      	sub	sp, #60	; 0x3c
 8005a88:	af04      	add	r7, sp, #16
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	333c      	adds	r3, #60	; 0x3c
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fd8f 	bl	80055ce <lfs_gstate_hasmovehere>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80b9 	beq.w	8005c2a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fce1 	bl	8005480 <lfs_tag_id>
 8005abe:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80b2 	beq.w	8005c2a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fcd8 	bl	8005480 <lfs_tag_id>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461c      	mov	r4, r3
 8005ad4:	6838      	ldr	r0, [r7, #0]
 8005ad6:	f7ff fcd3 	bl	8005480 <lfs_tag_id>
 8005ada:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8005adc:	429c      	cmp	r4, r3
 8005ade:	f200 80a4 	bhi.w	8005c2a <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005ae8:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005aea:	e09e      	b.n	8005c2a <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fce3 	bl	80054ba <lfs_tag_dsize>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2204      	movs	r2, #4
 8005b08:	9203      	str	r2, [sp, #12]
 8005b0a:	f107 0210 	add.w	r2, r7, #16
 8005b0e:	9202      	str	r2, [sp, #8]
 8005b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b12:	9201      	str	r2, [sp, #4]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2304      	movs	r3, #4
 8005b18:	460a      	mov	r2, r1
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff f875 	bl	8004c0c <lfs_bd_read>
 8005b22:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <lfs_dir_getslice+0xaa>
            return err;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	e089      	b.n	8005c42 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff f816 	bl	8004b62 <lfs_frombe32>
 8005b36:	4602      	mov	r2, r0
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4053      	eors	r3, r2
 8005b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fc9c 	bl	8005480 <lfs_tag_id>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02b      	beq.n	8005ba6 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005b4e:	69f8      	ldr	r0, [r7, #28]
 8005b50:	f7ff fc5c 	bl	800540c <lfs_tag_type1>
 8005b54:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8005b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5a:	d124      	bne.n	8005ba6 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8005b5c:	69f8      	ldr	r0, [r7, #28]
 8005b5e:	f7ff fc8f 	bl	8005480 <lfs_tag_id>
 8005b62:	4603      	mov	r3, r0
 8005b64:	461c      	mov	r4, r3
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff fc87 	bl	8005480 <lfs_tag_id>
 8005b72:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d816      	bhi.n	8005ba6 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	1ad2      	subs	r2, r2, r3
 8005b7e:	4b33      	ldr	r3, [pc, #204]	; (8005c4c <lfs_dir_getslice+0x1c8>)
 8005b80:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8005b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d102      	bne.n	8005b96 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8005b90:	f06f 0301 	mvn.w	r3, #1
 8005b94:	e055      	b.n	8005c42 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005b96:	69f8      	ldr	r0, [r7, #28]
 8005b98:	f7ff fc65 	bl	8005466 <lfs_tag_splice>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	029a      	lsls	r2, r3, #10
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	405a      	eors	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d138      	bne.n	8005c2a <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8005bb8:	69f8      	ldr	r0, [r7, #28]
 8005bba:	f7ff fc14 	bl	80053e6 <lfs_tag_isdelete>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8005bc4:	f06f 0301 	mvn.w	r3, #1
 8005bc8:	e03b      	b.n	8005c42 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8005bca:	69f8      	ldr	r0, [r7, #28]
 8005bcc:	f7ff fc68 	bl	80054a0 <lfs_tag_size>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe ff3d 	bl	8004a54 <lfs_min>
 8005bda:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8005be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8005be8:	3204      	adds	r2, #4
 8005bea:	6979      	ldr	r1, [r7, #20]
 8005bec:	9103      	str	r1, [sp, #12]
 8005bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf0:	9102      	str	r1, [sp, #8]
 8005bf2:	9201      	str	r2, [sp, #4]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff f805 	bl	8004c0c <lfs_bd_read>
 8005c02:	61b8      	str	r0, [r7, #24]
            if (err) {
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <lfs_dir_getslice+0x18a>
                return err;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	e019      	b.n	8005c42 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8005c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	18d0      	adds	r0, r2, r3
 8005c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	f009 fc1d 	bl	800f45c <memset>

            return tag + gdiff;
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	e00b      	b.n	8005c42 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fc44 	bl	80054ba <lfs_tag_dsize>
 8005c32:	4603      	mov	r3, r0
 8005c34:	3304      	adds	r3, #4
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	f4bf af57 	bcs.w	8005aec <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8005c3e:	f06f 0301 	mvn.w	r3, #1
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	372c      	adds	r7, #44	; 0x2c
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd90      	pop	{r4, r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	000ffc00 	.word	0x000ffc00

08005c50 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8005c5e:	6838      	ldr	r0, [r7, #0]
 8005c60:	f7ff fc1e 	bl	80054a0 <lfs_tag_size>
 8005c64:	4603      	mov	r3, r0
 8005c66:	9302      	str	r3, [sp, #8]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff ff04 	bl	8005a84 <lfs_dir_getslice>
 8005c7c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08c      	sub	sp, #48	; 0x30
 8005c8a:	af04      	add	r7, sp, #16
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8005c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	f240 80c0 	bls.w	8005e2a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8005caa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005cae:	e0c1      	b.n	8005e34 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d03f      	beq.n	8005d3a <lfs_dir_getread+0xb4>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f113 0f02 	cmn.w	r3, #2
 8005cc2:	d13a      	bne.n	8005d3a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d232      	bcs.n	8005d3a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d324      	bcc.n	8005d28 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6859      	ldr	r1, [r3, #4]
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	1acb      	subs	r3, r1, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	69b8      	ldr	r0, [r7, #24]
 8005cf0:	f7fe feb0 	bl	8004a54 <lfs_min>
 8005cf4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d00:	1acb      	subs	r3, r1, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4619      	mov	r1, r3
 8005d08:	69f8      	ldr	r0, [r7, #28]
 8005d0a:	f009 fb9c 	bl	800f446 <memcpy>

                data += diff;
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	4413      	add	r3, r2
 8005d14:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005d26:	e080      	b.n	8005e2a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	69b8      	ldr	r0, [r7, #24]
 8005d34:	f7fe fe8e 	bl	8004a54 <lfs_min>
 8005d38:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f113 0f02 	cmn.w	r3, #2
 8005d42:	d13a      	bne.n	8005dba <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8005d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d232      	bcs.n	8005dba <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d324      	bcc.n	8005da8 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	1acb      	subs	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	69b8      	ldr	r0, [r7, #24]
 8005d70:	f7fe fe70 	bl	8004a54 <lfs_min>
 8005d74:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d80:	1acb      	subs	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4619      	mov	r1, r3
 8005d88:	69f8      	ldr	r0, [r7, #28]
 8005d8a:	f009 fb5c 	bl	800f446 <memcpy>

                data += diff;
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	4413      	add	r3, r2
 8005d94:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005da6:	e040      	b.n	8005e2a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f7fe fe4e 	bl	8004a54 <lfs_min>
 8005db8:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f06f 0201 	mvn.w	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dcc:	f7fe fe52 	bl	8004a74 <lfs_aligndown>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7fe fe5a 	bl	8004a9e <lfs_alignup>
 8005dea:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f7fe fe2d 	bl	8004a54 <lfs_min>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6889      	ldr	r1, [r1, #8]
 8005e0c:	9102      	str	r1, [sp, #8]
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff fe33 	bl	8005a84 <lfs_dir_getslice>
 8005e1e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da01      	bge.n	8005e2a <lfs_dir_getread+0x1a4>
            return err;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	e004      	b.n	8005e34 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f af3f 	bne.w	8005cb0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <lfs_dir_traverse_filter+0x1e>
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <lfs_dir_traverse_filter+0xac>)
 8005e58:	e000      	b.n	8005e5c <lfs_dir_traverse_filter+0x20>
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8005e5c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	405a      	eors	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d014      	beq.n	8005e98 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fab7 	bl	80053e6 <lfs_tag_isdelete>
 8005e78:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <lfs_dir_traverse_filter+0xac>)
 8005e82:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	6819      	ldr	r1, [r3, #0]
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <lfs_dir_traverse_filter+0xb4>)
 8005e8a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005e8c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005e90:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d104      	bne.n	8005ea2 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
        return true;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e01e      	b.n	8005ee0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005ea2:	68b8      	ldr	r0, [r7, #8]
 8005ea4:	f7ff fab2 	bl	800540c <lfs_tag_type1>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eae:	d116      	bne.n	8005ede <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8005eb0:	68b8      	ldr	r0, [r7, #8]
 8005eb2:	f7ff fae5 	bl	8005480 <lfs_tag_id>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461c      	mov	r4, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fade 	bl	8005480 <lfs_tag_id>
 8005ec4:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d809      	bhi.n	8005ede <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005eca:	68b8      	ldr	r0, [r7, #8]
 8005ecc:	f7ff facb 	bl	8005466 <lfs_tag_splice>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	029a      	lsls	r2, r3, #10
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	441a      	add	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	601a      	str	r2, [r3, #0]
    }

    return false;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd90      	pop	{r4, r7, pc}
 8005ee8:	7ffffc00 	.word	0x7ffffc00
 8005eec:	700ffc00 	.word	0x700ffc00
 8005ef0:	000ffc00 	.word	0x000ffc00

08005ef4 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b0b3      	sub	sp, #204	; 0xcc
 8005ef8:	af04      	add	r7, sp, #16
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8005f08:	6838      	ldr	r0, [r7, #0]
 8005f0a:	f7ff fad6 	bl	80054ba <lfs_tag_dsize>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	441a      	add	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d237      	bcs.n	8005f8c <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8005f1c:	6838      	ldr	r0, [r7, #0]
 8005f1e:	f7ff facc 	bl	80054ba <lfs_tag_dsize>
 8005f22:	4602      	mov	r2, r0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4413      	add	r3, r2
 8005f28:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2204      	movs	r2, #4
 8005f32:	9203      	str	r2, [sp, #12]
 8005f34:	f107 021c 	add.w	r2, r7, #28
 8005f38:	9202      	str	r2, [sp, #8]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	9201      	str	r2, [sp, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2304      	movs	r3, #4
 8005f42:	460a      	mov	r2, r1
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7fe fe60 	bl	8004c0c <lfs_bd_read>
 8005f4c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8005f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <lfs_dir_traverse+0x6a>
                    return err;
 8005f58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f5c:	e3cf      	b.n	80066fe <lfs_dir_traverse+0x80a>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fdfe 	bl	8004b62 <lfs_frombe32>
 8005f66:	4602      	mov	r2, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4053      	eors	r3, r2
 8005f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	61fb      	str	r3, [r7, #28]
                disk.block = dir->pair[0];
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	617b      	str	r3, [r7, #20]
                disk.off = off+sizeof(lfs_tag_t);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]
                buffer = &disk;
 8005f7e:	f107 0314 	add.w	r3, r7, #20
 8005f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                ptag = tag;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	e01b      	b.n	8005fc4 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8005f8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	dd13      	ble.n	8005fbc <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8005f94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	61fb      	str	r3, [r7, #28]
                buffer = attrs[0].buffer;
 8005f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                attrs += 1;
 8005fa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005faa:	3308      	adds	r3, #8
 8005fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                attrcount -= 1;
 8005fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fba:	e003      	b.n	8005fc4 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                break;
 8005fc2:	e2bc      	b.n	800653e <lfs_dir_traverse+0x64a>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8005fc4:	4b85      	ldr	r3, [pc, #532]	; (80061dc <lfs_dir_traverse+0x2e8>)
 8005fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd0:	405a      	eors	r2, r3
 8005fd2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005fd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fda:	400b      	ands	r3, r1
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 82a0 	bne.w	8006524 <lfs_dir_traverse+0x630>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8005fe4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8005fe8:	f7ff fa4a 	bl	8005480 <lfs_tag_id>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80fe 	beq.w	80061f0 <lfs_dir_traverse+0x2fc>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8005ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d906      	bls.n	800600a <lfs_dir_traverse+0x116>
 8005ffc:	4b78      	ldr	r3, [pc, #480]	; (80061e0 <lfs_dir_traverse+0x2ec>)
 8005ffe:	4a79      	ldr	r2, [pc, #484]	; (80061e4 <lfs_dir_traverse+0x2f0>)
 8006000:	f240 314d 	movw	r1, #845	; 0x34d
 8006004:	4878      	ldr	r0, [pc, #480]	; (80061e8 <lfs_dir_traverse+0x2f4>)
 8006006:	f009 f981 	bl	800f30c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800600a:	69f9      	ldr	r1, [r7, #28]
 800600c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800601c:	4413      	add	r3, r2
 800601e:	3b98      	subs	r3, #152	; 0x98
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006034:	4413      	add	r3, r2
 8006036:	3b94      	subs	r3, #148	; 0x94
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006040:	4613      	mov	r3, r2
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800604c:	4413      	add	r3, r2
 800604e:	3b90      	subs	r3, #144	; 0x90
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006058:	4613      	mov	r3, r2
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006064:	4413      	add	r3, r2
 8006066:	3b8c      	subs	r3, #140	; 0x8c
 8006068:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006072:	4613      	mov	r3, r2
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800607e:	4413      	add	r3, r2
 8006080:	3b88      	subs	r3, #136	; 0x88
 8006082:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800608c:	4613      	mov	r3, r2
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006098:	4413      	add	r3, r2
 800609a:	3b84      	subs	r3, #132	; 0x84
 800609c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80060b2:	4413      	add	r3, r2
 80060b4:	3b80      	subs	r3, #128	; 0x80
 80060b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060c0:	4613      	mov	r3, r2
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80060cc:	4413      	add	r3, r2
 80060ce:	3b7c      	subs	r3, #124	; 0x7c
 80060d0:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80060e6:	4413      	add	r3, r2
 80060e8:	3b7a      	subs	r3, #122	; 0x7a
 80060ea:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060f4:	4613      	mov	r3, r2
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	1a9b      	subs	r3, r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006100:	4413      	add	r3, r2
 8006102:	3b78      	subs	r3, #120	; 0x78
 8006104:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800610e:	4613      	mov	r3, r2
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800611a:	4413      	add	r3, r2
 800611c:	3b74      	subs	r3, #116	; 0x74
 800611e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006134:	4413      	add	r3, r2
 8006136:	3b70      	subs	r3, #112	; 0x70
 8006138:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800614e:	4413      	add	r3, r2
 8006150:	3b6c      	subs	r3, #108	; 0x6c
 8006152:	6019      	str	r1, [r3, #0]
 8006154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006164:	4413      	add	r3, r2
 8006166:	3b68      	subs	r3, #104	; 0x68
 8006168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006172:	4613      	mov	r3, r2
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800617e:	4413      	add	r3, r2
 8006180:	3b68      	subs	r3, #104	; 0x68
 8006182:	3304      	adds	r3, #4
 8006184:	f107 0214 	add.w	r2, r7, #20
 8006188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800618c:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8006190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006194:	3301      	adds	r3, #1
 8006196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                dir = dir;
                off = off;
                ptag = ptag;
                attrs = attrs;
                attrcount = attrcount;
                tmask = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                ttag = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                begin = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
                end = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
                diff = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
                cb = lfs_dir_traverse_filter;
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <lfs_dir_traverse+0x2f8>)
 80061ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                data = &stack[sp-1].tag;
 80061be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	f107 0120 	add.w	r1, r7, #32
 80061c8:	4613      	mov	r3, r2
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	3328      	adds	r3, #40	; 0x28
 80061d2:	440b      	add	r3, r1
 80061d4:	3304      	adds	r3, #4
 80061d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                continue;
 80061da:	e1aa      	b.n	8006532 <lfs_dir_traverse+0x63e>
 80061dc:	7ff00000 	.word	0x7ff00000
 80061e0:	08011358 	.word	0x08011358
 80061e4:	08011d04 	.word	0x08011d04
 80061e8:	08011258 	.word	0x08011258
 80061ec:	08005e3d 	.word	0x08005e3d
            }
        }

popped:
 80061f0:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80061f2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80061f6:	f7ff f943 	bl	8005480 <lfs_tag_id>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <lfs_dir_traverse+0x338>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f93c 	bl	8005480 <lfs_tag_id>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800620c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8006210:	4293      	cmp	r3, r2
 8006212:	f200 8189 	bhi.w	8006528 <lfs_dir_traverse+0x634>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff f931 	bl	8005480 <lfs_tag_id>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8006226:	4293      	cmp	r3, r2
 8006228:	f240 817e 	bls.w	8006528 <lfs_dir_traverse+0x634>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff f8fc 	bl	800542c <lfs_tag_type3>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	f43f ae66 	beq.w	8005f08 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f8f4 	bl	800542c <lfs_tag_type3>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	f240 1301 	movw	r3, #257	; 0x101
 800624c:	429a      	cmp	r2, r3
 800624e:	f040 80ed 	bne.w	800642c <lfs_dir_traverse+0x538>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8006252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006256:	4ab7      	ldr	r2, [pc, #732]	; (8006534 <lfs_dir_traverse+0x640>)
 8006258:	4293      	cmp	r3, r2
 800625a:	f000 8167 	beq.w	800652c <lfs_dir_traverse+0x638>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800625e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006262:	4613      	mov	r3, r2
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800626e:	4413      	add	r3, r2
 8006270:	3b98      	subs	r3, #152	; 0x98
 8006272:	4618      	mov	r0, r3
 8006274:	233c      	movs	r3, #60	; 0x3c
 8006276:	461a      	mov	r2, r3
 8006278:	2100      	movs	r1, #0
 800627a:	f009 f8ef 	bl	800f45c <memset>
 800627e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006282:	4613      	mov	r3, r2
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800628e:	4413      	add	r3, r2
 8006290:	3b98      	subs	r3, #152	; 0x98
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800629a:	4613      	mov	r3, r2
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80062a6:	4413      	add	r3, r2
 80062a8:	3b94      	subs	r3, #148	; 0x94
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062b2:	4613      	mov	r3, r2
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80062be:	4413      	add	r3, r2
 80062c0:	3b90      	subs	r3, #144	; 0x90
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062ca:	4613      	mov	r3, r2
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80062d6:	4413      	add	r3, r2
 80062d8:	3b8c      	subs	r3, #140	; 0x8c
 80062da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062e4:	4613      	mov	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80062f0:	4413      	add	r3, r2
 80062f2:	3b88      	subs	r3, #136	; 0x88
 80062f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062fe:	4613      	mov	r3, r2
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800630a:	4413      	add	r3, r2
 800630c:	3b84      	subs	r3, #132	; 0x84
 800630e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006324:	4413      	add	r3, r2
 8006326:	3b80      	subs	r3, #128	; 0x80
 8006328:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006332:	4613      	mov	r3, r2
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800633e:	4413      	add	r3, r2
 8006340:	3b7c      	subs	r3, #124	; 0x7c
 8006342:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800634c:	4613      	mov	r3, r2
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006358:	4413      	add	r3, r2
 800635a:	3b7a      	subs	r3, #122	; 0x7a
 800635c:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006366:	4613      	mov	r3, r2
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006372:	4413      	add	r3, r2
 8006374:	3b78      	subs	r3, #120	; 0x78
 8006376:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006380:	4613      	mov	r3, r2
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800638c:	4413      	add	r3, r2
 800638e:	3b74      	subs	r3, #116	; 0x74
 8006390:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800639a:	4613      	mov	r3, r2
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80063a6:	4413      	add	r3, r2
 80063a8:	3b70      	subs	r3, #112	; 0x70
 80063aa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80063ae:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80063b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            uint16_t fromid = lfs_tag_size(tag);
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff f86f 	bl	80054a0 <lfs_tag_size>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            uint16_t toid = lfs_tag_id(tag);
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff f858 	bl	8005480 <lfs_tag_id>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            dir = buffer;
 80063d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063da:	60bb      	str	r3, [r7, #8]
            off = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            attrcount = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80063f2:	4b51      	ldr	r3, [pc, #324]	; (8006538 <lfs_dir_traverse+0x644>)
 80063f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80063f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80063fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            begin = fromid;
 8006400:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006404:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
            end = fromid+1;
 8006408:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800640c:	3301      	adds	r3, #1
 800640e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
            diff = toid-fromid+diff;
 8006412:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8006416:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	b29a      	uxth	r2, r3
 800641e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8006422:	4413      	add	r3, r2
 8006424:	b29b      	uxth	r3, r3
 8006426:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 800642a:	e56d      	b.n	8005f08 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fffc 	bl	800542c <lfs_tag_type3>
 8006434:	4603      	mov	r3, r0
 8006436:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800643a:	d159      	bne.n	80064f0 <lfs_dir_traverse+0x5fc>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006442:	e04b      	b.n	80064dc <lfs_dir_traverse+0x5e8>
                const struct lfs_attr *a = buffer;
 8006444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800644c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	461a      	mov	r2, r3
 800645a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800645e:	4413      	add	r3, r2
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006466:	051c      	lsls	r4, r3, #20
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff f808 	bl	8005480 <lfs_tag_id>
 8006470:	4603      	mov	r3, r0
 8006472:	461a      	mov	r2, r3
 8006474:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	; 0xe0
 8006478:	4413      	add	r3, r2
 800647a:	029b      	lsls	r3, r3, #10
 800647c:	ea44 0103 	orr.w	r1, r4, r3
 8006480:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	461a      	mov	r2, r3
 800648e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006492:	4413      	add	r3, r2
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8006498:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	461a      	mov	r2, r3
 80064a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064aa:	4413      	add	r3, r2
 80064ac:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80064b6:	4798      	blx	r3
 80064b8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                if (res < 0) {
 80064bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da02      	bge.n	80064ca <lfs_dir_traverse+0x5d6>
                    return res;
 80064c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064c8:	e119      	b.n	80066fe <lfs_dir_traverse+0x80a>
                }

                if (res) {
 80064ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d12e      	bne.n	8006530 <lfs_dir_traverse+0x63c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80064d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d6:	3301      	adds	r3, #1
 80064d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe ffde 	bl	80054a0 <lfs_tag_size>
 80064e4:	4602      	mov	r2, r0
 80064e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d3aa      	bcc.n	8006444 <lfs_dir_traverse+0x550>
 80064ee:	e50b      	b.n	8005f08 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80064f0:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	; 0xe0
 80064f4:	029a      	lsls	r2, r3, #10
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	18d1      	adds	r1, r2, r3
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006502:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8006506:	4798      	blx	r3
 8006508:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (res < 0) {
 800650c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006510:	2b00      	cmp	r3, #0
 8006512:	da02      	bge.n	800651a <lfs_dir_traverse+0x626>
                return res;
 8006514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006518:	e0f1      	b.n	80066fe <lfs_dir_traverse+0x80a>
            }

            if (res) {
 800651a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <lfs_dir_traverse+0x648>
 8006522:	e4f1      	b.n	8005f08 <lfs_dir_traverse+0x14>
                continue;
 8006524:	bf00      	nop
 8006526:	e4ef      	b.n	8005f08 <lfs_dir_traverse+0x14>
            continue;
 8006528:	bf00      	nop
 800652a:	e4ed      	b.n	8005f08 <lfs_dir_traverse+0x14>
                continue;
 800652c:	bf00      	nop
 800652e:	e4eb      	b.n	8005f08 <lfs_dir_traverse+0x14>
                    break;
 8006530:	bf00      	nop
        {
 8006532:	e4e9      	b.n	8005f08 <lfs_dir_traverse+0x14>
 8006534:	08005e3d 	.word	0x08005e3d
 8006538:	600ffc00 	.word	0x600ffc00
                break;
 800653c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800653e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80d9 	beq.w	80066fa <lfs_dir_traverse+0x806>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8006548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800654c:	1e5a      	subs	r2, r3, #1
 800654e:	4613      	mov	r3, r2
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800655a:	4413      	add	r3, r2
 800655c:	3b98      	subs	r3, #152	; 0x98
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8006562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006566:	1e5a      	subs	r2, r3, #1
 8006568:	4613      	mov	r3, r2
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006574:	4413      	add	r3, r2
 8006576:	3b94      	subs	r3, #148	; 0x94
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800657c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	4613      	mov	r3, r2
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800658e:	4413      	add	r3, r2
 8006590:	3b90      	subs	r3, #144	; 0x90
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8006596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800659a:	1e5a      	subs	r2, r3, #1
 800659c:	4613      	mov	r3, r2
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80065a8:	4413      	add	r3, r2
 80065aa:	3b8c      	subs	r3, #140	; 0x8c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        attrcount   = stack[sp-1].attrcount;
 80065b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065b6:	1e5a      	subs	r2, r3, #1
 80065b8:	4613      	mov	r3, r2
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80065c4:	4413      	add	r3, r2
 80065c6:	3b88      	subs	r3, #136	; 0x88
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        tmask       = stack[sp-1].tmask;
 80065ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065d2:	1e5a      	subs	r2, r3, #1
 80065d4:	4613      	mov	r3, r2
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80065e0:	4413      	add	r3, r2
 80065e2:	3b84      	subs	r3, #132	; 0x84
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        ttag        = stack[sp-1].ttag;
 80065ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065ee:	1e5a      	subs	r2, r3, #1
 80065f0:	4613      	mov	r3, r2
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80065fc:	4413      	add	r3, r2
 80065fe:	3b80      	subs	r3, #128	; 0x80
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        begin       = stack[sp-1].begin;
 8006606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800660a:	1e5a      	subs	r2, r3, #1
 800660c:	4613      	mov	r3, r2
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006618:	4413      	add	r3, r2
 800661a:	3b7c      	subs	r3, #124	; 0x7c
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        end         = stack[sp-1].end;
 8006622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	4613      	mov	r3, r2
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006634:	4413      	add	r3, r2
 8006636:	3b7a      	subs	r3, #122	; 0x7a
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
        diff        = stack[sp-1].diff;
 800663e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006642:	1e5a      	subs	r2, r3, #1
 8006644:	4613      	mov	r3, r2
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006650:	4413      	add	r3, r2
 8006652:	3b78      	subs	r3, #120	; 0x78
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
        cb          = stack[sp-1].cb;
 800665a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	4613      	mov	r3, r2
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800666c:	4413      	add	r3, r2
 800666e:	3b74      	subs	r3, #116	; 0x74
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        data        = stack[sp-1].data;
 8006676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800667a:	1e5a      	subs	r2, r3, #1
 800667c:	4613      	mov	r3, r2
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006688:	4413      	add	r3, r2
 800668a:	3b70      	subs	r3, #112	; 0x70
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        tag         = stack[sp-1].tag;
 8006692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006696:	1e5a      	subs	r2, r3, #1
 8006698:	4613      	mov	r3, r2
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80066a4:	4413      	add	r3, r2
 80066a6:	3b6c      	subs	r3, #108	; 0x6c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	61fb      	str	r3, [r7, #28]
        buffer      = stack[sp-1].buffer;
 80066ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80066be:	4413      	add	r3, r2
 80066c0:	3b68      	subs	r3, #104	; 0x68
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        disk        = stack[sp-1].disk;
 80066c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066cc:	1e5a      	subs	r2, r3, #1
 80066ce:	4613      	mov	r3, r2
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80066da:	4413      	add	r3, r2
 80066dc:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	3204      	adds	r2, #4
 80066e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ea:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80066ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066f2:	3b01      	subs	r3, #1
 80066f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        goto popped;
 80066f8:	e57b      	b.n	80061f2 <lfs_dir_traverse+0x2fe>
    } else {
        return res;
 80066fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	37bc      	adds	r7, #188	; 0xbc
 8006702:	46bd      	mov	sp, r7
 8006704:	bd90      	pop	{r4, r7, pc}
 8006706:	bf00      	nop

08006708 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b09f      	sub	sp, #124	; 0x7c
 800670c:	af04      	add	r7, sp, #16
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	429a      	cmp	r2, r3
 8006728:	d207      	bcs.n	800673a <lfs_dir_fetchmatch+0x32>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800673a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800673e:	e346      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8006740:	2300      	movs	r3, #0
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
 8006744:	2300      	movs	r3, #0
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
    int r = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800674c:	2300      	movs	r3, #0
 800674e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006750:	e056      	b.n	8006800 <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 8006752:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800675c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800675e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006764:	0092      	lsls	r2, r2, #2
 8006766:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8006768:	2104      	movs	r1, #4
 800676a:	9103      	str	r1, [sp, #12]
 800676c:	9202      	str	r2, [sp, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	9201      	str	r2, [sp, #4]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	2304      	movs	r3, #4
 8006776:	4602      	mov	r2, r0
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7fe fa46 	bl	8004c0c <lfs_bd_read>
 8006780:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8006782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800678a:	4413      	add	r3, r2
 800678c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe f9cf 	bl	8004b34 <lfs_fromle32>
 8006796:	4602      	mov	r2, r0
 8006798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80067a0:	440b      	add	r3, r1
 80067a2:	f843 2c40 	str.w	r2, [r3, #-64]
        if (err && err != LFS_ERR_CORRUPT) {
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <lfs_dir_fetchmatch+0xb0>
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80067b2:	d001      	beq.n	80067b8 <lfs_dir_fetchmatch+0xb0>
            return err;
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	e30a      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
        }

        if (err != LFS_ERR_CORRUPT &&
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80067be:	d01c      	beq.n	80067fa <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80067c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80067c8:	4413      	add	r3, r2
 80067ca:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80067ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d0:	3301      	adds	r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	bfb8      	it	lt
 80067da:	425b      	neglt	r3, r3
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80067e2:	440b      	add	r3, r1
 80067e4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fe f994 	bl	8004b18 <lfs_scmp>
 80067f0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dd01      	ble.n	80067fa <lfs_dir_fetchmatch+0xf2>
            r = i;
 80067f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f8:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80067fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fc:	3301      	adds	r3, #1
 80067fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006802:	2b01      	cmp	r3, #1
 8006804:	dda5      	ble.n	8006752 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8006806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006808:	2b00      	cmp	r3, #0
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	bfb8      	it	lt
 8006810:	425b      	neglt	r3, r3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4413      	add	r3, r2
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	3301      	adds	r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	bfb8      	it	lt
 800682a:	425b      	neglt	r3, r3
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8006838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683a:	2b00      	cmp	r3, #0
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	bfb8      	it	lt
 8006842:	425b      	neglt	r3, r3
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800684a:	4413      	add	r3, r2
 800684c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2200      	movs	r2, #0
 8006858:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800685a:	2300      	movs	r3, #0
 800685c:	65bb      	str	r3, [r7, #88]	; 0x58
 800685e:	e2a2      	b.n	8006da6 <lfs_dir_fetchmatch+0x69e>
        lfs_off_t off = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8006864:	f04f 33ff 	mov.w	r3, #4294967295
 8006868:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006870:	4aad      	ldr	r2, [pc, #692]	; (8006b28 <lfs_dir_fetchmatch+0x420>)
 8006872:	f107 0320 	add.w	r3, r7, #32
 8006876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800687a:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800687e:	2300      	movs	r3, #0
 8006880:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8006884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006886:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe f95c 	bl	8004b4a <lfs_tole32>
 8006892:	4602      	mov	r2, r0
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	3308      	adds	r3, #8
 800689c:	2204      	movs	r2, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	f005 f842 	bl	800b92c <lfs_crc>
 80068a8:	4603      	mov	r3, r0
 80068aa:	61fb      	str	r3, [r7, #28]
        dir->rev = lfs_fromle32(dir->rev);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f93f 	bl	8004b34 <lfs_fromle32>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80068bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068be:	f7fe fdfc 	bl	80054ba <lfs_tag_dsize>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c6:	4413      	add	r3, r2
 80068c8:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80068ca:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80068d0:	69d8      	ldr	r0, [r3, #28]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2204      	movs	r2, #4
 80068d8:	9203      	str	r2, [sp, #12]
 80068da:	f107 0218 	add.w	r2, r7, #24
 80068de:	9202      	str	r2, [sp, #8]
 80068e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068e2:	9201      	str	r2, [sp, #4]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	4603      	mov	r3, r0
 80068e8:	460a      	mov	r2, r1
 80068ea:	2100      	movs	r1, #0
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7fe f98d 	bl	8004c0c <lfs_bd_read>
 80068f2:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80068f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <lfs_dir_fetchmatch+0x206>
                if (err == LFS_ERR_CORRUPT) {
 80068fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006900:	d103      	bne.n	800690a <lfs_dir_fetchmatch+0x202>
                    // can't continue?
                    dir->erased = false;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	759a      	strb	r2, [r3, #22]
                    break;
 8006908:	e1d4      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
                }
                return err;
 800690a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690c:	e25f      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f107 0118 	add.w	r1, r7, #24
 8006914:	2204      	movs	r2, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f005 f808 	bl	800b92c <lfs_crc>
 800691c:	4603      	mov	r3, r0
 800691e:	61fb      	str	r3, [r7, #28]
            tag = lfs_frombe32(tag) ^ ptag;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe f91d 	bl	8004b62 <lfs_frombe32>
 8006928:	4602      	mov	r2, r0
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	4053      	eors	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fd49 	bl	80053ca <lfs_tag_isvalid>
 8006938:	4603      	mov	r3, r0
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01b      	beq.n	800697c <lfs_dir_fetchmatch+0x274>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8006944:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006946:	f7fe fd61 	bl	800540c <lfs_tag_type1>
 800694a:	4603      	mov	r3, r0
 800694c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006950:	d10d      	bne.n	800696e <lfs_dir_fetchmatch+0x266>
                        dir->off % lfs->cfg->prog_size == 0);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800695a:	6992      	ldr	r2, [r2, #24]
 800695c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006960:	fb02 f201 	mul.w	r2, r2, r1
 8006964:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <lfs_dir_fetchmatch+0x266>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <lfs_dir_fetchmatch+0x268>
 800696e:	2300      	movs	r3, #0
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	759a      	strb	r2, [r3, #22]
                break;
 800697a:	e19b      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe fd9b 	bl	80054ba <lfs_tag_dsize>
 8006984:	4602      	mov	r2, r0
 8006986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	429a      	cmp	r2, r3
 8006992:	d903      	bls.n	800699c <lfs_dir_fetchmatch+0x294>
                dir->erased = false;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2200      	movs	r2, #0
 8006998:	759a      	strb	r2, [r3, #22]
                break;
 800699a:	e18b      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
            }

            ptag = tag;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fd32 	bl	800540c <lfs_tag_type1>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80069ae:	d165      	bne.n	8006a7c <lfs_dir_fetchmatch+0x374>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80069b0:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80069b6:	69dc      	ldr	r4, [r3, #28]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069be:	3204      	adds	r2, #4
 80069c0:	2104      	movs	r1, #4
 80069c2:	9103      	str	r1, [sp, #12]
 80069c4:	f107 0114 	add.w	r1, r7, #20
 80069c8:	9102      	str	r1, [sp, #8]
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4623      	mov	r3, r4
 80069d0:	4602      	mov	r2, r0
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7fe f919 	bl	8004c0c <lfs_bd_read>
 80069da:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <lfs_dir_fetchmatch+0x2ee>
                    if (err == LFS_ERR_CORRUPT) {
 80069e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80069e8:	d103      	bne.n	80069f2 <lfs_dir_fetchmatch+0x2ea>
                        dir->erased = false;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	759a      	strb	r2, [r3, #22]
                        break;
 80069f0:	e160      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
                    }
                    return err;
 80069f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80069f4:	e1eb      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
                }
                dcrc = lfs_fromle32(dcrc);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe f89b 	bl	8004b34 <lfs_fromle32>
 80069fe:	4603      	mov	r3, r0
 8006a00:	617b      	str	r3, [r7, #20]

                if (crc != dcrc) {
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d004      	beq.n	8006a14 <lfs_dir_fetchmatch+0x30c>
                    dir->erased = false;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	759a      	strb	r2, [r3, #22]
                    break;
 8006a10:	bf00      	nop
 8006a12:	e14f      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fd18 	bl	800544c <lfs_tag_chunk>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	07db      	lsls	r3, r3, #31
 8006a20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a22:	4053      	eors	r3, r2
 8006a24:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	f107 011c 	add.w	r1, r7, #28
 8006a2e:	2204      	movs	r2, #4
 8006a30:	4618      	mov	r0, r3
 8006a32:	f004 ff7b 	bl	800b92c <lfs_crc>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8006a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3e:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fd39 	bl	80054ba <lfs_tag_dsize>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4c:	441a      	add	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a56:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006a5e:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8006a60:	6a3a      	ldr	r2, [r7, #32]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006a72:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e71f      	b.n	80068bc <lfs_dir_fetchmatch+0x1b4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a80:	e02f      	b.n	8006ae2 <lfs_dir_fetchmatch+0x3da>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8006a82:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006a88:	69dc      	ldr	r4, [r3, #28]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a92:	440a      	add	r2, r1
 8006a94:	2101      	movs	r1, #1
 8006a96:	9103      	str	r1, [sp, #12]
 8006a98:	f107 0113 	add.w	r1, r7, #19
 8006a9c:	9102      	str	r1, [sp, #8]
 8006a9e:	9201      	str	r2, [sp, #4]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7fe f8af 	bl	8004c0c <lfs_bd_read>
 8006aae:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <lfs_dir_fetchmatch+0x3c2>
                    if (err == LFS_ERR_CORRUPT) {
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006abc:	d103      	bne.n	8006ac6 <lfs_dir_fetchmatch+0x3be>
                        dir->erased = false;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	759a      	strb	r2, [r3, #22]
 8006ac4:	e015      	b.n	8006af2 <lfs_dir_fetchmatch+0x3ea>
                        break;
                    }
                    return err;
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8006ac8:	e181      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
                }

                crc = lfs_crc(crc, &dat, 1);
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f107 0113 	add.w	r1, r7, #19
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f004 ff2a 	bl	800b92c <lfs_crc>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	61fb      	str	r3, [r7, #28]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ade:	3301      	adds	r3, #1
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fce8 	bl	80054ba <lfs_tag_dsize>
 8006aea:	4602      	mov	r2, r0
 8006aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d3c7      	bcc.n	8006a82 <lfs_dir_fetchmatch+0x37a>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fc89 	bl	800540c <lfs_tag_type1>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d115      	bne.n	8006b2c <lfs_dir_fetchmatch+0x424>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fcbc 	bl	8005480 <lfs_tag_id>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f200 8083 	bhi.w	8006c1c <lfs_dir_fetchmatch+0x514>
                    tempcount = lfs_tag_id(tag) + 1;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fcb1 	bl	8005480 <lfs_tag_id>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	3301      	adds	r3, #1
 8006b22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006b26:	e079      	b.n	8006c1c <lfs_dir_fetchmatch+0x514>
 8006b28:	08011398 	.word	0x08011398
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fc6c 	bl	800540c <lfs_tag_type1>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3a:	d134      	bne.n	8006ba6 <lfs_dir_fetchmatch+0x49e>
                tempcount += lfs_tag_splice(tag);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fc91 	bl	8005466 <lfs_tag_splice>
 8006b44:	4603      	mov	r3, r0
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8006b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b54:	4ba0      	ldr	r3, [pc, #640]	; (8006dd8 <lfs_dir_fetchmatch+0x6d0>)
 8006b56:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8006b58:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006b5c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d104      	bne.n	8006b70 <lfs_dir_fetchmatch+0x468>
                    tempbesttag |= 0x80000000;
 8006b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b6e:	e055      	b.n	8006c1c <lfs_dir_fetchmatch+0x514>
                } else if (tempbesttag != -1 &&
 8006b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d051      	beq.n	8006c1c <lfs_dir_fetchmatch+0x514>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fc80 	bl	8005480 <lfs_tag_id>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461c      	mov	r4, r3
 8006b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fc7a 	bl	8005480 <lfs_tag_id>
 8006b8c:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d844      	bhi.n	8006c1c <lfs_dir_fetchmatch+0x514>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fc66 	bl	8005466 <lfs_tag_splice>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	029a      	lsls	r2, r3, #10
 8006b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba0:	4413      	add	r3, r2
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba4:	e03a      	b.n	8006c1c <lfs_dir_fetchmatch+0x514>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe fc2f 	bl	800540c <lfs_tag_type1>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006bb4:	d132      	bne.n	8006c1c <lfs_dir_fetchmatch+0x514>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fc47 	bl	800544c <lfs_tag_chunk>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8006bd0:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006bd6:	69dc      	ldr	r4, [r3, #28]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bde:	3204      	adds	r2, #4
 8006be0:	2108      	movs	r1, #8
 8006be2:	9103      	str	r1, [sp, #12]
 8006be4:	f107 0120 	add.w	r1, r7, #32
 8006be8:	9102      	str	r1, [sp, #8]
 8006bea:	9201      	str	r2, [sp, #4]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4623      	mov	r3, r4
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7fe f809 	bl	8004c0c <lfs_bd_read>
 8006bfa:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <lfs_dir_fetchmatch+0x50a>
                    if (err == LFS_ERR_CORRUPT) {
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c08:	d103      	bne.n	8006c12 <lfs_dir_fetchmatch+0x50a>
                        dir->erased = false;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	759a      	strb	r2, [r3, #22]
                        break;
 8006c10:	e050      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
                    }
                }
                lfs_pair_fromle32(temptail);
 8006c12:	f107 0320 	add.w	r3, r7, #32
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fba3 	bl	8005362 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c20:	405a      	eors	r2, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f47f ae48 	bne.w	80068bc <lfs_dir_fetchmatch+0x1b4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006c2c:	69b9      	ldr	r1, [r7, #24]
                        dir->pair[0], off+sizeof(tag)});
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006c32:	633b      	str	r3, [r7, #48]	; 0x30
                        dir->pair[0], off+sizeof(tag)});
 8006c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c36:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c42:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006c46:	4798      	blx	r3
 8006c48:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da09      	bge.n	8006c64 <lfs_dir_fetchmatch+0x55c>
                    if (res == LFS_ERR_CORRUPT) {
 8006c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c52:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c56:	d103      	bne.n	8006c60 <lfs_dir_fetchmatch+0x558>
                        dir->erased = false;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	759a      	strb	r2, [r3, #22]
                        break;
 8006c5e:	e029      	b.n	8006cb4 <lfs_dir_fetchmatch+0x5ac>
                    }
                    return res;
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	e0b4      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
                }

                if (res == LFS_CMP_EQ) {
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <lfs_dir_fetchmatch+0x568>
                    // found a match
                    tempbesttag = tag;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6e:	e625      	b.n	80068bc <lfs_dir_fetchmatch+0x1b4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c74:	405a      	eors	r2, r3
 8006c76:	4b59      	ldr	r3, [pc, #356]	; (8006ddc <lfs_dir_fetchmatch+0x6d4>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <lfs_dir_fetchmatch+0x57e>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c84:	e61a      	b.n	80068bc <lfs_dir_fetchmatch+0x1b4>
                } else if (res == LFS_CMP_GT &&
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	f47f ae17 	bne.w	80068bc <lfs_dir_fetchmatch+0x1b4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fbf5 	bl	8005480 <lfs_tag_id>
 8006c96:	4603      	mov	r3, r0
 8006c98:	461c      	mov	r4, r3
 8006c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fbef 	bl	8005480 <lfs_tag_id>
 8006ca2:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8006ca4:	429c      	cmp	r4, r3
 8006ca6:	f63f ae09 	bhi.w	80068bc <lfs_dir_fetchmatch+0x1b4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cb2:	e603      	b.n	80068bc <lfs_dir_fetchmatch+0x1b4>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d100      	bne.n	8006cbe <lfs_dir_fetchmatch+0x5b6>
 8006cbc:	e05d      	b.n	8006d7a <lfs_dir_fetchmatch+0x672>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	333c      	adds	r3, #60	; 0x3c
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fc81 	bl	80055ce <lfs_gstate_hasmovehere>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d028      	beq.n	8006d24 <lfs_dir_fetchmatch+0x61c>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fbd2 	bl	8005480 <lfs_tag_id>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461c      	mov	r4, r3
 8006ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fbcc 	bl	8005480 <lfs_tag_id>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d104      	bne.n	8006cf8 <lfs_dir_fetchmatch+0x5f0>
                    besttag |= 0x80000000;
 8006cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8006cf6:	e015      	b.n	8006d24 <lfs_dir_fetchmatch+0x61c>
                } else if (besttag != -1 &&
 8006cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d011      	beq.n	8006d24 <lfs_dir_fetchmatch+0x61c>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe fbbb 	bl	8005480 <lfs_tag_id>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461c      	mov	r4, r3
 8006d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fbb5 	bl	8005480 <lfs_tag_id>
 8006d16:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d203      	bcs.n	8006d24 <lfs_dir_fetchmatch+0x61c>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8006d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006d22:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8006d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <lfs_dir_fetchmatch+0x642>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8006d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fba7 	bl	8005480 <lfs_tag_id>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	8a9b      	ldrh	r3, [r3, #20]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7fd fe89 	bl	8004a54 <lfs_min>
 8006d42:	4603      	mov	r3, r0
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d48:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8006d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe fb3c 	bl	80053ca <lfs_tag_isvalid>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <lfs_dir_fetchmatch+0x654>
                return besttag;
 8006d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d5a:	e038      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8006d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fb8e 	bl	8005480 <lfs_tag_id>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	8a9b      	ldrh	r3, [r3, #20]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d202      	bcs.n	8006d76 <lfs_dir_fetchmatch+0x66e>
                return LFS_ERR_NOENT;
 8006d70:	f06f 0301 	mvn.w	r3, #1
 8006d74:	e02b      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
            } else {
                return 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e029      	b.n	8006dce <lfs_dir_fetchmatch+0x6c6>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fa69 	bl	8005254 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8006d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d84:	3301      	adds	r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	bfb8      	it	lt
 8006d8e:	425b      	neglt	r3, r3
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006d96:	4413      	add	r3, r2
 8006d98:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8006da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da2:	3301      	adds	r3, #1
 8006da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	f77f ad59 	ble.w	8006860 <lfs_dir_fetchmatch+0x158>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6819      	ldr	r1, [r3, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4a0a      	ldr	r2, [pc, #40]	; (8006de0 <lfs_dir_fetchmatch+0x6d8>)
 8006db8:	9201      	str	r2, [sp, #4]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8006dc2:	4908      	ldr	r1, [pc, #32]	; (8006de4 <lfs_dir_fetchmatch+0x6dc>)
 8006dc4:	4808      	ldr	r0, [pc, #32]	; (8006de8 <lfs_dir_fetchmatch+0x6e0>)
 8006dc6:	f008 fec1 	bl	800fb4c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8006dca:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	376c      	adds	r7, #108	; 0x6c
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd90      	pop	{r4, r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	000ffc00 	.word	0x000ffc00
 8006ddc:	7ffffc00 	.word	0x7ffffc00
 8006de0:	08011354 	.word	0x08011354
 8006de4:	08011258 	.word	0x08011258
 8006de8:	08011360 	.word	0x08011360

08006dec <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af04      	add	r7, sp, #16
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9303      	str	r3, [sp, #12]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	2300      	movs	r3, #0
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff fc78 	bl	8006708 <lfs_dir_fetchmatch>
 8006e18:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08a      	sub	sp, #40	; 0x28
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8006e30:	f107 0310 	add.w	r3, r7, #16
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <lfs_dir_getgstate+0x5c>)
 8006e38:	4a12      	ldr	r2, [pc, #72]	; (8006e84 <lfs_dir_getgstate+0x60>)
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7fe ff07 	bl	8005c50 <lfs_dir_get>
 8006e42:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da05      	bge.n	8006e56 <lfs_dir_getgstate+0x32>
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f113 0f02 	cmn.w	r3, #2
 8006e50:	d001      	beq.n	8006e56 <lfs_dir_getgstate+0x32>
        return res;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	e00f      	b.n	8006e76 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f113 0f02 	cmn.w	r3, #2
 8006e5c:	d00a      	beq.n	8006e74 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8006e5e:	f107 0310 	add.w	r3, r7, #16
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fbd3 	bl	800560e <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fe fb37 	bl	80054e2 <lfs_gstate_xor>
    }

    return 0;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	7ff0000c 	.word	0x7ff0000c
 8006e84:	7ff00000 	.word	0x7ff00000

08006e88 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d10b      	bne.n	8006eba <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	4932      	ldr	r1, [pc, #200]	; (8006f70 <lfs_dir_getinfo+0xe8>)
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	460b      	mov	r3, r1
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	701a      	strb	r2, [r3, #0]
        return 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e055      	b.n	8006f66 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	029a      	lsls	r2, r3, #10
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec2:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8006ec4:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	4a29      	ldr	r2, [pc, #164]	; (8006f74 <lfs_dir_getinfo+0xec>)
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7fe febc 	bl	8005c50 <lfs_dir_get>
 8006ed8:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da01      	bge.n	8006ee4 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	e040      	b.n	8006f66 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe faa0 	bl	800542c <lfs_tag_type3>
 8006eec:	4603      	mov	r3, r0
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006ef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006efc:	f043 0308 	orr.w	r3, r3, #8
 8006f00:	f107 0214 	add.w	r2, r7, #20
 8006f04:	9200      	str	r2, [sp, #0]
 8006f06:	4a1c      	ldr	r2, [pc, #112]	; (8006f78 <lfs_dir_getinfo+0xf0>)
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7fe fea0 	bl	8005c50 <lfs_dir_get>
 8006f10:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da01      	bge.n	8006f1c <lfs_dir_getinfo+0x94>
        return (int)tag;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	e024      	b.n	8006f66 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe fbb4 	bl	800568e <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fa7f 	bl	800542c <lfs_tag_type3>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	f240 2302 	movw	r3, #514	; 0x202
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d103      	bne.n	8006f42 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	e010      	b.n	8006f64 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fa71 	bl	800542c <lfs_tag_type3>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f240 2301 	movw	r3, #513	; 0x201
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d106      	bne.n	8006f64 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe faa1 	bl	80054a0 <lfs_tag_size>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3720      	adds	r7, #32
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	080113a0 	.word	0x080113a0
 8006f74:	780ffc00 	.word	0x780ffc00
 8006f78:	700ffc00 	.word	0x700ffc00

08006f7c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b08f      	sub	sp, #60	; 0x3c
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	689c      	ldr	r4, [r3, #8]
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	f7fe fa80 	bl	80054a0 <lfs_tag_size>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7fd fd55 	bl	8004a54 <lfs_min>
 8006faa:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8006fac:	6a3c      	ldr	r4, [r7, #32]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fb8:	6849      	ldr	r1, [r1, #4]
 8006fba:	69b8      	ldr	r0, [r7, #24]
 8006fbc:	9003      	str	r0, [sp, #12]
 8006fbe:	9102      	str	r1, [sp, #8]
 8006fc0:	9201      	str	r2, [sp, #4]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	4622      	mov	r2, r4
 8006fc8:	2100      	movs	r1, #0
 8006fca:	6a38      	ldr	r0, [r7, #32]
 8006fcc:	f7fd ff62 	bl	8004e94 <lfs_bd_cmp>
 8006fd0:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <lfs_dir_find_match+0x60>
        return res;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	e014      	b.n	8007006 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	689c      	ldr	r4, [r3, #8]
 8006fe0:	68b8      	ldr	r0, [r7, #8]
 8006fe2:	f7fe fa5d 	bl	80054a0 <lfs_tag_size>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d00b      	beq.n	8007004 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	689c      	ldr	r4, [r3, #8]
 8006ff0:	68b8      	ldr	r0, [r7, #8]
 8006ff2:	f7fe fa55 	bl	80054a0 <lfs_tag_size>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	d201      	bcs.n	8007000 <lfs_dir_find_match+0x84>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e002      	b.n	8007006 <lfs_dir_find_match+0x8a>
 8007000:	2302      	movs	r3, #2
 8007002:	e000      	b.n	8007006 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	372c      	adds	r7, #44	; 0x2c
 800700a:	46bd      	mov	sp, r7
 800700c:	bd90      	pop	{r4, r7, pc}
	...

08007010 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b093      	sub	sp, #76	; 0x4c
 8007014:	af04      	add	r7, sp, #16
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007030:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8007032:	4b6f      	ldr	r3, [pc, #444]	; (80071f0 <lfs_dir_find+0x1e0>)
 8007034:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8007046:	496b      	ldr	r1, [pc, #428]	; (80071f4 <lfs_dir_find+0x1e4>)
 8007048:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800704a:	f008 fdfa 	bl	800fc42 <strspn>
 800704e:	4602      	mov	r2, r0
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	4413      	add	r3, r2
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8007056:	4967      	ldr	r1, [pc, #412]	; (80071f4 <lfs_dir_find+0x1e4>)
 8007058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800705a:	f008 fde0 	bl	800fc1e <strcspn>
 800705e:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	2b01      	cmp	r3, #1
 8007064:	d105      	bne.n	8007072 <lfs_dir_find+0x62>
 8007066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007068:	781a      	ldrb	r2, [r3, #0]
 800706a:	4b63      	ldr	r3, [pc, #396]	; (80071f8 <lfs_dir_find+0x1e8>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d00a      	beq.n	8007088 <lfs_dir_find+0x78>
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	2b02      	cmp	r3, #2
 8007076:	d10c      	bne.n	8007092 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8007078:	2202      	movs	r2, #2
 800707a:	4960      	ldr	r1, [pc, #384]	; (80071fc <lfs_dir_find+0x1ec>)
 800707c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800707e:	f008 f9d3 	bl	800f428 <memcmp>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <lfs_dir_find+0x82>
            name += namelen;
 8007088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	4413      	add	r3, r2
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8007090:	e7d9      	b.n	8007046 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8007092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	4413      	add	r3, r2
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800709a:	2301      	movs	r3, #1
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800709e:	4955      	ldr	r1, [pc, #340]	; (80071f4 <lfs_dir_find+0x1e4>)
 80070a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a2:	f008 fdce 	bl	800fc42 <strspn>
 80070a6:	4602      	mov	r2, r0
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	4413      	add	r3, r2
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 80070ae:	4951      	ldr	r1, [pc, #324]	; (80071f4 <lfs_dir_find+0x1e4>)
 80070b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b2:	f008 fdb4 	bl	800fc1e <strcspn>
 80070b6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01d      	beq.n	80070fa <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d112      	bne.n	80070ea <lfs_dir_find+0xda>
 80070c4:	2202      	movs	r2, #2
 80070c6:	494d      	ldr	r1, [pc, #308]	; (80071fc <lfs_dir_find+0x1ec>)
 80070c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ca:	f008 f9ad 	bl	800f428 <memcmp>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <lfs_dir_find+0xda>
                depth -= 1;
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d107      	bne.n	80070f0 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80070e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	4413      	add	r3, r2
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80070e8:	e7ad      	b.n	8007046 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	3301      	adds	r3, #1
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80070f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	4413      	add	r3, r2
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80070f8:	e7d1      	b.n	800709e <lfs_dir_find+0x8e>
                break;
 80070fa:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <lfs_dir_find+0xf8>
            return tag;
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	e06e      	b.n	80071e6 <lfs_dir_find+0x1d6>
        }

        // update what we've found so far
        *path = name;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe f98b 	bl	800542c <lfs_tag_type3>
 8007116:	4603      	mov	r3, r0
 8007118:	2b02      	cmp	r3, #2
 800711a:	d002      	beq.n	8007122 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800711c:	f06f 0313 	mvn.w	r3, #19
 8007120:	e061      	b.n	80071e6 <lfs_dir_find+0x1d6>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe f9ab 	bl	8005480 <lfs_tag_id>
 800712a:	4603      	mov	r3, r0
 800712c:	461a      	mov	r2, r3
 800712e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007132:	429a      	cmp	r2, r3
 8007134:	d01c      	beq.n	8007170 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe f9a1 	bl	8005480 <lfs_tag_id>
 800713e:	4603      	mov	r3, r0
 8007140:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8007142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007146:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800714e:	9200      	str	r2, [sp, #0]
 8007150:	4a2b      	ldr	r2, [pc, #172]	; (8007200 <lfs_dir_find+0x1f0>)
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7fe fd7b 	bl	8005c50 <lfs_dir_get>
 800715a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	da01      	bge.n	8007166 <lfs_dir_find+0x156>
                return res;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	e03f      	b.n	80071e6 <lfs_dir_find+0x1d6>
            }
            lfs_pair_fromle32(dir->tail);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	3318      	adds	r3, #24
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe f8f9 	bl	8005362 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8007176:	212f      	movs	r1, #47	; 0x2f
 8007178:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800717a:	f008 fd43 	bl	800fc04 <strchr>
 800717e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <lfs_dir_find+0x178>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	e000      	b.n	800718a <lfs_dir_find+0x17a>
 8007188:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	613a      	str	r2, [r7, #16]
 800718e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007190:	617a      	str	r2, [r7, #20]
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8007196:	f107 0210 	add.w	r2, r7, #16
 800719a:	9203      	str	r2, [sp, #12]
 800719c:	4a19      	ldr	r2, [pc, #100]	; (8007204 <lfs_dir_find+0x1f4>)
 800719e:	9202      	str	r2, [sp, #8]
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80071aa:	4622      	mov	r2, r4
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff faaa 	bl	8006708 <lfs_dir_fetchmatch>
 80071b4:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da01      	bge.n	80071c0 <lfs_dir_find+0x1b0>
                return tag;
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	e012      	b.n	80071e6 <lfs_dir_find+0x1d6>
            }

            if (tag) {
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <lfs_dir_find+0x1ca>
                break;
            }

            if (!dir->split) {
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	7ddb      	ldrb	r3, [r3, #23]
 80071ca:	f083 0301 	eor.w	r3, r3, #1
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0cd      	beq.n	8007170 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80071d4:	f06f 0301 	mvn.w	r3, #1
 80071d8:	e005      	b.n	80071e6 <lfs_dir_find+0x1d6>
                break;
 80071da:	bf00      	nop
            }
        }

        // to next name
        name += namelen;
 80071dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	4413      	add	r3, r2
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80071e4:	e72f      	b.n	8007046 <lfs_dir_find+0x36>
    }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	373c      	adds	r7, #60	; 0x3c
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd90      	pop	{r4, r7, pc}
 80071ee:	bf00      	nop
 80071f0:	002ffc00 	.word	0x002ffc00
 80071f4:	080113a0 	.word	0x080113a0
 80071f8:	080113a4 	.word	0x080113a4
 80071fc:	080113a8 	.word	0x080113a8
 8007200:	700ffc00 	.word	0x700ffc00
 8007204:	08006f7d 	.word	0x08006f7d

08007208 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b08b      	sub	sp, #44	; 0x2c
 800720c:	af04      	add	r7, sp, #16
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f103 0010 	add.w	r0, r3, #16
 800721c:	68fc      	ldr	r4, [r7, #12]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	6852      	ldr	r2, [r2, #4]
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	9103      	str	r1, [sp, #12]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	9102      	str	r1, [sp, #8]
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	2300      	movs	r3, #0
 8007234:	4622      	mov	r2, r4
 8007236:	4601      	mov	r1, r0
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7fd ff2d 	bl	8005098 <lfs_bd_prog>
 800723e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <lfs_dir_commitprog+0x42>
        return err;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	e010      	b.n	800726c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	f004 fb6a 	bl	800b92c <lfs_crc>
 8007258:	4602      	mov	r2, r0
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	441a      	add	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	605a      	str	r2, [r3, #4]
    return 0;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd90      	pop	{r4, r7, pc}

08007274 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b08f      	sub	sp, #60	; 0x3c
 8007278:	af04      	add	r7, sp, #16
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fe f919 	bl	80054ba <lfs_tag_dsize>
 8007288:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	441a      	add	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	429a      	cmp	r2, r3
 8007298:	d902      	bls.n	80072a0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800729a:	f06f 031b 	mvn.w	r3, #27
 800729e:	e065      	b.n	800736c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	4053      	eors	r3, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fd fc64 	bl	8004b7a <lfs_tobe32>
 80072b2:	4603      	mov	r3, r0
 80072b4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80072b6:	f107 0214 	add.w	r2, r7, #20
 80072ba:	2304      	movs	r3, #4
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff ffa2 	bl	8007208 <lfs_dir_commitprog>
 80072c4:	61f8      	str	r0, [r7, #28]
    if (err) {
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <lfs_dir_commitattr+0x5c>
        return err;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	e04d      	b.n	800736c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db0c      	blt.n	80072f0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	3b04      	subs	r3, #4
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff ff92 	bl	8007208 <lfs_dir_commitprog>
 80072e4:	61f8      	str	r0, [r7, #28]
        if (err) {
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d039      	beq.n	8007360 <lfs_dir_commitattr+0xec>
            return err;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	e03d      	b.n	800736c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80072f4:	2300      	movs	r3, #0
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
 80072f8:	e02d      	b.n	8007356 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80072fa:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80072fc:	6a3a      	ldr	r2, [r7, #32]
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8007302:	1f1c      	subs	r4, r3, #4
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800730c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730e:	440a      	add	r2, r1
 8007310:	2101      	movs	r1, #1
 8007312:	9103      	str	r1, [sp, #12]
 8007314:	f107 0113 	add.w	r1, r7, #19
 8007318:	9102      	str	r1, [sp, #8]
 800731a:	9201      	str	r2, [sp, #4]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4623      	mov	r3, r4
 8007320:	4602      	mov	r2, r0
 8007322:	2100      	movs	r1, #0
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7fd fc71 	bl	8004c0c <lfs_bd_read>
 800732a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <lfs_dir_commitattr+0xc2>
                return err;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	e01a      	b.n	800736c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8007336:	f107 0213 	add.w	r2, r7, #19
 800733a:	2301      	movs	r3, #1
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff ff62 	bl	8007208 <lfs_dir_commitprog>
 8007344:	61f8      	str	r0, [r7, #28]
            if (err) {
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <lfs_dir_commitattr+0xdc>
                return err;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	e00d      	b.n	800736c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	3301      	adds	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	3b04      	subs	r3, #4
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	429a      	cmp	r2, r3
 800735e:	d3cc      	bcc.n	80072fa <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	609a      	str	r2, [r3, #8]
    return 0;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	372c      	adds	r7, #44	; 0x2c
 8007370:	46bd      	mov	sp, r7
 8007372:	bd90      	pop	{r4, r7, pc}

08007374 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b097      	sub	sp, #92	; 0x5c
 8007378:	af04      	add	r7, sp, #16
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f7fd fb85 	bl	8004a9e <lfs_alignup>
 8007394:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800739e:	e0a6      	b.n	80074ee <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	3304      	adds	r3, #4
 80073a6:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80073a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd fb4e 	bl	8004a54 <lfs_min>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	4413      	add	r3, r2
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 80073c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d206      	bcs.n	80073d6 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	3b08      	subs	r3, #8
 80073cc:	4619      	mov	r1, r3
 80073ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073d0:	f7fd fb40 	bl	8004a54 <lfs_min>
 80073d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295
 80073da:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2204      	movs	r2, #4
 80073e4:	9203      	str	r2, [sp, #12]
 80073e6:	f107 0214 	add.w	r2, r7, #20
 80073ea:	9202      	str	r2, [sp, #8]
 80073ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073ee:	9201      	str	r2, [sp, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	2304      	movs	r3, #4
 80073f4:	460a      	mov	r2, r1
 80073f6:	2100      	movs	r1, #0
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fd fc07 	bl	8004c0c <lfs_bd_read>
 80073fe:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <lfs_dir_commitcrc+0x9e>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800740c:	d001      	beq.n	8007412 <lfs_dir_commitcrc+0x9e>
            return err;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	e0e8      	b.n	80075e4 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	4618      	mov	r0, r3
 8007416:	f7fd fba4 	bl	8004b62 <lfs_frombe32>
 800741a:	4603      	mov	r3, r0
 800741c:	43db      	mvns	r3, r3
 800741e:	0fdb      	lsrs	r3, r3, #31
 8007420:	2b00      	cmp	r3, #0
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800742a:	7efb      	ldrb	r3, [r7, #27]
 800742c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007430:	051a      	lsls	r2, r3, #20
 8007432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	1acb      	subs	r3, r1, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800743e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8007442:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	4053      	eors	r3, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f7fd fb94 	bl	8004b7a <lfs_tobe32>
 8007452:	4603      	mov	r3, r0
 8007454:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f107 010c 	add.w	r1, r7, #12
 800745e:	2204      	movs	r2, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f004 fa63 	bl	800b92c <lfs_crc>
 8007466:	4602      	mov	r2, r0
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	4618      	mov	r0, r3
 8007472:	f7fd fb6a 	bl	8004b4a <lfs_tole32>
 8007476:	4603      	mov	r3, r0
 8007478:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f103 0010 	add.w	r0, r3, #16
 8007480:	687c      	ldr	r4, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	6852      	ldr	r2, [r2, #4]
 800748a:	2108      	movs	r1, #8
 800748c:	9103      	str	r1, [sp, #12]
 800748e:	f107 010c 	add.w	r1, r7, #12
 8007492:	9102      	str	r1, [sp, #8]
 8007494:	9201      	str	r2, [sp, #4]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	2300      	movs	r3, #0
 800749a:	4622      	mov	r2, r4
 800749c:	4601      	mov	r1, r0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fd fdfa 	bl	8005098 <lfs_bd_prog>
 80074a4:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <lfs_dir_commitcrc+0x13c>
            return err;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	e099      	b.n	80075e4 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80074b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd ffea 	bl	80054a0 <lfs_tag_size>
 80074cc:	4603      	mov	r3, r0
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	441a      	add	r2, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80074da:	7efb      	ldrb	r3, [r7, #27]
 80074dc:	07da      	lsls	r2, r3, #31
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	405a      	eors	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f4:	429a      	cmp	r2, r3
 80074f6:	f63f af53 	bhi.w	80073a0 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f103 0110 	add.w	r1, r3, #16
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	2300      	movs	r3, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fd fd93 	bl	8005030 <lfs_bd_sync>
 800750a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <lfs_dir_commitcrc+0x1a2>
        return err;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	e066      	b.n	80075e4 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800751c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8007520:	e05b      	b.n	80075da <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8007522:	f04f 33ff 	mov.w	r3, #4294967295
 8007526:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800752c:	e030      	b.n	8007590 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800752e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007532:	429a      	cmp	r2, r3
 8007534:	d106      	bne.n	8007544 <lfs_dir_commitcrc+0x1d0>
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753a:	429a      	cmp	r2, r3
 800753c:	d002      	beq.n	8007544 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800753e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007542:	e04f      	b.n	80075e4 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8007544:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8007546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800754c:	1d18      	adds	r0, r3, #4
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2201      	movs	r2, #1
 8007554:	9203      	str	r2, [sp, #12]
 8007556:	f107 020b 	add.w	r2, r7, #11
 800755a:	9202      	str	r2, [sp, #8]
 800755c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800755e:	9201      	str	r2, [sp, #4]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	4603      	mov	r3, r0
 8007564:	460a      	mov	r2, r1
 8007566:	2100      	movs	r1, #0
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fd fb4f 	bl	8004c0c <lfs_bd_read>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <lfs_dir_commitcrc+0x206>
                return err;
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	e034      	b.n	80075e4 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800757a:	f107 030b 	add.w	r3, r7, #11
 800757e:	2201      	movs	r2, #1
 8007580:	4619      	mov	r1, r3
 8007582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007584:	f004 f9d2 	bl	800b92c <lfs_crc>
 8007588:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	3301      	adds	r3, #1
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	3304      	adds	r3, #4
 8007594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007596:	429a      	cmp	r2, r3
 8007598:	d3c9      	bcc.n	800752e <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80075a0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80075a4:	e01e      	b.n	80075e4 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80075a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fd fa4f 	bl	8004a54 <lfs_min>
 80075b6:	4602      	mov	r2, r0
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	4413      	add	r3, r2
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 80075be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d206      	bcs.n	80075d4 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	3b08      	subs	r3, #8
 80075ca:	4619      	mov	r1, r3
 80075cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ce:	f7fd fa41 	bl	8004a54 <lfs_min>
 80075d2:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	3304      	adds	r3, #4
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80075da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	429a      	cmp	r2, r3
 80075e0:	d39f      	bcc.n	8007522 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	374c      	adds	r7, #76	; 0x4c
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd90      	pop	{r4, r7, pc}

080075ec <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af04      	add	r7, sp, #16
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e016      	b.n	800762a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	bfb8      	it	lt
 8007608:	425b      	neglt	r3, r3
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	4413      	add	r3, r2
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe f982 	bl	800591c <lfs_alloc>
 8007618:	60f8      	str	r0, [r7, #12]
        if (err) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <lfs_dir_alloc+0x38>
            return err;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	e058      	b.n	80076d6 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3301      	adds	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b01      	cmp	r3, #1
 800762e:	dde5      	ble.n	80075fc <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8007640:	2104      	movs	r1, #4
 8007642:	9103      	str	r1, [sp, #12]
 8007644:	9202      	str	r2, [sp, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	2304      	movs	r3, #4
 800764e:	4602      	mov	r2, r0
 8007650:	2100      	movs	r1, #0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fd fada 	bl	8004c0c <lfs_bd_read>
 8007658:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	4618      	mov	r0, r3
 8007660:	f7fd fa68 	bl	8004b34 <lfs_fromle32>
 8007664:	4602      	mov	r2, r0
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <lfs_dir_alloc+0x90>
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007676:	d001      	beq.n	800767c <lfs_dir_alloc+0x90>
        return err;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	e02c      	b.n	80076d6 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	dd0e      	ble.n	80076a4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	3301      	adds	r3, #1
 8007692:	f043 0301 	orr.w	r3, r3, #1
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fd fa00 	bl	8004a9e <lfs_alignup>
 800769e:	4602      	mov	r2, r0
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2204      	movs	r2, #4
 80076a8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295
 80076b0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2200      	movs	r2, #0
 80076b6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2200      	movs	r2, #0
 80076d2:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3348      	adds	r3, #72	; 0x48
 80076f0:	461a      	mov	r2, r3
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff fb95 	bl	8006e24 <lfs_dir_getgstate>
 80076fa:	61f8      	str	r0, [r7, #28]
    if (err) {
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <lfs_dir_drop+0x26>
        return err;
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	e022      	b.n	800774c <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3318      	adds	r3, #24
 800770a:	4618      	mov	r0, r3
 800770c:	f7fd fe43 	bl	8005396 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7ddb      	ldrb	r3, [r3, #23]
 8007714:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007718:	051a      	lsls	r2, r3, #20
 800771a:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <lfs_dir_drop+0x74>)
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3318      	adds	r3, #24
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	f107 0214 	add.w	r2, r7, #20
 800772a:	2301      	movs	r3, #1
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f001 f95c 	bl	80089ec <lfs_dir_commit>
 8007734:	61f8      	str	r0, [r7, #28]
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3318      	adds	r3, #24
 800773a:	4618      	mov	r0, r3
 800773c:	f7fd fe11 	bl	8005362 <lfs_pair_fromle32>
    if (err) {
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <lfs_dir_drop+0x6a>
        return err;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	e000      	b.n	800774c <lfs_dir_drop+0x6c>
    }

    return 0;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	000ffc08 	.word	0x000ffc08

08007758 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b092      	sub	sp, #72	; 0x48
 800775c:	af04      	add	r7, sp, #16
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8007766:	f107 0310 	add.w	r3, r7, #16
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7ff ff3d 	bl	80075ec <lfs_dir_alloc>
 8007772:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8007774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <lfs_dir_split+0x26>
        return err;
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777c:	e03c      	b.n	80077f8 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	7ddb      	ldrb	r3, [r3, #23]
 8007782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8007792:	f107 0110 	add.w	r1, r7, #16
 8007796:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800779a:	9302      	str	r3, [sp, #8]
 800779c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 f87a 	bl	80078a4 <lfs_dir_compact>
 80077b0:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da01      	bge.n	80077bc <lfs_dir_split+0x64>
        return res;
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	e01d      	b.n	80077f8 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2201      	movs	r2, #1
 80077cc:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3320      	adds	r3, #32
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fd fd6c 	bl	80052b4 <lfs_pair_cmp>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <lfs_dir_split+0x9e>
 80077e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3738      	adds	r7, #56	; 0x38
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7fd fe52 	bl	80054ba <lfs_tag_dsize>
 8007816:	4602      	mov	r2, r0
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	441a      	add	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	601a      	str	r2, [r3, #0]
    return 0;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	6859      	ldr	r1, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	f7ff fd14 	bl	8007274 <lfs_dir_commitattr>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8007866:	2b00      	cmp	r3, #0
 8007868:	dd11      	ble.n	800788e <lfs_dir_needsrelocation+0x38>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	3301      	adds	r3, #1
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007876:	3201      	adds	r2, #1
 8007878:	f042 0201 	orr.w	r2, r2, #1
 800787c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007880:	fb02 f201 	mul.w	r2, r2, r1
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <lfs_dir_needsrelocation+0x38>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <lfs_dir_needsrelocation+0x3a>
 800788e:	2300      	movs	r3, #0
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	b2db      	uxtb	r3, r3
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b0a0      	sub	sp, #128	; 0x80
 80078a8:	af0a      	add	r7, sp, #40	; 0x28
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff ffcb 	bl	8007856 <lfs_dir_needsrelocation>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

    // increment revision count
    dir->rev += 1;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80078d0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00e      	beq.n	80078f6 <lfs_dir_compact+0x52>
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	2300      	movs	r3, #0
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
 80078de:	2301      	movs	r3, #1
 80078e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80078e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7fd fce3 	bl	80052b4 <lfs_pair_cmp>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f040 8155 	bne.w	8007ba0 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	2300      	movs	r3, #0
 80078fe:	623b      	str	r3, [r7, #32]
 8007900:	f04f 33ff 	mov.w	r3, #4294967295
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
 800790c:	2300      	movs	r3, #0
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <lfs_dir_compact+0x80>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800791e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007920:	3b08      	subs	r3, #8
 8007922:	e003      	b.n	800792c <lfs_dir_compact+0x88>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800792c:	633b      	str	r3, [r7, #48]	; 0x30
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7fd fc5b 	bl	80051f0 <lfs_bd_erase>
 800793a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 800793c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d006      	beq.n	8007950 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8007942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007944:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007948:	f000 812c 	beq.w	8007ba4 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800794c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800794e:	e189      	b.n	8007c64 <lfs_dir_compact+0x3c0>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f7fd f8f8 	bl	8004b4a <lfs_tole32>
 800795a:	4602      	mov	r2, r0
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8007966:	f107 011c 	add.w	r1, r7, #28
 800796a:	2304      	movs	r3, #4
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fc4b 	bl	8007208 <lfs_dir_commitprog>
 8007972:	64f8      	str	r0, [r7, #76]	; 0x4c
            dir->rev = lfs_fromle32(dir->rev);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	4618      	mov	r0, r3
 800797a:	f7fd f8db 	bl	8004b34 <lfs_fromle32>
 800797e:	4602      	mov	r2, r0
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	609a      	str	r2, [r3, #8]
            if (err) {
 8007984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d006      	beq.n	8007998 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800798a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007990:	f000 810a 	beq.w	8007ba8 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8007994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007996:	e165      	b.n	8007c64 <lfs_dir_compact+0x3c0>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8007998:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800799c:	425b      	negs	r3, r3
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079a6:	f107 021c 	add.w	r2, r7, #28
 80079aa:	643a      	str	r2, [r7, #64]	; 0x40
            err = lfs_dir_traverse(lfs,
 80079ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80079b0:	9208      	str	r2, [sp, #32]
 80079b2:	4aae      	ldr	r2, [pc, #696]	; (8007c6c <lfs_dir_compact+0x3c8>)
 80079b4:	9207      	str	r2, [sp, #28]
 80079b6:	9306      	str	r3, [sp, #24]
 80079b8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079c2:	9304      	str	r3, [sp, #16]
 80079c4:	2300      	movs	r3, #0
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	4ba9      	ldr	r3, [pc, #676]	; (8007c70 <lfs_dir_compact+0x3cc>)
 80079ca:	9302      	str	r3, [sp, #8]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295
 80079d8:	2200      	movs	r2, #0
 80079da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7fe fa89 	bl	8005ef4 <lfs_dir_traverse>
 80079e2:	64f8      	str	r0, [r7, #76]	; 0x4c
                        lfs, &commit});
            if (err) {
 80079e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d006      	beq.n	80079f8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80079ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80079f0:	f000 80dc 	beq.w	8007bac <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80079f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f6:	e135      	b.n	8007c64 <lfs_dir_compact+0x3c0>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	3318      	adds	r3, #24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd fc3e 	bl	800527e <lfs_pair_isnull>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f083 0301 	eor.w	r3, r3, #1
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d022      	beq.n	8007a54 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3318      	adds	r3, #24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd fcbf 	bl	8005396 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	7ddb      	ldrb	r3, [r3, #23]
 8007a1c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007a20:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8007a22:	4a94      	ldr	r2, [pc, #592]	; (8007c74 <lfs_dir_compact+0x3d0>)
 8007a24:	431a      	orrs	r2, r3
                        dir->tail);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8007a2a:	f107 011c 	add.w	r1, r7, #28
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fc20 	bl	8007274 <lfs_dir_commitattr>
 8007a34:	64f8      	str	r0, [r7, #76]	; 0x4c
                lfs_pair_fromle32(dir->tail);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	3318      	adds	r3, #24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fd fc91 	bl	8005362 <lfs_pair_fromle32>
                if (err) {
 8007a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8007a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007a4c:	f000 80b0 	beq.w	8007bb0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8007a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a52:	e107      	b.n	8007c64 <lfs_dir_compact+0x3c0>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8007a54:	f107 0310 	add.w	r3, r7, #16
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	605a      	str	r2, [r3, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8007a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a64:	f083 0301 	eor.w	r3, r3, #1
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd fd31 	bl	80054e2 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd fd28 	bl	80054e2 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007a98:	f107 0310 	add.w	r3, r7, #16
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd fd1f 	bl	80054e2 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	613b      	str	r3, [r7, #16]

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8007ab0:	f107 0310 	add.w	r3, r7, #16
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff f9b3 	bl	8006e24 <lfs_dir_getgstate>
 8007abe:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 8007ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <lfs_dir_compact+0x226>
                return err;
 8007ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac8:	e0cc      	b.n	8007c64 <lfs_dir_compact+0x3c0>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8007aca:	f107 0310 	add.w	r3, r7, #16
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd fd2b 	bl	800552a <lfs_gstate_iszero>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f083 0301 	eor.w	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d016      	beq.n	8007b0e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8007ae0:	f107 0310 	add.w	r3, r7, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd fdb2 	bl	800564e <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8007aea:	f107 0310 	add.w	r3, r7, #16
 8007aee:	f107 011c 	add.w	r1, r7, #28
 8007af2:	4a61      	ldr	r2, [pc, #388]	; (8007c78 <lfs_dir_compact+0x3d4>)
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7ff fbbd 	bl	8007274 <lfs_dir_commitattr>
 8007afa:	64f8      	str	r0, [r7, #76]	; 0x4c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8007afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8007b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b04:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007b08:	d054      	beq.n	8007bb4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	e0aa      	b.n	8007c64 <lfs_dir_compact+0x3c0>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8007b0e:	f107 031c 	add.w	r3, r7, #28
 8007b12:	4619      	mov	r1, r3
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff fc2d 	bl	8007374 <lfs_dir_commitcrc>
 8007b1a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 8007b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8007b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007b28:	d046      	beq.n	8007bb8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8007b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2c:	e09a      	b.n	8007c64 <lfs_dir_compact+0x3c0>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b34:	6992      	ldr	r2, [r2, #24]
 8007b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b3a:	fb02 f201 	mul.w	r2, r2, r1
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d006      	beq.n	8007b52 <lfs_dir_compact+0x2ae>
 8007b44:	4b4d      	ldr	r3, [pc, #308]	; (8007c7c <lfs_dir_compact+0x3d8>)
 8007b46:	4a4e      	ldr	r2, [pc, #312]	; (8007c80 <lfs_dir_compact+0x3dc>)
 8007b48:	f240 714b 	movw	r1, #1867	; 0x74b
 8007b4c:	484d      	ldr	r0, [pc, #308]	; (8007c84 <lfs_dir_compact+0x3e0>)
 8007b4e:	f007 fbdd 	bl	800f30c <__assert_func>
            lfs_pair_swap(dir->pair);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fd fb7d 	bl	8005254 <lfs_pair_swap>
            dir->count = end - begin;
 8007b5a:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8007b5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8007b6a:	6a3a      	ldr	r2, [r7, #32]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3348      	adds	r3, #72	; 0x48
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	605a      	str	r2, [r3, #4]
 8007b80:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8007b82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b86:	f083 0301 	eor.w	r3, r3, #1
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d066      	beq.n	8007c5e <lfs_dir_compact+0x3ba>
                lfs->gdisk = lfs->gstate;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	333c      	adds	r3, #60	; 0x3c
 8007b96:	3230      	adds	r2, #48	; 0x30
 8007b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8007b9e:	e05e      	b.n	8007c5e <lfs_dir_compact+0x3ba>
        goto relocate;
 8007ba0:	bf00      	nop
 8007ba2:	e00a      	b.n	8007bba <lfs_dir_compact+0x316>
                    goto relocate;
 8007ba4:	bf00      	nop
 8007ba6:	e008      	b.n	8007bba <lfs_dir_compact+0x316>
                    goto relocate;
 8007ba8:	bf00      	nop
 8007baa:	e006      	b.n	8007bba <lfs_dir_compact+0x316>
                    goto relocate;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <lfs_dir_compact+0x316>
                        goto relocate;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <lfs_dir_compact+0x316>
                        goto relocate;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <lfs_dir_compact+0x316>
                    goto relocate;
 8007bb8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        lfs_cache_drop(lfs, &lfs->pcache);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7fc fffa 	bl	8004bc0 <lfs_cache_drop>
        if (!tired) {
 8007bcc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8007bd0:	f083 0301 	eor.w	r3, r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <lfs_dir_compact+0x34c>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	4b2a      	ldr	r3, [pc, #168]	; (8007c88 <lfs_dir_compact+0x3e4>)
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	f240 725d 	movw	r2, #1885	; 0x75d
 8007be8:	4926      	ldr	r1, [pc, #152]	; (8007c84 <lfs_dir_compact+0x3e0>)
 8007bea:	4828      	ldr	r0, [pc, #160]	; (8007c8c <lfs_dir_compact+0x3e8>)
 8007bec:	f007 ffae 	bl	800fb4c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7fd fb57 	bl	80052b4 <lfs_pair_cmp>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10d      	bne.n	8007c28 <lfs_dir_compact+0x384>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <lfs_dir_compact+0x3e4>)
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	f240 7263 	movw	r2, #1891	; 0x763
 8007c1a:	491a      	ldr	r1, [pc, #104]	; (8007c84 <lfs_dir_compact+0x3e0>)
 8007c1c:	481c      	ldr	r0, [pc, #112]	; (8007c90 <lfs_dir_compact+0x3ec>)
 8007c1e:	f007 ff95 	bl	800fb4c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8007c22:	f06f 031b 	mvn.w	r3, #27
 8007c26:	e01d      	b.n	8007c64 <lfs_dir_compact+0x3c0>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7fd fe74 	bl	800591c <lfs_alloc>
 8007c34:	6538      	str	r0, [r7, #80]	; 0x50
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8007c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00c      	beq.n	8007c56 <lfs_dir_compact+0x3b2>
 8007c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3e:	f113 0f1c 	cmn.w	r3, #28
 8007c42:	d106      	bne.n	8007c52 <lfs_dir_compact+0x3ae>
 8007c44:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8007c48:	f083 0301 	eor.w	r3, r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <lfs_dir_compact+0x3b2>
            return err;
 8007c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c54:	e006      	b.n	8007c64 <lfs_dir_compact+0x3c0>
        }

        tired = false;
 8007c56:	2300      	movs	r3, #0
 8007c58:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    while (true) {
 8007c5c:	e64b      	b.n	80078f6 <lfs_dir_compact+0x52>
        break;
 8007c5e:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8007c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3758      	adds	r7, #88	; 0x58
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	0800782d 	.word	0x0800782d
 8007c70:	400ffc00 	.word	0x400ffc00
 8007c74:	000ffc08 	.word	0x000ffc08
 8007c78:	7ffffc0c 	.word	0x7ffffc0c
 8007c7c:	080113ac 	.word	0x080113ac
 8007c80:	08011d18 	.word	0x08011d18
 8007c84:	08011258 	.word	0x08011258
 8007c88:	08011354 	.word	0x08011354
 8007c8c:	080113d4 	.word	0x080113d4
 8007c90:	080113f8 	.word	0x080113f8

08007c94 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b097      	sub	sp, #92	; 0x5c
 8007c98:	af0a      	add	r7, sp, #40	; 0x28
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8007ca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8007ca8:	e058      	b.n	8007d5c <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]
            int err = lfs_dir_traverse(lfs,
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	b292      	uxth	r2, r2
 8007cb6:	4252      	negs	r2, r2
 8007cb8:	b292      	uxth	r2, r2
 8007cba:	b212      	sxth	r2, r2
 8007cbc:	f107 0110 	add.w	r1, r7, #16
 8007cc0:	9108      	str	r1, [sp, #32]
 8007cc2:	4979      	ldr	r1, [pc, #484]	; (8007ea8 <lfs_dir_splittingcompact+0x214>)
 8007cc4:	9107      	str	r1, [sp, #28]
 8007cc6:	9206      	str	r2, [sp, #24]
 8007cc8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007ccc:	9205      	str	r2, [sp, #20]
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	4b75      	ldr	r3, [pc, #468]	; (8007eac <lfs_dir_splittingcompact+0x218>)
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7fe f903 	bl	8005ef4 <lfs_dir_traverse>
 8007cee:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <lfs_dir_splittingcompact+0x66>
                return err;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	e0d2      	b.n	8007ea0 <lfs_dir_splittingcompact+0x20c>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8007cfa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2bfe      	cmp	r3, #254	; 0xfe
 8007d04:	d822      	bhi.n	8007d4c <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8007d20:	085b      	lsrs	r3, r3, #1
 8007d22:	e003      	b.n	8007d2c <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d28:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8007d2a:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8007d30:	6992      	ldr	r2, [r2, #24]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fc feb2 	bl	8004a9e <lfs_alignup>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7fc fe88 	bl	8004a54 <lfs_min>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d20e      	bcs.n	8007d6a <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8007d4c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d58:	4413      	add	r3, r2
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8007d5c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d8a0      	bhi.n	8007caa <lfs_dir_splittingcompact+0x16>
 8007d68:	e000      	b.n	8007d6c <lfs_dir_splittingcompact+0xd8>
                break;
 8007d6a:	bf00      	nop
        }

        if (split == begin) {
 8007d6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d02d      	beq.n	8007dd2 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007d7e:	9202      	str	r2, [sp, #8]
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fce3 	bl	8007758 <lfs_dir_split>
 8007d92:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <lfs_dir_splittingcompact+0x112>
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	f113 0f1c 	cmn.w	r3, #28
 8007da0:	d001      	beq.n	8007da6 <lfs_dir_splittingcompact+0x112>
            return err;
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	e07c      	b.n	8007ea0 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4a3e      	ldr	r2, [pc, #248]	; (8007eb0 <lfs_dir_splittingcompact+0x21c>)
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	f240 72ad 	movw	r2, #1965	; 0x7ad
 8007dc0:	493c      	ldr	r1, [pc, #240]	; (8007eb4 <lfs_dir_splittingcompact+0x220>)
 8007dc2:	483d      	ldr	r0, [pc, #244]	; (8007eb8 <lfs_dir_splittingcompact+0x224>)
 8007dc4:	f007 fec2 	bl	800fb4c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8007dc8:	e004      	b.n	8007dd4 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8007dd0:	e767      	b.n	8007ca2 <lfs_dir_splittingcompact+0xe>
            break;
 8007dd2:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fd3d 	bl	8007856 <lfs_dir_needsrelocation>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04f      	beq.n	8007e82 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	2301      	movs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	f107 0314 	add.w	r3, r7, #20
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f7fd fa5e 	bl	80052b4 <lfs_pair_cmp>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d141      	bne.n	8007e82 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f003 face 	bl	800b3a0 <lfs_fs_rawsize>
 8007e04:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	da01      	bge.n	8007e10 <lfs_dir_splittingcompact+0x17c>
            return size;
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	e047      	b.n	8007ea0 <lfs_dir_splittingcompact+0x20c>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	085a      	lsrs	r2, r3, #1
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d931      	bls.n	8007e82 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	4b23      	ldr	r3, [pc, #140]	; (8007eb0 <lfs_dir_splittingcompact+0x21c>)
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8007e2c:	4921      	ldr	r1, [pc, #132]	; (8007eb4 <lfs_dir_splittingcompact+0x220>)
 8007e2e:	4823      	ldr	r0, [pc, #140]	; (8007ebc <lfs_dir_splittingcompact+0x228>)
 8007e30:	f007 fe8c 	bl	800fb4c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007e34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fc84 	bl	8007758 <lfs_dir_split>
 8007e50:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <lfs_dir_splittingcompact+0x1d0>
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f113 0f1c 	cmn.w	r3, #28
 8007e5e:	d001      	beq.n	8007e64 <lfs_dir_splittingcompact+0x1d0>
                return err;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	e01d      	b.n	8007ea0 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8007e6a:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <lfs_dir_splittingcompact+0x21c>)
 8007e6c:	f240 72ca 	movw	r2, #1994	; 0x7ca
 8007e70:	4910      	ldr	r1, [pc, #64]	; (8007eb4 <lfs_dir_splittingcompact+0x220>)
 8007e72:	4813      	ldr	r0, [pc, #76]	; (8007ec0 <lfs_dir_splittingcompact+0x22c>)
 8007e74:	f007 fe6a 	bl	800fb4c <iprintf>
 8007e78:	e003      	b.n	8007e82 <lfs_dir_splittingcompact+0x1ee>
            } else {
                end = begin;
 8007e7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8007e82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e86:	9302      	str	r3, [sp, #8]
 8007e88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fd03 	bl	80078a4 <lfs_dir_compact>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3734      	adds	r7, #52	; 0x34
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd90      	pop	{r4, r7, pc}
 8007ea8:	08007801 	.word	0x08007801
 8007eac:	400ffc00 	.word	0x400ffc00
 8007eb0:	08011354 	.word	0x08011354
 8007eb4:	08011258 	.word	0x08011258
 8007eb8:	08011430 	.word	0x08011430
 8007ebc:	08011460 	.word	0x08011460
 8007ec0:	08011494 	.word	0x08011494

08007ec4 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8007ec4:	b5b0      	push	{r4, r5, r7, lr}
 8007ec6:	b0a4      	sub	sp, #144	; 0x90
 8007ec8:	af0a      	add	r7, sp, #40	; 0x28
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
    int state = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	667b      	str	r3, [r7, #100]	; 0x64

    // calculate changes to the directory
    bool hasdelete = false;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    for (int i = 0; i < attrcount; i++) {
 8007edc:	2300      	movs	r3, #0
 8007ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee0:	e06d      	b.n	8007fbe <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8007ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	4413      	add	r3, r2
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fd fa9d 	bl	800542c <lfs_tag_type3>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f240 4301 	movw	r3, #1025	; 0x401
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d106      	bne.n	8007f0c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	8a9b      	ldrh	r3, [r3, #20]
 8007f02:	3301      	adds	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	829a      	strh	r2, [r3, #20]
 8007f0a:	e055      	b.n	8007fb8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8007f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	4413      	add	r3, r2
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd fa88 	bl	800542c <lfs_tag_type3>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d114      	bne.n	8007f52 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	8a9b      	ldrh	r3, [r3, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d106      	bne.n	8007f3e <lfs_dir_relocatingcommit+0x7a>
 8007f30:	4ba1      	ldr	r3, [pc, #644]	; (80081b8 <lfs_dir_relocatingcommit+0x2f4>)
 8007f32:	4aa2      	ldr	r2, [pc, #648]	; (80081bc <lfs_dir_relocatingcommit+0x2f8>)
 8007f34:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8007f38:	48a1      	ldr	r0, [pc, #644]	; (80081c0 <lfs_dir_relocatingcommit+0x2fc>)
 8007f3a:	f007 f9e7 	bl	800f30c <__assert_func>
            dir->count -= 1;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	8a9b      	ldrh	r3, [r3, #20]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8007f50:	e032      	b.n	8007fb8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8007f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4413      	add	r3, r2
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fd fa55 	bl	800540c <lfs_tag_type1>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f68:	d126      	bne.n	8007fb8 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8007f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	4413      	add	r3, r2
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8007f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4413      	add	r3, r2
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8007f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4413      	add	r3, r2
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fd fa59 	bl	800544c <lfs_tag_chunk>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bf14      	ite	ne
 8007fa4:	2301      	movne	r3, #1
 8007fa6:	2300      	moveq	r3, #0
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fd f9d5 	bl	8005362 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8007fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fba:	3301      	adds	r3, #1
 8007fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	db8d      	blt.n	8007ee2 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8007fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d028      	beq.n	8008020 <lfs_dir_relocatingcommit+0x15c>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	8a9b      	ldrh	r3, [r3, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d124      	bne.n	8008020 <lfs_dir_relocatingcommit+0x15c>
        LFS_ASSERT(pdir);
 8007fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <lfs_dir_relocatingcommit+0x126>
 8007fdc:	4b79      	ldr	r3, [pc, #484]	; (80081c4 <lfs_dir_relocatingcommit+0x300>)
 8007fde:	4a77      	ldr	r2, [pc, #476]	; (80081bc <lfs_dir_relocatingcommit+0x2f8>)
 8007fe0:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8007fe4:	4876      	ldr	r0, [pc, #472]	; (80081c0 <lfs_dir_relocatingcommit+0x2fc>)
 8007fe6:	f007 f991 	bl	800f30c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fee:	4619      	mov	r1, r3
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f002 fe49 	bl	800ac88 <lfs_fs_pred>
 8007ff6:	6538      	str	r0, [r7, #80]	; 0x50
        if (err && err != LFS_ERR_NOENT) {
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <lfs_dir_relocatingcommit+0x146>
 8007ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008000:	f113 0f02 	cmn.w	r3, #2
 8008004:	d001      	beq.n	800800a <lfs_dir_relocatingcommit+0x146>
            return err;
 8008006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008008:	e1f8      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800800a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800c:	f113 0f02 	cmn.w	r3, #2
 8008010:	d006      	beq.n	8008020 <lfs_dir_relocatingcommit+0x15c>
 8008012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008014:	7ddb      	ldrb	r3, [r3, #23]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <lfs_dir_relocatingcommit+0x15c>
            state = LFS_OK_DROPPED;
 800801a:	2302      	movs	r3, #2
 800801c:	667b      	str	r3, [r7, #100]	; 0x64
            goto fixmlist;
 800801e:	e118      	b.n	8008252 <lfs_dir_relocatingcommit+0x38e>
        }
    }

    if (dir->erased) {
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	7d9b      	ldrb	r3, [r3, #22]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80f9 	beq.w	800821c <lfs_dir_relocatingcommit+0x358>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800802e:	623b      	str	r3, [r7, #32]
            .off = dir->off,
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
            .ptag = dir->etag,
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
 800803c:	f04f 33ff 	mov.w	r3, #4294967295
 8008040:	62fb      	str	r3, [r7, #44]	; 0x2c
            .crc = 0xffffffff,

            .begin = dir->off,
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8008046:	633b      	str	r3, [r7, #48]	; 0x30
            .end = (lfs->cfg->metadata_max ?
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800804c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <lfs_dir_relocatingcommit+0x198>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008058:	3b08      	subs	r3, #8
 800805a:	e003      	b.n	8008064 <lfs_dir_relocatingcommit+0x1a0>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	3318      	adds	r3, #24
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd f993 	bl	8005396 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	643b      	str	r3, [r7, #64]	; 0x40
 800807c:	f107 0320 	add.w	r3, r7, #32
 8008080:	647b      	str	r3, [r7, #68]	; 0x44
        int err = lfs_dir_traverse(lfs,
 8008082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	4b4f      	ldr	r3, [pc, #316]	; (80081c8 <lfs_dir_relocatingcommit+0x304>)
 800808a:	9307      	str	r3, [sp, #28]
 800808c:	2300      	movs	r3, #0
 800808e:	9306      	str	r3, [sp, #24]
 8008090:	2300      	movs	r3, #0
 8008092:	9305      	str	r3, [sp, #20]
 8008094:	2300      	movs	r3, #0
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	2300      	movs	r3, #0
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	2300      	movs	r3, #0
 800809e:	9302      	str	r3, [sp, #8]
 80080a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	460b      	mov	r3, r1
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7fd ff21 	bl	8005ef4 <lfs_dir_traverse>
 80080b2:	64f8      	str	r0, [r7, #76]	; 0x4c
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	3318      	adds	r3, #24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fd f952 	bl	8005362 <lfs_pair_fromle32>
        if (err) {
 80080be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <lfs_dir_relocatingcommit+0x218>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80080c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c6:	f113 0f1c 	cmn.w	r3, #28
 80080ca:	f000 80a8 	beq.w	800821e <lfs_dir_relocatingcommit+0x35a>
 80080ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80080d4:	f000 80a3 	beq.w	800821e <lfs_dir_relocatingcommit+0x35a>
                goto compact;
            }
            return err;
 80080d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080da:	e18f      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80080dc:	f107 0314 	add.w	r3, r7, #20
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	605a      	str	r2, [r3, #4]
 80080e6:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd f9f4 	bl	80054e2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008100:	f107 0314 	add.w	r3, r7, #20
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd f9eb 	bl	80054e2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008112:	f107 0314 	add.w	r3, r7, #20
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fd f9e2 	bl	80054e2 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	617b      	str	r3, [r7, #20]
        if (!lfs_gstate_iszero(&delta)) {
 800812a:	f107 0314 	add.w	r3, r7, #20
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd f9fb 	bl	800552a <lfs_gstate_iszero>
 8008134:	4603      	mov	r3, r0
 8008136:	f083 0301 	eor.w	r3, r3, #1
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d027      	beq.n	8008190 <lfs_dir_relocatingcommit+0x2cc>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	461a      	mov	r2, r3
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7fe fe6b 	bl	8006e24 <lfs_dir_getgstate>
 800814e:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (err) {
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <lfs_dir_relocatingcommit+0x296>
                return err;
 8008156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008158:	e150      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
            }

            lfs_gstate_tole32(&delta);
 800815a:	f107 0314 	add.w	r3, r7, #20
 800815e:	4618      	mov	r0, r3
 8008160:	f7fd fa75 	bl	800564e <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8008164:	f107 0314 	add.w	r3, r7, #20
 8008168:	f107 0120 	add.w	r1, r7, #32
 800816c:	4a17      	ldr	r2, [pc, #92]	; (80081cc <lfs_dir_relocatingcommit+0x308>)
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff f880 	bl	8007274 <lfs_dir_commitattr>
 8008174:	64f8      	str	r0, [r7, #76]	; 0x4c
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8008176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008178:	2b00      	cmp	r3, #0
 800817a:	d009      	beq.n	8008190 <lfs_dir_relocatingcommit+0x2cc>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800817c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817e:	f113 0f1c 	cmn.w	r3, #28
 8008182:	d04c      	beq.n	800821e <lfs_dir_relocatingcommit+0x35a>
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008186:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800818a:	d048      	beq.n	800821e <lfs_dir_relocatingcommit+0x35a>
                    goto compact;
                }
                return err;
 800818c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818e:	e135      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8008190:	f107 0320 	add.w	r3, r7, #32
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff f8ec 	bl	8007374 <lfs_dir_commitcrc>
 800819c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 800819e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d015      	beq.n	80081d0 <lfs_dir_relocatingcommit+0x30c>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80081a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a6:	f113 0f1c 	cmn.w	r3, #28
 80081aa:	d038      	beq.n	800821e <lfs_dir_relocatingcommit+0x35a>
 80081ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80081b2:	d034      	beq.n	800821e <lfs_dir_relocatingcommit+0x35a>
                goto compact;
            }
            return err;
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	e121      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
 80081b8:	080114c0 	.word	0x080114c0
 80081bc:	08011d28 	.word	0x08011d28
 80081c0:	08011258 	.word	0x08011258
 80081c4:	080114d0 	.word	0x080114d0
 80081c8:	0800782d 	.word	0x0800782d
 80081cc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80081d6:	6992      	ldr	r2, [r2, #24]
 80081d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80081dc:	fb02 f201 	mul.w	r2, r2, r1
 80081e0:	1a9b      	subs	r3, r3, r2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d006      	beq.n	80081f4 <lfs_dir_relocatingcommit+0x330>
 80081e6:	4b87      	ldr	r3, [pc, #540]	; (8008404 <lfs_dir_relocatingcommit+0x540>)
 80081e8:	4a87      	ldr	r2, [pc, #540]	; (8008408 <lfs_dir_relocatingcommit+0x544>)
 80081ea:	f640 0139 	movw	r1, #2105	; 0x839
 80081ee:	4887      	ldr	r0, [pc, #540]	; (800840c <lfs_dir_relocatingcommit+0x548>)
 80081f0:	f007 f88c 	bl	800f30c <__assert_func>
        dir->off = commit.off;
 80081f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80081fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	333c      	adds	r3, #60	; 0x3c
 8008206:	3230      	adds	r2, #48	; 0x30
 8008208:	ca07      	ldmia	r2, {r0, r1, r2}
 800820a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3348      	adds	r3, #72	; 0x48
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	605a      	str	r2, [r3, #4]
 8008218:	609a      	str	r2, [r3, #8]
 800821a:	e01a      	b.n	8008252 <lfs_dir_relocatingcommit+0x38e>

        goto fixmlist;
    }

compact:
 800821c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3310      	adds	r3, #16
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7fc fccb 	bl	8004bc0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	8a9b      	ldrh	r3, [r3, #20]
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	2300      	movs	r3, #0
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	68b9      	ldr	r1, [r7, #8]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fd28 	bl	8007c94 <lfs_dir_splittingcompact>
 8008244:	6678      	str	r0, [r7, #100]	; 0x64
            dir, 0, dir->count);
    if (state < 0) {
 8008246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008248:	2b00      	cmp	r3, #0
 800824a:	da01      	bge.n	8008250 <lfs_dir_relocatingcommit+0x38c>
        return state;
 800824c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800824e:	e0d5      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
    }

    goto fixmlist;
 8008250:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	65bb      	str	r3, [r7, #88]	; 0x58
 8008264:	e0c5      	b.n	80083f2 <lfs_dir_relocatingcommit+0x52e>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8008266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008268:	3308      	adds	r3, #8
 800826a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f7fd f81f 	bl	80052b4 <lfs_pair_cmp>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	f040 80b7 	bne.w	80083ec <lfs_dir_relocatingcommit+0x528>
            d->m = *dir;
 800827e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	f103 0408 	add.w	r4, r3, #8
 8008286:	4615      	mov	r5, r2
 8008288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800828a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800828c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8008294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008296:	3308      	adds	r3, #8
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	429a      	cmp	r2, r3
 800829c:	f000 809c 	beq.w	80083d8 <lfs_dir_relocatingcommit+0x514>
                for (int i = 0; i < attrcount; i++) {
 80082a0:	2300      	movs	r3, #0
 80082a2:	657b      	str	r3, [r7, #84]	; 0x54
 80082a4:	e07b      	b.n	800839e <lfs_dir_relocatingcommit+0x4da>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80082a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4413      	add	r3, r2
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd f8bb 	bl	800542c <lfs_tag_type3>
 80082b6:	4603      	mov	r3, r0
 80082b8:	461a      	mov	r2, r3
 80082ba:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80082be:	429a      	cmp	r2, r3
 80082c0:	d115      	bne.n	80082ee <lfs_dir_relocatingcommit+0x42a>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80082c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082c4:	889c      	ldrh	r4, [r3, #4]
 80082c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4413      	add	r3, r2
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fd f8d5 	bl	8005480 <lfs_tag_id>
 80082d6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80082d8:	429c      	cmp	r4, r3
 80082da:	d108      	bne.n	80082ee <lfs_dir_relocatingcommit+0x42a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80082dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082de:	f04f 32ff 	mov.w	r2, #4294967295
 80082e2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80082e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	60da      	str	r2, [r3, #12]
 80082ec:	e054      	b.n	8008398 <lfs_dir_relocatingcommit+0x4d4>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80082ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4413      	add	r3, r2
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fd f897 	bl	800542c <lfs_tag_type3>
 80082fe:	4603      	mov	r3, r0
 8008300:	461a      	mov	r2, r3
 8008302:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8008306:	429a      	cmp	r2, r3
 8008308:	d11c      	bne.n	8008344 <lfs_dir_relocatingcommit+0x480>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800830a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830c:	889c      	ldrh	r4, [r3, #4]
 800830e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4413      	add	r3, r2
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd f8b1 	bl	8005480 <lfs_tag_id>
 800831e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8008320:	429c      	cmp	r4, r3
 8008322:	d90f      	bls.n	8008344 <lfs_dir_relocatingcommit+0x480>
                        d->id -= 1;
 8008324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008326:	889b      	ldrh	r3, [r3, #4]
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800832e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8008330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008332:	799b      	ldrb	r3, [r3, #6]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d12f      	bne.n	8008398 <lfs_dir_relocatingcommit+0x4d4>
                            ((lfs_dir_t*)d)->pos -= 1;
 8008338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	1e5a      	subs	r2, r3, #1
 800833e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008340:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8008342:	e029      	b.n	8008398 <lfs_dir_relocatingcommit+0x4d4>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8008344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	4413      	add	r3, r2
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd f86c 	bl	800542c <lfs_tag_type3>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	f240 4301 	movw	r3, #1025	; 0x401
 800835c:	429a      	cmp	r2, r3
 800835e:	d11b      	bne.n	8008398 <lfs_dir_relocatingcommit+0x4d4>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8008360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008362:	889c      	ldrh	r4, [r3, #4]
 8008364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	4413      	add	r3, r2
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd f886 	bl	8005480 <lfs_tag_id>
 8008374:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8008376:	429c      	cmp	r4, r3
 8008378:	d30e      	bcc.n	8008398 <lfs_dir_relocatingcommit+0x4d4>
                        d->id += 1;
 800837a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800837c:	889b      	ldrh	r3, [r3, #4]
 800837e:	3301      	adds	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008384:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8008386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008388:	799b      	ldrb	r3, [r3, #6]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d104      	bne.n	8008398 <lfs_dir_relocatingcommit+0x4d4>
                            ((lfs_dir_t*)d)->pos += 1;
 800838e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008396:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8008398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839a:	3301      	adds	r3, #1
 800839c:	657b      	str	r3, [r7, #84]	; 0x54
 800839e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a2:	429a      	cmp	r2, r3
 80083a4:	f6ff af7f 	blt.w	80082a6 <lfs_dir_relocatingcommit+0x3e2>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80083a8:	e016      	b.n	80083d8 <lfs_dir_relocatingcommit+0x514>
                // we split and id is on tail now
                d->id -= d->m.count;
 80083aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083ac:	889a      	ldrh	r2, [r3, #4]
 80083ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083b0:	8b9b      	ldrh	r3, [r3, #28]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083b8:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80083ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083bc:	f103 0108 	add.w	r1, r3, #8
 80083c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c2:	3320      	adds	r3, #32
 80083c4:	461a      	mov	r2, r3
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7fe fd10 	bl	8006dec <lfs_dir_fetch>
 80083cc:	64b8      	str	r0, [r7, #72]	; 0x48
                if (err) {
 80083ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <lfs_dir_relocatingcommit+0x514>
                    return err;
 80083d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d6:	e011      	b.n	80083fc <lfs_dir_relocatingcommit+0x538>
            while (d->id >= d->m.count && d->m.split) {
 80083d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083da:	889a      	ldrh	r2, [r3, #4]
 80083dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083de:	8b9b      	ldrh	r3, [r3, #28]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d303      	bcc.n	80083ec <lfs_dir_relocatingcommit+0x528>
 80083e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083e6:	7fdb      	ldrb	r3, [r3, #31]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1de      	bne.n	80083aa <lfs_dir_relocatingcommit+0x4e6>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80083ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80083f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f47f af36 	bne.w	8008266 <lfs_dir_relocatingcommit+0x3a2>
                }
            }
        }
    }

    return state;
 80083fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3768      	adds	r7, #104	; 0x68
 8008400:	46bd      	mov	sp, r7
 8008402:	bdb0      	pop	{r4, r5, r7, pc}
 8008404:	080113ac 	.word	0x080113ac
 8008408:	08011d28 	.word	0x08011d28
 800840c:	08011258 	.word	0x08011258

08008410 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8008410:	b5b0      	push	{r4, r5, r7, lr}
 8008412:	b0b2      	sub	sp, #200	; 0xc8
 8008414:	af04      	add	r7, sp, #16
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008426:	e045      	b.n	80084b4 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8008428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800842c:	3308      	adds	r3, #8
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	429a      	cmp	r2, r3
 8008432:	d03a      	beq.n	80084aa <lfs_dir_orphaningcommit+0x9a>
 8008434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008438:	3308      	adds	r3, #8
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fc ff38 	bl	80052b4 <lfs_pair_cmp>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d12f      	bne.n	80084aa <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800844a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800844e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8008450:	2b01      	cmp	r3, #1
 8008452:	d12a      	bne.n	80084aa <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8008454:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d023      	beq.n	80084aa <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8008462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800846e:	429a      	cmp	r2, r3
 8008470:	d91b      	bls.n	80084aa <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8008472:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 f8f4 	bl	8009664 <lfs_file_outline>
 800847c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 8008480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8008488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800848c:	e2a1      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
            }

            err = lfs_file_flush(lfs, f);
 800848e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f001 f908 	bl	80096a8 <lfs_file_flush>
 8008498:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800849c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <lfs_dir_orphaningcommit+0x9a>
                return err;
 80084a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084a8:	e293      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80084aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1b5      	bne.n	8008428 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_mdir_t ldir = *dir;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80084ce:	461d      	mov	r5, r3
 80084d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80084d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80084e2:	f107 031c 	add.w	r3, r7, #28
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7ff fce8 	bl	8007ec4 <lfs_dir_relocatingcommit>
 80084f4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            attrs, attrcount, &pdir);
    if (state < 0) {
 80084f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da02      	bge.n	8008506 <lfs_dir_orphaningcommit+0xf6>
        return state;
 8008500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008504:	e265      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7fc fed0 	bl	80052b4 <lfs_pair_cmp>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d109      	bne.n	800852e <lfs_dir_orphaningcommit+0x11e>
        *dir = ldir;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	461d      	mov	r5, r3
 800851e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8008522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800852a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800852e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008532:	2b02      	cmp	r3, #2
 8008534:	d149      	bne.n	80085ca <lfs_dir_orphaningcommit+0x1ba>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3348      	adds	r3, #72	; 0x48
 800853a:	461a      	mov	r2, r3
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7fe fc70 	bl	8006e24 <lfs_dir_getgstate>
 8008544:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err) {
 8008548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <lfs_dir_orphaningcommit+0x146>
            return err;
 8008550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008554:	e23d      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	65fb      	str	r3, [r7, #92]	; 0x5c
        lpair[1] = pdir.pair[1];
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	663b      	str	r3, [r7, #96]	; 0x60
        lfs_pair_tole32(dir->tail);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	3318      	adds	r3, #24
 8008562:	4618      	mov	r0, r3
 8008564:	f7fc ff17 	bl	8005396 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7ddb      	ldrb	r3, [r3, #23]
 800856c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008570:	051a      	lsls	r2, r3, #20
 8008572:	4bbd      	ldr	r3, [pc, #756]	; (8008868 <lfs_dir_orphaningcommit+0x458>)
 8008574:	4313      	orrs	r3, r2
 8008576:	667b      	str	r3, [r7, #100]	; 0x64
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3318      	adds	r3, #24
 800857c:	66bb      	str	r3, [r7, #104]	; 0x68
 800857e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8008582:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008586:	f107 011c 	add.w	r1, r7, #28
 800858a:	2300      	movs	r3, #0
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	2301      	movs	r3, #1
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4603      	mov	r3, r0
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff fc95 	bl	8007ec4 <lfs_dir_relocatingcommit>
 800859a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	3318      	adds	r3, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fc fedd 	bl	8005362 <lfs_pair_fromle32>
        if (state < 0) {
 80085a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da02      	bge.n	80085b6 <lfs_dir_orphaningcommit+0x1a6>
            return state;
 80085b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085b4:	e20d      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
        }

        ldir = pdir;
 80085b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80085ba:	f107 051c 	add.w	r5, r7, #28
 80085be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80085c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    while (state == LFS_OK_RELOCATED) {
 80085d0:	e1f3      	b.n	80089ba <lfs_dir_orphaningcommit+0x5aa>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80085d2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80085d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085da:	48a4      	ldr	r0, [pc, #656]	; (800886c <lfs_dir_orphaningcommit+0x45c>)
 80085dc:	9003      	str	r0, [sp, #12]
 80085de:	9102      	str	r1, [sp, #8]
 80085e0:	9201      	str	r2, [sp, #4]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	4623      	mov	r3, r4
 80085e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80085ea:	49a1      	ldr	r1, [pc, #644]	; (8008870 <lfs_dir_orphaningcommit+0x460>)
 80085ec:	48a1      	ldr	r0, [pc, #644]	; (8008874 <lfs_dir_orphaningcommit+0x464>)
 80085ee:	f007 faad 	bl	800fb4c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f103 0220 	add.w	r2, r3, #32
 80085fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f7fc fe55 	bl	80052b4 <lfs_pair_cmp>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d105      	bne.n	800861c <lfs_dir_orphaningcommit+0x20c>
            lfs->root[0] = ldir.pair[0];
 8008610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8008616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008624:	e033      	b.n	800868e <lfs_dir_orphaningcommit+0x27e>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8008626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800862a:	f103 0208 	add.w	r2, r3, #8
 800862e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7fc fe3d 	bl	80052b4 <lfs_pair_cmp>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d107      	bne.n	8008650 <lfs_dir_orphaningcommit+0x240>
                d->m.pair[0] = ldir.pair[0];
 8008640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008646:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8008648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800864a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800864e:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8008650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008654:	799b      	ldrb	r3, [r3, #6]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d114      	bne.n	8008684 <lfs_dir_orphaningcommit+0x274>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800865a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800865e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008662:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f7fc fe23 	bl	80052b4 <lfs_pair_cmp>
 800866e:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8008670:	2b00      	cmp	r3, #0
 8008672:	d107      	bne.n	8008684 <lfs_dir_orphaningcommit+0x274>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8008674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800867a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800867c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800867e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8008684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800868e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1c7      	bne.n	8008626 <lfs_dir_orphaningcommit+0x216>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8008696:	f107 021c 	add.w	r2, r7, #28
 800869a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f002 fb79 	bl	800ad98 <lfs_fs_parent>
 80086a6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80086aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da07      	bge.n	80086c2 <lfs_dir_orphaningcommit+0x2b2>
 80086b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086b6:	f113 0f02 	cmn.w	r3, #2
 80086ba:	d002      	beq.n	80086c2 <lfs_dir_orphaningcommit+0x2b2>
            return tag;
 80086bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086c0:	e187      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80086c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086c6:	f113 0f02 	cmn.w	r3, #2
 80086ca:	bf14      	ite	ne
 80086cc:	2301      	movne	r3, #1
 80086ce:	2300      	moveq	r3, #0
 80086d0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        if (tag != LFS_ERR_NOENT) {
 80086d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086d8:	f113 0f02 	cmn.w	r3, #2
 80086dc:	f000 809d 	beq.w	800881a <lfs_dir_orphaningcommit+0x40a>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80086e0:	2101      	movs	r1, #1
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f002 fbae 	bl	800ae44 <lfs_fs_preporphans>
 80086e8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (err) {
 80086ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <lfs_dir_orphaningcommit+0x2ea>
                return err;
 80086f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086f8:	e16b      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80086fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80086fe:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3330      	adds	r3, #48	; 0x30
 8008706:	f107 021c 	add.w	r2, r7, #28
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f7fc ff5e 	bl	80055ce <lfs_gstate_hasmovehere>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d02d      	beq.n	8008774 <lfs_dir_orphaningcommit+0x364>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871c:	4618      	mov	r0, r3
 800871e:	f7fc feaf 	bl	8005480 <lfs_tag_id>
 8008722:	4603      	mov	r3, r0
 8008724:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
                LFS_DEBUG("Fixing move while relocating "
 8008728:	69f8      	ldr	r0, [r7, #28]
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8008730:	494e      	ldr	r1, [pc, #312]	; (800886c <lfs_dir_orphaningcommit+0x45c>)
 8008732:	9102      	str	r1, [sp, #8]
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	f640 02f2 	movw	r2, #2290	; 0x8f2
 800873e:	494c      	ldr	r1, [pc, #304]	; (8008870 <lfs_dir_orphaningcommit+0x460>)
 8008740:	484d      	ldr	r0, [pc, #308]	; (8008878 <lfs_dir_orphaningcommit+0x468>)
 8008742:	f007 fa03 	bl	800fb4c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008746:	2200      	movs	r2, #0
 8008748:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f002 fbb3 	bl	800aeb8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8008752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008756:	4618      	mov	r0, r3
 8008758:	f7fc fe92 	bl	8005480 <lfs_tag_id>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8008764:	4293      	cmp	r3, r2
 8008766:	d205      	bcs.n	8008774 <lfs_dir_orphaningcommit+0x364>
                    tag -= LFS_MKTAG(0, 1, 0);
 8008768:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800876c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	61bb      	str	r3, [r7, #24]
            lfs_pair_tole32(ldir.pair);
 800877c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008780:	4618      	mov	r0, r3
 8008782:	f7fc fe08 	bl	8005396 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8008786:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800878a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800878e:	4293      	cmp	r3, r2
 8008790:	d007      	beq.n	80087a2 <lfs_dir_orphaningcommit+0x392>
 8008792:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8008796:	029b      	lsls	r3, r3, #10
 8008798:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800879c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80087a0:	e000      	b.n	80087a4 <lfs_dir_orphaningcommit+0x394>
 80087a2:	2300      	movs	r3, #0
 80087a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087a6:	2300      	movs	r3, #0
 80087a8:	673b      	str	r3, [r7, #112]	; 0x70
 80087aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087ae:	677b      	str	r3, [r7, #116]	; 0x74
 80087b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80087b6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80087ba:	f107 0214 	add.w	r2, r7, #20
 80087be:	f107 011c 	add.w	r1, r7, #28
 80087c2:	2300      	movs	r3, #0
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	2302      	movs	r3, #2
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4603      	mov	r3, r0
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff fb79 	bl	8007ec4 <lfs_dir_relocatingcommit>
 80087d2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80087d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fc fdc1 	bl	8005362 <lfs_pair_fromle32>
            if (state < 0) {
 80087e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	da02      	bge.n	80087ee <lfs_dir_orphaningcommit+0x3de>
                return state;
 80087e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087ec:	e0f1      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
            }

            if (state == LFS_OK_RELOCATED) {
 80087ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d111      	bne.n	800881a <lfs_dir_orphaningcommit+0x40a>
                lpair[0] = ppair[0];
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                lpair[1] = ppair[1];
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	663b      	str	r3, [r7, #96]	; 0x60
                ldir = pdir;
 80087fe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8008802:	f107 051c 	add.w	r5, r7, #28
 8008806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800880a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800880e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8008818:	e0cf      	b.n	80089ba <lfs_dir_orphaningcommit+0x5aa>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800881a:	f107 021c 	add.w	r2, r7, #28
 800881e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008822:	4619      	mov	r1, r3
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f002 fa2f 	bl	800ac88 <lfs_fs_pred>
 800882a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (err && err != LFS_ERR_NOENT) {
 800882e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <lfs_dir_orphaningcommit+0x436>
 8008836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800883a:	f113 0f02 	cmn.w	r3, #2
 800883e:	d002      	beq.n	8008846 <lfs_dir_orphaningcommit+0x436>
            return err;
 8008840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008844:	e0c5      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8008846:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01a      	beq.n	8008884 <lfs_dir_orphaningcommit+0x474>
 800884e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008852:	f113 0f02 	cmn.w	r3, #2
 8008856:	d115      	bne.n	8008884 <lfs_dir_orphaningcommit+0x474>
 8008858:	4b08      	ldr	r3, [pc, #32]	; (800887c <lfs_dir_orphaningcommit+0x46c>)
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <lfs_dir_orphaningcommit+0x470>)
 800885c:	f640 1113 	movw	r1, #2323	; 0x913
 8008860:	4803      	ldr	r0, [pc, #12]	; (8008870 <lfs_dir_orphaningcommit+0x460>)
 8008862:	f006 fd53 	bl	800f30c <__assert_func>
 8008866:	bf00      	nop
 8008868:	000ffc08 	.word	0x000ffc08
 800886c:	08011354 	.word	0x08011354
 8008870:	08011258 	.word	0x08011258
 8008874:	080114d8 	.word	0x080114d8
 8008878:	08011518 	.word	0x08011518
 800887c:	0801155c 	.word	0x0801155c
 8008880:	08011d44 	.word	0x08011d44

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8008884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008888:	f113 0f02 	cmn.w	r3, #2
 800888c:	f000 8095 	beq.w	80089ba <lfs_dir_orphaningcommit+0x5aa>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3330      	adds	r3, #48	; 0x30
 8008894:	4618      	mov	r0, r3
 8008896:	f7fc fe65 	bl	8005564 <lfs_gstate_hasorphans>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d011      	beq.n	80088c4 <lfs_dir_orphaningcommit+0x4b4>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80088a0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80088a4:	425b      	negs	r3, r3
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f002 fac9 	bl	800ae44 <lfs_fs_preporphans>
 80088b2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 80088b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <lfs_dir_orphaningcommit+0x4b4>
                    return err;
 80088be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088c2:	e086      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80088c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80088c8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3330      	adds	r3, #48	; 0x30
 80088d0:	f107 021c 	add.w	r2, r7, #28
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fc fe79 	bl	80055ce <lfs_gstate_hasmovehere>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01c      	beq.n	800891c <lfs_dir_orphaningcommit+0x50c>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fc fdca 	bl	8005480 <lfs_tag_id>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
                LFS_DEBUG("Fixing move while relocating "
 80088f2:	69f8      	ldr	r0, [r7, #28]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80088fa:	4938      	ldr	r1, [pc, #224]	; (80089dc <lfs_dir_orphaningcommit+0x5cc>)
 80088fc:	9102      	str	r1, [sp, #8]
 80088fe:	9201      	str	r2, [sp, #4]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	4603      	mov	r3, r0
 8008904:	f640 1226 	movw	r2, #2342	; 0x926
 8008908:	4935      	ldr	r1, [pc, #212]	; (80089e0 <lfs_dir_orphaningcommit+0x5d0>)
 800890a:	4836      	ldr	r0, [pc, #216]	; (80089e4 <lfs_dir_orphaningcommit+0x5d4>)
 800890c:	f007 f91e 	bl	800fb4c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008910:	2200      	movs	r2, #0
 8008912:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f002 face 	bl	800aeb8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	65fb      	str	r3, [r7, #92]	; 0x5c
            lpair[1] = pdir.pair[1];
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	663b      	str	r3, [r7, #96]	; 0x60
            lfs_pair_tole32(ldir.pair);
 8008924:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008928:	4618      	mov	r0, r3
 800892a:	f7fc fd34 	bl	8005396 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800892e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8008932:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008936:	4293      	cmp	r3, r2
 8008938:	d007      	beq.n	800894a <lfs_dir_orphaningcommit+0x53a>
 800893a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008944:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008948:	e000      	b.n	800894c <lfs_dir_orphaningcommit+0x53c>
 800894a:	2300      	movs	r3, #0
 800894c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800894e:	2300      	movs	r3, #0
 8008950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008954:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008958:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800895c:	051a      	lsls	r2, r3, #20
 800895e:	4b22      	ldr	r3, [pc, #136]	; (80089e8 <lfs_dir_orphaningcommit+0x5d8>)
 8008960:	4313      	orrs	r3, r2
 8008962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008966:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800896a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800896e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8008972:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008976:	f107 011c 	add.w	r1, r7, #28
 800897a:	2300      	movs	r3, #0
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	2302      	movs	r3, #2
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	4603      	mov	r3, r0
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff fa9d 	bl	8007ec4 <lfs_dir_relocatingcommit>
 800898a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800898e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008992:	4618      	mov	r0, r3
 8008994:	f7fc fce5 	bl	8005362 <lfs_pair_fromle32>
            if (state < 0) {
 8008998:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800899c:	2b00      	cmp	r3, #0
 800899e:	da02      	bge.n	80089a6 <lfs_dir_orphaningcommit+0x596>
                return state;
 80089a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089a4:	e015      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
            }

            ldir = pdir;
 80089a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80089aa:	f107 051c 	add.w	r5, r7, #28
 80089ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80089ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089be:	2b01      	cmp	r3, #1
 80089c0:	f43f ae07 	beq.w	80085d2 <lfs_dir_orphaningcommit+0x1c2>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80089c4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <lfs_dir_orphaningcommit+0x5c0>
 80089cc:	2303      	movs	r3, #3
 80089ce:	e000      	b.n	80089d2 <lfs_dir_orphaningcommit+0x5c2>
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	37b8      	adds	r7, #184	; 0xb8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bdb0      	pop	{r4, r5, r7, pc}
 80089da:	bf00      	nop
 80089dc:	08011354 	.word	0x08011354
 80089e0:	08011258 	.word	0x08011258
 80089e4:	08011518 	.word	0x08011518
 80089e8:	000ffc08 	.word	0x000ffc08

080089ec <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f7ff fd05 	bl	8008410 <lfs_dir_orphaningcommit>
 8008a06:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da01      	bge.n	8008a12 <lfs_dir_commit+0x26>
        return orphans;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	e00d      	b.n	8008a2e <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d009      	beq.n	8008a2c <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f002 faec 	bl	800aff8 <lfs_fs_deorphan>
 8008a20:	6138      	str	r0, [r7, #16]
        if (err) {
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <lfs_dir_commit+0x40>
            return err;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	e000      	b.n	8008a2e <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b08d      	sub	sp, #52	; 0x34
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f103 0108 	add.w	r1, r3, #8
 8008a4a:	1d3a      	adds	r2, r7, #4
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7fe fade 	bl	8007010 <lfs_dir_find>
 8008a54:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da01      	bge.n	8008a60 <lfs_dir_rawopen+0x28>
        return tag;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	e05e      	b.n	8008b1e <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fc fce2 	bl	800542c <lfs_tag_type3>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d002      	beq.n	8008a74 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8008a6e:	f06f 0313 	mvn.w	r3, #19
 8008a72:	e054      	b.n	8008b1e <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fc fd02 	bl	8005480 <lfs_tag_id>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d106      	bne.n	8008a96 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	e01f      	b.n	8008ad6 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fc fcee 	bl	8005480 <lfs_tag_id>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008aa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aac:	f043 0308 	orr.w	r3, r3, #8
 8008ab0:	f107 0214 	add.w	r2, r7, #20
 8008ab4:	9200      	str	r2, [sp, #0]
 8008ab6:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <lfs_dir_rawopen+0xf0>)
 8008ab8:	4621      	mov	r1, r4
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7fd f8c8 	bl	8005c50 <lfs_dir_get>
 8008ac0:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da01      	bge.n	8008acc <lfs_dir_rawopen+0x94>
            return res;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	e028      	b.n	8008b1e <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8008acc:	f107 0314 	add.w	r3, r7, #20
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fc fc46 	bl	8005362 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	f107 0214 	add.w	r2, r7, #20
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7fe f983 	bl	8006dec <lfs_dir_fetch>
 8008ae6:	61f8      	str	r0, [r7, #28]
    if (err) {
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <lfs_dir_rawopen+0xba>
        return err;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	e015      	b.n	8008b1e <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2202      	movs	r2, #2
 8008b12:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7fc fe97 	bl	800584a <lfs_mlist_append>

    return 0;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	372c      	adds	r7, #44	; 0x2c
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd90      	pop	{r4, r7, pc}
 8008b26:	bf00      	nop
 8008b28:	700ffc00 	.word	0x700ffc00

08008b2c <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fc fe65 	bl	8005808 <lfs_mlist_remove>

    return 0;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8008b54:	f44f 7284 	mov.w	r2, #264	; 0x108
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f006 fc7e 	bl	800f45c <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d110      	bne.n	8008b8a <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3308      	adds	r3, #8
 8008b72:	4935      	ldr	r1, [pc, #212]	; (8008c48 <lfs_dir_rawread+0x100>)
 8008b74:	461a      	mov	r2, r3
 8008b76:	460b      	mov	r3, r1
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e05a      	b.n	8008c40 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d110      	bne.n	8008bb4 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	4a2b      	ldr	r2, [pc, #172]	; (8008c4c <lfs_dir_rawread+0x104>)
 8008b9e:	8811      	ldrh	r1, [r2, #0]
 8008ba0:	7892      	ldrb	r2, [r2, #2]
 8008ba2:	8019      	strh	r1, [r3, #0]
 8008ba4:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e045      	b.n	8008c40 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	889a      	ldrh	r2, [r3, #4]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	8b9b      	ldrh	r3, [r3, #28]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d11a      	bne.n	8008bf6 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	7fdb      	ldrb	r3, [r3, #31]
 8008bc4:	f083 0301 	eor.w	r3, r3, #1
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <lfs_dir_rawread+0x8a>
                return false;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e036      	b.n	8008c40 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f103 0108 	add.w	r1, r3, #8
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3320      	adds	r3, #32
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7fe f904 	bl	8006dec <lfs_dir_fetch>
 8008be4:	6178      	str	r0, [r7, #20]
            if (err) {
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <lfs_dir_rawread+0xa8>
                return err;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	e027      	b.n	8008c40 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f103 0108 	add.w	r1, r3, #8
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	889a      	ldrh	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f7fe f940 	bl	8006e88 <lfs_dir_getinfo>
 8008c08:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <lfs_dir_rawread+0xd4>
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f113 0f02 	cmn.w	r3, #2
 8008c16:	d001      	beq.n	8008c1c <lfs_dir_rawread+0xd4>
            return err;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	e011      	b.n	8008c40 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	889b      	ldrh	r3, [r3, #4]
 8008c20:	3301      	adds	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f113 0f02 	cmn.w	r3, #2
 8008c2e:	d100      	bne.n	8008c32 <lfs_dir_rawread+0xea>
    while (true) {
 8008c30:	e7c0      	b.n	8008bb4 <lfs_dir_rawread+0x6c>
            break;
 8008c32:	bf00      	nop
        }
    }

    dir->pos += 1;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8008c3e:	2301      	movs	r3, #1
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	080113a4 	.word	0x080113a4
 8008c4c:	080113a8 	.word	0x080113a8

08008c50 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	3b08      	subs	r3, #8
 8008c68:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <lfs_ctz_index+0x2e>
        return 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e01c      	b.n	8008cb8 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fb ff3c 	bl	8004b00 <lfs_popc>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	1ad2      	subs	r2, r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	1ad4      	subs	r4, r2, r3
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7fb ff2a 	bl	8004b00 <lfs_popc>
 8008cac:	4603      	mov	r3, r0
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	1ae2      	subs	r2, r4, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	601a      	str	r2, [r3, #0]
    return i;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	371c      	adds	r7, #28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd90      	pop	{r4, r7, pc}

08008cc0 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	b08f      	sub	sp, #60	; 0x3c
 8008cc4:	af04      	add	r7, sp, #16
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d108      	bne.n	8008ce6 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8008cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cda:	601a      	str	r2, [r3, #0]
        *off = 0;
 8008cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
        return 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e053      	b.n	8008d8e <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff ffac 	bl	8008c50 <lfs_ctz_index>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8008cfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d00:	4619      	mov	r1, r3
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff ffa4 	bl	8008c50 <lfs_ctz_index>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8008d0c:	e034      	b.n	8008d78 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8008d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	3301      	adds	r3, #1
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fb fed3 	bl	8004ac2 <lfs_npw2>
 8008d1c:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8008d1e:	1e5c      	subs	r4, r3, #1
 8008d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d22:	f7fb fede 	bl	8004ae2 <lfs_ctz>
 8008d26:	4603      	mov	r3, r0
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7fb fe92 	bl	8004a54 <lfs_min>
 8008d30:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	0092      	lsls	r2, r2, #2
 8008d38:	2104      	movs	r1, #4
 8008d3a:	9103      	str	r1, [sp, #12]
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	9102      	str	r1, [sp, #8]
 8008d40:	9201      	str	r2, [sp, #4]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	2304      	movs	r3, #4
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7fb ff5e 	bl	8004c0c <lfs_bd_read>
 8008d50:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fb feed 	bl	8004b34 <lfs_fromle32>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	603b      	str	r3, [r7, #0]
        if (err) {
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <lfs_ctz_find+0xa8>
            return err;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	e012      	b.n	8008d8e <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8008d68:	2201      	movs	r2, #1
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d8c6      	bhi.n	8008d0e <lfs_ctz_find+0x4e>
    }

    *block = head;
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d84:	601a      	str	r2, [r3, #0]
    *off = pos;
 8008d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8a:	601a      	str	r2, [r3, #0]
    return 0;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	372c      	adds	r7, #44	; 0x2c
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd90      	pop	{r4, r7, pc}
	...

08008d98 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b092      	sub	sp, #72	; 0x48
 8008d9c:	af04      	add	r7, sp, #16
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8008da6:	f107 0320 	add.w	r3, r7, #32
 8008daa:	4619      	mov	r1, r3
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7fc fdb5 	bl	800591c <lfs_alloc>
 8008db2:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <lfs_ctz_extend+0x26>
            return err;
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	e0ea      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7fc fa14 	bl	80051f0 <lfs_bd_erase>
 8008dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8008dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d006      	beq.n	8008dde <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008dd6:	f000 80cb 	beq.w	8008f70 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	e0da      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
            }

            if (size == 0) {
 8008dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d107      	bne.n	8008df4 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8008de4:	6a3a      	ldr	r2, [r7, #32]
 8008de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8008dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
                return 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e0cf      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
            }

            lfs_size_t noff = size - 1;
 8008df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df6:	3b01      	subs	r3, #1
 8008df8:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8008dfa:	f107 031c 	add.w	r3, r7, #28
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff ff25 	bl	8008c50 <lfs_ctz_index>
 8008e06:	4603      	mov	r3, r0
 8008e08:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e14:	69da      	ldr	r2, [r3, #28]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d044      	beq.n	8008ea6 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e20:	e035      	b.n	8008e8e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e26:	1ad2      	subs	r2, r2, r3
 8008e28:	2301      	movs	r3, #1
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	f107 0317 	add.w	r3, r7, #23
 8008e30:	9302      	str	r3, [sp, #8]
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	2100      	movs	r1, #0
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7fb fee3 	bl	8004c0c <lfs_bd_read>
 8008e46:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <lfs_ctz_extend+0xba>
                        return err;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	e0a0      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
                    }

                    err = lfs_bd_prog(lfs,
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	2201      	movs	r2, #1
 8008e56:	9203      	str	r2, [sp, #12]
 8008e58:	f107 0217 	add.w	r2, r7, #23
 8008e5c:	9202      	str	r2, [sp, #8]
 8008e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e60:	9201      	str	r2, [sp, #4]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	2301      	movs	r3, #1
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7fc f914 	bl	8005098 <lfs_bd_prog>
 8008e70:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008e7e:	d101      	bne.n	8008e84 <lfs_ctz_extend+0xec>
                            goto relocate;
 8008e80:	bf00      	nop
                    goto relocate;
 8008e82:	e075      	b.n	8008f70 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8008e86:	e085      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d3c5      	bcc.n	8008e22 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8008e96:	6a3a      	ldr	r2, [r7, #32]
 8008e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9a:	601a      	str	r2, [r3, #0]
                *off = noff;
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea0:	601a      	str	r2, [r3, #0]
                return 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e076      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
            }

            // append block
            index += 1;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8008eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eae:	f7fb fe18 	bl	8004ae2 <lfs_ctz>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec0:	e049      	b.n	8008f56 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fb fe40 	bl	8004b4a <lfs_tole32>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed2:	0092      	lsls	r2, r2, #2
 8008ed4:	2104      	movs	r1, #4
 8008ed6:	9103      	str	r1, [sp, #12]
 8008ed8:	f107 0118 	add.w	r1, r7, #24
 8008edc:	9102      	str	r1, [sp, #8]
 8008ede:	9201      	str	r2, [sp, #4]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	68b9      	ldr	r1, [r7, #8]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7fc f8d5 	bl	8005098 <lfs_bd_prog>
 8008eee:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fb fe1e 	bl	8004b34 <lfs_fromle32>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	61bb      	str	r3, [r7, #24]
                if (err) {
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008f08:	d034      	beq.n	8008f74 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	e042      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
                }

                if (i != skips-1) {
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	3b01      	subs	r3, #1
 8008f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d01b      	beq.n	8008f50 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1c:	0092      	lsls	r2, r2, #2
 8008f1e:	2104      	movs	r1, #4
 8008f20:	9103      	str	r1, [sp, #12]
 8008f22:	f107 0118 	add.w	r1, r7, #24
 8008f26:	9102      	str	r1, [sp, #8]
 8008f28:	9201      	str	r2, [sp, #4]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2304      	movs	r3, #4
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	2100      	movs	r1, #0
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7fb fe6a 	bl	8004c0c <lfs_bd_read>
 8008f38:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb fdf9 	bl	8004b34 <lfs_fromle32>
 8008f42:	4603      	mov	r3, r0
 8008f44:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <lfs_ctz_extend+0x1b8>
                        return err;
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	e021      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
            for (lfs_off_t i = 0; i < skips; i++) {
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	3301      	adds	r3, #1
 8008f54:	633b      	str	r3, [r7, #48]	; 0x30
 8008f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d3b1      	bcc.n	8008ec2 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8008f5e:	6a3a      	ldr	r2, [r7, #32]
 8008f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f62:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	009a      	lsls	r2, r3, #2
 8008f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6a:	601a      	str	r2, [r3, #0]
            return 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	e011      	b.n	8008f94 <lfs_ctz_extend+0x1fc>
                    goto relocate;
 8008f70:	bf00      	nop
 8008f72:	e000      	b.n	8008f76 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8008f74:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8008f76:	6a3a      	ldr	r2, [r7, #32]
 8008f78:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <lfs_ctz_extend+0x204>)
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	f640 22dd 	movw	r2, #2781	; 0xadd
 8008f82:	4907      	ldr	r1, [pc, #28]	; (8008fa0 <lfs_ctz_extend+0x208>)
 8008f84:	4807      	ldr	r0, [pc, #28]	; (8008fa4 <lfs_ctz_extend+0x20c>)
 8008f86:	f006 fde1 	bl	800fb4c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f7fb fe17 	bl	8004bc0 <lfs_cache_drop>
    while (true) {
 8008f92:	e708      	b.n	8008da6 <lfs_ctz_extend+0xe>
    }
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3738      	adds	r7, #56	; 0x38
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	08011354 	.word	0x08011354
 8008fa0:	08011258 	.word	0x08011258
 8008fa4:	080113d4 	.word	0x080113d4

08008fa8 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b090      	sub	sp, #64	; 0x40
 8008fac:	af04      	add	r7, sp, #16
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <lfs_ctz_traverse+0x18>
        return 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e06d      	b.n	800909c <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	f107 031c 	add.w	r3, r7, #28
 8008fca:	4619      	mov	r1, r3
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7ff fe3f 	bl	8008c50 <lfs_ctz_index>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008fdc:	4798      	blx	r3
 8008fde:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <lfs_ctz_traverse+0x42>
            return err;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	e058      	b.n	800909c <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <lfs_ctz_traverse+0x4c>
            return 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	e053      	b.n	800909c <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	f1c3 0302 	rsb	r3, r3, #2
 8008ffe:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8009000:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8009002:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8009004:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8009006:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8009008:	9303      	str	r3, [sp, #12]
 800900a:	f107 0314 	add.w	r3, r7, #20
 800900e:	9302      	str	r3, [sp, #8]
 8009010:	2300      	movs	r3, #0
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	4613      	mov	r3, r2
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7fb fdf4 	bl	8004c0c <lfs_bd_read>
 8009024:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	4618      	mov	r0, r3
 800902a:	f7fb fd83 	bl	8004b34 <lfs_fromle32>
 800902e:	4603      	mov	r3, r0
 8009030:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	4618      	mov	r0, r3
 8009036:	f7fb fd7d 	bl	8004b34 <lfs_fromle32>
 800903a:	4603      	mov	r3, r0
 800903c:	61bb      	str	r3, [r7, #24]
        if (err) {
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <lfs_ctz_traverse+0xa0>
            return err;
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	e029      	b.n	800909c <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8009048:	2300      	movs	r3, #0
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
 800904c:	e013      	b.n	8009076 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009056:	4413      	add	r3, r2
 8009058:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905e:	4611      	mov	r1, r2
 8009060:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009062:	4798      	blx	r3
 8009064:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <lfs_ctz_traverse+0xc8>
                return err;
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	e015      	b.n	800909c <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	3301      	adds	r3, #1
 8009074:	62bb      	str	r3, [r7, #40]	; 0x28
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	3b01      	subs	r3, #1
 800907a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800907c:	429a      	cmp	r2, r3
 800907e:	dbe6      	blt.n	800904e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	3b01      	subs	r3, #1
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800908a:	4413      	add	r3, r2
 800908c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009090:	603b      	str	r3, [r7, #0]
        index -= count;
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800909a:	e79c      	b.n	8008fd6 <lfs_ctz_traverse+0x2e>
    }
}
 800909c:	4618      	mov	r0, r3
 800909e:	3730      	adds	r7, #48	; 0x30
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80090a4:	b5b0      	push	{r4, r5, r7, lr}
 80090a6:	b094      	sub	sp, #80	; 0x50
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	f003 0302 	and.w	r3, r3, #2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d008      	beq.n	80090ce <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f002 f93f 	bl	800b340 <lfs_fs_forceconsistency>
 80090c2:	63b8      	str	r0, [r7, #56]	; 0x38
        if (err) {
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <lfs_file_rawopencfg+0x2a>
            return err;
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	e1b0      	b.n	8009430 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090d2:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2200      	movs	r2, #0
 80090de:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2200      	movs	r2, #0
 80090ea:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f103 0108 	add.w	r1, r3, #8
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	3304      	adds	r3, #4
 80090f6:	1d3a      	adds	r2, r7, #4
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7fd ff89 	bl	8007010 <lfs_dir_find>
 80090fe:	6438      	str	r0, [r7, #64]	; 0x40
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8009100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	da0c      	bge.n	8009120 <lfs_file_rawopencfg+0x7c>
 8009106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009108:	f113 0f02 	cmn.w	r3, #2
 800910c:	d105      	bne.n	800911a <lfs_file_rawopencfg+0x76>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	889b      	ldrh	r3, [r3, #4]
 8009112:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009116:	4293      	cmp	r3, r2
 8009118:	d102      	bne.n	8009120 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800911a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800911c:	647b      	str	r3, [r7, #68]	; 0x44
        goto cleanup;
 800911e:	e17c      	b.n	800941a <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2201      	movs	r2, #1
 8009124:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7fc fb8e 	bl	800584a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800912e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009130:	f113 0f02 	cmn.w	r3, #2
 8009134:	d14e      	bne.n	80091d4 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8009140:	f06f 0301 	mvn.w	r3, #1
 8009144:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 8009146:	e168      	b.n	800941a <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4618      	mov	r0, r3
 800914c:	f7f7 f840 	bl	80001d0 <strlen>
 8009150:	6378      	str	r0, [r7, #52]	; 0x34
        if (nlen > lfs->name_max) {
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009158:	429a      	cmp	r2, r3
 800915a:	d903      	bls.n	8009164 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800915c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009160:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 8009162:	e15a      	b.n	800941a <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f103 0108 	add.w	r1, r3, #8
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	889b      	ldrh	r3, [r3, #4]
 800916e:	029b      	lsls	r3, r3, #10
 8009170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009178:	617b      	str	r3, [r7, #20]
 800917a:	2300      	movs	r3, #0
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	889b      	ldrh	r3, [r3, #4]
 8009182:	029a      	lsls	r2, r3, #10
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	4313      	orrs	r3, r2
 8009188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800918c:	61fb      	str	r3, [r7, #28]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	623b      	str	r3, [r7, #32]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	889b      	ldrh	r3, [r3, #4]
 8009196:	029b      	lsls	r3, r3, #10
 8009198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800919c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
 80091a2:	2300      	movs	r3, #0
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a6:	f107 0214 	add.w	r2, r7, #20
 80091aa:	2303      	movs	r3, #3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7ff fc1d 	bl	80089ec <lfs_dir_commit>
 80091b2:	6478      	str	r0, [r7, #68]	; 0x44
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80091b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b6:	f113 0f1c 	cmn.w	r3, #28
 80091ba:	d001      	beq.n	80091c0 <lfs_file_rawopencfg+0x11c>
 80091bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091be:	e001      	b.n	80091c4 <lfs_file_rawopencfg+0x120>
 80091c0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80091c4:	647b      	str	r3, [r7, #68]	; 0x44
        if (err) {
 80091c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f040 8125 	bne.w	8009418 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80091ce:	4b9a      	ldr	r3, [pc, #616]	; (8009438 <lfs_file_rawopencfg+0x394>)
 80091d0:	643b      	str	r3, [r7, #64]	; 0x40
 80091d2:	e044      	b.n	800925e <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80091de:	f06f 0310 	mvn.w	r3, #16
 80091e2:	647b      	str	r3, [r7, #68]	; 0x44
        goto cleanup;
 80091e4:	e119      	b.n	800941a <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80091e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fc f91f 	bl	800542c <lfs_tag_type3>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d003      	beq.n	80091fc <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80091f4:	f06f 0314 	mvn.w	r3, #20
 80091f8:	647b      	str	r3, [r7, #68]	; 0x44
        goto cleanup;
 80091fa:	e10e      	b.n	800941a <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00e      	beq.n	8009224 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	889b      	ldrh	r3, [r3, #4]
 800920a:	029b      	lsls	r3, r3, #10
 800920c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009214:	643b      	str	r3, [r7, #64]	; 0x40
        file->flags |= LFS_F_DIRTY;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	631a      	str	r2, [r3, #48]	; 0x30
 8009222:	e01c      	b.n	800925e <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	889b      	ldrh	r3, [r3, #4]
 800922e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8009230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009234:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800923c:	9200      	str	r2, [sp, #0]
 800923e:	4a7f      	ldr	r2, [pc, #508]	; (800943c <lfs_file_rawopencfg+0x398>)
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f7fc fd05 	bl	8005c50 <lfs_dir_get>
 8009246:	6438      	str	r0, [r7, #64]	; 0x40
        if (tag < 0) {
 8009248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	da02      	bge.n	8009254 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800924e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009250:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 8009252:	e0e2      	b.n	800941a <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	3328      	adds	r3, #40	; 0x28
 8009258:	4618      	mov	r0, r3
 800925a:	f7fc fa18 	bl	800568e <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009262:	e063      	b.n	800932c <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d03c      	beq.n	80092ea <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	6859      	ldr	r1, [r3, #4]
 800927c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800927e:	4613      	mov	r3, r2
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	440b      	add	r3, r1
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800928e:	051a      	lsls	r2, r3, #20
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	889b      	ldrh	r3, [r3, #4]
 8009294:	029b      	lsls	r3, r3, #10
 8009296:	ea42 0103 	orr.w	r1, r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929e:	6858      	ldr	r0, [r3, #4]
 80092a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4403      	add	r3, r0
 80092ac:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80092ae:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b6:	6859      	ldr	r1, [r3, #4]
 80092b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092ba:	4613      	mov	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	4603      	mov	r3, r0
 80092ca:	4a5d      	ldr	r2, [pc, #372]	; (8009440 <lfs_file_rawopencfg+0x39c>)
 80092cc:	4621      	mov	r1, r4
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f7fc fcbe 	bl	8005c50 <lfs_dir_get>
 80092d4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0 && res != LFS_ERR_NOENT) {
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da06      	bge.n	80092ea <lfs_file_rawopencfg+0x246>
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	f113 0f02 	cmn.w	r3, #2
 80092e2:	d002      	beq.n	80092ea <lfs_file_rawopencfg+0x246>
                err = res;
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	647b      	str	r3, [r7, #68]	; 0x44
                goto cleanup;
 80092e8:	e097      	b.n	800941a <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d017      	beq.n	8009326 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fa:	6859      	ldr	r1, [r3, #4]
 80092fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092fe:	4613      	mov	r3, r2
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930e:	429a      	cmp	r2, r3
 8009310:	d903      	bls.n	800931a <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8009312:	f06f 031b 	mvn.w	r3, #27
 8009316:	647b      	str	r3, [r7, #68]	; 0x44
                goto cleanup;
 8009318:	e07f      	b.n	800941a <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	3301      	adds	r3, #1
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009334:	429a      	cmp	r2, r3
 8009336:	d395      	bcc.n	8009264 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d005      	beq.n	800934e <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	64da      	str	r2, [r3, #76]	; 0x4c
 800934c:	e010      	b.n	8009370 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009354:	4618      	mov	r0, r3
 8009356:	f7fb fc1c 	bl	8004b92 <lfs_malloc>
 800935a:	4602      	mov	r2, r0
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8009368:	f06f 030b 	mvn.w	r3, #11
 800936c:	647b      	str	r3, [r7, #68]	; 0x44
            goto cleanup;
 800936e:	e054      	b.n	800941a <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	3340      	adds	r3, #64	; 0x40
 8009374:	4619      	mov	r1, r3
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7fb fc31 	bl	8004bde <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800937c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800937e:	4618      	mov	r0, r3
 8009380:	f7fc f854 	bl	800542c <lfs_tag_type3>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	f240 2301 	movw	r3, #513	; 0x201
 800938c:	429a      	cmp	r2, r3
 800938e:	d141      	bne.n	8009414 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f06f 0201 	mvn.w	r2, #1
 8009396:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8009398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939a:	4618      	mov	r0, r3
 800939c:	f7fc f880 	bl	80054a0 <lfs_tag_size>
 80093a0:	4602      	mov	r2, r0
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2200      	movs	r2, #0
 80093be:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d020      	beq.n	8009414 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	889b      	ldrh	r3, [r3, #4]
 80093dc:	029c      	lsls	r4, r3, #10
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fb fb34 	bl	8004a54 <lfs_min>
 80093ec:	4603      	mov	r3, r0
 80093ee:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80093f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	4a0f      	ldr	r2, [pc, #60]	; (800943c <lfs_file_rawopencfg+0x398>)
 80093fe:	4629      	mov	r1, r5
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7fc fc25 	bl	8005c50 <lfs_dir_get>
 8009406:	6338      	str	r0, [r7, #48]	; 0x30
            if (res < 0) {
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	2b00      	cmp	r3, #0
 800940c:	da02      	bge.n	8009414 <lfs_file_rawopencfg+0x370>
                err = res;
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	647b      	str	r3, [r7, #68]	; 0x44
                goto cleanup;
 8009412:	e002      	b.n	800941a <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8009414:	2300      	movs	r3, #0
 8009416:	e00b      	b.n	8009430 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8009418:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 f823 	bl	8009474 <lfs_file_rawclose>
    return err;
 800942e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009430:	4618      	mov	r0, r3
 8009432:	3748      	adds	r7, #72	; 0x48
 8009434:	46bd      	mov	sp, r7
 8009436:	bdb0      	pop	{r4, r5, r7, pc}
 8009438:	20100000 	.word	0x20100000
 800943c:	700ffc00 	.word	0x700ffc00
 8009440:	7ffffc00 	.word	0x7ffffc00

08009444 <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af02      	add	r7, sp, #8
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8009452:	4b07      	ldr	r3, [pc, #28]	; (8009470 <lfs_file_rawopen+0x2c>)
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7ff fe21 	bl	80090a4 <lfs_file_rawopencfg>
 8009462:	6178      	str	r0, [r7, #20]
    return err;
 8009464:	697b      	ldr	r3, [r7, #20]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	08011d5c 	.word	0x08011d5c

08009474 <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9e5 	bl	8009850 <lfs_file_rawsync>
 8009486:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7fc f9bc 	bl	8005808 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d104      	bne.n	80094a4 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fb fb83 	bl	8004baa <lfs_free>
    }

    return err;
 80094a4:	68fb      	ldr	r3, [r7, #12]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80094b0:	b590      	push	{r4, r7, lr}
 80094b2:	b08d      	sub	sp, #52	; 0x34
 80094b4:	af06      	add	r7, sp, #24
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80094ba:	f107 030c 	add.w	r3, r7, #12
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7fc fa2b 	bl	800591c <lfs_alloc>
 80094c6:	6138      	str	r0, [r7, #16]
        if (err) {
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <lfs_file_relocate+0x22>
            return err;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	e0bc      	b.n	800964c <lfs_file_relocate+0x19c>
        }

        err = lfs_bd_erase(lfs, nblock);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7fb fe8a 	bl	80051f0 <lfs_bd_erase>
 80094dc:	6138      	str	r0, [r7, #16]
        if (err) {
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d006      	beq.n	80094f2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80094ea:	f000 809b 	beq.w	8009624 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	e0ac      	b.n	800964c <lfs_file_relocate+0x19c>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80094f2:	2300      	movs	r3, #0
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	e069      	b.n	80095cc <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d027      	beq.n	8009554 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f103 0008 	add.w	r0, r3, #8
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	889b      	ldrh	r3, [r3, #4]
 800951c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800951e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009526:	2101      	movs	r1, #1
 8009528:	9105      	str	r1, [sp, #20]
 800952a:	f107 010b 	add.w	r1, r7, #11
 800952e:	9104      	str	r1, [sp, #16]
 8009530:	6979      	ldr	r1, [r7, #20]
 8009532:	9103      	str	r1, [sp, #12]
 8009534:	9302      	str	r3, [sp, #8]
 8009536:	4b47      	ldr	r3, [pc, #284]	; (8009654 <lfs_file_relocate+0x1a4>)
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	9200      	str	r2, [sp, #0]
 800953c:	4623      	mov	r3, r4
 800953e:	2200      	movs	r2, #0
 8009540:	4601      	mov	r1, r0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fc fb9f 	bl	8005c86 <lfs_dir_getread>
 8009548:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01e      	beq.n	800958e <lfs_file_relocate+0xde>
                    return err;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	e07b      	b.n	800964c <lfs_file_relocate+0x19c>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800955a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	1ad4      	subs	r4, r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	2201      	movs	r2, #1
 800956a:	9203      	str	r2, [sp, #12]
 800956c:	f107 020b 	add.w	r2, r7, #11
 8009570:	9202      	str	r2, [sp, #8]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	9201      	str	r2, [sp, #4]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4623      	mov	r3, r4
 800957a:	4602      	mov	r2, r0
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7fb fb45 	bl	8004c0c <lfs_bd_read>
 8009582:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <lfs_file_relocate+0xde>
                    return err;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	e05e      	b.n	800964c <lfs_file_relocate+0x19c>
                }
            }

            err = lfs_bd_prog(lfs,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f103 0110 	add.w	r1, r3, #16
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	9203      	str	r2, [sp, #12]
 800959c:	f107 020b 	add.w	r2, r7, #11
 80095a0:	9202      	str	r2, [sp, #8]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	9201      	str	r2, [sp, #4]
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	2301      	movs	r3, #1
 80095aa:	4602      	mov	r2, r0
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fb fd73 	bl	8005098 <lfs_bd_prog>
 80095b2:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d005      	beq.n	80095c6 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80095c0:	d032      	beq.n	8009628 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	e042      	b.n	800964c <lfs_file_relocate+0x19c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	3301      	adds	r3, #1
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d390      	bcc.n	80094f8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69d9      	ldr	r1, [r3, #28]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	461a      	mov	r2, r3
 80095e6:	f005 ff2e 	bl	800f446 <memcpy>
        file->cache.block = lfs->pcache.block;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	695a      	ldr	r2, [r3, #20]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3310      	adds	r3, #16
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fb fae8 	bl	8004bde <lfs_cache_zero>

        file->block = nblock;
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009618:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8009620:	2300      	movs	r3, #0
 8009622:	e013      	b.n	800964c <lfs_file_relocate+0x19c>
                goto relocate;
 8009624:	bf00      	nop
 8009626:	e000      	b.n	800962a <lfs_file_relocate+0x17a>
                    goto relocate;
 8009628:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <lfs_file_relocate+0x1a8>)
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	f640 4211 	movw	r2, #3089	; 0xc11
 8009636:	4909      	ldr	r1, [pc, #36]	; (800965c <lfs_file_relocate+0x1ac>)
 8009638:	4809      	ldr	r0, [pc, #36]	; (8009660 <lfs_file_relocate+0x1b0>)
 800963a:	f006 fa87 	bl	800fb4c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3310      	adds	r3, #16
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7fb fabb 	bl	8004bc0 <lfs_cache_drop>
    while (true) {
 800964a:	e736      	b.n	80094ba <lfs_file_relocate+0xa>
    }
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	bd90      	pop	{r4, r7, pc}
 8009654:	fff7fc00 	.word	0xfff7fc00
 8009658:	08011354 	.word	0x08011354
 800965c:	08011258 	.word	0x08011258
 8009660:	080113d4 	.word	0x080113d4

08009664 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7fc f930 	bl	80058dc <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff ff16 	bl	80094b0 <lfs_file_relocate>
 8009684:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <lfs_file_outline+0x2c>
        return err;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	e006      	b.n	800969e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80096a8:	b590      	push	{r4, r7, lr}
 80096aa:	b09f      	sub	sp, #124	; 0x7c
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d011      	beq.n	80096e2 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	3340      	adds	r3, #64	; 0x40
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7fb fa75 	bl	8004bc0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 80a5 	beq.w	800983a <lfs_file_flush+0x192>
        lfs_off_t pos = file->pos;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f4:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d177      	bne.n	80097f2 <lfs_file_flush+0x14a>
            // copy over anything after current branch
            lfs_file_t orig = {
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	2254      	movs	r2, #84	; 0x54
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f005 fea6 	bl	800f45c <memset>
                .ctz.head = file->ctz.head,
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800971a:	63bb      	str	r3, [r7, #56]	; 0x38
 800971c:	2301      	movs	r3, #1
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8009724:	643b      	str	r3, [r7, #64]	; 0x40
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800972c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800972e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fb fa42 	bl	8004bc0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800973c:	e02b      	b.n	8009796 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800973e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8009742:	f107 010c 	add.w	r1, r7, #12
 8009746:	2301      	movs	r3, #1
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f90d 	bl	8009968 <lfs_file_flushedread>
 800974e:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8009750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009752:	2b00      	cmp	r3, #0
 8009754:	da01      	bge.n	800975a <lfs_file_flush+0xb2>
                    return res;
 8009756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009758:	e070      	b.n	800983c <lfs_file_flush+0x194>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800975a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800975e:	2301      	movs	r3, #1
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa08 	bl	8009b78 <lfs_file_flushedwrite>
 8009768:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800976a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800976c:	2b00      	cmp	r3, #0
 800976e:	da01      	bge.n	8009774 <lfs_file_flush+0xcc>
                    return res;
 8009770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009772:	e063      	b.n	800983c <lfs_file_flush+0x194>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977c:	d00b      	beq.n	8009796 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800977e:	f107 030c 	add.w	r3, r7, #12
 8009782:	3340      	adds	r3, #64	; 0x40
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7fb fa1a 	bl	8004bc0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fb fa15 	bl	8004bc0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	429a      	cmp	r2, r3
 80097a0:	d3cd      	bcc.n	800973e <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	2301      	movs	r3, #1
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7fb fbc3 	bl	8004f38 <lfs_bd_flush>
 80097b2:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80097b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d027      	beq.n	800980a <lfs_file_flush+0x162>
                    if (err == LFS_ERR_CORRUPT) {
 80097ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80097c0:	d001      	beq.n	80097c6 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80097c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097c4:	e03a      	b.n	800983c <lfs_file_flush+0x194>
                        goto relocate;
 80097c6:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097cc:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <lfs_file_flush+0x19c>)
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	4613      	mov	r3, r2
 80097d2:	f44f 6246 	mov.w	r2, #3168	; 0xc60
 80097d6:	491c      	ldr	r1, [pc, #112]	; (8009848 <lfs_file_flush+0x1a0>)
 80097d8:	481c      	ldr	r0, [pc, #112]	; (800984c <lfs_file_flush+0x1a4>)
 80097da:	f006 f9b7 	bl	800fb4c <iprintf>
                err = lfs_file_relocate(lfs, file);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff fe65 	bl	80094b0 <lfs_file_relocate>
 80097e6:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80097e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0d9      	beq.n	80097a2 <lfs_file_flush+0xfa>
                    return err;
 80097ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097f0:	e024      	b.n	800983c <lfs_file_flush+0x194>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fb f919 	bl	8004a34 <lfs_max>
 8009802:	4602      	mov	r2, r0
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	635a      	str	r2, [r3, #52]	; 0x34
 8009808:	e000      	b.n	800980c <lfs_file_flush+0x164>
                break;
 800980a:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009838:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3774      	adds	r7, #116	; 0x74
 8009840:	46bd      	mov	sp, r7
 8009842:	bd90      	pop	{r4, r7, pc}
 8009844:	08011354 	.word	0x08011354
 8009848:	08011258 	.word	0x08011258
 800984c:	080113d4 	.word	0x080113d4

08009850 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b08c      	sub	sp, #48	; 0x30
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8009866:	2300      	movs	r3, #0
 8009868:	e07a      	b.n	8009960 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ff1b 	bl	80096a8 <lfs_file_flush>
 8009872:	6238      	str	r0, [r7, #32]
    if (err) {
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d007      	beq.n	800988a <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	e06a      	b.n	8009960 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d063      	beq.n	800995e <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	4618      	mov	r0, r3
 800989c:	f7fb fcef 	bl	800527e <lfs_pair_isnull>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f083 0301 	eor.w	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d058      	beq.n	800995e <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d009      	beq.n	80098cc <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80098b8:	f240 2301 	movw	r3, #513	; 0x201
 80098bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            buffer = file->cache.buffer;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28
            size = file->ctz.size;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
 80098ca:	e014      	b.n	80098f6 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80098cc:	f240 2302 	movw	r3, #514	; 0x202
 80098d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	3228      	adds	r2, #40	; 0x28
 80098da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098de:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80098e2:	f107 0308 	add.w	r3, r7, #8
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fb fee9 	bl	80056be <lfs_ctz_tole32>
            buffer = &ctz;
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	62bb      	str	r3, [r7, #40]	; 0x28
            size = sizeof(ctz);
 80098f2:	2308      	movs	r3, #8
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	f103 0108 	add.w	r1, r3, #8
 80098fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098fe:	051a      	lsls	r2, r3, #20
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	889b      	ldrh	r3, [r3, #4]
 8009904:	029b      	lsls	r3, r3, #10
 8009906:	431a      	orrs	r2, r3
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	4313      	orrs	r3, r2
 800990c:	613b      	str	r3, [r7, #16]
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	889b      	ldrh	r3, [r3, #4]
 8009916:	029a      	lsls	r2, r3, #10
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	4313      	orrs	r3, r2
 8009920:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	f107 0210 	add.w	r2, r7, #16
 8009932:	2302      	movs	r3, #2
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff f859 	bl	80089ec <lfs_dir_commit>
 800993a:	6238      	str	r0, [r7, #32]
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	e006      	b.n	8009960 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3730      	adds	r7, #48	; 0x30
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8009968:	b5b0      	push	{r4, r5, r7, lr}
 800996a:	b090      	sub	sp, #64	; 0x40
 800996c:	af06      	add	r7, sp, #24
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	429a      	cmp	r2, r3
 8009988:	d301      	bcc.n	800998e <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800998a:	2300      	movs	r3, #0
 800998c:	e0b7      	b.n	8009afe <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	4619      	mov	r1, r3
 800999a:	6838      	ldr	r0, [r7, #0]
 800999c:	f7fb f85a 	bl	8004a54 <lfs_min>
 80099a0:	6038      	str	r0, [r7, #0]
    nsize = size;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80099a6:	e0a5      	b.n	8009af4 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d006      	beq.n	80099c2 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099bc:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80099be:	429a      	cmp	r2, r3
 80099c0:	d130      	bne.n	8009a24 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d11c      	bne.n	8009a08 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	3138      	adds	r1, #56	; 0x38
 80099e4:	68b8      	ldr	r0, [r7, #8]
 80099e6:	303c      	adds	r0, #60	; 0x3c
 80099e8:	9003      	str	r0, [sp, #12]
 80099ea:	9102      	str	r1, [sp, #8]
 80099ec:	9201      	str	r2, [sp, #4]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	462b      	mov	r3, r5
 80099f2:	4622      	mov	r2, r4
 80099f4:	2100      	movs	r1, #0
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7ff f962 	bl	8008cc0 <lfs_ctz_find>
 80099fc:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d009      	beq.n	8009a18 <lfs_file_flushedread+0xb0>
                    return err;
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	e07a      	b.n	8009afe <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f06f 0201 	mvn.w	r2, #1
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a28:	69da      	ldr	r2, [r3, #28]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	4619      	mov	r1, r3
 8009a32:	6a38      	ldr	r0, [r7, #32]
 8009a34:	f7fb f80e 	bl	8004a54 <lfs_min>
 8009a38:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d026      	beq.n	8009a94 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f103 0408 	add.w	r4, r3, #8
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8009a56:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	889b      	ldrh	r3, [r3, #4]
 8009a5c:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8009a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8009a6a:	69b8      	ldr	r0, [r7, #24]
 8009a6c:	9005      	str	r0, [sp, #20]
 8009a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a70:	9004      	str	r0, [sp, #16]
 8009a72:	9103      	str	r1, [sp, #12]
 8009a74:	9302      	str	r3, [sp, #8]
 8009a76:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <lfs_file_flushedread+0x1a0>)
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	9200      	str	r2, [sp, #0]
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4621      	mov	r1, r4
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7fc f8ff 	bl	8005c86 <lfs_dir_getread>
 8009a88:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01d      	beq.n	8009acc <lfs_file_flushedread+0x164>
                return err;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	e034      	b.n	8009afe <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8009a9e:	69dc      	ldr	r4, [r3, #28]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	9103      	str	r1, [sp, #12]
 8009aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aae:	9102      	str	r1, [sp, #8]
 8009ab0:	9201      	str	r2, [sp, #4]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	4623      	mov	r3, r4
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7fb f8a6 	bl	8004c0c <lfs_bd_read>
 8009ac0:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <lfs_file_flushedread+0x164>
                return err;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	e018      	b.n	8009afe <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	441a      	add	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	441a      	add	r2, r3
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	4413      	add	r3, r2
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8009aec:	6a3a      	ldr	r2, [r7, #32]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f47f af56 	bne.w	80099a8 <lfs_file_flushedread+0x40>
    }

    return size;
 8009afc:	683b      	ldr	r3, [r7, #0]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3728      	adds	r7, #40	; 0x28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bdb0      	pop	{r4, r5, r7, pc}
 8009b06:	bf00      	nop
 8009b08:	fff7fc00 	.word	0xfff7fc00

08009b0c <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <lfs_file_rawread+0x28>
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <lfs_file_rawread+0x60>)
 8009b28:	4a11      	ldr	r2, [pc, #68]	; (8009b70 <lfs_file_rawread+0x64>)
 8009b2a:	f640 41eb 	movw	r1, #3307	; 0xceb
 8009b2e:	4811      	ldr	r0, [pc, #68]	; (8009b74 <lfs_file_rawread+0x68>)
 8009b30:	f005 fbec 	bl	800f30c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fdb0 	bl	80096a8 <lfs_file_flush>
 8009b48:	6178      	str	r0, [r7, #20]
        if (err) {
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <lfs_file_rawread+0x48>
            return err;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	e006      	b.n	8009b62 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff ff04 	bl	8009968 <lfs_file_flushedread>
 8009b60:	4603      	mov	r3, r0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08011584 	.word	0x08011584
 8009b70:	08011d68 	.word	0x08011d68
 8009b74:	08011258 	.word	0x08011258

08009b78 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8009b78:	b5b0      	push	{r4, r5, r7, lr}
 8009b7a:	b090      	sub	sp, #64	; 0x40
 8009b7c:	af04      	add	r7, sp, #16
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 810c 	beq.w	8009db4 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	441a      	add	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f7fa ff42 	bl	8004a34 <lfs_max>
 8009bb0:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8009bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d004      	beq.n	8009bcc <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8009bc8:	08db      	lsrs	r3, r3, #3
 8009bca:	e003      	b.n	8009bd4 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7fa ff3c 	bl	8004a54 <lfs_min>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	4619      	mov	r1, r3
 8009be0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8009be4:	f7fa ff36 	bl	8004a54 <lfs_min>
 8009be8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8009bea:	429c      	cmp	r4, r3
 8009bec:	f240 80e2 	bls.w	8009db4 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff fd36 	bl	8009664 <lfs_file_outline>
 8009bf8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 80d9 	beq.w	8009db4 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	e0d5      	b.n	8009dbe <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d006      	beq.n	8009c2c <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c26:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d16b      	bne.n	8009d04 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d157      	bne.n	8009ce8 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d12d      	bne.n	8009ca0 <lfs_file_flushedwrite+0x128>
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d029      	beq.n	8009ca0 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8009c5e:	3a01      	subs	r2, #1
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	3138      	adds	r1, #56	; 0x38
 8009c64:	68b8      	ldr	r0, [r7, #8]
 8009c66:	303c      	adds	r0, #60	; 0x3c
 8009c68:	9003      	str	r0, [sp, #12]
 8009c6a:	9102      	str	r1, [sp, #8]
 8009c6c:	9201      	str	r2, [sp, #4]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	462b      	mov	r3, r5
 8009c72:	4622      	mov	r2, r4
 8009c74:	2100      	movs	r1, #0
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff f822 	bl	8008cc0 <lfs_ctz_find>
 8009c7c:	6238      	str	r0, [r7, #32]
                    if (err) {
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c88:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	e094      	b.n	8009dbe <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3340      	adds	r3, #64	; 0x40
 8009c98:	4619      	mov	r1, r3
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7fa ff9f 	bl	8004bde <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7fb fe1b 	bl	80058dc <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009cac:	68fc      	ldr	r4, [r7, #12]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	3238      	adds	r2, #56	; 0x38
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	313c      	adds	r1, #60	; 0x3c
 8009cbe:	9102      	str	r1, [sp, #8]
 8009cc0:	9201      	str	r2, [sp, #4]
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4601      	mov	r1, r0
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7ff f864 	bl	8008d98 <lfs_ctz_extend>
 8009cd0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00f      	beq.n	8009cf8 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	e06a      	b.n	8009dbe <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f06f 0201 	mvn.w	r2, #1
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d08:	69da      	ldr	r2, [r3, #28]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	4619      	mov	r1, r3
 8009d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d14:	f7fa fe9e 	bl	8004a54 <lfs_min>
 8009d18:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009d20:	68fc      	ldr	r4, [r7, #12]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d2a:	69b9      	ldr	r1, [r7, #24]
 8009d2c:	9103      	str	r1, [sp, #12]
 8009d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d30:	9102      	str	r1, [sp, #8]
 8009d32:	9201      	str	r2, [sp, #4]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2301      	movs	r3, #1
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7fb f9ab 	bl	8005098 <lfs_bd_prog>
 8009d42:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d01c      	beq.n	8009d84 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8009d50:	d007      	beq.n	8009d62 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	e02d      	b.n	8009dbe <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8009d62:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff fba2 	bl	80094b0 <lfs_file_relocate>
 8009d6c:	6178      	str	r0, [r7, #20]
            if (err) {
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0d2      	beq.n	8009d1a <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	e01c      	b.n	8009dbe <lfs_file_flushedwrite+0x246>
            break;
 8009d84:	bf00      	nop
            }
        }

        file->pos += diff;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	441a      	add	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	441a      	add	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8009d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	4413      	add	r3, r2
 8009da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8009da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f7fb fd94 	bl	80058dc <lfs_alloc_ack>
    while (nsize > 0) {
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f47f af2b 	bne.w	8009c12 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8009dbc:	683b      	ldr	r3, [r7, #0]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3730      	adds	r7, #48	; 0x30
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009dc8 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	; 0x28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <lfs_file_rawwrite+0x28>
 8009de2:	4b38      	ldr	r3, [pc, #224]	; (8009ec4 <lfs_file_rawwrite+0xfc>)
 8009de4:	4a38      	ldr	r2, [pc, #224]	; (8009ec8 <lfs_file_rawwrite+0x100>)
 8009de6:	f640 5156 	movw	r1, #3414	; 0xd56
 8009dea:	4838      	ldr	r0, [pc, #224]	; (8009ecc <lfs_file_rawwrite+0x104>)
 8009dec:	f005 fa8e 	bl	800f30c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d009      	beq.n	8009e10 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7ff fc52 	bl	80096a8 <lfs_file_flush>
 8009e04:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <lfs_file_rawwrite+0x48>
            return err;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	e055      	b.n	8009ebc <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d009      	beq.n	8009e30 <lfs_file_rawwrite+0x68>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d203      	bcs.n	8009e30 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	441a      	add	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d902      	bls.n	8009e46 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8009e40:	f06f 031a 	mvn.w	r3, #26
 8009e44:	e03a      	b.n	8009ebc <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d121      	bne.n	8009e96 <lfs_file_rawwrite+0xce>
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d91b      	bls.n	8009e96 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8009e6c:	e00e      	b.n	8009e8c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]
 8009e72:	f107 0217 	add.w	r2, r7, #23
 8009e76:	2301      	movs	r3, #1
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7ff fe7c 	bl	8009b78 <lfs_file_flushedwrite>
 8009e80:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	da01      	bge.n	8009e8c <lfs_file_rawwrite+0xc4>
                return res;
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	e017      	b.n	8009ebc <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e90:	6a3a      	ldr	r2, [r7, #32]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d8eb      	bhi.n	8009e6e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fe6b 	bl	8009b78 <lfs_file_flushedwrite>
 8009ea2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	da01      	bge.n	8009eae <lfs_file_rawwrite+0xe6>
        return nsize;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	e006      	b.n	8009ebc <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8009eba:	69bb      	ldr	r3, [r7, #24]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3728      	adds	r7, #40	; 0x28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	080115b4 	.word	0x080115b4
 8009ec8:	08011d7c 	.word	0x08011d7c
 8009ecc:	08011258 	.word	0x08011258

08009ed0 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08c      	sub	sp, #48	; 0x30
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <lfs_file_rawseek+0x20>
        npos = off;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eee:	e025      	b.n	8009f3c <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d10f      	bne.n	8009f16 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efa:	461a      	mov	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4413      	add	r3, r2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da02      	bge.n	8009f0a <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8009f04:	f06f 0315 	mvn.w	r3, #21
 8009f08:	e067      	b.n	8009fda <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4413      	add	r3, r2
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f14:	e012      	b.n	8009f3c <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d10f      	bne.n	8009f3c <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8009f1c:	68b9      	ldr	r1, [r7, #8]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 f85f 	bl	8009fe2 <lfs_file_rawsize>
 8009f24:	4602      	mov	r2, r0
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4413      	add	r3, r2
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da02      	bge.n	8009f38 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8009f32:	f06f 0315 	mvn.w	r3, #21
 8009f36:	e050      	b.n	8009fda <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d902      	bls.n	8009f4c <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8009f46:	f06f 0315 	mvn.w	r3, #21
 8009f4a:	e046      	b.n	8009fda <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d101      	bne.n	8009f5a <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	e03f      	b.n	8009fda <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d12b      	bne.n	8009fbe <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	61bb      	str	r3, [r7, #24]
 8009f6c:	f107 0318 	add.w	r3, r7, #24
 8009f70:	4619      	mov	r1, r3
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7fe fe6c 	bl	8008c50 <lfs_ctz_index>
 8009f78:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8009f7e:	f107 0314 	add.w	r3, r7, #20
 8009f82:	4619      	mov	r1, r3
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7fe fe63 	bl	8008c50 <lfs_ctz_index>
 8009f8a:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d114      	bne.n	8009fbe <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d80f      	bhi.n	8009fbe <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fa6:	441a      	add	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d907      	bls.n	8009fbe <lfs_file_rawseek+0xee>
            file->pos = npos;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb2:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	e00d      	b.n	8009fda <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7ff fb71 	bl	80096a8 <lfs_file_flush>
 8009fc6:	61f8      	str	r0, [r7, #28]
    if (err) {
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <lfs_file_rawseek+0x102>
        return err;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	e003      	b.n	8009fda <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fd6:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3730      	adds	r7, #48	; 0x30
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f7fa fd16 	bl	8004a34 <lfs_max>
 800a008:	4603      	mov	r3, r0
 800a00a:	e001      	b.n	800a010 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <lfs_rawremove>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 800a018:	b580      	push	{r7, lr}
 800a01a:	b09e      	sub	sp, #120	; 0x78
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f001 f98c 	bl	800b340 <lfs_fs_forceconsistency>
 800a028:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err) {
 800a02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <lfs_rawremove+0x1c>
        return err;
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	e0c2      	b.n	800a1ba <lfs_rawremove+0x1a2>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 800a034:	463a      	mov	r2, r7
 800a036:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a03a:	2300      	movs	r3, #0
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7fc ffe7 	bl	8007010 <lfs_dir_find>
 800a042:	66b8      	str	r0, [r7, #104]	; 0x68
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 800a044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a046:	2b00      	cmp	r3, #0
 800a048:	db09      	blt.n	800a05e <lfs_rawremove+0x46>
 800a04a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fb fa17 	bl	8005480 <lfs_tag_id>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d107      	bne.n	800a06e <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 800a05e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a060:	2b00      	cmp	r3, #0
 800a062:	da01      	bge.n	800a068 <lfs_rawremove+0x50>
 800a064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a066:	e0a8      	b.n	800a1ba <lfs_rawremove+0x1a2>
 800a068:	f06f 0315 	mvn.w	r3, #21
 800a06c:	e0a5      	b.n	800a1ba <lfs_rawremove+0x1a2>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a072:	617b      	str	r3, [r7, #20]
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800a074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a076:	4618      	mov	r0, r3
 800a078:	f7fb f9d8 	bl	800542c <lfs_tag_type3>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d148      	bne.n	800a114 <lfs_rawremove+0xfc>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 800a082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a084:	4618      	mov	r0, r3
 800a086:	f7fb f9fb 	bl	8005480 <lfs_tag_id>
 800a08a:	4603      	mov	r3, r0
 800a08c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 800a08e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a092:	f043 0308 	orr.w	r3, r3, #8
 800a096:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a09a:	f107 020c 	add.w	r2, r7, #12
 800a09e:	9200      	str	r2, [sp, #0]
 800a0a0:	4a48      	ldr	r2, [pc, #288]	; (800a1c4 <lfs_rawremove+0x1ac>)
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7fb fdd4 	bl	8005c50 <lfs_dir_get>
 800a0a8:	6678      	str	r0, [r7, #100]	; 0x64
        if (res < 0) {
 800a0aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	da01      	bge.n	800a0b4 <lfs_rawremove+0x9c>
            return (int)res;
 800a0b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b2:	e082      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }
        lfs_pair_fromle32(pair);
 800a0b4:	f107 030c 	add.w	r3, r7, #12
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fb f952 	bl	8005362 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 800a0be:	f107 020c 	add.w	r2, r7, #12
 800a0c2:	f107 0314 	add.w	r3, r7, #20
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7fc fe8e 	bl	8006dec <lfs_dir_fetch>
 800a0d0:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800a0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <lfs_rawremove+0xc4>
            return err;
 800a0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0da:	e06e      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }

        if (dir.m.count > 0 || dir.m.split) {
 800a0dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d103      	bne.n	800a0ea <lfs_rawremove+0xd2>
 800a0e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <lfs_rawremove+0xd8>
            return LFS_ERR_NOTEMPTY;
 800a0ea:	f06f 0326 	mvn.w	r3, #38	; 0x26
 800a0ee:	e064      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fea6 	bl	800ae44 <lfs_fs_preporphans>
 800a0f8:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800a0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <lfs_rawremove+0xec>
            return err;
 800a100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a102:	e05a      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	76bb      	strb	r3, [r7, #26]
        dir.id = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	833b      	strh	r3, [r7, #24]
        lfs->mlist = &dir;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f107 0214 	add.w	r2, r7, #20
 800a112:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 800a114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a116:	4618      	mov	r0, r3
 800a118:	f7fb f9b2 	bl	8005480 <lfs_tag_id>
 800a11c:	4603      	mov	r3, r0
 800a11e:	029b      	lsls	r3, r3, #10
 800a120:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a124:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a12a:	2300      	movs	r3, #0
 800a12c:	663b      	str	r3, [r7, #96]	; 0x60
 800a12e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800a132:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a136:	2301      	movs	r3, #1
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7fe fc57 	bl	80089ec <lfs_dir_commit>
 800a13e:	66f8      	str	r0, [r7, #108]	; 0x6c
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 800a140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <lfs_rawremove+0x138>
        lfs->mlist = dir.next;
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	e034      	b.n	800a1ba <lfs_rawremove+0x1a2>
    }

    lfs->mlist = dir.next;
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800a156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fb f967 	bl	800542c <lfs_tag_type3>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b02      	cmp	r3, #2
 800a162:	d129      	bne.n	800a1b8 <lfs_rawremove+0x1a0>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 800a164:	f04f 31ff 	mov.w	r1, #4294967295
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fe6b 	bl	800ae44 <lfs_fs_preporphans>
 800a16e:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800a170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <lfs_rawremove+0x162>
            return err;
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	e01f      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 800a17a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a17e:	f107 0314 	add.w	r3, r7, #20
 800a182:	3308      	adds	r3, #8
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fd7e 	bl	800ac88 <lfs_fs_pred>
 800a18c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800a18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <lfs_rawremove+0x180>
            return err;
 800a194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a196:	e010      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 800a198:	f107 0314 	add.w	r3, r7, #20
 800a19c:	f103 0208 	add.w	r2, r3, #8
 800a1a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7fd fa9a 	bl	80076e0 <lfs_dir_drop>
 800a1ac:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800a1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <lfs_rawremove+0x1a0>
            return err;
 800a1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b6:	e000      	b.n	800a1ba <lfs_rawremove+0x1a2>
        }
    }

    return 0;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3770      	adds	r7, #112	; 0x70
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	700ffc00 	.word	0x700ffc00

0800a1c8 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <lfs_init+0x2c>
 800a1e6:	4b9f      	ldr	r3, [pc, #636]	; (800a464 <lfs_init+0x29c>)
 800a1e8:	4a9f      	ldr	r2, [pc, #636]	; (800a468 <lfs_init+0x2a0>)
 800a1ea:	f640 7147 	movw	r1, #3911	; 0xf47
 800a1ee:	489f      	ldr	r0, [pc, #636]	; (800a46c <lfs_init+0x2a4>)
 800a1f0:	f005 f88c 	bl	800f30c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <lfs_init+0x44>
 800a1fe:	4b9c      	ldr	r3, [pc, #624]	; (800a470 <lfs_init+0x2a8>)
 800a200:	4a99      	ldr	r2, [pc, #612]	; (800a468 <lfs_init+0x2a0>)
 800a202:	f640 7148 	movw	r1, #3912	; 0xf48
 800a206:	4899      	ldr	r0, [pc, #612]	; (800a46c <lfs_init+0x2a4>)
 800a208:	f005 f880 	bl	800f30c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <lfs_init+0x5c>
 800a216:	4b97      	ldr	r3, [pc, #604]	; (800a474 <lfs_init+0x2ac>)
 800a218:	4a93      	ldr	r2, [pc, #588]	; (800a468 <lfs_init+0x2a0>)
 800a21a:	f640 7149 	movw	r1, #3913	; 0xf49
 800a21e:	4893      	ldr	r0, [pc, #588]	; (800a46c <lfs_init+0x2a4>)
 800a220:	f005 f874 	bl	800f30c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a22e:	6952      	ldr	r2, [r2, #20]
 800a230:	fbb3 f1f2 	udiv	r1, r3, r2
 800a234:	fb02 f201 	mul.w	r2, r2, r1
 800a238:	1a9b      	subs	r3, r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <lfs_init+0x84>
 800a23e:	4b8e      	ldr	r3, [pc, #568]	; (800a478 <lfs_init+0x2b0>)
 800a240:	4a89      	ldr	r2, [pc, #548]	; (800a468 <lfs_init+0x2a0>)
 800a242:	f640 714d 	movw	r1, #3917	; 0xf4d
 800a246:	4889      	ldr	r0, [pc, #548]	; (800a46c <lfs_init+0x2a4>)
 800a248:	f005 f860 	bl	800f30c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a256:	6992      	ldr	r2, [r2, #24]
 800a258:	fbb3 f1f2 	udiv	r1, r3, r2
 800a25c:	fb02 f201 	mul.w	r2, r2, r1
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d006      	beq.n	800a274 <lfs_init+0xac>
 800a266:	4b85      	ldr	r3, [pc, #532]	; (800a47c <lfs_init+0x2b4>)
 800a268:	4a7f      	ldr	r2, [pc, #508]	; (800a468 <lfs_init+0x2a0>)
 800a26a:	f640 714e 	movw	r1, #3918	; 0xf4e
 800a26e:	487f      	ldr	r0, [pc, #508]	; (800a46c <lfs_init+0x2a4>)
 800a270:	f005 f84c 	bl	800f30c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a27e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a280:	fbb3 f1f2 	udiv	r1, r3, r2
 800a284:	fb02 f201 	mul.w	r2, r2, r1
 800a288:	1a9b      	subs	r3, r3, r2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d006      	beq.n	800a29c <lfs_init+0xd4>
 800a28e:	4b7c      	ldr	r3, [pc, #496]	; (800a480 <lfs_init+0x2b8>)
 800a290:	4a75      	ldr	r2, [pc, #468]	; (800a468 <lfs_init+0x2a0>)
 800a292:	f640 714f 	movw	r1, #3919	; 0xf4f
 800a296:	4875      	ldr	r0, [pc, #468]	; (800a46c <lfs_init+0x2a4>)
 800a298:	f005 f838 	bl	800f30c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	3b08      	subs	r3, #8
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fa fc08 	bl	8004ac2 <lfs_npw2>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	009a      	lsls	r2, r3, #2
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d906      	bls.n	800a2ce <lfs_init+0x106>
 800a2c0:	4b70      	ldr	r3, [pc, #448]	; (800a484 <lfs_init+0x2bc>)
 800a2c2:	4a69      	ldr	r2, [pc, #420]	; (800a468 <lfs_init+0x2a0>)
 800a2c4:	f640 7153 	movw	r1, #3923	; 0xf53
 800a2c8:	4868      	ldr	r0, [pc, #416]	; (800a46c <lfs_init+0x2a4>)
 800a2ca:	f005 f81f 	bl	800f30c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d106      	bne.n	800a2e6 <lfs_init+0x11e>
 800a2d8:	4b6b      	ldr	r3, [pc, #428]	; (800a488 <lfs_init+0x2c0>)
 800a2da:	4a63      	ldr	r2, [pc, #396]	; (800a468 <lfs_init+0x2a0>)
 800a2dc:	f640 715b 	movw	r1, #3931	; 0xf5b
 800a2e0:	4862      	ldr	r0, [pc, #392]	; (800a46c <lfs_init+0x2a4>)
 800a2e2:	f005 f813 	bl	800f30c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d005      	beq.n	800a2fc <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	60da      	str	r2, [r3, #12]
 800a2fa:	e010      	b.n	800a31e <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a302:	4618      	mov	r0, r3
 800a304:	f7fa fc45 	bl	8004b92 <lfs_malloc>
 800a308:	4602      	mov	r2, r0
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d103      	bne.n	800a31e <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800a316:	f06f 030b 	mvn.w	r3, #11
 800a31a:	60fb      	str	r3, [r7, #12]
            goto cleanup;
 800a31c:	e0fe      	b.n	800a51c <lfs_init+0x354>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a32c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	61da      	str	r2, [r3, #28]
 800a332:	e010      	b.n	800a356 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fa fc29 	bl	8004b92 <lfs_malloc>
 800a340:	4602      	mov	r2, r0
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800a34e:	f06f 030b 	mvn.w	r3, #11
 800a352:	60fb      	str	r3, [r7, #12]
            goto cleanup;
 800a354:	e0e2      	b.n	800a51c <lfs_init+0x354>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7fa fc3f 	bl	8004bde <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3310      	adds	r3, #16
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fa fc39 	bl	8004bde <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <lfs_init+0x1bc>
 800a376:	4b45      	ldr	r3, [pc, #276]	; (800a48c <lfs_init+0x2c4>)
 800a378:	4a3b      	ldr	r2, [pc, #236]	; (800a468 <lfs_init+0x2a0>)
 800a37a:	f640 7179 	movw	r1, #3961	; 0xf79
 800a37e:	483b      	ldr	r0, [pc, #236]	; (800a46c <lfs_init+0x2a4>)
 800a380:	f004 ffc4 	bl	800f30c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <lfs_init+0x1d8>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d006      	beq.n	800a3ae <lfs_init+0x1e6>
 800a3a0:	4b3b      	ldr	r3, [pc, #236]	; (800a490 <lfs_init+0x2c8>)
 800a3a2:	4a31      	ldr	r2, [pc, #196]	; (800a468 <lfs_init+0x2a0>)
 800a3a4:	f640 717b 	movw	r1, #3963	; 0xf7b
 800a3a8:	4830      	ldr	r0, [pc, #192]	; (800a46c <lfs_init+0x2a4>)
 800a3aa:	f004 ffaf 	bl	800f30c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	665a      	str	r2, [r3, #100]	; 0x64
 800a3c2:	e010      	b.n	800a3e6 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fa fbe1 	bl	8004b92 <lfs_malloc>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d103      	bne.n	800a3e6 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800a3de:	f06f 030b 	mvn.w	r3, #11
 800a3e2:	60fb      	str	r3, [r7, #12]
            goto cleanup;
 800a3e4:	e09a      	b.n	800a51c <lfs_init+0x354>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ec:	2bff      	cmp	r3, #255	; 0xff
 800a3ee:	d906      	bls.n	800a3fe <lfs_init+0x236>
 800a3f0:	4b28      	ldr	r3, [pc, #160]	; (800a494 <lfs_init+0x2cc>)
 800a3f2:	4a1d      	ldr	r2, [pc, #116]	; (800a468 <lfs_init+0x2a0>)
 800a3f4:	f640 7187 	movw	r1, #3975	; 0xf87
 800a3f8:	481c      	ldr	r0, [pc, #112]	; (800a46c <lfs_init+0x2a4>)
 800a3fa:	f004 ff87 	bl	800f30c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	22ff      	movs	r2, #255	; 0xff
 800a414:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	da06      	bge.n	800a42e <lfs_init+0x266>
 800a420:	4b1d      	ldr	r3, [pc, #116]	; (800a498 <lfs_init+0x2d0>)
 800a422:	4a11      	ldr	r2, [pc, #68]	; (800a468 <lfs_init+0x2a0>)
 800a424:	f640 718d 	movw	r1, #3981	; 0xf8d
 800a428:	4810      	ldr	r0, [pc, #64]	; (800a46c <lfs_init+0x2a4>)
 800a42a:	f004 ff6f 	bl	800f30c <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d103      	bne.n	800a448 <lfs_init+0x280>
        lfs->file_max = LFS_FILE_MAX;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a446:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a44e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a452:	4293      	cmp	r3, r2
 800a454:	d924      	bls.n	800a4a0 <lfs_init+0x2d8>
 800a456:	4b11      	ldr	r3, [pc, #68]	; (800a49c <lfs_init+0x2d4>)
 800a458:	4a03      	ldr	r2, [pc, #12]	; (800a468 <lfs_init+0x2a0>)
 800a45a:	f640 7193 	movw	r1, #3987	; 0xf93
 800a45e:	4803      	ldr	r0, [pc, #12]	; (800a46c <lfs_init+0x2a4>)
 800a460:	f004 ff54 	bl	800f30c <__assert_func>
 800a464:	080115e4 	.word	0x080115e4
 800a468:	08011d90 	.word	0x08011d90
 800a46c:	08011258 	.word	0x08011258
 800a470:	08011600 	.word	0x08011600
 800a474:	0801161c 	.word	0x0801161c
 800a478:	08011638 	.word	0x08011638
 800a47c:	08011668 	.word	0x08011668
 800a480:	08011698 	.word	0x08011698
 800a484:	080116cc 	.word	0x080116cc
 800a488:	08011718 	.word	0x08011718
 800a48c:	08011734 	.word	0x08011734
 800a490:	08011754 	.word	0x08011754
 800a494:	080117a8 	.word	0x080117a8
 800a498:	080117c4 	.word	0x080117c4
 800a49c:	080117e8 	.word	0x080117e8
    lfs->attr_max = lfs->cfg->attr_max;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d103      	bne.n	800a4ba <lfs_init+0x2f2>
        lfs->attr_max = LFS_ATTR_MAX;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a4b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d906      	bls.n	800a4d8 <lfs_init+0x310>
 800a4ca:	4b18      	ldr	r3, [pc, #96]	; (800a52c <lfs_init+0x364>)
 800a4cc:	4a18      	ldr	r2, [pc, #96]	; (800a530 <lfs_init+0x368>)
 800a4ce:	f640 7199 	movw	r1, #3993	; 0xf99
 800a4d2:	4818      	ldr	r0, [pc, #96]	; (800a534 <lfs_init+0x36c>)
 800a4d4:	f004 ff1a 	bl	800f30c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f04f 32ff 	mov.w	r2, #4294967295
 800a4de:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e6:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	333c      	adds	r3, #60	; 0x3c
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	605a      	str	r2, [r3, #4]
 800a4fe:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3330      	adds	r3, #48	; 0x30
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	605a      	str	r2, [r3, #4]
 800a50a:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3348      	adds	r3, #72	; 0x48
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	e003      	b.n	800a524 <lfs_init+0x35c>

cleanup:
    lfs_deinit(lfs);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f80b 	bl	800a538 <lfs_deinit>
    return err;
 800a522:	68fb      	ldr	r3, [r7, #12]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	08011804 	.word	0x08011804
 800a530:	08011d90 	.word	0x08011d90
 800a534:	08011258 	.word	0x08011258

0800a538 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	2b00      	cmp	r3, #0
 800a548:	d104      	bne.n	800a554 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fa fb2b 	bl	8004baa <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d104      	bne.n	800a568 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	4618      	mov	r0, r3
 800a564:	f7fa fb21 	bl	8004baa <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a576:	4618      	mov	r0, r3
 800a578:	f7fa fb17 	bl	8004baa <lfs_free>
    }

    return 0;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800a588:	b580      	push	{r7, lr}
 800a58a:	b09a      	sub	sp, #104	; 0x68
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
    int err = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	667b      	str	r3, [r7, #100]	; 0x64
    {
        err = lfs_init(lfs, cfg);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff fe15 	bl	800a1c8 <lfs_init>
 800a59e:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800a5a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <lfs_rawformat+0x22>
            return err;
 800a5a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a8:	e082      	b.n	800a6b0 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f004 ff50 	bl	800f45c <memset>
        lfs->free.off = 0;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	f7fa fa3e 	bl	8004a54 <lfs_min>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7fb f979 	bl	80058dc <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800a5ea:	f107 030c 	add.w	r3, r7, #12
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7fc fffb 	bl	80075ec <lfs_dir_alloc>
 800a5f6:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800a5f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d14f      	bne.n	800a69e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800a5fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a608:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800a60a:	633b      	str	r3, [r7, #48]	; 0x30
            .block_count = lfs->cfg->block_count,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a610:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800a612:	637b      	str	r3, [r7, #52]	; 0x34
            .name_max    = lfs->name_max,
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800a618:	63bb      	str	r3, [r7, #56]	; 0x38
            .file_max    = lfs->file_max,
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
            .attr_max    = lfs->attr_max,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800a624:	643b      	str	r3, [r7, #64]	; 0x40
        };

        lfs_superblock_tole32(&superblock);
 800a626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fb f897 	bl	800575e <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800a630:	4b21      	ldr	r3, [pc, #132]	; (800a6b8 <lfs_rawformat+0x130>)
 800a632:	647b      	str	r3, [r7, #68]	; 0x44
 800a634:	2300      	movs	r3, #0
 800a636:	64bb      	str	r3, [r7, #72]	; 0x48
 800a638:	4b20      	ldr	r3, [pc, #128]	; (800a6bc <lfs_rawformat+0x134>)
 800a63a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a63c:	4b20      	ldr	r3, [pc, #128]	; (800a6c0 <lfs_rawformat+0x138>)
 800a63e:	653b      	str	r3, [r7, #80]	; 0x50
 800a640:	4b20      	ldr	r3, [pc, #128]	; (800a6c4 <lfs_rawformat+0x13c>)
 800a642:	657b      	str	r3, [r7, #84]	; 0x54
 800a644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a648:	65bb      	str	r3, [r7, #88]	; 0x58
 800a64a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a64e:	f107 010c 	add.w	r1, r7, #12
 800a652:	2303      	movs	r3, #3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7fe f9c9 	bl	80089ec <lfs_dir_commit>
 800a65a:	6678      	str	r0, [r7, #100]	; 0x64
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800a65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11f      	bne.n	800a6a2 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800a662:	2300      	movs	r3, #0
 800a664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800a668:	f107 010c 	add.w	r1, r7, #12
 800a66c:	2300      	movs	r3, #0
 800a66e:	2200      	movs	r2, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fe f9bb 	bl	80089ec <lfs_dir_commit>
 800a676:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800a678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d113      	bne.n	800a6a6 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800a67e:	2300      	movs	r3, #0
 800a680:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a682:	2301      	movs	r3, #1
 800a684:	663b      	str	r3, [r7, #96]	; 0x60
 800a686:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800a68a:	f107 030c 	add.w	r3, r7, #12
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7fc fbab 	bl	8006dec <lfs_dir_fetch>
 800a696:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800a698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	e004      	b.n	800a6a8 <lfs_rawformat+0x120>
            goto cleanup;
 800a69e:	bf00      	nop
 800a6a0:	e002      	b.n	800a6a8 <lfs_rawformat+0x120>
            goto cleanup;
 800a6a2:	bf00      	nop
 800a6a4:	e000      	b.n	800a6a8 <lfs_rawformat+0x120>
            goto cleanup;
 800a6a6:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ff45 	bl	800a538 <lfs_deinit>
    return err;
 800a6ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64

}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3768      	adds	r7, #104	; 0x68
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	40100000 	.word	0x40100000
 800a6bc:	0ff00008 	.word	0x0ff00008
 800a6c0:	08011834 	.word	0x08011834
 800a6c4:	20100018 	.word	0x20100018

0800a6c8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b09c      	sub	sp, #112	; 0x70
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff fd77 	bl	800a1c8 <lfs_init>
 800a6da:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800a6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <lfs_rawmount+0x1e>
        return err;
 800a6e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6e4:	e192      	b.n	800aa0c <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800a6e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f004 feb4 	bl	800f45c <memset>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	643b      	str	r3, [r7, #64]	; 0x40
    lfs_block_t cycle = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800a6fc:	e10b      	b.n	800a916 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	085b      	lsrs	r3, r3, #1
 800a706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a708:	429a      	cmp	r2, r3
 800a70a:	d303      	bcc.n	800a714 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800a70c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a710:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800a712:	e177      	b.n	800aa04 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 800a714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a716:	3301      	adds	r3, #1
 800a718:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	647b      	str	r3, [r7, #68]	; 0x44
 800a71e:	4b8a      	ldr	r3, [pc, #552]	; (800a948 <lfs_rawmount+0x280>)
 800a720:	64bb      	str	r3, [r7, #72]	; 0x48
 800a722:	2308      	movs	r3, #8
 800a724:	64fb      	str	r3, [r7, #76]	; 0x4c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800a726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a72a:	f103 0218 	add.w	r2, r3, #24
 800a72e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a736:	9303      	str	r3, [sp, #12]
 800a738:	4b84      	ldr	r3, [pc, #528]	; (800a94c <lfs_rawmount+0x284>)
 800a73a:	9302      	str	r3, [sp, #8]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	4b83      	ldr	r3, [pc, #524]	; (800a950 <lfs_rawmount+0x288>)
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	4b83      	ldr	r3, [pc, #524]	; (800a954 <lfs_rawmount+0x28c>)
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7fb ffde 	bl	8006708 <lfs_dir_fetchmatch>
 800a74c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800a74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a750:	2b00      	cmp	r3, #0
 800a752:	da02      	bge.n	800a75a <lfs_rawmount+0x92>
            err = tag;
 800a754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a756:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800a758:	e154      	b.n	800aa04 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800a75a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 80cd 	beq.w	800a8fc <lfs_rawmount+0x234>
 800a762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a764:	4618      	mov	r0, r3
 800a766:	f7fa fe3e 	bl	80053e6 <lfs_tag_isdelete>
 800a76a:	4603      	mov	r3, r0
 800a76c:	f083 0301 	eor.w	r3, r3, #1
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 80c2 	beq.w	800a8fc <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 800a778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800a77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800a784:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a788:	f107 030c 	add.w	r3, r7, #12
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4b72      	ldr	r3, [pc, #456]	; (800a958 <lfs_rawmount+0x290>)
 800a790:	4a70      	ldr	r2, [pc, #448]	; (800a954 <lfs_rawmount+0x28c>)
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7fb fa5c 	bl	8005c50 <lfs_dir_get>
 800a798:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800a79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	da02      	bge.n	800a7a6 <lfs_rawmount+0xde>
                err = tag;
 800a7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800a7a4:	e12e      	b.n	800aa04 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 800a7a6:	f107 030c 	add.w	r3, r7, #12
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fa ff9f 	bl	80056ee <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	0c1b      	lsrs	r3, r3, #16
 800a7b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800a7be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d103      	bne.n	800a7ce <lfs_rawmount+0x106>
 800a7c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d011      	beq.n	800a7f2 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800a7ce:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800a7d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a7d6:	4a61      	ldr	r2, [pc, #388]	; (800a95c <lfs_rawmount+0x294>)
 800a7d8:	9201      	str	r2, [sp, #4]
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	f241 0235 	movw	r2, #4149	; 0x1035
 800a7e2:	495f      	ldr	r1, [pc, #380]	; (800a960 <lfs_rawmount+0x298>)
 800a7e4:	485f      	ldr	r0, [pc, #380]	; (800a964 <lfs_rawmount+0x29c>)
 800a7e6:	f005 f9b1 	bl	800fb4c <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800a7ea:	f06f 0315 	mvn.w	r3, #21
 800a7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800a7f0:	e108      	b.n	800aa04 <lfs_rawmount+0x33c>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d018      	beq.n	800a82a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d910      	bls.n	800a824 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800a802:	69b9      	ldr	r1, [r7, #24]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a808:	4a54      	ldr	r2, [pc, #336]	; (800a95c <lfs_rawmount+0x294>)
 800a80a:	9201      	str	r2, [sp, #4]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	460b      	mov	r3, r1
 800a810:	f241 023e 	movw	r2, #4158	; 0x103e
 800a814:	4952      	ldr	r1, [pc, #328]	; (800a960 <lfs_rawmount+0x298>)
 800a816:	4854      	ldr	r0, [pc, #336]	; (800a968 <lfs_rawmount+0x2a0>)
 800a818:	f005 f998 	bl	800fb4c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800a81c:	f06f 0315 	mvn.w	r3, #21
 800a820:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800a822:	e0ef      	b.n	800aa04 <lfs_rawmount+0x33c>
                }

                lfs->name_max = superblock.name_max;
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d018      	beq.n	800a862 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800a830:	69fa      	ldr	r2, [r7, #28]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a836:	429a      	cmp	r2, r3
 800a838:	d910      	bls.n	800a85c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800a83a:	69f9      	ldr	r1, [r7, #28]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a840:	4a46      	ldr	r2, [pc, #280]	; (800a95c <lfs_rawmount+0x294>)
 800a842:	9201      	str	r2, [sp, #4]
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	460b      	mov	r3, r1
 800a848:	f241 0249 	movw	r2, #4169	; 0x1049
 800a84c:	4944      	ldr	r1, [pc, #272]	; (800a960 <lfs_rawmount+0x298>)
 800a84e:	4847      	ldr	r0, [pc, #284]	; (800a96c <lfs_rawmount+0x2a4>)
 800a850:	f005 f97c 	bl	800fb4c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800a854:	f06f 0315 	mvn.w	r3, #21
 800a858:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800a85a:	e0d3      	b.n	800aa04 <lfs_rawmount+0x33c>
                }

                lfs->file_max = superblock.file_max;
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d018      	beq.n	800a89a <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 800a868:	6a3a      	ldr	r2, [r7, #32]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a86e:	429a      	cmp	r2, r3
 800a870:	d910      	bls.n	800a894 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800a872:	6a39      	ldr	r1, [r7, #32]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a878:	4a38      	ldr	r2, [pc, #224]	; (800a95c <lfs_rawmount+0x294>)
 800a87a:	9201      	str	r2, [sp, #4]
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	460b      	mov	r3, r1
 800a880:	f241 0254 	movw	r2, #4180	; 0x1054
 800a884:	4936      	ldr	r1, [pc, #216]	; (800a960 <lfs_rawmount+0x298>)
 800a886:	483a      	ldr	r0, [pc, #232]	; (800a970 <lfs_rawmount+0x2a8>)
 800a888:	f005 f960 	bl	800fb4c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800a88c:	f06f 0315 	mvn.w	r3, #21
 800a890:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800a892:	e0b7      	b.n	800aa04 <lfs_rawmount+0x33c>
                }

                lfs->attr_max = superblock.attr_max;
 800a894:	6a3a      	ldr	r2, [r7, #32]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d011      	beq.n	800a8ca <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800a8a6:	6979      	ldr	r1, [r7, #20]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	4a2b      	ldr	r2, [pc, #172]	; (800a95c <lfs_rawmount+0x294>)
 800a8b0:	9201      	str	r2, [sp, #4]
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	f241 025e 	movw	r2, #4190	; 0x105e
 800a8ba:	4929      	ldr	r1, [pc, #164]	; (800a960 <lfs_rawmount+0x298>)
 800a8bc:	482d      	ldr	r0, [pc, #180]	; (800a974 <lfs_rawmount+0x2ac>)
 800a8be:	f005 f945 	bl	800fb4c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800a8c2:	f06f 0315 	mvn.w	r3, #21
 800a8c6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800a8c8:	e09c      	b.n	800aa04 <lfs_rawmount+0x33c>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d012      	beq.n	800a8fc <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800a8d6:	6979      	ldr	r1, [r7, #20]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	4a1f      	ldr	r2, [pc, #124]	; (800a95c <lfs_rawmount+0x294>)
 800a8e0:	9201      	str	r2, [sp, #4]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	f241 0265 	movw	r2, #4197	; 0x1065
 800a8ea:	491d      	ldr	r1, [pc, #116]	; (800a960 <lfs_rawmount+0x298>)
 800a8ec:	4822      	ldr	r0, [pc, #136]	; (800a978 <lfs_rawmount+0x2b0>)
 800a8ee:	f005 f92d 	bl	800fb4c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800a8f2:	f06f 0315 	mvn.w	r3, #21
 800a8f6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800a8f8:	bf00      	nop
 800a8fa:	e083      	b.n	800aa04 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fc fa8b 	bl	8006e24 <lfs_dir_getgstate>
 800a90e:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800a910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d175      	bne.n	800aa02 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 800a916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a91a:	3318      	adds	r3, #24
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fa fcae 	bl	800527e <lfs_pair_isnull>
 800a922:	4603      	mov	r3, r0
 800a924:	f083 0301 	eor.w	r3, r3, #1
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f47f aee7 	bne.w	800a6fe <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3320      	adds	r3, #32
 800a934:	4618      	mov	r0, r3
 800a936:	f7fa fca2 	bl	800527e <lfs_pair_isnull>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01d      	beq.n	800a97c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 800a940:	f06f 0315 	mvn.w	r3, #21
 800a944:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800a946:	e05d      	b.n	800aa04 <lfs_rawmount+0x33c>
 800a948:	08011834 	.word	0x08011834
 800a94c:	08006f7d 	.word	0x08006f7d
 800a950:	0ff00008 	.word	0x0ff00008
 800a954:	7ffffc00 	.word	0x7ffffc00
 800a958:	20100018 	.word	0x20100018
 800a95c:	08011354 	.word	0x08011354
 800a960:	08011258 	.word	0x08011258
 800a964:	08011840 	.word	0x08011840
 800a968:	0801186c 	.word	0x0801186c
 800a96c:	080118a0 	.word	0x080118a0
 800a970:	080118d4 	.word	0x080118d4
 800a974:	08011908 	.word	0x08011908
 800a978:	0801193c 	.word	0x0801193c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3330      	adds	r3, #48	; 0x30
 800a980:	4618      	mov	r0, r3
 800a982:	f7fa fdd2 	bl	800552a <lfs_gstate_iszero>
 800a986:	4603      	mov	r3, r0
 800a988:	f083 0301 	eor.w	r3, r3, #1
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d010      	beq.n	800a9b4 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a99e:	491d      	ldr	r1, [pc, #116]	; (800aa14 <lfs_rawmount+0x34c>)
 800a9a0:	9102      	str	r1, [sp, #8]
 800a9a2:	9201      	str	r2, [sp, #4]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f241 027d 	movw	r2, #4221	; 0x107d
 800a9ac:	491a      	ldr	r1, [pc, #104]	; (800aa18 <lfs_rawmount+0x350>)
 800a9ae:	481b      	ldr	r0, [pc, #108]	; (800aa1c <lfs_rawmount+0x354>)
 800a9b0:	f005 f8cc 	bl	800fb4c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fa fd06 	bl	80053ca <lfs_tag_isvalid>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f083 0301 	eor.w	r3, r3, #1
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	441a      	add	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	333c      	adds	r3, #60	; 0x3c
 800a9d8:	3230      	adds	r2, #48	; 0x30
 800a9da:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a9e8:	6a12      	ldr	r2, [r2, #32]
 800a9ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9ee:	fb02 f201 	mul.w	r2, r2, r1
 800a9f2:	1a9a      	subs	r2, r3, r2
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7fa ff7e 	bl	80058fa <lfs_alloc_drop>

    return 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	e004      	b.n	800aa0c <lfs_rawmount+0x344>
            goto cleanup;
 800aa02:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f80b 	bl	800aa20 <lfs_rawunmount>
    return err;
 800aa0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3760      	adds	r7, #96	; 0x60
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	08011354 	.word	0x08011354
 800aa18:	08011258 	.word	0x08011258
 800aa1c:	08011970 	.word	0x08011970

0800aa20 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff fd85 	bl	800a538 <lfs_deinit>
 800aa2e:	4603      	mov	r3, r0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b09d      	sub	sp, #116	; 0x74
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800aa46:	f107 0318 	add.w	r3, r7, #24
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f004 fd04 	bl	800f45c <memset>
 800aa54:	2301      	movs	r3, #1
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800aa5c:	e0a8      	b.n	800abb0 <lfs_fs_rawtraverse+0x178>
        if (cycle >= lfs->cfg->block_count/2) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d302      	bcc.n	800aa72 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800aa6c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800aa70:	e103      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
        }
        cycle += 1;
 800aa72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa74:	3301      	adds	r3, #1
 800aa76:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800aa78:	2300      	movs	r3, #0
 800aa7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa7c:	e014      	b.n	800aaa8 <lfs_fs_rawtraverse+0x70>
            int err = cb(data, dir.tail[i]);
 800aa7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa80:	3306      	adds	r3, #6
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800aa88:	4413      	add	r3, r2
 800aa8a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4611      	mov	r1, r2
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
 800aa96:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <lfs_fs_rawtraverse+0x6a>
                return err;
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	e0eb      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
        for (int i = 0; i < 2; i++) {
 800aaa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	dde7      	ble.n	800aa7e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800aaae:	f107 0318 	add.w	r3, r7, #24
 800aab2:	f103 0218 	add.w	r2, r3, #24
 800aab6:	f107 0318 	add.w	r3, r7, #24
 800aaba:	4619      	mov	r1, r3
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f7fc f995 	bl	8006dec <lfs_dir_fetch>
 800aac2:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800aac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <lfs_fs_rawtraverse+0x96>
            return err;
 800aaca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aacc:	e0d5      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800aace:	2300      	movs	r3, #0
 800aad0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800aad4:	e067      	b.n	800aba6 <lfs_fs_rawtraverse+0x16e>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800aad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aada:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800aadc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aae0:	f043 0308 	orr.w	r3, r3, #8
 800aae4:	f107 0118 	add.w	r1, r7, #24
 800aae8:	f107 0210 	add.w	r2, r7, #16
 800aaec:	9200      	str	r2, [sp, #0]
 800aaee:	4a65      	ldr	r2, [pc, #404]	; (800ac84 <lfs_fs_rawtraverse+0x24c>)
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7fb f8ad 	bl	8005c50 <lfs_dir_get>
 800aaf6:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800aaf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	da05      	bge.n	800ab0a <lfs_fs_rawtraverse+0xd2>
                if (tag == LFS_ERR_NOENT) {
 800aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab00:	f113 0f02 	cmn.w	r3, #2
 800ab04:	d049      	beq.n	800ab9a <lfs_fs_rawtraverse+0x162>
                    continue;
                }
                return tag;
 800ab06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab08:	e0b7      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
            }
            lfs_ctz_fromle32(&ctz);
 800ab0a:	f107 0310 	add.w	r3, r7, #16
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fa fdbd 	bl	800568e <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800ab14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fa fc88 	bl	800542c <lfs_tag_type3>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f240 2302 	movw	r3, #514	; 0x202
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d113      	bne.n	800ab50 <lfs_fs_rawtraverse+0x118>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800ab28:	68f9      	ldr	r1, [r7, #12]
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	9202      	str	r2, [sp, #8]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	4603      	mov	r3, r0
 800ab3a:	460a      	mov	r2, r1
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7fe fa32 	bl	8008fa8 <lfs_ctz_traverse>
 800ab44:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800ab46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d027      	beq.n	800ab9c <lfs_fs_rawtraverse+0x164>
                    return err;
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4e:	e094      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
                }
            } else if (includeorphans &&
 800ab50:	78fb      	ldrb	r3, [r7, #3]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d022      	beq.n	800ab9c <lfs_fs_rawtraverse+0x164>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800ab56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fa fc67 	bl	800542c <lfs_tag_type3>
 800ab5e:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800ab60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab64:	d11a      	bne.n	800ab9c <lfs_fs_rawtraverse+0x164>
                for (int i = 0; i < 2; i++) {
 800ab66:	2300      	movs	r3, #0
 800ab68:	653b      	str	r3, [r7, #80]	; 0x50
 800ab6a:	e012      	b.n	800ab92 <lfs_fs_rawtraverse+0x15a>
                    err = cb(data, (&ctz.head)[i]);
 800ab6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	f107 0210 	add.w	r2, r7, #16
 800ab74:	4413      	add	r3, r2
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	4798      	blx	r3
 800ab80:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800ab82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <lfs_fs_rawtraverse+0x154>
                        return err;
 800ab88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab8a:	e076      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
                for (int i = 0; i < 2; i++) {
 800ab8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab8e:	3301      	adds	r3, #1
 800ab90:	653b      	str	r3, [r7, #80]	; 0x50
 800ab92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	dde9      	ble.n	800ab6c <lfs_fs_rawtraverse+0x134>
 800ab98:	e000      	b.n	800ab9c <lfs_fs_rawtraverse+0x164>
                    continue;
 800ab9a:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800ab9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aba0:	3301      	adds	r3, #1
 800aba2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800aba6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aba8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800abac:	429a      	cmp	r2, r3
 800abae:	d392      	bcc.n	800aad6 <lfs_fs_rawtraverse+0x9e>
    while (!lfs_pair_isnull(dir.tail)) {
 800abb0:	f107 0318 	add.w	r3, r7, #24
 800abb4:	3318      	adds	r3, #24
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fa fb61 	bl	800527e <lfs_pair_isnull>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f083 0301 	eor.w	r3, r3, #1
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f47f af4a 	bne.w	800aa5e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abd0:	e04f      	b.n	800ac72 <lfs_fs_rawtraverse+0x23a>
        if (f->type != LFS_TYPE_REG) {
 800abd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd4:	799b      	ldrb	r3, [r3, #6]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d147      	bne.n	800ac6a <lfs_fs_rawtraverse+0x232>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800abda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d01d      	beq.n	800ac22 <lfs_fs_rawtraverse+0x1ea>
 800abe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d117      	bne.n	800ac22 <lfs_fs_rawtraverse+0x1ea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800abf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abfc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800abfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	9202      	str	r2, [sp, #8]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	9201      	str	r2, [sp, #4]
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	4623      	mov	r3, r4
 800ac0e:	4602      	mov	r2, r0
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7fe f9c9 	bl	8008fa8 <lfs_ctz_traverse>
 800ac16:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800ac18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <lfs_fs_rawtraverse+0x1ea>
                return err;
 800ac1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac20:	e02b      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800ac22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d01e      	beq.n	800ac6c <lfs_fs_rawtraverse+0x234>
 800ac2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d118      	bne.n	800ac6c <lfs_fs_rawtraverse+0x234>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800ac3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac3c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac44:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ac46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	9202      	str	r2, [sp, #8]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	9201      	str	r2, [sp, #4]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	4623      	mov	r3, r4
 800ac56:	4602      	mov	r2, r0
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f7fe f9a5 	bl	8008fa8 <lfs_ctz_traverse>
 800ac5e:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800ac60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <lfs_fs_rawtraverse+0x234>
                return err;
 800ac66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac68:	e007      	b.n	800ac7a <lfs_fs_rawtraverse+0x242>
            continue;
 800ac6a:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800ac6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1ac      	bne.n	800abd2 <lfs_fs_rawtraverse+0x19a>
            }
        }
    }
#endif

    return 0;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3764      	adds	r7, #100	; 0x64
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd90      	pop	{r4, r7, pc}
 800ac82:	bf00      	nop
 800ac84:	700ffc00 	.word	0x700ffc00

0800ac88 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800aca4:	e024      	b.n	800acf0 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acaa:	6a1b      	ldr	r3, [r3, #32]
 800acac:	085b      	lsrs	r3, r3, #1
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d302      	bcc.n	800acba <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800acb4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800acb8:	e027      	b.n	800ad0a <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	3301      	adds	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3318      	adds	r3, #24
 800acc4:	68b9      	ldr	r1, [r7, #8]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fa faf4 	bl	80052b4 <lfs_pair_cmp>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <lfs_fs_pred+0x4e>
            return 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	e019      	b.n	800ad0a <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3318      	adds	r3, #24
 800acda:	461a      	mov	r2, r3
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7fc f884 	bl	8006dec <lfs_dir_fetch>
 800ace4:	6138      	str	r0, [r7, #16]
        if (err) {
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <lfs_fs_pred+0x68>
            return err;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	e00c      	b.n	800ad0a <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3318      	adds	r3, #24
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fa fac2 	bl	800527e <lfs_pair_isnull>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f083 0301 	eor.w	r3, r3, #1
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1cf      	bne.n	800aca6 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800ad06:	f06f 0301 	mvn.w	r3, #1
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3718      	adds	r7, #24
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800ad12:	b5b0      	push	{r4, r5, r7, lr}
 800ad14:	b08e      	sub	sp, #56	; 0x38
 800ad16:	af04      	add	r7, sp, #16
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800ad32:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800ad38:	69dd      	ldr	r5, [r3, #28]
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	6852      	ldr	r2, [r2, #4]
 800ad42:	2108      	movs	r1, #8
 800ad44:	9103      	str	r1, [sp, #12]
 800ad46:	f107 0110 	add.w	r1, r7, #16
 800ad4a:	9102      	str	r1, [sp, #8]
 800ad4c:	9201      	str	r2, [sp, #4]
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	462b      	mov	r3, r5
 800ad52:	4622      	mov	r2, r4
 800ad54:	4601      	mov	r1, r0
 800ad56:	6a38      	ldr	r0, [r7, #32]
 800ad58:	f7f9 ff58 	bl	8004c0c <lfs_bd_read>
 800ad5c:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <lfs_fs_parent_match+0x56>
        return err;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	e012      	b.n	800ad8e <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800ad68:	f107 0310 	add.w	r3, r7, #16
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fa faf8 	bl	8005362 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	f107 0310 	add.w	r3, r7, #16
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa fa99 	bl	80052b4 <lfs_pair_cmp>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bf14      	ite	ne
 800ad88:	2301      	movne	r3, #1
 800ad8a:	2300      	moveq	r3, #0
 800ad8c:	b2db      	uxtb	r3, r3
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3728      	adds	r7, #40	; 0x28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ad98 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08e      	sub	sp, #56	; 0x38
 800ad9c:	af04      	add	r7, sp, #16
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800adb4:	e02f      	b.n	800ae16 <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d302      	bcc.n	800adca <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800adc4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800adc8:	e032      	b.n	800ae30 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	3301      	adds	r3, #1
 800adce:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800adde:	61bb      	str	r3, [r7, #24]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800ade6:	f107 0314 	add.w	r3, r7, #20
 800adea:	9303      	str	r3, [sp, #12]
 800adec:	4b12      	ldr	r3, [pc, #72]	; (800ae38 <lfs_fs_parent+0xa0>)
 800adee:	9302      	str	r3, [sp, #8]
 800adf0:	2300      	movs	r3, #0
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <lfs_fs_parent+0xa4>)
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <lfs_fs_parent+0xa8>)
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7fb fc83 	bl	8006708 <lfs_dir_fetchmatch>
 800ae02:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <lfs_fs_parent+0x7e>
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	f113 0f02 	cmn.w	r3, #2
 800ae10:	d001      	beq.n	800ae16 <lfs_fs_parent+0x7e>
            return tag;
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	e00c      	b.n	800ae30 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3318      	adds	r3, #24
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fa fa2f 	bl	800527e <lfs_pair_isnull>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f083 0301 	eor.w	r3, r3, #1
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1c4      	bne.n	800adb6 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800ae2c:	f06f 0301 	mvn.w	r3, #1
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3728      	adds	r7, #40	; 0x28
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	0800ad13 	.word	0x0800ad13
 800ae3c:	20000008 	.word	0x20000008
 800ae40:	7ff003ff 	.word	0x7ff003ff

0800ae44 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800ae44:	b590      	push	{r4, r7, lr}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fa fb23 	bl	80054a0 <lfs_tag_size>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <lfs_fs_preporphans+0x32>
 800ae60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	da06      	bge.n	800ae76 <lfs_fs_preporphans+0x32>
 800ae68:	4b10      	ldr	r3, [pc, #64]	; (800aeac <lfs_fs_preporphans+0x68>)
 800ae6a:	4a11      	ldr	r2, [pc, #68]	; (800aeb0 <lfs_fs_preporphans+0x6c>)
 800ae6c:	f241 114d 	movw	r1, #4429	; 0x114d
 800ae70:	4810      	ldr	r0, [pc, #64]	; (800aeb4 <lfs_fs_preporphans+0x70>)
 800ae72:	f004 fa4b 	bl	800f30c <__assert_func>
    lfs->gstate.tag += orphans;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae7e:	441a      	add	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae88:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3330      	adds	r3, #48	; 0x30
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fa fb67 	bl	8005564 <lfs_gstate_hasorphans>
 800ae96:	4603      	mov	r3, r0
 800ae98:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800ae9a:	ea44 0203 	orr.w	r2, r4, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd90      	pop	{r4, r7, pc}
 800aeac:	080119a8 	.word	0x080119a8
 800aeb0:	08011d9c 	.word	0x08011d9c
 800aeb4:	08011258 	.word	0x08011258

0800aeb8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	460b      	mov	r3, r1
 800aec2:	607a      	str	r2, [r7, #4]
 800aec4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	4a17      	ldr	r2, [pc, #92]	; (800af28 <lfs_fs_prepmove+0x70>)
 800aecc:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800aece:	897b      	ldrh	r3, [r7, #10]
 800aed0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800aed4:	428b      	cmp	r3, r1
 800aed6:	d006      	beq.n	800aee6 <lfs_fs_prepmove+0x2e>
 800aed8:	897b      	ldrh	r3, [r7, #10]
 800aeda:	029b      	lsls	r3, r3, #10
 800aedc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800aee0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800aee4:	e000      	b.n	800aee8 <lfs_fs_prepmove+0x30>
 800aee6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800aee8:	431a      	orrs	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800aeee:	897b      	ldrh	r3, [r7, #10]
 800aef0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d002      	beq.n	800aefe <lfs_fs_prepmove+0x46>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	e000      	b.n	800af00 <lfs_fs_prepmove+0x48>
 800aefe:	2300      	movs	r3, #0
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800af04:	897b      	ldrh	r3, [r7, #10]
 800af06:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d003      	beq.n	800af16 <lfs_fs_prepmove+0x5e>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3304      	adds	r3, #4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	e000      	b.n	800af18 <lfs_fs_prepmove+0x60>
 800af16:	2300      	movs	r3, #0
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800af1c:	bf00      	nop
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	800003ff 	.word	0x800003ff

0800af2c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800af2c:	b5b0      	push	{r4, r5, r7, lr}
 800af2e:	b092      	sub	sp, #72	; 0x48
 800af30:	af04      	add	r7, sp, #16
 800af32:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	333c      	adds	r3, #60	; 0x3c
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fa fb35 	bl	80055a8 <lfs_gstate_hasmove>
 800af3e:	4603      	mov	r3, r0
 800af40:	f083 0301 	eor.w	r3, r3, #1
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <lfs_fs_demove+0x22>
        return 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e049      	b.n	800afe2 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fa fa90 	bl	8005480 <lfs_tag_id>
 800af60:	4603      	mov	r3, r0
 800af62:	461a      	mov	r2, r3
 800af64:	4b21      	ldr	r3, [pc, #132]	; (800afec <lfs_fs_demove+0xc0>)
 800af66:	9302      	str	r3, [sp, #8]
 800af68:	9201      	str	r2, [sp, #4]
 800af6a:	9400      	str	r4, [sp, #0]
 800af6c:	462b      	mov	r3, r5
 800af6e:	f241 126a 	movw	r2, #4458	; 0x116a
 800af72:	491f      	ldr	r1, [pc, #124]	; (800aff0 <lfs_fs_demove+0xc4>)
 800af74:	481f      	ldr	r0, [pc, #124]	; (800aff4 <lfs_fs_demove+0xc8>)
 800af76:	f004 fde9 	bl	800fb4c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7fb ff30 	bl	8006dec <lfs_dir_fetch>
 800af8c:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800af8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <lfs_fs_demove+0x6c>
        return err;
 800af94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af96:	e024      	b.n	800afe2 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fa fa6f 	bl	8005480 <lfs_tag_id>
 800afa2:	4603      	mov	r3, r0
 800afa4:	867b      	strh	r3, [r7, #50]	; 0x32
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800afa6:	2200      	movs	r2, #0
 800afa8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff ff83 	bl	800aeb8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800afb2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800afb4:	029b      	lsls	r3, r3, #10
 800afb6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800afba:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800afbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800afc0:	2300      	movs	r3, #0
 800afc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800afc8:	f107 0108 	add.w	r1, r7, #8
 800afcc:	2301      	movs	r3, #1
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7fd fd0c 	bl	80089ec <lfs_dir_commit>
 800afd4:	6378      	str	r0, [r7, #52]	; 0x34
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800afd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <lfs_fs_demove+0xb4>
        return err;
 800afdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afde:	e000      	b.n	800afe2 <lfs_fs_demove+0xb6>
    }

    return 0;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3738      	adds	r7, #56	; 0x38
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bdb0      	pop	{r4, r5, r7, pc}
 800afea:	bf00      	nop
 800afec:	08011354 	.word	0x08011354
 800aff0:	08011258 	.word	0x08011258
 800aff4:	080119dc 	.word	0x080119dc

0800aff8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800aff8:	b5b0      	push	{r4, r5, r7, lr}
 800affa:	b0ac      	sub	sp, #176	; 0xb0
 800affc:	af04      	add	r7, sp, #16
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3330      	adds	r3, #48	; 0x30
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fa faab 	bl	8005564 <lfs_gstate_hasorphans>
 800b00e:	4603      	mov	r3, r0
 800b010:	f083 0301 	eor.w	r3, r3, #1
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <lfs_fs_deorphan+0x26>
        return 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e17c      	b.n	800b318 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	2220      	movs	r2, #32
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f004 fa15 	bl	800f45c <memset>
 800b032:	2301      	movs	r3, #1
 800b034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b038:	2301      	movs	r3, #1
 800b03a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800b03c:	e148      	b.n	800b2d0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	f103 0218 	add.w	r2, r3, #24
 800b046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7fb fecd 	bl	8006dec <lfs_dir_fetch>
 800b052:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800b056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <lfs_fs_deorphan+0x6c>
                return err;
 800b05e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b062:	e159      	b.n	800b318 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800b064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b068:	f083 0301 	eor.w	r3, r3, #1
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8124 	beq.w	800b2bc <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800b074:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b078:	f107 030c 	add.w	r3, r7, #12
 800b07c:	3318      	adds	r3, #24
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff fe89 	bl	800ad98 <lfs_fs_parent>
 800b086:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800b08a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da07      	bge.n	800b0a2 <lfs_fs_deorphan+0xaa>
 800b092:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b096:	f113 0f02 	cmn.w	r3, #2
 800b09a:	d002      	beq.n	800b0a2 <lfs_fs_deorphan+0xaa>
                    return tag;
 800b09c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0a0:	e13a      	b.n	800b318 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 800b0a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0a6:	f113 0f02 	cmn.w	r3, #2
 800b0aa:	d155      	bne.n	800b158 <lfs_fs_deorphan+0x160>
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d052      	beq.n	800b158 <lfs_fs_deorphan+0x160>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800b0b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	4a9a      	ldr	r2, [pc, #616]	; (800b320 <lfs_fs_deorphan+0x328>)
 800b0b8:	9201      	str	r2, [sp, #4]
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	f241 12a3 	movw	r2, #4515	; 0x11a3
 800b0c2:	4998      	ldr	r1, [pc, #608]	; (800b324 <lfs_fs_deorphan+0x32c>)
 800b0c4:	4898      	ldr	r0, [pc, #608]	; (800b328 <lfs_fs_deorphan+0x330>)
 800b0c6:	f004 fd41 	bl	800fb4c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b0d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7fb fea4 	bl	8006e24 <lfs_dir_getgstate>
 800b0dc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    if (err) {
 800b0e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <lfs_fs_deorphan+0xf6>
                        return err;
 800b0e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0ec:	e114      	b.n	800b318 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800b0ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0f2:	3318      	adds	r3, #24
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fa f94e 	bl	8005396 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800b0fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b0fe:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b102:	051a      	lsls	r2, r3, #20
 800b104:	4b89      	ldr	r3, [pc, #548]	; (800b32c <lfs_fs_deorphan+0x334>)
 800b106:	4313      	orrs	r3, r2
 800b108:	677b      	str	r3, [r7, #116]	; 0x74
 800b10a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b10e:	3318      	adds	r3, #24
 800b110:	67bb      	str	r3, [r7, #120]	; 0x78
 800b112:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800b116:	f107 010c 	add.w	r1, r7, #12
 800b11a:	2301      	movs	r3, #1
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7fd f977 	bl	8008410 <lfs_dir_orphaningcommit>
 800b122:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800b126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b12a:	3318      	adds	r3, #24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fa f918 	bl	8005362 <lfs_pair_fromle32>
                    if (state < 0) {
 800b132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b136:	2b00      	cmp	r3, #0
 800b138:	da02      	bge.n	800b140 <lfs_fs_deorphan+0x148>
                        return state;
 800b13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b13e:	e0eb      	b.n	800b318 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 800b140:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b144:	3301      	adds	r3, #1
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800b14c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b150:	2b03      	cmp	r3, #3
 800b152:	f040 80af 	bne.w	800b2b4 <lfs_fs_deorphan+0x2bc>
                        goto restart;
 800b156:	e765      	b.n	800b024 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 800b158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b15c:	f113 0f02 	cmn.w	r3, #2
 800b160:	f000 80ac 	beq.w	800b2bc <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800b164:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b168:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800b16c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	4613      	mov	r3, r2
 800b174:	4a6e      	ldr	r2, [pc, #440]	; (800b330 <lfs_fs_deorphan+0x338>)
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fa fd6a 	bl	8005c50 <lfs_dir_get>
 800b17c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800b180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b184:	2b00      	cmp	r3, #0
 800b186:	da02      	bge.n	800b18e <lfs_fs_deorphan+0x196>
                        return state;
 800b188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b18c:	e0c4      	b.n	800b318 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 800b18e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b192:	4618      	mov	r0, r3
 800b194:	f7fa f8e5 	bl	8005362 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 800b198:	f107 030c 	add.w	r3, r7, #12
 800b19c:	f103 0218 	add.w	r2, r3, #24
 800b1a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fa f8ae 	bl	8005308 <lfs_pair_sync>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f083 0301 	eor.w	r3, r3, #1
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8081 	beq.w	800b2bc <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800b1ba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b1c2:	4857      	ldr	r0, [pc, #348]	; (800b320 <lfs_fs_deorphan+0x328>)
 800b1c4:	9003      	str	r0, [sp, #12]
 800b1c6:	9102      	str	r1, [sp, #8]
 800b1c8:	9201      	str	r2, [sp, #4]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	f241 12ce 	movw	r2, #4558	; 0x11ce
 800b1d2:	4954      	ldr	r1, [pc, #336]	; (800b324 <lfs_fs_deorphan+0x32c>)
 800b1d4:	4857      	ldr	r0, [pc, #348]	; (800b334 <lfs_fs_deorphan+0x33c>)
 800b1d6:	f004 fcb9 	bl	800fb4c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800b1da:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b1de:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3330      	adds	r3, #48	; 0x30
 800b1e6:	f107 020c 	add.w	r2, r7, #12
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fa f9ee 	bl	80055ce <lfs_gstate_hasmovehere>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01c      	beq.n	800b232 <lfs_fs_deorphan+0x23a>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fa f93f 	bl	8005480 <lfs_tag_id>
 800b202:	4603      	mov	r3, r0
 800b204:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                            LFS_DEBUG("Fixing move while fixing orphans "
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b210:	4943      	ldr	r1, [pc, #268]	; (800b320 <lfs_fs_deorphan+0x328>)
 800b212:	9102      	str	r1, [sp, #8]
 800b214:	9201      	str	r2, [sp, #4]
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	4603      	mov	r3, r0
 800b21a:	f241 12d8 	movw	r2, #4568	; 0x11d8
 800b21e:	4941      	ldr	r1, [pc, #260]	; (800b324 <lfs_fs_deorphan+0x32c>)
 800b220:	4845      	ldr	r0, [pc, #276]	; (800b338 <lfs_fs_deorphan+0x340>)
 800b222:	f004 fc93 	bl	800fb4c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800b226:	2200      	movs	r2, #0
 800b228:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fe43 	bl	800aeb8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800b232:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b236:	4618      	mov	r0, r3
 800b238:	f7fa f8ad 	bl	8005396 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800b23c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b240:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b244:	4293      	cmp	r3, r2
 800b246:	d007      	beq.n	800b258 <lfs_fs_deorphan+0x260>
 800b248:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b24c:	029b      	lsls	r3, r3, #10
 800b24e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800b252:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800b256:	e000      	b.n	800b25a <lfs_fs_deorphan+0x262>
 800b258:	2300      	movs	r3, #0
 800b25a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b25c:	2300      	movs	r3, #0
 800b25e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b262:	4b36      	ldr	r3, [pc, #216]	; (800b33c <lfs_fs_deorphan+0x344>)
 800b264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b268:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b26c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b270:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800b274:	f107 010c 	add.w	r1, r7, #12
 800b278:	2302      	movs	r3, #2
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7fd f8c8 	bl	8008410 <lfs_dir_orphaningcommit>
 800b280:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800b284:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fa f86a 	bl	8005362 <lfs_pair_fromle32>
                        if (state < 0) {
 800b28e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b292:	2b00      	cmp	r3, #0
 800b294:	da02      	bge.n	800b29c <lfs_fs_deorphan+0x2a4>
                            return state;
 800b296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                    return tag;
 800b29a:	e03d      	b.n	800b318 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 800b29c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800b2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d103      	bne.n	800b2b8 <lfs_fs_deorphan+0x2c0>
                            goto restart;
 800b2b0:	bf00      	nop
 800b2b2:	e6b7      	b.n	800b024 <lfs_fs_deorphan+0x2c>
                    continue;
 800b2b4:	bf00      	nop
 800b2b6:	e00b      	b.n	800b2d0 <lfs_fs_deorphan+0x2d8>
                        }

                        // refetch tail
                        continue;
 800b2b8:	bf00      	nop
 800b2ba:	e009      	b.n	800b2d0 <lfs_fs_deorphan+0x2d8>
                    }
                }
            }

            pdir = dir;
 800b2bc:	f107 040c 	add.w	r4, r7, #12
 800b2c0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 800b2c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b2cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800b2d0:	f107 030c 	add.w	r3, r7, #12
 800b2d4:	3318      	adds	r3, #24
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f9 ffd1 	bl	800527e <lfs_pair_isnull>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f083 0301 	eor.w	r3, r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f47f aeaa 	bne.w	800b03e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3330      	adds	r3, #48	; 0x30
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fa f94b 	bl	800558a <lfs_gstate_getorphans>
 800b2f4:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f7f9 fba8 	bl	8004a54 <lfs_min>
 800b304:	4603      	mov	r3, r0
 800b306:	b2db      	uxtb	r3, r3
 800b308:	425b      	negs	r3, r3
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	b25b      	sxtb	r3, r3
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff fd97 	bl	800ae44 <lfs_fs_preporphans>
 800b316:	4603      	mov	r3, r0
            found));
}
 800b318:	4618      	mov	r0, r3
 800b31a:	37a0      	adds	r7, #160	; 0xa0
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bdb0      	pop	{r4, r5, r7, pc}
 800b320:	08011354 	.word	0x08011354
 800b324:	08011258 	.word	0x08011258
 800b328:	08011a10 	.word	0x08011a10
 800b32c:	000ffc08 	.word	0x000ffc08
 800b330:	7ffffc00 	.word	0x7ffffc00
 800b334:	08011a40 	.word	0x08011a40
 800b338:	08011a88 	.word	0x08011a88
 800b33c:	600ffc08 	.word	0x600ffc08

0800b340 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7ff fdef 	bl	800af2c <lfs_fs_demove>
 800b34e:	60f8      	str	r0, [r7, #12]
    if (err) {
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <lfs_fs_forceconsistency+0x1a>
        return err;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	e00a      	b.n	800b370 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 800b35a:	2101      	movs	r1, #1
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fe4b 	bl	800aff8 <lfs_fs_deorphan>
 800b362:	60f8      	str	r0, [r7, #12]
    if (err) {
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <lfs_fs_forceconsistency+0x2e>
        return err;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	e000      	b.n	800b370 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	601a      	str	r2, [r3, #0]
    return 0;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
	...

0800b3a0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800b3ac:	f107 0208 	add.w	r2, r7, #8
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4907      	ldr	r1, [pc, #28]	; (800b3d0 <lfs_fs_rawsize+0x30>)
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff fb3f 	bl	800aa38 <lfs_fs_rawtraverse>
 800b3ba:	60f8      	str	r0, [r7, #12]
    if (err) {
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <lfs_fs_rawsize+0x26>
        return err;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	e000      	b.n	800b3c8 <lfs_fs_rawsize+0x28>
    }

    return size;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	0800b379 	.word	0x0800b379

0800b3d4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <lfs_format+0x18>
        return err;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	e005      	b.n	800b3f8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff f8ca 	bl	800a588 <lfs_rawformat>
 800b3f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <lfs_mount+0x18>
        return err;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	e005      	b.n	800b424 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff f954 	bl	800a6c8 <lfs_rawmount>
 800b420:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800b422:	68fb      	ldr	r3, [r7, #12]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
    if (err) {
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <lfs_remove+0x18>
        return err;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	e005      	b.n	800b450 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7fe fde6 	bl	800a018 <lfs_rawremove>
 800b44c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800b44e:	68fb      	ldr	r3, [r7, #12]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
    if (err) {
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <lfs_file_open+0x1c>
        return err;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	e01a      	b.n	800b4aa <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b478:	68b9      	ldr	r1, [r7, #8]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fa f9a7 	bl	80057ce <lfs_mlist_isopen>
 800b480:	4603      	mov	r3, r0
 800b482:	f083 0301 	eor.w	r3, r3, #1
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d106      	bne.n	800b49a <lfs_file_open+0x42>
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <lfs_file_open+0x5c>)
 800b48e:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <lfs_file_open+0x60>)
 800b490:	f241 5167 	movw	r1, #5479	; 0x1567
 800b494:	4809      	ldr	r0, [pc, #36]	; (800b4bc <lfs_file_open+0x64>)
 800b496:	f003 ff39 	bl	800f30c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	68b9      	ldr	r1, [r7, #8]
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f7fd ffcf 	bl	8009444 <lfs_file_rawopen>
 800b4a6:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800b4a8:	697b      	ldr	r3, [r7, #20]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	08011ad0 	.word	0x08011ad0
 800b4b8:	08011db0 	.word	0x08011db0
 800b4bc:	08011258 	.word	0x08011258

0800b4c0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60fb      	str	r3, [r7, #12]
    if (err) {
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <lfs_file_close+0x18>
        return err;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	e015      	b.n	800b504 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fa f975 	bl	80057ce <lfs_mlist_isopen>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <lfs_file_close+0x38>
 800b4ea:	4b08      	ldr	r3, [pc, #32]	; (800b50c <lfs_file_close+0x4c>)
 800b4ec:	4a08      	ldr	r2, [pc, #32]	; (800b510 <lfs_file_close+0x50>)
 800b4ee:	f241 518b 	movw	r1, #5515	; 0x158b
 800b4f2:	4808      	ldr	r0, [pc, #32]	; (800b514 <lfs_file_close+0x54>)
 800b4f4:	f003 ff0a 	bl	800f30c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7fd ffba 	bl	8009474 <lfs_file_rawclose>
 800b500:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800b502:	68fb      	ldr	r3, [r7, #12]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	08011b08 	.word	0x08011b08
 800b510:	08011dc0 	.word	0x08011dc0
 800b514:	08011258 	.word	0x08011258

0800b518 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b526:	2300      	movs	r3, #0
 800b528:	617b      	str	r3, [r7, #20]
    if (err) {
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <lfs_file_read+0x1c>
        return err;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	e017      	b.n	800b564 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fa f947 	bl	80057ce <lfs_mlist_isopen>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <lfs_file_read+0x3c>
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <lfs_file_read+0x54>)
 800b548:	4a09      	ldr	r2, [pc, #36]	; (800b570 <lfs_file_read+0x58>)
 800b54a:	f241 51ad 	movw	r1, #5549	; 0x15ad
 800b54e:	4809      	ldr	r0, [pc, #36]	; (800b574 <lfs_file_read+0x5c>)
 800b550:	f003 fedc 	bl	800f30c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7fe fad6 	bl	8009b0c <lfs_file_rawread>
 800b560:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800b562:	693b      	ldr	r3, [r7, #16]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	08011b08 	.word	0x08011b08
 800b570:	08011dd0 	.word	0x08011dd0
 800b574:	08011258 	.word	0x08011258

0800b578 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]
    if (err) {
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <lfs_file_write+0x1c>
        return err;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	e017      	b.n	800b5c4 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fa f917 	bl	80057ce <lfs_mlist_isopen>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d106      	bne.n	800b5b4 <lfs_file_write+0x3c>
 800b5a6:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <lfs_file_write+0x54>)
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <lfs_file_write+0x58>)
 800b5aa:	f241 51bf 	movw	r1, #5567	; 0x15bf
 800b5ae:	4809      	ldr	r0, [pc, #36]	; (800b5d4 <lfs_file_write+0x5c>)
 800b5b0:	f003 feac 	bl	800f30c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7fe fc04 	bl	8009dc8 <lfs_file_rawwrite>
 800b5c0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800b5c2:	693b      	ldr	r3, [r7, #16]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	08011b08 	.word	0x08011b08
 800b5d0:	08011de0 	.word	0x08011de0
 800b5d4:	08011258 	.word	0x08011258

0800b5d8 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
    if (err) {
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <lfs_file_seek+0x1c>
        return err;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	e017      	b.n	800b624 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fa f8e7 	bl	80057ce <lfs_mlist_isopen>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <lfs_file_seek+0x3c>
 800b606:	4b09      	ldr	r3, [pc, #36]	; (800b62c <lfs_file_seek+0x54>)
 800b608:	4a09      	ldr	r2, [pc, #36]	; (800b630 <lfs_file_seek+0x58>)
 800b60a:	f241 51d1 	movw	r1, #5585	; 0x15d1
 800b60e:	4809      	ldr	r0, [pc, #36]	; (800b634 <lfs_file_seek+0x5c>)
 800b610:	f003 fe7c 	bl	800f30c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	68b9      	ldr	r1, [r7, #8]
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7fe fc58 	bl	8009ed0 <lfs_file_rawseek>
 800b620:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800b622:	693b      	ldr	r3, [r7, #16]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	08011b08 	.word	0x08011b08
 800b630:	08011df0 	.word	0x08011df0
 800b634:	08011258 	.word	0x08011258

0800b638 <lfs_file_size>:
    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
    if (err) {
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <lfs_file_size+0x18>
        return err;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	e015      	b.n	800b67c <lfs_file_size+0x44>
    }
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	4618      	mov	r0, r3
 800b658:	f7fa f8b9 	bl	80057ce <lfs_mlist_isopen>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <lfs_file_size+0x38>
 800b662:	4b08      	ldr	r3, [pc, #32]	; (800b684 <lfs_file_size+0x4c>)
 800b664:	4a08      	ldr	r2, [pc, #32]	; (800b688 <lfs_file_size+0x50>)
 800b666:	f241 610f 	movw	r1, #5647	; 0x160f
 800b66a:	4808      	ldr	r0, [pc, #32]	; (800b68c <lfs_file_size+0x54>)
 800b66c:	f003 fe4e 	bl	800f30c <__assert_func>

    lfs_soff_t res = lfs_file_rawsize(lfs, file);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7fe fcb5 	bl	8009fe2 <lfs_file_rawsize>
 800b678:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_size -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800b67a:	68bb      	ldr	r3, [r7, #8]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	08011b08 	.word	0x08011b08
 800b688:	08011e00 	.word	0x08011e00
 800b68c:	08011258 	.word	0x08011258

0800b690 <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]
    if (err) {
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <lfs_dir_open+0x1a>
        return err;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	e019      	b.n	800b6de <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ae:	68b9      	ldr	r1, [r7, #8]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fa f88c 	bl	80057ce <lfs_mlist_isopen>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f083 0301 	eor.w	r3, r3, #1
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <lfs_dir_open+0x40>
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <lfs_dir_open+0x58>)
 800b6c4:	4a09      	ldr	r2, [pc, #36]	; (800b6ec <lfs_dir_open+0x5c>)
 800b6c6:	f241 612e 	movw	r1, #5678	; 0x162e
 800b6ca:	4809      	ldr	r0, [pc, #36]	; (800b6f0 <lfs_dir_open+0x60>)
 800b6cc:	f003 fe1e 	bl	800f30c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f7fd f9af 	bl	8008a38 <lfs_dir_rawopen>
 800b6da:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800b6dc:	697b      	ldr	r3, [r7, #20]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	08011b40 	.word	0x08011b40
 800b6ec:	08011e10 	.word	0x08011e10
 800b6f0:	08011258 	.word	0x08011258

0800b6f4 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
    if (err) {
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <lfs_dir_close+0x18>
        return err;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	e005      	b.n	800b718 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fd fa0c 	bl	8008b2c <lfs_dir_rawclose>
 800b714:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800b72c:	2300      	movs	r3, #0
 800b72e:	617b      	str	r3, [r7, #20]
    if (err) {
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <lfs_dir_read+0x1a>
        return err;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	e006      	b.n	800b748 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	68b9      	ldr	r1, [r7, #8]
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7fd fa02 	bl	8008b48 <lfs_dir_rawread>
 800b744:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800b746:	697b      	ldr	r3, [r7, #20]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3718      	adds	r7, #24
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <lfs_flash_read>:
 * @param void *buffer					: [out] Output buffer
 * @param lfs_size_t size				: [ in] Size of the output buffer
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]

	/* Calculate first byte's address
	 ------------------------------------------------*/
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	045a      	lsls	r2, r3, #17
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	4a16      	ldr	r2, [pc, #88]	; (800b7c0 <lfs_flash_read+0x70>)
 800b768:	4413      	add	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

	/* Check arguments
	 ------------------------------------------------*/
	if(size == 0) return -5;
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d102      	bne.n	800b778 <lfs_flash_read+0x28>
 800b772:	f06f 0304 	mvn.w	r3, #4
 800b776:	e01e      	b.n	800b7b6 <lfs_flash_read+0x66>
	if(addr < LFS_BASE_ADDR) return -5;
 800b778:	4a11      	ldr	r2, [pc, #68]	; (800b7c0 <lfs_flash_read+0x70>)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d202      	bcs.n	800b786 <lfs_flash_read+0x36>
 800b780:	f06f 0304 	mvn.w	r3, #4
 800b784:	e017      	b.n	800b7b6 <lfs_flash_read+0x66>
	if(addr >= LFS_END_ADDR) return -5;
 800b786:	4a0f      	ldr	r2, [pc, #60]	; (800b7c4 <lfs_flash_read+0x74>)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d302      	bcc.n	800b794 <lfs_flash_read+0x44>
 800b78e:	f06f 0304 	mvn.w	r3, #4
 800b792:	e010      	b.n	800b7b6 <lfs_flash_read+0x66>

	/* Read from flash and returns 0 if OK
	 ------------------------------------------------*/
	int32_t ret = os_flash_read(addr, buffer, size);
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6978      	ldr	r0, [r7, #20]
 800b79a:	f7f8 fff1 	bl	8004780 <os_flash_read>
 800b79e:	6138      	str	r0, [r7, #16]
	ASSERT(ret >= 0);
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da04      	bge.n	800b7b0 <lfs_flash_read+0x60>
 800b7a6:	223e      	movs	r2, #62	; 0x3e
 800b7a8:	4907      	ldr	r1, [pc, #28]	; (800b7c8 <lfs_flash_read+0x78>)
 800b7aa:	4808      	ldr	r0, [pc, #32]	; (800b7cc <lfs_flash_read+0x7c>)
 800b7ac:	f004 f9ce 	bl	800fb4c <iprintf>
	return ret < 0 ? (int)ret : 0;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	08020000 	.word	0x08020000
 800b7c4:	08100000 	.word	0x08100000
 800b7c8:	08011b78 	.word	0x08011b78
 800b7cc:	08011b84 	.word	0x08011b84

0800b7d0 <lfs_flash_write>:
 * @param const void *buffer			: [ in] Input buffer
 * @param lfs_size_t size				: [ in] Size of the output buffer
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_write(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]

	/* Calculate address of the first byte
	 ------------------------------------------------*/
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	045a      	lsls	r2, r3, #17
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	4a0c      	ldr	r2, [pc, #48]	; (800b818 <lfs_flash_write+0x48>)
 800b7e8:	4413      	add	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

	/* Write buffer in flash and return 0 if OK
	 ------------------------------------------------*/
	int32_t ret = os_flash_write(addr, (uint8_t*)buffer, size);
 800b7ec:	6a3a      	ldr	r2, [r7, #32]
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6978      	ldr	r0, [r7, #20]
 800b7f2:	f7f8 febb 	bl	800456c <os_flash_write>
 800b7f6:	6138      	str	r0, [r7, #16]
	ASSERT(ret >= 0);
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	da04      	bge.n	800b808 <lfs_flash_write+0x38>
 800b7fe:	2259      	movs	r2, #89	; 0x59
 800b800:	4906      	ldr	r1, [pc, #24]	; (800b81c <lfs_flash_write+0x4c>)
 800b802:	4807      	ldr	r0, [pc, #28]	; (800b820 <lfs_flash_write+0x50>)
 800b804:	f004 f9a2 	bl	800fb4c <iprintf>
	return ret < 0 ? (int)ret : 0;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	08020000 	.word	0x08020000
 800b81c:	08011b78 	.word	0x08011b78
 800b820:	08011b84 	.word	0x08011b84

0800b824 <lfs_flash_erase>:
 * @param const struct lfs_config *c	: [ in] Configuration file used
 * @param lfs_block_t block				: [ in] The index of the block
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_erase(const struct lfs_config *c, lfs_block_t block){
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]

	/* Calculate fist address
	 ------------------------------------------------*/
	uint32_t addr = block * SECTOR_SIZE + LFS_BASE_ADDR;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	045b      	lsls	r3, r3, #17
 800b832:	4a0b      	ldr	r2, [pc, #44]	; (800b860 <lfs_flash_erase+0x3c>)
 800b834:	4413      	add	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]

	/* Erase block and return 0 if ok
	 ------------------------------------------------*/
	int32_t ret = os_flash_erase(addr, 1);
 800b838:	2101      	movs	r1, #1
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7f8 ffe0 	bl	8004800 <os_flash_erase>
 800b840:	60b8      	str	r0, [r7, #8]
	ASSERT(ret >= 0);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	da04      	bge.n	800b852 <lfs_flash_erase+0x2e>
 800b848:	2271      	movs	r2, #113	; 0x71
 800b84a:	4906      	ldr	r1, [pc, #24]	; (800b864 <lfs_flash_erase+0x40>)
 800b84c:	4806      	ldr	r0, [pc, #24]	; (800b868 <lfs_flash_erase+0x44>)
 800b84e:	f004 f97d 	bl	800fb4c <iprintf>
	return ret < 0 ? (int)ret : 0;
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	08020000 	.word	0x08020000
 800b864:	08011b78 	.word	0x08011b78
 800b868:	08011b84 	.word	0x08011b84

0800b86c <lfs_flash_sync>:
 *
 * @param const struct lfs_config *c	: [ in] Configuration file used
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_sync(const struct lfs_config *c){
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	return 0;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
	...

0800b884 <os_lfs_init>:
 * LFS Init
 *
 * @brief This function initializes the file system
 *
 **********************************************************************/
void os_lfs_init(){
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0

	/* Calculate sector size and number of sector using the pieces of information given by the linker
	 ------------------------------------------------*/
	lfs_cfg.block_size = SECTOR_SIZE;
 800b88a:	4b21      	ldr	r3, [pc, #132]	; (800b910 <os_lfs_init+0x8c>)
 800b88c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b890:	61da      	str	r2, [r3, #28]
	lfs_cfg.block_count = (uint32_t)LFS_TOTAL_SIZE/SECTOR_SIZE;
 800b892:	4b20      	ldr	r3, [pc, #128]	; (800b914 <os_lfs_init+0x90>)
 800b894:	0c5b      	lsrs	r3, r3, #17
 800b896:	4a1e      	ldr	r2, [pc, #120]	; (800b910 <os_lfs_init+0x8c>)
 800b898:	6213      	str	r3, [r2, #32]

	/* Try to mount the file system
	 ------------------------------------------------*/
    int err = lfs_mount(&lfs, &lfs_cfg);
 800b89a:	491d      	ldr	r1, [pc, #116]	; (800b910 <os_lfs_init+0x8c>)
 800b89c:	481e      	ldr	r0, [pc, #120]	; (800b918 <os_lfs_init+0x94>)
 800b89e:	f7ff fdaf 	bl	800b400 <lfs_mount>
 800b8a2:	6078      	str	r0, [r7, #4]
    if(err < 0){
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	da28      	bge.n	800b8fc <os_lfs_init+0x78>

    	PRINTLN("LFS mount fail %d", err);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	22df      	movs	r2, #223	; 0xdf
 800b8ae:	491b      	ldr	r1, [pc, #108]	; (800b91c <os_lfs_init+0x98>)
 800b8b0:	481b      	ldr	r0, [pc, #108]	; (800b920 <os_lfs_init+0x9c>)
 800b8b2:	f004 f94b 	bl	800fb4c <iprintf>

    	/* Reformat if we can't mount the filesystem
    	 * this should only happen on the first boot
    	 ------------------------------------------------*/
        err = lfs_format(&lfs, &lfs_cfg);
 800b8b6:	4916      	ldr	r1, [pc, #88]	; (800b910 <os_lfs_init+0x8c>)
 800b8b8:	4817      	ldr	r0, [pc, #92]	; (800b918 <os_lfs_init+0x94>)
 800b8ba:	f7ff fd8b 	bl	800b3d4 <lfs_format>
 800b8be:	6078      	str	r0, [r7, #4]
        if(err < 0){
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	da05      	bge.n	800b8d2 <os_lfs_init+0x4e>
        	PRINTLN("LFS format fail %d", err);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	22e6      	movs	r2, #230	; 0xe6
 800b8ca:	4914      	ldr	r1, [pc, #80]	; (800b91c <os_lfs_init+0x98>)
 800b8cc:	4815      	ldr	r0, [pc, #84]	; (800b924 <os_lfs_init+0xa0>)
 800b8ce:	f004 f93d 	bl	800fb4c <iprintf>
        }

    	/* Try to mount the file system again
    	 ------------------------------------------------*/
        err = lfs_mount(&lfs, &lfs_cfg);
 800b8d2:	490f      	ldr	r1, [pc, #60]	; (800b910 <os_lfs_init+0x8c>)
 800b8d4:	4810      	ldr	r0, [pc, #64]	; (800b918 <os_lfs_init+0x94>)
 800b8d6:	f7ff fd93 	bl	800b400 <lfs_mount>
 800b8da:	6078      	str	r0, [r7, #4]
        if(err < 0){
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	da06      	bge.n	800b8f0 <os_lfs_init+0x6c>
        	PRINTLN("LFS mount fail %d", err);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	22ed      	movs	r2, #237	; 0xed
 800b8e6:	490d      	ldr	r1, [pc, #52]	; (800b91c <os_lfs_init+0x98>)
 800b8e8:	480d      	ldr	r0, [pc, #52]	; (800b920 <os_lfs_init+0x9c>)
 800b8ea:	f004 f92f 	bl	800fb4c <iprintf>
	 ------------------------------------------------*/
    else{
    	PRINTLN("LFS Mount OK");
    }

}
 800b8ee:	e00a      	b.n	800b906 <os_lfs_init+0x82>
        	PRINTLN("LFS Mount OK");
 800b8f0:	22f1      	movs	r2, #241	; 0xf1
 800b8f2:	490a      	ldr	r1, [pc, #40]	; (800b91c <os_lfs_init+0x98>)
 800b8f4:	480c      	ldr	r0, [pc, #48]	; (800b928 <os_lfs_init+0xa4>)
 800b8f6:	f004 f929 	bl	800fb4c <iprintf>
}
 800b8fa:	e004      	b.n	800b906 <os_lfs_init+0x82>
    	PRINTLN("LFS Mount OK");
 800b8fc:	22f8      	movs	r2, #248	; 0xf8
 800b8fe:	4907      	ldr	r1, [pc, #28]	; (800b91c <os_lfs_init+0x98>)
 800b900:	4809      	ldr	r0, [pc, #36]	; (800b928 <os_lfs_init+0xa4>)
 800b902:	f004 f923 	bl	800fb4c <iprintf>
}
 800b906:	bf00      	nop
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20000274 	.word	0x20000274
 800b914:	000e0000 	.word	0x000e0000
 800b918:	20015618 	.word	0x20015618
 800b91c:	08011b78 	.word	0x08011b78
 800b920:	08011ba0 	.word	0x08011ba0
 800b924:	08011bc0 	.word	0x08011bc0
 800b928:	08011be0 	.word	0x08011be0

0800b92c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e024      	b.n	800b98c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	091a      	lsrs	r2, r3, #4
 800b946:	6939      	ldr	r1, [r7, #16]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	440b      	add	r3, r1
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	4619      	mov	r1, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	404b      	eors	r3, r1
 800b954:	f003 030f 	and.w	r3, r3, #15
 800b958:	4912      	ldr	r1, [pc, #72]	; (800b9a4 <lfs_crc+0x78>)
 800b95a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b95e:	4053      	eors	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	091a      	lsrs	r2, r3, #4
 800b966:	6939      	ldr	r1, [r7, #16]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	440b      	add	r3, r1
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	091b      	lsrs	r3, r3, #4
 800b970:	b2db      	uxtb	r3, r3
 800b972:	4619      	mov	r1, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	404b      	eors	r3, r1
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	4909      	ldr	r1, [pc, #36]	; (800b9a4 <lfs_crc+0x78>)
 800b97e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b982:	4053      	eors	r3, r2
 800b984:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	3301      	adds	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	429a      	cmp	r2, r3
 800b992:	d3d6      	bcc.n	800b942 <lfs_crc+0x16>
    }

    return crc;
 800b994:	68fb      	ldr	r3, [r7, #12]
}
 800b996:	4618      	mov	r0, r3
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	08011e20 	.word	0x08011e20

0800b9a8 <xmodemCrc>:
 *
 * @return uint16_t : new CRC value
 *
 **********************************************************************/
static uint16_t xmodemCrc(const uint8_t newByte, uint16_t prevResult)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	460a      	mov	r2, r1
 800b9b2:	71fb      	strb	r3, [r7, #7]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	80bb      	strh	r3, [r7, #4]
	prevResult = (uint16_t)((prevResult >> 8) | (prevResult << 8));
 800b9b8:	88bb      	ldrh	r3, [r7, #4]
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	b21a      	sxth	r2, r3
 800b9c0:	88bb      	ldrh	r3, [r7, #4]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	b21b      	sxth	r3, r3
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	b21b      	sxth	r3, r3
 800b9ca:	80bb      	strh	r3, [r7, #4]
	prevResult = (uint16_t)(newByte ^ prevResult);
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	88bb      	ldrh	r3, [r7, #4]
 800b9d2:	4053      	eors	r3, r2
 800b9d4:	80bb      	strh	r3, [r7, #4]
	prevResult ^= (uint16_t)((prevResult & 0xff) >> 4);
 800b9d6:	88bb      	ldrh	r3, [r7, #4]
 800b9d8:	111b      	asrs	r3, r3, #4
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	88bb      	ldrh	r3, [r7, #4]
 800b9e4:	4053      	eors	r3, r2
 800b9e6:	80bb      	strh	r3, [r7, #4]
	prevResult ^= (uint16_t)((prevResult << 8) << 4);
 800b9e8:	88bb      	ldrh	r3, [r7, #4]
 800b9ea:	031b      	lsls	r3, r3, #12
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	88bb      	ldrh	r3, [r7, #4]
 800b9f0:	4053      	eors	r3, r2
 800b9f2:	80bb      	strh	r3, [r7, #4]

	prevResult = (uint16_t)((((uint8_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) << 5)) | ((uint16_t) ((uint8_t) ((uint8_t) (prevResult & 0xff)) >> 3) << 8)) ^ prevResult);
 800b9f4:	88bb      	ldrh	r3, [r7, #4]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	015b      	lsls	r3, r3, #5
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	b21a      	sxth	r2, r3
 800b9fe:	88bb      	ldrh	r3, [r7, #4]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	08db      	lsrs	r3, r3, #3
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	b21b      	sxth	r3, r3
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	b21a      	sxth	r2, r3
 800ba0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ba12:	4053      	eors	r3, r2
 800ba14:	b21b      	sxth	r3, r3
 800ba16:	80bb      	strh	r3, [r7, #4]

	return prevResult;
 800ba18:	88bb      	ldrh	r3, [r7, #4]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <xmodemCrcStream>:
 *
 * @return uint16_t : new CRC value
 *
 **********************************************************************/
static uint16_t xmodemCrcStream(const uint8_t *buffer, size_t length, uint16_t prevResult)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b086      	sub	sp, #24
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	4613      	mov	r3, r2
 800ba32:	80fb      	strh	r3, [r7, #6]
	size_t position = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]
	for (; position < length; position++) {
 800ba38:	e00d      	b.n	800ba56 <xmodemCrcStream+0x30>
		prevResult = xmodemCrc(buffer[position], prevResult);
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	4413      	add	r3, r2
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	88fa      	ldrh	r2, [r7, #6]
 800ba44:	4611      	mov	r1, r2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff ffae 	bl	800b9a8 <xmodemCrc>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	80fb      	strh	r3, [r7, #6]
	for (; position < length; position++) {
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	3301      	adds	r3, #1
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d3ed      	bcc.n	800ba3a <xmodemCrcStream+0x14>
	}

	return prevResult;
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <sendResponse>:
 *
 * @param uint8_t packet : 	[in] The response to send
 *
 **********************************************************************/
static void sendResponse(uint8_t packet)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 800ba72:	1df9      	adds	r1, r7, #7
 800ba74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba78:	2201      	movs	r2, #1
 800ba7a:	480c      	ldr	r0, [pc, #48]	; (800baac <sendResponse+0x44>)
 800ba7c:	f002 fa69 	bl	800df52 <HAL_UART_Transmit>

	if (packet == XMODEM_CMD_CAN) {
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	2b18      	cmp	r3, #24
 800ba84:	d10d      	bne.n	800baa2 <sendResponse+0x3a>
		// If packet is CAN, send three times
		HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 800ba86:	1df9      	adds	r1, r7, #7
 800ba88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	4807      	ldr	r0, [pc, #28]	; (800baac <sendResponse+0x44>)
 800ba90:	f002 fa5f 	bl	800df52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&USART_CLI, &packet, sizeof(packet), 1000);
 800ba94:	1df9      	adds	r1, r7, #7
 800ba96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	4803      	ldr	r0, [pc, #12]	; (800baac <sendResponse+0x44>)
 800ba9e:	f002 fa58 	bl	800df52 <HAL_UART_Transmit>
	}
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	200156d0 	.word	0x200156d0

0800bab0 <xmodemParsePacket>:
 * @param XmodemPacket_t *packet : [ in] Packet to verify
 * @param uint8_t *response		 : [out] reponse
 *
 **********************************************************************/
static void xmodemParsePacket(XmodemPacket_t *packet, uint8_t *response)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
	uint16_t crc16 = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	81fb      	strh	r3, [r7, #14]

	switch (packet->header) {
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	d069      	beq.n	800bb9a <xmodemParsePacket+0xea>
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	dc04      	bgt.n	800bad4 <xmodemParsePacket+0x24>
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d007      	beq.n	800bade <xmodemParsePacket+0x2e>
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d067      	beq.n	800bba2 <xmodemParsePacket+0xf2>
 800bad2:	e06a      	b.n	800bbaa <xmodemParsePacket+0xfa>
 800bad4:	2b18      	cmp	r3, #24
 800bad6:	d064      	beq.n	800bba2 <xmodemParsePacket+0xf2>
 800bad8:	2b43      	cmp	r3, #67	; 0x43
 800bada:	d062      	beq.n	800bba2 <xmodemParsePacket+0xf2>
 800badc:	e065      	b.n	800bbaa <xmodemParsePacket+0xfa>
	case XMODEM_CMD_SOH:
		// Packet number must start at 1, and must monotonically increase
		if (!started) {
 800bade:	4b36      	ldr	r3, [pc, #216]	; (800bbb8 <xmodemParsePacket+0x108>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f083 0301 	eor.w	r3, r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <xmodemParsePacket+0x54>
			if (packet->packetNumber != 0x01) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d003      	beq.n	800bafc <xmodemParsePacket+0x4c>
				*response = XMODEM_CMD_NAK;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2215      	movs	r2, #21
 800baf8:	701a      	strb	r2, [r3, #0]
				return;
 800bafa:	e05a      	b.n	800bbb2 <xmodemParsePacket+0x102>
			}
			started = true;
 800bafc:	4b2e      	ldr	r3, [pc, #184]	; (800bbb8 <xmodemParsePacket+0x108>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	e015      	b.n	800bb30 <xmodemParsePacket+0x80>
		} else {
			if (packet->packetNumber == packetNumber) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	785a      	ldrb	r2, [r3, #1]
 800bb08:	4b2c      	ldr	r3, [pc, #176]	; (800bbbc <xmodemParsePacket+0x10c>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d103      	bne.n	800bb18 <xmodemParsePacket+0x68>
				*response = XMODEM_CMD_ACK;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2206      	movs	r2, #6
 800bb14:	701a      	strb	r2, [r3, #0]
				return;
 800bb16:	e04c      	b.n	800bbb2 <xmodemParsePacket+0x102>
			} else if (packet->packetNumber != (uint8_t)(packetNumber + 1)) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	785a      	ldrb	r2, [r3, #1]
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <xmodemParsePacket+0x10c>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	3301      	adds	r3, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d003      	beq.n	800bb30 <xmodemParsePacket+0x80>
				*response = XMODEM_CMD_NAK;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2215      	movs	r2, #21
 800bb2c:	701a      	strb	r2, [r3, #0]
				return;
 800bb2e:	e040      	b.n	800bbb2 <xmodemParsePacket+0x102>
			}
		}

		// Byte 3 is the two's complement of the packet number in the second byte
		if (packet->packetNumber + packet->packetNumberC != 0xFF) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	461a      	mov	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	789b      	ldrb	r3, [r3, #2]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	2bff      	cmp	r3, #255	; 0xff
 800bb3e:	d003      	beq.n	800bb48 <xmodemParsePacket+0x98>
			*response = XMODEM_CMD_NAK;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2215      	movs	r2, #21
 800bb44:	701a      	strb	r2, [r3, #0]
			return;
 800bb46:	e034      	b.n	800bbb2 <xmodemParsePacket+0x102>
		}

		// Bytes 132-133 contain a 16-bit CRC over the data bytes
		crc16 = xmodemCrcStream(packet->data, XMODEM_DATA_SIZE, crc16);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3303      	adds	r3, #3
 800bb4c:	89fa      	ldrh	r2, [r7, #14]
 800bb4e:	2180      	movs	r1, #128	; 0x80
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff ff68 	bl	800ba26 <xmodemCrcStream>
 800bb56:	4603      	mov	r3, r0
 800bb58:	81fb      	strh	r3, [r7, #14]

		if (((crc16 >> 8) & 0xFF) != packet->crcH) {
 800bb5a:	89fb      	ldrh	r3, [r7, #14]
 800bb5c:	0a1b      	lsrs	r3, r3, #8
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d003      	beq.n	800bb74 <xmodemParsePacket+0xc4>
			*response = XMODEM_CMD_NAK;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2215      	movs	r2, #21
 800bb70:	701a      	strb	r2, [r3, #0]
			return;
 800bb72:	e01e      	b.n	800bbb2 <xmodemParsePacket+0x102>
		}

		if ((crc16 & 0xFF) != packet->crcL) {
 800bb74:	89fb      	ldrh	r3, [r7, #14]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d003      	beq.n	800bb8a <xmodemParsePacket+0xda>
			*response = XMODEM_CMD_NAK;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2215      	movs	r2, #21
 800bb86:	701a      	strb	r2, [r3, #0]
			return;
 800bb88:	e013      	b.n	800bbb2 <xmodemParsePacket+0x102>
		}

		packetNumber = packet->packetNumber;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	785a      	ldrb	r2, [r3, #1]
 800bb8e:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <xmodemParsePacket+0x10c>)
 800bb90:	701a      	strb	r2, [r3, #0]
		*response = XMODEM_CMD_ACK;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2206      	movs	r2, #6
 800bb96:	701a      	strb	r2, [r3, #0]
		return;
 800bb98:	e00b      	b.n	800bbb2 <xmodemParsePacket+0x102>

	case XMODEM_CMD_EOT:
		*response = XMODEM_CMD_ACK;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2206      	movs	r2, #6
 800bb9e:	701a      	strb	r2, [r3, #0]
		return;
 800bba0:	e007      	b.n	800bbb2 <xmodemParsePacket+0x102>
		break;
	case XMODEM_CMD_CAN:
	case XMODEM_CMD_C:
	case XMODEM_CMD_CTRL_C:
		*response = XMODEM_CMD_CAN;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2218      	movs	r2, #24
 800bba6:	701a      	strb	r2, [r3, #0]
		return;
 800bba8:	e003      	b.n	800bbb2 <xmodemParsePacket+0x102>
	default:
		*response = XMODEM_CMD_CAN;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2218      	movs	r2, #24
 800bbae:	701a      	strb	r2, [r3, #0]
		return;
 800bbb0:	bf00      	nop
	}
}
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	20014dc9 	.word	0x20014dc9
 800bbbc:	20014dc8 	.word	0x20014dc8

0800bbc0 <xModem_rcv>:
 * @brief This functions receives a file via XMODEM protocol
 *
 * @param char* path : [in] the name of the file to create
 *
 **********************************************************************/
void xModem_rcv(char* path){
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b0c2      	sub	sp, #264	; 0x108
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	1d3b      	adds	r3, r7, #4
 800bbc8:	6018      	str	r0, [r3, #0]

	XmodemState_t state = XMODEM_STATE_WAIT_TO_START;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t packet[133];
	uint8_t response = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	int waitToStart = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	uint16_t receivedBytes;
	uint32_t address = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	lfs_file_t lfs_file;
	lfs_remove(&lfs, path);
 800bbe2:	1d3b      	adds	r3, r7, #4
 800bbe4:	6819      	ldr	r1, [r3, #0]
 800bbe6:	4881      	ldr	r0, [pc, #516]	; (800bdec <xModem_rcv+0x22c>)
 800bbe8:	f7ff fc20 	bl	800b42c <lfs_remove>
	int32_t file_error = lfs_file_open(&lfs, &lfs_file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC);
 800bbec:	1d3a      	adds	r2, r7, #4
 800bbee:	f107 0108 	add.w	r1, r7, #8
 800bbf2:	f240 5303 	movw	r3, #1283	; 0x503
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	487c      	ldr	r0, [pc, #496]	; (800bdec <xModem_rcv+0x22c>)
 800bbfa:	f7ff fc2d 	bl	800b458 <lfs_file_open>
 800bbfe:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	if(file_error<0) {
 800bc02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f2c0 80ea 	blt.w	800bde0 <xModem_rcv+0x220>
		return;
	}

	HAL_UART_Abort(&USART_CLI);
 800bc0c:	4878      	ldr	r0, [pc, #480]	; (800bdf0 <xModem_rcv+0x230>)
 800bc0e:	f002 fb34 	bl	800e27a <HAL_UART_Abort>
	HAL_UART_Abort_IT(&USART_CLI);
 800bc12:	4877      	ldr	r0, [pc, #476]	; (800bdf0 <xModem_rcv+0x230>)
 800bc14:	f002 fc00 	bl	800e418 <HAL_UART_Abort_IT>
	HAL_UART_AbortReceive(&USART_CLI);
 800bc18:	4875      	ldr	r0, [pc, #468]	; (800bdf0 <xModem_rcv+0x230>)
 800bc1a:	f002 fbb0 	bl	800e37e <HAL_UART_AbortReceive>
	HAL_UART_AbortReceive_IT(&USART_CLI);
 800bc1e:	4874      	ldr	r0, [pc, #464]	; (800bdf0 <xModem_rcv+0x230>)
 800bc20:	f002 fc9e 	bl	800e560 <HAL_UART_AbortReceive_IT>
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 800bc24:	4b72      	ldr	r3, [pc, #456]	; (800bdf0 <xModem_rcv+0x230>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]

	packetNumber = 0;
 800bc2a:	4b72      	ldr	r3, [pc, #456]	; (800bdf4 <xModem_rcv+0x234>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	701a      	strb	r2, [r3, #0]
	started = false;
 800bc30:	4b71      	ldr	r3, [pc, #452]	; (800bdf8 <xModem_rcv+0x238>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	701a      	strb	r2, [r3, #0]

	while(state != XMODEM_STATE_COMPLETED && state != XMODEM_STATE_FAILED) {
 800bc36:	e0aa      	b.n	800bd8e <xModem_rcv+0x1ce>
		if (state == XMODEM_STATE_WAIT_TO_START) {
 800bc38:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d112      	bne.n	800bc66 <xModem_rcv+0xa6>
			sendResponse(XMODEM_CMD_C);
 800bc40:	2043      	movs	r0, #67	; 0x43
 800bc42:	f7ff ff11 	bl	800ba68 <sendResponse>
			waitToStart++;
 800bc46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			if (waitToStart > XMODEM_START_TIMEOUT) {
 800bc50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc54:	2b1e      	cmp	r3, #30
 800bc56:	dd0b      	ble.n	800bc70 <xModem_rcv+0xb0>
				sendResponse(XMODEM_CMD_CAN);
 800bc58:	2018      	movs	r0, #24
 800bc5a:	f7ff ff05 	bl	800ba68 <sendResponse>
				state = XMODEM_STATE_FAILED;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 800bc64:	e004      	b.n	800bc70 <xModem_rcv+0xb0>
			}
		} else {
			if (XMODEM_STATE_IN_PROGRESS) {
				sendResponse(response);
 800bc66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff fefc 	bl	800ba68 <sendResponse>
			}
		}
		HAL_StatusTypeDef stat = HAL_UART_Receive(&USART_CLI, packet, 1, 1000);
 800bc70:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800bc74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc78:	2201      	movs	r2, #1
 800bc7a:	485d      	ldr	r0, [pc, #372]	; (800bdf0 <xModem_rcv+0x230>)
 800bc7c:	f002 fa02 	bl	800e084 <HAL_UART_Receive>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		receivedBytes = stat == HAL_OK ? 1 : 5;
 800bc86:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <xModem_rcv+0xd2>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <xModem_rcv+0xd4>
 800bc92:	2305      	movs	r3, #5
 800bc94:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 800bc98:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d155      	bne.n	800bd4c <xModem_rcv+0x18c>
 800bca0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d151      	bne.n	800bd4c <xModem_rcv+0x18c>
			state = XMODEM_STATE_IN_PROGRESS;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			HAL_StatusTypeDef stat = HAL_UART_Receive(&USART_CLI, packet + 1, XMODEM_DATA_SIZE + 4, 1000);
 800bcae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800bcb2:	3101      	adds	r1, #1
 800bcb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcb8:	2284      	movs	r2, #132	; 0x84
 800bcba:	484d      	ldr	r0, [pc, #308]	; (800bdf0 <xModem_rcv+0x230>)
 800bcbc:	f002 f9e2 	bl	800e084 <HAL_UART_Receive>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
			receivedBytes = stat == HAL_OK ? (XMODEM_DATA_SIZE + 4) : 5;
 800bcc6:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <xModem_rcv+0x112>
 800bcce:	2384      	movs	r3, #132	; 0x84
 800bcd0:	e000      	b.n	800bcd4 <xModem_rcv+0x114>
 800bcd2:	2305      	movs	r3, #5
 800bcd4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			if (receivedBytes == (XMODEM_DATA_SIZE + 4)) {
 800bcd8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800bcdc:	2b84      	cmp	r3, #132	; 0x84
 800bcde:	d12e      	bne.n	800bd3e <xModem_rcv+0x17e>
				xmodemParsePacket((XmodemPacket_t *)packet, &response);
 800bce0:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800bce4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bce8:	4611      	mov	r1, r2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fee0 	bl	800bab0 <xmodemParsePacket>
				if(response == XMODEM_CMD_ACK) {
 800bcf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcf4:	2b06      	cmp	r3, #6
 800bcf6:	d11b      	bne.n	800bd30 <xModem_rcv+0x170>
					int err = lfs_file_write(&lfs, &lfs_file, ((XmodemPacket_t *)packet)->data, XMODEM_DATA_SIZE);
 800bcf8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bcfc:	1cda      	adds	r2, r3, #3
 800bcfe:	f107 0108 	add.w	r1, r7, #8
 800bd02:	2380      	movs	r3, #128	; 0x80
 800bd04:	4839      	ldr	r0, [pc, #228]	; (800bdec <xModem_rcv+0x22c>)
 800bd06:	f7ff fc37 	bl	800b578 <lfs_file_write>
 800bd0a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
					if (err >= 0) {
 800bd0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	db05      	blt.n	800bd22 <xModem_rcv+0x162>
						address += XMODEM_DATA_SIZE;
 800bd16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd1a:	3380      	adds	r3, #128	; 0x80
 800bd1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 800bd20:	e023      	b.n	800bd6a <xModem_rcv+0x1aa>
					} else {
						sendResponse(XMODEM_CMD_CAN);
 800bd22:	2018      	movs	r0, #24
 800bd24:	f7ff fea0 	bl	800ba68 <sendResponse>
						state = XMODEM_STATE_FAILED;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 800bd2e:	e01c      	b.n	800bd6a <xModem_rcv+0x1aa>
					}
				} else {
					sendResponse(XMODEM_CMD_CAN);
 800bd30:	2018      	movs	r0, #24
 800bd32:	f7ff fe99 	bl	800ba68 <sendResponse>
					state = XMODEM_STATE_FAILED;
 800bd36:	2303      	movs	r3, #3
 800bd38:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 800bd3c:	e015      	b.n	800bd6a <xModem_rcv+0x1aa>
				}
			} else {
				// if neither ACK nor CAN, the only possibility is NAK - which is not
				// handled currently, since hard to test whether it work
				sendResponse(XMODEM_CMD_CAN);
 800bd3e:	2018      	movs	r0, #24
 800bd40:	f7ff fe92 	bl	800ba68 <sendResponse>
				state = XMODEM_STATE_FAILED;
 800bd44:	2303      	movs	r3, #3
 800bd46:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (receivedBytes == 1 && packet[0] == XMODEM_CMD_SOH) {
 800bd4a:	e00e      	b.n	800bd6a <xModem_rcv+0x1aa>
			}
		} else {
			if (receivedBytes == 1 && ((XmodemPacket_t *)packet)->header == XMODEM_CMD_EOT) {
 800bd4c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d10a      	bne.n	800bd6a <xModem_rcv+0x1aa>
 800bd54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d105      	bne.n	800bd6a <xModem_rcv+0x1aa>
				sendResponse(XMODEM_CMD_ACK);
 800bd5e:	2006      	movs	r0, #6
 800bd60:	f7ff fe82 	bl	800ba68 <sendResponse>
				state = XMODEM_STATE_COMPLETED;
 800bd64:	2302      	movs	r3, #2
 800bd66:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			}
		}
		if (state == XMODEM_STATE_IN_PROGRESS && !(receivedBytes == 1 || receivedBytes == 132)) {
 800bd6a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d10d      	bne.n	800bd8e <xModem_rcv+0x1ce>
 800bd72:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d009      	beq.n	800bd8e <xModem_rcv+0x1ce>
 800bd7a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800bd7e:	2b84      	cmp	r3, #132	; 0x84
 800bd80:	d005      	beq.n	800bd8e <xModem_rcv+0x1ce>
			sendResponse(XMODEM_CMD_CAN);
 800bd82:	2018      	movs	r0, #24
 800bd84:	f7ff fe70 	bl	800ba68 <sendResponse>
			state = XMODEM_STATE_FAILED;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	while(state != XMODEM_STATE_COMPLETED && state != XMODEM_STATE_FAILED) {
 800bd8e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d004      	beq.n	800bda0 <xModem_rcv+0x1e0>
 800bd96:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	f47f af4c 	bne.w	800bc38 <xModem_rcv+0x78>
		}
	}

	int err = lfs_file_close(&lfs, &lfs_file);
 800bda0:	f107 0308 	add.w	r3, r7, #8
 800bda4:	4619      	mov	r1, r3
 800bda6:	4811      	ldr	r0, [pc, #68]	; (800bdec <xModem_rcv+0x22c>)
 800bda8:	f7ff fb8a 	bl	800b4c0 <lfs_file_close>
 800bdac:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	if(err < 0)
 800bdb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	da07      	bge.n	800bdc8 <xModem_rcv+0x208>
		PRINTLN("LFS close return error ! %d", err);
 800bdb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bdbc:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800bdc0:	490e      	ldr	r1, [pc, #56]	; (800bdfc <xModem_rcv+0x23c>)
 800bdc2:	480f      	ldr	r0, [pc, #60]	; (800be00 <xModem_rcv+0x240>)
 800bdc4:	f003 fec2 	bl	800fb4c <iprintf>

	if(state == XMODEM_STATE_FAILED){
 800bdc8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d104      	bne.n	800bdda <xModem_rcv+0x21a>
		lfs_remove(&lfs, path);
 800bdd0:	1d3b      	adds	r3, r7, #4
 800bdd2:	6819      	ldr	r1, [r3, #0]
 800bdd4:	4805      	ldr	r0, [pc, #20]	; (800bdec <xModem_rcv+0x22c>)
 800bdd6:	f7ff fb29 	bl	800b42c <lfs_remove>
	}


	cli_init();
 800bdda:	f7f5 ffdf 	bl	8001d9c <cli_init>
 800bdde:	e000      	b.n	800bde2 <xModem_rcv+0x222>
		return;
 800bde0:	bf00      	nop
}
 800bde2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20015618 	.word	0x20015618
 800bdf0:	200156d0 	.word	0x200156d0
 800bdf4:	20014dc8 	.word	0x20014dc8
 800bdf8:	20014dc9 	.word	0x20014dc9
 800bdfc:	08011bfc 	.word	0x08011bfc
 800be00:	08011c08 	.word	0x08011c08

0800be04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b08c      	sub	sp, #48	; 0x30
 800be08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be0a:	f107 031c 	add.w	r3, r7, #28
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	605a      	str	r2, [r3, #4]
 800be14:	609a      	str	r2, [r3, #8]
 800be16:	60da      	str	r2, [r3, #12]
 800be18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800be1a:	2300      	movs	r3, #0
 800be1c:	61bb      	str	r3, [r7, #24]
 800be1e:	4b66      	ldr	r3, [pc, #408]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be22:	4a65      	ldr	r2, [pc, #404]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be24:	f043 0310 	orr.w	r3, r3, #16
 800be28:	6313      	str	r3, [r2, #48]	; 0x30
 800be2a:	4b63      	ldr	r3, [pc, #396]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	61bb      	str	r3, [r7, #24]
 800be34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	4b5f      	ldr	r3, [pc, #380]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3e:	4a5e      	ldr	r2, [pc, #376]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be40:	f043 0304 	orr.w	r3, r3, #4
 800be44:	6313      	str	r3, [r2, #48]	; 0x30
 800be46:	4b5c      	ldr	r3, [pc, #368]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4a:	f003 0304 	and.w	r3, r3, #4
 800be4e:	617b      	str	r3, [r7, #20]
 800be50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800be52:	2300      	movs	r3, #0
 800be54:	613b      	str	r3, [r7, #16]
 800be56:	4b58      	ldr	r3, [pc, #352]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5a:	4a57      	ldr	r2, [pc, #348]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be60:	6313      	str	r3, [r2, #48]	; 0x30
 800be62:	4b55      	ldr	r3, [pc, #340]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be6a:	613b      	str	r3, [r7, #16]
 800be6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]
 800be72:	4b51      	ldr	r3, [pc, #324]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	4a50      	ldr	r2, [pc, #320]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be78:	f043 0301 	orr.w	r3, r3, #1
 800be7c:	6313      	str	r3, [r2, #48]	; 0x30
 800be7e:	4b4e      	ldr	r3, [pc, #312]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800be8a:	2300      	movs	r3, #0
 800be8c:	60bb      	str	r3, [r7, #8]
 800be8e:	4b4a      	ldr	r3, [pc, #296]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be92:	4a49      	ldr	r2, [pc, #292]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be94:	f043 0302 	orr.w	r3, r3, #2
 800be98:	6313      	str	r3, [r2, #48]	; 0x30
 800be9a:	4b47      	ldr	r3, [pc, #284]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800be9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	60bb      	str	r3, [r7, #8]
 800bea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bea6:	2300      	movs	r3, #0
 800bea8:	607b      	str	r3, [r7, #4]
 800beaa:	4b43      	ldr	r3, [pc, #268]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800beac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beae:	4a42      	ldr	r2, [pc, #264]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800beb0:	f043 0308 	orr.w	r3, r3, #8
 800beb4:	6313      	str	r3, [r2, #48]	; 0x30
 800beb6:	4b40      	ldr	r3, [pc, #256]	; (800bfb8 <MX_GPIO_Init+0x1b4>)
 800beb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beba:	f003 0308 	and.w	r3, r3, #8
 800bebe:	607b      	str	r3, [r7, #4]
 800bec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800bec2:	2200      	movs	r2, #0
 800bec4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800bec8:	483c      	ldr	r0, [pc, #240]	; (800bfbc <MX_GPIO_Init+0x1b8>)
 800beca:	f001 fa43 	bl	800d354 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800bece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bed2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bed4:	2303      	movs	r3, #3
 800bed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bed8:	2300      	movs	r3, #0
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bedc:	f107 031c 	add.w	r3, r7, #28
 800bee0:	4619      	mov	r1, r3
 800bee2:	4837      	ldr	r0, [pc, #220]	; (800bfc0 <MX_GPIO_Init+0x1bc>)
 800bee4:	f001 f89c 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800bee8:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 800beec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800beee:	2303      	movs	r3, #3
 800bef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bef6:	f107 031c 	add.w	r3, r7, #28
 800befa:	4619      	mov	r1, r3
 800befc:	4831      	ldr	r0, [pc, #196]	; (800bfc4 <MX_GPIO_Init+0x1c0>)
 800befe:	f001 f88f 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bf02:	2303      	movs	r3, #3
 800bf04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf06:	2303      	movs	r3, #3
 800bf08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bf0e:	f107 031c 	add.w	r3, r7, #28
 800bf12:	4619      	mov	r1, r3
 800bf14:	482c      	ldr	r0, [pc, #176]	; (800bfc8 <MX_GPIO_Init+0x1c4>)
 800bf16:	f001 f883 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bf1e:	4b2b      	ldr	r3, [pc, #172]	; (800bfcc <MX_GPIO_Init+0x1c8>)
 800bf20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bf26:	f107 031c 	add.w	r3, r7, #28
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	4828      	ldr	r0, [pc, #160]	; (800bfd0 <MX_GPIO_Init+0x1cc>)
 800bf2e:	f001 f877 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800bf32:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 800bf36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf40:	f107 031c 	add.w	r3, r7, #28
 800bf44:	4619      	mov	r1, r3
 800bf46:	4822      	ldr	r0, [pc, #136]	; (800bfd0 <MX_GPIO_Init+0x1cc>)
 800bf48:	f001 f86a 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800bf4c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800bf50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf52:	2303      	movs	r3, #3
 800bf54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf5a:	f107 031c 	add.w	r3, r7, #28
 800bf5e:	4619      	mov	r1, r3
 800bf60:	481c      	ldr	r0, [pc, #112]	; (800bfd4 <MX_GPIO_Init+0x1d0>)
 800bf62:	f001 f85d 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800bf66:	f640 73ff 	movw	r3, #4095	; 0xfff
 800bf6a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf74:	f107 031c 	add.w	r3, r7, #28
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4810      	ldr	r0, [pc, #64]	; (800bfbc <MX_GPIO_Init+0x1b8>)
 800bf7c:	f001 f850 	bl	800d020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800bf80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800bf84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf86:	2301      	movs	r3, #1
 800bf88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf92:	f107 031c 	add.w	r3, r7, #28
 800bf96:	4619      	mov	r1, r3
 800bf98:	4808      	ldr	r0, [pc, #32]	; (800bfbc <MX_GPIO_Init+0x1b8>)
 800bf9a:	f001 f841 	bl	800d020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	210f      	movs	r1, #15
 800bfa2:	2006      	movs	r0, #6
 800bfa4:	f000 fc91 	bl	800c8ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800bfa8:	2006      	movs	r0, #6
 800bfaa:	f000 fcaa 	bl	800c902 <HAL_NVIC_EnableIRQ>

}
 800bfae:	bf00      	nop
 800bfb0:	3730      	adds	r7, #48	; 0x30
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	40023800 	.word	0x40023800
 800bfbc:	40020c00 	.word	0x40020c00
 800bfc0:	40021000 	.word	0x40021000
 800bfc4:	40020800 	.word	0x40020800
 800bfc8:	40021c00 	.word	0x40021c00
 800bfcc:	10110000 	.word	0x10110000
 800bfd0:	40020000 	.word	0x40020000
 800bfd4:	40020400 	.word	0x40020400

0800bfd8 <main>:
 * @retval int
 */
uint8_t cpy[1024*5];

int main(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800bfde:	f000 fb27 	bl	800c630 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800bfe2:	f000 f837 	bl	800c054 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800bfe6:	f7ff ff0d 	bl	800be04 <MX_GPIO_Init>
	MX_TIM13_Init();
 800bfea:	f000 fa0d 	bl	800c408 <MX_TIM13_Init>
	MX_USART3_UART_Init();
 800bfee:	f000 fa69 	bl	800c4c4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	cli_init();
 800bff2:	f7f5 fed3 	bl	8001d9c <cli_init>
	PRINTLN("Periph Init Finished");
 800bff6:	2262      	movs	r2, #98	; 0x62
 800bff8:	4910      	ldr	r1, [pc, #64]	; (800c03c <main+0x64>)
 800bffa:	4811      	ldr	r0, [pc, #68]	; (800c040 <main+0x68>)
 800bffc:	f003 fda6 	bl	800fb4c <iprintf>
	ASSERT(os_init("main", 10, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 800c000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <main+0x6c>)
 800c008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c00c:	210a      	movs	r1, #10
 800c00e:	480e      	ldr	r0, [pc, #56]	; (800c048 <main+0x70>)
 800c010:	f7f6 fb1e 	bl	8002650 <os_init>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d004      	beq.n	800c024 <main+0x4c>
 800c01a:	2263      	movs	r2, #99	; 0x63
 800c01c:	4907      	ldr	r1, [pc, #28]	; (800c03c <main+0x64>)
 800c01e:	480b      	ldr	r0, [pc, #44]	; (800c04c <main+0x74>)
 800c020:	f003 fd94 	bl	800fb4c <iprintf>
	os_scheduler_start();
 800c024:	f7f7 fc06 	bl	8003834 <os_scheduler_start>

	PRINTLN("Init OS finished");
 800c028:	2266      	movs	r2, #102	; 0x66
 800c02a:	4904      	ldr	r1, [pc, #16]	; (800c03c <main+0x64>)
 800c02c:	4808      	ldr	r0, [pc, #32]	; (800c050 <main+0x78>)
 800c02e:	f003 fd8d 	bl	800fb4c <iprintf>
	os_lfs_init();
 800c032:	f7ff fc27 	bl	800b884 <os_lfs_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1)
	{
		cli_process();
 800c036:	f7f5 fecf 	bl	8001dd8 <cli_process>
 800c03a:	e7fc      	b.n	800c036 <main+0x5e>
 800c03c:	08011c30 	.word	0x08011c30
 800c040:	08011c38 	.word	0x08011c38
 800c044:	08011c5c 	.word	0x08011c5c
 800c048:	08011c64 	.word	0x08011c64
 800c04c:	08011c6c 	.word	0x08011c6c
 800c050:	08011c88 	.word	0x08011c88

0800c054 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b094      	sub	sp, #80	; 0x50
 800c058:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c05a:	f107 0320 	add.w	r3, r7, #32
 800c05e:	2230      	movs	r2, #48	; 0x30
 800c060:	2100      	movs	r1, #0
 800c062:	4618      	mov	r0, r3
 800c064:	f003 f9fa 	bl	800f45c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c068:	f107 030c 	add.w	r3, r7, #12
 800c06c:	2200      	movs	r2, #0
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	605a      	str	r2, [r3, #4]
 800c072:	609a      	str	r2, [r3, #8]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800c078:	2300      	movs	r3, #0
 800c07a:	60bb      	str	r3, [r7, #8]
 800c07c:	4b27      	ldr	r3, [pc, #156]	; (800c11c <SystemClock_Config+0xc8>)
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	4a26      	ldr	r2, [pc, #152]	; (800c11c <SystemClock_Config+0xc8>)
 800c082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c086:	6413      	str	r3, [r2, #64]	; 0x40
 800c088:	4b24      	ldr	r3, [pc, #144]	; (800c11c <SystemClock_Config+0xc8>)
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c090:	60bb      	str	r3, [r7, #8]
 800c092:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c094:	2300      	movs	r3, #0
 800c096:	607b      	str	r3, [r7, #4]
 800c098:	4b21      	ldr	r3, [pc, #132]	; (800c120 <SystemClock_Config+0xcc>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a20      	ldr	r2, [pc, #128]	; (800c120 <SystemClock_Config+0xcc>)
 800c09e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	4b1e      	ldr	r3, [pc, #120]	; (800c120 <SystemClock_Config+0xcc>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c0b8:	2310      	movs	r3, #16
 800c0ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c0bc:	2302      	movs	r3, #2
 800c0be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c0c4:	2308      	movs	r3, #8
 800c0c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800c0c8:	2354      	movs	r3, #84	; 0x54
 800c0ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800c0d0:	2307      	movs	r3, #7
 800c0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c0d4:	f107 0320 	add.w	r3, r7, #32
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 f979 	bl	800d3d0 <HAL_RCC_OscConfig>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800c0e4:	f000 f81e 	bl	800c124 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c0e8:	230f      	movs	r3, #15
 800c0ea:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c0f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800c0fe:	f107 030c 	add.w	r3, r7, #12
 800c102:	2102      	movs	r1, #2
 800c104:	4618      	mov	r0, r3
 800c106:	f001 fbd3 	bl	800d8b0 <HAL_RCC_ClockConfig>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800c110:	f000 f808 	bl	800c124 <Error_Handler>
	}
}
 800c114:	bf00      	nop
 800c116:	3750      	adds	r7, #80	; 0x50
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	40023800 	.word	0x40023800
 800c120:	40007000 	.word	0x40007000

0800c124 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800c128:	bf00      	nop
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
	...

0800c134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	4b21      	ldr	r3, [pc, #132]	; (800c1c4 <HAL_MspInit+0x90>)
 800c140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c142:	4a20      	ldr	r2, [pc, #128]	; (800c1c4 <HAL_MspInit+0x90>)
 800c144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c148:	6453      	str	r3, [r2, #68]	; 0x44
 800c14a:	4b1e      	ldr	r3, [pc, #120]	; (800c1c4 <HAL_MspInit+0x90>)
 800c14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c152:	607b      	str	r3, [r7, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c156:	2300      	movs	r3, #0
 800c158:	603b      	str	r3, [r7, #0]
 800c15a:	4b1a      	ldr	r3, [pc, #104]	; (800c1c4 <HAL_MspInit+0x90>)
 800c15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15e:	4a19      	ldr	r2, [pc, #100]	; (800c1c4 <HAL_MspInit+0x90>)
 800c160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c164:	6413      	str	r3, [r2, #64]	; 0x40
 800c166:	4b17      	ldr	r3, [pc, #92]	; (800c1c4 <HAL_MspInit+0x90>)
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 800c172:	2200      	movs	r2, #0
 800c174:	210f      	movs	r1, #15
 800c176:	f06f 000b 	mvn.w	r0, #11
 800c17a:	f000 fba6 	bl	800c8ca <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 800c17e:	2200      	movs	r2, #0
 800c180:	210f      	movs	r1, #15
 800c182:	f06f 000a 	mvn.w	r0, #10
 800c186:	f000 fba0 	bl	800c8ca <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800c18a:	2200      	movs	r2, #0
 800c18c:	210f      	movs	r1, #15
 800c18e:	f06f 0009 	mvn.w	r0, #9
 800c192:	f000 fb9a 	bl	800c8ca <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800c196:	2200      	movs	r2, #0
 800c198:	210f      	movs	r1, #15
 800c19a:	f06f 0004 	mvn.w	r0, #4
 800c19e:	f000 fb94 	bl	800c8ca <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	210f      	movs	r1, #15
 800c1a6:	f06f 0003 	mvn.w	r0, #3
 800c1aa:	f000 fb8e 	bl	800c8ca <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	210f      	movs	r1, #15
 800c1b2:	f06f 0001 	mvn.w	r0, #1
 800c1b6:	f000 fb88 	bl	800c8ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	40023800 	.word	0x40023800

0800c1c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c1cc:	bf00      	nop
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1da:	e7fe      	b.n	800c1da <HardFault_Handler+0x4>

0800c1dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1e0:	e7fe      	b.n	800c1e0 <MemManage_Handler+0x4>

0800c1e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1e6:	e7fe      	b.n	800c1e6 <BusFault_Handler+0x4>

0800c1e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1ec:	e7fe      	b.n	800c1ec <UsageFault_Handler+0x4>

0800c1ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1f2:	bf00      	nop
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c200:	bf00      	nop
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c20e:	f000 fa61 	bl	800c6d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 800c212:	2001      	movs	r0, #1
 800c214:	f7f8 f924 	bl	8004460 <os_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800c218:	bf00      	nop
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c220:	2001      	movs	r0, #1
 800c222:	f001 f8b1 	bl	800d388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c226:	bf00      	nop
 800c228:	bd80      	pop	{r7, pc}
	...

0800c22c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800c230:	4802      	ldr	r0, [pc, #8]	; (800c23c <USART3_IRQHandler+0x10>)
 800c232:	f002 f9ed 	bl	800e610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800c236:	bf00      	nop
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	200156d0 	.word	0x200156d0

0800c240 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;


int __io_putchar(int ch){
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 800c248:	1d39      	adds	r1, r7, #4
 800c24a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c24e:	2201      	movs	r2, #1
 800c250:	4803      	ldr	r0, [pc, #12]	; (800c260 <__io_putchar+0x20>)
 800c252:	f001 fe7e 	bl	800df52 <HAL_UART_Transmit>
	return 0;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	200156d0 	.word	0x200156d0

0800c264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
	return 1;
 800c268:	2301      	movs	r3, #1
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <_kill>:

int _kill(int pid, int sig)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c27e:	f003 f863 	bl	800f348 <__errno>
 800c282:	4602      	mov	r2, r0
 800c284:	2316      	movs	r3, #22
 800c286:	6013      	str	r3, [r2, #0]
	return -1;
 800c288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <_exit>:

void _exit (int status)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c29c:	f04f 31ff 	mov.w	r1, #4294967295
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff ffe7 	bl	800c274 <_kill>
	while (1) {}		/* Make sure we hang here */
 800c2a6:	e7fe      	b.n	800c2a6 <_exit+0x12>

0800c2a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	e00a      	b.n	800c2d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c2ba:	f3af 8000 	nop.w
 800c2be:	4601      	mov	r1, r0
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	60ba      	str	r2, [r7, #8]
 800c2c6:	b2ca      	uxtb	r2, r1
 800c2c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	dbf0      	blt.n	800c2ba <_read+0x12>
	}

return len;
 800c2d8:	687b      	ldr	r3, [r7, #4]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b086      	sub	sp, #24
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	e009      	b.n	800c308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	60ba      	str	r2, [r7, #8]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff ff9f 	bl	800c240 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	3301      	adds	r3, #1
 800c306:	617b      	str	r3, [r7, #20]
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	dbf1      	blt.n	800c2f4 <_write+0x12>
	}
	return len;
 800c310:	687b      	ldr	r3, [r7, #4]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <_close>:

int _close(int file)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
	return -1;
 800c322:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c342:	605a      	str	r2, [r3, #4]
	return 0;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <_isatty>:

int _isatty(int file)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
	return 1;
 800c35a:	2301      	movs	r3, #1
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
	return 0;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
	...

0800c384 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c38c:	4b11      	ldr	r3, [pc, #68]	; (800c3d4 <_sbrk+0x50>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <_sbrk+0x16>
		heap_end = &end;
 800c394:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <_sbrk+0x50>)
 800c396:	4a10      	ldr	r2, [pc, #64]	; (800c3d8 <_sbrk+0x54>)
 800c398:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c39a:	4b0e      	ldr	r3, [pc, #56]	; (800c3d4 <_sbrk+0x50>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <_sbrk+0x50>)
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	466a      	mov	r2, sp
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d907      	bls.n	800c3be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c3ae:	f002 ffcb 	bl	800f348 <__errno>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	230c      	movs	r3, #12
 800c3b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3bc:	e006      	b.n	800c3cc <_sbrk+0x48>
	}

	heap_end += incr;
 800c3be:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <_sbrk+0x50>)
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	4a03      	ldr	r2, [pc, #12]	; (800c3d4 <_sbrk+0x50>)
 800c3c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20014dcc 	.word	0x20014dcc
 800c3d8:	20015738 	.word	0x20015738

0800c3dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c3e0:	4b08      	ldr	r3, [pc, #32]	; (800c404 <SystemInit+0x28>)
 800c3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e6:	4a07      	ldr	r2, [pc, #28]	; (800c404 <SystemInit+0x28>)
 800c3e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c3f0:	4b04      	ldr	r3, [pc, #16]	; (800c404 <SystemInit+0x28>)
 800c3f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c3f6:	609a      	str	r2, [r3, #8]
#endif
}
 800c3f8:	bf00      	nop
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	e000ed00 	.word	0xe000ed00

0800c408 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 800c40c:	4b12      	ldr	r3, [pc, #72]	; (800c458 <MX_TIM13_Init+0x50>)
 800c40e:	4a13      	ldr	r2, [pc, #76]	; (800c45c <MX_TIM13_Init+0x54>)
 800c410:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800c412:	4b11      	ldr	r3, [pc, #68]	; (800c458 <MX_TIM13_Init+0x50>)
 800c414:	2200      	movs	r2, #0
 800c416:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c418:	4b0f      	ldr	r3, [pc, #60]	; (800c458 <MX_TIM13_Init+0x50>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0xFFFF;
 800c41e:	4b0e      	ldr	r3, [pc, #56]	; (800c458 <MX_TIM13_Init+0x50>)
 800c420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c424:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c426:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <MX_TIM13_Init+0x50>)
 800c428:	2200      	movs	r2, #0
 800c42a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c42c:	4b0a      	ldr	r3, [pc, #40]	; (800c458 <MX_TIM13_Init+0x50>)
 800c42e:	2200      	movs	r2, #0
 800c430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800c432:	4809      	ldr	r0, [pc, #36]	; (800c458 <MX_TIM13_Init+0x50>)
 800c434:	f001 fc2e 	bl	800dc94 <HAL_TIM_Base_Init>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800c43e:	f7ff fe71 	bl	800c124 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 800c442:	2108      	movs	r1, #8
 800c444:	4804      	ldr	r0, [pc, #16]	; (800c458 <MX_TIM13_Init+0x50>)
 800c446:	f001 fc50 	bl	800dcea <HAL_TIM_OnePulse_Init>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 800c450:	f7ff fe68 	bl	800c124 <Error_Handler>
  }

}
 800c454:	bf00      	nop
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20015690 	.word	0x20015690
 800c45c:	40001c00 	.word	0x40001c00

0800c460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a0b      	ldr	r2, [pc, #44]	; (800c49c <HAL_TIM_Base_MspInit+0x3c>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d10d      	bne.n	800c48e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800c472:	2300      	movs	r3, #0
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	4b0a      	ldr	r3, [pc, #40]	; (800c4a0 <HAL_TIM_Base_MspInit+0x40>)
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	4a09      	ldr	r2, [pc, #36]	; (800c4a0 <HAL_TIM_Base_MspInit+0x40>)
 800c47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c480:	6413      	str	r3, [r2, #64]	; 0x40
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <HAL_TIM_Base_MspInit+0x40>)
 800c484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800c48e:	bf00      	nop
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	40001c00 	.word	0x40001c00
 800c4a0:	40023800 	.word	0x40023800

0800c4a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
	if(huart == &USART_CLI){
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a04      	ldr	r2, [pc, #16]	; (800c4c0 <HAL_UART_RxCpltCallback+0x1c>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d101      	bne.n	800c4b8 <HAL_UART_RxCpltCallback+0x14>
		cli_rcv_char_cb_irq();
 800c4b4:	f7f5 fc5c 	bl	8001d70 <cli_rcv_char_cb_irq>
	}
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200156d0 	.word	0x200156d0

0800c4c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800c4c8:	4b11      	ldr	r3, [pc, #68]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4ca:	4a12      	ldr	r2, [pc, #72]	; (800c514 <MX_USART3_UART_Init+0x50>)
 800c4cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800c4ce:	4b10      	ldr	r3, [pc, #64]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c4d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c4d6:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c4dc:	4b0c      	ldr	r3, [pc, #48]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c4e8:	4b09      	ldr	r3, [pc, #36]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4ea:	220c      	movs	r2, #12
 800c4ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c4ee:	4b08      	ldr	r3, [pc, #32]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c4f4:	4b06      	ldr	r3, [pc, #24]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c4fa:	4805      	ldr	r0, [pc, #20]	; (800c510 <MX_USART3_UART_Init+0x4c>)
 800c4fc:	f001 fcdc 	bl	800deb8 <HAL_UART_Init>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800c506:	f7ff fe0d 	bl	800c124 <Error_Handler>
  }

}
 800c50a:	bf00      	nop
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	200156d0 	.word	0x200156d0
 800c514:	40004800 	.word	0x40004800

0800c518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	; 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c520:	f107 0314 	add.w	r3, r7, #20
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	605a      	str	r2, [r3, #4]
 800c52a:	609a      	str	r2, [r3, #8]
 800c52c:	60da      	str	r2, [r3, #12]
 800c52e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a26      	ldr	r2, [pc, #152]	; (800c5d0 <HAL_UART_MspInit+0xb8>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d145      	bne.n	800c5c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800c53a:	2300      	movs	r3, #0
 800c53c:	613b      	str	r3, [r7, #16]
 800c53e:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <HAL_UART_MspInit+0xbc>)
 800c540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c542:	4a24      	ldr	r2, [pc, #144]	; (800c5d4 <HAL_UART_MspInit+0xbc>)
 800c544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c548:	6413      	str	r3, [r2, #64]	; 0x40
 800c54a:	4b22      	ldr	r3, [pc, #136]	; (800c5d4 <HAL_UART_MspInit+0xbc>)
 800c54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c556:	2300      	movs	r3, #0
 800c558:	60fb      	str	r3, [r7, #12]
 800c55a:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <HAL_UART_MspInit+0xbc>)
 800c55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55e:	4a1d      	ldr	r2, [pc, #116]	; (800c5d4 <HAL_UART_MspInit+0xbc>)
 800c560:	f043 0304 	orr.w	r3, r3, #4
 800c564:	6313      	str	r3, [r2, #48]	; 0x30
 800c566:	4b1b      	ldr	r3, [pc, #108]	; (800c5d4 <HAL_UART_MspInit+0xbc>)
 800c568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56a:	f003 0304 	and.w	r3, r3, #4
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c578:	2302      	movs	r3, #2
 800c57a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c57c:	2300      	movs	r3, #0
 800c57e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c580:	2303      	movs	r3, #3
 800c582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c584:	2307      	movs	r3, #7
 800c586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c588:	f107 0314 	add.w	r3, r7, #20
 800c58c:	4619      	mov	r1, r3
 800c58e:	4812      	ldr	r0, [pc, #72]	; (800c5d8 <HAL_UART_MspInit+0xc0>)
 800c590:	f000 fd46 	bl	800d020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c59a:	2302      	movs	r3, #2
 800c59c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c5a6:	2307      	movs	r3, #7
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5aa:	f107 0314 	add.w	r3, r7, #20
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	4809      	ldr	r0, [pc, #36]	; (800c5d8 <HAL_UART_MspInit+0xc0>)
 800c5b2:	f000 fd35 	bl	800d020 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	210f      	movs	r1, #15
 800c5ba:	2027      	movs	r0, #39	; 0x27
 800c5bc:	f000 f985 	bl	800c8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800c5c0:	2027      	movs	r0, #39	; 0x27
 800c5c2:	f000 f99e 	bl	800c902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800c5c6:	bf00      	nop
 800c5c8:	3728      	adds	r7, #40	; 0x28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	40004800 	.word	0x40004800
 800c5d4:	40023800 	.word	0x40023800
 800c5d8:	40020800 	.word	0x40020800

0800c5dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c5dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c614 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c5e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c5e2:	e003      	b.n	800c5ec <LoopCopyDataInit>

0800c5e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c5e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c5e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c5ea:	3104      	adds	r1, #4

0800c5ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c5ec:	480b      	ldr	r0, [pc, #44]	; (800c61c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c5f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c5f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c5f4:	d3f6      	bcc.n	800c5e4 <CopyDataInit>
  ldr  r2, =_sbss
 800c5f6:	4a0b      	ldr	r2, [pc, #44]	; (800c624 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c5f8:	e002      	b.n	800c600 <LoopFillZerobss>

0800c5fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c5fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c5fc:	f842 3b04 	str.w	r3, [r2], #4

0800c600 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c600:	4b09      	ldr	r3, [pc, #36]	; (800c628 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c602:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c604:	d3f9      	bcc.n	800c5fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c606:	f7ff fee9 	bl	800c3dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c60a:	f002 feb5 	bl	800f378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c60e:	f7ff fce3 	bl	800bfd8 <main>
  bx  lr    
 800c612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c614:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c618:	08012068 	.word	0x08012068
  ldr  r0, =_sdata
 800c61c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c620:	2000049c 	.word	0x2000049c
  ldr  r2, =_sbss
 800c624:	200004a0 	.word	0x200004a0
  ldr  r3, = _ebss
 800c628:	20015738 	.word	0x20015738

0800c62c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c62c:	e7fe      	b.n	800c62c <ADC_IRQHandler>
	...

0800c630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c634:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <HAL_Init+0x40>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a0d      	ldr	r2, [pc, #52]	; (800c670 <HAL_Init+0x40>)
 800c63a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c63e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c640:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <HAL_Init+0x40>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a0a      	ldr	r2, [pc, #40]	; (800c670 <HAL_Init+0x40>)
 800c646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c64a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c64c:	4b08      	ldr	r3, [pc, #32]	; (800c670 <HAL_Init+0x40>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a07      	ldr	r2, [pc, #28]	; (800c670 <HAL_Init+0x40>)
 800c652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c658:	2003      	movs	r0, #3
 800c65a:	f000 f92b 	bl	800c8b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c65e:	200f      	movs	r0, #15
 800c660:	f000 f808 	bl	800c674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c664:	f7ff fd66 	bl	800c134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	40023c00 	.word	0x40023c00

0800c674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c67c:	4b12      	ldr	r3, [pc, #72]	; (800c6c8 <HAL_InitTick+0x54>)
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	4b12      	ldr	r3, [pc, #72]	; (800c6cc <HAL_InitTick+0x58>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	4619      	mov	r1, r3
 800c686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c68a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c692:	4618      	mov	r0, r3
 800c694:	f000 f943 	bl	800c91e <HAL_SYSTICK_Config>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e00e      	b.n	800c6c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b0f      	cmp	r3, #15
 800c6a6:	d80a      	bhi.n	800c6be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	f000 f90b 	bl	800c8ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c6b4:	4a06      	ldr	r2, [pc, #24]	; (800c6d0 <HAL_InitTick+0x5c>)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e000      	b.n	800c6c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	200002c0 	.word	0x200002c0
 800c6cc:	200002c8 	.word	0x200002c8
 800c6d0:	200002c4 	.word	0x200002c4

0800c6d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <HAL_IncTick+0x20>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <HAL_IncTick+0x24>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	4a04      	ldr	r2, [pc, #16]	; (800c6f8 <HAL_IncTick+0x24>)
 800c6e6:	6013      	str	r3, [r2, #0]
}
 800c6e8:	bf00      	nop
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	200002c8 	.word	0x200002c8
 800c6f8:	20015710 	.word	0x20015710

0800c6fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
  return uwTick;
 800c700:	4b03      	ldr	r3, [pc, #12]	; (800c710 <HAL_GetTick+0x14>)
 800c702:	681b      	ldr	r3, [r3, #0]
}
 800c704:	4618      	mov	r0, r3
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	20015710 	.word	0x20015710

0800c714 <__NVIC_SetPriorityGrouping>:
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f003 0307 	and.w	r3, r3, #7
 800c722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c724:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <__NVIC_SetPriorityGrouping+0x44>)
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c730:	4013      	ands	r3, r2
 800c732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c73c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c746:	4a04      	ldr	r2, [pc, #16]	; (800c758 <__NVIC_SetPriorityGrouping+0x44>)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	60d3      	str	r3, [r2, #12]
}
 800c74c:	bf00      	nop
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	e000ed00 	.word	0xe000ed00

0800c75c <__NVIC_GetPriorityGrouping>:
{
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c760:	4b04      	ldr	r3, [pc, #16]	; (800c774 <__NVIC_GetPriorityGrouping+0x18>)
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	0a1b      	lsrs	r3, r3, #8
 800c766:	f003 0307 	and.w	r3, r3, #7
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	e000ed00 	.word	0xe000ed00

0800c778 <__NVIC_EnableIRQ>:
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	db0b      	blt.n	800c7a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c78a:	79fb      	ldrb	r3, [r7, #7]
 800c78c:	f003 021f 	and.w	r2, r3, #31
 800c790:	4907      	ldr	r1, [pc, #28]	; (800c7b0 <__NVIC_EnableIRQ+0x38>)
 800c792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c796:	095b      	lsrs	r3, r3, #5
 800c798:	2001      	movs	r0, #1
 800c79a:	fa00 f202 	lsl.w	r2, r0, r2
 800c79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c7a2:	bf00      	nop
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	e000e100 	.word	0xe000e100

0800c7b4 <__NVIC_SetPriority>:
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	6039      	str	r1, [r7, #0]
 800c7be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	db0a      	blt.n	800c7de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	490c      	ldr	r1, [pc, #48]	; (800c800 <__NVIC_SetPriority+0x4c>)
 800c7ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7d2:	0112      	lsls	r2, r2, #4
 800c7d4:	b2d2      	uxtb	r2, r2
 800c7d6:	440b      	add	r3, r1
 800c7d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c7dc:	e00a      	b.n	800c7f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	4908      	ldr	r1, [pc, #32]	; (800c804 <__NVIC_SetPriority+0x50>)
 800c7e4:	79fb      	ldrb	r3, [r7, #7]
 800c7e6:	f003 030f 	and.w	r3, r3, #15
 800c7ea:	3b04      	subs	r3, #4
 800c7ec:	0112      	lsls	r2, r2, #4
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	440b      	add	r3, r1
 800c7f2:	761a      	strb	r2, [r3, #24]
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	e000e100 	.word	0xe000e100
 800c804:	e000ed00 	.word	0xe000ed00

0800c808 <NVIC_EncodePriority>:
{
 800c808:	b480      	push	{r7}
 800c80a:	b089      	sub	sp, #36	; 0x24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f003 0307 	and.w	r3, r3, #7
 800c81a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	f1c3 0307 	rsb	r3, r3, #7
 800c822:	2b04      	cmp	r3, #4
 800c824:	bf28      	it	cs
 800c826:	2304      	movcs	r3, #4
 800c828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	3304      	adds	r3, #4
 800c82e:	2b06      	cmp	r3, #6
 800c830:	d902      	bls.n	800c838 <NVIC_EncodePriority+0x30>
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	3b03      	subs	r3, #3
 800c836:	e000      	b.n	800c83a <NVIC_EncodePriority+0x32>
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c83c:	f04f 32ff 	mov.w	r2, #4294967295
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	fa02 f303 	lsl.w	r3, r2, r3
 800c846:	43da      	mvns	r2, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	401a      	ands	r2, r3
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c850:	f04f 31ff 	mov.w	r1, #4294967295
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	fa01 f303 	lsl.w	r3, r1, r3
 800c85a:	43d9      	mvns	r1, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c860:	4313      	orrs	r3, r2
}
 800c862:	4618      	mov	r0, r3
 800c864:	3724      	adds	r7, #36	; 0x24
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
	...

0800c870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c880:	d301      	bcc.n	800c886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c882:	2301      	movs	r3, #1
 800c884:	e00f      	b.n	800c8a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c886:	4a0a      	ldr	r2, [pc, #40]	; (800c8b0 <SysTick_Config+0x40>)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c88e:	210f      	movs	r1, #15
 800c890:	f04f 30ff 	mov.w	r0, #4294967295
 800c894:	f7ff ff8e 	bl	800c7b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c898:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <SysTick_Config+0x40>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c89e:	4b04      	ldr	r3, [pc, #16]	; (800c8b0 <SysTick_Config+0x40>)
 800c8a0:	2207      	movs	r2, #7
 800c8a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	e000e010 	.word	0xe000e010

0800c8b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff ff29 	bl	800c714 <__NVIC_SetPriorityGrouping>
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	607a      	str	r2, [r7, #4]
 800c8d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c8dc:	f7ff ff3e 	bl	800c75c <__NVIC_GetPriorityGrouping>
 800c8e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	68b9      	ldr	r1, [r7, #8]
 800c8e6:	6978      	ldr	r0, [r7, #20]
 800c8e8:	f7ff ff8e 	bl	800c808 <NVIC_EncodePriority>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff ff5d 	bl	800c7b4 <__NVIC_SetPriority>
}
 800c8fa:	bf00      	nop
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	4603      	mov	r3, r0
 800c90a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c90c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c910:	4618      	mov	r0, r3
 800c912:	f7ff ff31 	bl	800c778 <__NVIC_EnableIRQ>
}
 800c916:	bf00      	nop
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b082      	sub	sp, #8
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff ffa2 	bl	800c870 <SysTick_Config>
 800c92c:	4603      	mov	r3, r0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c942:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c944:	f7ff feda 	bl	800c6fc <HAL_GetTick>
 800c948:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b02      	cmp	r3, #2
 800c954:	d008      	beq.n	800c968 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2280      	movs	r2, #128	; 0x80
 800c95a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	e052      	b.n	800ca0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f022 0216 	bic.w	r2, r2, #22
 800c976:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	695a      	ldr	r2, [r3, #20]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c986:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d103      	bne.n	800c998 <HAL_DMA_Abort+0x62>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c994:	2b00      	cmp	r3, #0
 800c996:	d007      	beq.n	800c9a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f022 0208 	bic.w	r2, r2, #8
 800c9a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f022 0201 	bic.w	r2, r2, #1
 800c9b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c9b8:	e013      	b.n	800c9e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c9ba:	f7ff fe9f 	bl	800c6fc <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	2b05      	cmp	r3, #5
 800c9c6:	d90c      	bls.n	800c9e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2203      	movs	r2, #3
 800c9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e015      	b.n	800ca0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e4      	bne.n	800c9ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9f4:	223f      	movs	r2, #63	; 0x3f
 800c9f6:	409a      	lsls	r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d004      	beq.n	800ca34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2280      	movs	r2, #128	; 0x80
 800ca2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e00c      	b.n	800ca4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2205      	movs	r2, #5
 800ca38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 0201 	bic.w	r2, r2, #1
 800ca4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b083      	sub	sp, #12
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
	...

0800ca74 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ca86:	4b23      	ldr	r3, [pc, #140]	; (800cb14 <HAL_FLASH_Program+0xa0>)
 800ca88:	7e1b      	ldrb	r3, [r3, #24]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d101      	bne.n	800ca92 <HAL_FLASH_Program+0x1e>
 800ca8e:	2302      	movs	r3, #2
 800ca90:	e03b      	b.n	800cb0a <HAL_FLASH_Program+0x96>
 800ca92:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <HAL_FLASH_Program+0xa0>)
 800ca94:	2201      	movs	r2, #1
 800ca96:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ca98:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ca9c:	f000 f870 	bl	800cb80 <FLASH_WaitForLastOperation>
 800caa0:	4603      	mov	r3, r0
 800caa2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800caa4:	7dfb      	ldrb	r3, [r7, #23]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d12b      	bne.n	800cb02 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d105      	bne.n	800cabc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800cab0:	783b      	ldrb	r3, [r7, #0]
 800cab2:	4619      	mov	r1, r3
 800cab4:	68b8      	ldr	r0, [r7, #8]
 800cab6:	f000 f919 	bl	800ccec <FLASH_Program_Byte>
 800caba:	e016      	b.n	800caea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d105      	bne.n	800cace <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800cac2:	883b      	ldrh	r3, [r7, #0]
 800cac4:	4619      	mov	r1, r3
 800cac6:	68b8      	ldr	r0, [r7, #8]
 800cac8:	f000 f8ec 	bl	800cca4 <FLASH_Program_HalfWord>
 800cacc:	e00d      	b.n	800caea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d105      	bne.n	800cae0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	68b8      	ldr	r0, [r7, #8]
 800cada:	f000 f8c1 	bl	800cc60 <FLASH_Program_Word>
 800cade:	e004      	b.n	800caea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800cae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae4:	68b8      	ldr	r0, [r7, #8]
 800cae6:	f000 f88b 	bl	800cc00 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800caea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800caee:	f000 f847 	bl	800cb80 <FLASH_WaitForLastOperation>
 800caf2:	4603      	mov	r3, r0
 800caf4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800caf6:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <HAL_FLASH_Program+0xa4>)
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	4a07      	ldr	r2, [pc, #28]	; (800cb18 <HAL_FLASH_Program+0xa4>)
 800cafc:	f023 0301 	bic.w	r3, r3, #1
 800cb00:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <HAL_FLASH_Program+0xa0>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	761a      	strb	r2, [r3, #24]
  
  return status;
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20015714 	.word	0x20015714
 800cb18:	40023c00 	.word	0x40023c00

0800cb1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cb26:	4b0b      	ldr	r3, [pc, #44]	; (800cb54 <HAL_FLASH_Unlock+0x38>)
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	da0b      	bge.n	800cb46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cb2e:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <HAL_FLASH_Unlock+0x38>)
 800cb30:	4a09      	ldr	r2, [pc, #36]	; (800cb58 <HAL_FLASH_Unlock+0x3c>)
 800cb32:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cb34:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <HAL_FLASH_Unlock+0x38>)
 800cb36:	4a09      	ldr	r2, [pc, #36]	; (800cb5c <HAL_FLASH_Unlock+0x40>)
 800cb38:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cb3a:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <HAL_FLASH_Unlock+0x38>)
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	da01      	bge.n	800cb46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cb46:	79fb      	ldrb	r3, [r7, #7]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	40023c00 	.word	0x40023c00
 800cb58:	45670123 	.word	0x45670123
 800cb5c:	cdef89ab 	.word	0xcdef89ab

0800cb60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cb60:	b480      	push	{r7}
 800cb62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800cb64:	4b05      	ldr	r3, [pc, #20]	; (800cb7c <HAL_FLASH_Lock+0x1c>)
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	4a04      	ldr	r2, [pc, #16]	; (800cb7c <HAL_FLASH_Lock+0x1c>)
 800cb6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb6e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	40023c00 	.word	0x40023c00

0800cb80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cb8c:	4b1a      	ldr	r3, [pc, #104]	; (800cbf8 <FLASH_WaitForLastOperation+0x78>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800cb92:	f7ff fdb3 	bl	800c6fc <HAL_GetTick>
 800cb96:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cb98:	e010      	b.n	800cbbc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba0:	d00c      	beq.n	800cbbc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d007      	beq.n	800cbb8 <FLASH_WaitForLastOperation+0x38>
 800cba8:	f7ff fda8 	bl	800c6fc <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d201      	bcs.n	800cbbc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e019      	b.n	800cbf0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <FLASH_WaitForLastOperation+0x7c>)
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e8      	bne.n	800cb9a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800cbc8:	4b0c      	ldr	r3, [pc, #48]	; (800cbfc <FLASH_WaitForLastOperation+0x7c>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cbd4:	4b09      	ldr	r3, [pc, #36]	; (800cbfc <FLASH_WaitForLastOperation+0x7c>)
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800cbda:	4b08      	ldr	r3, [pc, #32]	; (800cbfc <FLASH_WaitForLastOperation+0x7c>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800cbe6:	f000 f8a3 	bl	800cd30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e000      	b.n	800cbf0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
  
}  
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20015714 	.word	0x20015714
 800cbfc:	40023c00 	.word	0x40023c00

0800cc00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800cc00:	b490      	push	{r4, r7}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cc0c:	4b13      	ldr	r3, [pc, #76]	; (800cc5c <FLASH_Program_DoubleWord+0x5c>)
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	4a12      	ldr	r2, [pc, #72]	; (800cc5c <FLASH_Program_DoubleWord+0x5c>)
 800cc12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800cc18:	4b10      	ldr	r3, [pc, #64]	; (800cc5c <FLASH_Program_DoubleWord+0x5c>)
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	4a0f      	ldr	r2, [pc, #60]	; (800cc5c <FLASH_Program_DoubleWord+0x5c>)
 800cc1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cc22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cc24:	4b0d      	ldr	r3, [pc, #52]	; (800cc5c <FLASH_Program_DoubleWord+0x5c>)
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	4a0c      	ldr	r2, [pc, #48]	; (800cc5c <FLASH_Program_DoubleWord+0x5c>)
 800cc2a:	f043 0301 	orr.w	r3, r3, #1
 800cc2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800cc36:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800cc3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc3e:	f04f 0300 	mov.w	r3, #0
 800cc42:	f04f 0400 	mov.w	r4, #0
 800cc46:	0013      	movs	r3, r2
 800cc48:	2400      	movs	r4, #0
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	3204      	adds	r2, #4
 800cc4e:	6013      	str	r3, [r2, #0]
}
 800cc50:	bf00      	nop
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bc90      	pop	{r4, r7}
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	40023c00 	.word	0x40023c00

0800cc60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <FLASH_Program_Word+0x40>)
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	4a0c      	ldr	r2, [pc, #48]	; (800cca0 <FLASH_Program_Word+0x40>)
 800cc70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800cc76:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <FLASH_Program_Word+0x40>)
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	4a09      	ldr	r2, [pc, #36]	; (800cca0 <FLASH_Program_Word+0x40>)
 800cc7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cc82:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <FLASH_Program_Word+0x40>)
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	4a06      	ldr	r2, [pc, #24]	; (800cca0 <FLASH_Program_Word+0x40>)
 800cc88:	f043 0301 	orr.w	r3, r3, #1
 800cc8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	601a      	str	r2, [r3, #0]
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	40023c00 	.word	0x40023c00

0800cca4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	; (800cce8 <FLASH_Program_HalfWord+0x44>)
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	4a0c      	ldr	r2, [pc, #48]	; (800cce8 <FLASH_Program_HalfWord+0x44>)
 800ccb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <FLASH_Program_HalfWord+0x44>)
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	4a09      	ldr	r2, [pc, #36]	; (800cce8 <FLASH_Program_HalfWord+0x44>)
 800ccc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ccc8:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <FLASH_Program_HalfWord+0x44>)
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	4a06      	ldr	r2, [pc, #24]	; (800cce8 <FLASH_Program_HalfWord+0x44>)
 800ccce:	f043 0301 	orr.w	r3, r3, #1
 800ccd2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	887a      	ldrh	r2, [r7, #2]
 800ccd8:	801a      	strh	r2, [r3, #0]
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	40023c00 	.word	0x40023c00

0800ccec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ccf8:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <FLASH_Program_Byte+0x40>)
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	4a0b      	ldr	r2, [pc, #44]	; (800cd2c <FLASH_Program_Byte+0x40>)
 800ccfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800cd04:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <FLASH_Program_Byte+0x40>)
 800cd06:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <FLASH_Program_Byte+0x40>)
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cd0c:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <FLASH_Program_Byte+0x40>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4a06      	ldr	r2, [pc, #24]	; (800cd2c <FLASH_Program_Byte+0x40>)
 800cd12:	f043 0301 	orr.w	r3, r3, #1
 800cd16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	78fa      	ldrb	r2, [r7, #3]
 800cd1c:	701a      	strb	r2, [r3, #0]
}
 800cd1e:	bf00      	nop
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	40023c00 	.word	0x40023c00

0800cd30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800cd34:	4b27      	ldr	r3, [pc, #156]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f003 0310 	and.w	r3, r3, #16
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d008      	beq.n	800cd52 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cd40:	4b25      	ldr	r3, [pc, #148]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd42:	69db      	ldr	r3, [r3, #28]
 800cd44:	f043 0310 	orr.w	r3, r3, #16
 800cd48:	4a23      	ldr	r2, [pc, #140]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd4a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800cd4c:	4b21      	ldr	r3, [pc, #132]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd4e:	2210      	movs	r2, #16
 800cd50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800cd52:	4b20      	ldr	r3, [pc, #128]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d008      	beq.n	800cd70 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cd5e:	4b1e      	ldr	r3, [pc, #120]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	f043 0308 	orr.w	r3, r3, #8
 800cd66:	4a1c      	ldr	r2, [pc, #112]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd68:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800cd6a:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800cd70:	4b18      	ldr	r3, [pc, #96]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d008      	beq.n	800cd8e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800cd7c:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd7e:	69db      	ldr	r3, [r3, #28]
 800cd80:	f043 0304 	orr.w	r3, r3, #4
 800cd84:	4a14      	ldr	r2, [pc, #80]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800cd88:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd8a:	2240      	movs	r2, #64	; 0x40
 800cd8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800cd8e:	4b11      	ldr	r3, [pc, #68]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d008      	beq.n	800cdac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800cd9a:	4b0f      	ldr	r3, [pc, #60]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	f043 0302 	orr.w	r3, r3, #2
 800cda2:	4a0d      	ldr	r2, [pc, #52]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cda4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cda8:	2280      	movs	r2, #128	; 0x80
 800cdaa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f003 0302 	and.w	r3, r3, #2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d008      	beq.n	800cdca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800cdb8:	4b07      	ldr	r3, [pc, #28]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cdba:	69db      	ldr	r3, [r3, #28]
 800cdbc:	f043 0320 	orr.w	r3, r3, #32
 800cdc0:	4a05      	ldr	r2, [pc, #20]	; (800cdd8 <FLASH_SetErrorCode+0xa8>)
 800cdc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800cdc4:	4b03      	ldr	r3, [pc, #12]	; (800cdd4 <FLASH_SetErrorCode+0xa4>)
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	60da      	str	r2, [r3, #12]
  }
}
 800cdca:	bf00      	nop
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	40023c00 	.word	0x40023c00
 800cdd8:	20015714 	.word	0x20015714

0800cddc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cdee:	4b31      	ldr	r3, [pc, #196]	; (800ceb4 <HAL_FLASHEx_Erase+0xd8>)
 800cdf0:	7e1b      	ldrb	r3, [r3, #24]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d101      	bne.n	800cdfa <HAL_FLASHEx_Erase+0x1e>
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	e058      	b.n	800ceac <HAL_FLASHEx_Erase+0xd0>
 800cdfa:	4b2e      	ldr	r3, [pc, #184]	; (800ceb4 <HAL_FLASHEx_Erase+0xd8>)
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce00:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce04:	f7ff febc 	bl	800cb80 <FLASH_WaitForLastOperation>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d148      	bne.n	800cea4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	f04f 32ff 	mov.w	r2, #4294967295
 800ce18:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d115      	bne.n	800ce4e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4610      	mov	r0, r2
 800ce30:	f000 f844 	bl	800cebc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce34:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce38:	f7ff fea2 	bl	800cb80 <FLASH_WaitForLastOperation>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ce40:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <HAL_FLASHEx_Erase+0xdc>)
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	4a1c      	ldr	r2, [pc, #112]	; (800ceb8 <HAL_FLASHEx_Erase+0xdc>)
 800ce46:	f023 0304 	bic.w	r3, r3, #4
 800ce4a:	6113      	str	r3, [r2, #16]
 800ce4c:	e028      	b.n	800cea0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	60bb      	str	r3, [r7, #8]
 800ce54:	e01c      	b.n	800ce90 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	68b8      	ldr	r0, [r7, #8]
 800ce60:	f000 f850 	bl	800cf04 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce64:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce68:	f7ff fe8a 	bl	800cb80 <FLASH_WaitForLastOperation>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ce70:	4b11      	ldr	r3, [pc, #68]	; (800ceb8 <HAL_FLASHEx_Erase+0xdc>)
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	4a10      	ldr	r2, [pc, #64]	; (800ceb8 <HAL_FLASHEx_Erase+0xdc>)
 800ce76:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ce7a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d003      	beq.n	800ce8a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	601a      	str	r2, [r3, #0]
          break;
 800ce88:	e00a      	b.n	800cea0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	60bb      	str	r3, [r7, #8]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68da      	ldr	r2, [r3, #12]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	4413      	add	r3, r2
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d3da      	bcc.n	800ce56 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800cea0:	f000 f878 	bl	800cf94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cea4:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <HAL_FLASHEx_Erase+0xd8>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	761a      	strb	r2, [r3, #24]

  return status;
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20015714 	.word	0x20015714
 800ceb8:	40023c00 	.word	0x40023c00

0800cebc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	6039      	str	r1, [r7, #0]
 800cec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cec8:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <FLASH_MassErase+0x44>)
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	4a0c      	ldr	r2, [pc, #48]	; (800cf00 <FLASH_MassErase+0x44>)
 800cece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ced2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800ced4:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <FLASH_MassErase+0x44>)
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <FLASH_MassErase+0x44>)
 800ceda:	f043 0304 	orr.w	r3, r3, #4
 800cede:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <FLASH_MassErase+0x44>)
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	021b      	lsls	r3, r3, #8
 800cee8:	4313      	orrs	r3, r2
 800ceea:	4a05      	ldr	r2, [pc, #20]	; (800cf00 <FLASH_MassErase+0x44>)
 800ceec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cef0:	6113      	str	r3, [r2, #16]
}
 800cef2:	bf00      	nop
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	40023c00 	.word	0x40023c00

0800cf04 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d102      	bne.n	800cf20 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60fb      	str	r3, [r7, #12]
 800cf1e:	e010      	b.n	800cf42 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800cf20:	78fb      	ldrb	r3, [r7, #3]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d103      	bne.n	800cf2e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800cf26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	e009      	b.n	800cf42 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d103      	bne.n	800cf3c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800cf34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	e002      	b.n	800cf42 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800cf3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cf40:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cf42:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	4a12      	ldr	r2, [pc, #72]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800cf4e:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf50:	691a      	ldr	r2, [r3, #16]
 800cf52:	490f      	ldr	r1, [pc, #60]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800cf5a:	4b0d      	ldr	r3, [pc, #52]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	4a0c      	ldr	r2, [pc, #48]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cf64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800cf66:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf68:	691a      	ldr	r2, [r3, #16]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	4a07      	ldr	r2, [pc, #28]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf72:	f043 0302 	orr.w	r3, r3, #2
 800cf76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	4a04      	ldr	r2, [pc, #16]	; (800cf90 <FLASH_Erase_Sector+0x8c>)
 800cf7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf82:	6113      	str	r3, [r2, #16]
}
 800cf84:	bf00      	nop
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	40023c00 	.word	0x40023c00

0800cf94 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800cf98:	4b20      	ldr	r3, [pc, #128]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d017      	beq.n	800cfd4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cfa4:	4b1d      	ldr	r3, [pc, #116]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a1c      	ldr	r2, [pc, #112]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a19      	ldr	r2, [pc, #100]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cfba:	6013      	str	r3, [r2, #0]
 800cfbc:	4b17      	ldr	r3, [pc, #92]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a16      	ldr	r2, [pc, #88]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfc6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cfc8:	4b14      	ldr	r3, [pc, #80]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a13      	ldr	r2, [pc, #76]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cfd2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800cfd4:	4b11      	ldr	r3, [pc, #68]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d017      	beq.n	800d010 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800cfe0:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a0d      	ldr	r2, [pc, #52]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800cfec:	4b0b      	ldr	r3, [pc, #44]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a0a      	ldr	r2, [pc, #40]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	4b08      	ldr	r3, [pc, #32]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a07      	ldr	r2, [pc, #28]	; (800d01c <FLASH_FlushCaches+0x88>)
 800cffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d002:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d004:	4b05      	ldr	r3, [pc, #20]	; (800d01c <FLASH_FlushCaches+0x88>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a04      	ldr	r2, [pc, #16]	; (800d01c <FLASH_FlushCaches+0x88>)
 800d00a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d00e:	6013      	str	r3, [r2, #0]
  }
}
 800d010:	bf00      	nop
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	40023c00 	.word	0x40023c00

0800d020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d020:	b480      	push	{r7}
 800d022:	b089      	sub	sp, #36	; 0x24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d02a:	2300      	movs	r3, #0
 800d02c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d02e:	2300      	movs	r3, #0
 800d030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d032:	2300      	movs	r3, #0
 800d034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d036:	2300      	movs	r3, #0
 800d038:	61fb      	str	r3, [r7, #28]
 800d03a:	e16b      	b.n	800d314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d03c:	2201      	movs	r2, #1
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	fa02 f303 	lsl.w	r3, r2, r3
 800d044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	4013      	ands	r3, r2
 800d04e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	429a      	cmp	r2, r3
 800d056:	f040 815a 	bne.w	800d30e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d00b      	beq.n	800d07a <HAL_GPIO_Init+0x5a>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	2b02      	cmp	r3, #2
 800d068:	d007      	beq.n	800d07a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d06e:	2b11      	cmp	r3, #17
 800d070:	d003      	beq.n	800d07a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	2b12      	cmp	r3, #18
 800d078:	d130      	bne.n	800d0dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	2203      	movs	r2, #3
 800d086:	fa02 f303 	lsl.w	r3, r2, r3
 800d08a:	43db      	mvns	r3, r3
 800d08c:	69ba      	ldr	r2, [r7, #24]
 800d08e:	4013      	ands	r3, r2
 800d090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	68da      	ldr	r2, [r3, #12]
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	fa02 f303 	lsl.w	r3, r2, r3
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	69ba      	ldr	r2, [r7, #24]
 800d0a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b8:	43db      	mvns	r3, r3
 800d0ba:	69ba      	ldr	r2, [r7, #24]
 800d0bc:	4013      	ands	r3, r2
 800d0be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	091b      	lsrs	r3, r3, #4
 800d0c6:	f003 0201 	and.w	r2, r3, #1
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	69ba      	ldr	r2, [r7, #24]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ec:	43db      	mvns	r3, r3
 800d0ee:	69ba      	ldr	r2, [r7, #24]
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	689a      	ldr	r2, [r3, #8]
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d100:	69ba      	ldr	r2, [r7, #24]
 800d102:	4313      	orrs	r3, r2
 800d104:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	69ba      	ldr	r2, [r7, #24]
 800d10a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d003      	beq.n	800d11c <HAL_GPIO_Init+0xfc>
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	2b12      	cmp	r3, #18
 800d11a:	d123      	bne.n	800d164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	08da      	lsrs	r2, r3, #3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3208      	adds	r2, #8
 800d124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	f003 0307 	and.w	r3, r3, #7
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	220f      	movs	r2, #15
 800d134:	fa02 f303 	lsl.w	r3, r2, r3
 800d138:	43db      	mvns	r3, r3
 800d13a:	69ba      	ldr	r2, [r7, #24]
 800d13c:	4013      	ands	r3, r2
 800d13e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	691a      	ldr	r2, [r3, #16]
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	f003 0307 	and.w	r3, r3, #7
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	fa02 f303 	lsl.w	r3, r2, r3
 800d150:	69ba      	ldr	r2, [r7, #24]
 800d152:	4313      	orrs	r3, r2
 800d154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	08da      	lsrs	r2, r3, #3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	3208      	adds	r2, #8
 800d15e:	69b9      	ldr	r1, [r7, #24]
 800d160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	2203      	movs	r2, #3
 800d170:	fa02 f303 	lsl.w	r3, r2, r3
 800d174:	43db      	mvns	r3, r3
 800d176:	69ba      	ldr	r2, [r7, #24]
 800d178:	4013      	ands	r3, r2
 800d17a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	f003 0203 	and.w	r2, r3, #3
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	fa02 f303 	lsl.w	r3, r2, r3
 800d18c:	69ba      	ldr	r2, [r7, #24]
 800d18e:	4313      	orrs	r3, r2
 800d190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 80b4 	beq.w	800d30e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60fb      	str	r3, [r7, #12]
 800d1aa:	4b5f      	ldr	r3, [pc, #380]	; (800d328 <HAL_GPIO_Init+0x308>)
 800d1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ae:	4a5e      	ldr	r2, [pc, #376]	; (800d328 <HAL_GPIO_Init+0x308>)
 800d1b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d1b4:	6453      	str	r3, [r2, #68]	; 0x44
 800d1b6:	4b5c      	ldr	r3, [pc, #368]	; (800d328 <HAL_GPIO_Init+0x308>)
 800d1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1be:	60fb      	str	r3, [r7, #12]
 800d1c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d1c2:	4a5a      	ldr	r2, [pc, #360]	; (800d32c <HAL_GPIO_Init+0x30c>)
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	089b      	lsrs	r3, r3, #2
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	220f      	movs	r2, #15
 800d1da:	fa02 f303 	lsl.w	r3, r2, r3
 800d1de:	43db      	mvns	r3, r3
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a51      	ldr	r2, [pc, #324]	; (800d330 <HAL_GPIO_Init+0x310>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d02b      	beq.n	800d246 <HAL_GPIO_Init+0x226>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a50      	ldr	r2, [pc, #320]	; (800d334 <HAL_GPIO_Init+0x314>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d025      	beq.n	800d242 <HAL_GPIO_Init+0x222>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a4f      	ldr	r2, [pc, #316]	; (800d338 <HAL_GPIO_Init+0x318>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d01f      	beq.n	800d23e <HAL_GPIO_Init+0x21e>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a4e      	ldr	r2, [pc, #312]	; (800d33c <HAL_GPIO_Init+0x31c>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d019      	beq.n	800d23a <HAL_GPIO_Init+0x21a>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a4d      	ldr	r2, [pc, #308]	; (800d340 <HAL_GPIO_Init+0x320>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d013      	beq.n	800d236 <HAL_GPIO_Init+0x216>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a4c      	ldr	r2, [pc, #304]	; (800d344 <HAL_GPIO_Init+0x324>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d00d      	beq.n	800d232 <HAL_GPIO_Init+0x212>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a4b      	ldr	r2, [pc, #300]	; (800d348 <HAL_GPIO_Init+0x328>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d007      	beq.n	800d22e <HAL_GPIO_Init+0x20e>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4a4a      	ldr	r2, [pc, #296]	; (800d34c <HAL_GPIO_Init+0x32c>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d101      	bne.n	800d22a <HAL_GPIO_Init+0x20a>
 800d226:	2307      	movs	r3, #7
 800d228:	e00e      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d22a:	2308      	movs	r3, #8
 800d22c:	e00c      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d22e:	2306      	movs	r3, #6
 800d230:	e00a      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d232:	2305      	movs	r3, #5
 800d234:	e008      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d236:	2304      	movs	r3, #4
 800d238:	e006      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d23a:	2303      	movs	r3, #3
 800d23c:	e004      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d23e:	2302      	movs	r3, #2
 800d240:	e002      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d242:	2301      	movs	r3, #1
 800d244:	e000      	b.n	800d248 <HAL_GPIO_Init+0x228>
 800d246:	2300      	movs	r3, #0
 800d248:	69fa      	ldr	r2, [r7, #28]
 800d24a:	f002 0203 	and.w	r2, r2, #3
 800d24e:	0092      	lsls	r2, r2, #2
 800d250:	4093      	lsls	r3, r2
 800d252:	69ba      	ldr	r2, [r7, #24]
 800d254:	4313      	orrs	r3, r2
 800d256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d258:	4934      	ldr	r1, [pc, #208]	; (800d32c <HAL_GPIO_Init+0x30c>)
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	089b      	lsrs	r3, r3, #2
 800d25e:	3302      	adds	r3, #2
 800d260:	69ba      	ldr	r2, [r7, #24]
 800d262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d266:	4b3a      	ldr	r3, [pc, #232]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	43db      	mvns	r3, r3
 800d270:	69ba      	ldr	r2, [r7, #24]
 800d272:	4013      	ands	r3, r2
 800d274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d003      	beq.n	800d28a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d282:	69ba      	ldr	r2, [r7, #24]
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	4313      	orrs	r3, r2
 800d288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d28a:	4a31      	ldr	r2, [pc, #196]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d290:	4b2f      	ldr	r3, [pc, #188]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	43db      	mvns	r3, r3
 800d29a:	69ba      	ldr	r2, [r7, #24]
 800d29c:	4013      	ands	r3, r2
 800d29e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d003      	beq.n	800d2b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d2ac:	69ba      	ldr	r2, [r7, #24]
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d2b4:	4a26      	ldr	r2, [pc, #152]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d2ba:	4b25      	ldr	r3, [pc, #148]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	43db      	mvns	r3, r3
 800d2c4:	69ba      	ldr	r2, [r7, #24]
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d2d6:	69ba      	ldr	r2, [r7, #24]
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d2de:	4a1c      	ldr	r2, [pc, #112]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d2e4:	4b1a      	ldr	r3, [pc, #104]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	43db      	mvns	r3, r3
 800d2ee:	69ba      	ldr	r2, [r7, #24]
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d300:	69ba      	ldr	r2, [r7, #24]
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	4313      	orrs	r3, r2
 800d306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d308:	4a11      	ldr	r2, [pc, #68]	; (800d350 <HAL_GPIO_Init+0x330>)
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	3301      	adds	r3, #1
 800d312:	61fb      	str	r3, [r7, #28]
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	2b0f      	cmp	r3, #15
 800d318:	f67f ae90 	bls.w	800d03c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d31c:	bf00      	nop
 800d31e:	3724      	adds	r7, #36	; 0x24
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	40023800 	.word	0x40023800
 800d32c:	40013800 	.word	0x40013800
 800d330:	40020000 	.word	0x40020000
 800d334:	40020400 	.word	0x40020400
 800d338:	40020800 	.word	0x40020800
 800d33c:	40020c00 	.word	0x40020c00
 800d340:	40021000 	.word	0x40021000
 800d344:	40021400 	.word	0x40021400
 800d348:	40021800 	.word	0x40021800
 800d34c:	40021c00 	.word	0x40021c00
 800d350:	40013c00 	.word	0x40013c00

0800d354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	807b      	strh	r3, [r7, #2]
 800d360:	4613      	mov	r3, r2
 800d362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d364:	787b      	ldrb	r3, [r7, #1]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d003      	beq.n	800d372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d36a:	887a      	ldrh	r2, [r7, #2]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d370:	e003      	b.n	800d37a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d372:	887b      	ldrh	r3, [r7, #2]
 800d374:	041a      	lsls	r2, r3, #16
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	619a      	str	r2, [r3, #24]
}
 800d37a:	bf00      	nop
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d392:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d394:	695a      	ldr	r2, [r3, #20]
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	4013      	ands	r3, r2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d006      	beq.n	800d3ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d39e:	4a05      	ldr	r2, [pc, #20]	; (800d3b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d3a0:	88fb      	ldrh	r3, [r7, #6]
 800d3a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d3a4:	88fb      	ldrh	r3, [r7, #6]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 f806 	bl	800d3b8 <HAL_GPIO_EXTI_Callback>
  }
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	40013c00 	.word	0x40013c00

0800d3b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4603      	mov	r3, r0
 800d3c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800d3c2:	bf00      	nop
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
	...

0800d3d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d101      	bne.n	800d3e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e25b      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d075      	beq.n	800d4da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d3ee:	4ba3      	ldr	r3, [pc, #652]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f003 030c 	and.w	r3, r3, #12
 800d3f6:	2b04      	cmp	r3, #4
 800d3f8:	d00c      	beq.n	800d414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d3fa:	4ba0      	ldr	r3, [pc, #640]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d402:	2b08      	cmp	r3, #8
 800d404:	d112      	bne.n	800d42c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d406:	4b9d      	ldr	r3, [pc, #628]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d40e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d412:	d10b      	bne.n	800d42c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d414:	4b99      	ldr	r3, [pc, #612]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d05b      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x108>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d157      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e236      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d434:	d106      	bne.n	800d444 <HAL_RCC_OscConfig+0x74>
 800d436:	4b91      	ldr	r3, [pc, #580]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a90      	ldr	r2, [pc, #576]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d43c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	e01d      	b.n	800d480 <HAL_RCC_OscConfig+0xb0>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d44c:	d10c      	bne.n	800d468 <HAL_RCC_OscConfig+0x98>
 800d44e:	4b8b      	ldr	r3, [pc, #556]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a8a      	ldr	r2, [pc, #552]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d458:	6013      	str	r3, [r2, #0]
 800d45a:	4b88      	ldr	r3, [pc, #544]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a87      	ldr	r2, [pc, #540]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	e00b      	b.n	800d480 <HAL_RCC_OscConfig+0xb0>
 800d468:	4b84      	ldr	r3, [pc, #528]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a83      	ldr	r2, [pc, #524]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d46e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	4b81      	ldr	r3, [pc, #516]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a80      	ldr	r2, [pc, #512]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d47a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d47e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d013      	beq.n	800d4b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d488:	f7ff f938 	bl	800c6fc <HAL_GetTick>
 800d48c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d48e:	e008      	b.n	800d4a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d490:	f7ff f934 	bl	800c6fc <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b64      	cmp	r3, #100	; 0x64
 800d49c:	d901      	bls.n	800d4a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e1fb      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d4a2:	4b76      	ldr	r3, [pc, #472]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0f0      	beq.n	800d490 <HAL_RCC_OscConfig+0xc0>
 800d4ae:	e014      	b.n	800d4da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4b0:	f7ff f924 	bl	800c6fc <HAL_GetTick>
 800d4b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4b6:	e008      	b.n	800d4ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d4b8:	f7ff f920 	bl	800c6fc <HAL_GetTick>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	2b64      	cmp	r3, #100	; 0x64
 800d4c4:	d901      	bls.n	800d4ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e1e7      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4ca:	4b6c      	ldr	r3, [pc, #432]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1f0      	bne.n	800d4b8 <HAL_RCC_OscConfig+0xe8>
 800d4d6:	e000      	b.n	800d4da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d063      	beq.n	800d5ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d4e6:	4b65      	ldr	r3, [pc, #404]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	f003 030c 	and.w	r3, r3, #12
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00b      	beq.n	800d50a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d4f2:	4b62      	ldr	r3, [pc, #392]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	d11c      	bne.n	800d538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d4fe:	4b5f      	ldr	r3, [pc, #380]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d116      	bne.n	800d538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d50a:	4b5c      	ldr	r3, [pc, #368]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <HAL_RCC_OscConfig+0x152>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d001      	beq.n	800d522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	e1bb      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d522:	4b56      	ldr	r3, [pc, #344]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	4952      	ldr	r1, [pc, #328]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d532:	4313      	orrs	r3, r2
 800d534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d536:	e03a      	b.n	800d5ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d020      	beq.n	800d582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d540:	4b4f      	ldr	r3, [pc, #316]	; (800d680 <HAL_RCC_OscConfig+0x2b0>)
 800d542:	2201      	movs	r2, #1
 800d544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d546:	f7ff f8d9 	bl	800c6fc <HAL_GetTick>
 800d54a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d54c:	e008      	b.n	800d560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d54e:	f7ff f8d5 	bl	800c6fc <HAL_GetTick>
 800d552:	4602      	mov	r2, r0
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d901      	bls.n	800d560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	e19c      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d560:	4b46      	ldr	r3, [pc, #280]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0f0      	beq.n	800d54e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d56c:	4b43      	ldr	r3, [pc, #268]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	00db      	lsls	r3, r3, #3
 800d57a:	4940      	ldr	r1, [pc, #256]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d57c:	4313      	orrs	r3, r2
 800d57e:	600b      	str	r3, [r1, #0]
 800d580:	e015      	b.n	800d5ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d582:	4b3f      	ldr	r3, [pc, #252]	; (800d680 <HAL_RCC_OscConfig+0x2b0>)
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d588:	f7ff f8b8 	bl	800c6fc <HAL_GetTick>
 800d58c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d58e:	e008      	b.n	800d5a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d590:	f7ff f8b4 	bl	800c6fc <HAL_GetTick>
 800d594:	4602      	mov	r2, r0
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d901      	bls.n	800d5a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	e17b      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d5a2:	4b36      	ldr	r3, [pc, #216]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1f0      	bne.n	800d590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d030      	beq.n	800d61c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d016      	beq.n	800d5f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5c2:	4b30      	ldr	r3, [pc, #192]	; (800d684 <HAL_RCC_OscConfig+0x2b4>)
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5c8:	f7ff f898 	bl	800c6fc <HAL_GetTick>
 800d5cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5ce:	e008      	b.n	800d5e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5d0:	f7ff f894 	bl	800c6fc <HAL_GetTick>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d901      	bls.n	800d5e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e15b      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5e2:	4b26      	ldr	r3, [pc, #152]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5e6:	f003 0302 	and.w	r3, r3, #2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d0f0      	beq.n	800d5d0 <HAL_RCC_OscConfig+0x200>
 800d5ee:	e015      	b.n	800d61c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5f0:	4b24      	ldr	r3, [pc, #144]	; (800d684 <HAL_RCC_OscConfig+0x2b4>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d5f6:	f7ff f881 	bl	800c6fc <HAL_GetTick>
 800d5fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d5fc:	e008      	b.n	800d610 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5fe:	f7ff f87d 	bl	800c6fc <HAL_GetTick>
 800d602:	4602      	mov	r2, r0
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d901      	bls.n	800d610 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d60c:	2303      	movs	r3, #3
 800d60e:	e144      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d610:	4b1a      	ldr	r3, [pc, #104]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d614:	f003 0302 	and.w	r3, r3, #2
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1f0      	bne.n	800d5fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f003 0304 	and.w	r3, r3, #4
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 80a0 	beq.w	800d76a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d62a:	2300      	movs	r3, #0
 800d62c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10f      	bne.n	800d65a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d63a:	2300      	movs	r3, #0
 800d63c:	60bb      	str	r3, [r7, #8]
 800d63e:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d642:	4a0e      	ldr	r2, [pc, #56]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d648:	6413      	str	r3, [r2, #64]	; 0x40
 800d64a:	4b0c      	ldr	r3, [pc, #48]	; (800d67c <HAL_RCC_OscConfig+0x2ac>)
 800d64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d652:	60bb      	str	r3, [r7, #8]
 800d654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d656:	2301      	movs	r3, #1
 800d658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <HAL_RCC_OscConfig+0x2b8>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d662:	2b00      	cmp	r3, #0
 800d664:	d121      	bne.n	800d6aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d666:	4b08      	ldr	r3, [pc, #32]	; (800d688 <HAL_RCC_OscConfig+0x2b8>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a07      	ldr	r2, [pc, #28]	; (800d688 <HAL_RCC_OscConfig+0x2b8>)
 800d66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d672:	f7ff f843 	bl	800c6fc <HAL_GetTick>
 800d676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d678:	e011      	b.n	800d69e <HAL_RCC_OscConfig+0x2ce>
 800d67a:	bf00      	nop
 800d67c:	40023800 	.word	0x40023800
 800d680:	42470000 	.word	0x42470000
 800d684:	42470e80 	.word	0x42470e80
 800d688:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d68c:	f7ff f836 	bl	800c6fc <HAL_GetTick>
 800d690:	4602      	mov	r2, r0
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	2b02      	cmp	r3, #2
 800d698:	d901      	bls.n	800d69e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d69a:	2303      	movs	r3, #3
 800d69c:	e0fd      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d69e:	4b81      	ldr	r3, [pc, #516]	; (800d8a4 <HAL_RCC_OscConfig+0x4d4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d0f0      	beq.n	800d68c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d106      	bne.n	800d6c0 <HAL_RCC_OscConfig+0x2f0>
 800d6b2:	4b7d      	ldr	r3, [pc, #500]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b6:	4a7c      	ldr	r2, [pc, #496]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6b8:	f043 0301 	orr.w	r3, r3, #1
 800d6bc:	6713      	str	r3, [r2, #112]	; 0x70
 800d6be:	e01c      	b.n	800d6fa <HAL_RCC_OscConfig+0x32a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	2b05      	cmp	r3, #5
 800d6c6:	d10c      	bne.n	800d6e2 <HAL_RCC_OscConfig+0x312>
 800d6c8:	4b77      	ldr	r3, [pc, #476]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6cc:	4a76      	ldr	r2, [pc, #472]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6ce:	f043 0304 	orr.w	r3, r3, #4
 800d6d2:	6713      	str	r3, [r2, #112]	; 0x70
 800d6d4:	4b74      	ldr	r3, [pc, #464]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d8:	4a73      	ldr	r2, [pc, #460]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6da:	f043 0301 	orr.w	r3, r3, #1
 800d6de:	6713      	str	r3, [r2, #112]	; 0x70
 800d6e0:	e00b      	b.n	800d6fa <HAL_RCC_OscConfig+0x32a>
 800d6e2:	4b71      	ldr	r3, [pc, #452]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e6:	4a70      	ldr	r2, [pc, #448]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6e8:	f023 0301 	bic.w	r3, r3, #1
 800d6ec:	6713      	str	r3, [r2, #112]	; 0x70
 800d6ee:	4b6e      	ldr	r3, [pc, #440]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f2:	4a6d      	ldr	r2, [pc, #436]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d6f4:	f023 0304 	bic.w	r3, r3, #4
 800d6f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d015      	beq.n	800d72e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d702:	f7fe fffb 	bl	800c6fc <HAL_GetTick>
 800d706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d708:	e00a      	b.n	800d720 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d70a:	f7fe fff7 	bl	800c6fc <HAL_GetTick>
 800d70e:	4602      	mov	r2, r0
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	f241 3288 	movw	r2, #5000	; 0x1388
 800d718:	4293      	cmp	r3, r2
 800d71a:	d901      	bls.n	800d720 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d71c:	2303      	movs	r3, #3
 800d71e:	e0bc      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d720:	4b61      	ldr	r3, [pc, #388]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d724:	f003 0302 	and.w	r3, r3, #2
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d0ee      	beq.n	800d70a <HAL_RCC_OscConfig+0x33a>
 800d72c:	e014      	b.n	800d758 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d72e:	f7fe ffe5 	bl	800c6fc <HAL_GetTick>
 800d732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d734:	e00a      	b.n	800d74c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d736:	f7fe ffe1 	bl	800c6fc <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	f241 3288 	movw	r2, #5000	; 0x1388
 800d744:	4293      	cmp	r3, r2
 800d746:	d901      	bls.n	800d74c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e0a6      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d74c:	4b56      	ldr	r3, [pc, #344]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1ee      	bne.n	800d736 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d758:	7dfb      	ldrb	r3, [r7, #23]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d105      	bne.n	800d76a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d75e:	4b52      	ldr	r3, [pc, #328]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d762:	4a51      	ldr	r2, [pc, #324]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d768:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8092 	beq.w	800d898 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d774:	4b4c      	ldr	r3, [pc, #304]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	f003 030c 	and.w	r3, r3, #12
 800d77c:	2b08      	cmp	r3, #8
 800d77e:	d05c      	beq.n	800d83a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	2b02      	cmp	r3, #2
 800d786:	d141      	bne.n	800d80c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d788:	4b48      	ldr	r3, [pc, #288]	; (800d8ac <HAL_RCC_OscConfig+0x4dc>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d78e:	f7fe ffb5 	bl	800c6fc <HAL_GetTick>
 800d792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d794:	e008      	b.n	800d7a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d796:	f7fe ffb1 	bl	800c6fc <HAL_GetTick>
 800d79a:	4602      	mov	r2, r0
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	d901      	bls.n	800d7a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	e078      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7a8:	4b3f      	ldr	r3, [pc, #252]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1f0      	bne.n	800d796 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	69da      	ldr	r2, [r3, #28]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a1b      	ldr	r3, [r3, #32]
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c2:	019b      	lsls	r3, r3, #6
 800d7c4:	431a      	orrs	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ca:	085b      	lsrs	r3, r3, #1
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	041b      	lsls	r3, r3, #16
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d6:	061b      	lsls	r3, r3, #24
 800d7d8:	4933      	ldr	r1, [pc, #204]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d7de:	4b33      	ldr	r3, [pc, #204]	; (800d8ac <HAL_RCC_OscConfig+0x4dc>)
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7e4:	f7fe ff8a 	bl	800c6fc <HAL_GetTick>
 800d7e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7ea:	e008      	b.n	800d7fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d7ec:	f7fe ff86 	bl	800c6fc <HAL_GetTick>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d901      	bls.n	800d7fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	e04d      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7fe:	4b2a      	ldr	r3, [pc, #168]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0f0      	beq.n	800d7ec <HAL_RCC_OscConfig+0x41c>
 800d80a:	e045      	b.n	800d898 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d80c:	4b27      	ldr	r3, [pc, #156]	; (800d8ac <HAL_RCC_OscConfig+0x4dc>)
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d812:	f7fe ff73 	bl	800c6fc <HAL_GetTick>
 800d816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d818:	e008      	b.n	800d82c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d81a:	f7fe ff6f 	bl	800c6fc <HAL_GetTick>
 800d81e:	4602      	mov	r2, r0
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	2b02      	cmp	r3, #2
 800d826:	d901      	bls.n	800d82c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d828:	2303      	movs	r3, #3
 800d82a:	e036      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d82c:	4b1e      	ldr	r3, [pc, #120]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1f0      	bne.n	800d81a <HAL_RCC_OscConfig+0x44a>
 800d838:	e02e      	b.n	800d898 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d101      	bne.n	800d846 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	e029      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d846:	4b18      	ldr	r3, [pc, #96]	; (800d8a8 <HAL_RCC_OscConfig+0x4d8>)
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	69db      	ldr	r3, [r3, #28]
 800d856:	429a      	cmp	r2, r3
 800d858:	d11c      	bne.n	800d894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d864:	429a      	cmp	r2, r3
 800d866:	d115      	bne.n	800d894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d86e:	4013      	ands	r3, r2
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d874:	4293      	cmp	r3, r2
 800d876:	d10d      	bne.n	800d894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d882:	429a      	cmp	r2, r3
 800d884:	d106      	bne.n	800d894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d890:	429a      	cmp	r2, r3
 800d892:	d001      	beq.n	800d898 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e000      	b.n	800d89a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3718      	adds	r7, #24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	40007000 	.word	0x40007000
 800d8a8:	40023800 	.word	0x40023800
 800d8ac:	42470060 	.word	0x42470060

0800d8b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e0cc      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d8c4:	4b68      	ldr	r3, [pc, #416]	; (800da68 <HAL_RCC_ClockConfig+0x1b8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f003 030f 	and.w	r3, r3, #15
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d90c      	bls.n	800d8ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8d2:	4b65      	ldr	r3, [pc, #404]	; (800da68 <HAL_RCC_ClockConfig+0x1b8>)
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	b2d2      	uxtb	r2, r2
 800d8d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8da:	4b63      	ldr	r3, [pc, #396]	; (800da68 <HAL_RCC_ClockConfig+0x1b8>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 030f 	and.w	r3, r3, #15
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d001      	beq.n	800d8ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e0b8      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f003 0302 	and.w	r3, r3, #2
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d020      	beq.n	800d93a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f003 0304 	and.w	r3, r3, #4
 800d900:	2b00      	cmp	r3, #0
 800d902:	d005      	beq.n	800d910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d904:	4b59      	ldr	r3, [pc, #356]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	4a58      	ldr	r2, [pc, #352]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d90a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d90e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 0308 	and.w	r3, r3, #8
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d005      	beq.n	800d928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d91c:	4b53      	ldr	r3, [pc, #332]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	4a52      	ldr	r2, [pc, #328]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d928:	4b50      	ldr	r3, [pc, #320]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	494d      	ldr	r1, [pc, #308]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d936:	4313      	orrs	r3, r2
 800d938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	d044      	beq.n	800d9d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d107      	bne.n	800d95e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d94e:	4b47      	ldr	r3, [pc, #284]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d956:	2b00      	cmp	r3, #0
 800d958:	d119      	bne.n	800d98e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	e07f      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d003      	beq.n	800d96e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d107      	bne.n	800d97e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d96e:	4b3f      	ldr	r3, [pc, #252]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d976:	2b00      	cmp	r3, #0
 800d978:	d109      	bne.n	800d98e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e06f      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d97e:	4b3b      	ldr	r3, [pc, #236]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e067      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d98e:	4b37      	ldr	r3, [pc, #220]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f023 0203 	bic.w	r2, r3, #3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	4934      	ldr	r1, [pc, #208]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d99c:	4313      	orrs	r3, r2
 800d99e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d9a0:	f7fe feac 	bl	800c6fc <HAL_GetTick>
 800d9a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9a6:	e00a      	b.n	800d9be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d9a8:	f7fe fea8 	bl	800c6fc <HAL_GetTick>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d901      	bls.n	800d9be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	e04f      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9be:	4b2b      	ldr	r3, [pc, #172]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f003 020c 	and.w	r2, r3, #12
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d1eb      	bne.n	800d9a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d9d0:	4b25      	ldr	r3, [pc, #148]	; (800da68 <HAL_RCC_ClockConfig+0x1b8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f003 030f 	and.w	r3, r3, #15
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d20c      	bcs.n	800d9f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9de:	4b22      	ldr	r3, [pc, #136]	; (800da68 <HAL_RCC_ClockConfig+0x1b8>)
 800d9e0:	683a      	ldr	r2, [r7, #0]
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9e6:	4b20      	ldr	r3, [pc, #128]	; (800da68 <HAL_RCC_ClockConfig+0x1b8>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f003 030f 	and.w	r3, r3, #15
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d001      	beq.n	800d9f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e032      	b.n	800da5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f003 0304 	and.w	r3, r3, #4
 800da00:	2b00      	cmp	r3, #0
 800da02:	d008      	beq.n	800da16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800da04:	4b19      	ldr	r3, [pc, #100]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	4916      	ldr	r1, [pc, #88]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800da12:	4313      	orrs	r3, r2
 800da14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0308 	and.w	r3, r3, #8
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d009      	beq.n	800da36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800da22:	4b12      	ldr	r3, [pc, #72]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	00db      	lsls	r3, r3, #3
 800da30:	490e      	ldr	r1, [pc, #56]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800da32:	4313      	orrs	r3, r2
 800da34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800da36:	f000 f821 	bl	800da7c <HAL_RCC_GetSysClockFreq>
 800da3a:	4601      	mov	r1, r0
 800da3c:	4b0b      	ldr	r3, [pc, #44]	; (800da6c <HAL_RCC_ClockConfig+0x1bc>)
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	091b      	lsrs	r3, r3, #4
 800da42:	f003 030f 	and.w	r3, r3, #15
 800da46:	4a0a      	ldr	r2, [pc, #40]	; (800da70 <HAL_RCC_ClockConfig+0x1c0>)
 800da48:	5cd3      	ldrb	r3, [r2, r3]
 800da4a:	fa21 f303 	lsr.w	r3, r1, r3
 800da4e:	4a09      	ldr	r2, [pc, #36]	; (800da74 <HAL_RCC_ClockConfig+0x1c4>)
 800da50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800da52:	4b09      	ldr	r3, [pc, #36]	; (800da78 <HAL_RCC_ClockConfig+0x1c8>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe fe0c 	bl	800c674 <HAL_InitTick>

  return HAL_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	40023c00 	.word	0x40023c00
 800da6c:	40023800 	.word	0x40023800
 800da70:	08011e60 	.word	0x08011e60
 800da74:	200002c0 	.word	0x200002c0
 800da78:	200002c4 	.word	0x200002c4

0800da7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800da82:	2300      	movs	r3, #0
 800da84:	607b      	str	r3, [r7, #4]
 800da86:	2300      	movs	r3, #0
 800da88:	60fb      	str	r3, [r7, #12]
 800da8a:	2300      	movs	r3, #0
 800da8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800da8e:	2300      	movs	r3, #0
 800da90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da92:	4b63      	ldr	r3, [pc, #396]	; (800dc20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	f003 030c 	and.w	r3, r3, #12
 800da9a:	2b04      	cmp	r3, #4
 800da9c:	d007      	beq.n	800daae <HAL_RCC_GetSysClockFreq+0x32>
 800da9e:	2b08      	cmp	r3, #8
 800daa0:	d008      	beq.n	800dab4 <HAL_RCC_GetSysClockFreq+0x38>
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f040 80b4 	bne.w	800dc10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800daa8:	4b5e      	ldr	r3, [pc, #376]	; (800dc24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800daaa:	60bb      	str	r3, [r7, #8]
       break;
 800daac:	e0b3      	b.n	800dc16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800daae:	4b5e      	ldr	r3, [pc, #376]	; (800dc28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dab0:	60bb      	str	r3, [r7, #8]
      break;
 800dab2:	e0b0      	b.n	800dc16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dab4:	4b5a      	ldr	r3, [pc, #360]	; (800dc20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dabc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dabe:	4b58      	ldr	r3, [pc, #352]	; (800dc20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d04a      	beq.n	800db60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800daca:	4b55      	ldr	r3, [pc, #340]	; (800dc20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	099b      	lsrs	r3, r3, #6
 800dad0:	f04f 0400 	mov.w	r4, #0
 800dad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dad8:	f04f 0200 	mov.w	r2, #0
 800dadc:	ea03 0501 	and.w	r5, r3, r1
 800dae0:	ea04 0602 	and.w	r6, r4, r2
 800dae4:	4629      	mov	r1, r5
 800dae6:	4632      	mov	r2, r6
 800dae8:	f04f 0300 	mov.w	r3, #0
 800daec:	f04f 0400 	mov.w	r4, #0
 800daf0:	0154      	lsls	r4, r2, #5
 800daf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800daf6:	014b      	lsls	r3, r1, #5
 800daf8:	4619      	mov	r1, r3
 800dafa:	4622      	mov	r2, r4
 800dafc:	1b49      	subs	r1, r1, r5
 800dafe:	eb62 0206 	sbc.w	r2, r2, r6
 800db02:	f04f 0300 	mov.w	r3, #0
 800db06:	f04f 0400 	mov.w	r4, #0
 800db0a:	0194      	lsls	r4, r2, #6
 800db0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800db10:	018b      	lsls	r3, r1, #6
 800db12:	1a5b      	subs	r3, r3, r1
 800db14:	eb64 0402 	sbc.w	r4, r4, r2
 800db18:	f04f 0100 	mov.w	r1, #0
 800db1c:	f04f 0200 	mov.w	r2, #0
 800db20:	00e2      	lsls	r2, r4, #3
 800db22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800db26:	00d9      	lsls	r1, r3, #3
 800db28:	460b      	mov	r3, r1
 800db2a:	4614      	mov	r4, r2
 800db2c:	195b      	adds	r3, r3, r5
 800db2e:	eb44 0406 	adc.w	r4, r4, r6
 800db32:	f04f 0100 	mov.w	r1, #0
 800db36:	f04f 0200 	mov.w	r2, #0
 800db3a:	0262      	lsls	r2, r4, #9
 800db3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800db40:	0259      	lsls	r1, r3, #9
 800db42:	460b      	mov	r3, r1
 800db44:	4614      	mov	r4, r2
 800db46:	4618      	mov	r0, r3
 800db48:	4621      	mov	r1, r4
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f04f 0400 	mov.w	r4, #0
 800db50:	461a      	mov	r2, r3
 800db52:	4623      	mov	r3, r4
 800db54:	f7f2 fb94 	bl	8000280 <__aeabi_uldivmod>
 800db58:	4603      	mov	r3, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	60fb      	str	r3, [r7, #12]
 800db5e:	e049      	b.n	800dbf4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db60:	4b2f      	ldr	r3, [pc, #188]	; (800dc20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	099b      	lsrs	r3, r3, #6
 800db66:	f04f 0400 	mov.w	r4, #0
 800db6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800db6e:	f04f 0200 	mov.w	r2, #0
 800db72:	ea03 0501 	and.w	r5, r3, r1
 800db76:	ea04 0602 	and.w	r6, r4, r2
 800db7a:	4629      	mov	r1, r5
 800db7c:	4632      	mov	r2, r6
 800db7e:	f04f 0300 	mov.w	r3, #0
 800db82:	f04f 0400 	mov.w	r4, #0
 800db86:	0154      	lsls	r4, r2, #5
 800db88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800db8c:	014b      	lsls	r3, r1, #5
 800db8e:	4619      	mov	r1, r3
 800db90:	4622      	mov	r2, r4
 800db92:	1b49      	subs	r1, r1, r5
 800db94:	eb62 0206 	sbc.w	r2, r2, r6
 800db98:	f04f 0300 	mov.w	r3, #0
 800db9c:	f04f 0400 	mov.w	r4, #0
 800dba0:	0194      	lsls	r4, r2, #6
 800dba2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dba6:	018b      	lsls	r3, r1, #6
 800dba8:	1a5b      	subs	r3, r3, r1
 800dbaa:	eb64 0402 	sbc.w	r4, r4, r2
 800dbae:	f04f 0100 	mov.w	r1, #0
 800dbb2:	f04f 0200 	mov.w	r2, #0
 800dbb6:	00e2      	lsls	r2, r4, #3
 800dbb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dbbc:	00d9      	lsls	r1, r3, #3
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4614      	mov	r4, r2
 800dbc2:	195b      	adds	r3, r3, r5
 800dbc4:	eb44 0406 	adc.w	r4, r4, r6
 800dbc8:	f04f 0100 	mov.w	r1, #0
 800dbcc:	f04f 0200 	mov.w	r2, #0
 800dbd0:	02a2      	lsls	r2, r4, #10
 800dbd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dbd6:	0299      	lsls	r1, r3, #10
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4614      	mov	r4, r2
 800dbdc:	4618      	mov	r0, r3
 800dbde:	4621      	mov	r1, r4
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f04f 0400 	mov.w	r4, #0
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	4623      	mov	r3, r4
 800dbea:	f7f2 fb49 	bl	8000280 <__aeabi_uldivmod>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	; (800dc20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	0c1b      	lsrs	r3, r3, #16
 800dbfa:	f003 0303 	and.w	r3, r3, #3
 800dbfe:	3301      	adds	r3, #1
 800dc00:	005b      	lsls	r3, r3, #1
 800dc02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc0c:	60bb      	str	r3, [r7, #8]
      break;
 800dc0e:	e002      	b.n	800dc16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dc10:	4b04      	ldr	r3, [pc, #16]	; (800dc24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc12:	60bb      	str	r3, [r7, #8]
      break;
 800dc14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dc16:	68bb      	ldr	r3, [r7, #8]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc20:	40023800 	.word	0x40023800
 800dc24:	00f42400 	.word	0x00f42400
 800dc28:	007a1200 	.word	0x007a1200

0800dc2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dc30:	4b03      	ldr	r3, [pc, #12]	; (800dc40 <HAL_RCC_GetHCLKFreq+0x14>)
 800dc32:	681b      	ldr	r3, [r3, #0]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	200002c0 	.word	0x200002c0

0800dc44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dc48:	f7ff fff0 	bl	800dc2c <HAL_RCC_GetHCLKFreq>
 800dc4c:	4601      	mov	r1, r0
 800dc4e:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	0a9b      	lsrs	r3, r3, #10
 800dc54:	f003 0307 	and.w	r3, r3, #7
 800dc58:	4a03      	ldr	r2, [pc, #12]	; (800dc68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc5a:	5cd3      	ldrb	r3, [r2, r3]
 800dc5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	40023800 	.word	0x40023800
 800dc68:	08011e70 	.word	0x08011e70

0800dc6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dc70:	f7ff ffdc 	bl	800dc2c <HAL_RCC_GetHCLKFreq>
 800dc74:	4601      	mov	r1, r0
 800dc76:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	0b5b      	lsrs	r3, r3, #13
 800dc7c:	f003 0307 	and.w	r3, r3, #7
 800dc80:	4a03      	ldr	r2, [pc, #12]	; (800dc90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc82:	5cd3      	ldrb	r3, [r2, r3]
 800dc84:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	40023800 	.word	0x40023800
 800dc90:	08011e70 	.word	0x08011e70

0800dc94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e01d      	b.n	800dce2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7fe fbd0 	bl	800c460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2202      	movs	r2, #2
 800dcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3304      	adds	r3, #4
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	4610      	mov	r0, r2
 800dcd4:	f000 f850 	bl	800dd78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e02d      	b.n	800dd5a <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d106      	bne.n	800dd18 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f825 	bl	800dd62 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3304      	adds	r3, #4
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f000 f824 	bl	800dd78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0208 	bic.w	r2, r2, #8
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6819      	ldr	r1, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	430a      	orrs	r2, r1
 800dd4e:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b083      	sub	sp, #12
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
	...

0800dd78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a40      	ldr	r2, [pc, #256]	; (800de8c <TIM_Base_SetConfig+0x114>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d013      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd96:	d00f      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a3d      	ldr	r2, [pc, #244]	; (800de90 <TIM_Base_SetConfig+0x118>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00b      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a3c      	ldr	r2, [pc, #240]	; (800de94 <TIM_Base_SetConfig+0x11c>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d007      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a3b      	ldr	r2, [pc, #236]	; (800de98 <TIM_Base_SetConfig+0x120>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d003      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a3a      	ldr	r2, [pc, #232]	; (800de9c <TIM_Base_SetConfig+0x124>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d108      	bne.n	800ddca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a2f      	ldr	r2, [pc, #188]	; (800de8c <TIM_Base_SetConfig+0x114>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d02b      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddd8:	d027      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a2c      	ldr	r2, [pc, #176]	; (800de90 <TIM_Base_SetConfig+0x118>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d023      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4a2b      	ldr	r2, [pc, #172]	; (800de94 <TIM_Base_SetConfig+0x11c>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d01f      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4a2a      	ldr	r2, [pc, #168]	; (800de98 <TIM_Base_SetConfig+0x120>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d01b      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	4a29      	ldr	r2, [pc, #164]	; (800de9c <TIM_Base_SetConfig+0x124>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d017      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a28      	ldr	r2, [pc, #160]	; (800dea0 <TIM_Base_SetConfig+0x128>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d013      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a27      	ldr	r2, [pc, #156]	; (800dea4 <TIM_Base_SetConfig+0x12c>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d00f      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a26      	ldr	r2, [pc, #152]	; (800dea8 <TIM_Base_SetConfig+0x130>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d00b      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a25      	ldr	r2, [pc, #148]	; (800deac <TIM_Base_SetConfig+0x134>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d007      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a24      	ldr	r2, [pc, #144]	; (800deb0 <TIM_Base_SetConfig+0x138>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d003      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a23      	ldr	r2, [pc, #140]	; (800deb4 <TIM_Base_SetConfig+0x13c>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d108      	bne.n	800de3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	4313      	orrs	r3, r2
 800de3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	4313      	orrs	r3, r2
 800de48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	689a      	ldr	r2, [r3, #8]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a0a      	ldr	r2, [pc, #40]	; (800de8c <TIM_Base_SetConfig+0x114>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d003      	beq.n	800de70 <TIM_Base_SetConfig+0xf8>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a0c      	ldr	r2, [pc, #48]	; (800de9c <TIM_Base_SetConfig+0x124>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d103      	bne.n	800de78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	691a      	ldr	r2, [r3, #16]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	615a      	str	r2, [r3, #20]
}
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	40010000 	.word	0x40010000
 800de90:	40000400 	.word	0x40000400
 800de94:	40000800 	.word	0x40000800
 800de98:	40000c00 	.word	0x40000c00
 800de9c:	40010400 	.word	0x40010400
 800dea0:	40014000 	.word	0x40014000
 800dea4:	40014400 	.word	0x40014400
 800dea8:	40014800 	.word	0x40014800
 800deac:	40001800 	.word	0x40001800
 800deb0:	40001c00 	.word	0x40001c00
 800deb4:	40002000 	.word	0x40002000

0800deb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d101      	bne.n	800deca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e03f      	b.n	800df4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d106      	bne.n	800dee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7fe fb1a 	bl	800c518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2224      	movs	r2, #36	; 0x24
 800dee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68da      	ldr	r2, [r3, #12]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800defa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fe89 	bl	800ec14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	691a      	ldr	r2, [r3, #16]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	695a      	ldr	r2, [r3, #20]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	68da      	ldr	r2, [r3, #12]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2220      	movs	r2, #32
 800df3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2220      	movs	r2, #32
 800df44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b088      	sub	sp, #32
 800df56:	af02      	add	r7, sp, #8
 800df58:	60f8      	str	r0, [r7, #12]
 800df5a:	60b9      	str	r1, [r7, #8]
 800df5c:	603b      	str	r3, [r7, #0]
 800df5e:	4613      	mov	r3, r2
 800df60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800df62:	2300      	movs	r3, #0
 800df64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b20      	cmp	r3, #32
 800df70:	f040 8083 	bne.w	800e07a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d002      	beq.n	800df80 <HAL_UART_Transmit+0x2e>
 800df7a:	88fb      	ldrh	r3, [r7, #6]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e07b      	b.n	800e07c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d101      	bne.n	800df92 <HAL_UART_Transmit+0x40>
 800df8e:	2302      	movs	r3, #2
 800df90:	e074      	b.n	800e07c <HAL_UART_Transmit+0x12a>
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2221      	movs	r2, #33	; 0x21
 800dfa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800dfa8:	f7fe fba8 	bl	800c6fc <HAL_GetTick>
 800dfac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	88fa      	ldrh	r2, [r7, #6]
 800dfb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	88fa      	ldrh	r2, [r7, #6]
 800dfb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800dfc2:	e042      	b.n	800e04a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfda:	d122      	bne.n	800e022 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	2180      	movs	r1, #128	; 0x80
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f000 fc3a 	bl	800e860 <UART_WaitOnFlagUntilTimeout>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800dff2:	2303      	movs	r3, #3
 800dff4:	e042      	b.n	800e07c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e008:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d103      	bne.n	800e01a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	3302      	adds	r3, #2
 800e016:	60bb      	str	r3, [r7, #8]
 800e018:	e017      	b.n	800e04a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	3301      	adds	r3, #1
 800e01e:	60bb      	str	r3, [r7, #8]
 800e020:	e013      	b.n	800e04a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2200      	movs	r2, #0
 800e02a:	2180      	movs	r1, #128	; 0x80
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f000 fc17 	bl	800e860 <UART_WaitOnFlagUntilTimeout>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d001      	beq.n	800e03c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800e038:	2303      	movs	r3, #3
 800e03a:	e01f      	b.n	800e07c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	60ba      	str	r2, [r7, #8]
 800e042:	781a      	ldrb	r2, [r3, #0]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e04e:	b29b      	uxth	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1b7      	bne.n	800dfc4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2200      	movs	r2, #0
 800e05c:	2140      	movs	r1, #64	; 0x40
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f000 fbfe 	bl	800e860 <UART_WaitOnFlagUntilTimeout>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e006      	b.n	800e07c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2220      	movs	r2, #32
 800e072:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800e076:	2300      	movs	r3, #0
 800e078:	e000      	b.n	800e07c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800e07a:	2302      	movs	r3, #2
  }
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af02      	add	r7, sp, #8
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	4613      	mov	r3, r2
 800e092:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800e094:	2300      	movs	r3, #0
 800e096:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b20      	cmp	r3, #32
 800e0a2:	f040 8090 	bne.w	800e1c6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <HAL_UART_Receive+0x2e>
 800e0ac:	88fb      	ldrh	r3, [r7, #6]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e088      	b.n	800e1c8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d101      	bne.n	800e0c4 <HAL_UART_Receive+0x40>
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	e081      	b.n	800e1c8 <HAL_UART_Receive+0x144>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2222      	movs	r2, #34	; 0x22
 800e0d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800e0da:	f7fe fb0f 	bl	800c6fc <HAL_GetTick>
 800e0de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	88fa      	ldrh	r2, [r7, #6]
 800e0e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	88fa      	ldrh	r2, [r7, #6]
 800e0ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e0f4:	e05c      	b.n	800e1b0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e10c:	d12b      	bne.n	800e166 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	2200      	movs	r2, #0
 800e116:	2120      	movs	r1, #32
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f000 fba1 	bl	800e860 <UART_WaitOnFlagUntilTimeout>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e04f      	b.n	800e1c8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10c      	bne.n	800e14e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e140:	b29a      	uxth	r2, r3
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	3302      	adds	r3, #2
 800e14a:	60bb      	str	r3, [r7, #8]
 800e14c:	e030      	b.n	800e1b0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	b29b      	uxth	r3, r3
 800e156:	b2db      	uxtb	r3, r3
 800e158:	b29a      	uxth	r2, r3
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	3301      	adds	r3, #1
 800e162:	60bb      	str	r3, [r7, #8]
 800e164:	e024      	b.n	800e1b0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2200      	movs	r2, #0
 800e16e:	2120      	movs	r1, #32
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 fb75 	bl	800e860 <UART_WaitOnFlagUntilTimeout>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e023      	b.n	800e1c8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d108      	bne.n	800e19a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6859      	ldr	r1, [r3, #4]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	60ba      	str	r2, [r7, #8]
 800e194:	b2ca      	uxtb	r2, r1
 800e196:	701a      	strb	r2, [r3, #0]
 800e198:	e00a      	b.n	800e1b0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	1c59      	adds	r1, r3, #1
 800e1a6:	60b9      	str	r1, [r7, #8]
 800e1a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1ac:	b2d2      	uxtb	r2, r2
 800e1ae:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d19d      	bne.n	800e0f6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2220      	movs	r2, #32
 800e1be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e000      	b.n	800e1c8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e1c6:	2302      	movs	r3, #2
  }
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b20      	cmp	r3, #32
 800e1e8:	d140      	bne.n	800e26c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <HAL_UART_Receive_IT+0x26>
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d101      	bne.n	800e1fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e039      	b.n	800e26e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e200:	2b01      	cmp	r3, #1
 800e202:	d101      	bne.n	800e208 <HAL_UART_Receive_IT+0x38>
 800e204:	2302      	movs	r3, #2
 800e206:	e032      	b.n	800e26e <HAL_UART_Receive_IT+0x9e>
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	88fa      	ldrh	r2, [r7, #6]
 800e21a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	88fa      	ldrh	r2, [r7, #6]
 800e220:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2200      	movs	r2, #0
 800e226:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2222      	movs	r2, #34	; 0x22
 800e22c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68da      	ldr	r2, [r3, #12]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e246:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	695a      	ldr	r2, [r3, #20]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f042 0201 	orr.w	r2, r2, #1
 800e256:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68da      	ldr	r2, [r3, #12]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f042 0220 	orr.w	r2, r2, #32
 800e266:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	e000      	b.n	800e26e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e26c:	2302      	movs	r3, #2
  }
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68da      	ldr	r2, [r3, #12]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800e290:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	695a      	ldr	r2, [r3, #20]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f022 0201 	bic.w	r2, r2, #1
 800e2a0:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	695b      	ldr	r3, [r3, #20]
 800e2a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2ac:	2b80      	cmp	r3, #128	; 0x80
 800e2ae:	d124      	bne.n	800e2fa <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	695a      	ldr	r2, [r3, #20]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2be:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d018      	beq.n	800e2fa <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fe fb2e 	bl	800c936 <HAL_DMA_Abort>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00c      	beq.n	800e2fa <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fe fbb8 	bl	800ca5a <HAL_DMA_GetError>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b20      	cmp	r3, #32
 800e2ee:	d104      	bne.n	800e2fa <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2210      	movs	r2, #16
 800e2f4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	e03d      	b.n	800e376 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	695b      	ldr	r3, [r3, #20]
 800e300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e304:	2b40      	cmp	r3, #64	; 0x40
 800e306:	d124      	bne.n	800e352 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	695a      	ldr	r2, [r3, #20]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e316:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d018      	beq.n	800e352 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e324:	2200      	movs	r2, #0
 800e326:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe fb02 	bl	800c936 <HAL_DMA_Abort>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00c      	beq.n	800e352 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fe fb8c 	bl	800ca5a <HAL_DMA_GetError>
 800e342:	4603      	mov	r3, r0
 800e344:	2b20      	cmp	r3, #32
 800e346:	d104      	bne.n	800e352 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2210      	movs	r2, #16
 800e34c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e011      	b.n	800e376 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2220      	movs	r2, #32
 800e368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2220      	movs	r2, #32
 800e370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68da      	ldr	r2, [r3, #12]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e394:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	695a      	ldr	r2, [r3, #20]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f022 0201 	bic.w	r2, r2, #1
 800e3a4:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b0:	2b40      	cmp	r3, #64	; 0x40
 800e3b2:	d124      	bne.n	800e3fe <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	695a      	ldr	r2, [r3, #20]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3c2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d018      	beq.n	800e3fe <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe faac 	bl	800c936 <HAL_DMA_Abort>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00c      	beq.n	800e3fe <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe fb36 	bl	800ca5a <HAL_DMA_GetError>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b20      	cmp	r3, #32
 800e3f2:	d104      	bne.n	800e3fe <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2210      	movs	r2, #16
 800e3f8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	e007      	b.n	800e40e <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2220      	movs	r2, #32
 800e408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
	...

0800e418 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800e420:	2301      	movs	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68da      	ldr	r2, [r3, #12]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800e432:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	695a      	ldr	r2, [r3, #20]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f022 0201 	bic.w	r2, r2, #1
 800e442:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00f      	beq.n	800e46c <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	695b      	ldr	r3, [r3, #20]
 800e452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e456:	2b80      	cmp	r3, #128	; 0x80
 800e458:	d104      	bne.n	800e464 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45e:	4a3e      	ldr	r2, [pc, #248]	; (800e558 <HAL_UART_Abort_IT+0x140>)
 800e460:	651a      	str	r2, [r3, #80]	; 0x50
 800e462:	e003      	b.n	800e46c <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e468:	2200      	movs	r2, #0
 800e46a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00f      	beq.n	800e494 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47e:	2b40      	cmp	r3, #64	; 0x40
 800e480:	d104      	bne.n	800e48c <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e486:	4a35      	ldr	r2, [pc, #212]	; (800e55c <HAL_UART_Abort_IT+0x144>)
 800e488:	651a      	str	r2, [r3, #80]	; 0x50
 800e48a:	e003      	b.n	800e494 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e490:	2200      	movs	r2, #0
 800e492:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e49e:	2b80      	cmp	r3, #128	; 0x80
 800e4a0:	d11a      	bne.n	800e4d8 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	695a      	ldr	r2, [r3, #20]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4b0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00e      	beq.n	800e4d8 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe faa9 	bl	800ca16 <HAL_DMA_Abort_IT>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d004      	beq.n	800e4d4 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	651a      	str	r2, [r3, #80]	; 0x50
 800e4d2:	e001      	b.n	800e4d8 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	695b      	ldr	r3, [r3, #20]
 800e4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4e2:	2b40      	cmp	r3, #64	; 0x40
 800e4e4:	d11c      	bne.n	800e520 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	695a      	ldr	r2, [r3, #20]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d010      	beq.n	800e520 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe fa87 	bl	800ca16 <HAL_DMA_Abort_IT>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d006      	beq.n	800e51c <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e512:	2200      	movs	r2, #0
 800e514:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800e516:	2301      	movs	r3, #1
 800e518:	60fb      	str	r3, [r7, #12]
 800e51a:	e001      	b.n	800e520 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800e51c:	2300      	movs	r3, #0
 800e51e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d113      	bne.n	800e54e <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2220      	movs	r2, #32
 800e53c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2220      	movs	r2, #32
 800e544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f975 	bl	800e838 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	0800e959 	.word	0x0800e959
 800e55c:	0800e9b3 	.word	0x0800e9b3

0800e560 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68da      	ldr	r2, [r3, #12]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e576:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	695a      	ldr	r2, [r3, #20]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f022 0201 	bic.w	r2, r2, #1
 800e586:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	695b      	ldr	r3, [r3, #20]
 800e58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e592:	2b40      	cmp	r3, #64	; 0x40
 800e594:	d12a      	bne.n	800e5ec <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	695a      	ldr	r2, [r3, #20]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5a4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d013      	beq.n	800e5d6 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b2:	4a16      	ldr	r2, [pc, #88]	; (800e60c <HAL_UART_AbortReceive_IT+0xac>)
 800e5b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe fa2b 	bl	800ca16 <HAL_DMA_Abort_IT>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d01c      	beq.n	800e600 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	4798      	blx	r3
 800e5d4:	e014      	b.n	800e600 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2220      	movs	r2, #32
 800e5e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f931 	bl	800e84c <HAL_UART_AbortReceiveCpltCallback>
 800e5ea:	e009      	b.n	800e600 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2220      	movs	r2, #32
 800e5f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f926 	bl	800e84c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	0800ea0d 	.word	0x0800ea0d

0800e610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	695b      	ldr	r3, [r3, #20]
 800e62e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e630:	2300      	movs	r3, #0
 800e632:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e634:	2300      	movs	r3, #0
 800e636:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	f003 030f 	and.w	r3, r3, #15
 800e63e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10d      	bne.n	800e662 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	f003 0320 	and.w	r3, r3, #32
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d008      	beq.n	800e662 <HAL_UART_IRQHandler+0x52>
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	f003 0320 	and.w	r3, r3, #32
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 fa59 	bl	800eb12 <UART_Receive_IT>
      return;
 800e660:	e0d1      	b.n	800e806 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	2b00      	cmp	r3, #0
 800e666:	f000 80b0 	beq.w	800e7ca <HAL_UART_IRQHandler+0x1ba>
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	2b00      	cmp	r3, #0
 800e672:	d105      	bne.n	800e680 <HAL_UART_IRQHandler+0x70>
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 80a5 	beq.w	800e7ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00a      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x90>
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e698:	f043 0201 	orr.w	r2, r3, #1
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	f003 0304 	and.w	r3, r3, #4
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00a      	beq.n	800e6c0 <HAL_UART_IRQHandler+0xb0>
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f003 0301 	and.w	r3, r3, #1
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d005      	beq.n	800e6c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b8:	f043 0202 	orr.w	r2, r3, #2
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	f003 0302 	and.w	r3, r3, #2
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00a      	beq.n	800e6e0 <HAL_UART_IRQHandler+0xd0>
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f003 0301 	and.w	r3, r3, #1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d8:	f043 0204 	orr.w	r2, r3, #4
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	f003 0308 	and.w	r3, r3, #8
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00f      	beq.n	800e70a <HAL_UART_IRQHandler+0xfa>
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	f003 0320 	and.w	r3, r3, #32
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d104      	bne.n	800e6fe <HAL_UART_IRQHandler+0xee>
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e702:	f043 0208 	orr.w	r2, r3, #8
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d078      	beq.n	800e804 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f003 0320 	and.w	r3, r3, #32
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d007      	beq.n	800e72c <HAL_UART_IRQHandler+0x11c>
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 f9f3 	bl	800eb12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e736:	2b40      	cmp	r3, #64	; 0x40
 800e738:	bf0c      	ite	eq
 800e73a:	2301      	moveq	r3, #1
 800e73c:	2300      	movne	r3, #0
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e746:	f003 0308 	and.w	r3, r3, #8
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d102      	bne.n	800e754 <HAL_UART_IRQHandler+0x144>
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d031      	beq.n	800e7b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f8cd 	bl	800e8f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e764:	2b40      	cmp	r3, #64	; 0x40
 800e766:	d123      	bne.n	800e7b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	695a      	ldr	r2, [r3, #20]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e776:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d013      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e784:	4a21      	ldr	r2, [pc, #132]	; (800e80c <HAL_UART_IRQHandler+0x1fc>)
 800e786:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe f942 	bl	800ca16 <HAL_DMA_Abort_IT>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d016      	beq.n	800e7c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7a6:	e00e      	b.n	800e7c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f83b 	bl	800e824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ae:	e00a      	b.n	800e7c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f837 	bl	800e824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b6:	e006      	b.n	800e7c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f833 	bl	800e824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e7c4:	e01e      	b.n	800e804 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7c6:	bf00      	nop
    return;
 800e7c8:	e01c      	b.n	800e804 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d008      	beq.n	800e7e6 <HAL_UART_IRQHandler+0x1d6>
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 f929 	bl	800ea36 <UART_Transmit_IT>
    return;
 800e7e4:	e00f      	b.n	800e806 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00a      	beq.n	800e806 <HAL_UART_IRQHandler+0x1f6>
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d005      	beq.n	800e806 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 f971 	bl	800eae2 <UART_EndTransmit_IT>
    return;
 800e800:	bf00      	nop
 800e802:	e000      	b.n	800e806 <HAL_UART_IRQHandler+0x1f6>
    return;
 800e804:	bf00      	nop
  }
}
 800e806:	3720      	adds	r7, #32
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	0800e931 	.word	0x0800e931

0800e810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	603b      	str	r3, [r7, #0]
 800e86c:	4613      	mov	r3, r2
 800e86e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e870:	e02c      	b.n	800e8cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e878:	d028      	beq.n	800e8cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d007      	beq.n	800e890 <UART_WaitOnFlagUntilTimeout+0x30>
 800e880:	f7fd ff3c 	bl	800c6fc <HAL_GetTick>
 800e884:	4602      	mov	r2, r0
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	69ba      	ldr	r2, [r7, #24]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d21d      	bcs.n	800e8cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	68da      	ldr	r2, [r3, #12]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e89e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	695a      	ldr	r2, [r3, #20]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f022 0201 	bic.w	r2, r2, #1
 800e8ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2220      	movs	r2, #32
 800e8b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2220      	movs	r2, #32
 800e8bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	e00f      	b.n	800e8ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	bf0c      	ite	eq
 800e8dc:	2301      	moveq	r3, #1
 800e8de:	2300      	movne	r3, #0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	79fb      	ldrb	r3, [r7, #7]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d0c3      	beq.n	800e872 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	68da      	ldr	r2, [r3, #12]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e90a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f022 0201 	bic.w	r2, r2, #1
 800e91a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2220      	movs	r2, #32
 800e920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f7ff ff6a 	bl	800e824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e950:	bf00      	nop
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e964:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e96a:	2200      	movs	r2, #0
 800e96c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e972:	2b00      	cmp	r3, #0
 800e974:	d004      	beq.n	800e980 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d114      	bne.n	800e9aa <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2200      	movs	r2, #0
 800e98a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2220      	movs	r2, #32
 800e996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2220      	movs	r2, #32
 800e99e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f7ff ff48 	bl	800e838 <HAL_UART_AbortCpltCallback>
 800e9a8:	e000      	b.n	800e9ac <UART_DMATxAbortCallback+0x54>
      return;
 800e9aa:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b084      	sub	sp, #16
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9be:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d004      	beq.n	800e9da <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d114      	bne.n	800ea04 <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2220      	movs	r2, #32
 800e9f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2220      	movs	r2, #32
 800e9f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f7ff ff1b 	bl	800e838 <HAL_UART_AbortCpltCallback>
 800ea02:	e000      	b.n	800ea06 <UART_DMARxAbortCallback+0x54>
      return;
 800ea04:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea18:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2220      	movs	r2, #32
 800ea24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f7ff ff0f 	bl	800e84c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea2e:	bf00      	nop
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b085      	sub	sp, #20
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2b21      	cmp	r3, #33	; 0x21
 800ea48:	d144      	bne.n	800ead4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea52:	d11a      	bne.n	800ea8a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	881b      	ldrh	r3, [r3, #0]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea68:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d105      	bne.n	800ea7e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	1c9a      	adds	r2, r3, #2
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	621a      	str	r2, [r3, #32]
 800ea7c:	e00e      	b.n	800ea9c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	1c5a      	adds	r2, r3, #1
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	621a      	str	r2, [r3, #32]
 800ea88:	e008      	b.n	800ea9c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	1c59      	adds	r1, r3, #1
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	6211      	str	r1, [r2, #32]
 800ea94:	781a      	ldrb	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d10f      	bne.n	800ead0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	68da      	ldr	r2, [r3, #12]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eabe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	68da      	ldr	r2, [r3, #12]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eace:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	e000      	b.n	800ead6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ead4:	2302      	movs	r3, #2
  }
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b082      	sub	sp, #8
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68da      	ldr	r2, [r3, #12]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2220      	movs	r2, #32
 800eafe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff fe84 	bl	800e810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b084      	sub	sp, #16
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b22      	cmp	r3, #34	; 0x22
 800eb24:	d171      	bne.n	800ec0a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb2e:	d123      	bne.n	800eb78 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb34:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d10e      	bne.n	800eb5c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb54:	1c9a      	adds	r2, r3, #2
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	629a      	str	r2, [r3, #40]	; 0x28
 800eb5a:	e029      	b.n	800ebb0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb70:	1c5a      	adds	r2, r3, #1
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	629a      	str	r2, [r3, #40]	; 0x28
 800eb76:	e01b      	b.n	800ebb0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10a      	bne.n	800eb96 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6858      	ldr	r0, [r3, #4]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8a:	1c59      	adds	r1, r3, #1
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	6291      	str	r1, [r2, #40]	; 0x28
 800eb90:	b2c2      	uxtb	r2, r0
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	e00c      	b.n	800ebb0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	b2da      	uxtb	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba2:	1c58      	adds	r0, r3, #1
 800eba4:	6879      	ldr	r1, [r7, #4]
 800eba6:	6288      	str	r0, [r1, #40]	; 0x28
 800eba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ebac:	b2d2      	uxtb	r2, r2
 800ebae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d120      	bne.n	800ec06 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f022 0220 	bic.w	r2, r2, #32
 800ebd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68da      	ldr	r2, [r3, #12]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ebe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	695a      	ldr	r2, [r3, #20]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f022 0201 	bic.w	r2, r2, #1
 800ebf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2220      	movs	r2, #32
 800ebf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7fd fc51 	bl	800c4a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	e002      	b.n	800ec0c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	e000      	b.n	800ec0c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ec0a:	2302      	movs	r3, #2
  }
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec18:	b085      	sub	sp, #20
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68da      	ldr	r2, [r3, #12]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	430a      	orrs	r2, r1
 800ec32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	431a      	orrs	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	69db      	ldr	r3, [r3, #28]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ec56:	f023 030c 	bic.w	r3, r3, #12
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	6812      	ldr	r2, [r2, #0]
 800ec5e:	68f9      	ldr	r1, [r7, #12]
 800ec60:	430b      	orrs	r3, r1
 800ec62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	695b      	ldr	r3, [r3, #20]
 800ec6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	699a      	ldr	r2, [r3, #24]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	430a      	orrs	r2, r1
 800ec78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec82:	f040 818b 	bne.w	800ef9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4ac1      	ldr	r2, [pc, #772]	; (800ef90 <UART_SetConfig+0x37c>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d005      	beq.n	800ec9c <UART_SetConfig+0x88>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4abf      	ldr	r2, [pc, #764]	; (800ef94 <UART_SetConfig+0x380>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	f040 80bd 	bne.w	800ee16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ec9c:	f7fe ffe6 	bl	800dc6c <HAL_RCC_GetPCLK2Freq>
 800eca0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	461d      	mov	r5, r3
 800eca6:	f04f 0600 	mov.w	r6, #0
 800ecaa:	46a8      	mov	r8, r5
 800ecac:	46b1      	mov	r9, r6
 800ecae:	eb18 0308 	adds.w	r3, r8, r8
 800ecb2:	eb49 0409 	adc.w	r4, r9, r9
 800ecb6:	4698      	mov	r8, r3
 800ecb8:	46a1      	mov	r9, r4
 800ecba:	eb18 0805 	adds.w	r8, r8, r5
 800ecbe:	eb49 0906 	adc.w	r9, r9, r6
 800ecc2:	f04f 0100 	mov.w	r1, #0
 800ecc6:	f04f 0200 	mov.w	r2, #0
 800ecca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ecce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ecd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ecd6:	4688      	mov	r8, r1
 800ecd8:	4691      	mov	r9, r2
 800ecda:	eb18 0005 	adds.w	r0, r8, r5
 800ecde:	eb49 0106 	adc.w	r1, r9, r6
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	461d      	mov	r5, r3
 800ece8:	f04f 0600 	mov.w	r6, #0
 800ecec:	196b      	adds	r3, r5, r5
 800ecee:	eb46 0406 	adc.w	r4, r6, r6
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	4623      	mov	r3, r4
 800ecf6:	f7f1 fac3 	bl	8000280 <__aeabi_uldivmod>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	460c      	mov	r4, r1
 800ecfe:	461a      	mov	r2, r3
 800ed00:	4ba5      	ldr	r3, [pc, #660]	; (800ef98 <UART_SetConfig+0x384>)
 800ed02:	fba3 2302 	umull	r2, r3, r3, r2
 800ed06:	095b      	lsrs	r3, r3, #5
 800ed08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	461d      	mov	r5, r3
 800ed10:	f04f 0600 	mov.w	r6, #0
 800ed14:	46a9      	mov	r9, r5
 800ed16:	46b2      	mov	sl, r6
 800ed18:	eb19 0309 	adds.w	r3, r9, r9
 800ed1c:	eb4a 040a 	adc.w	r4, sl, sl
 800ed20:	4699      	mov	r9, r3
 800ed22:	46a2      	mov	sl, r4
 800ed24:	eb19 0905 	adds.w	r9, r9, r5
 800ed28:	eb4a 0a06 	adc.w	sl, sl, r6
 800ed2c:	f04f 0100 	mov.w	r1, #0
 800ed30:	f04f 0200 	mov.w	r2, #0
 800ed34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed40:	4689      	mov	r9, r1
 800ed42:	4692      	mov	sl, r2
 800ed44:	eb19 0005 	adds.w	r0, r9, r5
 800ed48:	eb4a 0106 	adc.w	r1, sl, r6
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	461d      	mov	r5, r3
 800ed52:	f04f 0600 	mov.w	r6, #0
 800ed56:	196b      	adds	r3, r5, r5
 800ed58:	eb46 0406 	adc.w	r4, r6, r6
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	4623      	mov	r3, r4
 800ed60:	f7f1 fa8e 	bl	8000280 <__aeabi_uldivmod>
 800ed64:	4603      	mov	r3, r0
 800ed66:	460c      	mov	r4, r1
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4b8b      	ldr	r3, [pc, #556]	; (800ef98 <UART_SetConfig+0x384>)
 800ed6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ed70:	095b      	lsrs	r3, r3, #5
 800ed72:	2164      	movs	r1, #100	; 0x64
 800ed74:	fb01 f303 	mul.w	r3, r1, r3
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	00db      	lsls	r3, r3, #3
 800ed7c:	3332      	adds	r3, #50	; 0x32
 800ed7e:	4a86      	ldr	r2, [pc, #536]	; (800ef98 <UART_SetConfig+0x384>)
 800ed80:	fba2 2303 	umull	r2, r3, r2, r3
 800ed84:	095b      	lsrs	r3, r3, #5
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ed8c:	4498      	add	r8, r3
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	461d      	mov	r5, r3
 800ed92:	f04f 0600 	mov.w	r6, #0
 800ed96:	46a9      	mov	r9, r5
 800ed98:	46b2      	mov	sl, r6
 800ed9a:	eb19 0309 	adds.w	r3, r9, r9
 800ed9e:	eb4a 040a 	adc.w	r4, sl, sl
 800eda2:	4699      	mov	r9, r3
 800eda4:	46a2      	mov	sl, r4
 800eda6:	eb19 0905 	adds.w	r9, r9, r5
 800edaa:	eb4a 0a06 	adc.w	sl, sl, r6
 800edae:	f04f 0100 	mov.w	r1, #0
 800edb2:	f04f 0200 	mov.w	r2, #0
 800edb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800edba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800edbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800edc2:	4689      	mov	r9, r1
 800edc4:	4692      	mov	sl, r2
 800edc6:	eb19 0005 	adds.w	r0, r9, r5
 800edca:	eb4a 0106 	adc.w	r1, sl, r6
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	461d      	mov	r5, r3
 800edd4:	f04f 0600 	mov.w	r6, #0
 800edd8:	196b      	adds	r3, r5, r5
 800edda:	eb46 0406 	adc.w	r4, r6, r6
 800edde:	461a      	mov	r2, r3
 800ede0:	4623      	mov	r3, r4
 800ede2:	f7f1 fa4d 	bl	8000280 <__aeabi_uldivmod>
 800ede6:	4603      	mov	r3, r0
 800ede8:	460c      	mov	r4, r1
 800edea:	461a      	mov	r2, r3
 800edec:	4b6a      	ldr	r3, [pc, #424]	; (800ef98 <UART_SetConfig+0x384>)
 800edee:	fba3 1302 	umull	r1, r3, r3, r2
 800edf2:	095b      	lsrs	r3, r3, #5
 800edf4:	2164      	movs	r1, #100	; 0x64
 800edf6:	fb01 f303 	mul.w	r3, r1, r3
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	00db      	lsls	r3, r3, #3
 800edfe:	3332      	adds	r3, #50	; 0x32
 800ee00:	4a65      	ldr	r2, [pc, #404]	; (800ef98 <UART_SetConfig+0x384>)
 800ee02:	fba2 2303 	umull	r2, r3, r2, r3
 800ee06:	095b      	lsrs	r3, r3, #5
 800ee08:	f003 0207 	and.w	r2, r3, #7
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4442      	add	r2, r8
 800ee12:	609a      	str	r2, [r3, #8]
 800ee14:	e26f      	b.n	800f2f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ee16:	f7fe ff15 	bl	800dc44 <HAL_RCC_GetPCLK1Freq>
 800ee1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	461d      	mov	r5, r3
 800ee20:	f04f 0600 	mov.w	r6, #0
 800ee24:	46a8      	mov	r8, r5
 800ee26:	46b1      	mov	r9, r6
 800ee28:	eb18 0308 	adds.w	r3, r8, r8
 800ee2c:	eb49 0409 	adc.w	r4, r9, r9
 800ee30:	4698      	mov	r8, r3
 800ee32:	46a1      	mov	r9, r4
 800ee34:	eb18 0805 	adds.w	r8, r8, r5
 800ee38:	eb49 0906 	adc.w	r9, r9, r6
 800ee3c:	f04f 0100 	mov.w	r1, #0
 800ee40:	f04f 0200 	mov.w	r2, #0
 800ee44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ee48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ee4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ee50:	4688      	mov	r8, r1
 800ee52:	4691      	mov	r9, r2
 800ee54:	eb18 0005 	adds.w	r0, r8, r5
 800ee58:	eb49 0106 	adc.w	r1, r9, r6
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	461d      	mov	r5, r3
 800ee62:	f04f 0600 	mov.w	r6, #0
 800ee66:	196b      	adds	r3, r5, r5
 800ee68:	eb46 0406 	adc.w	r4, r6, r6
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4623      	mov	r3, r4
 800ee70:	f7f1 fa06 	bl	8000280 <__aeabi_uldivmod>
 800ee74:	4603      	mov	r3, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	461a      	mov	r2, r3
 800ee7a:	4b47      	ldr	r3, [pc, #284]	; (800ef98 <UART_SetConfig+0x384>)
 800ee7c:	fba3 2302 	umull	r2, r3, r3, r2
 800ee80:	095b      	lsrs	r3, r3, #5
 800ee82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	461d      	mov	r5, r3
 800ee8a:	f04f 0600 	mov.w	r6, #0
 800ee8e:	46a9      	mov	r9, r5
 800ee90:	46b2      	mov	sl, r6
 800ee92:	eb19 0309 	adds.w	r3, r9, r9
 800ee96:	eb4a 040a 	adc.w	r4, sl, sl
 800ee9a:	4699      	mov	r9, r3
 800ee9c:	46a2      	mov	sl, r4
 800ee9e:	eb19 0905 	adds.w	r9, r9, r5
 800eea2:	eb4a 0a06 	adc.w	sl, sl, r6
 800eea6:	f04f 0100 	mov.w	r1, #0
 800eeaa:	f04f 0200 	mov.w	r2, #0
 800eeae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eeb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eeb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eeba:	4689      	mov	r9, r1
 800eebc:	4692      	mov	sl, r2
 800eebe:	eb19 0005 	adds.w	r0, r9, r5
 800eec2:	eb4a 0106 	adc.w	r1, sl, r6
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	461d      	mov	r5, r3
 800eecc:	f04f 0600 	mov.w	r6, #0
 800eed0:	196b      	adds	r3, r5, r5
 800eed2:	eb46 0406 	adc.w	r4, r6, r6
 800eed6:	461a      	mov	r2, r3
 800eed8:	4623      	mov	r3, r4
 800eeda:	f7f1 f9d1 	bl	8000280 <__aeabi_uldivmod>
 800eede:	4603      	mov	r3, r0
 800eee0:	460c      	mov	r4, r1
 800eee2:	461a      	mov	r2, r3
 800eee4:	4b2c      	ldr	r3, [pc, #176]	; (800ef98 <UART_SetConfig+0x384>)
 800eee6:	fba3 1302 	umull	r1, r3, r3, r2
 800eeea:	095b      	lsrs	r3, r3, #5
 800eeec:	2164      	movs	r1, #100	; 0x64
 800eeee:	fb01 f303 	mul.w	r3, r1, r3
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	3332      	adds	r3, #50	; 0x32
 800eef8:	4a27      	ldr	r2, [pc, #156]	; (800ef98 <UART_SetConfig+0x384>)
 800eefa:	fba2 2303 	umull	r2, r3, r2, r3
 800eefe:	095b      	lsrs	r3, r3, #5
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef06:	4498      	add	r8, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	461d      	mov	r5, r3
 800ef0c:	f04f 0600 	mov.w	r6, #0
 800ef10:	46a9      	mov	r9, r5
 800ef12:	46b2      	mov	sl, r6
 800ef14:	eb19 0309 	adds.w	r3, r9, r9
 800ef18:	eb4a 040a 	adc.w	r4, sl, sl
 800ef1c:	4699      	mov	r9, r3
 800ef1e:	46a2      	mov	sl, r4
 800ef20:	eb19 0905 	adds.w	r9, r9, r5
 800ef24:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef28:	f04f 0100 	mov.w	r1, #0
 800ef2c:	f04f 0200 	mov.w	r2, #0
 800ef30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef3c:	4689      	mov	r9, r1
 800ef3e:	4692      	mov	sl, r2
 800ef40:	eb19 0005 	adds.w	r0, r9, r5
 800ef44:	eb4a 0106 	adc.w	r1, sl, r6
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	461d      	mov	r5, r3
 800ef4e:	f04f 0600 	mov.w	r6, #0
 800ef52:	196b      	adds	r3, r5, r5
 800ef54:	eb46 0406 	adc.w	r4, r6, r6
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4623      	mov	r3, r4
 800ef5c:	f7f1 f990 	bl	8000280 <__aeabi_uldivmod>
 800ef60:	4603      	mov	r3, r0
 800ef62:	460c      	mov	r4, r1
 800ef64:	461a      	mov	r2, r3
 800ef66:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <UART_SetConfig+0x384>)
 800ef68:	fba3 1302 	umull	r1, r3, r3, r2
 800ef6c:	095b      	lsrs	r3, r3, #5
 800ef6e:	2164      	movs	r1, #100	; 0x64
 800ef70:	fb01 f303 	mul.w	r3, r1, r3
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	00db      	lsls	r3, r3, #3
 800ef78:	3332      	adds	r3, #50	; 0x32
 800ef7a:	4a07      	ldr	r2, [pc, #28]	; (800ef98 <UART_SetConfig+0x384>)
 800ef7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef80:	095b      	lsrs	r3, r3, #5
 800ef82:	f003 0207 	and.w	r2, r3, #7
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4442      	add	r2, r8
 800ef8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ef8e:	e1b2      	b.n	800f2f6 <UART_SetConfig+0x6e2>
 800ef90:	40011000 	.word	0x40011000
 800ef94:	40011400 	.word	0x40011400
 800ef98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4ad7      	ldr	r2, [pc, #860]	; (800f300 <UART_SetConfig+0x6ec>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d005      	beq.n	800efb2 <UART_SetConfig+0x39e>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4ad6      	ldr	r2, [pc, #856]	; (800f304 <UART_SetConfig+0x6f0>)
 800efac:	4293      	cmp	r3, r2
 800efae:	f040 80d1 	bne.w	800f154 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800efb2:	f7fe fe5b 	bl	800dc6c <HAL_RCC_GetPCLK2Freq>
 800efb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	469a      	mov	sl, r3
 800efbc:	f04f 0b00 	mov.w	fp, #0
 800efc0:	46d0      	mov	r8, sl
 800efc2:	46d9      	mov	r9, fp
 800efc4:	eb18 0308 	adds.w	r3, r8, r8
 800efc8:	eb49 0409 	adc.w	r4, r9, r9
 800efcc:	4698      	mov	r8, r3
 800efce:	46a1      	mov	r9, r4
 800efd0:	eb18 080a 	adds.w	r8, r8, sl
 800efd4:	eb49 090b 	adc.w	r9, r9, fp
 800efd8:	f04f 0100 	mov.w	r1, #0
 800efdc:	f04f 0200 	mov.w	r2, #0
 800efe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800efe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800efe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800efec:	4688      	mov	r8, r1
 800efee:	4691      	mov	r9, r2
 800eff0:	eb1a 0508 	adds.w	r5, sl, r8
 800eff4:	eb4b 0609 	adc.w	r6, fp, r9
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	4619      	mov	r1, r3
 800effe:	f04f 0200 	mov.w	r2, #0
 800f002:	f04f 0300 	mov.w	r3, #0
 800f006:	f04f 0400 	mov.w	r4, #0
 800f00a:	0094      	lsls	r4, r2, #2
 800f00c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f010:	008b      	lsls	r3, r1, #2
 800f012:	461a      	mov	r2, r3
 800f014:	4623      	mov	r3, r4
 800f016:	4628      	mov	r0, r5
 800f018:	4631      	mov	r1, r6
 800f01a:	f7f1 f931 	bl	8000280 <__aeabi_uldivmod>
 800f01e:	4603      	mov	r3, r0
 800f020:	460c      	mov	r4, r1
 800f022:	461a      	mov	r2, r3
 800f024:	4bb8      	ldr	r3, [pc, #736]	; (800f308 <UART_SetConfig+0x6f4>)
 800f026:	fba3 2302 	umull	r2, r3, r3, r2
 800f02a:	095b      	lsrs	r3, r3, #5
 800f02c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	469b      	mov	fp, r3
 800f034:	f04f 0c00 	mov.w	ip, #0
 800f038:	46d9      	mov	r9, fp
 800f03a:	46e2      	mov	sl, ip
 800f03c:	eb19 0309 	adds.w	r3, r9, r9
 800f040:	eb4a 040a 	adc.w	r4, sl, sl
 800f044:	4699      	mov	r9, r3
 800f046:	46a2      	mov	sl, r4
 800f048:	eb19 090b 	adds.w	r9, r9, fp
 800f04c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f050:	f04f 0100 	mov.w	r1, #0
 800f054:	f04f 0200 	mov.w	r2, #0
 800f058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f05c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f064:	4689      	mov	r9, r1
 800f066:	4692      	mov	sl, r2
 800f068:	eb1b 0509 	adds.w	r5, fp, r9
 800f06c:	eb4c 060a 	adc.w	r6, ip, sl
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	4619      	mov	r1, r3
 800f076:	f04f 0200 	mov.w	r2, #0
 800f07a:	f04f 0300 	mov.w	r3, #0
 800f07e:	f04f 0400 	mov.w	r4, #0
 800f082:	0094      	lsls	r4, r2, #2
 800f084:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f088:	008b      	lsls	r3, r1, #2
 800f08a:	461a      	mov	r2, r3
 800f08c:	4623      	mov	r3, r4
 800f08e:	4628      	mov	r0, r5
 800f090:	4631      	mov	r1, r6
 800f092:	f7f1 f8f5 	bl	8000280 <__aeabi_uldivmod>
 800f096:	4603      	mov	r3, r0
 800f098:	460c      	mov	r4, r1
 800f09a:	461a      	mov	r2, r3
 800f09c:	4b9a      	ldr	r3, [pc, #616]	; (800f308 <UART_SetConfig+0x6f4>)
 800f09e:	fba3 1302 	umull	r1, r3, r3, r2
 800f0a2:	095b      	lsrs	r3, r3, #5
 800f0a4:	2164      	movs	r1, #100	; 0x64
 800f0a6:	fb01 f303 	mul.w	r3, r1, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	011b      	lsls	r3, r3, #4
 800f0ae:	3332      	adds	r3, #50	; 0x32
 800f0b0:	4a95      	ldr	r2, [pc, #596]	; (800f308 <UART_SetConfig+0x6f4>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	095b      	lsrs	r3, r3, #5
 800f0b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0bc:	4498      	add	r8, r3
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	469b      	mov	fp, r3
 800f0c2:	f04f 0c00 	mov.w	ip, #0
 800f0c6:	46d9      	mov	r9, fp
 800f0c8:	46e2      	mov	sl, ip
 800f0ca:	eb19 0309 	adds.w	r3, r9, r9
 800f0ce:	eb4a 040a 	adc.w	r4, sl, sl
 800f0d2:	4699      	mov	r9, r3
 800f0d4:	46a2      	mov	sl, r4
 800f0d6:	eb19 090b 	adds.w	r9, r9, fp
 800f0da:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f0de:	f04f 0100 	mov.w	r1, #0
 800f0e2:	f04f 0200 	mov.w	r2, #0
 800f0e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f0f2:	4689      	mov	r9, r1
 800f0f4:	4692      	mov	sl, r2
 800f0f6:	eb1b 0509 	adds.w	r5, fp, r9
 800f0fa:	eb4c 060a 	adc.w	r6, ip, sl
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	4619      	mov	r1, r3
 800f104:	f04f 0200 	mov.w	r2, #0
 800f108:	f04f 0300 	mov.w	r3, #0
 800f10c:	f04f 0400 	mov.w	r4, #0
 800f110:	0094      	lsls	r4, r2, #2
 800f112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f116:	008b      	lsls	r3, r1, #2
 800f118:	461a      	mov	r2, r3
 800f11a:	4623      	mov	r3, r4
 800f11c:	4628      	mov	r0, r5
 800f11e:	4631      	mov	r1, r6
 800f120:	f7f1 f8ae 	bl	8000280 <__aeabi_uldivmod>
 800f124:	4603      	mov	r3, r0
 800f126:	460c      	mov	r4, r1
 800f128:	461a      	mov	r2, r3
 800f12a:	4b77      	ldr	r3, [pc, #476]	; (800f308 <UART_SetConfig+0x6f4>)
 800f12c:	fba3 1302 	umull	r1, r3, r3, r2
 800f130:	095b      	lsrs	r3, r3, #5
 800f132:	2164      	movs	r1, #100	; 0x64
 800f134:	fb01 f303 	mul.w	r3, r1, r3
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	011b      	lsls	r3, r3, #4
 800f13c:	3332      	adds	r3, #50	; 0x32
 800f13e:	4a72      	ldr	r2, [pc, #456]	; (800f308 <UART_SetConfig+0x6f4>)
 800f140:	fba2 2303 	umull	r2, r3, r2, r3
 800f144:	095b      	lsrs	r3, r3, #5
 800f146:	f003 020f 	and.w	r2, r3, #15
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4442      	add	r2, r8
 800f150:	609a      	str	r2, [r3, #8]
 800f152:	e0d0      	b.n	800f2f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f154:	f7fe fd76 	bl	800dc44 <HAL_RCC_GetPCLK1Freq>
 800f158:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	469a      	mov	sl, r3
 800f15e:	f04f 0b00 	mov.w	fp, #0
 800f162:	46d0      	mov	r8, sl
 800f164:	46d9      	mov	r9, fp
 800f166:	eb18 0308 	adds.w	r3, r8, r8
 800f16a:	eb49 0409 	adc.w	r4, r9, r9
 800f16e:	4698      	mov	r8, r3
 800f170:	46a1      	mov	r9, r4
 800f172:	eb18 080a 	adds.w	r8, r8, sl
 800f176:	eb49 090b 	adc.w	r9, r9, fp
 800f17a:	f04f 0100 	mov.w	r1, #0
 800f17e:	f04f 0200 	mov.w	r2, #0
 800f182:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f186:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f18a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f18e:	4688      	mov	r8, r1
 800f190:	4691      	mov	r9, r2
 800f192:	eb1a 0508 	adds.w	r5, sl, r8
 800f196:	eb4b 0609 	adc.w	r6, fp, r9
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	f04f 0200 	mov.w	r2, #0
 800f1a4:	f04f 0300 	mov.w	r3, #0
 800f1a8:	f04f 0400 	mov.w	r4, #0
 800f1ac:	0094      	lsls	r4, r2, #2
 800f1ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1b2:	008b      	lsls	r3, r1, #2
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	4623      	mov	r3, r4
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	f7f1 f860 	bl	8000280 <__aeabi_uldivmod>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	4b50      	ldr	r3, [pc, #320]	; (800f308 <UART_SetConfig+0x6f4>)
 800f1c8:	fba3 2302 	umull	r2, r3, r3, r2
 800f1cc:	095b      	lsrs	r3, r3, #5
 800f1ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	469b      	mov	fp, r3
 800f1d6:	f04f 0c00 	mov.w	ip, #0
 800f1da:	46d9      	mov	r9, fp
 800f1dc:	46e2      	mov	sl, ip
 800f1de:	eb19 0309 	adds.w	r3, r9, r9
 800f1e2:	eb4a 040a 	adc.w	r4, sl, sl
 800f1e6:	4699      	mov	r9, r3
 800f1e8:	46a2      	mov	sl, r4
 800f1ea:	eb19 090b 	adds.w	r9, r9, fp
 800f1ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f1f2:	f04f 0100 	mov.w	r1, #0
 800f1f6:	f04f 0200 	mov.w	r2, #0
 800f1fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f206:	4689      	mov	r9, r1
 800f208:	4692      	mov	sl, r2
 800f20a:	eb1b 0509 	adds.w	r5, fp, r9
 800f20e:	eb4c 060a 	adc.w	r6, ip, sl
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	4619      	mov	r1, r3
 800f218:	f04f 0200 	mov.w	r2, #0
 800f21c:	f04f 0300 	mov.w	r3, #0
 800f220:	f04f 0400 	mov.w	r4, #0
 800f224:	0094      	lsls	r4, r2, #2
 800f226:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f22a:	008b      	lsls	r3, r1, #2
 800f22c:	461a      	mov	r2, r3
 800f22e:	4623      	mov	r3, r4
 800f230:	4628      	mov	r0, r5
 800f232:	4631      	mov	r1, r6
 800f234:	f7f1 f824 	bl	8000280 <__aeabi_uldivmod>
 800f238:	4603      	mov	r3, r0
 800f23a:	460c      	mov	r4, r1
 800f23c:	461a      	mov	r2, r3
 800f23e:	4b32      	ldr	r3, [pc, #200]	; (800f308 <UART_SetConfig+0x6f4>)
 800f240:	fba3 1302 	umull	r1, r3, r3, r2
 800f244:	095b      	lsrs	r3, r3, #5
 800f246:	2164      	movs	r1, #100	; 0x64
 800f248:	fb01 f303 	mul.w	r3, r1, r3
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	011b      	lsls	r3, r3, #4
 800f250:	3332      	adds	r3, #50	; 0x32
 800f252:	4a2d      	ldr	r2, [pc, #180]	; (800f308 <UART_SetConfig+0x6f4>)
 800f254:	fba2 2303 	umull	r2, r3, r2, r3
 800f258:	095b      	lsrs	r3, r3, #5
 800f25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f25e:	4498      	add	r8, r3
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	469b      	mov	fp, r3
 800f264:	f04f 0c00 	mov.w	ip, #0
 800f268:	46d9      	mov	r9, fp
 800f26a:	46e2      	mov	sl, ip
 800f26c:	eb19 0309 	adds.w	r3, r9, r9
 800f270:	eb4a 040a 	adc.w	r4, sl, sl
 800f274:	4699      	mov	r9, r3
 800f276:	46a2      	mov	sl, r4
 800f278:	eb19 090b 	adds.w	r9, r9, fp
 800f27c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f280:	f04f 0100 	mov.w	r1, #0
 800f284:	f04f 0200 	mov.w	r2, #0
 800f288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f28c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f290:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f294:	4689      	mov	r9, r1
 800f296:	4692      	mov	sl, r2
 800f298:	eb1b 0509 	adds.w	r5, fp, r9
 800f29c:	eb4c 060a 	adc.w	r6, ip, sl
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	f04f 0200 	mov.w	r2, #0
 800f2aa:	f04f 0300 	mov.w	r3, #0
 800f2ae:	f04f 0400 	mov.w	r4, #0
 800f2b2:	0094      	lsls	r4, r2, #2
 800f2b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2b8:	008b      	lsls	r3, r1, #2
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4623      	mov	r3, r4
 800f2be:	4628      	mov	r0, r5
 800f2c0:	4631      	mov	r1, r6
 800f2c2:	f7f0 ffdd 	bl	8000280 <__aeabi_uldivmod>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	4b0e      	ldr	r3, [pc, #56]	; (800f308 <UART_SetConfig+0x6f4>)
 800f2ce:	fba3 1302 	umull	r1, r3, r3, r2
 800f2d2:	095b      	lsrs	r3, r3, #5
 800f2d4:	2164      	movs	r1, #100	; 0x64
 800f2d6:	fb01 f303 	mul.w	r3, r1, r3
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	011b      	lsls	r3, r3, #4
 800f2de:	3332      	adds	r3, #50	; 0x32
 800f2e0:	4a09      	ldr	r2, [pc, #36]	; (800f308 <UART_SetConfig+0x6f4>)
 800f2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2e6:	095b      	lsrs	r3, r3, #5
 800f2e8:	f003 020f 	and.w	r2, r3, #15
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4442      	add	r2, r8
 800f2f2:	609a      	str	r2, [r3, #8]
}
 800f2f4:	e7ff      	b.n	800f2f6 <UART_SetConfig+0x6e2>
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f300:	40011000 	.word	0x40011000
 800f304:	40011400 	.word	0x40011400
 800f308:	51eb851f 	.word	0x51eb851f

0800f30c <__assert_func>:
 800f30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f30e:	461c      	mov	r4, r3
 800f310:	4b09      	ldr	r3, [pc, #36]	; (800f338 <__assert_func+0x2c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4605      	mov	r5, r0
 800f316:	68d8      	ldr	r0, [r3, #12]
 800f318:	b152      	cbz	r2, 800f330 <__assert_func+0x24>
 800f31a:	4b08      	ldr	r3, [pc, #32]	; (800f33c <__assert_func+0x30>)
 800f31c:	9100      	str	r1, [sp, #0]
 800f31e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f322:	4907      	ldr	r1, [pc, #28]	; (800f340 <__assert_func+0x34>)
 800f324:	462b      	mov	r3, r5
 800f326:	4622      	mov	r2, r4
 800f328:	f000 f814 	bl	800f354 <fiprintf>
 800f32c:	f000 fe66 	bl	800fffc <abort>
 800f330:	4b04      	ldr	r3, [pc, #16]	; (800f344 <__assert_func+0x38>)
 800f332:	461a      	mov	r2, r3
 800f334:	e7f2      	b.n	800f31c <__assert_func+0x10>
 800f336:	bf00      	nop
 800f338:	200002cc 	.word	0x200002cc
 800f33c:	08011e78 	.word	0x08011e78
 800f340:	08011e85 	.word	0x08011e85
 800f344:	08011eb3 	.word	0x08011eb3

0800f348 <__errno>:
 800f348:	4b01      	ldr	r3, [pc, #4]	; (800f350 <__errno+0x8>)
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	200002cc 	.word	0x200002cc

0800f354 <fiprintf>:
 800f354:	b40e      	push	{r1, r2, r3}
 800f356:	b503      	push	{r0, r1, lr}
 800f358:	4601      	mov	r1, r0
 800f35a:	ab03      	add	r3, sp, #12
 800f35c:	4805      	ldr	r0, [pc, #20]	; (800f374 <fiprintf+0x20>)
 800f35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f362:	6800      	ldr	r0, [r0, #0]
 800f364:	9301      	str	r3, [sp, #4]
 800f366:	f000 f953 	bl	800f610 <_vfiprintf_r>
 800f36a:	b002      	add	sp, #8
 800f36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f370:	b003      	add	sp, #12
 800f372:	4770      	bx	lr
 800f374:	200002cc 	.word	0x200002cc

0800f378 <__libc_init_array>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	4e0d      	ldr	r6, [pc, #52]	; (800f3b0 <__libc_init_array+0x38>)
 800f37c:	4c0d      	ldr	r4, [pc, #52]	; (800f3b4 <__libc_init_array+0x3c>)
 800f37e:	1ba4      	subs	r4, r4, r6
 800f380:	10a4      	asrs	r4, r4, #2
 800f382:	2500      	movs	r5, #0
 800f384:	42a5      	cmp	r5, r4
 800f386:	d109      	bne.n	800f39c <__libc_init_array+0x24>
 800f388:	4e0b      	ldr	r6, [pc, #44]	; (800f3b8 <__libc_init_array+0x40>)
 800f38a:	4c0c      	ldr	r4, [pc, #48]	; (800f3bc <__libc_init_array+0x44>)
 800f38c:	f001 faa8 	bl	80108e0 <_init>
 800f390:	1ba4      	subs	r4, r4, r6
 800f392:	10a4      	asrs	r4, r4, #2
 800f394:	2500      	movs	r5, #0
 800f396:	42a5      	cmp	r5, r4
 800f398:	d105      	bne.n	800f3a6 <__libc_init_array+0x2e>
 800f39a:	bd70      	pop	{r4, r5, r6, pc}
 800f39c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f3a0:	4798      	blx	r3
 800f3a2:	3501      	adds	r5, #1
 800f3a4:	e7ee      	b.n	800f384 <__libc_init_array+0xc>
 800f3a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f3aa:	4798      	blx	r3
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	e7f2      	b.n	800f396 <__libc_init_array+0x1e>
 800f3b0:	08012060 	.word	0x08012060
 800f3b4:	08012060 	.word	0x08012060
 800f3b8:	08012060 	.word	0x08012060
 800f3bc:	08012064 	.word	0x08012064

0800f3c0 <__locale_ctype_ptr_l>:
 800f3c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f3c4:	4770      	bx	lr
	...

0800f3c8 <__locale_ctype_ptr>:
 800f3c8:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <__locale_ctype_ptr+0x14>)
 800f3ca:	4a05      	ldr	r2, [pc, #20]	; (800f3e0 <__locale_ctype_ptr+0x18>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6a1b      	ldr	r3, [r3, #32]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	bf08      	it	eq
 800f3d4:	4613      	moveq	r3, r2
 800f3d6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800f3da:	4770      	bx	lr
 800f3dc:	200002cc 	.word	0x200002cc
 800f3e0:	20000330 	.word	0x20000330

0800f3e4 <malloc>:
 800f3e4:	4b02      	ldr	r3, [pc, #8]	; (800f3f0 <malloc+0xc>)
 800f3e6:	4601      	mov	r1, r0
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	f000 b88d 	b.w	800f508 <_malloc_r>
 800f3ee:	bf00      	nop
 800f3f0:	200002cc 	.word	0x200002cc

0800f3f4 <free>:
 800f3f4:	4b02      	ldr	r3, [pc, #8]	; (800f400 <free+0xc>)
 800f3f6:	4601      	mov	r1, r0
 800f3f8:	6818      	ldr	r0, [r3, #0]
 800f3fa:	f000 b837 	b.w	800f46c <_free_r>
 800f3fe:	bf00      	nop
 800f400:	200002cc 	.word	0x200002cc

0800f404 <__ascii_mbtowc>:
 800f404:	b082      	sub	sp, #8
 800f406:	b901      	cbnz	r1, 800f40a <__ascii_mbtowc+0x6>
 800f408:	a901      	add	r1, sp, #4
 800f40a:	b142      	cbz	r2, 800f41e <__ascii_mbtowc+0x1a>
 800f40c:	b14b      	cbz	r3, 800f422 <__ascii_mbtowc+0x1e>
 800f40e:	7813      	ldrb	r3, [r2, #0]
 800f410:	600b      	str	r3, [r1, #0]
 800f412:	7812      	ldrb	r2, [r2, #0]
 800f414:	1c10      	adds	r0, r2, #0
 800f416:	bf18      	it	ne
 800f418:	2001      	movne	r0, #1
 800f41a:	b002      	add	sp, #8
 800f41c:	4770      	bx	lr
 800f41e:	4610      	mov	r0, r2
 800f420:	e7fb      	b.n	800f41a <__ascii_mbtowc+0x16>
 800f422:	f06f 0001 	mvn.w	r0, #1
 800f426:	e7f8      	b.n	800f41a <__ascii_mbtowc+0x16>

0800f428 <memcmp>:
 800f428:	b530      	push	{r4, r5, lr}
 800f42a:	2400      	movs	r4, #0
 800f42c:	42a2      	cmp	r2, r4
 800f42e:	d101      	bne.n	800f434 <memcmp+0xc>
 800f430:	2000      	movs	r0, #0
 800f432:	e007      	b.n	800f444 <memcmp+0x1c>
 800f434:	5d03      	ldrb	r3, [r0, r4]
 800f436:	3401      	adds	r4, #1
 800f438:	190d      	adds	r5, r1, r4
 800f43a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f43e:	42ab      	cmp	r3, r5
 800f440:	d0f4      	beq.n	800f42c <memcmp+0x4>
 800f442:	1b58      	subs	r0, r3, r5
 800f444:	bd30      	pop	{r4, r5, pc}

0800f446 <memcpy>:
 800f446:	b510      	push	{r4, lr}
 800f448:	1e43      	subs	r3, r0, #1
 800f44a:	440a      	add	r2, r1
 800f44c:	4291      	cmp	r1, r2
 800f44e:	d100      	bne.n	800f452 <memcpy+0xc>
 800f450:	bd10      	pop	{r4, pc}
 800f452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f45a:	e7f7      	b.n	800f44c <memcpy+0x6>

0800f45c <memset>:
 800f45c:	4402      	add	r2, r0
 800f45e:	4603      	mov	r3, r0
 800f460:	4293      	cmp	r3, r2
 800f462:	d100      	bne.n	800f466 <memset+0xa>
 800f464:	4770      	bx	lr
 800f466:	f803 1b01 	strb.w	r1, [r3], #1
 800f46a:	e7f9      	b.n	800f460 <memset+0x4>

0800f46c <_free_r>:
 800f46c:	b538      	push	{r3, r4, r5, lr}
 800f46e:	4605      	mov	r5, r0
 800f470:	2900      	cmp	r1, #0
 800f472:	d045      	beq.n	800f500 <_free_r+0x94>
 800f474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f478:	1f0c      	subs	r4, r1, #4
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	bfb8      	it	lt
 800f47e:	18e4      	addlt	r4, r4, r3
 800f480:	f000 ffbb 	bl	80103fa <__malloc_lock>
 800f484:	4a1f      	ldr	r2, [pc, #124]	; (800f504 <_free_r+0x98>)
 800f486:	6813      	ldr	r3, [r2, #0]
 800f488:	4610      	mov	r0, r2
 800f48a:	b933      	cbnz	r3, 800f49a <_free_r+0x2e>
 800f48c:	6063      	str	r3, [r4, #4]
 800f48e:	6014      	str	r4, [r2, #0]
 800f490:	4628      	mov	r0, r5
 800f492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f496:	f000 bfb1 	b.w	80103fc <__malloc_unlock>
 800f49a:	42a3      	cmp	r3, r4
 800f49c:	d90c      	bls.n	800f4b8 <_free_r+0x4c>
 800f49e:	6821      	ldr	r1, [r4, #0]
 800f4a0:	1862      	adds	r2, r4, r1
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	bf04      	itt	eq
 800f4a6:	681a      	ldreq	r2, [r3, #0]
 800f4a8:	685b      	ldreq	r3, [r3, #4]
 800f4aa:	6063      	str	r3, [r4, #4]
 800f4ac:	bf04      	itt	eq
 800f4ae:	1852      	addeq	r2, r2, r1
 800f4b0:	6022      	streq	r2, [r4, #0]
 800f4b2:	6004      	str	r4, [r0, #0]
 800f4b4:	e7ec      	b.n	800f490 <_free_r+0x24>
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	b10a      	cbz	r2, 800f4c0 <_free_r+0x54>
 800f4bc:	42a2      	cmp	r2, r4
 800f4be:	d9fa      	bls.n	800f4b6 <_free_r+0x4a>
 800f4c0:	6819      	ldr	r1, [r3, #0]
 800f4c2:	1858      	adds	r0, r3, r1
 800f4c4:	42a0      	cmp	r0, r4
 800f4c6:	d10b      	bne.n	800f4e0 <_free_r+0x74>
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	4401      	add	r1, r0
 800f4cc:	1858      	adds	r0, r3, r1
 800f4ce:	4282      	cmp	r2, r0
 800f4d0:	6019      	str	r1, [r3, #0]
 800f4d2:	d1dd      	bne.n	800f490 <_free_r+0x24>
 800f4d4:	6810      	ldr	r0, [r2, #0]
 800f4d6:	6852      	ldr	r2, [r2, #4]
 800f4d8:	605a      	str	r2, [r3, #4]
 800f4da:	4401      	add	r1, r0
 800f4dc:	6019      	str	r1, [r3, #0]
 800f4de:	e7d7      	b.n	800f490 <_free_r+0x24>
 800f4e0:	d902      	bls.n	800f4e8 <_free_r+0x7c>
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	602b      	str	r3, [r5, #0]
 800f4e6:	e7d3      	b.n	800f490 <_free_r+0x24>
 800f4e8:	6820      	ldr	r0, [r4, #0]
 800f4ea:	1821      	adds	r1, r4, r0
 800f4ec:	428a      	cmp	r2, r1
 800f4ee:	bf04      	itt	eq
 800f4f0:	6811      	ldreq	r1, [r2, #0]
 800f4f2:	6852      	ldreq	r2, [r2, #4]
 800f4f4:	6062      	str	r2, [r4, #4]
 800f4f6:	bf04      	itt	eq
 800f4f8:	1809      	addeq	r1, r1, r0
 800f4fa:	6021      	streq	r1, [r4, #0]
 800f4fc:	605c      	str	r4, [r3, #4]
 800f4fe:	e7c7      	b.n	800f490 <_free_r+0x24>
 800f500:	bd38      	pop	{r3, r4, r5, pc}
 800f502:	bf00      	nop
 800f504:	20014dd0 	.word	0x20014dd0

0800f508 <_malloc_r>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	1ccd      	adds	r5, r1, #3
 800f50c:	f025 0503 	bic.w	r5, r5, #3
 800f510:	3508      	adds	r5, #8
 800f512:	2d0c      	cmp	r5, #12
 800f514:	bf38      	it	cc
 800f516:	250c      	movcc	r5, #12
 800f518:	2d00      	cmp	r5, #0
 800f51a:	4606      	mov	r6, r0
 800f51c:	db01      	blt.n	800f522 <_malloc_r+0x1a>
 800f51e:	42a9      	cmp	r1, r5
 800f520:	d903      	bls.n	800f52a <_malloc_r+0x22>
 800f522:	230c      	movs	r3, #12
 800f524:	6033      	str	r3, [r6, #0]
 800f526:	2000      	movs	r0, #0
 800f528:	bd70      	pop	{r4, r5, r6, pc}
 800f52a:	f000 ff66 	bl	80103fa <__malloc_lock>
 800f52e:	4a21      	ldr	r2, [pc, #132]	; (800f5b4 <_malloc_r+0xac>)
 800f530:	6814      	ldr	r4, [r2, #0]
 800f532:	4621      	mov	r1, r4
 800f534:	b991      	cbnz	r1, 800f55c <_malloc_r+0x54>
 800f536:	4c20      	ldr	r4, [pc, #128]	; (800f5b8 <_malloc_r+0xb0>)
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	b91b      	cbnz	r3, 800f544 <_malloc_r+0x3c>
 800f53c:	4630      	mov	r0, r6
 800f53e:	f000 fb1d 	bl	800fb7c <_sbrk_r>
 800f542:	6020      	str	r0, [r4, #0]
 800f544:	4629      	mov	r1, r5
 800f546:	4630      	mov	r0, r6
 800f548:	f000 fb18 	bl	800fb7c <_sbrk_r>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	d124      	bne.n	800f59a <_malloc_r+0x92>
 800f550:	230c      	movs	r3, #12
 800f552:	6033      	str	r3, [r6, #0]
 800f554:	4630      	mov	r0, r6
 800f556:	f000 ff51 	bl	80103fc <__malloc_unlock>
 800f55a:	e7e4      	b.n	800f526 <_malloc_r+0x1e>
 800f55c:	680b      	ldr	r3, [r1, #0]
 800f55e:	1b5b      	subs	r3, r3, r5
 800f560:	d418      	bmi.n	800f594 <_malloc_r+0x8c>
 800f562:	2b0b      	cmp	r3, #11
 800f564:	d90f      	bls.n	800f586 <_malloc_r+0x7e>
 800f566:	600b      	str	r3, [r1, #0]
 800f568:	50cd      	str	r5, [r1, r3]
 800f56a:	18cc      	adds	r4, r1, r3
 800f56c:	4630      	mov	r0, r6
 800f56e:	f000 ff45 	bl	80103fc <__malloc_unlock>
 800f572:	f104 000b 	add.w	r0, r4, #11
 800f576:	1d23      	adds	r3, r4, #4
 800f578:	f020 0007 	bic.w	r0, r0, #7
 800f57c:	1ac3      	subs	r3, r0, r3
 800f57e:	d0d3      	beq.n	800f528 <_malloc_r+0x20>
 800f580:	425a      	negs	r2, r3
 800f582:	50e2      	str	r2, [r4, r3]
 800f584:	e7d0      	b.n	800f528 <_malloc_r+0x20>
 800f586:	428c      	cmp	r4, r1
 800f588:	684b      	ldr	r3, [r1, #4]
 800f58a:	bf16      	itet	ne
 800f58c:	6063      	strne	r3, [r4, #4]
 800f58e:	6013      	streq	r3, [r2, #0]
 800f590:	460c      	movne	r4, r1
 800f592:	e7eb      	b.n	800f56c <_malloc_r+0x64>
 800f594:	460c      	mov	r4, r1
 800f596:	6849      	ldr	r1, [r1, #4]
 800f598:	e7cc      	b.n	800f534 <_malloc_r+0x2c>
 800f59a:	1cc4      	adds	r4, r0, #3
 800f59c:	f024 0403 	bic.w	r4, r4, #3
 800f5a0:	42a0      	cmp	r0, r4
 800f5a2:	d005      	beq.n	800f5b0 <_malloc_r+0xa8>
 800f5a4:	1a21      	subs	r1, r4, r0
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f000 fae8 	bl	800fb7c <_sbrk_r>
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	d0cf      	beq.n	800f550 <_malloc_r+0x48>
 800f5b0:	6025      	str	r5, [r4, #0]
 800f5b2:	e7db      	b.n	800f56c <_malloc_r+0x64>
 800f5b4:	20014dd0 	.word	0x20014dd0
 800f5b8:	20014dd4 	.word	0x20014dd4

0800f5bc <__sfputc_r>:
 800f5bc:	6893      	ldr	r3, [r2, #8]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	b410      	push	{r4}
 800f5c4:	6093      	str	r3, [r2, #8]
 800f5c6:	da08      	bge.n	800f5da <__sfputc_r+0x1e>
 800f5c8:	6994      	ldr	r4, [r2, #24]
 800f5ca:	42a3      	cmp	r3, r4
 800f5cc:	db01      	blt.n	800f5d2 <__sfputc_r+0x16>
 800f5ce:	290a      	cmp	r1, #10
 800f5d0:	d103      	bne.n	800f5da <__sfputc_r+0x1e>
 800f5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5d6:	f000 bc43 	b.w	800fe60 <__swbuf_r>
 800f5da:	6813      	ldr	r3, [r2, #0]
 800f5dc:	1c58      	adds	r0, r3, #1
 800f5de:	6010      	str	r0, [r2, #0]
 800f5e0:	7019      	strb	r1, [r3, #0]
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <__sfputs_r>:
 800f5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	460f      	mov	r7, r1
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	18d5      	adds	r5, r2, r3
 800f5f4:	42ac      	cmp	r4, r5
 800f5f6:	d101      	bne.n	800f5fc <__sfputs_r+0x12>
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	e007      	b.n	800f60c <__sfputs_r+0x22>
 800f5fc:	463a      	mov	r2, r7
 800f5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f602:	4630      	mov	r0, r6
 800f604:	f7ff ffda 	bl	800f5bc <__sfputc_r>
 800f608:	1c43      	adds	r3, r0, #1
 800f60a:	d1f3      	bne.n	800f5f4 <__sfputs_r+0xa>
 800f60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f610 <_vfiprintf_r>:
 800f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	460c      	mov	r4, r1
 800f616:	b09d      	sub	sp, #116	; 0x74
 800f618:	4617      	mov	r7, r2
 800f61a:	461d      	mov	r5, r3
 800f61c:	4606      	mov	r6, r0
 800f61e:	b118      	cbz	r0, 800f628 <_vfiprintf_r+0x18>
 800f620:	6983      	ldr	r3, [r0, #24]
 800f622:	b90b      	cbnz	r3, 800f628 <_vfiprintf_r+0x18>
 800f624:	f000 fde2 	bl	80101ec <__sinit>
 800f628:	4b7c      	ldr	r3, [pc, #496]	; (800f81c <_vfiprintf_r+0x20c>)
 800f62a:	429c      	cmp	r4, r3
 800f62c:	d158      	bne.n	800f6e0 <_vfiprintf_r+0xd0>
 800f62e:	6874      	ldr	r4, [r6, #4]
 800f630:	89a3      	ldrh	r3, [r4, #12]
 800f632:	0718      	lsls	r0, r3, #28
 800f634:	d55e      	bpl.n	800f6f4 <_vfiprintf_r+0xe4>
 800f636:	6923      	ldr	r3, [r4, #16]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d05b      	beq.n	800f6f4 <_vfiprintf_r+0xe4>
 800f63c:	2300      	movs	r3, #0
 800f63e:	9309      	str	r3, [sp, #36]	; 0x24
 800f640:	2320      	movs	r3, #32
 800f642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f646:	2330      	movs	r3, #48	; 0x30
 800f648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f64c:	9503      	str	r5, [sp, #12]
 800f64e:	f04f 0b01 	mov.w	fp, #1
 800f652:	46b8      	mov	r8, r7
 800f654:	4645      	mov	r5, r8
 800f656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f65a:	b10b      	cbz	r3, 800f660 <_vfiprintf_r+0x50>
 800f65c:	2b25      	cmp	r3, #37	; 0x25
 800f65e:	d154      	bne.n	800f70a <_vfiprintf_r+0xfa>
 800f660:	ebb8 0a07 	subs.w	sl, r8, r7
 800f664:	d00b      	beq.n	800f67e <_vfiprintf_r+0x6e>
 800f666:	4653      	mov	r3, sl
 800f668:	463a      	mov	r2, r7
 800f66a:	4621      	mov	r1, r4
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7ff ffbc 	bl	800f5ea <__sfputs_r>
 800f672:	3001      	adds	r0, #1
 800f674:	f000 80c2 	beq.w	800f7fc <_vfiprintf_r+0x1ec>
 800f678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f67a:	4453      	add	r3, sl
 800f67c:	9309      	str	r3, [sp, #36]	; 0x24
 800f67e:	f898 3000 	ldrb.w	r3, [r8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f000 80ba 	beq.w	800f7fc <_vfiprintf_r+0x1ec>
 800f688:	2300      	movs	r3, #0
 800f68a:	f04f 32ff 	mov.w	r2, #4294967295
 800f68e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	9307      	str	r3, [sp, #28]
 800f696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f69a:	931a      	str	r3, [sp, #104]	; 0x68
 800f69c:	46a8      	mov	r8, r5
 800f69e:	2205      	movs	r2, #5
 800f6a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f6a4:	485e      	ldr	r0, [pc, #376]	; (800f820 <_vfiprintf_r+0x210>)
 800f6a6:	f7f0 fd9b 	bl	80001e0 <memchr>
 800f6aa:	9b04      	ldr	r3, [sp, #16]
 800f6ac:	bb78      	cbnz	r0, 800f70e <_vfiprintf_r+0xfe>
 800f6ae:	06d9      	lsls	r1, r3, #27
 800f6b0:	bf44      	itt	mi
 800f6b2:	2220      	movmi	r2, #32
 800f6b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f6b8:	071a      	lsls	r2, r3, #28
 800f6ba:	bf44      	itt	mi
 800f6bc:	222b      	movmi	r2, #43	; 0x2b
 800f6be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f6c2:	782a      	ldrb	r2, [r5, #0]
 800f6c4:	2a2a      	cmp	r2, #42	; 0x2a
 800f6c6:	d02a      	beq.n	800f71e <_vfiprintf_r+0x10e>
 800f6c8:	9a07      	ldr	r2, [sp, #28]
 800f6ca:	46a8      	mov	r8, r5
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	250a      	movs	r5, #10
 800f6d0:	4641      	mov	r1, r8
 800f6d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6d6:	3b30      	subs	r3, #48	; 0x30
 800f6d8:	2b09      	cmp	r3, #9
 800f6da:	d969      	bls.n	800f7b0 <_vfiprintf_r+0x1a0>
 800f6dc:	b360      	cbz	r0, 800f738 <_vfiprintf_r+0x128>
 800f6de:	e024      	b.n	800f72a <_vfiprintf_r+0x11a>
 800f6e0:	4b50      	ldr	r3, [pc, #320]	; (800f824 <_vfiprintf_r+0x214>)
 800f6e2:	429c      	cmp	r4, r3
 800f6e4:	d101      	bne.n	800f6ea <_vfiprintf_r+0xda>
 800f6e6:	68b4      	ldr	r4, [r6, #8]
 800f6e8:	e7a2      	b.n	800f630 <_vfiprintf_r+0x20>
 800f6ea:	4b4f      	ldr	r3, [pc, #316]	; (800f828 <_vfiprintf_r+0x218>)
 800f6ec:	429c      	cmp	r4, r3
 800f6ee:	bf08      	it	eq
 800f6f0:	68f4      	ldreq	r4, [r6, #12]
 800f6f2:	e79d      	b.n	800f630 <_vfiprintf_r+0x20>
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f000 fc12 	bl	800ff20 <__swsetup_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d09d      	beq.n	800f63c <_vfiprintf_r+0x2c>
 800f700:	f04f 30ff 	mov.w	r0, #4294967295
 800f704:	b01d      	add	sp, #116	; 0x74
 800f706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70a:	46a8      	mov	r8, r5
 800f70c:	e7a2      	b.n	800f654 <_vfiprintf_r+0x44>
 800f70e:	4a44      	ldr	r2, [pc, #272]	; (800f820 <_vfiprintf_r+0x210>)
 800f710:	1a80      	subs	r0, r0, r2
 800f712:	fa0b f000 	lsl.w	r0, fp, r0
 800f716:	4318      	orrs	r0, r3
 800f718:	9004      	str	r0, [sp, #16]
 800f71a:	4645      	mov	r5, r8
 800f71c:	e7be      	b.n	800f69c <_vfiprintf_r+0x8c>
 800f71e:	9a03      	ldr	r2, [sp, #12]
 800f720:	1d11      	adds	r1, r2, #4
 800f722:	6812      	ldr	r2, [r2, #0]
 800f724:	9103      	str	r1, [sp, #12]
 800f726:	2a00      	cmp	r2, #0
 800f728:	db01      	blt.n	800f72e <_vfiprintf_r+0x11e>
 800f72a:	9207      	str	r2, [sp, #28]
 800f72c:	e004      	b.n	800f738 <_vfiprintf_r+0x128>
 800f72e:	4252      	negs	r2, r2
 800f730:	f043 0302 	orr.w	r3, r3, #2
 800f734:	9207      	str	r2, [sp, #28]
 800f736:	9304      	str	r3, [sp, #16]
 800f738:	f898 3000 	ldrb.w	r3, [r8]
 800f73c:	2b2e      	cmp	r3, #46	; 0x2e
 800f73e:	d10e      	bne.n	800f75e <_vfiprintf_r+0x14e>
 800f740:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f744:	2b2a      	cmp	r3, #42	; 0x2a
 800f746:	d138      	bne.n	800f7ba <_vfiprintf_r+0x1aa>
 800f748:	9b03      	ldr	r3, [sp, #12]
 800f74a:	1d1a      	adds	r2, r3, #4
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	9203      	str	r2, [sp, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	bfb8      	it	lt
 800f754:	f04f 33ff 	movlt.w	r3, #4294967295
 800f758:	f108 0802 	add.w	r8, r8, #2
 800f75c:	9305      	str	r3, [sp, #20]
 800f75e:	4d33      	ldr	r5, [pc, #204]	; (800f82c <_vfiprintf_r+0x21c>)
 800f760:	f898 1000 	ldrb.w	r1, [r8]
 800f764:	2203      	movs	r2, #3
 800f766:	4628      	mov	r0, r5
 800f768:	f7f0 fd3a 	bl	80001e0 <memchr>
 800f76c:	b140      	cbz	r0, 800f780 <_vfiprintf_r+0x170>
 800f76e:	2340      	movs	r3, #64	; 0x40
 800f770:	1b40      	subs	r0, r0, r5
 800f772:	fa03 f000 	lsl.w	r0, r3, r0
 800f776:	9b04      	ldr	r3, [sp, #16]
 800f778:	4303      	orrs	r3, r0
 800f77a:	f108 0801 	add.w	r8, r8, #1
 800f77e:	9304      	str	r3, [sp, #16]
 800f780:	f898 1000 	ldrb.w	r1, [r8]
 800f784:	482a      	ldr	r0, [pc, #168]	; (800f830 <_vfiprintf_r+0x220>)
 800f786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f78a:	2206      	movs	r2, #6
 800f78c:	f108 0701 	add.w	r7, r8, #1
 800f790:	f7f0 fd26 	bl	80001e0 <memchr>
 800f794:	2800      	cmp	r0, #0
 800f796:	d037      	beq.n	800f808 <_vfiprintf_r+0x1f8>
 800f798:	4b26      	ldr	r3, [pc, #152]	; (800f834 <_vfiprintf_r+0x224>)
 800f79a:	bb1b      	cbnz	r3, 800f7e4 <_vfiprintf_r+0x1d4>
 800f79c:	9b03      	ldr	r3, [sp, #12]
 800f79e:	3307      	adds	r3, #7
 800f7a0:	f023 0307 	bic.w	r3, r3, #7
 800f7a4:	3308      	adds	r3, #8
 800f7a6:	9303      	str	r3, [sp, #12]
 800f7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7aa:	444b      	add	r3, r9
 800f7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ae:	e750      	b.n	800f652 <_vfiprintf_r+0x42>
 800f7b0:	fb05 3202 	mla	r2, r5, r2, r3
 800f7b4:	2001      	movs	r0, #1
 800f7b6:	4688      	mov	r8, r1
 800f7b8:	e78a      	b.n	800f6d0 <_vfiprintf_r+0xc0>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f108 0801 	add.w	r8, r8, #1
 800f7c0:	9305      	str	r3, [sp, #20]
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	250a      	movs	r5, #10
 800f7c6:	4640      	mov	r0, r8
 800f7c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7cc:	3a30      	subs	r2, #48	; 0x30
 800f7ce:	2a09      	cmp	r2, #9
 800f7d0:	d903      	bls.n	800f7da <_vfiprintf_r+0x1ca>
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d0c3      	beq.n	800f75e <_vfiprintf_r+0x14e>
 800f7d6:	9105      	str	r1, [sp, #20]
 800f7d8:	e7c1      	b.n	800f75e <_vfiprintf_r+0x14e>
 800f7da:	fb05 2101 	mla	r1, r5, r1, r2
 800f7de:	2301      	movs	r3, #1
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	e7f0      	b.n	800f7c6 <_vfiprintf_r+0x1b6>
 800f7e4:	ab03      	add	r3, sp, #12
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	4622      	mov	r2, r4
 800f7ea:	4b13      	ldr	r3, [pc, #76]	; (800f838 <_vfiprintf_r+0x228>)
 800f7ec:	a904      	add	r1, sp, #16
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f3af 8000 	nop.w
 800f7f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f7f8:	4681      	mov	r9, r0
 800f7fa:	d1d5      	bne.n	800f7a8 <_vfiprintf_r+0x198>
 800f7fc:	89a3      	ldrh	r3, [r4, #12]
 800f7fe:	065b      	lsls	r3, r3, #25
 800f800:	f53f af7e 	bmi.w	800f700 <_vfiprintf_r+0xf0>
 800f804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f806:	e77d      	b.n	800f704 <_vfiprintf_r+0xf4>
 800f808:	ab03      	add	r3, sp, #12
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	4622      	mov	r2, r4
 800f80e:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <_vfiprintf_r+0x228>)
 800f810:	a904      	add	r1, sp, #16
 800f812:	4630      	mov	r0, r6
 800f814:	f000 f888 	bl	800f928 <_printf_i>
 800f818:	e7ec      	b.n	800f7f4 <_vfiprintf_r+0x1e4>
 800f81a:	bf00      	nop
 800f81c:	08012018 	.word	0x08012018
 800f820:	08011ec2 	.word	0x08011ec2
 800f824:	08012038 	.word	0x08012038
 800f828:	08011ff8 	.word	0x08011ff8
 800f82c:	08011ec8 	.word	0x08011ec8
 800f830:	08011ecc 	.word	0x08011ecc
 800f834:	00000000 	.word	0x00000000
 800f838:	0800f5eb 	.word	0x0800f5eb

0800f83c <_printf_common>:
 800f83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f840:	4691      	mov	r9, r2
 800f842:	461f      	mov	r7, r3
 800f844:	688a      	ldr	r2, [r1, #8]
 800f846:	690b      	ldr	r3, [r1, #16]
 800f848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f84c:	4293      	cmp	r3, r2
 800f84e:	bfb8      	it	lt
 800f850:	4613      	movlt	r3, r2
 800f852:	f8c9 3000 	str.w	r3, [r9]
 800f856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f85a:	4606      	mov	r6, r0
 800f85c:	460c      	mov	r4, r1
 800f85e:	b112      	cbz	r2, 800f866 <_printf_common+0x2a>
 800f860:	3301      	adds	r3, #1
 800f862:	f8c9 3000 	str.w	r3, [r9]
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	0699      	lsls	r1, r3, #26
 800f86a:	bf42      	ittt	mi
 800f86c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f870:	3302      	addmi	r3, #2
 800f872:	f8c9 3000 	strmi.w	r3, [r9]
 800f876:	6825      	ldr	r5, [r4, #0]
 800f878:	f015 0506 	ands.w	r5, r5, #6
 800f87c:	d107      	bne.n	800f88e <_printf_common+0x52>
 800f87e:	f104 0a19 	add.w	sl, r4, #25
 800f882:	68e3      	ldr	r3, [r4, #12]
 800f884:	f8d9 2000 	ldr.w	r2, [r9]
 800f888:	1a9b      	subs	r3, r3, r2
 800f88a:	42ab      	cmp	r3, r5
 800f88c:	dc28      	bgt.n	800f8e0 <_printf_common+0xa4>
 800f88e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f892:	6822      	ldr	r2, [r4, #0]
 800f894:	3300      	adds	r3, #0
 800f896:	bf18      	it	ne
 800f898:	2301      	movne	r3, #1
 800f89a:	0692      	lsls	r2, r2, #26
 800f89c:	d42d      	bmi.n	800f8fa <_printf_common+0xbe>
 800f89e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8a2:	4639      	mov	r1, r7
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	47c0      	blx	r8
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d020      	beq.n	800f8ee <_printf_common+0xb2>
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	68e5      	ldr	r5, [r4, #12]
 800f8b0:	f8d9 2000 	ldr.w	r2, [r9]
 800f8b4:	f003 0306 	and.w	r3, r3, #6
 800f8b8:	2b04      	cmp	r3, #4
 800f8ba:	bf08      	it	eq
 800f8bc:	1aad      	subeq	r5, r5, r2
 800f8be:	68a3      	ldr	r3, [r4, #8]
 800f8c0:	6922      	ldr	r2, [r4, #16]
 800f8c2:	bf0c      	ite	eq
 800f8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8c8:	2500      	movne	r5, #0
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	bfc4      	itt	gt
 800f8ce:	1a9b      	subgt	r3, r3, r2
 800f8d0:	18ed      	addgt	r5, r5, r3
 800f8d2:	f04f 0900 	mov.w	r9, #0
 800f8d6:	341a      	adds	r4, #26
 800f8d8:	454d      	cmp	r5, r9
 800f8da:	d11a      	bne.n	800f912 <_printf_common+0xd6>
 800f8dc:	2000      	movs	r0, #0
 800f8de:	e008      	b.n	800f8f2 <_printf_common+0xb6>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	4652      	mov	r2, sl
 800f8e4:	4639      	mov	r1, r7
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	47c0      	blx	r8
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	d103      	bne.n	800f8f6 <_printf_common+0xba>
 800f8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f6:	3501      	adds	r5, #1
 800f8f8:	e7c3      	b.n	800f882 <_printf_common+0x46>
 800f8fa:	18e1      	adds	r1, r4, r3
 800f8fc:	1c5a      	adds	r2, r3, #1
 800f8fe:	2030      	movs	r0, #48	; 0x30
 800f900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f904:	4422      	add	r2, r4
 800f906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f90a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f90e:	3302      	adds	r3, #2
 800f910:	e7c5      	b.n	800f89e <_printf_common+0x62>
 800f912:	2301      	movs	r3, #1
 800f914:	4622      	mov	r2, r4
 800f916:	4639      	mov	r1, r7
 800f918:	4630      	mov	r0, r6
 800f91a:	47c0      	blx	r8
 800f91c:	3001      	adds	r0, #1
 800f91e:	d0e6      	beq.n	800f8ee <_printf_common+0xb2>
 800f920:	f109 0901 	add.w	r9, r9, #1
 800f924:	e7d8      	b.n	800f8d8 <_printf_common+0x9c>
	...

0800f928 <_printf_i>:
 800f928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f92c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f930:	460c      	mov	r4, r1
 800f932:	7e09      	ldrb	r1, [r1, #24]
 800f934:	b085      	sub	sp, #20
 800f936:	296e      	cmp	r1, #110	; 0x6e
 800f938:	4617      	mov	r7, r2
 800f93a:	4606      	mov	r6, r0
 800f93c:	4698      	mov	r8, r3
 800f93e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f940:	f000 80b3 	beq.w	800faaa <_printf_i+0x182>
 800f944:	d822      	bhi.n	800f98c <_printf_i+0x64>
 800f946:	2963      	cmp	r1, #99	; 0x63
 800f948:	d036      	beq.n	800f9b8 <_printf_i+0x90>
 800f94a:	d80a      	bhi.n	800f962 <_printf_i+0x3a>
 800f94c:	2900      	cmp	r1, #0
 800f94e:	f000 80b9 	beq.w	800fac4 <_printf_i+0x19c>
 800f952:	2958      	cmp	r1, #88	; 0x58
 800f954:	f000 8083 	beq.w	800fa5e <_printf_i+0x136>
 800f958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f95c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f960:	e032      	b.n	800f9c8 <_printf_i+0xa0>
 800f962:	2964      	cmp	r1, #100	; 0x64
 800f964:	d001      	beq.n	800f96a <_printf_i+0x42>
 800f966:	2969      	cmp	r1, #105	; 0x69
 800f968:	d1f6      	bne.n	800f958 <_printf_i+0x30>
 800f96a:	6820      	ldr	r0, [r4, #0]
 800f96c:	6813      	ldr	r3, [r2, #0]
 800f96e:	0605      	lsls	r5, r0, #24
 800f970:	f103 0104 	add.w	r1, r3, #4
 800f974:	d52a      	bpl.n	800f9cc <_printf_i+0xa4>
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6011      	str	r1, [r2, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da03      	bge.n	800f986 <_printf_i+0x5e>
 800f97e:	222d      	movs	r2, #45	; 0x2d
 800f980:	425b      	negs	r3, r3
 800f982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f986:	486f      	ldr	r0, [pc, #444]	; (800fb44 <_printf_i+0x21c>)
 800f988:	220a      	movs	r2, #10
 800f98a:	e039      	b.n	800fa00 <_printf_i+0xd8>
 800f98c:	2973      	cmp	r1, #115	; 0x73
 800f98e:	f000 809d 	beq.w	800facc <_printf_i+0x1a4>
 800f992:	d808      	bhi.n	800f9a6 <_printf_i+0x7e>
 800f994:	296f      	cmp	r1, #111	; 0x6f
 800f996:	d020      	beq.n	800f9da <_printf_i+0xb2>
 800f998:	2970      	cmp	r1, #112	; 0x70
 800f99a:	d1dd      	bne.n	800f958 <_printf_i+0x30>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	f043 0320 	orr.w	r3, r3, #32
 800f9a2:	6023      	str	r3, [r4, #0]
 800f9a4:	e003      	b.n	800f9ae <_printf_i+0x86>
 800f9a6:	2975      	cmp	r1, #117	; 0x75
 800f9a8:	d017      	beq.n	800f9da <_printf_i+0xb2>
 800f9aa:	2978      	cmp	r1, #120	; 0x78
 800f9ac:	d1d4      	bne.n	800f958 <_printf_i+0x30>
 800f9ae:	2378      	movs	r3, #120	; 0x78
 800f9b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9b4:	4864      	ldr	r0, [pc, #400]	; (800fb48 <_printf_i+0x220>)
 800f9b6:	e055      	b.n	800fa64 <_printf_i+0x13c>
 800f9b8:	6813      	ldr	r3, [r2, #0]
 800f9ba:	1d19      	adds	r1, r3, #4
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	6011      	str	r1, [r2, #0]
 800f9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e08c      	b.n	800fae6 <_printf_i+0x1be>
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	6011      	str	r1, [r2, #0]
 800f9d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f9d4:	bf18      	it	ne
 800f9d6:	b21b      	sxthne	r3, r3
 800f9d8:	e7cf      	b.n	800f97a <_printf_i+0x52>
 800f9da:	6813      	ldr	r3, [r2, #0]
 800f9dc:	6825      	ldr	r5, [r4, #0]
 800f9de:	1d18      	adds	r0, r3, #4
 800f9e0:	6010      	str	r0, [r2, #0]
 800f9e2:	0628      	lsls	r0, r5, #24
 800f9e4:	d501      	bpl.n	800f9ea <_printf_i+0xc2>
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	e002      	b.n	800f9f0 <_printf_i+0xc8>
 800f9ea:	0668      	lsls	r0, r5, #25
 800f9ec:	d5fb      	bpl.n	800f9e6 <_printf_i+0xbe>
 800f9ee:	881b      	ldrh	r3, [r3, #0]
 800f9f0:	4854      	ldr	r0, [pc, #336]	; (800fb44 <_printf_i+0x21c>)
 800f9f2:	296f      	cmp	r1, #111	; 0x6f
 800f9f4:	bf14      	ite	ne
 800f9f6:	220a      	movne	r2, #10
 800f9f8:	2208      	moveq	r2, #8
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa00:	6865      	ldr	r5, [r4, #4]
 800fa02:	60a5      	str	r5, [r4, #8]
 800fa04:	2d00      	cmp	r5, #0
 800fa06:	f2c0 8095 	blt.w	800fb34 <_printf_i+0x20c>
 800fa0a:	6821      	ldr	r1, [r4, #0]
 800fa0c:	f021 0104 	bic.w	r1, r1, #4
 800fa10:	6021      	str	r1, [r4, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d13d      	bne.n	800fa92 <_printf_i+0x16a>
 800fa16:	2d00      	cmp	r5, #0
 800fa18:	f040 808e 	bne.w	800fb38 <_printf_i+0x210>
 800fa1c:	4665      	mov	r5, ip
 800fa1e:	2a08      	cmp	r2, #8
 800fa20:	d10b      	bne.n	800fa3a <_printf_i+0x112>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	07db      	lsls	r3, r3, #31
 800fa26:	d508      	bpl.n	800fa3a <_printf_i+0x112>
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	6862      	ldr	r2, [r4, #4]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	bfde      	ittt	le
 800fa30:	2330      	movle	r3, #48	; 0x30
 800fa32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa36:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa3a:	ebac 0305 	sub.w	r3, ip, r5
 800fa3e:	6123      	str	r3, [r4, #16]
 800fa40:	f8cd 8000 	str.w	r8, [sp]
 800fa44:	463b      	mov	r3, r7
 800fa46:	aa03      	add	r2, sp, #12
 800fa48:	4621      	mov	r1, r4
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7ff fef6 	bl	800f83c <_printf_common>
 800fa50:	3001      	adds	r0, #1
 800fa52:	d14d      	bne.n	800faf0 <_printf_i+0x1c8>
 800fa54:	f04f 30ff 	mov.w	r0, #4294967295
 800fa58:	b005      	add	sp, #20
 800fa5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa5e:	4839      	ldr	r0, [pc, #228]	; (800fb44 <_printf_i+0x21c>)
 800fa60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fa64:	6813      	ldr	r3, [r2, #0]
 800fa66:	6821      	ldr	r1, [r4, #0]
 800fa68:	1d1d      	adds	r5, r3, #4
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	6015      	str	r5, [r2, #0]
 800fa6e:	060a      	lsls	r2, r1, #24
 800fa70:	d50b      	bpl.n	800fa8a <_printf_i+0x162>
 800fa72:	07ca      	lsls	r2, r1, #31
 800fa74:	bf44      	itt	mi
 800fa76:	f041 0120 	orrmi.w	r1, r1, #32
 800fa7a:	6021      	strmi	r1, [r4, #0]
 800fa7c:	b91b      	cbnz	r3, 800fa86 <_printf_i+0x15e>
 800fa7e:	6822      	ldr	r2, [r4, #0]
 800fa80:	f022 0220 	bic.w	r2, r2, #32
 800fa84:	6022      	str	r2, [r4, #0]
 800fa86:	2210      	movs	r2, #16
 800fa88:	e7b7      	b.n	800f9fa <_printf_i+0xd2>
 800fa8a:	064d      	lsls	r5, r1, #25
 800fa8c:	bf48      	it	mi
 800fa8e:	b29b      	uxthmi	r3, r3
 800fa90:	e7ef      	b.n	800fa72 <_printf_i+0x14a>
 800fa92:	4665      	mov	r5, ip
 800fa94:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa98:	fb02 3311 	mls	r3, r2, r1, r3
 800fa9c:	5cc3      	ldrb	r3, [r0, r3]
 800fa9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800faa2:	460b      	mov	r3, r1
 800faa4:	2900      	cmp	r1, #0
 800faa6:	d1f5      	bne.n	800fa94 <_printf_i+0x16c>
 800faa8:	e7b9      	b.n	800fa1e <_printf_i+0xf6>
 800faaa:	6813      	ldr	r3, [r2, #0]
 800faac:	6825      	ldr	r5, [r4, #0]
 800faae:	6961      	ldr	r1, [r4, #20]
 800fab0:	1d18      	adds	r0, r3, #4
 800fab2:	6010      	str	r0, [r2, #0]
 800fab4:	0628      	lsls	r0, r5, #24
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	d501      	bpl.n	800fabe <_printf_i+0x196>
 800faba:	6019      	str	r1, [r3, #0]
 800fabc:	e002      	b.n	800fac4 <_printf_i+0x19c>
 800fabe:	066a      	lsls	r2, r5, #25
 800fac0:	d5fb      	bpl.n	800faba <_printf_i+0x192>
 800fac2:	8019      	strh	r1, [r3, #0]
 800fac4:	2300      	movs	r3, #0
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	4665      	mov	r5, ip
 800faca:	e7b9      	b.n	800fa40 <_printf_i+0x118>
 800facc:	6813      	ldr	r3, [r2, #0]
 800face:	1d19      	adds	r1, r3, #4
 800fad0:	6011      	str	r1, [r2, #0]
 800fad2:	681d      	ldr	r5, [r3, #0]
 800fad4:	6862      	ldr	r2, [r4, #4]
 800fad6:	2100      	movs	r1, #0
 800fad8:	4628      	mov	r0, r5
 800fada:	f7f0 fb81 	bl	80001e0 <memchr>
 800fade:	b108      	cbz	r0, 800fae4 <_printf_i+0x1bc>
 800fae0:	1b40      	subs	r0, r0, r5
 800fae2:	6060      	str	r0, [r4, #4]
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	2300      	movs	r3, #0
 800faea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faee:	e7a7      	b.n	800fa40 <_printf_i+0x118>
 800faf0:	6923      	ldr	r3, [r4, #16]
 800faf2:	462a      	mov	r2, r5
 800faf4:	4639      	mov	r1, r7
 800faf6:	4630      	mov	r0, r6
 800faf8:	47c0      	blx	r8
 800fafa:	3001      	adds	r0, #1
 800fafc:	d0aa      	beq.n	800fa54 <_printf_i+0x12c>
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	079b      	lsls	r3, r3, #30
 800fb02:	d413      	bmi.n	800fb2c <_printf_i+0x204>
 800fb04:	68e0      	ldr	r0, [r4, #12]
 800fb06:	9b03      	ldr	r3, [sp, #12]
 800fb08:	4298      	cmp	r0, r3
 800fb0a:	bfb8      	it	lt
 800fb0c:	4618      	movlt	r0, r3
 800fb0e:	e7a3      	b.n	800fa58 <_printf_i+0x130>
 800fb10:	2301      	movs	r3, #1
 800fb12:	464a      	mov	r2, r9
 800fb14:	4639      	mov	r1, r7
 800fb16:	4630      	mov	r0, r6
 800fb18:	47c0      	blx	r8
 800fb1a:	3001      	adds	r0, #1
 800fb1c:	d09a      	beq.n	800fa54 <_printf_i+0x12c>
 800fb1e:	3501      	adds	r5, #1
 800fb20:	68e3      	ldr	r3, [r4, #12]
 800fb22:	9a03      	ldr	r2, [sp, #12]
 800fb24:	1a9b      	subs	r3, r3, r2
 800fb26:	42ab      	cmp	r3, r5
 800fb28:	dcf2      	bgt.n	800fb10 <_printf_i+0x1e8>
 800fb2a:	e7eb      	b.n	800fb04 <_printf_i+0x1dc>
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	f104 0919 	add.w	r9, r4, #25
 800fb32:	e7f5      	b.n	800fb20 <_printf_i+0x1f8>
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1ac      	bne.n	800fa92 <_printf_i+0x16a>
 800fb38:	7803      	ldrb	r3, [r0, #0]
 800fb3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb42:	e76c      	b.n	800fa1e <_printf_i+0xf6>
 800fb44:	08011ed3 	.word	0x08011ed3
 800fb48:	08011ee4 	.word	0x08011ee4

0800fb4c <iprintf>:
 800fb4c:	b40f      	push	{r0, r1, r2, r3}
 800fb4e:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <iprintf+0x2c>)
 800fb50:	b513      	push	{r0, r1, r4, lr}
 800fb52:	681c      	ldr	r4, [r3, #0]
 800fb54:	b124      	cbz	r4, 800fb60 <iprintf+0x14>
 800fb56:	69a3      	ldr	r3, [r4, #24]
 800fb58:	b913      	cbnz	r3, 800fb60 <iprintf+0x14>
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 fb46 	bl	80101ec <__sinit>
 800fb60:	ab05      	add	r3, sp, #20
 800fb62:	9a04      	ldr	r2, [sp, #16]
 800fb64:	68a1      	ldr	r1, [r4, #8]
 800fb66:	9301      	str	r3, [sp, #4]
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f7ff fd51 	bl	800f610 <_vfiprintf_r>
 800fb6e:	b002      	add	sp, #8
 800fb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb74:	b004      	add	sp, #16
 800fb76:	4770      	bx	lr
 800fb78:	200002cc 	.word	0x200002cc

0800fb7c <_sbrk_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4c06      	ldr	r4, [pc, #24]	; (800fb98 <_sbrk_r+0x1c>)
 800fb80:	2300      	movs	r3, #0
 800fb82:	4605      	mov	r5, r0
 800fb84:	4608      	mov	r0, r1
 800fb86:	6023      	str	r3, [r4, #0]
 800fb88:	f7fc fbfc 	bl	800c384 <_sbrk>
 800fb8c:	1c43      	adds	r3, r0, #1
 800fb8e:	d102      	bne.n	800fb96 <_sbrk_r+0x1a>
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	b103      	cbz	r3, 800fb96 <_sbrk_r+0x1a>
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	bd38      	pop	{r3, r4, r5, pc}
 800fb98:	20015734 	.word	0x20015734

0800fb9c <sniprintf>:
 800fb9c:	b40c      	push	{r2, r3}
 800fb9e:	b530      	push	{r4, r5, lr}
 800fba0:	4b17      	ldr	r3, [pc, #92]	; (800fc00 <sniprintf+0x64>)
 800fba2:	1e0c      	subs	r4, r1, #0
 800fba4:	b09d      	sub	sp, #116	; 0x74
 800fba6:	681d      	ldr	r5, [r3, #0]
 800fba8:	da08      	bge.n	800fbbc <sniprintf+0x20>
 800fbaa:	238b      	movs	r3, #139	; 0x8b
 800fbac:	602b      	str	r3, [r5, #0]
 800fbae:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb2:	b01d      	add	sp, #116	; 0x74
 800fbb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbb8:	b002      	add	sp, #8
 800fbba:	4770      	bx	lr
 800fbbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fbc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbc4:	bf14      	ite	ne
 800fbc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fbca:	4623      	moveq	r3, r4
 800fbcc:	9304      	str	r3, [sp, #16]
 800fbce:	9307      	str	r3, [sp, #28]
 800fbd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbd4:	9002      	str	r0, [sp, #8]
 800fbd6:	9006      	str	r0, [sp, #24]
 800fbd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fbde:	ab21      	add	r3, sp, #132	; 0x84
 800fbe0:	a902      	add	r1, sp, #8
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	9301      	str	r3, [sp, #4]
 800fbe6:	f000 fc8b 	bl	8010500 <_svfiprintf_r>
 800fbea:	1c43      	adds	r3, r0, #1
 800fbec:	bfbc      	itt	lt
 800fbee:	238b      	movlt	r3, #139	; 0x8b
 800fbf0:	602b      	strlt	r3, [r5, #0]
 800fbf2:	2c00      	cmp	r4, #0
 800fbf4:	d0dd      	beq.n	800fbb2 <sniprintf+0x16>
 800fbf6:	9b02      	ldr	r3, [sp, #8]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	701a      	strb	r2, [r3, #0]
 800fbfc:	e7d9      	b.n	800fbb2 <sniprintf+0x16>
 800fbfe:	bf00      	nop
 800fc00:	200002cc 	.word	0x200002cc

0800fc04 <strchr>:
 800fc04:	b2c9      	uxtb	r1, r1
 800fc06:	4603      	mov	r3, r0
 800fc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc0c:	b11a      	cbz	r2, 800fc16 <strchr+0x12>
 800fc0e:	428a      	cmp	r2, r1
 800fc10:	d1f9      	bne.n	800fc06 <strchr+0x2>
 800fc12:	4618      	mov	r0, r3
 800fc14:	4770      	bx	lr
 800fc16:	2900      	cmp	r1, #0
 800fc18:	bf18      	it	ne
 800fc1a:	2300      	movne	r3, #0
 800fc1c:	e7f9      	b.n	800fc12 <strchr+0xe>

0800fc1e <strcspn>:
 800fc1e:	b570      	push	{r4, r5, r6, lr}
 800fc20:	4603      	mov	r3, r0
 800fc22:	461a      	mov	r2, r3
 800fc24:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fc28:	b14d      	cbz	r5, 800fc3e <strcspn+0x20>
 800fc2a:	1e4c      	subs	r4, r1, #1
 800fc2c:	e001      	b.n	800fc32 <strcspn+0x14>
 800fc2e:	42ae      	cmp	r6, r5
 800fc30:	d005      	beq.n	800fc3e <strcspn+0x20>
 800fc32:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800fc36:	2e00      	cmp	r6, #0
 800fc38:	d1f9      	bne.n	800fc2e <strcspn+0x10>
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	e7f1      	b.n	800fc22 <strcspn+0x4>
 800fc3e:	1a18      	subs	r0, r3, r0
 800fc40:	bd70      	pop	{r4, r5, r6, pc}

0800fc42 <strspn>:
 800fc42:	b570      	push	{r4, r5, r6, lr}
 800fc44:	4603      	mov	r3, r0
 800fc46:	461a      	mov	r2, r3
 800fc48:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fc4c:	b13d      	cbz	r5, 800fc5e <strspn+0x1c>
 800fc4e:	1e4c      	subs	r4, r1, #1
 800fc50:	e001      	b.n	800fc56 <strspn+0x14>
 800fc52:	42ae      	cmp	r6, r5
 800fc54:	d005      	beq.n	800fc62 <strspn+0x20>
 800fc56:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800fc5a:	2e00      	cmp	r6, #0
 800fc5c:	d1f9      	bne.n	800fc52 <strspn+0x10>
 800fc5e:	1a18      	subs	r0, r3, r0
 800fc60:	bd70      	pop	{r4, r5, r6, pc}
 800fc62:	4613      	mov	r3, r2
 800fc64:	e7ef      	b.n	800fc46 <strspn+0x4>
	...

0800fc68 <strtok>:
 800fc68:	4b13      	ldr	r3, [pc, #76]	; (800fcb8 <strtok+0x50>)
 800fc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6e:	681d      	ldr	r5, [r3, #0]
 800fc70:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800fc72:	4606      	mov	r6, r0
 800fc74:	460f      	mov	r7, r1
 800fc76:	b9b4      	cbnz	r4, 800fca6 <strtok+0x3e>
 800fc78:	2050      	movs	r0, #80	; 0x50
 800fc7a:	f7ff fbb3 	bl	800f3e4 <malloc>
 800fc7e:	65a8      	str	r0, [r5, #88]	; 0x58
 800fc80:	e9c0 4400 	strd	r4, r4, [r0]
 800fc84:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fc88:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fc8c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fc90:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fc94:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fc98:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fc9c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fca0:	6184      	str	r4, [r0, #24]
 800fca2:	7704      	strb	r4, [r0, #28]
 800fca4:	6244      	str	r4, [r0, #36]	; 0x24
 800fca6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800fca8:	4639      	mov	r1, r7
 800fcaa:	4630      	mov	r0, r6
 800fcac:	2301      	movs	r3, #1
 800fcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb2:	f000 b803 	b.w	800fcbc <__strtok_r>
 800fcb6:	bf00      	nop
 800fcb8:	200002cc 	.word	0x200002cc

0800fcbc <__strtok_r>:
 800fcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcbe:	b918      	cbnz	r0, 800fcc8 <__strtok_r+0xc>
 800fcc0:	6810      	ldr	r0, [r2, #0]
 800fcc2:	b908      	cbnz	r0, 800fcc8 <__strtok_r+0xc>
 800fcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460f      	mov	r7, r1
 800fccc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fcd0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fcd4:	b91e      	cbnz	r6, 800fcde <__strtok_r+0x22>
 800fcd6:	b96d      	cbnz	r5, 800fcf4 <__strtok_r+0x38>
 800fcd8:	6015      	str	r5, [r2, #0]
 800fcda:	4628      	mov	r0, r5
 800fcdc:	e7f2      	b.n	800fcc4 <__strtok_r+0x8>
 800fcde:	42b5      	cmp	r5, r6
 800fce0:	d1f6      	bne.n	800fcd0 <__strtok_r+0x14>
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1ef      	bne.n	800fcc6 <__strtok_r+0xa>
 800fce6:	6014      	str	r4, [r2, #0]
 800fce8:	7003      	strb	r3, [r0, #0]
 800fcea:	e7eb      	b.n	800fcc4 <__strtok_r+0x8>
 800fcec:	462b      	mov	r3, r5
 800fcee:	e00d      	b.n	800fd0c <__strtok_r+0x50>
 800fcf0:	b926      	cbnz	r6, 800fcfc <__strtok_r+0x40>
 800fcf2:	461c      	mov	r4, r3
 800fcf4:	4623      	mov	r3, r4
 800fcf6:	460f      	mov	r7, r1
 800fcf8:	f813 5b01 	ldrb.w	r5, [r3], #1
 800fcfc:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fd00:	42b5      	cmp	r5, r6
 800fd02:	d1f5      	bne.n	800fcf0 <__strtok_r+0x34>
 800fd04:	2d00      	cmp	r5, #0
 800fd06:	d0f1      	beq.n	800fcec <__strtok_r+0x30>
 800fd08:	2100      	movs	r1, #0
 800fd0a:	7021      	strb	r1, [r4, #0]
 800fd0c:	6013      	str	r3, [r2, #0]
 800fd0e:	e7d9      	b.n	800fcc4 <__strtok_r+0x8>

0800fd10 <_strtol_l.isra.0>:
 800fd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd14:	4680      	mov	r8, r0
 800fd16:	4689      	mov	r9, r1
 800fd18:	4692      	mov	sl, r2
 800fd1a:	461e      	mov	r6, r3
 800fd1c:	460f      	mov	r7, r1
 800fd1e:	463d      	mov	r5, r7
 800fd20:	9808      	ldr	r0, [sp, #32]
 800fd22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd26:	f7ff fb4b 	bl	800f3c0 <__locale_ctype_ptr_l>
 800fd2a:	4420      	add	r0, r4
 800fd2c:	7843      	ldrb	r3, [r0, #1]
 800fd2e:	f013 0308 	ands.w	r3, r3, #8
 800fd32:	d132      	bne.n	800fd9a <_strtol_l.isra.0+0x8a>
 800fd34:	2c2d      	cmp	r4, #45	; 0x2d
 800fd36:	d132      	bne.n	800fd9e <_strtol_l.isra.0+0x8e>
 800fd38:	787c      	ldrb	r4, [r7, #1]
 800fd3a:	1cbd      	adds	r5, r7, #2
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	2e00      	cmp	r6, #0
 800fd40:	d05d      	beq.n	800fdfe <_strtol_l.isra.0+0xee>
 800fd42:	2e10      	cmp	r6, #16
 800fd44:	d109      	bne.n	800fd5a <_strtol_l.isra.0+0x4a>
 800fd46:	2c30      	cmp	r4, #48	; 0x30
 800fd48:	d107      	bne.n	800fd5a <_strtol_l.isra.0+0x4a>
 800fd4a:	782b      	ldrb	r3, [r5, #0]
 800fd4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fd50:	2b58      	cmp	r3, #88	; 0x58
 800fd52:	d14f      	bne.n	800fdf4 <_strtol_l.isra.0+0xe4>
 800fd54:	786c      	ldrb	r4, [r5, #1]
 800fd56:	2610      	movs	r6, #16
 800fd58:	3502      	adds	r5, #2
 800fd5a:	2a00      	cmp	r2, #0
 800fd5c:	bf14      	ite	ne
 800fd5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800fd62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800fd66:	2700      	movs	r7, #0
 800fd68:	fbb1 fcf6 	udiv	ip, r1, r6
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800fd72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800fd76:	2b09      	cmp	r3, #9
 800fd78:	d817      	bhi.n	800fdaa <_strtol_l.isra.0+0x9a>
 800fd7a:	461c      	mov	r4, r3
 800fd7c:	42a6      	cmp	r6, r4
 800fd7e:	dd23      	ble.n	800fdc8 <_strtol_l.isra.0+0xb8>
 800fd80:	1c7b      	adds	r3, r7, #1
 800fd82:	d007      	beq.n	800fd94 <_strtol_l.isra.0+0x84>
 800fd84:	4584      	cmp	ip, r0
 800fd86:	d31c      	bcc.n	800fdc2 <_strtol_l.isra.0+0xb2>
 800fd88:	d101      	bne.n	800fd8e <_strtol_l.isra.0+0x7e>
 800fd8a:	45a6      	cmp	lr, r4
 800fd8c:	db19      	blt.n	800fdc2 <_strtol_l.isra.0+0xb2>
 800fd8e:	fb00 4006 	mla	r0, r0, r6, r4
 800fd92:	2701      	movs	r7, #1
 800fd94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd98:	e7eb      	b.n	800fd72 <_strtol_l.isra.0+0x62>
 800fd9a:	462f      	mov	r7, r5
 800fd9c:	e7bf      	b.n	800fd1e <_strtol_l.isra.0+0xe>
 800fd9e:	2c2b      	cmp	r4, #43	; 0x2b
 800fda0:	bf04      	itt	eq
 800fda2:	1cbd      	addeq	r5, r7, #2
 800fda4:	787c      	ldrbeq	r4, [r7, #1]
 800fda6:	461a      	mov	r2, r3
 800fda8:	e7c9      	b.n	800fd3e <_strtol_l.isra.0+0x2e>
 800fdaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800fdae:	2b19      	cmp	r3, #25
 800fdb0:	d801      	bhi.n	800fdb6 <_strtol_l.isra.0+0xa6>
 800fdb2:	3c37      	subs	r4, #55	; 0x37
 800fdb4:	e7e2      	b.n	800fd7c <_strtol_l.isra.0+0x6c>
 800fdb6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800fdba:	2b19      	cmp	r3, #25
 800fdbc:	d804      	bhi.n	800fdc8 <_strtol_l.isra.0+0xb8>
 800fdbe:	3c57      	subs	r4, #87	; 0x57
 800fdc0:	e7dc      	b.n	800fd7c <_strtol_l.isra.0+0x6c>
 800fdc2:	f04f 37ff 	mov.w	r7, #4294967295
 800fdc6:	e7e5      	b.n	800fd94 <_strtol_l.isra.0+0x84>
 800fdc8:	1c7b      	adds	r3, r7, #1
 800fdca:	d108      	bne.n	800fdde <_strtol_l.isra.0+0xce>
 800fdcc:	2322      	movs	r3, #34	; 0x22
 800fdce:	f8c8 3000 	str.w	r3, [r8]
 800fdd2:	4608      	mov	r0, r1
 800fdd4:	f1ba 0f00 	cmp.w	sl, #0
 800fdd8:	d107      	bne.n	800fdea <_strtol_l.isra.0+0xda>
 800fdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdde:	b102      	cbz	r2, 800fde2 <_strtol_l.isra.0+0xd2>
 800fde0:	4240      	negs	r0, r0
 800fde2:	f1ba 0f00 	cmp.w	sl, #0
 800fde6:	d0f8      	beq.n	800fdda <_strtol_l.isra.0+0xca>
 800fde8:	b10f      	cbz	r7, 800fdee <_strtol_l.isra.0+0xde>
 800fdea:	f105 39ff 	add.w	r9, r5, #4294967295
 800fdee:	f8ca 9000 	str.w	r9, [sl]
 800fdf2:	e7f2      	b.n	800fdda <_strtol_l.isra.0+0xca>
 800fdf4:	2430      	movs	r4, #48	; 0x30
 800fdf6:	2e00      	cmp	r6, #0
 800fdf8:	d1af      	bne.n	800fd5a <_strtol_l.isra.0+0x4a>
 800fdfa:	2608      	movs	r6, #8
 800fdfc:	e7ad      	b.n	800fd5a <_strtol_l.isra.0+0x4a>
 800fdfe:	2c30      	cmp	r4, #48	; 0x30
 800fe00:	d0a3      	beq.n	800fd4a <_strtol_l.isra.0+0x3a>
 800fe02:	260a      	movs	r6, #10
 800fe04:	e7a9      	b.n	800fd5a <_strtol_l.isra.0+0x4a>
	...

0800fe08 <strtol>:
 800fe08:	4b08      	ldr	r3, [pc, #32]	; (800fe2c <strtol+0x24>)
 800fe0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe0c:	681c      	ldr	r4, [r3, #0]
 800fe0e:	4d08      	ldr	r5, [pc, #32]	; (800fe30 <strtol+0x28>)
 800fe10:	6a23      	ldr	r3, [r4, #32]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	bf08      	it	eq
 800fe16:	462b      	moveq	r3, r5
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	460a      	mov	r2, r1
 800fe1e:	4601      	mov	r1, r0
 800fe20:	4620      	mov	r0, r4
 800fe22:	f7ff ff75 	bl	800fd10 <_strtol_l.isra.0>
 800fe26:	b003      	add	sp, #12
 800fe28:	bd30      	pop	{r4, r5, pc}
 800fe2a:	bf00      	nop
 800fe2c:	200002cc 	.word	0x200002cc
 800fe30:	20000330 	.word	0x20000330

0800fe34 <viprintf>:
 800fe34:	4b09      	ldr	r3, [pc, #36]	; (800fe5c <viprintf+0x28>)
 800fe36:	b570      	push	{r4, r5, r6, lr}
 800fe38:	681c      	ldr	r4, [r3, #0]
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	460e      	mov	r6, r1
 800fe3e:	b124      	cbz	r4, 800fe4a <viprintf+0x16>
 800fe40:	69a3      	ldr	r3, [r4, #24]
 800fe42:	b913      	cbnz	r3, 800fe4a <viprintf+0x16>
 800fe44:	4620      	mov	r0, r4
 800fe46:	f000 f9d1 	bl	80101ec <__sinit>
 800fe4a:	4633      	mov	r3, r6
 800fe4c:	462a      	mov	r2, r5
 800fe4e:	68a1      	ldr	r1, [r4, #8]
 800fe50:	4620      	mov	r0, r4
 800fe52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe56:	f7ff bbdb 	b.w	800f610 <_vfiprintf_r>
 800fe5a:	bf00      	nop
 800fe5c:	200002cc 	.word	0x200002cc

0800fe60 <__swbuf_r>:
 800fe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe62:	460e      	mov	r6, r1
 800fe64:	4614      	mov	r4, r2
 800fe66:	4605      	mov	r5, r0
 800fe68:	b118      	cbz	r0, 800fe72 <__swbuf_r+0x12>
 800fe6a:	6983      	ldr	r3, [r0, #24]
 800fe6c:	b90b      	cbnz	r3, 800fe72 <__swbuf_r+0x12>
 800fe6e:	f000 f9bd 	bl	80101ec <__sinit>
 800fe72:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <__swbuf_r+0x98>)
 800fe74:	429c      	cmp	r4, r3
 800fe76:	d12a      	bne.n	800fece <__swbuf_r+0x6e>
 800fe78:	686c      	ldr	r4, [r5, #4]
 800fe7a:	69a3      	ldr	r3, [r4, #24]
 800fe7c:	60a3      	str	r3, [r4, #8]
 800fe7e:	89a3      	ldrh	r3, [r4, #12]
 800fe80:	071a      	lsls	r2, r3, #28
 800fe82:	d52e      	bpl.n	800fee2 <__swbuf_r+0x82>
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	b363      	cbz	r3, 800fee2 <__swbuf_r+0x82>
 800fe88:	6923      	ldr	r3, [r4, #16]
 800fe8a:	6820      	ldr	r0, [r4, #0]
 800fe8c:	1ac0      	subs	r0, r0, r3
 800fe8e:	6963      	ldr	r3, [r4, #20]
 800fe90:	b2f6      	uxtb	r6, r6
 800fe92:	4283      	cmp	r3, r0
 800fe94:	4637      	mov	r7, r6
 800fe96:	dc04      	bgt.n	800fea2 <__swbuf_r+0x42>
 800fe98:	4621      	mov	r1, r4
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f000 f93c 	bl	8010118 <_fflush_r>
 800fea0:	bb28      	cbnz	r0, 800feee <__swbuf_r+0x8e>
 800fea2:	68a3      	ldr	r3, [r4, #8]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	60a3      	str	r3, [r4, #8]
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	6022      	str	r2, [r4, #0]
 800feae:	701e      	strb	r6, [r3, #0]
 800feb0:	6963      	ldr	r3, [r4, #20]
 800feb2:	3001      	adds	r0, #1
 800feb4:	4283      	cmp	r3, r0
 800feb6:	d004      	beq.n	800fec2 <__swbuf_r+0x62>
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	07db      	lsls	r3, r3, #31
 800febc:	d519      	bpl.n	800fef2 <__swbuf_r+0x92>
 800febe:	2e0a      	cmp	r6, #10
 800fec0:	d117      	bne.n	800fef2 <__swbuf_r+0x92>
 800fec2:	4621      	mov	r1, r4
 800fec4:	4628      	mov	r0, r5
 800fec6:	f000 f927 	bl	8010118 <_fflush_r>
 800feca:	b190      	cbz	r0, 800fef2 <__swbuf_r+0x92>
 800fecc:	e00f      	b.n	800feee <__swbuf_r+0x8e>
 800fece:	4b0b      	ldr	r3, [pc, #44]	; (800fefc <__swbuf_r+0x9c>)
 800fed0:	429c      	cmp	r4, r3
 800fed2:	d101      	bne.n	800fed8 <__swbuf_r+0x78>
 800fed4:	68ac      	ldr	r4, [r5, #8]
 800fed6:	e7d0      	b.n	800fe7a <__swbuf_r+0x1a>
 800fed8:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <__swbuf_r+0xa0>)
 800feda:	429c      	cmp	r4, r3
 800fedc:	bf08      	it	eq
 800fede:	68ec      	ldreq	r4, [r5, #12]
 800fee0:	e7cb      	b.n	800fe7a <__swbuf_r+0x1a>
 800fee2:	4621      	mov	r1, r4
 800fee4:	4628      	mov	r0, r5
 800fee6:	f000 f81b 	bl	800ff20 <__swsetup_r>
 800feea:	2800      	cmp	r0, #0
 800feec:	d0cc      	beq.n	800fe88 <__swbuf_r+0x28>
 800feee:	f04f 37ff 	mov.w	r7, #4294967295
 800fef2:	4638      	mov	r0, r7
 800fef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fef6:	bf00      	nop
 800fef8:	08012018 	.word	0x08012018
 800fefc:	08012038 	.word	0x08012038
 800ff00:	08011ff8 	.word	0x08011ff8

0800ff04 <__ascii_wctomb>:
 800ff04:	b149      	cbz	r1, 800ff1a <__ascii_wctomb+0x16>
 800ff06:	2aff      	cmp	r2, #255	; 0xff
 800ff08:	bf85      	ittet	hi
 800ff0a:	238a      	movhi	r3, #138	; 0x8a
 800ff0c:	6003      	strhi	r3, [r0, #0]
 800ff0e:	700a      	strbls	r2, [r1, #0]
 800ff10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff14:	bf98      	it	ls
 800ff16:	2001      	movls	r0, #1
 800ff18:	4770      	bx	lr
 800ff1a:	4608      	mov	r0, r1
 800ff1c:	4770      	bx	lr
	...

0800ff20 <__swsetup_r>:
 800ff20:	4b32      	ldr	r3, [pc, #200]	; (800ffec <__swsetup_r+0xcc>)
 800ff22:	b570      	push	{r4, r5, r6, lr}
 800ff24:	681d      	ldr	r5, [r3, #0]
 800ff26:	4606      	mov	r6, r0
 800ff28:	460c      	mov	r4, r1
 800ff2a:	b125      	cbz	r5, 800ff36 <__swsetup_r+0x16>
 800ff2c:	69ab      	ldr	r3, [r5, #24]
 800ff2e:	b913      	cbnz	r3, 800ff36 <__swsetup_r+0x16>
 800ff30:	4628      	mov	r0, r5
 800ff32:	f000 f95b 	bl	80101ec <__sinit>
 800ff36:	4b2e      	ldr	r3, [pc, #184]	; (800fff0 <__swsetup_r+0xd0>)
 800ff38:	429c      	cmp	r4, r3
 800ff3a:	d10f      	bne.n	800ff5c <__swsetup_r+0x3c>
 800ff3c:	686c      	ldr	r4, [r5, #4]
 800ff3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	0715      	lsls	r5, r2, #28
 800ff46:	d42c      	bmi.n	800ffa2 <__swsetup_r+0x82>
 800ff48:	06d0      	lsls	r0, r2, #27
 800ff4a:	d411      	bmi.n	800ff70 <__swsetup_r+0x50>
 800ff4c:	2209      	movs	r2, #9
 800ff4e:	6032      	str	r2, [r6, #0]
 800ff50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff54:	81a3      	strh	r3, [r4, #12]
 800ff56:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5a:	e03e      	b.n	800ffda <__swsetup_r+0xba>
 800ff5c:	4b25      	ldr	r3, [pc, #148]	; (800fff4 <__swsetup_r+0xd4>)
 800ff5e:	429c      	cmp	r4, r3
 800ff60:	d101      	bne.n	800ff66 <__swsetup_r+0x46>
 800ff62:	68ac      	ldr	r4, [r5, #8]
 800ff64:	e7eb      	b.n	800ff3e <__swsetup_r+0x1e>
 800ff66:	4b24      	ldr	r3, [pc, #144]	; (800fff8 <__swsetup_r+0xd8>)
 800ff68:	429c      	cmp	r4, r3
 800ff6a:	bf08      	it	eq
 800ff6c:	68ec      	ldreq	r4, [r5, #12]
 800ff6e:	e7e6      	b.n	800ff3e <__swsetup_r+0x1e>
 800ff70:	0751      	lsls	r1, r2, #29
 800ff72:	d512      	bpl.n	800ff9a <__swsetup_r+0x7a>
 800ff74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff76:	b141      	cbz	r1, 800ff8a <__swsetup_r+0x6a>
 800ff78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff7c:	4299      	cmp	r1, r3
 800ff7e:	d002      	beq.n	800ff86 <__swsetup_r+0x66>
 800ff80:	4630      	mov	r0, r6
 800ff82:	f7ff fa73 	bl	800f46c <_free_r>
 800ff86:	2300      	movs	r3, #0
 800ff88:	6363      	str	r3, [r4, #52]	; 0x34
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff90:	81a3      	strh	r3, [r4, #12]
 800ff92:	2300      	movs	r3, #0
 800ff94:	6063      	str	r3, [r4, #4]
 800ff96:	6923      	ldr	r3, [r4, #16]
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	89a3      	ldrh	r3, [r4, #12]
 800ff9c:	f043 0308 	orr.w	r3, r3, #8
 800ffa0:	81a3      	strh	r3, [r4, #12]
 800ffa2:	6923      	ldr	r3, [r4, #16]
 800ffa4:	b94b      	cbnz	r3, 800ffba <__swsetup_r+0x9a>
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ffac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffb0:	d003      	beq.n	800ffba <__swsetup_r+0x9a>
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f000 f9c7 	bl	8010348 <__smakebuf_r>
 800ffba:	89a2      	ldrh	r2, [r4, #12]
 800ffbc:	f012 0301 	ands.w	r3, r2, #1
 800ffc0:	d00c      	beq.n	800ffdc <__swsetup_r+0xbc>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	60a3      	str	r3, [r4, #8]
 800ffc6:	6963      	ldr	r3, [r4, #20]
 800ffc8:	425b      	negs	r3, r3
 800ffca:	61a3      	str	r3, [r4, #24]
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	b953      	cbnz	r3, 800ffe6 <__swsetup_r+0xc6>
 800ffd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ffd8:	d1ba      	bne.n	800ff50 <__swsetup_r+0x30>
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
 800ffdc:	0792      	lsls	r2, r2, #30
 800ffde:	bf58      	it	pl
 800ffe0:	6963      	ldrpl	r3, [r4, #20]
 800ffe2:	60a3      	str	r3, [r4, #8]
 800ffe4:	e7f2      	b.n	800ffcc <__swsetup_r+0xac>
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	e7f7      	b.n	800ffda <__swsetup_r+0xba>
 800ffea:	bf00      	nop
 800ffec:	200002cc 	.word	0x200002cc
 800fff0:	08012018 	.word	0x08012018
 800fff4:	08012038 	.word	0x08012038
 800fff8:	08011ff8 	.word	0x08011ff8

0800fffc <abort>:
 800fffc:	b508      	push	{r3, lr}
 800fffe:	2006      	movs	r0, #6
 8010000:	f000 fb9e 	bl	8010740 <raise>
 8010004:	2001      	movs	r0, #1
 8010006:	f7fc f945 	bl	800c294 <_exit>
	...

0801000c <__sflush_r>:
 801000c:	898a      	ldrh	r2, [r1, #12]
 801000e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010012:	4605      	mov	r5, r0
 8010014:	0710      	lsls	r0, r2, #28
 8010016:	460c      	mov	r4, r1
 8010018:	d458      	bmi.n	80100cc <__sflush_r+0xc0>
 801001a:	684b      	ldr	r3, [r1, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	dc05      	bgt.n	801002c <__sflush_r+0x20>
 8010020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010022:	2b00      	cmp	r3, #0
 8010024:	dc02      	bgt.n	801002c <__sflush_r+0x20>
 8010026:	2000      	movs	r0, #0
 8010028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801002e:	2e00      	cmp	r6, #0
 8010030:	d0f9      	beq.n	8010026 <__sflush_r+0x1a>
 8010032:	2300      	movs	r3, #0
 8010034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010038:	682f      	ldr	r7, [r5, #0]
 801003a:	6a21      	ldr	r1, [r4, #32]
 801003c:	602b      	str	r3, [r5, #0]
 801003e:	d032      	beq.n	80100a6 <__sflush_r+0x9a>
 8010040:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010042:	89a3      	ldrh	r3, [r4, #12]
 8010044:	075a      	lsls	r2, r3, #29
 8010046:	d505      	bpl.n	8010054 <__sflush_r+0x48>
 8010048:	6863      	ldr	r3, [r4, #4]
 801004a:	1ac0      	subs	r0, r0, r3
 801004c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801004e:	b10b      	cbz	r3, 8010054 <__sflush_r+0x48>
 8010050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010052:	1ac0      	subs	r0, r0, r3
 8010054:	2300      	movs	r3, #0
 8010056:	4602      	mov	r2, r0
 8010058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801005a:	6a21      	ldr	r1, [r4, #32]
 801005c:	4628      	mov	r0, r5
 801005e:	47b0      	blx	r6
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	d106      	bne.n	8010074 <__sflush_r+0x68>
 8010066:	6829      	ldr	r1, [r5, #0]
 8010068:	291d      	cmp	r1, #29
 801006a:	d848      	bhi.n	80100fe <__sflush_r+0xf2>
 801006c:	4a29      	ldr	r2, [pc, #164]	; (8010114 <__sflush_r+0x108>)
 801006e:	40ca      	lsrs	r2, r1
 8010070:	07d6      	lsls	r6, r2, #31
 8010072:	d544      	bpl.n	80100fe <__sflush_r+0xf2>
 8010074:	2200      	movs	r2, #0
 8010076:	6062      	str	r2, [r4, #4]
 8010078:	04d9      	lsls	r1, r3, #19
 801007a:	6922      	ldr	r2, [r4, #16]
 801007c:	6022      	str	r2, [r4, #0]
 801007e:	d504      	bpl.n	801008a <__sflush_r+0x7e>
 8010080:	1c42      	adds	r2, r0, #1
 8010082:	d101      	bne.n	8010088 <__sflush_r+0x7c>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	b903      	cbnz	r3, 801008a <__sflush_r+0x7e>
 8010088:	6560      	str	r0, [r4, #84]	; 0x54
 801008a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801008c:	602f      	str	r7, [r5, #0]
 801008e:	2900      	cmp	r1, #0
 8010090:	d0c9      	beq.n	8010026 <__sflush_r+0x1a>
 8010092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010096:	4299      	cmp	r1, r3
 8010098:	d002      	beq.n	80100a0 <__sflush_r+0x94>
 801009a:	4628      	mov	r0, r5
 801009c:	f7ff f9e6 	bl	800f46c <_free_r>
 80100a0:	2000      	movs	r0, #0
 80100a2:	6360      	str	r0, [r4, #52]	; 0x34
 80100a4:	e7c0      	b.n	8010028 <__sflush_r+0x1c>
 80100a6:	2301      	movs	r3, #1
 80100a8:	4628      	mov	r0, r5
 80100aa:	47b0      	blx	r6
 80100ac:	1c41      	adds	r1, r0, #1
 80100ae:	d1c8      	bne.n	8010042 <__sflush_r+0x36>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d0c5      	beq.n	8010042 <__sflush_r+0x36>
 80100b6:	2b1d      	cmp	r3, #29
 80100b8:	d001      	beq.n	80100be <__sflush_r+0xb2>
 80100ba:	2b16      	cmp	r3, #22
 80100bc:	d101      	bne.n	80100c2 <__sflush_r+0xb6>
 80100be:	602f      	str	r7, [r5, #0]
 80100c0:	e7b1      	b.n	8010026 <__sflush_r+0x1a>
 80100c2:	89a3      	ldrh	r3, [r4, #12]
 80100c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100c8:	81a3      	strh	r3, [r4, #12]
 80100ca:	e7ad      	b.n	8010028 <__sflush_r+0x1c>
 80100cc:	690f      	ldr	r7, [r1, #16]
 80100ce:	2f00      	cmp	r7, #0
 80100d0:	d0a9      	beq.n	8010026 <__sflush_r+0x1a>
 80100d2:	0793      	lsls	r3, r2, #30
 80100d4:	680e      	ldr	r6, [r1, #0]
 80100d6:	bf08      	it	eq
 80100d8:	694b      	ldreq	r3, [r1, #20]
 80100da:	600f      	str	r7, [r1, #0]
 80100dc:	bf18      	it	ne
 80100de:	2300      	movne	r3, #0
 80100e0:	eba6 0807 	sub.w	r8, r6, r7
 80100e4:	608b      	str	r3, [r1, #8]
 80100e6:	f1b8 0f00 	cmp.w	r8, #0
 80100ea:	dd9c      	ble.n	8010026 <__sflush_r+0x1a>
 80100ec:	4643      	mov	r3, r8
 80100ee:	463a      	mov	r2, r7
 80100f0:	6a21      	ldr	r1, [r4, #32]
 80100f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100f4:	4628      	mov	r0, r5
 80100f6:	47b0      	blx	r6
 80100f8:	2800      	cmp	r0, #0
 80100fa:	dc06      	bgt.n	801010a <__sflush_r+0xfe>
 80100fc:	89a3      	ldrh	r3, [r4, #12]
 80100fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010102:	81a3      	strh	r3, [r4, #12]
 8010104:	f04f 30ff 	mov.w	r0, #4294967295
 8010108:	e78e      	b.n	8010028 <__sflush_r+0x1c>
 801010a:	4407      	add	r7, r0
 801010c:	eba8 0800 	sub.w	r8, r8, r0
 8010110:	e7e9      	b.n	80100e6 <__sflush_r+0xda>
 8010112:	bf00      	nop
 8010114:	20400001 	.word	0x20400001

08010118 <_fflush_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	690b      	ldr	r3, [r1, #16]
 801011c:	4605      	mov	r5, r0
 801011e:	460c      	mov	r4, r1
 8010120:	b1db      	cbz	r3, 801015a <_fflush_r+0x42>
 8010122:	b118      	cbz	r0, 801012c <_fflush_r+0x14>
 8010124:	6983      	ldr	r3, [r0, #24]
 8010126:	b90b      	cbnz	r3, 801012c <_fflush_r+0x14>
 8010128:	f000 f860 	bl	80101ec <__sinit>
 801012c:	4b0c      	ldr	r3, [pc, #48]	; (8010160 <_fflush_r+0x48>)
 801012e:	429c      	cmp	r4, r3
 8010130:	d109      	bne.n	8010146 <_fflush_r+0x2e>
 8010132:	686c      	ldr	r4, [r5, #4]
 8010134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010138:	b17b      	cbz	r3, 801015a <_fflush_r+0x42>
 801013a:	4621      	mov	r1, r4
 801013c:	4628      	mov	r0, r5
 801013e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010142:	f7ff bf63 	b.w	801000c <__sflush_r>
 8010146:	4b07      	ldr	r3, [pc, #28]	; (8010164 <_fflush_r+0x4c>)
 8010148:	429c      	cmp	r4, r3
 801014a:	d101      	bne.n	8010150 <_fflush_r+0x38>
 801014c:	68ac      	ldr	r4, [r5, #8]
 801014e:	e7f1      	b.n	8010134 <_fflush_r+0x1c>
 8010150:	4b05      	ldr	r3, [pc, #20]	; (8010168 <_fflush_r+0x50>)
 8010152:	429c      	cmp	r4, r3
 8010154:	bf08      	it	eq
 8010156:	68ec      	ldreq	r4, [r5, #12]
 8010158:	e7ec      	b.n	8010134 <_fflush_r+0x1c>
 801015a:	2000      	movs	r0, #0
 801015c:	bd38      	pop	{r3, r4, r5, pc}
 801015e:	bf00      	nop
 8010160:	08012018 	.word	0x08012018
 8010164:	08012038 	.word	0x08012038
 8010168:	08011ff8 	.word	0x08011ff8

0801016c <std>:
 801016c:	2300      	movs	r3, #0
 801016e:	b510      	push	{r4, lr}
 8010170:	4604      	mov	r4, r0
 8010172:	e9c0 3300 	strd	r3, r3, [r0]
 8010176:	6083      	str	r3, [r0, #8]
 8010178:	8181      	strh	r1, [r0, #12]
 801017a:	6643      	str	r3, [r0, #100]	; 0x64
 801017c:	81c2      	strh	r2, [r0, #14]
 801017e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010182:	6183      	str	r3, [r0, #24]
 8010184:	4619      	mov	r1, r3
 8010186:	2208      	movs	r2, #8
 8010188:	305c      	adds	r0, #92	; 0x5c
 801018a:	f7ff f967 	bl	800f45c <memset>
 801018e:	4b05      	ldr	r3, [pc, #20]	; (80101a4 <std+0x38>)
 8010190:	6263      	str	r3, [r4, #36]	; 0x24
 8010192:	4b05      	ldr	r3, [pc, #20]	; (80101a8 <std+0x3c>)
 8010194:	62a3      	str	r3, [r4, #40]	; 0x28
 8010196:	4b05      	ldr	r3, [pc, #20]	; (80101ac <std+0x40>)
 8010198:	62e3      	str	r3, [r4, #44]	; 0x2c
 801019a:	4b05      	ldr	r3, [pc, #20]	; (80101b0 <std+0x44>)
 801019c:	6224      	str	r4, [r4, #32]
 801019e:	6323      	str	r3, [r4, #48]	; 0x30
 80101a0:	bd10      	pop	{r4, pc}
 80101a2:	bf00      	nop
 80101a4:	08010779 	.word	0x08010779
 80101a8:	0801079b 	.word	0x0801079b
 80101ac:	080107d3 	.word	0x080107d3
 80101b0:	080107f7 	.word	0x080107f7

080101b4 <_cleanup_r>:
 80101b4:	4901      	ldr	r1, [pc, #4]	; (80101bc <_cleanup_r+0x8>)
 80101b6:	f000 b885 	b.w	80102c4 <_fwalk_reent>
 80101ba:	bf00      	nop
 80101bc:	08010119 	.word	0x08010119

080101c0 <__sfmoreglue>:
 80101c0:	b570      	push	{r4, r5, r6, lr}
 80101c2:	1e4a      	subs	r2, r1, #1
 80101c4:	2568      	movs	r5, #104	; 0x68
 80101c6:	4355      	muls	r5, r2
 80101c8:	460e      	mov	r6, r1
 80101ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80101ce:	f7ff f99b 	bl	800f508 <_malloc_r>
 80101d2:	4604      	mov	r4, r0
 80101d4:	b140      	cbz	r0, 80101e8 <__sfmoreglue+0x28>
 80101d6:	2100      	movs	r1, #0
 80101d8:	e9c0 1600 	strd	r1, r6, [r0]
 80101dc:	300c      	adds	r0, #12
 80101de:	60a0      	str	r0, [r4, #8]
 80101e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80101e4:	f7ff f93a 	bl	800f45c <memset>
 80101e8:	4620      	mov	r0, r4
 80101ea:	bd70      	pop	{r4, r5, r6, pc}

080101ec <__sinit>:
 80101ec:	6983      	ldr	r3, [r0, #24]
 80101ee:	b510      	push	{r4, lr}
 80101f0:	4604      	mov	r4, r0
 80101f2:	bb33      	cbnz	r3, 8010242 <__sinit+0x56>
 80101f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80101f8:	6503      	str	r3, [r0, #80]	; 0x50
 80101fa:	4b12      	ldr	r3, [pc, #72]	; (8010244 <__sinit+0x58>)
 80101fc:	4a12      	ldr	r2, [pc, #72]	; (8010248 <__sinit+0x5c>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6282      	str	r2, [r0, #40]	; 0x28
 8010202:	4298      	cmp	r0, r3
 8010204:	bf04      	itt	eq
 8010206:	2301      	moveq	r3, #1
 8010208:	6183      	streq	r3, [r0, #24]
 801020a:	f000 f81f 	bl	801024c <__sfp>
 801020e:	6060      	str	r0, [r4, #4]
 8010210:	4620      	mov	r0, r4
 8010212:	f000 f81b 	bl	801024c <__sfp>
 8010216:	60a0      	str	r0, [r4, #8]
 8010218:	4620      	mov	r0, r4
 801021a:	f000 f817 	bl	801024c <__sfp>
 801021e:	2200      	movs	r2, #0
 8010220:	60e0      	str	r0, [r4, #12]
 8010222:	2104      	movs	r1, #4
 8010224:	6860      	ldr	r0, [r4, #4]
 8010226:	f7ff ffa1 	bl	801016c <std>
 801022a:	2201      	movs	r2, #1
 801022c:	2109      	movs	r1, #9
 801022e:	68a0      	ldr	r0, [r4, #8]
 8010230:	f7ff ff9c 	bl	801016c <std>
 8010234:	2202      	movs	r2, #2
 8010236:	2112      	movs	r1, #18
 8010238:	68e0      	ldr	r0, [r4, #12]
 801023a:	f7ff ff97 	bl	801016c <std>
 801023e:	2301      	movs	r3, #1
 8010240:	61a3      	str	r3, [r4, #24]
 8010242:	bd10      	pop	{r4, pc}
 8010244:	08011eb4 	.word	0x08011eb4
 8010248:	080101b5 	.word	0x080101b5

0801024c <__sfp>:
 801024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024e:	4b1b      	ldr	r3, [pc, #108]	; (80102bc <__sfp+0x70>)
 8010250:	681e      	ldr	r6, [r3, #0]
 8010252:	69b3      	ldr	r3, [r6, #24]
 8010254:	4607      	mov	r7, r0
 8010256:	b913      	cbnz	r3, 801025e <__sfp+0x12>
 8010258:	4630      	mov	r0, r6
 801025a:	f7ff ffc7 	bl	80101ec <__sinit>
 801025e:	3648      	adds	r6, #72	; 0x48
 8010260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010264:	3b01      	subs	r3, #1
 8010266:	d503      	bpl.n	8010270 <__sfp+0x24>
 8010268:	6833      	ldr	r3, [r6, #0]
 801026a:	b133      	cbz	r3, 801027a <__sfp+0x2e>
 801026c:	6836      	ldr	r6, [r6, #0]
 801026e:	e7f7      	b.n	8010260 <__sfp+0x14>
 8010270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010274:	b16d      	cbz	r5, 8010292 <__sfp+0x46>
 8010276:	3468      	adds	r4, #104	; 0x68
 8010278:	e7f4      	b.n	8010264 <__sfp+0x18>
 801027a:	2104      	movs	r1, #4
 801027c:	4638      	mov	r0, r7
 801027e:	f7ff ff9f 	bl	80101c0 <__sfmoreglue>
 8010282:	6030      	str	r0, [r6, #0]
 8010284:	2800      	cmp	r0, #0
 8010286:	d1f1      	bne.n	801026c <__sfp+0x20>
 8010288:	230c      	movs	r3, #12
 801028a:	603b      	str	r3, [r7, #0]
 801028c:	4604      	mov	r4, r0
 801028e:	4620      	mov	r0, r4
 8010290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010292:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <__sfp+0x74>)
 8010294:	6665      	str	r5, [r4, #100]	; 0x64
 8010296:	e9c4 5500 	strd	r5, r5, [r4]
 801029a:	60a5      	str	r5, [r4, #8]
 801029c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80102a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80102a4:	2208      	movs	r2, #8
 80102a6:	4629      	mov	r1, r5
 80102a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80102ac:	f7ff f8d6 	bl	800f45c <memset>
 80102b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80102b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80102b8:	e7e9      	b.n	801028e <__sfp+0x42>
 80102ba:	bf00      	nop
 80102bc:	08011eb4 	.word	0x08011eb4
 80102c0:	ffff0001 	.word	0xffff0001

080102c4 <_fwalk_reent>:
 80102c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102c8:	4680      	mov	r8, r0
 80102ca:	4689      	mov	r9, r1
 80102cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80102d0:	2600      	movs	r6, #0
 80102d2:	b914      	cbnz	r4, 80102da <_fwalk_reent+0x16>
 80102d4:	4630      	mov	r0, r6
 80102d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80102de:	3f01      	subs	r7, #1
 80102e0:	d501      	bpl.n	80102e6 <_fwalk_reent+0x22>
 80102e2:	6824      	ldr	r4, [r4, #0]
 80102e4:	e7f5      	b.n	80102d2 <_fwalk_reent+0xe>
 80102e6:	89ab      	ldrh	r3, [r5, #12]
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d907      	bls.n	80102fc <_fwalk_reent+0x38>
 80102ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102f0:	3301      	adds	r3, #1
 80102f2:	d003      	beq.n	80102fc <_fwalk_reent+0x38>
 80102f4:	4629      	mov	r1, r5
 80102f6:	4640      	mov	r0, r8
 80102f8:	47c8      	blx	r9
 80102fa:	4306      	orrs	r6, r0
 80102fc:	3568      	adds	r5, #104	; 0x68
 80102fe:	e7ee      	b.n	80102de <_fwalk_reent+0x1a>

08010300 <__swhatbuf_r>:
 8010300:	b570      	push	{r4, r5, r6, lr}
 8010302:	460e      	mov	r6, r1
 8010304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010308:	2900      	cmp	r1, #0
 801030a:	b096      	sub	sp, #88	; 0x58
 801030c:	4614      	mov	r4, r2
 801030e:	461d      	mov	r5, r3
 8010310:	da07      	bge.n	8010322 <__swhatbuf_r+0x22>
 8010312:	2300      	movs	r3, #0
 8010314:	602b      	str	r3, [r5, #0]
 8010316:	89b3      	ldrh	r3, [r6, #12]
 8010318:	061a      	lsls	r2, r3, #24
 801031a:	d410      	bmi.n	801033e <__swhatbuf_r+0x3e>
 801031c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010320:	e00e      	b.n	8010340 <__swhatbuf_r+0x40>
 8010322:	466a      	mov	r2, sp
 8010324:	f000 fa8e 	bl	8010844 <_fstat_r>
 8010328:	2800      	cmp	r0, #0
 801032a:	dbf2      	blt.n	8010312 <__swhatbuf_r+0x12>
 801032c:	9a01      	ldr	r2, [sp, #4]
 801032e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010336:	425a      	negs	r2, r3
 8010338:	415a      	adcs	r2, r3
 801033a:	602a      	str	r2, [r5, #0]
 801033c:	e7ee      	b.n	801031c <__swhatbuf_r+0x1c>
 801033e:	2340      	movs	r3, #64	; 0x40
 8010340:	2000      	movs	r0, #0
 8010342:	6023      	str	r3, [r4, #0]
 8010344:	b016      	add	sp, #88	; 0x58
 8010346:	bd70      	pop	{r4, r5, r6, pc}

08010348 <__smakebuf_r>:
 8010348:	898b      	ldrh	r3, [r1, #12]
 801034a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801034c:	079d      	lsls	r5, r3, #30
 801034e:	4606      	mov	r6, r0
 8010350:	460c      	mov	r4, r1
 8010352:	d507      	bpl.n	8010364 <__smakebuf_r+0x1c>
 8010354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	6123      	str	r3, [r4, #16]
 801035c:	2301      	movs	r3, #1
 801035e:	6163      	str	r3, [r4, #20]
 8010360:	b002      	add	sp, #8
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	ab01      	add	r3, sp, #4
 8010366:	466a      	mov	r2, sp
 8010368:	f7ff ffca 	bl	8010300 <__swhatbuf_r>
 801036c:	9900      	ldr	r1, [sp, #0]
 801036e:	4605      	mov	r5, r0
 8010370:	4630      	mov	r0, r6
 8010372:	f7ff f8c9 	bl	800f508 <_malloc_r>
 8010376:	b948      	cbnz	r0, 801038c <__smakebuf_r+0x44>
 8010378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801037c:	059a      	lsls	r2, r3, #22
 801037e:	d4ef      	bmi.n	8010360 <__smakebuf_r+0x18>
 8010380:	f023 0303 	bic.w	r3, r3, #3
 8010384:	f043 0302 	orr.w	r3, r3, #2
 8010388:	81a3      	strh	r3, [r4, #12]
 801038a:	e7e3      	b.n	8010354 <__smakebuf_r+0xc>
 801038c:	4b0d      	ldr	r3, [pc, #52]	; (80103c4 <__smakebuf_r+0x7c>)
 801038e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010390:	89a3      	ldrh	r3, [r4, #12]
 8010392:	6020      	str	r0, [r4, #0]
 8010394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	9b00      	ldr	r3, [sp, #0]
 801039c:	6163      	str	r3, [r4, #20]
 801039e:	9b01      	ldr	r3, [sp, #4]
 80103a0:	6120      	str	r0, [r4, #16]
 80103a2:	b15b      	cbz	r3, 80103bc <__smakebuf_r+0x74>
 80103a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103a8:	4630      	mov	r0, r6
 80103aa:	f000 fa5d 	bl	8010868 <_isatty_r>
 80103ae:	b128      	cbz	r0, 80103bc <__smakebuf_r+0x74>
 80103b0:	89a3      	ldrh	r3, [r4, #12]
 80103b2:	f023 0303 	bic.w	r3, r3, #3
 80103b6:	f043 0301 	orr.w	r3, r3, #1
 80103ba:	81a3      	strh	r3, [r4, #12]
 80103bc:	89a3      	ldrh	r3, [r4, #12]
 80103be:	431d      	orrs	r5, r3
 80103c0:	81a5      	strh	r5, [r4, #12]
 80103c2:	e7cd      	b.n	8010360 <__smakebuf_r+0x18>
 80103c4:	080101b5 	.word	0x080101b5

080103c8 <memmove>:
 80103c8:	4288      	cmp	r0, r1
 80103ca:	b510      	push	{r4, lr}
 80103cc:	eb01 0302 	add.w	r3, r1, r2
 80103d0:	d807      	bhi.n	80103e2 <memmove+0x1a>
 80103d2:	1e42      	subs	r2, r0, #1
 80103d4:	4299      	cmp	r1, r3
 80103d6:	d00a      	beq.n	80103ee <memmove+0x26>
 80103d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80103e0:	e7f8      	b.n	80103d4 <memmove+0xc>
 80103e2:	4283      	cmp	r3, r0
 80103e4:	d9f5      	bls.n	80103d2 <memmove+0xa>
 80103e6:	1881      	adds	r1, r0, r2
 80103e8:	1ad2      	subs	r2, r2, r3
 80103ea:	42d3      	cmn	r3, r2
 80103ec:	d100      	bne.n	80103f0 <memmove+0x28>
 80103ee:	bd10      	pop	{r4, pc}
 80103f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80103f8:	e7f7      	b.n	80103ea <memmove+0x22>

080103fa <__malloc_lock>:
 80103fa:	4770      	bx	lr

080103fc <__malloc_unlock>:
 80103fc:	4770      	bx	lr

080103fe <_realloc_r>:
 80103fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010400:	4607      	mov	r7, r0
 8010402:	4614      	mov	r4, r2
 8010404:	460e      	mov	r6, r1
 8010406:	b921      	cbnz	r1, 8010412 <_realloc_r+0x14>
 8010408:	4611      	mov	r1, r2
 801040a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801040e:	f7ff b87b 	b.w	800f508 <_malloc_r>
 8010412:	b922      	cbnz	r2, 801041e <_realloc_r+0x20>
 8010414:	f7ff f82a 	bl	800f46c <_free_r>
 8010418:	4625      	mov	r5, r4
 801041a:	4628      	mov	r0, r5
 801041c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801041e:	f000 fa45 	bl	80108ac <_malloc_usable_size_r>
 8010422:	42a0      	cmp	r0, r4
 8010424:	d20f      	bcs.n	8010446 <_realloc_r+0x48>
 8010426:	4621      	mov	r1, r4
 8010428:	4638      	mov	r0, r7
 801042a:	f7ff f86d 	bl	800f508 <_malloc_r>
 801042e:	4605      	mov	r5, r0
 8010430:	2800      	cmp	r0, #0
 8010432:	d0f2      	beq.n	801041a <_realloc_r+0x1c>
 8010434:	4631      	mov	r1, r6
 8010436:	4622      	mov	r2, r4
 8010438:	f7ff f805 	bl	800f446 <memcpy>
 801043c:	4631      	mov	r1, r6
 801043e:	4638      	mov	r0, r7
 8010440:	f7ff f814 	bl	800f46c <_free_r>
 8010444:	e7e9      	b.n	801041a <_realloc_r+0x1c>
 8010446:	4635      	mov	r5, r6
 8010448:	e7e7      	b.n	801041a <_realloc_r+0x1c>

0801044a <__ssputs_r>:
 801044a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801044e:	688e      	ldr	r6, [r1, #8]
 8010450:	429e      	cmp	r6, r3
 8010452:	4682      	mov	sl, r0
 8010454:	460c      	mov	r4, r1
 8010456:	4690      	mov	r8, r2
 8010458:	4699      	mov	r9, r3
 801045a:	d837      	bhi.n	80104cc <__ssputs_r+0x82>
 801045c:	898a      	ldrh	r2, [r1, #12]
 801045e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010462:	d031      	beq.n	80104c8 <__ssputs_r+0x7e>
 8010464:	6825      	ldr	r5, [r4, #0]
 8010466:	6909      	ldr	r1, [r1, #16]
 8010468:	1a6f      	subs	r7, r5, r1
 801046a:	6965      	ldr	r5, [r4, #20]
 801046c:	2302      	movs	r3, #2
 801046e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010472:	fb95 f5f3 	sdiv	r5, r5, r3
 8010476:	f109 0301 	add.w	r3, r9, #1
 801047a:	443b      	add	r3, r7
 801047c:	429d      	cmp	r5, r3
 801047e:	bf38      	it	cc
 8010480:	461d      	movcc	r5, r3
 8010482:	0553      	lsls	r3, r2, #21
 8010484:	d530      	bpl.n	80104e8 <__ssputs_r+0x9e>
 8010486:	4629      	mov	r1, r5
 8010488:	f7ff f83e 	bl	800f508 <_malloc_r>
 801048c:	4606      	mov	r6, r0
 801048e:	b950      	cbnz	r0, 80104a6 <__ssputs_r+0x5c>
 8010490:	230c      	movs	r3, #12
 8010492:	f8ca 3000 	str.w	r3, [sl]
 8010496:	89a3      	ldrh	r3, [r4, #12]
 8010498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801049c:	81a3      	strh	r3, [r4, #12]
 801049e:	f04f 30ff 	mov.w	r0, #4294967295
 80104a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a6:	463a      	mov	r2, r7
 80104a8:	6921      	ldr	r1, [r4, #16]
 80104aa:	f7fe ffcc 	bl	800f446 <memcpy>
 80104ae:	89a3      	ldrh	r3, [r4, #12]
 80104b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80104b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104b8:	81a3      	strh	r3, [r4, #12]
 80104ba:	6126      	str	r6, [r4, #16]
 80104bc:	6165      	str	r5, [r4, #20]
 80104be:	443e      	add	r6, r7
 80104c0:	1bed      	subs	r5, r5, r7
 80104c2:	6026      	str	r6, [r4, #0]
 80104c4:	60a5      	str	r5, [r4, #8]
 80104c6:	464e      	mov	r6, r9
 80104c8:	454e      	cmp	r6, r9
 80104ca:	d900      	bls.n	80104ce <__ssputs_r+0x84>
 80104cc:	464e      	mov	r6, r9
 80104ce:	4632      	mov	r2, r6
 80104d0:	4641      	mov	r1, r8
 80104d2:	6820      	ldr	r0, [r4, #0]
 80104d4:	f7ff ff78 	bl	80103c8 <memmove>
 80104d8:	68a3      	ldr	r3, [r4, #8]
 80104da:	1b9b      	subs	r3, r3, r6
 80104dc:	60a3      	str	r3, [r4, #8]
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	441e      	add	r6, r3
 80104e2:	6026      	str	r6, [r4, #0]
 80104e4:	2000      	movs	r0, #0
 80104e6:	e7dc      	b.n	80104a2 <__ssputs_r+0x58>
 80104e8:	462a      	mov	r2, r5
 80104ea:	f7ff ff88 	bl	80103fe <_realloc_r>
 80104ee:	4606      	mov	r6, r0
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d1e2      	bne.n	80104ba <__ssputs_r+0x70>
 80104f4:	6921      	ldr	r1, [r4, #16]
 80104f6:	4650      	mov	r0, sl
 80104f8:	f7fe ffb8 	bl	800f46c <_free_r>
 80104fc:	e7c8      	b.n	8010490 <__ssputs_r+0x46>
	...

08010500 <_svfiprintf_r>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	461d      	mov	r5, r3
 8010506:	898b      	ldrh	r3, [r1, #12]
 8010508:	061f      	lsls	r7, r3, #24
 801050a:	b09d      	sub	sp, #116	; 0x74
 801050c:	4680      	mov	r8, r0
 801050e:	460c      	mov	r4, r1
 8010510:	4616      	mov	r6, r2
 8010512:	d50f      	bpl.n	8010534 <_svfiprintf_r+0x34>
 8010514:	690b      	ldr	r3, [r1, #16]
 8010516:	b96b      	cbnz	r3, 8010534 <_svfiprintf_r+0x34>
 8010518:	2140      	movs	r1, #64	; 0x40
 801051a:	f7fe fff5 	bl	800f508 <_malloc_r>
 801051e:	6020      	str	r0, [r4, #0]
 8010520:	6120      	str	r0, [r4, #16]
 8010522:	b928      	cbnz	r0, 8010530 <_svfiprintf_r+0x30>
 8010524:	230c      	movs	r3, #12
 8010526:	f8c8 3000 	str.w	r3, [r8]
 801052a:	f04f 30ff 	mov.w	r0, #4294967295
 801052e:	e0c8      	b.n	80106c2 <_svfiprintf_r+0x1c2>
 8010530:	2340      	movs	r3, #64	; 0x40
 8010532:	6163      	str	r3, [r4, #20]
 8010534:	2300      	movs	r3, #0
 8010536:	9309      	str	r3, [sp, #36]	; 0x24
 8010538:	2320      	movs	r3, #32
 801053a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801053e:	2330      	movs	r3, #48	; 0x30
 8010540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010544:	9503      	str	r5, [sp, #12]
 8010546:	f04f 0b01 	mov.w	fp, #1
 801054a:	4637      	mov	r7, r6
 801054c:	463d      	mov	r5, r7
 801054e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010552:	b10b      	cbz	r3, 8010558 <_svfiprintf_r+0x58>
 8010554:	2b25      	cmp	r3, #37	; 0x25
 8010556:	d13e      	bne.n	80105d6 <_svfiprintf_r+0xd6>
 8010558:	ebb7 0a06 	subs.w	sl, r7, r6
 801055c:	d00b      	beq.n	8010576 <_svfiprintf_r+0x76>
 801055e:	4653      	mov	r3, sl
 8010560:	4632      	mov	r2, r6
 8010562:	4621      	mov	r1, r4
 8010564:	4640      	mov	r0, r8
 8010566:	f7ff ff70 	bl	801044a <__ssputs_r>
 801056a:	3001      	adds	r0, #1
 801056c:	f000 80a4 	beq.w	80106b8 <_svfiprintf_r+0x1b8>
 8010570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010572:	4453      	add	r3, sl
 8010574:	9309      	str	r3, [sp, #36]	; 0x24
 8010576:	783b      	ldrb	r3, [r7, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	f000 809d 	beq.w	80106b8 <_svfiprintf_r+0x1b8>
 801057e:	2300      	movs	r3, #0
 8010580:	f04f 32ff 	mov.w	r2, #4294967295
 8010584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	9307      	str	r3, [sp, #28]
 801058c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010590:	931a      	str	r3, [sp, #104]	; 0x68
 8010592:	462f      	mov	r7, r5
 8010594:	2205      	movs	r2, #5
 8010596:	f817 1b01 	ldrb.w	r1, [r7], #1
 801059a:	4850      	ldr	r0, [pc, #320]	; (80106dc <_svfiprintf_r+0x1dc>)
 801059c:	f7ef fe20 	bl	80001e0 <memchr>
 80105a0:	9b04      	ldr	r3, [sp, #16]
 80105a2:	b9d0      	cbnz	r0, 80105da <_svfiprintf_r+0xda>
 80105a4:	06d9      	lsls	r1, r3, #27
 80105a6:	bf44      	itt	mi
 80105a8:	2220      	movmi	r2, #32
 80105aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80105ae:	071a      	lsls	r2, r3, #28
 80105b0:	bf44      	itt	mi
 80105b2:	222b      	movmi	r2, #43	; 0x2b
 80105b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80105b8:	782a      	ldrb	r2, [r5, #0]
 80105ba:	2a2a      	cmp	r2, #42	; 0x2a
 80105bc:	d015      	beq.n	80105ea <_svfiprintf_r+0xea>
 80105be:	9a07      	ldr	r2, [sp, #28]
 80105c0:	462f      	mov	r7, r5
 80105c2:	2000      	movs	r0, #0
 80105c4:	250a      	movs	r5, #10
 80105c6:	4639      	mov	r1, r7
 80105c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105cc:	3b30      	subs	r3, #48	; 0x30
 80105ce:	2b09      	cmp	r3, #9
 80105d0:	d94d      	bls.n	801066e <_svfiprintf_r+0x16e>
 80105d2:	b1b8      	cbz	r0, 8010604 <_svfiprintf_r+0x104>
 80105d4:	e00f      	b.n	80105f6 <_svfiprintf_r+0xf6>
 80105d6:	462f      	mov	r7, r5
 80105d8:	e7b8      	b.n	801054c <_svfiprintf_r+0x4c>
 80105da:	4a40      	ldr	r2, [pc, #256]	; (80106dc <_svfiprintf_r+0x1dc>)
 80105dc:	1a80      	subs	r0, r0, r2
 80105de:	fa0b f000 	lsl.w	r0, fp, r0
 80105e2:	4318      	orrs	r0, r3
 80105e4:	9004      	str	r0, [sp, #16]
 80105e6:	463d      	mov	r5, r7
 80105e8:	e7d3      	b.n	8010592 <_svfiprintf_r+0x92>
 80105ea:	9a03      	ldr	r2, [sp, #12]
 80105ec:	1d11      	adds	r1, r2, #4
 80105ee:	6812      	ldr	r2, [r2, #0]
 80105f0:	9103      	str	r1, [sp, #12]
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	db01      	blt.n	80105fa <_svfiprintf_r+0xfa>
 80105f6:	9207      	str	r2, [sp, #28]
 80105f8:	e004      	b.n	8010604 <_svfiprintf_r+0x104>
 80105fa:	4252      	negs	r2, r2
 80105fc:	f043 0302 	orr.w	r3, r3, #2
 8010600:	9207      	str	r2, [sp, #28]
 8010602:	9304      	str	r3, [sp, #16]
 8010604:	783b      	ldrb	r3, [r7, #0]
 8010606:	2b2e      	cmp	r3, #46	; 0x2e
 8010608:	d10c      	bne.n	8010624 <_svfiprintf_r+0x124>
 801060a:	787b      	ldrb	r3, [r7, #1]
 801060c:	2b2a      	cmp	r3, #42	; 0x2a
 801060e:	d133      	bne.n	8010678 <_svfiprintf_r+0x178>
 8010610:	9b03      	ldr	r3, [sp, #12]
 8010612:	1d1a      	adds	r2, r3, #4
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	9203      	str	r2, [sp, #12]
 8010618:	2b00      	cmp	r3, #0
 801061a:	bfb8      	it	lt
 801061c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010620:	3702      	adds	r7, #2
 8010622:	9305      	str	r3, [sp, #20]
 8010624:	4d2e      	ldr	r5, [pc, #184]	; (80106e0 <_svfiprintf_r+0x1e0>)
 8010626:	7839      	ldrb	r1, [r7, #0]
 8010628:	2203      	movs	r2, #3
 801062a:	4628      	mov	r0, r5
 801062c:	f7ef fdd8 	bl	80001e0 <memchr>
 8010630:	b138      	cbz	r0, 8010642 <_svfiprintf_r+0x142>
 8010632:	2340      	movs	r3, #64	; 0x40
 8010634:	1b40      	subs	r0, r0, r5
 8010636:	fa03 f000 	lsl.w	r0, r3, r0
 801063a:	9b04      	ldr	r3, [sp, #16]
 801063c:	4303      	orrs	r3, r0
 801063e:	3701      	adds	r7, #1
 8010640:	9304      	str	r3, [sp, #16]
 8010642:	7839      	ldrb	r1, [r7, #0]
 8010644:	4827      	ldr	r0, [pc, #156]	; (80106e4 <_svfiprintf_r+0x1e4>)
 8010646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801064a:	2206      	movs	r2, #6
 801064c:	1c7e      	adds	r6, r7, #1
 801064e:	f7ef fdc7 	bl	80001e0 <memchr>
 8010652:	2800      	cmp	r0, #0
 8010654:	d038      	beq.n	80106c8 <_svfiprintf_r+0x1c8>
 8010656:	4b24      	ldr	r3, [pc, #144]	; (80106e8 <_svfiprintf_r+0x1e8>)
 8010658:	bb13      	cbnz	r3, 80106a0 <_svfiprintf_r+0x1a0>
 801065a:	9b03      	ldr	r3, [sp, #12]
 801065c:	3307      	adds	r3, #7
 801065e:	f023 0307 	bic.w	r3, r3, #7
 8010662:	3308      	adds	r3, #8
 8010664:	9303      	str	r3, [sp, #12]
 8010666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010668:	444b      	add	r3, r9
 801066a:	9309      	str	r3, [sp, #36]	; 0x24
 801066c:	e76d      	b.n	801054a <_svfiprintf_r+0x4a>
 801066e:	fb05 3202 	mla	r2, r5, r2, r3
 8010672:	2001      	movs	r0, #1
 8010674:	460f      	mov	r7, r1
 8010676:	e7a6      	b.n	80105c6 <_svfiprintf_r+0xc6>
 8010678:	2300      	movs	r3, #0
 801067a:	3701      	adds	r7, #1
 801067c:	9305      	str	r3, [sp, #20]
 801067e:	4619      	mov	r1, r3
 8010680:	250a      	movs	r5, #10
 8010682:	4638      	mov	r0, r7
 8010684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010688:	3a30      	subs	r2, #48	; 0x30
 801068a:	2a09      	cmp	r2, #9
 801068c:	d903      	bls.n	8010696 <_svfiprintf_r+0x196>
 801068e:	2b00      	cmp	r3, #0
 8010690:	d0c8      	beq.n	8010624 <_svfiprintf_r+0x124>
 8010692:	9105      	str	r1, [sp, #20]
 8010694:	e7c6      	b.n	8010624 <_svfiprintf_r+0x124>
 8010696:	fb05 2101 	mla	r1, r5, r1, r2
 801069a:	2301      	movs	r3, #1
 801069c:	4607      	mov	r7, r0
 801069e:	e7f0      	b.n	8010682 <_svfiprintf_r+0x182>
 80106a0:	ab03      	add	r3, sp, #12
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	4622      	mov	r2, r4
 80106a6:	4b11      	ldr	r3, [pc, #68]	; (80106ec <_svfiprintf_r+0x1ec>)
 80106a8:	a904      	add	r1, sp, #16
 80106aa:	4640      	mov	r0, r8
 80106ac:	f3af 8000 	nop.w
 80106b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80106b4:	4681      	mov	r9, r0
 80106b6:	d1d6      	bne.n	8010666 <_svfiprintf_r+0x166>
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	065b      	lsls	r3, r3, #25
 80106bc:	f53f af35 	bmi.w	801052a <_svfiprintf_r+0x2a>
 80106c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106c2:	b01d      	add	sp, #116	; 0x74
 80106c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c8:	ab03      	add	r3, sp, #12
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	4622      	mov	r2, r4
 80106ce:	4b07      	ldr	r3, [pc, #28]	; (80106ec <_svfiprintf_r+0x1ec>)
 80106d0:	a904      	add	r1, sp, #16
 80106d2:	4640      	mov	r0, r8
 80106d4:	f7ff f928 	bl	800f928 <_printf_i>
 80106d8:	e7ea      	b.n	80106b0 <_svfiprintf_r+0x1b0>
 80106da:	bf00      	nop
 80106dc:	08011ec2 	.word	0x08011ec2
 80106e0:	08011ec8 	.word	0x08011ec8
 80106e4:	08011ecc 	.word	0x08011ecc
 80106e8:	00000000 	.word	0x00000000
 80106ec:	0801044b 	.word	0x0801044b

080106f0 <_raise_r>:
 80106f0:	291f      	cmp	r1, #31
 80106f2:	b538      	push	{r3, r4, r5, lr}
 80106f4:	4604      	mov	r4, r0
 80106f6:	460d      	mov	r5, r1
 80106f8:	d904      	bls.n	8010704 <_raise_r+0x14>
 80106fa:	2316      	movs	r3, #22
 80106fc:	6003      	str	r3, [r0, #0]
 80106fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010702:	bd38      	pop	{r3, r4, r5, pc}
 8010704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010706:	b112      	cbz	r2, 801070e <_raise_r+0x1e>
 8010708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801070c:	b94b      	cbnz	r3, 8010722 <_raise_r+0x32>
 801070e:	4620      	mov	r0, r4
 8010710:	f000 f830 	bl	8010774 <_getpid_r>
 8010714:	462a      	mov	r2, r5
 8010716:	4601      	mov	r1, r0
 8010718:	4620      	mov	r0, r4
 801071a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801071e:	f000 b817 	b.w	8010750 <_kill_r>
 8010722:	2b01      	cmp	r3, #1
 8010724:	d00a      	beq.n	801073c <_raise_r+0x4c>
 8010726:	1c59      	adds	r1, r3, #1
 8010728:	d103      	bne.n	8010732 <_raise_r+0x42>
 801072a:	2316      	movs	r3, #22
 801072c:	6003      	str	r3, [r0, #0]
 801072e:	2001      	movs	r0, #1
 8010730:	e7e7      	b.n	8010702 <_raise_r+0x12>
 8010732:	2400      	movs	r4, #0
 8010734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010738:	4628      	mov	r0, r5
 801073a:	4798      	blx	r3
 801073c:	2000      	movs	r0, #0
 801073e:	e7e0      	b.n	8010702 <_raise_r+0x12>

08010740 <raise>:
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <raise+0xc>)
 8010742:	4601      	mov	r1, r0
 8010744:	6818      	ldr	r0, [r3, #0]
 8010746:	f7ff bfd3 	b.w	80106f0 <_raise_r>
 801074a:	bf00      	nop
 801074c:	200002cc 	.word	0x200002cc

08010750 <_kill_r>:
 8010750:	b538      	push	{r3, r4, r5, lr}
 8010752:	4c07      	ldr	r4, [pc, #28]	; (8010770 <_kill_r+0x20>)
 8010754:	2300      	movs	r3, #0
 8010756:	4605      	mov	r5, r0
 8010758:	4608      	mov	r0, r1
 801075a:	4611      	mov	r1, r2
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	f7fb fd89 	bl	800c274 <_kill>
 8010762:	1c43      	adds	r3, r0, #1
 8010764:	d102      	bne.n	801076c <_kill_r+0x1c>
 8010766:	6823      	ldr	r3, [r4, #0]
 8010768:	b103      	cbz	r3, 801076c <_kill_r+0x1c>
 801076a:	602b      	str	r3, [r5, #0]
 801076c:	bd38      	pop	{r3, r4, r5, pc}
 801076e:	bf00      	nop
 8010770:	20015734 	.word	0x20015734

08010774 <_getpid_r>:
 8010774:	f7fb bd76 	b.w	800c264 <_getpid>

08010778 <__sread>:
 8010778:	b510      	push	{r4, lr}
 801077a:	460c      	mov	r4, r1
 801077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010780:	f000 f89c 	bl	80108bc <_read_r>
 8010784:	2800      	cmp	r0, #0
 8010786:	bfab      	itete	ge
 8010788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801078a:	89a3      	ldrhlt	r3, [r4, #12]
 801078c:	181b      	addge	r3, r3, r0
 801078e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010792:	bfac      	ite	ge
 8010794:	6563      	strge	r3, [r4, #84]	; 0x54
 8010796:	81a3      	strhlt	r3, [r4, #12]
 8010798:	bd10      	pop	{r4, pc}

0801079a <__swrite>:
 801079a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079e:	461f      	mov	r7, r3
 80107a0:	898b      	ldrh	r3, [r1, #12]
 80107a2:	05db      	lsls	r3, r3, #23
 80107a4:	4605      	mov	r5, r0
 80107a6:	460c      	mov	r4, r1
 80107a8:	4616      	mov	r6, r2
 80107aa:	d505      	bpl.n	80107b8 <__swrite+0x1e>
 80107ac:	2302      	movs	r3, #2
 80107ae:	2200      	movs	r2, #0
 80107b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b4:	f000 f868 	bl	8010888 <_lseek_r>
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	4632      	mov	r2, r6
 80107c6:	463b      	mov	r3, r7
 80107c8:	4628      	mov	r0, r5
 80107ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ce:	f000 b817 	b.w	8010800 <_write_r>

080107d2 <__sseek>:
 80107d2:	b510      	push	{r4, lr}
 80107d4:	460c      	mov	r4, r1
 80107d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107da:	f000 f855 	bl	8010888 <_lseek_r>
 80107de:	1c43      	adds	r3, r0, #1
 80107e0:	89a3      	ldrh	r3, [r4, #12]
 80107e2:	bf15      	itete	ne
 80107e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80107e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107ee:	81a3      	strheq	r3, [r4, #12]
 80107f0:	bf18      	it	ne
 80107f2:	81a3      	strhne	r3, [r4, #12]
 80107f4:	bd10      	pop	{r4, pc}

080107f6 <__sclose>:
 80107f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107fa:	f000 b813 	b.w	8010824 <_close_r>
	...

08010800 <_write_r>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4c07      	ldr	r4, [pc, #28]	; (8010820 <_write_r+0x20>)
 8010804:	4605      	mov	r5, r0
 8010806:	4608      	mov	r0, r1
 8010808:	4611      	mov	r1, r2
 801080a:	2200      	movs	r2, #0
 801080c:	6022      	str	r2, [r4, #0]
 801080e:	461a      	mov	r2, r3
 8010810:	f7fb fd67 	bl	800c2e2 <_write>
 8010814:	1c43      	adds	r3, r0, #1
 8010816:	d102      	bne.n	801081e <_write_r+0x1e>
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	b103      	cbz	r3, 801081e <_write_r+0x1e>
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	bd38      	pop	{r3, r4, r5, pc}
 8010820:	20015734 	.word	0x20015734

08010824 <_close_r>:
 8010824:	b538      	push	{r3, r4, r5, lr}
 8010826:	4c06      	ldr	r4, [pc, #24]	; (8010840 <_close_r+0x1c>)
 8010828:	2300      	movs	r3, #0
 801082a:	4605      	mov	r5, r0
 801082c:	4608      	mov	r0, r1
 801082e:	6023      	str	r3, [r4, #0]
 8010830:	f7fb fd73 	bl	800c31a <_close>
 8010834:	1c43      	adds	r3, r0, #1
 8010836:	d102      	bne.n	801083e <_close_r+0x1a>
 8010838:	6823      	ldr	r3, [r4, #0]
 801083a:	b103      	cbz	r3, 801083e <_close_r+0x1a>
 801083c:	602b      	str	r3, [r5, #0]
 801083e:	bd38      	pop	{r3, r4, r5, pc}
 8010840:	20015734 	.word	0x20015734

08010844 <_fstat_r>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4c07      	ldr	r4, [pc, #28]	; (8010864 <_fstat_r+0x20>)
 8010848:	2300      	movs	r3, #0
 801084a:	4605      	mov	r5, r0
 801084c:	4608      	mov	r0, r1
 801084e:	4611      	mov	r1, r2
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	f7fb fd6e 	bl	800c332 <_fstat>
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	d102      	bne.n	8010860 <_fstat_r+0x1c>
 801085a:	6823      	ldr	r3, [r4, #0]
 801085c:	b103      	cbz	r3, 8010860 <_fstat_r+0x1c>
 801085e:	602b      	str	r3, [r5, #0]
 8010860:	bd38      	pop	{r3, r4, r5, pc}
 8010862:	bf00      	nop
 8010864:	20015734 	.word	0x20015734

08010868 <_isatty_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4c06      	ldr	r4, [pc, #24]	; (8010884 <_isatty_r+0x1c>)
 801086c:	2300      	movs	r3, #0
 801086e:	4605      	mov	r5, r0
 8010870:	4608      	mov	r0, r1
 8010872:	6023      	str	r3, [r4, #0]
 8010874:	f7fb fd6d 	bl	800c352 <_isatty>
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	d102      	bne.n	8010882 <_isatty_r+0x1a>
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	b103      	cbz	r3, 8010882 <_isatty_r+0x1a>
 8010880:	602b      	str	r3, [r5, #0]
 8010882:	bd38      	pop	{r3, r4, r5, pc}
 8010884:	20015734 	.word	0x20015734

08010888 <_lseek_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	4c07      	ldr	r4, [pc, #28]	; (80108a8 <_lseek_r+0x20>)
 801088c:	4605      	mov	r5, r0
 801088e:	4608      	mov	r0, r1
 8010890:	4611      	mov	r1, r2
 8010892:	2200      	movs	r2, #0
 8010894:	6022      	str	r2, [r4, #0]
 8010896:	461a      	mov	r2, r3
 8010898:	f7fb fd66 	bl	800c368 <_lseek>
 801089c:	1c43      	adds	r3, r0, #1
 801089e:	d102      	bne.n	80108a6 <_lseek_r+0x1e>
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	b103      	cbz	r3, 80108a6 <_lseek_r+0x1e>
 80108a4:	602b      	str	r3, [r5, #0]
 80108a6:	bd38      	pop	{r3, r4, r5, pc}
 80108a8:	20015734 	.word	0x20015734

080108ac <_malloc_usable_size_r>:
 80108ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108b0:	1f18      	subs	r0, r3, #4
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	bfbc      	itt	lt
 80108b6:	580b      	ldrlt	r3, [r1, r0]
 80108b8:	18c0      	addlt	r0, r0, r3
 80108ba:	4770      	bx	lr

080108bc <_read_r>:
 80108bc:	b538      	push	{r3, r4, r5, lr}
 80108be:	4c07      	ldr	r4, [pc, #28]	; (80108dc <_read_r+0x20>)
 80108c0:	4605      	mov	r5, r0
 80108c2:	4608      	mov	r0, r1
 80108c4:	4611      	mov	r1, r2
 80108c6:	2200      	movs	r2, #0
 80108c8:	6022      	str	r2, [r4, #0]
 80108ca:	461a      	mov	r2, r3
 80108cc:	f7fb fcec 	bl	800c2a8 <_read>
 80108d0:	1c43      	adds	r3, r0, #1
 80108d2:	d102      	bne.n	80108da <_read_r+0x1e>
 80108d4:	6823      	ldr	r3, [r4, #0]
 80108d6:	b103      	cbz	r3, 80108da <_read_r+0x1e>
 80108d8:	602b      	str	r3, [r5, #0]
 80108da:	bd38      	pop	{r3, r4, r5, pc}
 80108dc:	20015734 	.word	0x20015734

080108e0 <_init>:
 80108e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e2:	bf00      	nop
 80108e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e6:	bc08      	pop	{r3}
 80108e8:	469e      	mov	lr, r3
 80108ea:	4770      	bx	lr

080108ec <_fini>:
 80108ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ee:	bf00      	nop
 80108f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108f2:	bc08      	pop	{r3}
 80108f4:	469e      	mov	lr, r3
 80108f6:	4770      	bx	lr
