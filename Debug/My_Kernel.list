
My_Kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ac  080083ac  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  080083b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141b0  200002b8  08008668  000202b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014468  08008668  00024468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .lfs          000f7998  08008668  08008668  00028668  2**0
                  ALLOC
 13 .debug_info   0001b73f  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004323  00000000  00000000  0003ba23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010f8  00000000  00000000  0003fd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bb7  00000000  00000000  00040e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014571  00000000  00000000  000679f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cebd4  00000000  00000000  0007bf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ab3c  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000f68  00000000  00000000  0014abb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00004bc4  00000000  00000000  0014bb20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d60 	.word	0x08007d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	08007d60 	.word	0x08007d60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <cli_is_terminator>:

/**********************************************
 * PRIVATE FUNCTIONS
 *********************************************/
 
static inline bool cli_is_terminator(cliElement_t const * const e){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <cli_is_terminator+0x12>
 80005ae:	2300      	movs	r3, #0
 80005b0:	e019      	b.n	80005e6 <cli_is_terminator+0x46>
    return (e->name == NULL && e->action == NULL && e->args == NULL && e->desc == NULL && e->argsDesc == NULL);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d111      	bne.n	80005de <cli_is_terminator+0x3e>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10d      	bne.n	80005de <cli_is_terminator+0x3e>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d109      	bne.n	80005de <cli_is_terminator+0x3e>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <cli_is_terminator+0x3e>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <cli_is_terminator+0x3e>
 80005da:	2301      	movs	r3, #1
 80005dc:	e000      	b.n	80005e0 <cli_is_terminator+0x40>
 80005de:	2300      	movs	r3, #0
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <cli_is_sub_menu>:

static inline bool cli_is_sub_menu(cliElement_t const * const e){
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <cli_is_sub_menu+0x12>
 8000600:	2300      	movs	r3, #0
 8000602:	e006      	b.n	8000612 <cli_is_sub_menu+0x20>
    return (e->subMenuRef != NULL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2db      	uxtb	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <cli_is_action>:

static inline bool cli_is_action(cliElement_t const * const e){
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <cli_is_action+0x12>
 800062c:	2300      	movs	r3, #0
 800062e:	e006      	b.n	800063e <cli_is_action+0x20>
    return (e->action != NULL);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <cli_verify_args_str>:

static int64_t cli_verify_args_str(cliElement_t const * const e, bool* elipsisPresent){
 800064a:	b590      	push	{r4, r7, lr}
 800064c:	b087      	sub	sp, #28
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
    if(e->args == NULL) return -1;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d104      	bne.n	8000666 <cli_verify_args_str+0x1c>
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	f04f 34ff 	mov.w	r4, #4294967295
 8000664:	e063      	b.n	800072e <cli_verify_args_str+0xe4>
    
    size_t len = strlen(e->args);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdba 	bl	80001e4 <strlen>
 8000670:	60f8      	str	r0, [r7, #12]
    size_t argsLen = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
    *elipsisPresent = 0;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
    
    for(int i = 0; i < len; i++){
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	e04e      	b.n	8000720 <cli_verify_args_str+0xd6>
        switch(e->args[i]){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b62      	cmp	r3, #98	; 0x62
 800068e:	d00c      	beq.n	80006aa <cli_verify_args_str+0x60>
 8000690:	2b62      	cmp	r3, #98	; 0x62
 8000692:	dc04      	bgt.n	800069e <cli_verify_args_str+0x54>
 8000694:	2b2a      	cmp	r3, #42	; 0x2a
 8000696:	d008      	beq.n	80006aa <cli_verify_args_str+0x60>
 8000698:	2b2e      	cmp	r3, #46	; 0x2e
 800069a:	d00a      	beq.n	80006b2 <cli_verify_args_str+0x68>
 800069c:	e038      	b.n	8000710 <cli_verify_args_str+0xc6>
 800069e:	2b73      	cmp	r3, #115	; 0x73
 80006a0:	d003      	beq.n	80006aa <cli_verify_args_str+0x60>
 80006a2:	2b75      	cmp	r3, #117	; 0x75
 80006a4:	d001      	beq.n	80006aa <cli_verify_args_str+0x60>
 80006a6:	2b69      	cmp	r3, #105	; 0x69
 80006a8:	d132      	bne.n	8000710 <cli_verify_args_str+0xc6>
            case 'u' :
            case 'i' :
            case 's' :
            case 'b' :
            case '*' : {
                argsLen++;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
                break;
 80006b0:	e033      	b.n	800071a <cli_verify_args_str+0xd0>
            }
            
            case '.' : {
                if(len < i + 2 || e->args[i + 1] != '.' || e->args[i + 2] != '.'){
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	3302      	adds	r3, #2
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d30f      	bcc.n	80006de <cli_verify_args_str+0x94>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b2e      	cmp	r3, #46	; 0x2e
 80006cc:	d107      	bne.n	80006de <cli_verify_args_str+0x94>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3302      	adds	r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b2e      	cmp	r3, #46	; 0x2e
 80006dc:	d004      	beq.n	80006e8 <cli_verify_args_str+0x9e>
                    ERR_PRINTLN("Arguments string list contains incomplete elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	f04f 34ff 	mov.w	r4, #4294967295
 80006e6:	e022      	b.n	800072e <cli_verify_args_str+0xe4>
                }
                
                DBG_PRINTLN("%d, %d", len, i);
                
                if(len > i + 3){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3303      	adds	r3, #3
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d904      	bls.n	80006fe <cli_verify_args_str+0xb4>
                    ERR_PRINTLN("Arguments string list contains arguments after elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	f04f 34ff 	mov.w	r4, #4294967295
 80006fc:	e017      	b.n	800072e <cli_verify_args_str+0xe4>
                }
                
                *elipsisPresent = 1;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
                return argsLen++;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	617a      	str	r2, [r7, #20]
 800070a:	f04f 0400 	mov.w	r4, #0
 800070e:	e00e      	b.n	800072e <cli_verify_args_str+0xe4>
            }
            
            default : {
                ERR_PRINTLN("Unrecognized character in argument list index %d for action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                ERR_PRINTLN("");
                return -1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	f04f 34ff 	mov.w	r4, #4294967295
 8000718:	e009      	b.n	800072e <cli_verify_args_str+0xe4>
    for(int i = 0; i < len; i++){
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8ac      	bhi.n	8000682 <cli_verify_args_str+0x38>
            }
        }
    }
    
    return argsLen;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	f04f 0400 	mov.w	r4, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	4621      	mov	r1, r4
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <cli_print_element>:

static void cli_print_element(cliElement_t const * const e){
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d04b      	beq.n	80007de <cli_print_element+0xa6>
    
    bool const is_sub_menu = cli_is_sub_menu(e);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff53 	bl	80005f2 <cli_is_sub_menu>
 800074c:	4603      	mov	r3, r0
 800074e:	76fb      	strb	r3, [r7, #27]

    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <cli_print_element+0x26>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	e000      	b.n	8000760 <cli_print_element+0x28>
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <cli_print_element+0xb0>)
 8000760:	617b      	str	r3, [r7, #20]
    
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000762:	7efb      	ldrb	r3, [r7, #27]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <cli_print_element+0x34>
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <cli_print_element+0xb4>)
 800076a:	e000      	b.n	800076e <cli_print_element+0x36>
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <cli_print_element+0xb8>)
 800076e:	461a      	mov	r2, r3
 8000770:	6979      	ldr	r1, [r7, #20]
 8000772:	4820      	ldr	r0, [pc, #128]	; (80007f4 <cli_print_element+0xbc>)
 8000774:	f001 faa6 	bl	8001cc4 <cli_printf>

    size_t len = (size_t)(strlen(name) + (size_t)(3 * is_sub_menu) + 1); //name length with '... '
 8000778:	6978      	ldr	r0, [r7, #20]
 800077a:	f7ff fd33 	bl	80001e4 <strlen>
 800077e:	4601      	mov	r1, r0
 8000780:	7efa      	ldrb	r2, [r7, #27]
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	440b      	add	r3, r1
 800078a:	3301      	adds	r3, #1
 800078c:	613b      	str	r3, [r7, #16]

    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	3316      	adds	r3, #22
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <cli_print_element+0xc0>)
 8000794:	fba2 2303 	umull	r2, r3, r2, r3
 8000798:	091b      	lsrs	r3, r3, #4
 800079a:	2216      	movs	r2, #22
 800079c:	fb02 f303 	mul.w	r3, r2, r3
 80007a0:	60fb      	str	r3, [r7, #12]

    spaces -= len;
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	60fb      	str	r3, [r7, #12]

    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	e005      	b.n	80007bc <cli_print_element+0x84>
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <cli_print_element+0xb8>)
 80007b2:	f001 fa87 	bl	8001cc4 <cli_printf>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3301      	adds	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fa      	ldr	r2, [r7, #28]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3f5      	bcc.n	80007b0 <cli_print_element+0x78>
    
    MENU_PRINTLN("- %s", ( (e->desc == NULL) ? "NULL_DESC" : e->desc) );
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <cli_print_element+0x9a>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	e000      	b.n	80007d4 <cli_print_element+0x9c>
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <cli_print_element+0xc4>)
 80007d4:	4619      	mov	r1, r3
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <cli_print_element+0xc8>)
 80007d8:	f001 fa74 	bl	8001cc4 <cli_printf>
 80007dc:	e000      	b.n	80007e0 <cli_print_element+0xa8>
    if(e == NULL) return;
 80007de:	bf00      	nop
} 
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08007da8 	.word	0x08007da8
 80007ec:	08007db4 	.word	0x08007db4
 80007f0:	08007dbc 	.word	0x08007dbc
 80007f4:	08007dc0 	.word	0x08007dc0
 80007f8:	ba2e8ba3 	.word	0xba2e8ba3
 80007fc:	08007dc8 	.word	0x08007dc8
 8000800:	08007dd4 	.word	0x08007dd4

08000804 <cli_print_menu>:

static void cli_print_menu(cliElement_t const * const e){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d029      	beq.n	8000866 <cli_print_menu+0x62>
    if(e->subMenuRef == NULL){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d027      	beq.n	800086a <cli_print_menu+0x66>
        ERR_PRINTLN("Reference of menu '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;  
    } 

    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00d      	b.n	800083c <cli_print_menu+0x38>
        cli_print_element(&e->subMenuRef[i]);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff81 	bl	8000738 <cli_print_element>
    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	3301      	adds	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6859      	ldr	r1, [r3, #4]
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fea7 	bl	80005a0 <cli_is_terminator>
 8000852:	4603      	mov	r3, r0
 8000854:	f083 0301 	eor.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e0      	bne.n	8000820 <cli_print_menu+0x1c>
        
    MENU_PRINTLN("");
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <cli_print_menu+0x70>)
 8000860:	f001 fa30 	bl	8001cc4 <cli_printf>
 8000864:	e002      	b.n	800086c <cli_print_menu+0x68>
    if(e == NULL) return;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <cli_print_menu+0x68>
        return;  
 800086a:	bf00      	nop
}
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08007ddc 	.word	0x08007ddc

08000878 <cli_print_action>:

static void cli_print_action(cliElement_t const * const e){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80dd 	beq.w	8000a42 <cli_print_action+0x1ca>
    if(e->args == NULL) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	f000 80da 	beq.w	8000a46 <cli_print_action+0x1ce>
        ERR_PRINTLN("Action of element '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    MENU_PRINTLN("Action '%s' - %s - usage :", ( (e->name == NULL) ? "NULL_NAME" : e->name), ( (e->desc == NULL) ? "NULL_DESC" : e->desc ) );
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <cli_print_action+0x28>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	e000      	b.n	80008a2 <cli_print_action+0x2a>
 80008a0:	496c      	ldr	r1, [pc, #432]	; (8000a54 <cli_print_action+0x1dc>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <cli_print_action+0x38>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	e000      	b.n	80008b2 <cli_print_action+0x3a>
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <cli_print_action+0x1e0>)
 80008b2:	461a      	mov	r2, r3
 80008b4:	4869      	ldr	r0, [pc, #420]	; (8000a5c <cli_print_action+0x1e4>)
 80008b6:	f001 fa05 	bl	8001cc4 <cli_printf>
    
    bool elipsisPresent = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80008be:	f107 030f 	add.w	r3, r7, #15
 80008c2:	4619      	mov	r1, r3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fec0 	bl	800064a <cli_verify_args_str>
 80008ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    if(len == -1){
 80008ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008d2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008d6:	bf08      	it	eq
 80008d8:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 80008dc:	f000 80b5 	beq.w	8000a4a <cli_print_action+0x1d2>
        return;
    }
    
    if(len == 0){
 80008e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008e4:	4323      	orrs	r3, r4
 80008e6:	d103      	bne.n	80008f0 <cli_print_action+0x78>
        MENU_PRINTLN("   No arguments");
 80008e8:	485d      	ldr	r0, [pc, #372]	; (8000a60 <cli_print_action+0x1e8>)
 80008ea:	f001 f9eb 	bl	8001cc4 <cli_printf>
        return;
 80008ee:	e0ad      	b.n	8000a4c <cli_print_action+0x1d4>
    }
    
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <cli_print_action+0x8a>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <cli_print_action+0x8e>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <cli_print_action+0x90>
 8000906:	2300      	movs	r3, #0
 8000908:	77fb      	strb	r3, [r7, #31]
 800090a:	7ffb      	ldrb	r3, [r7, #31]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	77fb      	strb	r3, [r7, #31]
    
    int i = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < len; i++){
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	e054      	b.n	80009c6 <cli_print_action+0x14e>
        switch(e->args[i]){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b69      	cmp	r3, #105	; 0x69
 8000928:	d00e      	beq.n	8000948 <cli_print_action+0xd0>
 800092a:	2b69      	cmp	r3, #105	; 0x69
 800092c:	dc04      	bgt.n	8000938 <cli_print_action+0xc0>
 800092e:	2b2a      	cmp	r3, #42	; 0x2a
 8000930:	d016      	beq.n	8000960 <cli_print_action+0xe8>
 8000932:	2b62      	cmp	r3, #98	; 0x62
 8000934:	d010      	beq.n	8000958 <cli_print_action+0xe0>
 8000936:	e017      	b.n	8000968 <cli_print_action+0xf0>
 8000938:	2b73      	cmp	r3, #115	; 0x73
 800093a:	d009      	beq.n	8000950 <cli_print_action+0xd8>
 800093c:	2b75      	cmp	r3, #117	; 0x75
 800093e:	d113      	bne.n	8000968 <cli_print_action+0xf0>
            #if (defined(CLI_FLOAT_EN) && CLI_FLOAT_EN == 1)
            case 'f' : MENU_PRINTF("   < float   > - "); break;
            #endif

            case 'u' : MENU_PRINTF("   < uint64  > - "); break;
 8000940:	4848      	ldr	r0, [pc, #288]	; (8000a64 <cli_print_action+0x1ec>)
 8000942:	f001 f9bf 	bl	8001cc4 <cli_printf>
 8000946:	e013      	b.n	8000970 <cli_print_action+0xf8>
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 8000948:	4847      	ldr	r0, [pc, #284]	; (8000a68 <cli_print_action+0x1f0>)
 800094a:	f001 f9bb 	bl	8001cc4 <cli_printf>
 800094e:	e00f      	b.n	8000970 <cli_print_action+0xf8>
            case 's' : MENU_PRINTF("   < string  > - "); break;
 8000950:	4846      	ldr	r0, [pc, #280]	; (8000a6c <cli_print_action+0x1f4>)
 8000952:	f001 f9b7 	bl	8001cc4 <cli_printf>
 8000956:	e00b      	b.n	8000970 <cli_print_action+0xf8>
            case 'b' : MENU_PRINTF("   < buffer  > - "); break;
 8000958:	4845      	ldr	r0, [pc, #276]	; (8000a70 <cli_print_action+0x1f8>)
 800095a:	f001 f9b3 	bl	8001cc4 <cli_printf>
 800095e:	e007      	b.n	8000970 <cli_print_action+0xf8>
            case '*' : MENU_PRINTF("   < any     > - "); break;
 8000960:	4844      	ldr	r0, [pc, #272]	; (8000a74 <cli_print_action+0x1fc>)
 8000962:	f001 f9af 	bl	8001cc4 <cli_printf>
 8000966:	e003      	b.n	8000970 <cli_print_action+0xf8>
            default  : MENU_PRINTF("   < unknown > - "); break;
 8000968:	4843      	ldr	r0, [pc, #268]	; (8000a78 <cli_print_action+0x200>)
 800096a:	f001 f9ab 	bl	8001cc4 <cli_printf>
 800096e:	bf00      	nop
        }
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 8000970:	7ffb      	ldrb	r3, [r7, #31]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10b      	bne.n	800098e <cli_print_action+0x116>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d007      	beq.n	800098e <cli_print_action+0x116>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <cli_print_action+0x11a>
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <cli_print_action+0x11c>
 8000992:	2300      	movs	r3, #0
 8000994:	77fb      	strb	r3, [r7, #31]
 8000996:	7ffb      	ldrb	r3, [r7, #31]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	77fb      	strb	r3, [r7, #31]
        
        if(argsDescEnded){
 800099e:	7ffb      	ldrb	r3, [r7, #31]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <cli_print_action+0x134>
            MENU_PRINTLN("");
 80009a4:	4835      	ldr	r0, [pc, #212]	; (8000a7c <cli_print_action+0x204>)
 80009a6:	f001 f98d 	bl	8001cc4 <cli_printf>
            continue;
 80009aa:	e009      	b.n	80009c0 <cli_print_action+0x148>
        }
        
        MENU_PRINTLN("%s", e->argsDesc[i]);   
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4831      	ldr	r0, [pc, #196]	; (8000a80 <cli_print_action+0x208>)
 80009bc:	f001 f982 	bl	8001cc4 <cli_printf>
    for(i = 0; i < len; i++){
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4619      	mov	r1, r3
 80009ca:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80009ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009d2:	4299      	cmp	r1, r3
 80009d4:	eb72 0304 	sbcs.w	r3, r2, r4
 80009d8:	dba0      	blt.n	800091c <cli_print_action+0xa4>
    }
    
    if(elipsisPresent){
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d02c      	beq.n	8000a3a <cli_print_action+0x1c2>
        MENU_PRINTF("   < various > - ");
 80009e0:	4828      	ldr	r0, [pc, #160]	; (8000a84 <cli_print_action+0x20c>)
 80009e2:	f001 f96f 	bl	8001cc4 <cli_printf>
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 80009e6:	7ffb      	ldrb	r3, [r7, #31]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10b      	bne.n	8000a04 <cli_print_action+0x18c>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <cli_print_action+0x18c>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <cli_print_action+0x190>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <cli_print_action+0x192>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	77fb      	strb	r3, [r7, #31]
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	77fb      	strb	r3, [r7, #31]

        if(!argsDescEnded) MENU_PRINTLN("%s", e->argsDesc[i]);
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	f083 0301 	eor.w	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d009      	beq.n	8000a34 <cli_print_action+0x1bc>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <cli_print_action+0x208>)
 8000a30:	f001 f948 	bl	8001cc4 <cli_printf>

        MENU_PRINTLN("");
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <cli_print_action+0x204>)
 8000a36:	f001 f945 	bl	8001cc4 <cli_printf>
    }
    
    MENU_PRINTLN("");
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <cli_print_action+0x204>)
 8000a3c:	f001 f942 	bl	8001cc4 <cli_printf>
 8000a40:	e004      	b.n	8000a4c <cli_print_action+0x1d4>
    if(e == NULL) return;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <cli_print_action+0x1d4>
        return;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <cli_print_action+0x1d4>
        return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08007da8 	.word	0x08007da8
 8000a58:	08007dc8 	.word	0x08007dc8
 8000a5c:	08007de0 	.word	0x08007de0
 8000a60:	08007e00 	.word	0x08007e00
 8000a64:	08007e14 	.word	0x08007e14
 8000a68:	08007e28 	.word	0x08007e28
 8000a6c:	08007e3c 	.word	0x08007e3c
 8000a70:	08007e50 	.word	0x08007e50
 8000a74:	08007e64 	.word	0x08007e64
 8000a78:	08007e78 	.word	0x08007e78
 8000a7c:	08007ddc 	.word	0x08007ddc
 8000a80:	08007e8c 	.word	0x08007e8c
 8000a84:	08007e94 	.word	0x08007e94

08000a88 <cli_str_starts_with>:

static bool cli_str_starts_with(char const tkn[], char const str[]){
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    if(tkn == NULL || str == NULL) return false;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <cli_str_starts_with+0x16>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <cli_str_starts_with+0x1a>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e04f      	b.n	8000b42 <cli_str_starts_with+0xba>
    
    size_t const lenTkn = strlen(tkn);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fb9e 	bl	80001e4 <strlen>
 8000aa8:	6138      	str	r0, [r7, #16]
    size_t const lenStr = strlen(str);
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f7ff fb9a 	bl	80001e4 <strlen>
 8000ab0:	60f8      	str	r0, [r7, #12]
    
    if(lenTkn == 0 || lenStr == 0) return false;
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <cli_str_starts_with+0x36>
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <cli_str_starts_with+0x3a>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e03f      	b.n	8000b42 <cli_str_starts_with+0xba>
    if(lenTkn > lenStr) return false;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d901      	bls.n	8000ace <cli_str_starts_with+0x46>
 8000aca:	2300      	movs	r3, #0
 8000acc:	e039      	b.n	8000b42 <cli_str_starts_with+0xba>

    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e02f      	b.n	8000b34 <cli_str_starts_with+0xac>
        if(tolower(tkn[i]) != tolower(str[i])) return false;
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	72fb      	strb	r3, [r7, #11]
 8000ade:	f006 f915 	bl	8006d0c <__locale_ctype_ptr>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d103      	bne.n	8000afc <cli_str_starts_with+0x74>
 8000af4:	7afb      	ldrb	r3, [r7, #11]
 8000af6:	f103 0420 	add.w	r4, r3, #32
 8000afa:	e000      	b.n	8000afe <cli_str_starts_with+0x76>
 8000afc:	7afc      	ldrb	r4, [r7, #11]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	72bb      	strb	r3, [r7, #10]
 8000b08:	f006 f900 	bl	8006d0c <__locale_ctype_ptr>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d102      	bne.n	8000b24 <cli_str_starts_with+0x9c>
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	3320      	adds	r3, #32
 8000b22:	e000      	b.n	8000b26 <cli_str_starts_with+0x9e>
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	429c      	cmp	r4, r3
 8000b28:	d001      	beq.n	8000b2e <cli_str_starts_with+0xa6>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e009      	b.n	8000b42 <cli_str_starts_with+0xba>
    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1c9      	bne.n	8000ad4 <cli_str_starts_with+0x4c>
    }
    
    return true;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}

08000b4a <cli_find_element_in_menu>:

static cliElement_t* cli_find_element_in_menu(char* tkn, char cliBuffer[], size_t maxLen, cliElement_t currentMenu[]){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
    if(tkn == NULL) return NULL;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <cli_find_element_in_menu+0x18>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e05e      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(maxLen == 0) return NULL;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <cli_find_element_in_menu+0x22>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e059      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(cliBuffer == NULL) return NULL;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <cli_find_element_in_menu+0x2c>
 8000b72:	2300      	movs	r3, #0
 8000b74:	e054      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(currentMenu == NULL) return NULL;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <cli_find_element_in_menu+0x36>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e04f      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <cli_find_element_in_menu+0x42>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e049      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    
    cliElement_t* ret = NULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000b90:	2300      	movs	r3, #0
 8000b92:	74fb      	strb	r3, [r7, #19]
 8000b94:	e032      	b.n	8000bfc <cli_find_element_in_menu+0xb2>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	6859      	ldr	r1, [r3, #4]
 8000b9a:	7cfa      	ldrb	r2, [r7, #19]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	440b      	add	r3, r1
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d021      	beq.n	8000bf0 <cli_find_element_in_menu+0xa6>
        
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	7cfa      	ldrb	r2, [r7, #19]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff ff61 	bl	8000a88 <cli_str_starts_with>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d110      	bne.n	8000bf4 <cli_find_element_in_menu+0xaa>
        
        if(ret != NULL){
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <cli_find_element_in_menu+0x92>
            ERR_PRINTLN("Command not unique");
            return NULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e021      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
        } 
        
        ret = (cliElement_t*) &currentMenu->subMenuRef[i];
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	7cfa      	ldrb	r2, [r7, #19]
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	e002      	b.n	8000bf6 <cli_find_element_in_menu+0xac>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000bf0:	bf00      	nop
 8000bf2:	e000      	b.n	8000bf6 <cli_find_element_in_menu+0xac>
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bf4:	bf00      	nop
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000bf6:	7cfb      	ldrb	r3, [r7, #19]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	74fb      	strb	r3, [r7, #19]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	6859      	ldr	r1, [r3, #4]
 8000c00:	7cfa      	ldrb	r2, [r7, #19]
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	440b      	add	r3, r1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fcc7 	bl	80005a0 <cli_is_terminator>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f083 0301 	eor.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1bb      	bne.n	8000b96 <cli_find_element_in_menu+0x4c>
    }
    
    DBG_PRINTLN("%s", ret == NULL ? "Not found" : "Sub menu or action found" );
    
    return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <cli_arg_str_len>:

static int32_t cli_arg_str_len(char* arg){
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    if(arg ==  NULL) return -1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <cli_arg_str_len+0x14>
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e050      	b.n	8000cde <cli_arg_str_len+0xb6>
    
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b7b      	cmp	r3, #123	; 0x7b
 8000c42:	d003      	beq.n	8000c4c <cli_arg_str_len+0x24>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b22      	cmp	r3, #34	; 0x22
 8000c4a:	d101      	bne.n	8000c50 <cli_arg_str_len+0x28>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <cli_arg_str_len+0x2a>
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
    
    while(1){
        switch(arg[0]){
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b22      	cmp	r3, #34	; 0x22
 8000c5a:	d001      	beq.n	8000c60 <cli_arg_str_len+0x38>
 8000c5c:	2b7b      	cmp	r3, #123	; 0x7b
 8000c5e:	d129      	bne.n	8000cb4 <cli_arg_str_len+0x8c>
            
            case '{' :
            case '"' : {
                if(arg[i] == '\0') return -1;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <cli_arg_str_len+0x4a>
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	e035      	b.n	8000cde <cli_arg_str_len+0xb6>
                
                if(arg[0] == '{' && arg[i] == '}'){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7b      	cmp	r3, #123	; 0x7b
 8000c78:	d108      	bne.n	8000c8c <cli_arg_str_len+0x64>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b7d      	cmp	r3, #125	; 0x7d
 8000c84:	d102      	bne.n	8000c8c <cli_arg_str_len+0x64>
                    return i+1;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	e028      	b.n	8000cde <cli_arg_str_len+0xb6>
                }
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b22      	cmp	r3, #34	; 0x22
 8000c92:	d11d      	bne.n	8000cd0 <cli_arg_str_len+0xa8>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b22      	cmp	r3, #34	; 0x22
 8000c9e:	d117      	bne.n	8000cd0 <cli_arg_str_len+0xa8>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b5c      	cmp	r3, #92	; 0x5c
 8000cac:	d010      	beq.n	8000cd0 <cli_arg_str_len+0xa8>
                    return i+1;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	e014      	b.n	8000cde <cli_arg_str_len+0xb6>
                }
                break;
            }
            
            default : {
                if(arg[i] == ' ' || arg[i] == '\0') return i;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b20      	cmp	r3, #32
 8000cbe:	d005      	beq.n	8000ccc <cli_arg_str_len+0xa4>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <cli_arg_str_len+0xac>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	e006      	b.n	8000cde <cli_arg_str_len+0xb6>
                break;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <cli_arg_str_len+0xae>
                break;
 8000cd4:	bf00      	nop
            } 
        }
        
        i++;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
        switch(arg[0]){
 8000cdc:	e7ba      	b.n	8000c54 <cli_arg_str_len+0x2c>
    }
    
    return -1;
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <cli_go_to_next_argument>:

static char* cli_go_to_next_argument(char* arg){
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
    if(arg == NULL) return NULL;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <cli_go_to_next_argument+0x12>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e01c      	b.n	8000d36 <cli_go_to_next_argument+0x4c>
    
    int32_t size = cli_arg_str_len(arg);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff93 	bl	8000c28 <cli_arg_str_len>
 8000d02:	60f8      	str	r0, [r7, #12]
    
    if(size == -1) return NULL;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d101      	bne.n	8000d10 <cli_go_to_next_argument+0x26>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e012      	b.n	8000d36 <cli_go_to_next_argument+0x4c>
    
    arg += size;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
    
    while(arg[0] != '\0'){ 
 8000d18:	e006      	b.n	8000d28 <cli_go_to_next_argument+0x3e>
        //if(arg[0] == '-' || arg[0] == '{' || arg[0] == '"' || ('0' <= arg[0] && arg[0] <= '9')) break;
        if(arg[0] != ' ') break;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b20      	cmp	r3, #32
 8000d20:	d107      	bne.n	8000d32 <cli_go_to_next_argument+0x48>
        arg++;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
    while(arg[0] != '\0'){ 
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f4      	bne.n	8000d1a <cli_go_to_next_argument+0x30>
 8000d30:	e000      	b.n	8000d34 <cli_go_to_next_argument+0x4a>
        if(arg[0] != ' ') break;
 8000d32:	bf00      	nop
    }
    
    return arg;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <cli_print_arg>:

static void cli_print_arg(char* s){
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
    int len = cli_arg_str_len(s);
    DBG_PRINTF("Argument size %d = ", len);
    for(int i = 0; i < len; i++) DBG_PRINTF("%c", s[i]);
    DBG_PRINTLN("");
#endif
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <cli_verify_int>:
    
    return true;
}
#endif

static bool cli_verify_int(char* tkn, bool isUnsigned, bool printEn){
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b088      	sub	sp, #32
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	70fb      	strb	r3, [r7, #3]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	70bb      	strb	r3, [r7, #2]
    int32_t len = cli_arg_str_len(tkn);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff60 	bl	8000c28 <cli_arg_str_len>
 8000d68:	6178      	str	r0, [r7, #20]
    bool is_negative = false;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	77fb      	strb	r3, [r7, #31]
    int32_t i = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]

    if(isUnsigned == false && tkn[0] == '-'){
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80cf 	beq.w	8000f1e <cli_verify_int+0x1cc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b2d      	cmp	r3, #45	; 0x2d
 8000d86:	f040 80ca 	bne.w	8000f1e <cli_verify_int+0x1cc>
        if(len == 1) {
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <cli_verify_int+0x42>
            if(printEn) ERR_PRINTLN("Negative int does not begin");
            return false;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e0ca      	b.n	8000f2a <cli_verify_int+0x1d8>
        }
        is_negative = true;
 8000d94:	2301      	movs	r3, #1
 8000d96:	77fb      	strb	r3, [r7, #31]
        i++;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
    }
    
    while(i < len){
 8000d9e:	e0be      	b.n	8000f1e <cli_verify_int+0x1cc>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	74fb      	strb	r3, [r7, #19]
 8000daa:	f005 ffaf 	bl	8006d0c <__locale_ctype_ptr>
 8000dae:	4602      	mov	r2, r0
 8000db0:	7cfb      	ldrb	r3, [r7, #19]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d102      	bne.n	8000dc6 <cli_verify_int+0x74>
 8000dc0:	7cfb      	ldrb	r3, [r7, #19]
 8000dc2:	3320      	adds	r3, #32
 8000dc4:	e000      	b.n	8000dc8 <cli_verify_int+0x76>
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	2b78      	cmp	r3, #120	; 0x78
 8000dca:	d152      	bne.n	8000e72 <cli_verify_int+0x120>
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b30      	cmp	r3, #48	; 0x30
 8000dd8:	d149      	bne.n	8000e6e <cli_verify_int+0x11c>
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b20      	cmp	r3, #32
 8000de6:	d006      	beq.n	8000df6 <cli_verify_int+0xa4>
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	3b02      	subs	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d13b      	bne.n	8000e6e <cli_verify_int+0x11c>
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b2f      	cmp	r3, #47	; 0x2f
 8000e02:	d906      	bls.n	8000e12 <cli_verify_int+0xc0>
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3301      	adds	r3, #1
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b39      	cmp	r3, #57	; 0x39
 8000e10:	d92f      	bls.n	8000e72 <cli_verify_int+0x120>
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	3301      	adds	r3, #1
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	74bb      	strb	r3, [r7, #18]
 8000e1e:	f005 ff75 	bl	8006d0c <__locale_ctype_ptr>
 8000e22:	4602      	mov	r2, r0
 8000e24:	7cbb      	ldrb	r3, [r7, #18]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d102      	bne.n	8000e3a <cli_verify_int+0xe8>
 8000e34:	7cbb      	ldrb	r3, [r7, #18]
 8000e36:	3320      	adds	r3, #32
 8000e38:	e000      	b.n	8000e3c <cli_verify_int+0xea>
 8000e3a:	7cbb      	ldrb	r3, [r7, #18]
 8000e3c:	2b60      	cmp	r3, #96	; 0x60
 8000e3e:	dd16      	ble.n	8000e6e <cli_verify_int+0x11c>
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	3301      	adds	r3, #1
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	747b      	strb	r3, [r7, #17]
 8000e4c:	f005 ff5e 	bl	8006d0c <__locale_ctype_ptr>
 8000e50:	4602      	mov	r2, r0
 8000e52:	7c7b      	ldrb	r3, [r7, #17]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <cli_verify_int+0x116>
 8000e62:	7c7b      	ldrb	r3, [r7, #17]
 8000e64:	3320      	adds	r3, #32
 8000e66:	e000      	b.n	8000e6a <cli_verify_int+0x118>
 8000e68:	7c7b      	ldrb	r3, [r7, #17]
 8000e6a:	2b66      	cmp	r3, #102	; 0x66
 8000e6c:	dd01      	ble.n	8000e72 <cli_verify_int+0x120>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ));
            return false;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e05b      	b.n	8000f2a <cli_verify_int+0x1d8>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e7c:	d905      	bls.n	8000e8a <cli_verify_int+0x138>
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b39      	cmp	r3, #57	; 0x39
 8000e88:	d946      	bls.n	8000f18 <cli_verify_int+0x1c6>
 8000e8a:	7ffb      	ldrb	r3, [r7, #31]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d141      	bne.n	8000f14 <cli_verify_int+0x1c2>
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	743b      	strb	r3, [r7, #16]
 8000e9a:	f005 ff37 	bl	8006d0c <__locale_ctype_ptr>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	7c3b      	ldrb	r3, [r7, #16]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <cli_verify_int+0x164>
 8000eb0:	7c3b      	ldrb	r3, [r7, #16]
 8000eb2:	3320      	adds	r3, #32
 8000eb4:	e000      	b.n	8000eb8 <cli_verify_int+0x166>
 8000eb6:	7c3b      	ldrb	r3, [r7, #16]
 8000eb8:	2b60      	cmp	r3, #96	; 0x60
 8000eba:	dd15      	ble.n	8000ee8 <cli_verify_int+0x196>
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	f005 ff21 	bl	8006d0c <__locale_ctype_ptr>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d102      	bne.n	8000ee2 <cli_verify_int+0x190>
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	3320      	adds	r3, #32
 8000ee0:	e000      	b.n	8000ee4 <cli_verify_int+0x192>
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	2b66      	cmp	r3, #102	; 0x66
 8000ee6:	dd17      	ble.n	8000f18 <cli_verify_int+0x1c6>
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	73bb      	strb	r3, [r7, #14]
 8000ef2:	f005 ff0b 	bl	8006d0c <__locale_ctype_ptr>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <cli_verify_int+0x1bc>
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	3320      	adds	r3, #32
 8000f0c:	e000      	b.n	8000f10 <cli_verify_int+0x1be>
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b78      	cmp	r3, #120	; 0x78
 8000f12:	d001      	beq.n	8000f18 <cli_verify_int+0x1c6>
            if(printEn) ERR_PRINTLN("Invalid character in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ) );
            return false;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e008      	b.n	8000f2a <cli_verify_int+0x1d8>
        }

        i++;
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
    while(i < len){
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	f6ff af3c 	blt.w	8000da0 <cli_verify_int+0x4e>
    }  
    
    return true;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <cli_verify_buffer>:

static bool cli_verify_buffer(char* tkn, bool printEn){
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	70fb      	strb	r3, [r7, #3]
    int i = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
    
    if(tkn == NULL) return false;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <cli_verify_buffer+0x1a>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e0ef      	b.n	800112c <cli_verify_buffer+0x1fa>
    if(tkn[0] != '"' && tkn[0] != '{') {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b22      	cmp	r3, #34	; 0x22
 8000f52:	d005      	beq.n	8000f60 <cli_verify_buffer+0x2e>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b7b      	cmp	r3, #123	; 0x7b
 8000f5a:	d001      	beq.n	8000f60 <cli_verify_buffer+0x2e>
        if(printEn) ERR_PRINTLN("Buffer argument does not begin with '\"' nor '{'");
        return false;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e0e5      	b.n	800112c <cli_verify_buffer+0x1fa>
    }
    
    int32_t len = cli_arg_str_len(tkn);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fe61 	bl	8000c28 <cli_arg_str_len>
 8000f66:	6138      	str	r0, [r7, #16]
    
    if(len == -1) {
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d101      	bne.n	8000f74 <cli_verify_buffer+0x42>
        if(printEn) ERR_PRINTLN("Buffer beginning with '%c' does not end", tkn[0]);
        return false;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e0db      	b.n	800112c <cli_verify_buffer+0x1fa>
    }
    
    if(tkn[0] == '"') return true;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b22      	cmp	r3, #34	; 0x22
 8000f7a:	d101      	bne.n	8000f80 <cli_verify_buffer+0x4e>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0d5      	b.n	800112c <cli_verify_buffer+0x1fa>
    
    for(i = 1; i < len; i++){
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e0ca      	b.n	800111c <cli_verify_buffer+0x1ea>
        if(tkn[i] == '}') break; 
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b7d      	cmp	r3, #125	; 0x7d
 8000f90:	f000 80ca 	beq.w	8001128 <cli_verify_buffer+0x1f6>
        
        if(tkn[i] == ' ') continue;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	f000 80b9 	beq.w	8001114 <cli_verify_buffer+0x1e2>
        
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	f005 feae 	bl	8006d0c <__locale_ctype_ptr>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <cli_verify_buffer+0x96>
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	e000      	b.n	8000fca <cli_verify_buffer+0x98>
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b78      	cmp	r3, #120	; 0x78
 8000fcc:	d152      	bne.n	8001074 <cli_verify_buffer+0x142>
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b30      	cmp	r3, #48	; 0x30
 8000fda:	d149      	bne.n	8001070 <cli_verify_buffer+0x13e>
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b20      	cmp	r3, #32
 8000fe8:	d006      	beq.n	8000ff8 <cli_verify_buffer+0xc6>
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3b02      	subs	r3, #2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b7b      	cmp	r3, #123	; 0x7b
 8000ff6:	d13b      	bne.n	8001070 <cli_verify_buffer+0x13e>
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b2f      	cmp	r3, #47	; 0x2f
 8001004:	d906      	bls.n	8001014 <cli_verify_buffer+0xe2>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b39      	cmp	r3, #57	; 0x39
 8001012:	d92f      	bls.n	8001074 <cli_verify_buffer+0x142>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	73bb      	strb	r3, [r7, #14]
 8001020:	f005 fe74 	bl	8006d0c <__locale_ctype_ptr>
 8001024:	4602      	mov	r2, r0
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	3301      	adds	r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <cli_verify_buffer+0x10a>
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	3320      	adds	r3, #32
 800103a:	e000      	b.n	800103e <cli_verify_buffer+0x10c>
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b60      	cmp	r3, #96	; 0x60
 8001040:	dd16      	ble.n	8001070 <cli_verify_buffer+0x13e>
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	737b      	strb	r3, [r7, #13]
 800104e:	f005 fe5d 	bl	8006d0c <__locale_ctype_ptr>
 8001052:	4602      	mov	r2, r0
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	3301      	adds	r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <cli_verify_buffer+0x138>
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	3320      	adds	r3, #32
 8001068:	e000      	b.n	800106c <cli_verify_buffer+0x13a>
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	2b66      	cmp	r3, #102	; 0x66
 800106e:	dd01      	ble.n	8001074 <cli_verify_buffer+0x142>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in buffer beginning with '{'");
            return false;
 8001070:	2300      	movs	r3, #0
 8001072:	e05b      	b.n	800112c <cli_verify_buffer+0x1fa>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b2f      	cmp	r3, #47	; 0x2f
 800107e:	d905      	bls.n	800108c <cli_verify_buffer+0x15a>
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b39      	cmp	r3, #57	; 0x39
 800108a:	d944      	bls.n	8001116 <cli_verify_buffer+0x1e4>
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	733b      	strb	r3, [r7, #12]
 8001096:	f005 fe39 	bl	8006d0c <__locale_ctype_ptr>
 800109a:	4602      	mov	r2, r0
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <cli_verify_buffer+0x180>
 80010ac:	7b3b      	ldrb	r3, [r7, #12]
 80010ae:	3320      	adds	r3, #32
 80010b0:	e000      	b.n	80010b4 <cli_verify_buffer+0x182>
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	2b60      	cmp	r3, #96	; 0x60
 80010b6:	dd15      	ble.n	80010e4 <cli_verify_buffer+0x1b2>
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	f005 fe23 	bl	8006d0c <__locale_ctype_ptr>
 80010c6:	4602      	mov	r2, r0
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <cli_verify_buffer+0x1ac>
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	3320      	adds	r3, #32
 80010dc:	e000      	b.n	80010e0 <cli_verify_buffer+0x1ae>
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b66      	cmp	r3, #102	; 0x66
 80010e2:	dd18      	ble.n	8001116 <cli_verify_buffer+0x1e4>
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	72bb      	strb	r3, [r7, #10]
 80010ee:	f005 fe0d 	bl	8006d0c <__locale_ctype_ptr>
 80010f2:	4602      	mov	r2, r0
 80010f4:	7abb      	ldrb	r3, [r7, #10]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <cli_verify_buffer+0x1d8>
 8001104:	7abb      	ldrb	r3, [r7, #10]
 8001106:	3320      	adds	r3, #32
 8001108:	e000      	b.n	800110c <cli_verify_buffer+0x1da>
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	2b78      	cmp	r3, #120	; 0x78
 800110e:	d002      	beq.n	8001116 <cli_verify_buffer+0x1e4>
            if(printEn) ERR_PRINTLN("Invalid character in buffer beginning with '{'");
            return false;
 8001110:	2300      	movs	r3, #0
 8001112:	e00b      	b.n	800112c <cli_verify_buffer+0x1fa>
        if(tkn[i] == ' ') continue;
 8001114:	bf00      	nop
    for(i = 1; i < len; i++){
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	f6ff af30 	blt.w	8000f86 <cli_verify_buffer+0x54>
 8001126:	e000      	b.n	800112a <cli_verify_buffer+0x1f8>
        if(tkn[i] == '}') break; 
 8001128:	bf00      	nop
        }
    }
    
    return true;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <cli_verify_arguments>:

static bool cli_verify_arguments(cliElement_t* e){
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <cli_verify_arguments+0x12>
 8001142:	2300      	movs	r3, #0
 8001144:	e0be      	b.n	80012c4 <cli_verify_arguments+0x190>
    if(e->args == NULL) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <cli_verify_arguments+0x1e>
        ERR_PRINTLN("Arguments string is null for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return false;
 800114e:	2300      	movs	r3, #0
 8001150:	e0b8      	b.n	80012c4 <cli_verify_arguments+0x190>
    }
    
    DBG_PRINTLN("args = %s", argsStr);
    
    char* argTkn = argsStr;
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <cli_verify_arguments+0x198>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	61fb      	str	r3, [r7, #28]
    
    bool elipsisPresent = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 800115c:	f107 030f 	add.w	r3, r7, #15
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fa71 	bl	800064a <cli_verify_args_str>
 8001168:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    DBG_PRINTLN("Len = %d, elipsisPresent = %d", len, elipsisPresent);
    
    if(len == -1){
 800116c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001170:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001174:	bf08      	it	eq
 8001176:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 800117a:	d101      	bne.n	8001180 <cli_verify_arguments+0x4c>
        return false;
 800117c:	2300      	movs	r3, #0
 800117e:	e0a1      	b.n	80012c4 <cli_verify_arguments+0x190>
    }
    
    size_t i = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    
    for(i = 0; i < len; i++){
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	e05e      	b.n	8001248 <cli_verify_arguments+0x114>
        if(argTkn == NULL) {
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <cli_verify_arguments+0x60>
            ERR_PRINTLN("No arguments in argument list for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 8001190:	2300      	movs	r3, #0
 8001192:	e097      	b.n	80012c4 <cli_verify_arguments+0x190>
        }
        
        if(argTkn[0] == '\0'){
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <cli_verify_arguments+0x6c>
            ERR_PRINTLN("Expected more arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 800119c:	2300      	movs	r3, #0
 800119e:	e091      	b.n	80012c4 <cli_verify_arguments+0x190>
        }
        
        cli_print_arg(argTkn);
 80011a0:	69f8      	ldr	r0, [r7, #28]
 80011a2:	f7ff fdcc 	bl	8000d3e <cli_print_arg>

        switch(e->args[i]){
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b69      	cmp	r3, #105	; 0x69
 80011b2:	d00b      	beq.n	80011cc <cli_verify_arguments+0x98>
 80011b4:	2b69      	cmp	r3, #105	; 0x69
 80011b6:	dc04      	bgt.n	80011c2 <cli_verify_arguments+0x8e>
 80011b8:	2b2a      	cmp	r3, #42	; 0x2a
 80011ba:	d024      	beq.n	8001206 <cli_verify_arguments+0xd2>
 80011bc:	2b62      	cmp	r3, #98	; 0x62
 80011be:	d019      	beq.n	80011f4 <cli_verify_arguments+0xc0>
 80011c0:	e032      	b.n	8001228 <cli_verify_arguments+0xf4>
 80011c2:	2b73      	cmp	r3, #115	; 0x73
 80011c4:	d016      	beq.n	80011f4 <cli_verify_arguments+0xc0>
 80011c6:	2b75      	cmp	r3, #117	; 0x75
 80011c8:	d00a      	beq.n	80011e0 <cli_verify_arguments+0xac>
 80011ca:	e02d      	b.n	8001228 <cli_verify_arguments+0xf4>
                return false;
            }
            #endif
            
            case 'i' : {
                if(cli_verify_int(argTkn, false, true)) break;
 80011cc:	2201      	movs	r2, #1
 80011ce:	2100      	movs	r1, #0
 80011d0:	69f8      	ldr	r0, [r7, #28]
 80011d2:	f7ff fdbe 	bl	8000d52 <cli_verify_int>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d127      	bne.n	800122c <cli_verify_arguments+0xf8>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 80011dc:	2300      	movs	r3, #0
 80011de:	e071      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            case 'u' : {
                if(cli_verify_int(argTkn, true, true)) break;
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	69f8      	ldr	r0, [r7, #28]
 80011e6:	f7ff fdb4 	bl	8000d52 <cli_verify_int>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11f      	bne.n	8001230 <cli_verify_arguments+0xfc>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e067      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            case 's' :
            case 'b' : {
                if(cli_verify_buffer(argTkn, true)) break;
 80011f4:	2101      	movs	r1, #1
 80011f6:	69f8      	ldr	r0, [r7, #28]
 80011f8:	f7ff fe9b 	bl	8000f32 <cli_verify_buffer>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <cli_verify_arguments+0x100>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001202:	2300      	movs	r3, #0
 8001204:	e05e      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            case '*' : {
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7ff fda1 	bl	8000d52 <cli_verify_int>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d110      	bne.n	8001238 <cli_verify_arguments+0x104>
 8001216:	2100      	movs	r1, #0
 8001218:	69f8      	ldr	r0, [r7, #28]
 800121a:	f7ff fe8a 	bl	8000f32 <cli_verify_buffer>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d109      	bne.n	8001238 <cli_verify_arguments+0x104>
                {
                    break;
                }
                
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001224:	2300      	movs	r3, #0
 8001226:	e04d      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            default : {
                DBG_PRINTLN("Unrecognized arguments");
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e04b      	b.n	80012c4 <cli_verify_arguments+0x190>
                if(cli_verify_int(argTkn, false, true)) break;
 800122c:	bf00      	nop
 800122e:	e004      	b.n	800123a <cli_verify_arguments+0x106>
                if(cli_verify_int(argTkn, true, true)) break;
 8001230:	bf00      	nop
 8001232:	e002      	b.n	800123a <cli_verify_arguments+0x106>
                if(cli_verify_buffer(argTkn, true)) break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <cli_verify_arguments+0x106>
            }
        }
        
        argTkn = cli_go_to_next_argument(argTkn);
 8001238:	bf00      	nop
 800123a:	69f8      	ldr	r0, [r7, #28]
 800123c:	f7ff fd55 	bl	8000cea <cli_go_to_next_argument>
 8001240:	61f8      	str	r0, [r7, #28]
    for(i = 0; i < len; i++){
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3301      	adds	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001254:	4299      	cmp	r1, r3
 8001256:	eb72 0304 	sbcs.w	r3, r2, r4
 800125a:	db96      	blt.n	800118a <cli_verify_arguments+0x56>
    }
    
    if(elipsisPresent){
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d026      	beq.n	80012b0 <cli_verify_arguments+0x17c>
        while(argTkn != NULL && argTkn[0] != '\0'){
 8001262:	e01d      	b.n	80012a0 <cli_verify_arguments+0x16c>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f7ff fd72 	bl	8000d52 <cli_verify_int>
 800126e:	4603      	mov	r3, r0
 8001270:	f083 0301 	eor.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <cli_verify_arguments+0x15e>
 800127a:	2100      	movs	r1, #0
 800127c:	69f8      	ldr	r0, [r7, #28]
 800127e:	f7ff fe58 	bl	8000f32 <cli_verify_buffer>
 8001282:	4603      	mov	r3, r0
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <cli_verify_arguments+0x15e>
                #endif
            
                ) ) 
            {
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ));
                return false;
 800128e:	2300      	movs	r3, #0
 8001290:	e018      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            argTkn = cli_go_to_next_argument(argTkn);
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff fd29 	bl	8000cea <cli_go_to_next_argument>
 8001298:	61f8      	str	r0, [r7, #28]
            i++;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
        while(argTkn != NULL && argTkn[0] != '\0'){
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <cli_verify_arguments+0x18e>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1da      	bne.n	8001264 <cli_verify_arguments+0x130>
 80012ae:	e008      	b.n	80012c2 <cli_verify_arguments+0x18e>
        }
    }
    
    else {
        if(argTkn != NULL && argTkn[0] != '\0'){
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <cli_verify_arguments+0x18e>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <cli_verify_arguments+0x18e>
            ERR_PRINTLN("Expected less arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <cli_verify_arguments+0x190>
        }
    }
    
    //if(argTkn[0] != '\0') ERR_PRINTLN();
    return true;
 80012c2:	2301      	movs	r3, #1
    //return ( (argTkn[0] == '\0') ? true : false );
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	200002d8 	.word	0x200002d8

080012d0 <cli_execute_action>:

static void cli_execute_action(cliElement_t* e){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80be 	beq.w	800145c <cli_execute_action+0x18c>
    if(e->args == NULL) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80bb 	beq.w	8001460 <cli_execute_action+0x190>
        ERR_PRINTLN("Argument list NULL in action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    do{
        bool elipsisPresent = false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	737b      	strb	r3, [r7, #13]
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80012ee:	f107 030d 	add.w	r3, r7, #13
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff f9a8 	bl	800064a <cli_verify_args_str>
 80012fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
        
        if(len == -1) return;
 80012fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001302:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001306:	bf08      	it	eq
 8001308:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 800130c:	f000 80aa 	beq.w	8001464 <cli_execute_action+0x194>

        argsStr = strtok(NULL, "\0");
 8001310:	4956      	ldr	r1, [pc, #344]	; (800146c <cli_execute_action+0x19c>)
 8001312:	2000      	movs	r0, #0
 8001314:	f006 f8ce 	bl	80074b4 <strtok>
 8001318:	4602      	mov	r2, r0
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <cli_execute_action+0x1a0>)
 800131c:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL) argsStr = "";
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <cli_execute_action+0x1a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <cli_execute_action+0x5c>
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <cli_execute_action+0x1a0>)
 8001328:	4a52      	ldr	r2, [pc, #328]	; (8001474 <cli_execute_action+0x1a4>)
 800132a:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <cli_execute_action+0x1a0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d14c      	bne.n	80013ce <cli_execute_action+0xfe>
 8001334:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001338:	4323      	orrs	r3, r4
 800133a:	d17d      	bne.n	8001438 <cli_execute_action+0x168>
        
        while(argsStr != NULL && argsStr[0] != '\0') {
 800133c:	e047      	b.n	80013ce <cli_execute_action+0xfe>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 800133e:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <cli_execute_action+0x1a0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b2d      	cmp	r3, #45	; 0x2d
 8001346:	d04b      	beq.n	80013e0 <cli_execute_action+0x110>
 8001348:	4b49      	ldr	r3, [pc, #292]	; (8001470 <cli_execute_action+0x1a0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b7b      	cmp	r3, #123	; 0x7b
 8001350:	d046      	beq.n	80013e0 <cli_execute_action+0x110>
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <cli_execute_action+0x1a0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b22      	cmp	r3, #34	; 0x22
 800135a:	d041      	beq.n	80013e0 <cli_execute_action+0x110>
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <cli_execute_action+0x1a0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b2f      	cmp	r3, #47	; 0x2f
 8001364:	d904      	bls.n	8001370 <cli_execute_action+0xa0>
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <cli_execute_action+0x1a0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b39      	cmp	r3, #57	; 0x39
 800136e:	d937      	bls.n	80013e0 <cli_execute_action+0x110>
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <cli_execute_action+0x1a0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	f005 fcc8 	bl	8006d0c <__locale_ctype_ptr>
 800137c:	4602      	mov	r2, r0
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3301      	adds	r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d102      	bne.n	8001394 <cli_execute_action+0xc4>
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3320      	adds	r3, #32
 8001392:	e000      	b.n	8001396 <cli_execute_action+0xc6>
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b60      	cmp	r3, #96	; 0x60
 8001398:	dd14      	ble.n	80013c4 <cli_execute_action+0xf4>
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <cli_execute_action+0x1a0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	73bb      	strb	r3, [r7, #14]
 80013a2:	f005 fcb3 	bl	8006d0c <__locale_ctype_ptr>
 80013a6:	4602      	mov	r2, r0
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <cli_execute_action+0xee>
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	3320      	adds	r3, #32
 80013bc:	e000      	b.n	80013c0 <cli_execute_action+0xf0>
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	2b66      	cmp	r3, #102	; 0x66
 80013c2:	dd0d      	ble.n	80013e0 <cli_execute_action+0x110>
            argsStr++;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <cli_execute_action+0x1a0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a29      	ldr	r2, [pc, #164]	; (8001470 <cli_execute_action+0x1a0>)
 80013cc:	6013      	str	r3, [r2, #0]
        while(argsStr != NULL && argsStr[0] != '\0') {
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <cli_execute_action+0x1a0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <cli_execute_action+0x110>
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <cli_execute_action+0x1a0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ae      	bne.n	800133e <cli_execute_action+0x6e>
        }
        
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <cli_execute_action+0x1a0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <cli_execute_action+0x12a>
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <cli_execute_action+0x1a0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <cli_execute_action+0x12a>
 80013f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013f6:	4323      	orrs	r3, r4
 80013f8:	d120      	bne.n	800143c <cli_execute_action+0x16c>
        
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe9a 	bl	8001134 <cli_verify_arguments>
 8001400:	4603      	mov	r3, r0
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d119      	bne.n	8001440 <cli_execute_action+0x170>
        
        if(e->action == NULL) { 
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <cli_execute_action+0x14c>
            ERR_PRINTLN("No action configured for action '%s'", ( (e->name == NULL)  ? "NULL_NAME" : e->name ) );
            ERR_PRINTLN("");
            argsStr = NULL;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <cli_execute_action+0x1a0>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
            return;
 800141a:	e024      	b.n	8001466 <cli_execute_action+0x196>
        }
        
        currEl = e;
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <cli_execute_action+0x1a8>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
        
        e->action();
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4798      	blx	r3
        
        currEl = NULL;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <cli_execute_action+0x1a8>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
        argsStr = NULL;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <cli_execute_action+0x1a0>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
        
        return;
 8001434:	bf00      	nop
 8001436:	e016      	b.n	8001466 <cli_execute_action+0x196>
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <cli_execute_action+0x172>
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <cli_execute_action+0x172>
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 8001440:	bf00      	nop
        
    }while(0);
    
    argsStr = NULL;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <cli_execute_action+0x1a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <cli_execute_action+0x1ac>)
 800144a:	f000 fc3b 	bl	8001cc4 <cli_printf>
    MENU_PRINTLN("");
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <cli_execute_action+0x1b0>)
 8001450:	f000 fc38 	bl	8001cc4 <cli_printf>
    cli_print_action(e);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fa0f 	bl	8000878 <cli_print_action>
 800145a:	e004      	b.n	8001466 <cli_execute_action+0x196>
    if(e == NULL) return;
 800145c:	bf00      	nop
 800145e:	e002      	b.n	8001466 <cli_execute_action+0x196>
        return;
 8001460:	bf00      	nop
 8001462:	e000      	b.n	8001466 <cli_execute_action+0x196>
        if(len == -1) return;
 8001464:	bf00      	nop
}
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	08007ea8 	.word	0x08007ea8
 8001470:	200002d8 	.word	0x200002d8
 8001474:	08007eac 	.word	0x08007eac
 8001478:	200002dc 	.word	0x200002dc
 800147c:	08007eb0 	.word	0x08007eb0
 8001480:	08007ddc 	.word	0x08007ddc

08001484 <cli_find_action>:

static void cli_find_action(char cliBuffer[], size_t maxLen){
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d048      	beq.n	8001526 <cli_find_action+0xa2>
    if(cliBuffer == NULL) return;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d047      	beq.n	800152a <cli_find_action+0xa6>
    
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <cli_find_action+0xb4>)
 800149c:	f107 040c 	add.w	r4, r7, #12
 80014a0:	461d      	mov	r5, r3
 80014a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014aa:	e884 0003 	stmia.w	r4, {r0, r1}
    cliElement_t* currentMenu = &init;
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char* tkn = strtok((char*)cliBuffer, " ");
 80014b4:	4921      	ldr	r1, [pc, #132]	; (800153c <cli_find_action+0xb8>)
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f005 fffc 	bl	80074b4 <strtok>
 80014bc:	62b8      	str	r0, [r7, #40]	; 0x28
    
    while(tkn != NULL){
 80014be:	e021      	b.n	8001504 <cli_find_action+0x80>
        cliElement_t* e = cli_find_element_in_menu(tkn, cliBuffer, maxLen, currentMenu);
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c8:	f7ff fb3f 	bl	8000b4a <cli_find_element_in_menu>
 80014cc:	6278      	str	r0, [r7, #36]	; 0x24
        
        if(e == NULL){
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01b      	beq.n	800150c <cli_find_action+0x88>
            break;
        }
        
        if(cli_is_sub_menu(e)){
 80014d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014d6:	f7ff f88c 	bl	80005f2 <cli_is_sub_menu>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <cli_find_action+0x62>
            DBG_PRINTLN("Entering submenu '%s'", e->name);
            currentMenu = e;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e4:	e009      	b.n	80014fa <cli_find_action+0x76>
        }
        
        else if(cli_is_action(e)){
 80014e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014e8:	f7ff f899 	bl	800061e <cli_is_action>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01d      	beq.n	800152e <cli_find_action+0xaa>
            DBG_PRINTLN("Action '%s' found", e->name);
            cli_execute_action(e);
 80014f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f4:	f7ff feec 	bl	80012d0 <cli_execute_action>
            return;
 80014f8:	e01a      	b.n	8001530 <cli_find_action+0xac>
            ERR_PRINTLN("Unknown type of CLI element (check for NULLs in CLIs defines ref cli.h lines 49 - 52)");
            ERR_PRINTLN("");
            return;
        }

        tkn = strtok(NULL, " ");
 80014fa:	4910      	ldr	r1, [pc, #64]	; (800153c <cli_find_action+0xb8>)
 80014fc:	2000      	movs	r0, #0
 80014fe:	f005 ffd9 	bl	80074b4 <strtok>
 8001502:	62b8      	str	r0, [r7, #40]	; 0x28
    while(tkn != NULL){
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1da      	bne.n	80014c0 <cli_find_action+0x3c>
 800150a:	e000      	b.n	800150e <cli_find_action+0x8a>
            break;
 800150c:	bf00      	nop
    }
    
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	461a      	mov	r2, r3
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <cli_find_action+0xbc>)
 800151a:	f000 fbd3 	bl	8001cc4 <cli_printf>
    cli_print_menu(currentMenu);
 800151e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001520:	f7ff f970 	bl	8000804 <cli_print_menu>
 8001524:	e004      	b.n	8001530 <cli_find_action+0xac>
    if(maxLen == 0) return;
 8001526:	bf00      	nop
 8001528:	e002      	b.n	8001530 <cli_find_action+0xac>
    if(cliBuffer == NULL) return;
 800152a:	bf00      	nop
 800152c:	e000      	b.n	8001530 <cli_find_action+0xac>
            return;
 800152e:	bf00      	nop
}
 8001530:	3730      	adds	r7, #48	; 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bdb0      	pop	{r4, r5, r7, pc}
 8001536:	bf00      	nop
 8001538:	08007f58 	.word	0x08007f58
 800153c:	08007dbc 	.word	0x08007dbc
 8001540:	08007f30 	.word	0x08007f30

08001544 <cli_buff_element_is_hex>:

static bool cli_buff_element_is_hex(char* base, size_t argLen){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b30      	cmp	r3, #48	; 0x30
 8001554:	d115      	bne.n	8001582 <cli_buff_element_is_hex+0x3e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	72fb      	strb	r3, [r7, #11]
 800155c:	f005 fbd6 	bl	8006d0c <__locale_ctype_ptr>
 8001560:	4602      	mov	r2, r0
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	3301      	adds	r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <cli_buff_element_is_hex+0x34>
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	3320      	adds	r3, #32
 8001576:	e000      	b.n	800157a <cli_buff_element_is_hex+0x36>
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	2b78      	cmp	r3, #120	; 0x78
 800157c:	d101      	bne.n	8001582 <cli_buff_element_is_hex+0x3e>
 800157e:	2301      	movs	r3, #1
 8001580:	e038      	b.n	80015f4 <cli_buff_element_is_hex+0xb0>
    
    for(size_t i = 0; i < argLen; i++){
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e030      	b.n	80015ea <cli_buff_element_is_hex+0xa6>
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	72bb      	strb	r3, [r7, #10]
 8001592:	f005 fbbb 	bl	8006d0c <__locale_ctype_ptr>
 8001596:	4602      	mov	r2, r0
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	3301      	adds	r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d102      	bne.n	80015ae <cli_buff_element_is_hex+0x6a>
 80015a8:	7abb      	ldrb	r3, [r7, #10]
 80015aa:	3320      	adds	r3, #32
 80015ac:	e000      	b.n	80015b0 <cli_buff_element_is_hex+0x6c>
 80015ae:	7abb      	ldrb	r3, [r7, #10]
 80015b0:	2b60      	cmp	r3, #96	; 0x60
 80015b2:	dd17      	ble.n	80015e4 <cli_buff_element_is_hex+0xa0>
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	727b      	strb	r3, [r7, #9]
 80015be:	f005 fba5 	bl	8006d0c <__locale_ctype_ptr>
 80015c2:	4602      	mov	r2, r0
 80015c4:	7a7b      	ldrb	r3, [r7, #9]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d102      	bne.n	80015da <cli_buff_element_is_hex+0x96>
 80015d4:	7a7b      	ldrb	r3, [r7, #9]
 80015d6:	3320      	adds	r3, #32
 80015d8:	e000      	b.n	80015dc <cli_buff_element_is_hex+0x98>
 80015da:	7a7b      	ldrb	r3, [r7, #9]
 80015dc:	2b66      	cmp	r3, #102	; 0x66
 80015de:	dc01      	bgt.n	80015e4 <cli_buff_element_is_hex+0xa0>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e007      	b.n	80015f4 <cli_buff_element_is_hex+0xb0>
    for(size_t i = 0; i < argLen; i++){
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3ca      	bcc.n	8001588 <cli_buff_element_is_hex+0x44>
    }
    
    return false;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <cli_get_int_arg>:

static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08d      	sub	sp, #52	; 0x34
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	4613      	mov	r3, r2
 8001608:	71fb      	strb	r3, [r7, #7]
    if(currEl == NULL || argsStr == NULL) {
 800160a:	4b59      	ldr	r3, [pc, #356]	; (8001770 <cli_get_int_arg+0x174>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <cli_get_int_arg+0x1e>
 8001612:	4b58      	ldr	r3, [pc, #352]	; (8001774 <cli_get_int_arg+0x178>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <cli_get_int_arg+0x22>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e0a4      	b.n	8001768 <cli_get_int_arg+0x16c>
    }
    
    if(currEl->args == NULL) {
 800161e:	4b54      	ldr	r3, [pc, #336]	; (8001770 <cli_get_int_arg+0x174>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <cli_get_int_arg+0x30>
        ERR_PRINTLN("Argument string is null");
        return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e09d      	b.n	8001768 <cli_get_int_arg+0x16c>
    }
    
    bool elipsisPresent = false;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8001630:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <cli_get_int_arg+0x174>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f107 0217 	add.w	r2, r7, #23
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f805 	bl	800064a <cli_verify_args_str>
 8001640:	e9c7 0108 	strd	r0, r1, [r7, #32]
    
    if(argNum >= len && !elipsisPresent) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001650:	4299      	cmp	r1, r3
 8001652:	eb72 0304 	sbcs.w	r3, r2, r4
 8001656:	db07      	blt.n	8001668 <cli_get_int_arg+0x6c>
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <cli_get_int_arg+0x6c>
        ERR_PRINTLN("Argument index out of bounds");
        return false;
 8001664:	2300      	movs	r3, #0
 8001666:	e07f      	b.n	8001768 <cli_get_int_arg+0x16c>
    }
    
    char* argBase = argsStr;
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <cli_get_int_arg+0x178>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for(size_t i = 0; i < argNum; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
 8001672:	e006      	b.n	8001682 <cli_get_int_arg+0x86>
        argBase = cli_go_to_next_argument(argBase);
 8001674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001676:	f7ff fb38 	bl	8000cea <cli_go_to_next_argument>
 800167a:	62f8      	str	r0, [r7, #44]	; 0x2c
    for(size_t i = 0; i < argNum; i++)
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	3301      	adds	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
 8001682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3f4      	bcc.n	8001674 <cli_get_int_arg+0x78>
        
    if(argBase[0] == '\0'){ 
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <cli_get_int_arg+0x9a>
        ERR_PRINTLN("Argument '%c' index %u not found in buffer", ( (isUnsigned) ? 'u' : 'i' ), argNum);
        return false; 
 8001692:	2300      	movs	r3, #0
 8001694:	e068      	b.n	8001768 <cli_get_int_arg+0x16c>
    }

    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016a2:	4299      	cmp	r1, r3
 80016a4:	eb72 0304 	sbcs.w	r3, r2, r4
 80016a8:	da22      	bge.n	80016f0 <cli_get_int_arg+0xf4>
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <cli_get_int_arg+0xc4>
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <cli_get_int_arg+0x174>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b75      	cmp	r3, #117	; 0x75
 80016be:	d10d      	bne.n	80016dc <cli_get_int_arg+0xe0>
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d011      	beq.n	80016f0 <cli_get_int_arg+0xf4>
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <cli_get_int_arg+0x174>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b69      	cmp	r3, #105	; 0x69
 80016da:	d009      	beq.n	80016f0 <cli_get_int_arg+0xf4>
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <cli_get_int_arg+0x174>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ea:	d001      	beq.n	80016f0 <cli_get_int_arg+0xf4>
        ERR_PRINTLN("Expected argument of type '%c', but argument list says '%c' in index %u", ( (isUnsigned) ? 'u' : 'i' ) , currEl->args[argNum], argNum);
        return false;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e03b      	b.n	8001768 <cli_get_int_arg+0x16c>
    }
    else if(argNum >= len || currEl->args[argNum] == '*'){
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016fc:	4299      	cmp	r1, r3
 80016fe:	eb72 0304 	sbcs.w	r3, r2, r4
 8001702:	da07      	bge.n	8001714 <cli_get_int_arg+0x118>
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <cli_get_int_arg+0x174>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b2a      	cmp	r3, #42	; 0x2a
 8001712:	d10d      	bne.n	8001730 <cli_get_int_arg+0x134>
        if(!cli_verify_int(argBase, isUnsigned, true)) return false;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800171c:	f7ff fb19 	bl	8000d52 <cli_verify_int>
 8001720:	4603      	mov	r3, r0
 8001722:	f083 0301 	eor.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <cli_get_int_arg+0x134>
 800172c:	2300      	movs	r3, #0
 800172e:	e01b      	b.n	8001768 <cli_get_int_arg+0x16c>
    }
        
    int32_t argLen = cli_arg_str_len(argBase);
 8001730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001732:	f7ff fa79 	bl	8000c28 <cli_arg_str_len>
 8001736:	61f8      	str	r0, [r7, #28]
    
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4619      	mov	r1, r3
 800173c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800173e:	f7ff ff01 	bl	8001544 <cli_buff_element_is_hex>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <cli_get_int_arg+0x150>
 8001748:	2310      	movs	r3, #16
 800174a:	e000      	b.n	800174e <cli_get_int_arg+0x152>
 800174c:	230a      	movs	r3, #10
 800174e:	61bb      	str	r3, [r7, #24]
        
    *res = strtol(argBase, NULL, num_base);
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	2100      	movs	r1, #0
 8001754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001756:	f005 ff7d 	bl	8007654 <strtol>
 800175a:	4603      	mov	r3, r0
 800175c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	e9c2 3400 	strd	r3, r4, [r2]

    return true;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3734      	adds	r7, #52	; 0x34
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	200002dc 	.word	0x200002dc
 8001774:	200002d8 	.word	0x200002d8

08001778 <cli_get_quotes>:

static bool cli_get_quotes(char* base, int32_t argLen, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	size_t pos = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    bool err = true;
 800178a:	2301      	movs	r3, #1
 800178c:	76fb      	strb	r3, [r7, #27]
    size_t endString = ( (isString == true) ? 1 : 0 );
 800178e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001792:	613b      	str	r3, [r7, #16]
    
    for(int i = 1; i < argLen - 1; i++){
 8001794:	2301      	movs	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e06e      	b.n	8001878 <cli_get_quotes+0x100>
        
        if(pos >= buffLen - endString){
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d302      	bcc.n	80017ac <cli_get_quotes+0x34>
            ERR_PRINTLN("Buffer received is too tiny, exiting...");
            err = false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	76fb      	strb	r3, [r7, #27]
            break;
 80017aa:	e06a      	b.n	8001882 <cli_get_quotes+0x10a>
        }
        
        if(base[i] == '\\'){
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b5c      	cmp	r3, #92	; 0x5c
 80017b6:	d152      	bne.n	800185e <cli_get_quotes+0xe6>
            switch(base[i + 1]){
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b5c      	cmp	r3, #92	; 0x5c
 80017c4:	d00b      	beq.n	80017de <cli_get_quotes+0x66>
 80017c6:	2b5c      	cmp	r3, #92	; 0x5c
 80017c8:	dc04      	bgt.n	80017d4 <cli_get_quotes+0x5c>
 80017ca:	2b22      	cmp	r3, #34	; 0x22
 80017cc:	d012      	beq.n	80017f4 <cli_get_quotes+0x7c>
 80017ce:	2b30      	cmp	r3, #48	; 0x30
 80017d0:	d01b      	beq.n	800180a <cli_get_quotes+0x92>
 80017d2:	e03b      	b.n	800184c <cli_get_quotes+0xd4>
 80017d4:	2b6e      	cmp	r3, #110	; 0x6e
 80017d6:	d023      	beq.n	8001820 <cli_get_quotes+0xa8>
 80017d8:	2b72      	cmp	r3, #114	; 0x72
 80017da:	d02c      	beq.n	8001836 <cli_get_quotes+0xbe>
 80017dc:	e036      	b.n	800184c <cli_get_quotes+0xd4>
                case '\\' : buff[pos++] = '\\'; i++; break;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	61fa      	str	r2, [r7, #28]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	225c      	movs	r2, #92	; 0x5c
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e033      	b.n	800185c <cli_get_quotes+0xe4>
                case '"'  : buff[pos++] = '"';  i++; break;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	61fa      	str	r2, [r7, #28]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2222      	movs	r2, #34	; 0x22
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e028      	b.n	800185c <cli_get_quotes+0xe4>
                case '0'  : buff[pos++] = '\0'; i++; break;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	61fa      	str	r2, [r7, #28]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e01d      	b.n	800185c <cli_get_quotes+0xe4>
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	61fa      	str	r2, [r7, #28]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	220a      	movs	r2, #10
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e012      	b.n	800185c <cli_get_quotes+0xe4>
                case 'r'  : buff[pos++] = '\r'; i++; break;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	61fa      	str	r2, [r7, #28]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	220d      	movs	r2, #13
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e007      	b.n	800185c <cli_get_quotes+0xe4>
                
                default   : buff[pos++] = '\\'; break;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	61fa      	str	r2, [r7, #28]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	225c      	movs	r2, #92	; 0x5c
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	bf00      	nop
            }
            continue;
 800185c:	e009      	b.n	8001872 <cli_get_quotes+0xfa>
        }
        
        buff[pos++] = base[i];
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	441a      	add	r2, r3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	1c59      	adds	r1, r3, #1
 8001868:	61f9      	str	r1, [r7, #28]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	440b      	add	r3, r1
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < argLen - 1; i++){
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3b01      	subs	r3, #1
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	429a      	cmp	r2, r3
 8001880:	db8b      	blt.n	800179a <cli_get_quotes+0x22>
    }
    
    if(isString && pos < buffLen) buff[pos++] = '\0';
 8001882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <cli_get_quotes+0x128>
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d206      	bcs.n	80018a0 <cli_get_quotes+0x128>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	61fa      	str	r2, [r7, #28]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
    
    *res = pos;
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	601a      	str	r2, [r3, #0]
    
    return err;
 80018a6:	7efb      	ldrb	r3, [r7, #27]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3724      	adds	r7, #36	; 0x24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <cli_get_curly_braces>:

static bool cli_get_curly_braces(char* base, int32_t argLen, uint8_t buff[], size_t buffLen, size_t *res,  bool isString){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b08d      	sub	sp, #52	; 0x34
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
	size_t pos = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool err = true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    size_t endString = ( (isString == true) ? 1 : 0 );
 80018cc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018d0:	623b      	str	r3, [r7, #32]

    for(int i = 1; i < argLen - 1; i++){
 80018d2:	2301      	movs	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	e04d      	b.n	8001974 <cli_get_curly_braces+0xc0>
        
        if(base[i] == ' ') continue;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d043      	beq.n	800196c <cli_get_curly_braces+0xb8>

        int32_t sz = cli_arg_str_len(&base[i]);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f99c 	bl	8000c28 <cli_arg_str_len>
 80018f0:	61f8      	str	r0, [r7, #28]
        
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fe21 	bl	8001544 <cli_buff_element_is_hex>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <cli_get_curly_braces+0x58>
 8001908:	2310      	movs	r3, #16
 800190a:	e000      	b.n	800190e <cli_get_curly_braces+0x5a>
 800190c:	230a      	movs	r3, #10
 800190e:	61bb      	str	r3, [r7, #24]
        
        uint64_t num = (uint64_t)strtol(&base[i], NULL, num_base);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f005 fe9a 	bl	8007654 <strtol>
 8001920:	4603      	mov	r3, r0
 8001922:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001926:	e9c7 3404 	strd	r3, r4, [r7, #16]
        
        if(num > 255){
 800192a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800192e:	2c00      	cmp	r4, #0
 8001930:	bf08      	it	eq
 8001932:	f5b3 7f80 	cmpeq.w	r3, #256	; 0x100
 8001936:	d303      	bcc.n	8001940 <cli_get_curly_braces+0x8c>
            ERR_PRINTLN("Buffer argument error in byte number %u : Exceeded maximum value", pos);
            err = false;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 800193e:	e01e      	b.n	800197e <cli_get_curly_braces+0xca>
        }
        
        if(pos >= buffLen - endString){
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001948:	429a      	cmp	r2, r3
 800194a:	d303      	bcc.n	8001954 <cli_get_curly_braces+0xa0>
            ERR_PRINTLN("Buffer received is too tiny, exiting...");
            err = false;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8001952:	e014      	b.n	800197e <cli_get_curly_braces+0xca>
        }
        
        buff[pos++] = (uint8_t) num;
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	7c3a      	ldrb	r2, [r7, #16]
 8001960:	701a      	strb	r2, [r3, #0]
        
        i += sz;
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	e000      	b.n	800196e <cli_get_curly_braces+0xba>
        if(base[i] == ' ') continue;
 800196c:	bf00      	nop
    for(int i = 1; i < argLen - 1; i++){
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	3301      	adds	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3b01      	subs	r3, #1
 8001978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197a:	429a      	cmp	r2, r3
 800197c:	dbac      	blt.n	80018d8 <cli_get_curly_braces+0x24>
    }
    
    if(isString && pos < buffLen) buff[pos++] = '\0';
 800197e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <cli_get_curly_braces+0xe8>
 8001986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d206      	bcs.n	800199c <cli_get_curly_braces+0xe8>
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    
    *res = pos;
 800199c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a0:	601a      	str	r2, [r3, #0]
    
    return err;
 80019a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3734      	adds	r7, #52	; 0x34
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
	...

080019b0 <cli_get_buff_arg>:

static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08d      	sub	sp, #52	; 0x34
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
    if(currEl == NULL || argsStr == NULL) {
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <cli_get_buff_arg+0x188>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <cli_get_buff_arg+0x1e>
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <cli_get_buff_arg+0x18c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <cli_get_buff_arg+0x22>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e0ad      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    }
    
    if(currEl->args == NULL) {
 80019d2:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <cli_get_buff_arg+0x188>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <cli_get_buff_arg+0x30>
        ERR_PRINTLN("Argument string is null");
        return false;
 80019dc:	2300      	movs	r3, #0
 80019de:	e0a6      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    }
    
    bool elipsisPresent = false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	74fb      	strb	r3, [r7, #19]
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 80019e4:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <cli_get_buff_arg+0x188>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f107 0213 	add.w	r2, r7, #19
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fe2b 	bl	800064a <cli_verify_args_str>
 80019f4:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
    if(argNum >= len && !elipsisPresent) { 
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a04:	4299      	cmp	r1, r3
 8001a06:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a0a:	db07      	blt.n	8001a1c <cli_get_buff_arg+0x6c>
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	f083 0301 	eor.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <cli_get_buff_arg+0x6c>
        ERR_PRINTLN("Argument index out of bounds");
        return false;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e088      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    }
    
    char* argBase = argsStr;
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <cli_get_buff_arg+0x18c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    
    for(size_t i = 0; i < argNum; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	e006      	b.n	8001a36 <cli_get_buff_arg+0x86>
        argBase = cli_go_to_next_argument(argBase);
 8001a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a2a:	f7ff f95e 	bl	8000cea <cli_go_to_next_argument>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24
    for(size_t i = 0; i < argNum; i++)
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	3301      	adds	r3, #1
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3f4      	bcc.n	8001a28 <cli_get_buff_arg+0x78>
        
    if(argBase[0] == '\0') {
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <cli_get_buff_arg+0x9a>
        ERR_PRINTLN("Argument '%c' number %u not found in buffer", ( (isString) ? 's' : 'b' ), argNum );
        return false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e071      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    }
    
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a56:	4299      	cmp	r1, r3
 8001a58:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a5c:	da24      	bge.n	8001aa8 <cli_get_buff_arg+0xf8>
 8001a5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <cli_get_buff_arg+0xcc>
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <cli_get_buff_arg+0x188>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b62      	cmp	r3, #98	; 0x62
 8001a7a:	d10b      	bne.n	8001a94 <cli_get_buff_arg+0xe4>
 8001a7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d011      	beq.n	8001aa8 <cli_get_buff_arg+0xf8>
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <cli_get_buff_arg+0x188>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b73      	cmp	r3, #115	; 0x73
 8001a92:	d009      	beq.n	8001aa8 <cli_get_buff_arg+0xf8>
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <cli_get_buff_arg+0x188>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8001aa2:	d001      	beq.n	8001aa8 <cli_get_buff_arg+0xf8>
        ERR_PRINTLN("Expected argument of type 's', but argument list says %c in index %u", currEl->args[argNum], argNum);
        return false;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e042      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    }
    else if(argNum >= len || currEl->args[argNum] == '*'){
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ab4:	4299      	cmp	r1, r3
 8001ab6:	eb72 0304 	sbcs.w	r3, r2, r4
 8001aba:	da07      	bge.n	8001acc <cli_get_buff_arg+0x11c>
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <cli_get_buff_arg+0x188>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aca:	d103      	bne.n	8001ad4 <cli_get_buff_arg+0x124>
        cli_verify_buffer(argBase, true);
 8001acc:	2101      	movs	r1, #1
 8001ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ad0:	f7ff fa2f 	bl	8000f32 <cli_verify_buffer>
    }
    
    int32_t argLen = cli_arg_str_len(argBase);
 8001ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ad6:	f7ff f8a7 	bl	8000c28 <cli_arg_str_len>
 8001ada:	6178      	str	r0, [r7, #20]
    
    if(argLen == -1) { 
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae2:	d101      	bne.n	8001ae8 <cli_get_buff_arg+0x138>
        ERR_PRINTLN("Buffer in argument %u does not end", argNum);
        return false;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e022      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    }

    if(argBase[0] == '{') 
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b7b      	cmp	r3, #123	; 0x7b
 8001aee:	d10c      	bne.n	8001b0a <cli_get_buff_arg+0x15a>
        return cli_get_curly_braces(argBase, argLen, buff, buffLen, res, isString);
 8001af0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	6979      	ldr	r1, [r7, #20]
 8001b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b02:	f7ff fed7 	bl	80018b4 <cli_get_curly_braces>
 8001b06:	4603      	mov	r3, r0
 8001b08:	e011      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    else if(argBase[0] == '"')
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b22      	cmp	r3, #34	; 0x22
 8001b10:	d10c      	bne.n	8001b2c <cli_get_buff_arg+0x17c>
        return cli_get_quotes(argBase, argLen, buff, buffLen, res, isString);
 8001b12:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b24:	f7ff fe28 	bl	8001778 <cli_get_quotes>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	e000      	b.n	8001b2e <cli_get_buff_arg+0x17e>
    
    ERR_PRINTLN("Buffer does not begin with \" nor {");
    return false;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002dc 	.word	0x200002dc
 8001b3c:	200002d8 	.word	0x200002d8

08001b40 <cli_treat_command>:

/**********************************************
 * PRIVATE / PUBLIC FUNCTIONS
 *********************************************/
 
void cli_treat_command(char cliBuffer[], size_t maxLen){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d019      	beq.n	8001b84 <cli_treat_command+0x44>
    if(cliBuffer == NULL) return;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d018      	beq.n	8001b88 <cli_treat_command+0x48>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment == false) return;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <cli_treat_command+0x54>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d113      	bne.n	8001b8c <cli_treat_command+0x4c>
    
    cli_cmd_waiting_treatment = false; 
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <cli_treat_command+0x54>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
#endif //CLI_POLLING_EN
    
    cli_find_action(cliBuffer, maxLen);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fc89 	bl	8001484 <cli_find_action>
    
    len = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <cli_treat_command+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    memset(cliBuffer, 0, maxLen);
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f005 f8f8 	bl	8006d72 <memset>
 8001b82:	e004      	b.n	8001b8e <cli_treat_command+0x4e>
    if(maxLen == 0) return;
 8001b84:	bf00      	nop
 8001b86:	e002      	b.n	8001b8e <cli_treat_command+0x4e>
    if(cliBuffer == NULL) return;
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <cli_treat_command+0x4e>
    if(cli_cmd_waiting_treatment == false) return;
 8001b8c:	bf00      	nop
    DBG_PRINT("Cmd treated, enter new command = ");
}
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200002e0 	.word	0x200002e0
 8001b98:	200002d4 	.word	0x200002d4

08001b9c <cli_get_uint_argument>:
    if(res != NULL) *res = success;
    
    return ret;
}

uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
    uint64_t ret = 0;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	f04f 0400 	mov.w	r4, #0
 8001bae:	e9c7 3402 	strd	r3, r4, [r7, #8]
    bool success = cli_get_int_arg(argNum, (int64_t*)&ret, true);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fd1e 	bl	80015fc <cli_get_int_arg>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = success;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <cli_get_uint_argument+0x34>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	7dfa      	ldrb	r2, [r7, #23]
 8001bce:	701a      	strb	r2, [r3, #0]
    
    return ret;
 8001bd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}

08001bde <cli_get_buffer_argument>:
    
    return ret;
}
#endif

size_t cli_get_buffer_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b088      	sub	sp, #32
 8001be2:	af02      	add	r7, sp, #8
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
    size_t bRead = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, false);
 8001bf0:	f107 0210 	add.w	r2, r7, #16
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff fed6 	bl	80019b0 <cli_get_buff_arg>
 8001c04:	4603      	mov	r3, r0
 8001c06:	75fb      	strb	r3, [r7, #23]
    
    if(res != NULL) *res = ret;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <cli_get_buffer_argument+0x36>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	7dfa      	ldrb	r2, [r7, #23]
 8001c12:	701a      	strb	r2, [r3, #0]
    
    return bRead;
 8001c14:	693b      	ldr	r3, [r7, #16]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <cli_insert_char>:
    if(res != NULL) *res = ret;
    
    return bRead;
}

cli_status_e cli_insert_char(char cliBuffer[], size_t maxLen, char const c){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	71fb      	strb	r3, [r7, #7]
    if(maxLen == 0) return CLI_ERR;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <cli_insert_char+0x18>
 8001c34:	2306      	movs	r3, #6
 8001c36:	e03d      	b.n	8001cb4 <cli_insert_char+0x94>
    if(cliBuffer == NULL) return CLI_ERR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <cli_insert_char+0x22>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e038      	b.n	8001cb4 <cli_insert_char+0x94>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment){
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <cli_insert_char+0x9c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <cli_insert_char+0x2e>
        ERR_PRINTLN("Command waiting for treatment");
        return CLI_WAITING_TREATMENT;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e032      	b.n	8001cb4 <cli_insert_char+0x94>
    }
#endif //CLI_POLLING_EN

    if(c == '\r') return CLI_CONTINUE;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b0d      	cmp	r3, #13
 8001c52:	d101      	bne.n	8001c58 <cli_insert_char+0x38>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e02d      	b.n	8001cb4 <cli_insert_char+0x94>

    if(c != '\n'){
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	d011      	beq.n	8001c82 <cli_insert_char+0x62>
        cliBuffer[((len++)%maxLen)] = c;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <cli_insert_char+0xa0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <cli_insert_char+0xa0>)
 8001c66:	600a      	str	r2, [r1, #0]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	fb01 f202 	mul.w	r2, r1, r2
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	79fa      	ldrb	r2, [r7, #7]
 8001c7c:	701a      	strb	r2, [r3, #0]
        return CLI_CONTINUE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e018      	b.n	8001cb4 <cli_insert_char+0x94>
    }
    
    if(len >= maxLen){
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <cli_insert_char+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d809      	bhi.n	8001ca0 <cli_insert_char+0x80>
        len = 0;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <cli_insert_char+0xa0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
        memset(cliBuffer, 0, maxLen);
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	2100      	movs	r1, #0
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f005 f86b 	bl	8006d72 <memset>
        ERR_PRINT("COMMAND TOO LARGE! Enter new command = ");
        return CLI_TOO_BIG;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e009      	b.n	8001cb4 <cli_insert_char+0x94>
    }
    
    cliBuffer[len] = '\0';
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <cli_insert_char+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 0)
    cli_treat_command(cliBuffer, maxLen);
    return CLI_COMMAND_RCV;
#else
    cli_cmd_waiting_treatment = true;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <cli_insert_char+0x9c>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
    return CLI_WAITING_TREATMENT;
 8001cb2:	2304      	movs	r3, #4
#endif //CLI_POLLING_EN
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200002e0 	.word	0x200002e0
 8001cc0:	200002d4 	.word	0x200002d4

08001cc4 <cli_printf>:

__attribute__((weak)) void cli_printf(char const * const str, ...){
 8001cc4:	b40f      	push	{r0, r1, r2, r3}
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, str);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	607b      	str	r3, [r7, #4]
    vprintf(str, args);
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	6938      	ldr	r0, [r7, #16]
 8001cd6:	f005 fcd3 	bl	8007680 <viprintf>
    va_end(args);

}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ce4:	b004      	add	sp, #16
 8001ce6:	4770      	bx	lr

08001ce8 <cli_rcv_char_cb_irq>:
 * CLI Receive char (IRQ)
 *
 * @brief This function receives a character and puts in the cli buffer
 *
 **********************************************************************/
void cli_rcv_char_cb_irq(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	cli_insert_char(cliBuffer, sizeof(cliBuffer), c);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <cli_rcv_char_cb_irq+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <cli_rcv_char_cb_irq+0x24>)
 8001cf6:	f7ff ff93 	bl	8001c20 <cli_insert_char>
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4902      	ldr	r1, [pc, #8]	; (8001d08 <cli_rcv_char_cb_irq+0x20>)
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <cli_rcv_char_cb_irq+0x28>)
 8001d00:	f004 f984 	bl	800600c <HAL_UART_Receive_IT>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200002e1 	.word	0x200002e1
 8001d0c:	200002e4 	.word	0x200002e4
 8001d10:	20014400 	.word	0x20014400

08001d14 <cli_init>:
 * CLI INIT
 *
 * @brief This function initializes the CLI
 *
 **********************************************************************/
void cli_init(){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <cli_init+0x18>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <cli_init+0x1c>)
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <cli_init+0x18>)
 8001d24:	f004 f972 	bl	800600c <HAL_UART_Receive_IT>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20014400 	.word	0x20014400
 8001d30:	200002e1 	.word	0x200002e1

08001d34 <cli_process>:
 * CLI Process
 *
 * @brief This function treats the command sent by CLI
 *
 **********************************************************************/
void cli_process(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	cli_treat_command(cliBuffer, sizeof(cliBuffer));
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	4802      	ldr	r0, [pc, #8]	; (8001d44 <cli_process+0x10>)
 8001d3c:	f7ff ff00 	bl	8001b40 <cli_treat_command>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200002e4 	.word	0x200002e4

08001d48 <read>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void read(){
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08b      	sub	sp, #44	; 0x2c
 8001d4c:	af02      	add	r7, sp, #8

	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff ff23 	bl	8001b9c <cli_get_uint_argument>
 8001d56:	4603      	mov	r3, r0
 8001d58:	460c      	mov	r4, r1
 8001d5a:	61bb      	str	r3, [r7, #24]
	uint32_t len = cli_get_uint32_argument(1, NULL);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff ff1c 	bl	8001b9c <cli_get_uint_argument>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	617b      	str	r3, [r7, #20]

	uint8_t* buffer = (uint8_t*)os_heap_alloc(len);
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f000 fa2a 	bl	80021c4 <os_heap_alloc>
 8001d70:	6138      	str	r0, [r7, #16]
	ASSERT(buffer != NULL);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <read+0x3a>
 8001d78:	2228      	movs	r2, #40	; 0x28
 8001d7a:	4923      	ldr	r1, [pc, #140]	; (8001e08 <read+0xc0>)
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <read+0xc4>)
 8001d7e:	f005 fb71 	bl	8007464 <iprintf>

	uint32_t tickBef = HAL_GetTick();
 8001d82:	f002 fdd5 	bl	8004930 <HAL_GetTick>
 8001d86:	60f8      	str	r0, [r7, #12]
	int32_t readB = flash_read(addr, buffer, len);
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6939      	ldr	r1, [r7, #16]
 8001d8c:	69b8      	ldr	r0, [r7, #24]
 8001d8e:	f001 ffd7 	bl	8003d40 <flash_read>
 8001d92:	60b8      	str	r0, [r7, #8]
	uint32_t tickAft = HAL_GetTick();
 8001d94:	f002 fdcc 	bl	8004930 <HAL_GetTick>
 8001d98:	6078      	str	r0, [r7, #4]
	ASSERT(readB >= 0);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da04      	bge.n	8001daa <read+0x62>
 8001da0:	222d      	movs	r2, #45	; 0x2d
 8001da2:	4919      	ldr	r1, [pc, #100]	; (8001e08 <read+0xc0>)
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <read+0xc4>)
 8001da6:	f005 fb5d 	bl	8007464 <iprintf>

	PRINTLN("Read %ld bytes in %lu ms", readB, tickAft - tickBef);
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	222f      	movs	r2, #47	; 0x2f
 8001db6:	4914      	ldr	r1, [pc, #80]	; (8001e08 <read+0xc0>)
 8001db8:	4815      	ldr	r0, [pc, #84]	; (8001e10 <read+0xc8>)
 8001dba:	f005 fb53 	bl	8007464 <iprintf>
	for(int i = 0; i < len; i++){
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e00d      	b.n	8001de0 <read+0x98>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2231      	movs	r2, #49	; 0x31
 8001dd2:	490d      	ldr	r1, [pc, #52]	; (8001e08 <read+0xc0>)
 8001dd4:	480f      	ldr	r0, [pc, #60]	; (8001e14 <read+0xcc>)
 8001dd6:	f005 fb45 	bl	8007464 <iprintf>
	for(int i = 0; i < len; i++){
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8ed      	bhi.n	8001dc4 <read+0x7c>
	}

	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 8001de8:	6938      	ldr	r0, [r7, #16]
 8001dea:	f000 fa51 	bl	8002290 <os_heap_free>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <read+0xb6>
 8001df4:	2234      	movs	r2, #52	; 0x34
 8001df6:	4904      	ldr	r1, [pc, #16]	; (8001e08 <read+0xc0>)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <read+0xc4>)
 8001dfa:	f005 fb33 	bl	8007464 <iprintf>
}
 8001dfe:	bf00      	nop
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	08007fe8 	.word	0x08007fe8
 8001e0c:	08007ff4 	.word	0x08007ff4
 8001e10:	08008010 	.word	0x08008010
 8001e14:	08008038 	.word	0x08008038

08001e18 <write>:

static void write(){
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0bb      	sub	sp, #236	; 0xec
 8001e1c:	af02      	add	r7, sp, #8

	uint8_t buffer[200];
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff febb 	bl	8001b9c <cli_get_uint_argument>
 8001e26:	4603      	mov	r3, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001e2e:	4639      	mov	r1, r7
 8001e30:	2300      	movs	r3, #0
 8001e32:	22c8      	movs	r2, #200	; 0xc8
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff fed2 	bl	8001bde <cli_get_buffer_argument>
 8001e3a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	uint32_t tickBef = HAL_GetTick();
 8001e3e:	f002 fd77 	bl	8004930 <HAL_GetTick>
 8001e42:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	int32_t writeB = flash_write(addr, buffer, realSize);
 8001e46:	463b      	mov	r3, r7
 8001e48:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001e52:	f001 fe89 	bl	8003b68 <flash_write>
 8001e56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	uint32_t tickAft = HAL_GetTick();
 8001e5a:	f002 fd69 	bl	8004930 <HAL_GetTick>
 8001e5e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	ASSERT(writeB >= 0);
 8001e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da04      	bge.n	8001e74 <write+0x5c>
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <write+0xb8>)
 8001e6e:	4819      	ldr	r0, [pc, #100]	; (8001ed4 <write+0xbc>)
 8001e70:	f005 faf8 	bl	8007464 <iprintf>

	PRINTLN("Write %ld bytes in %lu ms", writeB, tickAft - tickBef);
 8001e74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001e78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e84:	2242      	movs	r2, #66	; 0x42
 8001e86:	4912      	ldr	r1, [pc, #72]	; (8001ed0 <write+0xb8>)
 8001e88:	4813      	ldr	r0, [pc, #76]	; (8001ed8 <write+0xc0>)
 8001e8a:	f005 faeb 	bl	8007464 <iprintf>
	for(int i = 0; i < realSize; i++){
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e94:	e011      	b.n	8001eba <write+0xa2>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001e96:	463a      	mov	r2, r7
 8001e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ea6:	2244      	movs	r2, #68	; 0x44
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <write+0xb8>)
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <write+0xc4>)
 8001eac:	f005 fada 	bl	8007464 <iprintf>
	for(int i = 0; i < realSize; i++){
 8001eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ebe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d8e7      	bhi.n	8001e96 <write+0x7e>
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	37e4      	adds	r7, #228	; 0xe4
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	08007fe8 	.word	0x08007fe8
 8001ed4:	08007ff4 	.word	0x08007ff4
 8001ed8:	08008058 	.word	0x08008058
 8001edc:	08008038 	.word	0x08008038

08001ee0 <erase>:

static void erase(){
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af02      	add	r7, sp, #8
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fe57 	bl	8001b9c <cli_get_uint_argument>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	617b      	str	r3, [r7, #20]
	uint32_t addrE = cli_get_uint32_argument(1, NULL);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff fe50 	bl	8001b9c <cli_get_uint_argument>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	613b      	str	r3, [r7, #16]

	uint32_t tickBef = HAL_GetTick();
 8001f02:	f002 fd15 	bl	8004930 <HAL_GetTick>
 8001f06:	60f8      	str	r0, [r7, #12]
	int32_t erase = flash_erase(addrB, addrE);
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f001 ff54 	bl	8003db8 <flash_erase>
 8001f10:	60b8      	str	r0, [r7, #8]
	uint32_t tickAft = HAL_GetTick();
 8001f12:	f002 fd0d 	bl	8004930 <HAL_GetTick>
 8001f16:	6078      	str	r0, [r7, #4]
	ASSERT(erase >= 0);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da04      	bge.n	8001f28 <erase+0x48>
 8001f1e:	224f      	movs	r2, #79	; 0x4f
 8001f20:	4908      	ldr	r1, [pc, #32]	; (8001f44 <erase+0x64>)
 8001f22:	4809      	ldr	r0, [pc, #36]	; (8001f48 <erase+0x68>)
 8001f24:	f005 fa9e 	bl	8007464 <iprintf>

	PRINTLN("erase %ld sectors in %lu ms", erase, tickAft - tickBef);
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2251      	movs	r2, #81	; 0x51
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <erase+0x64>)
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <erase+0x6c>)
 8001f38:	f005 fa94 	bl	8007464 <iprintf>
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd90      	pop	{r4, r7, pc}
 8001f44:	08007fe8 	.word	0x08007fe8
 8001f48:	08007ff4 	.word	0x08007ff4
 8001f4c:	08008080 	.word	0x08008080

08001f50 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f54:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <__NVIC_SystemReset+0x20>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <__NVIC_SystemReset+0x20>)
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_SystemReset+0x24>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <__NVIC_SystemReset+0x1c>
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	05fa0004 	.word	0x05fa0004

08001f78 <reset>:

/**********************************************************
 * PRIVATE FUNCTIONS
 **********************************************************/

static void reset(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8001f7c:	f7ff ffe8 	bl	8001f50 <__NVIC_SystemReset>

08001f80 <os_init_get>:
 * @brief This function informs other processes that the OS is initialized
 *
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	return os_init_done;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <os_init_get+0x14>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000364 	.word	0x20000364

08001f98 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	72fb      	strb	r3, [r7, #11]

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <os_init+0xbc>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <os_init+0x1c>
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	e04a      	b.n	800204a <os_init+0xb2>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <os_init+0xc0>)
 8001fb6:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	; 0xd80
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <os_init+0xc0>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <os_init+0xc4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	; (800205c <os_init+0xc4>)
 8001fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fce:	6013      	str	r3, [r2, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <os_init+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <os_init+0xc4>)
 8001fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fda:	6013      	str	r3, [r2, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <os_init+0xc0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <os_init+0xc0>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6093      	str	r3, [r2, #8]
	OS_SYSTICK_SET_PRIO(14);
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <os_init+0xc0>)
 8001fea:	22e0      	movs	r2, #224	; 0xe0
 8001fec:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <os_init+0xc0>)
 8001ff2:	22f0      	movs	r2, #240	; 0xf0
 8001ff4:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <os_init+0xc0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a16      	ldr	r2, [pc, #88]	; (8002058 <os_init+0xc0>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6093      	str	r3, [r2, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 8002004:	f000 f8c6 	bl	8002194 <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 8002008:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f001 f98b 	bl	800332c <os_task_init>
 8002016:	4603      	mov	r3, r0
 8002018:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK)
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <os_init+0x8c>
		return ret;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	e012      	b.n	800204a <os_init+0xb2>

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <os_init+0xbc>)
 8002032:	701a      	strb	r2, [r3, #0]

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, 0, idle_stack_size, NULL);
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2300      	movs	r3, #0
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <os_init+0xc8>)
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <os_init+0xcc>)
 8002044:	f001 fa48 	bl	80034d8 <os_task_create>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000364 	.word	0x20000364
 8002058:	e000e008 	.word	0xe000e008
 800205c:	e000ef34 	.word	0xe000ef34
 8002060:	08002069 	.word	0x08002069
 8002064:	2001439c 	.word	0x2001439c

08002068 <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(i);
	while(1){
 8002070:	e7fe      	b.n	8002070 <os_idle_task_fn+0x8>

08002072 <os_no_task_ready_cb>:
 * or is unblocked by an interrupt that this function will stop calling
 *
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
	return;
 8002076:	bf00      	nop
}
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <os_insufficient_heap_cb>:
 *
 * @brief This function is called by the OS when an os_alloc fails due to
 * not enogh memory
 *
 **********************************************************************/
__weak void os_insufficient_heap_cb(){
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return;
 8002084:	bf00      	nop
}
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <os_heap_BlockGetSize>:
 *
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	if(p == NULL) return 0; //Avoid explosion
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <os_heap_BlockGetSize+0x12>
 800209e:	2300      	movs	r3, #0
 80020a0:	e00b      	b.n	80020ba <os_heap_BlockGetSize+0x2a>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <os_heap_BlockGetSize+0x24>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	e002      	b.n	80020ba <os_heap_BlockGetSize+0x2a>
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <os_heap_BlockGetSize+0x38>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	1ad3      	subs	r3, r2, r3
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20014368 	.word	0x20014368

080020cc <os_heap_AllocateBeginning>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateBeginning(os_heap_header_t* p, uint32_t size){
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <os_heap_AllocateBeginning+0x14>
 80020dc:	2300      	movs	r3, #0
 80020de:	e01f      	b.n	8002120 <os_heap_AllocateBeginning+0x54>
	if(size == 0) return NULL;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <os_heap_AllocateBeginning+0x1e>
 80020e6:	2300      	movs	r3, #0
 80020e8:	e01a      	b.n	8002120 <os_heap_AllocateBeginning+0x54>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	os_heap_header_t* newBlock   = p;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	3308      	adds	r3, #8
 80020f6:	60bb      	str	r3, [r7, #8]

	/* Add Block to list
	 ---------------------------------------------------*/
	newTopHead->addr_next = newBlock->addr_next != (uint32_t)newTopHead ? newBlock->addr_next : newTopHead->addr_next;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d002      	beq.n	8002108 <os_heap_AllocateBeginning+0x3c>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e001      	b.n	800210c <os_heap_AllocateBeginning+0x40>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	6013      	str	r3, [r2, #0]
	newBlock->addr_next	  = (uint32_t) newTopHead;
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3308      	adds	r3, #8
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <os_heap_AllocateEnd>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateEnd(os_heap_header_t* p, uint32_t size){
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <os_heap_AllocateEnd+0x14>
 800213c:	2300      	movs	r3, #0
 800213e:	e024      	b.n	800218a <os_heap_AllocateEnd+0x5e>
	if(size == 0) return NULL;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <os_heap_AllocateEnd+0x1e>
 8002146:	2300      	movs	r3, #0
 8002148:	e01f      	b.n	800218a <os_heap_AllocateEnd+0x5e>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	uint32_t block_size = os_heap_BlockGetSize(p);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa0 	bl	8002090 <os_heap_BlockGetSize>
 8002150:	6178      	str	r0, [r7, #20]
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	441a      	add	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	3b08      	subs	r3, #8
 800215e:	613b      	str	r3, [r7, #16]
	os_heap_header_t* oldTopHead = (os_heap_header_t*) (p);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	60fb      	str	r3, [r7, #12]

	/* Add Block to list
	 ---------------------------------------------------*/
	newBlock->addr_next   = oldTopHead->addr_next;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	601a      	str	r2, [r3, #0]
	oldTopHead->addr_next = newBlock != oldTopHead ? (uint32_t) newBlock : oldTopHead->addr_next;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d102      	bne.n	800217a <os_heap_AllocateEnd+0x4e>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e000      	b.n	800217c <os_heap_AllocateEnd+0x50>
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	6013      	str	r3, [r2, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2201      	movs	r2, #1
 8002184:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	3308      	adds	r3, #8

}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <os_heap_clear>:
 * OS Heap Clear
 *
 * @brief This function clears the heap
 *
 **********************************************************************/
void os_heap_clear(){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 800219a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800219e:	2100      	movs	r1, #0
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <os_heap_clear+0x2c>)
 80021a2:	f004 fde6 	bl	8006d72 <memset>

	/* Get header pointers
	 ---------------------------------------------------*/
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <os_heap_clear+0x2c>)
 80021a8:	607b      	str	r3, [r7, #4]

	/* Initialize headers
	 ---------------------------------------------------*/
	p->block_used = 0; //Mark as not used
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
	p->addr_next  = 0; //Point outside of the heap to indicate end
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000368 	.word	0x20000368

080021c4 <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <os_heap_alloc+0x12>
 80021d2:	2300      	movs	r3, #0
 80021d4:	e054      	b.n	8002280 <os_heap_alloc+0xbc>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80021d6:	f3ef 8310 	mrs	r3, PRIMASK
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	b672      	cpsid	i
 80021de:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t min_size = 0xFFFFFFFF;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	623b      	str	r3, [r7, #32]
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 80021ec:	4b26      	ldr	r3, [pc, #152]	; (8002288 <os_heap_alloc+0xc4>)
 80021ee:	61fb      	str	r3, [r7, #28]

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3307      	adds	r3, #7
 80021f4:	f023 0307 	bic.w	r3, r3, #7
 80021f8:	61bb      	str	r3, [r7, #24]
	while(p != NULL){
 80021fa:	e018      	b.n	800222e <os_heap_alloc+0x6a>

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 80021fc:	69f8      	ldr	r0, [r7, #28]
 80021fe:	f7ff ff47 	bl	8002090 <os_heap_BlockGetSize>
 8002202:	4603      	mov	r3, r0
 8002204:	3b08      	subs	r3, #8
 8002206:	613b      	str	r3, [r7, #16]
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <os_heap_alloc+0x64>
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <os_heap_alloc+0x64>
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	d303      	bcc.n	8002228 <os_heap_alloc+0x64>
			pBlock = p;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
			min_size = data_size;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	623b      	str	r3, [r7, #32]
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61fb      	str	r3, [r7, #28]
	while(p != NULL){
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e3      	bne.n	80021fc <os_heap_alloc+0x38>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <os_heap_alloc+0xc4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d303      	bcc.n	8002244 <os_heap_alloc+0x80>
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <os_heap_alloc+0xc8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d908      	bls.n	8002256 <os_heap_alloc+0x92>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 8002244:	f7ff ff1c 	bl	8002080 <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f383 8810 	msr	PRIMASK, r3
 800224e:	f3bf 8f6f 	isb	sy
		return NULL;
 8002252:	2300      	movs	r3, #0
 8002254:	e014      	b.n	8002280 <os_heap_alloc+0xbc>
	}

	/* If pBlock is not NULL, reserve a memory block
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b31      	cmp	r3, #49	; 0x31
 800225a:	d805      	bhi.n	8002268 <os_heap_alloc+0xa4>
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002260:	f7ff ff34 	bl	80020cc <os_heap_AllocateBeginning>
 8002264:	4603      	mov	r3, r0
 8002266:	e004      	b.n	8002272 <os_heap_alloc+0xae>
 8002268:	69b9      	ldr	r1, [r7, #24]
 800226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226c:	f7ff ff5e 	bl	800212c <os_heap_AllocateEnd>
 8002270:	4603      	mov	r3, r0
 8002272:	617b      	str	r3, [r7, #20]
	OS_EXIT_CRITICAL();
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f383 8810 	msr	PRIMASK, r3
 800227a:	f3bf 8f6f 	isb	sy
	return ret;
 800227e:	697b      	ldr	r3, [r7, #20]

}
 8002280:	4618      	mov	r0, r3
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000368 	.word	0x20000368
 800228c:	20014367 	.word	0x20014367

08002290 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <os_heap_free+0x12>
 800229e:	2301      	movs	r3, #1
 80022a0:	e065      	b.n	800236e <os_heap_free+0xde>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a35      	ldr	r2, [pc, #212]	; (800237c <os_heap_free+0xec>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d303      	bcc.n	80022b2 <os_heap_free+0x22>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a34      	ldr	r2, [pc, #208]	; (8002380 <os_heap_free+0xf0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <os_heap_free+0x26>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e05b      	b.n	800236e <os_heap_free+0xde>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80022b6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	b672      	cpsid	i
 80022be:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <os_heap_free+0xf4>)
 80022c4:	61fb      	str	r3, [r7, #28]
	os_heap_header_t* block = (os_heap_header_t*)((uint32_t)p - sizeof(os_heap_header_t));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3b08      	subs	r3, #8
 80022ca:	617b      	str	r3, [r7, #20]

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
	os_heap_header_t* pPrev = NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]

	/* Search for the target block while still inside the heap
	 ---------------------------------------------------*/
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 80022d4:	e004      	b.n	80022e0 <os_heap_free+0x50>

		/* Save current block and go to next block
		 ---------------------------------------------------*/
		pPrev = cur;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	61bb      	str	r3, [r7, #24]
		cur = (os_heap_header_t*) ( cur->addr_next );
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	61fb      	str	r3, [r7, #28]
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <os_heap_free+0xf4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d307      	bcc.n	80022f8 <os_heap_free+0x68>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4a25      	ldr	r2, [pc, #148]	; (8002380 <os_heap_free+0xf0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d803      	bhi.n	80022f8 <os_heap_free+0x68>
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1ee      	bne.n	80022d6 <os_heap_free+0x46>
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if(cur != block || !(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1]) ) {
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d107      	bne.n	8002310 <os_heap_free+0x80>
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <os_heap_free+0xf4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d303      	bcc.n	8002310 <os_heap_free+0x80>
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <os_heap_free+0xf0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d906      	bls.n	800231e <os_heap_free+0x8e>
		OS_EXIT_CRITICAL();
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f383 8810 	msr	PRIMASK, r3
 8002316:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 800231a:	2302      	movs	r3, #2
 800231c:	e027      	b.n	800236e <os_heap_free+0xde>
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <os_heap_free+0xb6>
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <os_heap_free+0xb6>
		cur->addr_next = pNext->addr_next;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	601a      	str	r2, [r3, #0]
		pNext->addr_next = 0; //For principle, but not necessary
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <os_heap_free+0xd2>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <os_heap_free+0xd2>
		pPrev->addr_next = cur->addr_next;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]
		cur->addr_next = 0; //For principle, but not necessary
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
	}

	OS_EXIT_CRITICAL();
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f383 8810 	msr	PRIMASK, r3
 8002368:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000370 	.word	0x20000370
 8002380:	20014367 	.word	0x20014367
 8002384:	20000368 	.word	0x20000368

08002388 <os_mutex_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the mutex
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_mutex_udpatePrio(os_handle_t h){
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

	/* Error Check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <os_mutex_udpatePrio+0x12>
 8002396:	2300      	movs	r3, #0
 8002398:	e032      	b.n	8002400 <os_mutex_udpatePrio+0x78>
	if(h->type != OS_OBJ_MUTEX) return false;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d001      	beq.n	80023a6 <os_mutex_udpatePrio+0x1e>
 80023a2:	2300      	movs	r3, #0
 80023a4:	e02c      	b.n	8002400 <os_mutex_udpatePrio+0x78>

	/* Convet reference and store previous priority
	 ---------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*)h;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	617b      	str	r3, [r7, #20]
	int8_t prev_max_prio = mutex->max_prio;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	7f5b      	ldrb	r3, [r3, #29]
 80023ae:	74fb      	strb	r3, [r7, #19]

	/* Get reference to the first blocked task
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 80023b0:	23ff      	movs	r3, #255	; 0xff
 80023b2:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 80023c0:	e00f      	b.n	80023e2 <os_mutex_udpatePrio+0x5a>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ca:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 80023cc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80023d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	da01      	bge.n	80023dc <os_mutex_udpatePrio+0x54>
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ec      	bne.n	80023c2 <os_mutex_udpatePrio+0x3a>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	mutex->max_prio = maxPrio;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	7ffa      	ldrb	r2, [r7, #31]
 80023ec:	775a      	strb	r2, [r3, #29]
	return prev_max_prio != maxPrio;
 80023ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80023f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	3724      	adds	r7, #36	; 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <os_task_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the task
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_task_udpatePrio(os_handle_t h){
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <os_task_udpatePrio+0x12>
 800241a:	2300      	movs	r3, #0
 800241c:	e04e      	b.n	80024bc <os_task_udpatePrio+0xb0>
	if(h->type != OS_OBJ_TASK) return false;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <os_task_udpatePrio+0x1e>
 8002426:	2300      	movs	r3, #0
 8002428:	e048      	b.n	80024bc <os_task_udpatePrio+0xb0>

	/* Store priority
	 ---------------------------------------------------*/
	os_task_t* tsk = (os_task_t*)h;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	617b      	str	r3, [r7, #20]
	int8_t prev_prio = tsk->priority;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002434:	74fb      	strb	r3, [r7, #19]

	/* Point to the first task on block list
	 ---------------------------------------------------*/
	int8_t maxPrio = tsk->basePriority;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	7e5b      	ldrb	r3, [r3, #25]
 800243a:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8002448:	e00f      	b.n	800246a <os_task_udpatePrio+0x5e>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002452:	72bb      	strb	r3, [r7, #10]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002454:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002458:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800245c:	429a      	cmp	r2, r3
 800245e:	da01      	bge.n	8002464 <os_task_udpatePrio+0x58>
 8002460:	7abb      	ldrb	r3, [r7, #10]
 8002462:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ec      	bne.n	800244a <os_task_udpatePrio+0x3e>
	}

	/* Point to the first mutex in the owned list
	 ---------------------------------------------------*/
	head = (os_list_head_t*) ( ((os_task_t*)h)->ownedMutex);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	60fb      	str	r3, [r7, #12]
	it = head->head.next;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]

	/* While it is a valid mutex
	 ---------------------------------------------------*/
	while(it != NULL){
 800247c:	e00e      	b.n	800249c <os_task_udpatePrio+0x90>

		/* Get mutex' priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	7f5b      	ldrb	r3, [r3, #29]
 8002484:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8002486:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800248a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800248e:	429a      	cmp	r2, r3
 8002490:	da01      	bge.n	8002496 <os_task_udpatePrio+0x8a>
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	77fb      	strb	r3, [r7, #31]

		/* Goes to next mutex
		 ---------------------------------------------------*/
		it = it->next;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ed      	bne.n	800247e <os_task_udpatePrio+0x72>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	tsk->priority = maxPrio;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	7ffa      	ldrb	r2, [r7, #31]
 80024a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	return prev_prio != maxPrio;
 80024aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80024ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3724      	adds	r7, #36	; 0x24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <os_obj_updatePrio>:
 * @param os_handle_t h : [in] The reference to the object
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
void os_obj_updatePrio(os_handle_t h){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

	/* Enter critical section
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80024d0:	f3ef 8310 	mrs	r3, PRIMASK
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	b672      	cpsid	i
 80024d8:	f3bf 8f6f 	isb	sy

	/* If the object is a mutex, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d10a      	bne.n	80024fa <os_obj_updatePrio+0x32>
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff4f 	bl	8002388 <os_mutex_udpatePrio>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <os_obj_updatePrio+0x32>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ffe7 	bl	80024c8 <os_obj_updatePrio>
	}

	/* If the object is a task, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d13d      	bne.n	800257e <os_obj_updatePrio+0xb6>
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff82 	bl	800240c <os_task_udpatePrio>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d037      	beq.n	800257e <os_obj_updatePrio+0xb6>

		/* If its priority changed, we must update the objects the task is waiting
		 ---------------------------------------------------*/
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e02f      	b.n	8002574 <os_obj_updatePrio+0xac>

			/* objects that are not tasks or mutexes
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d008      	beq.n	8002538 <os_obj_updatePrio+0x70>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d108      	bne.n	800254a <os_obj_updatePrio+0x82>

				/* Update object's priority
				 ---------------------------------------------------*/
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ffbf 	bl	80024c8 <os_obj_updatePrio>
			}

			/* update msgQ
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d108      	bne.n	800256e <os_obj_updatePrio+0xa6>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fcb7 	bl	8002edc <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3301      	adds	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	429a      	cmp	r2, r3
 800257c:	d3ca      	bcc.n	8002514 <os_obj_updatePrio+0x4c>
		}
	}

	/* Exit critical section
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f383 8810 	msr	PRIMASK, r3
 8002584:	f3bf 8f6f 	isb	sy
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <os_list_init>:
 *
 * @brief This function initializes a list
 *
 * @return os_list_head_t* : reference to the head of the list
 **********************************************************************/
os_list_head_t* os_list_init(){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0

	/* Allocate head
	 ---------------------------------------------------*/
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 8002596:	201c      	movs	r0, #28
 8002598:	f7ff fe14 	bl	80021c4 <os_heap_alloc>
 800259c:	6078      	str	r0, [r7, #4]
	if(ret == NULL) return NULL;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <os_list_init+0x18>
 80025a4:	2300      	movs	r3, #0
 80025a6:	e012      	b.n	80025ce <os_list_init+0x3e>

	/* Init head and return
	 ---------------------------------------------------*/
	ret->head.next = NULL;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
	ret->head.prev = NULL;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
	ret->head.element = NULL;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
	ret->first = NULL;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
	ret->last = NULL;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
	ret->listSize = 0;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]

	return ret;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <os_list_search>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	  		   : [in] element to search
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(el == NULL) return NULL;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <os_list_search+0x14>
 80025e6:	2300      	movs	r3, #0
 80025e8:	e01f      	b.n	800262a <os_list_search+0x54>
	if(head == NULL) return NULL;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <os_list_search+0x1e>
 80025f0:	2300      	movs	r3, #0
 80025f2:	e01a      	b.n	800262a <os_list_search+0x54>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80025f4:	f3ef 8310 	mrs	r3, PRIMASK
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	b672      	cpsid	i
 80025fc:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8002606:	e002      	b.n	800260e <os_list_search+0x38>
		it = it->next;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <os_list_search+0x48>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d1f4      	bne.n	8002608 <os_list_search+0x32>
	}

	OS_EXIT_CRITICAL();
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f383 8810 	msr	PRIMASK, r3
 8002624:	f3bf 8f6f 	isb	sy
	return it;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <os_handle_list_searchByName>:
 * @param os_obj_type_e type   : [in] type of the object
 * @param char* name		   : [in] name of the object
 *
 * @return os_list_cell_t* : reference to the cell containing the handle or null if not found
 **********************************************************************/
os_list_cell_t* os_handle_list_searchByName(os_list_head_t* head, os_obj_type_e type, char const * name){
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	460b      	mov	r3, r1
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(head == NULL) return NULL;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <os_handle_list_searchByName+0x18>
 800264a:	2300      	movs	r3, #0
 800264c:	e031      	b.n	80026b2 <os_handle_list_searchByName+0x7c>
	if(name == NULL) return NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <os_handle_list_searchByName+0x22>
 8002654:	2300      	movs	r3, #0
 8002656:	e02c      	b.n	80026b2 <os_handle_list_searchByName+0x7c>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002658:	f3ef 8310 	mrs	r3, PRIMASK
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	b672      	cpsid	i
 8002660:	f3bf 8f6f 	isb	sy

	/* Search list
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 800266a:	e017      	b.n	800269c <os_handle_list_searchByName+0x66>

		/* If type and name match, we break.
		 ------------------------------------------------------*/
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	7afa      	ldrb	r2, [r7, #11]
 8002674:	429a      	cmp	r2, r3
 8002676:	d10e      	bne.n	8002696 <os_handle_list_searchByName+0x60>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <os_handle_list_searchByName+0x60>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fd fda0 	bl	80001d0 <strcmp>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <os_handle_list_searchByName+0x6e>

		/* Otherwise we go to next one
		 ------------------------------------------------------*/
		it = it->next;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e4      	bne.n	800266c <os_handle_list_searchByName+0x36>
 80026a2:	e000      	b.n	80026a6 <os_handle_list_searchByName+0x70>
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 80026a4:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f383 8810 	msr	PRIMASK, r3
 80026ac:	f3bf 8f6f 	isb	sy
	return it;
 80026b0:	697b      	ldr	r3, [r7, #20]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <os_list_add>:
 * @param void* el	   		    : [in] reference to the element
 * @param os_list_add_pos_e pos : [in] flag to indicate whether to add at the first or last position
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 80026c8:	f3ef 8310 	mrs	r3, PRIMASK
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	b672      	cpsid	i
 80026d0:	f3bf 8f6f 	isb	sy

	/* Allocate cell
	 ------------------------------------------------------*/
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 80026d4:	2010      	movs	r0, #16
 80026d6:	f7ff fd75 	bl	80021c4 <os_heap_alloc>
 80026da:	6178      	str	r0, [r7, #20]

	/* Check allocation
	 ------------------------------------------------------*/
	if(new == NULL) {
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <os_list_add+0x36>

		/* EXIT Critical Section
		 ------------------------------------------------------*/
		OS_EXIT_CRITICAL();
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f383 8810 	msr	PRIMASK, r3
 80026e8:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e04e      	b.n	800278e <os_list_add+0xd4>
	}

	/* Store information on new cell
	 ------------------------------------------------------*/
	new->order  = head->listSize++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	1c59      	adds	r1, r3, #1
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6191      	str	r1, [r2, #24]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	60d3      	str	r3, [r2, #12]
	new->element = el;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]

	/* Add first element
	 ------------------------------------------------------*/
	if(head->head.next == NULL) {
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10f      	bne.n	800272c <os_list_add+0x72>
		head->last = new;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	615a      	str	r2, [r3, #20]
		new->prev = &head->head;
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	605a      	str	r2, [r3, #4]
		new->next = NULL;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
		head->head.next = new;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]
		head->first = new;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	611a      	str	r2, [r3, #16]
 800272a:	e02a      	b.n	8002782 <os_list_add+0xc8>
	}
	else{

		/* Add cell at the beginning
		 ------------------------------------------------------*/
		if(pos == OS_LIST_FIRST){
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d114      	bne.n	800275c <os_list_add+0xa2>
			new->prev = head->first->prev;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	605a      	str	r2, [r3, #4]
			new->next = head->first;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]
			head->first->prev->next = new;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	601a      	str	r2, [r3, #0]
			head->first->prev = new;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	605a      	str	r2, [r3, #4]
			head->first = new;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	611a      	str	r2, [r3, #16]
		}

		/* Add cell at the end
		 ------------------------------------------------------*/
		if(pos == OS_LIST_LAST){
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10f      	bne.n	8002782 <os_list_add+0xc8>
			new->next  = head->last->next;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]
			new->prev  = head->last;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	605a      	str	r2, [r3, #4]
			head->last->next = new;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	601a      	str	r2, [r3, #0]
			head->last = new;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	615a      	str	r2, [r3, #20]
		}
	}
	OS_EXIT_CRITICAL();
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f383 8810 	msr	PRIMASK, r3
 8002788:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <os_list_remove>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	   		   : [in]  reference to the element
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_remove(os_list_head_t* head, void* el){
 8002796:	b580      	push	{r7, lr}
 8002798:	b088      	sub	sp, #32
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) el;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	617b      	str	r3, [r7, #20]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <os_list_remove+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e042      	b.n	8002834 <os_list_remove+0x9e>

	/* Search cell to verify it is in the list
	 ------------------------------------------------------*/
	os_list_cell_t* pCell = os_list_search(head, el);
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff10 	bl	80025d6 <os_list_search>
 80027b6:	6138      	str	r0, [r7, #16]

	/* Return if not
	 ------------------------------------------------------*/
	if(pCell == NULL) return OS_ERR_INVALID;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <os_list_remove+0x2c>
 80027be:	2302      	movs	r3, #2
 80027c0:	e038      	b.n	8002834 <os_list_remove+0x9e>

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	b672      	cpsid	i
 80027ca:	f3bf 8f6f 	isb	sy

	/* Declare Iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = &head->head;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* pPrev = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]

	/* Search for the task
	 ------------------------------------------------------*/
	while(it->next != NULL){
 80027d6:	e016      	b.n	8002806 <os_list_remove+0x70>

		/* Update order
		 ------------------------------------------------------*/
		if(it->next->order > pCell->order) it->next->order--;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d904      	bls.n	80027f0 <os_list_remove+0x5a>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	3a01      	subs	r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

		/* Store previous
		 ------------------------------------------------------*/
		if(it->next->element == el) pPrev = it;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d101      	bne.n	8002800 <os_list_remove+0x6a>
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	61bb      	str	r3, [r7, #24]

		/* Go to next
		 ------------------------------------------------------*/
		it = it->next;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61fb      	str	r3, [r7, #28]
	while(it->next != NULL){
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e4      	bne.n	80027d8 <os_list_remove+0x42>
	}

	/* Kill cell
	 ------------------------------------------------------*/
	pPrev->next = pPrev->next->next;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	601a      	str	r2, [r3, #0]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	619a      	str	r2, [r3, #24]
	OS_EXIT_CRITICAL();
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f383 8810 	msr	PRIMASK, r3
 8002828:	f3bf 8f6f 	isb	sy
	return os_heap_free(pCell);
 800282c:	6938      	ldr	r0, [r7, #16]
 800282e:	f7ff fd2f 	bl	8002290 <os_heap_free>
 8002832:	4603      	mov	r3, r0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <os_list_clear>:
 * @brief This function clears a list, freeing all its cells and head
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_list_clear(os_list_head_t* head){
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01c      	beq.n	8002884 <os_list_clear+0x48>

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_CRITICAL_SECTION(
 800284a:	f3ef 8310 	mrs	r3, PRIMASK
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	b672      	cpsid	i
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e007      	b.n	800286c <os_list_clear+0x30>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	6938      	ldr	r0, [r7, #16]
 8002868:	f7ff fd12 	bl	8002290 <os_heap_free>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f4      	bne.n	800285c <os_list_clear+0x20>
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fd0c 	bl	8002290 <os_heap_free>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f383 8810 	msr	PRIMASK, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	e000      	b.n	8002886 <os_list_clear+0x4a>
	if(head == NULL) return;
 8002884:	bf00      	nop

		/* Free head
		 ---------------------------------------------------*/
		os_heap_free(head);
	);
}
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <os_task_list_sort>:
 * Must be used on task lists
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_task_list_sort(os_list_head_t* head){
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08b      	sub	sp, #44	; 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8098 	beq.w	80029cc <os_task_list_sort+0x140>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800289c:	f3ef 8310 	mrs	r3, PRIMASK
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	b672      	cpsid	i
 80028a4:	f3bf 8f6f 	isb	sy

	/* Update priority for all tasks
	 ---------------------------------------------------*/
	os_list_cell_t* p = head->head.next;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 80028ae:	e00c      	b.n	80028ca <os_task_list_sort+0x3e>
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	689c      	ldr	r4, [r3, #8]
 80028b8:	4610      	mov	r0, r2
 80028ba:	f001 f87d 	bl	80039b8 <os_task_getPrio>
 80028be:	4603      	mov	r3, r0
 80028c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		p = p->next;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ef      	bne.n	80028b0 <os_task_list_sort+0x24>
	}

	/* Begin sort
	 ---------------------------------------------------*/
	os_list_cell_t* it_slow = &head->head;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 80028d4:	e069      	b.n	80029aa <os_task_list_sort+0x11e>

		/* For each cell
		 ---------------------------------------------------*/
		bool changeMade = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	77fb      	strb	r3, [r7, #31]
		os_list_cell_t* it_fast = &head->head;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 80028de:	e052      	b.n	8002986 <os_task_list_sort+0xfa>

			/* Decide to swap or not
			 ---------------------------------------------------*/
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f993 2044 	ldrsb.w	r2, [r3, #68]	; 0x44
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 80028f6:	429a      	cmp	r2, r3
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	68d1      	ldr	r1, [r2, #12]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	68d2      	ldr	r2, [r2, #12]
 8002910:	4291      	cmp	r1, r2
 8002912:	bf8c      	ite	hi
 8002914:	2201      	movhi	r2, #1
 8002916:	2200      	movls	r2, #0
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]
				 swap |= ((os_task_t*)it_fast->next->element)->priority < ((os_task_t*)it_fast->next->next->element)->priority;
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	f992 1044 	ldrsb.w	r1, [r2, #68]	; 0x44
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	f992 2044 	ldrsb.w	r2, [r2, #68]	; 0x44
 800293e:	4291      	cmp	r1, r2
 8002940:	bfb4      	ite	lt
 8002942:	2201      	movlt	r2, #1
 8002944:	2200      	movge	r2, #0
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4313      	orrs	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf14      	ite	ne
 800294e:	2301      	movne	r3, #1
 8002950:	2300      	moveq	r3, #0
 8002952:	75fb      	strb	r3, [r7, #23]

			/* Swap cells
			 ---------------------------------------------------*/
			if(swap){
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <os_task_list_sort+0xf4>

				/* Store references
				 ---------------------------------------------------*/
				os_list_cell_t* pN1 = it_fast->next;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
				os_list_cell_t* pN2 = it_fast->next->next;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

				/* Swap
				 ---------------------------------------------------*/
				it_fast->next = pN2;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
				pN1->next = pN2->next;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	601a      	str	r2, [r3, #0]
				pN2->next = pN1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	601a      	str	r2, [r3, #0]

				changeMade = 1;
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]

			}

			it_fast = it_fast->next;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <os_task_list_sort+0x10c>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1a3      	bne.n	80028e0 <os_task_list_sort+0x54>

		}

		/* If no changement was made, we finished
		 ---------------------------------------------------*/
		if(changeMade == 0) break;
 8002998:	7ffb      	ldrb	r3, [r7, #31]
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10c      	bne.n	80029be <os_task_list_sort+0x132>

		it_slow = it_slow->next;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <os_task_list_sort+0x134>
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d18c      	bne.n	80028d6 <os_task_list_sort+0x4a>
 80029bc:	e000      	b.n	80029c0 <os_task_list_sort+0x134>
		if(changeMade == 0) break;
 80029be:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f383 8810 	msr	PRIMASK, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	e000      	b.n	80029ce <os_task_list_sort+0x142>
	if(head == NULL) return;
 80029cc:	bf00      	nop
}
 80029ce:	372c      	adds	r7, #44	; 0x2c
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}

080029d4 <os_handle_list_getObjToUpdate>:
 *
 * @brief This function searches for an object in the object list that needs to update. Must be used in a handle list
 *
 * @return os_handle_t handle to the object to update or NULL if nothing to do
 **********************************************************************/
os_handle_t os_handle_list_getObjToUpdate(){
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0

	/* Search object list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <os_handle_list_getObjToUpdate+0x38>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	e00a      	b.n	80029f8 <os_handle_list_getObjToUpdate+0x24>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	7a1b      	ldrb	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <os_handle_list_getObjToUpdate+0x1e>
			return it->element;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	e006      	b.n	8002a00 <os_handle_list_getObjToUpdate+0x2c>
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f1      	bne.n	80029e2 <os_handle_list_getObjToUpdate+0xe>
	}

	return NULL;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	20014380 	.word	0x20014380

08002a10 <os_task_list_isObjFreeOnTask>:
 * @param os_handle_t obj  : [in] object to scan
 * @param os_handle_t task : [in] task to stop the scan
 *
 * @return bool : 1 = object is free ; 0 = object is not free
 **********************************************************************/
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	b672      	cpsid	i
 8002a22:	f3bf 8f6f 	isb	sy

	/* Get current free count
	 ---------------------------------------------------*/
	uint32_t freeCount = obj->getFreeCount(obj);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

	/* If it is 0, return 0 immediately
	 ---------------------------------------------------*/
	if(freeCount == 0) {
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <os_task_list_isObjFreeOnTask+0x34>
		OS_EXIT_CRITICAL();
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f383 8810 	msr	PRIMASK, r3
 8002a3c:	f3bf 8f6f 	isb	sy
		return 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e0a8      	b.n	8002b96 <os_task_list_isObjFreeOnTask+0x186>
	}

	/* If it can be taken more times than the number of tasks waiting for it return 1
	 ---------------------------------------------------*/
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d203      	bcs.n	8002a58 <os_task_list_isObjFreeOnTask+0x48>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d106      	bne.n	8002a66 <os_task_list_isObjFreeOnTask+0x56>
		OS_EXIT_CRITICAL();
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f383 8810 	msr	PRIMASK, r3
 8002a5e:	f3bf 8f6f 	isb	sy
		return 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e097      	b.n	8002b96 <os_task_list_isObjFreeOnTask+0x186>
	}

	/* Otherwise, sort and start scan
	 ---------------------------------------------------*/
	os_task_list_sort(obj->blockList);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff0e 	bl	800288c <os_task_list_sort>

	/* Start scan by pointing to the first waiting task
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	e07c      	b.n	8002b74 <os_task_list_isObjFreeOnTask+0x164>

		/* Convert address
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*) it->element;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	613b      	str	r3, [r7, #16]

		/* Return if the object has no more free counters
		 ---------------------------------------------------*/
		if(freeCount == 0) {
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <os_task_list_isObjFreeOnTask+0x84>
			OS_EXIT_CRITICAL();
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f383 8810 	msr	PRIMASK, r3
 8002a8c:	f3bf 8f6f 	isb	sy
			return 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e080      	b.n	8002b96 <os_task_list_isObjFreeOnTask+0x186>
		}

		/* Stop scanning if we are pointing at the task we are searching
		 ---------------------------------------------------*/
		if(it->element == task) break;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d06f      	beq.n	8002b7e <os_task_list_isObjFreeOnTask+0x16e>

		/* Do not consider deleting or ended tasks
		 ---------------------------------------------------*/
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	7e1b      	ldrb	r3, [r3, #24]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d062      	beq.n	8002b6c <os_task_list_isObjFreeOnTask+0x15c>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	7e1b      	ldrb	r3, [r3, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d05e      	beq.n	8002b6c <os_task_list_isObjFreeOnTask+0x15c>

		/* If the task is waiting one object
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d121      	bne.n	8002afc <os_task_list_isObjFreeOnTask+0xec>

			/* Search for the position on the array of the object
			 ---------------------------------------------------*/
			size_t i = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < t->sizeObjs; i++){
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e00b      	b.n	8002ada <os_task_list_isObjFreeOnTask+0xca>
				if(t->objWaited[i] == obj) break;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d008      	beq.n	8002ae6 <os_task_list_isObjFreeOnTask+0xd6>
			for(i = 0; i < t->sizeObjs; i++){
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3ee      	bcc.n	8002ac2 <os_task_list_isObjFreeOnTask+0xb2>
 8002ae4:	e000      	b.n	8002ae8 <os_task_list_isObjFreeOnTask+0xd8>
				if(t->objWaited[i] == obj) break;
 8002ae6:	bf00      	nop
			}

			/* If the position of the object is smaller than the current object the task wants, it will switch
			 ---------------------------------------------------*/
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d202      	bcs.n	8002af8 <os_task_list_isObjFreeOnTask+0xe8>
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3b01      	subs	r3, #1
 8002af6:	e000      	b.n	8002afa <os_task_list_isObjFreeOnTask+0xea>
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If the task is waiting all objects
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d133      	bne.n	8002b6e <os_task_list_isObjFreeOnTask+0x15e>

			/* Scan all objects to know if all of them are available
			 ---------------------------------------------------*/
			bool getObjs = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	76fb      	strb	r3, [r7, #27]
			for(size_t i = 0; i < t->sizeObjs; i++){
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e01f      	b.n	8002b50 <os_task_list_isObjFreeOnTask+0x140>

				/* Skip current object
				 ---------------------------------------------------*/
				if(t->objWaited[i] == obj) continue;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d012      	beq.n	8002b48 <os_task_list_isObjFreeOnTask+0x138>

				/* If one of the objects is not free on the task, we must wait
				 ---------------------------------------------------*/
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6939      	ldr	r1, [r7, #16]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff6d 	bl	8002a10 <os_task_list_isObjFreeOnTask>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <os_task_list_isObjFreeOnTask+0x13a>
					getObjs = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	76fb      	strb	r3, [r7, #27]
					break;
 8002b46:	e008      	b.n	8002b5a <os_task_list_isObjFreeOnTask+0x14a>
				if(t->objWaited[i] == obj) continue;
 8002b48:	bf00      	nop
			for(size_t i = 0; i < t->sizeObjs; i++){
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3da      	bcc.n	8002b10 <os_task_list_isObjFreeOnTask+0x100>
				}
			}

			/* Decrement freeCount if all objects are free
			 ---------------------------------------------------*/
			freeCount = getObjs ? freeCount - 1 : freeCount;
 8002b5a:	7efb      	ldrb	r3, [r7, #27]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <os_task_list_isObjFreeOnTask+0x156>
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	3b01      	subs	r3, #1
 8002b64:	e000      	b.n	8002b68 <os_task_list_isObjFreeOnTask+0x158>
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	e000      	b.n	8002b6e <os_task_list_isObjFreeOnTask+0x15e>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002b6c:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f af7f 	bne.w	8002a7a <os_task_list_isObjFreeOnTask+0x6a>
 8002b7c:	e000      	b.n	8002b80 <os_task_list_isObjFreeOnTask+0x170>
		if(it->element == task) break;
 8002b7e:	bf00      	nop
		}
	}

	/* Return if the object is free or not
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f383 8810 	msr	PRIMASK, r3
 8002b86:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3728      	adds	r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <os_handle_list_updateAndCheck>:
 *
 * @param os_handle_t h : [in] handle to the object to update
 *
 * @return bool : 1 = current task must yield
 **********************************************************************/
bool os_handle_list_updateAndCheck(os_handle_t h){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	; 0x38
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	b672      	cpsid	i
 8002bb0:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8002bb4:	23ff      	movs	r3, #255	; 0xff
 8002bb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(h != NULL){
 8002bba:	e167      	b.n	8002e8c <os_handle_list_updateAndCheck+0x2ec>

		/* Sort List
		 ---------------------------------------------------*/
		os_task_list_sort(h->blockList);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fe63 	bl	800288c <os_task_list_sort>

		/* Get the number of times we can get the object
		 ---------------------------------------------------*/
		uint32_t freeCount = h->getFreeCount(h);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
 8002bce:	6338      	str	r0, [r7, #48]	; 0x30

		/* Updates every task on the block list
		 ---------------------------------------------------*/
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd8:	e14e      	b.n	8002e78 <os_handle_list_updateAndCheck+0x2d8>

			/* Ignore deleting and ended tasks
			 ---------------------------------------------------*/
			os_task_t* t = (os_task_t*)it->element;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	617b      	str	r3, [r7, #20]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	7e1b      	ldrb	r3, [r3, #24]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	f000 8143 	beq.w	8002e70 <os_handle_list_updateAndCheck+0x2d0>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	7e1b      	ldrb	r3, [r3, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f000 813e 	beq.w	8002e70 <os_handle_list_updateAndCheck+0x2d0>

			/* If the task is only waiting one object
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8091 	bne.w	8002d22 <os_handle_list_updateAndCheck+0x182>

				/* Search the position of the object in the task array
				 ---------------------------------------------------*/
				size_t i = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
				for(i = 0; i < t->sizeObjs; i++){
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c08:	e00b      	b.n	8002c22 <os_handle_list_updateAndCheck+0x82>
					if(t->objWaited[i] == h) break;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d008      	beq.n	8002c2e <os_handle_list_updateAndCheck+0x8e>
				for(i = 0; i < t->sizeObjs; i++){
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	3301      	adds	r3, #1
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3ee      	bcc.n	8002c0a <os_handle_list_updateAndCheck+0x6a>
 8002c2c:	e000      	b.n	8002c30 <os_handle_list_updateAndCheck+0x90>
					if(t->objWaited[i] == h) break;
 8002c2e:	bf00      	nop
				}

				/* If the object can still be taken
				 ---------------------------------------------------*/
				if(freeCount != 0){
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d026      	beq.n	8002c84 <os_handle_list_updateAndCheck+0xe4>

					/* Only do something if the current object has a smaller index than the one the task is waiting for
					 ---------------------------------------------------*/
					if(i < t->objWanted){
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d270      	bcs.n	8002d22 <os_handle_list_updateAndCheck+0x182>

						/* Since the task will switch to the smaller index object, we must update the old object
						 * This update can possibly wake a task
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d208      	bcs.n	8002c5e <os_handle_list_updateAndCheck+0xbe>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	721a      	strb	r2, [r3, #8]

						/* Store the object's index and tag task as ready
						 ---------------------------------------------------*/
						t->objWanted = i;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
						t->state = OS_TASK_READY;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2202      	movs	r2, #2
 8002c68:	761a      	strb	r2, [r3, #24]

						/* Decrement freecount if needed
						 ---------------------------------------------------*/
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d005      	beq.n	8002c7e <os_handle_list_updateAndCheck+0xde>
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <os_handle_list_updateAndCheck+0xde>
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <os_handle_list_updateAndCheck+0xe0>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	633b      	str	r3, [r7, #48]	; 0x30
 8002c82:	e04e      	b.n	8002d22 <os_handle_list_updateAndCheck+0x182>
				 ---------------------------------------------------*/
				else{

					/* Only do something if the current waited object is no longer available
					 ---------------------------------------------------*/
					if(t->objWanted == i){
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d149      	bne.n	8002d22 <os_handle_list_updateAndCheck+0x182>

						/* Search for an available object in higher indexes
						 ---------------------------------------------------*/
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	3301      	adds	r3, #1
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c96:	e00f      	b.n	8002cb8 <os_handle_list_updateAndCheck+0x118>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6979      	ldr	r1, [r7, #20]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff feb2 	bl	8002a10 <os_task_list_isObjFreeOnTask>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <os_handle_list_updateAndCheck+0x124>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d3ea      	bcc.n	8002c98 <os_handle_list_updateAndCheck+0xf8>
 8002cc2:	e000      	b.n	8002cc6 <os_handle_list_updateAndCheck+0x126>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8002cc4:	bf00      	nop


						/* Tag task as ready if there is an available object, or blocked if not timeout
						 ---------------------------------------------------*/
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d201      	bcs.n	8002cd4 <os_handle_list_updateAndCheck+0x134>
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	e000      	b.n	8002cd6 <os_handle_list_updateAndCheck+0x136>
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	761a      	strb	r2, [r3, #24]
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <os_handle_list_updateAndCheck+0x148>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	7e1a      	ldrb	r2, [r3, #24]
 8002ce6:	e000      	b.n	8002cea <os_handle_list_updateAndCheck+0x14a>
 8002ce8:	2202      	movs	r2, #2
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	761a      	strb	r2, [r3, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d201      	bcs.n	8002cfc <os_handle_list_updateAndCheck+0x15c>
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	e001      	b.n	8002d00 <os_handle_list_updateAndCheck+0x160>
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	6353      	str	r3, [r2, #52]	; 0x34

						/* If the task switched to a higher index object, update it
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d208      	bcs.n	8002d22 <os_handle_list_updateAndCheck+0x182>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	721a      	strb	r2, [r3, #8]
				}
			}

			/* If the task is waiting all objects
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 808d 	bne.w	8002e48 <os_handle_list_updateAndCheck+0x2a8>

				/* Store objWanted to use it later
				 ---------------------------------------------------*/
				size_t last_objWanted = t->objWanted;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	613b      	str	r3, [r7, #16]

				/* If the current object is available
				 ---------------------------------------------------*/
				if(freeCount != 0){
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d056      	beq.n	8002de8 <os_handle_list_updateAndCheck+0x248>

					/* Check if all other objects are available
					 ---------------------------------------------------*/
					bool getObjs = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	e020      	b.n	8002d88 <os_handle_list_updateAndCheck+0x1e8>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d013      	beq.n	8002d80 <os_handle_list_updateAndCheck+0x1e0>

						/* If one of the objects is not free on the task, we must wait
						 ---------------------------------------------------*/
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6979      	ldr	r1, [r7, #20]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fe52 	bl	8002a10 <os_task_list_isObjFreeOnTask>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d004      	beq.n	8002d82 <os_handle_list_updateAndCheck+0x1e2>
							getObjs = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 8002d7e:	e008      	b.n	8002d92 <os_handle_list_updateAndCheck+0x1f2>
						if(t->objWaited[i] == h) continue;
 8002d80:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	3301      	adds	r3, #1
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3d9      	bcc.n	8002d46 <os_handle_list_updateAndCheck+0x1a6>
						}
					}

					/* Update task infos according to the result
					 ---------------------------------------------------*/
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 8002d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <os_handle_list_updateAndCheck+0x1fe>
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	e001      	b.n	8002da2 <os_handle_list_updateAndCheck+0x202>
 8002d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 8002da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <os_handle_list_updateAndCheck+0x212>
 8002dae:	2202      	movs	r2, #2
 8002db0:	e000      	b.n	8002db4 <os_handle_list_updateAndCheck+0x214>
 8002db2:	2203      	movs	r2, #3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	761a      	strb	r2, [r3, #24]
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <os_handle_list_updateAndCheck+0x226>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	7e1a      	ldrb	r2, [r3, #24]
 8002dc4:	e000      	b.n	8002dc8 <os_handle_list_updateAndCheck+0x228>
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	761a      	strb	r2, [r3, #24]

					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 8002dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <os_handle_list_updateAndCheck+0x242>
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d002      	beq.n	8002de2 <os_handle_list_updateAndCheck+0x242>
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	3b01      	subs	r3, #1
 8002de0:	e000      	b.n	8002de4 <os_handle_list_updateAndCheck+0x244>
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
 8002de6:	e00c      	b.n	8002e02 <os_handle_list_updateAndCheck+0x262>
				 ---------------------------------------------------*/
				else{

					/* Just update task infos
					 ---------------------------------------------------*/
					t->objWanted = 0xFFFFFFFF;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f04f 32ff 	mov.w	r2, #4294967295
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <os_handle_list_updateAndCheck+0x25c>
 8002df8:	2202      	movs	r2, #2
 8002dfa:	e000      	b.n	8002dfe <os_handle_list_updateAndCheck+0x25e>
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	761a      	strb	r2, [r3, #24]
				}

				/* Detects that the objWanted changed
				 ---------------------------------------------------*/
				if(last_objWanted != t->objWanted){
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d01d      	beq.n	8002e48 <os_handle_list_updateAndCheck+0x2a8>

					/* If the task was waiting and now wants to get them all (all of them are available)
					 * or if the task wanted to get them all and now is waiting (one of them is no longer available)
					 * we must tag the other objects to update as well
					 ---------------------------------------------------*/
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e015      	b.n	8002e3e <os_handle_list_updateAndCheck+0x29e>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d008      	beq.n	8002e36 <os_handle_list_updateAndCheck+0x296>

						/* Tag all objects to update
						 ---------------------------------------------------*/
						t->objWaited[i]->objUpdate = 1;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	721a      	strb	r2, [r3, #8]
 8002e34:	e000      	b.n	8002e38 <os_handle_list_updateAndCheck+0x298>
						if(t->objWaited[i] == h) continue;
 8002e36:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3e4      	bcc.n	8002e12 <os_handle_list_updateAndCheck+0x272>
				}
			}

			/* If the task is ready, get its priority to check if we should yeild
			 ---------------------------------------------------*/
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	7e1b      	ldrb	r3, [r3, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d10a      	bne.n	8002e66 <os_handle_list_updateAndCheck+0x2c6>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8002e56:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	da03      	bge.n	8002e66 <os_handle_list_updateAndCheck+0x2c6>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8002e64:	e001      	b.n	8002e6a <os_handle_list_updateAndCheck+0x2ca>
 8002e66:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e6e:	e000      	b.n	8002e72 <os_handle_list_updateAndCheck+0x2d2>
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002e70:	bf00      	nop
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f47f aead 	bne.w	8002bda <os_handle_list_updateAndCheck+0x3a>
		}

		/* End of while. All tasks have been updated, so we remove the update flag
		 ---------------------------------------------------*/
		h->objUpdate = 0;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	721a      	strb	r2, [r3, #8]
		 * This logic is important for 2 reasons
		 *
		 * 1 - avoids extra recursive calls
		 * 2 - makes sure that an object is updated ultil the end before switching to another one
		 ---------------------------------------------------*/
		h = os_handle_list_getObjToUpdate();
 8002e86:	f7ff fda5 	bl	80029d4 <os_handle_list_getObjToUpdate>
 8002e8a:	6078      	str	r0, [r7, #4]
	while(h != NULL){
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f ae94 	bne.w	8002bbc <os_handle_list_updateAndCheck+0x1c>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8002e94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dd0d      	ble.n	8002eb8 <os_handle_list_updateAndCheck+0x318>
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <os_handle_list_updateAndCheck+0x338>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fd88 	bl	80039b8 <os_task_getPrio>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	dd01      	ble.n	8002eb8 <os_handle_list_updateAndCheck+0x318>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <os_handle_list_updateAndCheck+0x31a>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	76fb      	strb	r3, [r7, #27]
 8002ebc:	7efb      	ldrb	r3, [r7, #27]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	76fb      	strb	r3, [r7, #27]

	OS_EXIT_CRITICAL();
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f383 8810 	msr	PRIMASK, r3
 8002eca:	f3bf 8f6f 	isb	sy
	return mustYield;
 8002ece:	7efb      	ldrb	r3, [r7, #27]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3738      	adds	r7, #56	; 0x38
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	2001436c 	.word	0x2001436c

08002edc <os_msgQ_updateAndCheck>:
 * @param os_hMsgQ_t msgQ : [in] msgQ to update
 *
 * @return bool : (1) current task should yeild
 *
 **********************************************************************/
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(msgQ == NULL) return 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <os_msgQ_updateAndCheck+0x12>
 8002eea:	2300      	movs	r3, #0
 8002eec:	e081      	b.n	8002ff2 <os_msgQ_updateAndCheck+0x116>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d001      	beq.n	8002efa <os_msgQ_updateAndCheck+0x1e>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e07b      	b.n	8002ff2 <os_msgQ_updateAndCheck+0x116>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002efa:	f3ef 8310 	mrs	r3, PRIMASK
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	b672      	cpsid	i
 8002f02:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8002f06:	23ff      	movs	r3, #255	; 0xff
 8002f08:	77fb      	strb	r3, [r7, #31]

	/* Sort List
	 ---------------------------------------------------*/
	os_task_list_sort(msgQ->obj.blockList);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fcbc 	bl	800288c <os_task_list_sort>

	/* Get the number of times we can get the object
	 ---------------------------------------------------*/
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	61bb      	str	r3, [r7, #24]

	/* Updates every task on the block list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e044      	b.n	8002fb0 <os_msgQ_updateAndCheck+0xd4>

		/* Ignore deleting and ended tasks
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*)it->element;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60fb      	str	r3, [r7, #12]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	7e1b      	ldrb	r3, [r3, #24]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d039      	beq.n	8002fa8 <os_msgQ_updateAndCheck+0xcc>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d035      	beq.n	8002fa8 <os_msgQ_updateAndCheck+0xcc>

		/* If the object can still be taken
		 ---------------------------------------------------*/
		if(freeCount != 0){
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <os_msgQ_updateAndCheck+0x8c>

			/* Tag task as ready
			 ---------------------------------------------------*/
			t->objWanted = 0;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	; 0x34
			t->state = OS_TASK_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	761a      	strb	r2, [r3, #24]

			/* Decrement freecount if needed
			 ---------------------------------------------------*/
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d005      	beq.n	8002f62 <os_msgQ_updateAndCheck+0x86>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <os_msgQ_updateAndCheck+0x86>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	e000      	b.n	8002f64 <os_msgQ_updateAndCheck+0x88>
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e00c      	b.n	8002f82 <os_msgQ_updateAndCheck+0xa6>
		 ---------------------------------------------------*/
		else{

			/* Just update task infos
			 ---------------------------------------------------*/
			t->objWanted = 0xFFFFFFFF;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <os_msgQ_updateAndCheck+0xa0>
 8002f78:	2202      	movs	r2, #2
 8002f7a:	e000      	b.n	8002f7e <os_msgQ_updateAndCheck+0xa2>
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	761a      	strb	r2, [r3, #24]
		}

		/* If the task is ready, get its priority to check if we should yeild
		 ---------------------------------------------------*/
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	7e1b      	ldrb	r3, [r3, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d10a      	bne.n	8002fa0 <os_msgQ_updateAndCheck+0xc4>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8002f90:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	da03      	bge.n	8002fa0 <os_msgQ_updateAndCheck+0xc4>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8002f9e:	e001      	b.n	8002fa4 <os_msgQ_updateAndCheck+0xc8>
 8002fa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e000      	b.n	8002faa <os_msgQ_updateAndCheck+0xce>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002fa8:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1b7      	bne.n	8002f26 <os_msgQ_updateAndCheck+0x4a>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8002fb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dd0d      	ble.n	8002fda <os_msgQ_updateAndCheck+0xfe>
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <os_msgQ_updateAndCheck+0x120>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fcf7 	bl	80039b8 <os_task_getPrio>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	dd01      	ble.n	8002fda <os_msgQ_updateAndCheck+0xfe>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <os_msgQ_updateAndCheck+0x100>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	74fb      	strb	r3, [r7, #19]
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	74fb      	strb	r3, [r7, #19]

	OS_EXIT_CRITICAL();
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f383 8810 	msr	PRIMASK, r3
 8002fec:	f3bf 8f6f 	isb	sy
	return mustYield;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2001436c 	.word	0x2001436c

08003000 <os_round_robin>:
 *
 * @brief This function decides the task that will gain the cpu
 *
 * @return task_list_t : Reference to the chosen task
 **********************************************************************/
static os_list_cell_t* os_round_robin(){
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0

	/* Declare iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 8003006:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <os_round_robin+0xe4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* it_low = os_cur_task;
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <os_round_robin+0xe8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]

	/* Saves first higher priority available in the higher side (all tasks before the current one in list order)
	 ------------------------------------------------------*/
	int8_t highSidePrio = -1;
 8003012:	23ff      	movs	r3, #255	; 0xff
 8003014:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* highSide= NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]

	/* Saves first higher priority available in the lower side (all tasks after and including the current one in list order)
	 ------------------------------------------------------*/
	int8_t lowSidePrio = -1;
 800301a:	23ff      	movs	r3, #255	; 0xff
 800301c:	73fb      	strb	r3, [r7, #15]
	os_list_cell_t* lowSide = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]

	/* Search the high side of the list
	 ------------------------------------------------------*/
	while(it != os_cur_task){
 8003022:	e018      	b.n	8003056 <os_round_robin+0x56>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	7e1b      	ldrb	r3, [r3, #24]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d110      	bne.n	8003050 <os_round_robin+0x50>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fcc0 	bl	80039b8 <os_task_getPrio>
 8003038:	4603      	mov	r3, r0
 800303a:	71bb      	strb	r3, [r7, #6]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(highSidePrio <= task_prio){
 800303c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003040:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003044:	429a      	cmp	r2, r3
 8003046:	dc03      	bgt.n	8003050 <os_round_robin+0x50>
				highSidePrio = task_prio;
 8003048:	79bb      	ldrb	r3, [r7, #6]
 800304a:	75fb      	strb	r3, [r7, #23]
				highSide = it;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	613b      	str	r3, [r7, #16]

		}

		/* Otherwise continue
		 ------------------------------------------------------*/
		it = it->next;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61fb      	str	r3, [r7, #28]
	while(it != os_cur_task){
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <os_round_robin+0xe8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	429a      	cmp	r2, r3
 800305e:	d1e1      	bne.n	8003024 <os_round_robin+0x24>
	}

	/* Search the low side of the list
	 ------------------------------------------------------*/
	while(it_low != NULL){
 8003060:	e018      	b.n	8003094 <os_round_robin+0x94>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	7e1b      	ldrb	r3, [r3, #24]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d110      	bne.n	800308e <os_round_robin+0x8e>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fca1 	bl	80039b8 <os_task_getPrio>
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(lowSidePrio <= task_prio ){
 800307a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	429a      	cmp	r2, r3
 8003084:	dc03      	bgt.n	800308e <os_round_robin+0x8e>
				lowSidePrio = task_prio;
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	73fb      	strb	r3, [r7, #15]
				lowSide = it_low;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60bb      	str	r3, [r7, #8]
			}

		}

		it_low = it_low->next;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61bb      	str	r3, [r7, #24]
	while(it_low != NULL){
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e3      	bne.n	8003062 <os_round_robin+0x62>
	}

	/* If nothing was found, return NULL
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide == NULL) return NULL;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <os_round_robin+0xaa>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <os_round_robin+0xaa>
 80030a6:	2300      	movs	r3, #0
 80030a8:	e018      	b.n	80030dc <os_round_robin+0xdc>

	/* If only the low side found something, return it
	 ------------------------------------------------------*/
	if(highSide == NULL && lowSide != NULL) return lowSide;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <os_round_robin+0xba>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <os_round_robin+0xba>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	e010      	b.n	80030dc <os_round_robin+0xdc>

	/* If only the high side found something, return it
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide != NULL) return highSide;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <os_round_robin+0xca>
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <os_round_robin+0xca>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	e008      	b.n	80030dc <os_round_robin+0xdc>

	/* If both found something, return the task with higher priority.
	 * If both are equal, chose the lower side to peform the round robin for the same priority task
	 ------------------------------------------------------*/
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 80030ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80030ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	dd01      	ble.n	80030da <os_round_robin+0xda>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	e000      	b.n	80030dc <os_round_robin+0xdc>
 80030da:	693b      	ldr	r3, [r7, #16]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200143a0 	.word	0x200143a0
 80030e8:	2001436c 	.word	0x2001436c

080030ec <os_scheduler>:
 * OS Scheduler
 *
 * @brief This function performs the stack management of the context change (must be called in PENDSV interrupt)
 *
 **********************************************************************/
__used static void os_scheduler(){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <os_scheduler+0x8c>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d139      	bne.n	800316e <os_scheduler+0x82>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__os_disable_irq();
 80030fa:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	603b      	str	r3, [r7, #0]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8003100:	f3ef 8309 	mrs	r3, PSP
 8003104:	603b      	str	r3, [r7, #0]

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <os_scheduler+0x90>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <os_scheduler+0x2c>
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <os_scheduler+0x90>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	621a      	str	r2, [r3, #32]

	/* Save last task
	 ------------------------------------------------------*/
	os_list_cell_t* last_task = os_cur_task;
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <os_scheduler+0x90>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	607b      	str	r3, [r7, #4]
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 800311e:	f7ff ff6f 	bl	8003000 <os_round_robin>
 8003122:	4602      	mov	r2, r0
 8003124:	4b15      	ldr	r3, [pc, #84]	; (800317c <os_scheduler+0x90>)
 8003126:	601a      	str	r2, [r3, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <os_scheduler+0x90>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <os_scheduler+0x4c>
			__os_enable_irq();
 8003130:	b662      	cpsie	i
			os_no_task_ready_cb();
 8003132:	f7fe ff9e 	bl	8002072 <os_no_task_ready_cb>
			__os_disable_irq();
 8003136:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <os_scheduler+0x90>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ee      	beq.n	800311e <os_scheduler+0x32>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <os_scheduler+0x90>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	603b      	str	r3, [r7, #0]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <os_scheduler+0x7e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	7e1b      	ldrb	r3, [r3, #24]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <os_scheduler+0x7e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fb5b 	bl	8003820 <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__os_enable_irq();
 800316a:	b662      	cpsie	i
 800316c:	e000      	b.n	8003170 <os_scheduler+0x84>
	if(state != OS_SCHEDULER_START) return;
 800316e:	bf00      	nop

}
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20014368 	.word	0x20014368
 800317c:	2001436c 	.word	0x2001436c

08003180 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8003180:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8003184:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8003188:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 800318a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 800318e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 8003192:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 8003196:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 8003198:	f7ff ffa8 	bl	80030ec <os_scheduler>
	__asm volatile ("pop {lr}");
 800319c:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 80031a0:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 80031a4:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 80031a8:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 80031ac:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 80031ae:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 80031b2:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 80031b6:	4770      	bx	lr

}
 80031b8:	bf00      	nop
	...

080031bc <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 80031c2:	f7fe fedd 	bl	8001f80 <os_init_get>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <os_scheduler_start+0x1a>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e01b      	b.n	800320e <os_scheduler_start+0x52>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 80031d6:	f3ef 8310 	mrs	r3, PRIMASK
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	b672      	cpsid	i
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <os_scheduler_start+0x5c>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	f000 f932 	bl	8003450 <os_task_must_yeild>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <os_scheduler_start+0x46>
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <os_scheduler_start+0x60>)
 80031f4:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80031f8:	4a08      	ldr	r2, [pc, #32]	; (800321c <os_scheduler_start+0x60>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f383 8810 	msr	PRIMASK, r3
 8003208:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20014368 	.word	0x20014368
 800321c:	e000e008 	.word	0xe000e008

08003220 <os_scheduler_state_get>:
 * @brief Returns the state of the scheduler
 *
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
	return state;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <os_scheduler_state_get+0x14>)
 8003226:	781b      	ldrb	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20014368 	.word	0x20014368

08003238 <os_task_init_stack>:
 * @param uint32_t interruptStackSize : [in] size of the interrupt stack
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_init_stack(uint32_t interruptStackSize){
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ------------------------------------------------------*/
	if(interruptStackSize < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003246:	d201      	bcs.n	800324c <os_task_init_stack+0x14>
 8003248:	2301      	movs	r3, #1
 800324a:	e021      	b.n	8003290 <os_task_init_stack+0x58>

	/* Allocate the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fe ffb9 	bl	80021c4 <os_heap_alloc>
 8003252:	4603      	mov	r3, r0
 8003254:	60fb      	str	r3, [r7, #12]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <os_task_init_stack+0x28>
 800325c:	2303      	movs	r3, #3
 800325e:	e017      	b.n	8003290 <os_task_init_stack+0x58>

	/* Save context and make PSP = MSP
	 ------------------------------------------------------*/
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 8003260:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 8003262:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 8003266:	f386 8809 	msr	PSP, r6

	/* Position MSP to interrput stack
	 ------------------------------------------------------*/
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	60bb      	str	r3, [r7, #8]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 800327a:	f386 8808 	msr	MSP, r6

	/* Select PSP as current stack pointer
	 ------------------------------------------------------*/
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 800327e:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 8003282:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 8003286:	f386 8814 	msr	CONTROL, r6

	/* Recover stack
	 ------------------------------------------------------*/
	__asm volatile ("pop {r6, lr}");
 800328a:	e8bd 4040 	ldmia.w	sp!, {r6, lr}

	return OS_ERR_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <os_task_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_task_getFreeCount(os_handle_t h){
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <os_task_getFreeCount+0x12>
 80032a6:	2300      	movs	r3, #0
 80032a8:	e031      	b.n	800330e <os_task_getFreeCount+0x76>
	if(h->type != OS_OBJ_TASK) return 0;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <os_task_getFreeCount+0x1e>
 80032b2:	2300      	movs	r3, #0
 80032b4:	e02b      	b.n	800330e <os_task_getFreeCount+0x76>

	/* Check if task ended
	 ------------------------------------------------------*/
	os_task_state_e state = os_task_getState(h);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fb9a 	bl	80039f0 <os_task_getState>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

	/* Determines if task ended
	 ------------------------------------------------------*/
	bool task_ended  = (state == OS_TASK_NOT_EXIST);
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_ENDED);
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	2a01      	cmp	r2, #1
 80032d2:	bf0c      	ite	eq
 80032d4:	2201      	moveq	r2, #1
 80032d6:	2200      	movne	r2, #0
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	4313      	orrs	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_DELETING);
 80032e6:	7bbb      	ldrb	r3, [r7, #14]
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	2a04      	cmp	r2, #4
 80032ec:	bf0c      	ite	eq
 80032ee:	2201      	moveq	r2, #1
 80032f0:	2200      	movne	r2, #0
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4313      	orrs	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	73bb      	strb	r3, [r7, #14]

	return task_ended ? OS_OBJ_COUNT_INF : 0;
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <os_task_getFreeCount+0x74>
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	e000      	b.n	800330e <os_task_getFreeCount+0x76>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <os_task_objTake>:
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static void os_task_objTake(os_handle_t h, os_handle_t takingTask){
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	460b      	mov	r3, r1
 800333a:	72fb      	strb	r3, [r7, #11]

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 800333c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003340:	2b00      	cmp	r3, #0
 8003342:	da01      	bge.n	8003348 <os_task_init+0x1c>
 8003344:	2301      	movs	r3, #1
 8003346:	e073      	b.n	8003430 <os_task_init+0x104>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800334e:	d201      	bcs.n	8003354 <os_task_init+0x28>
 8003350:	2301      	movs	r3, #1
 8003352:	e06d      	b.n	8003430 <os_task_init+0x104>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800335a:	d201      	bcs.n	8003360 <os_task_init+0x34>
 800335c:	2301      	movs	r3, #1
 800335e:	e067      	b.n	8003430 <os_task_init+0x104>

	/* Init stack by changing the register used (MSP to PSP) and allocate interrupt stack
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init_stack(interrput_stack_size);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff69 	bl	8003238 <os_task_init_stack>
 8003366:	4603      	mov	r3, r0
 8003368:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <os_task_init+0x48>
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	e05d      	b.n	8003430 <os_task_init+0x104>

	/* Allocate task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8003374:	2048      	movs	r0, #72	; 0x48
 8003376:	f7fe ff25 	bl	80021c4 <os_heap_alloc>
 800337a:	6138      	str	r0, [r7, #16]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <os_task_init+0x5a>
 8003382:	2303      	movs	r3, #3
 8003384:	e054      	b.n	8003430 <os_task_init+0x104>

	/* Init main task
	 ------------------------------------------------------*/
	t->obj.objUpdate		= 0;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2200      	movs	r2, #0
 800338a:	721a      	strb	r2, [r3, #8]
	t->obj.type				= OS_OBJ_TASK;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4a28      	ldr	r2, [pc, #160]	; (8003438 <os_task_init+0x10c>)
 8003396:	60da      	str	r2, [r3, #12]
	t->obj.blockList		= os_list_init();
 8003398:	f7ff f8fa 	bl	8002590 <os_list_init>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	615a      	str	r2, [r3, #20]
	t->obj.obj_take			= &os_task_objTake;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <os_task_init+0x110>)
 80033a6:	611a      	str	r2, [r3, #16]
	t->obj.name 			= main_name;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]

	t->basePriority 		= main_task_priority;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	7afa      	ldrb	r2, [r7, #11]
 80033b2:	765a      	strb	r2, [r3, #25]
	t->priority		    	= main_task_priority;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	7afa      	ldrb	r2, [r7, #11]
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	t->state	 			= OS_TASK_READY;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2202      	movs	r2, #2
 80033c0:	761a      	strb	r2, [r3, #24]
	t->pStack   			= NULL;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2200      	movs	r2, #0
 80033c6:	621a      	str	r2, [r3, #32]
	t->wakeCoutdown  		= 0;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
	t->stackBase	    	= 0;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2200      	movs	r2, #0
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
	t->objWaited			= NULL;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2200      	movs	r2, #0
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs 			= 0;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
	t->retVal				= NULL;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

	t->ownedMutex			= os_list_init();
 80033e6:	f7ff f8d3 	bl	8002590 <os_list_init>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Init head list and Add main task
	 ------------------------------------------------------*/
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 80033f0:	2200      	movs	r2, #0
 80033f2:	6939      	ldr	r1, [r7, #16]
 80033f4:	4812      	ldr	r0, [pc, #72]	; (8003440 <os_task_init+0x114>)
 80033f6:	f7ff f960 	bl	80026ba <os_list_add>
 80033fa:	4603      	mov	r3, r0
 80033fc:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <os_task_init+0xdc>
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	e013      	b.n	8003430 <os_task_init+0x104>

	/* Add object to object list
	 ------------------------------------------------------*/
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8003408:	2200      	movs	r2, #0
 800340a:	6939      	ldr	r1, [r7, #16]
 800340c:	480d      	ldr	r0, [pc, #52]	; (8003444 <os_task_init+0x118>)
 800340e:	f7ff f954 	bl	80026ba <os_list_add>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <os_task_init+0xf4>
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	e007      	b.n	8003430 <os_task_init+0x104>

	/* Point to current task
	 ------------------------------------------------------*/
	os_cur_task = os_head.head.next;
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <os_task_init+0x114>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <os_task_init+0x11c>)
 8003426:	6013      	str	r3, [r2, #0]

	/* Link handle with task
	 ------------------------------------------------------*/
	main_task = (os_handle_t) t;
 8003428:	4a08      	ldr	r2, [pc, #32]	; (800344c <os_task_init+0x120>)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6013      	str	r3, [r2, #0]

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08003299 	.word	0x08003299
 800343c:	08003317 	.word	0x08003317
 8003440:	200143a0 	.word	0x200143a0
 8003444:	20014380 	.word	0x20014380
 8003448:	2001436c 	.word	0x2001436c
 800344c:	200143bc 	.word	0x200143bc

08003450 <os_task_must_yeild>:
 * @brief This function checks the priority of all tasks and decides if the current task should yield
 *
 * @return bool : 1 = yeild
 *
 **********************************************************************/
bool os_task_must_yeild(){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0

	/* Enter critical
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8003456:	f3ef 8310 	mrs	r3, PRIMASK
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	b672      	cpsid	i
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <os_task_must_yeild+0x80>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <os_task_must_yeild+0x84>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <os_task_must_yeild+0x30>
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <os_task_must_yeild+0x84>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fa9e 	bl	80039b8 <os_task_getPrio>
 800347c:	4603      	mov	r3, r0
 800347e:	e001      	b.n	8003484 <os_task_must_yeild+0x34>
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	72fb      	strb	r3, [r7, #11]
 8003486:	e016      	b.n	80034b6 <os_task_must_yeild+0x66>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fa93 	bl	80039b8 <os_task_getPrio>
 8003492:	4603      	mov	r3, r0
 8003494:	72bb      	strb	r3, [r7, #10]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	7e1b      	ldrb	r3, [r3, #24]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d107      	bne.n	80034b0 <os_task_must_yeild+0x60>
 80034a0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80034a4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	da01      	bge.n	80034b0 <os_task_must_yeild+0x60>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e00b      	b.n	80034c8 <os_task_must_yeild+0x78>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <os_task_must_yeild+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f383 8810 	msr	PRIMASK, r3
 80034c2:	f3bf 8f6f 	isb	sy
			 ------------------------------------------------------*/
			it = it->next;
		}
	);

	return false;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200143a0 	.word	0x200143a0
 80034d4:	2001436c 	.word	0x2001436c

080034d8 <os_task_create>:
 * @param void* arg				: [ in] Argument to be passed to the task
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), int8_t priority, uint32_t stack_size, void* arg){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	70fb      	strb	r3, [r7, #3]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <os_task_create+0x18>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e166      	b.n	80037be <os_task_create+0x2e6>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <os_task_create+0x22>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e161      	b.n	80037be <os_task_create+0x2e6>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 80034fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da01      	bge.n	8003506 <os_task_create+0x2e>
 8003502:	2301      	movs	r3, #1
 8003504:	e15b      	b.n	80037be <os_task_create+0x2e6>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800350c:	d201      	bcs.n	8003512 <os_task_create+0x3a>
 800350e:	2301      	movs	r3, #1
 8003510:	e155      	b.n	80037be <os_task_create+0x2e6>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 8003512:	f7fe fd35 	bl	8001f80 <os_init_get>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <os_task_create+0x4e>
 8003522:	2304      	movs	r3, #4
 8003524:	e14b      	b.n	80037be <os_task_create+0x2e6>

	/* If task exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <os_task_create+0x72>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_TASK, name);
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	2101      	movs	r1, #1
 8003530:	4890      	ldr	r0, [pc, #576]	; (8003774 <os_task_create+0x29c>)
 8003532:	f7ff f880 	bl	8002636 <os_handle_list_searchByName>
 8003536:	61f8      	str	r0, [r7, #28]
		if(obj != NULL){
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <os_task_create+0x72>
			*h = obj->element;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
			return OS_ERR_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e139      	b.n	80037be <os_task_create+0x2e6>
		}
	}

	/* Alloc the task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 800354a:	2048      	movs	r0, #72	; 0x48
 800354c:	f7fe fe3a 	bl	80021c4 <os_heap_alloc>
 8003550:	61b8      	str	r0, [r7, #24]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <os_task_create+0x84>
 8003558:	2303      	movs	r3, #3
 800355a:	e130      	b.n	80037be <os_task_create+0x2e6>

	/* Alloc the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 800355c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800355e:	f7fe fe31 	bl	80021c4 <os_heap_alloc>
 8003562:	4603      	mov	r3, r0
 8003564:	617b      	str	r3, [r7, #20]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <os_task_create+0x98>
 800356c:	2303      	movs	r3, #3
 800356e:	e126      	b.n	80037be <os_task_create+0x2e6>

	/* Init Task
	 ------------------------------------------------------*/
	t->obj.objUpdate	= 0;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2200      	movs	r2, #0
 8003574:	721a      	strb	r2, [r3, #8]
	t->obj.type			= OS_OBJ_TASK;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4a7e      	ldr	r2, [pc, #504]	; (8003778 <os_task_create+0x2a0>)
 8003580:	60da      	str	r2, [r3, #12]
	t->obj.blockList	= os_list_init();
 8003582:	f7ff f805 	bl	8002590 <os_list_init>
 8003586:	4602      	mov	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	615a      	str	r2, [r3, #20]
	t->obj.obj_take		= &os_task_objTake;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4a7b      	ldr	r2, [pc, #492]	; (800377c <os_task_create+0x2a4>)
 8003590:	611a      	str	r2, [r3, #16]
	t->obj.name			= (char*) name;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	605a      	str	r2, [r3, #4]

	t->basePriority		= priority;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	765a      	strb	r2, [r3, #25]
	t->priority		    = priority;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	t->state			= OS_TASK_READY;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2202      	movs	r2, #2
 80035aa:	761a      	strb	r2, [r3, #24]
	t->wakeCoutdown	 	= 0;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
	t->stackBase		= (stk + stack_size);
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	441a      	add	r2, r3
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize 		= stack_size;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f023 0307 	bic.w	r3, r3, #7
 80035ca:	461a      	mov	r2, r3
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	621a      	str	r2, [r3, #32]
	t->objWaited		= NULL;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2200      	movs	r2, #0
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs 		= 0;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
	t->retVal			= NULL;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2200      	movs	r2, #0
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

	t->ownedMutex		= os_list_init();
 80035e2:	f7fe ffd5 	bl	8002590 <os_list_init>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Init Task Stack
	 ------------------------------------------------------*/
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	1f1a      	subs	r2, r3, #4
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	621a      	str	r2, [r3, #32]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035fe:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) fn;				//Return
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	1f1a      	subs	r2, r3, #4
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	621a      	str	r2, [r3, #32]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) &os_task_return;  //LR
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	1f1a      	subs	r2, r3, #4
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	621a      	str	r2, [r3, #32]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a57      	ldr	r2, [pc, #348]	; (8003780 <os_task_create+0x2a8>)
 8003622:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R12
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	1f1a      	subs	r2, r3, #4
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	621a      	str	r2, [r3, #32]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R3
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	1f1a      	subs	r2, r3, #4
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	621a      	str	r2, [r3, #32]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R2
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	1f1a      	subs	r2, r3, #4
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R1
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	1f1a      	subs	r2, r3, #4
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	621a      	str	r2, [r3, #32]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) arg;			 	//R0 (argument)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	1f1a      	subs	r2, r3, #4
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	621a      	str	r2, [r3, #32]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367c:	601a      	str	r2, [r3, #0]

	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	1f1a      	subs	r2, r3, #4
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	621a      	str	r2, [r3, #32]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R11
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	1f1a      	subs	r2, r3, #4
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	621a      	str	r2, [r3, #32]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R10
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	1f1a      	subs	r2, r3, #4
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	621a      	str	r2, [r3, #32]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0; 			 	//R9
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	1f1a      	subs	r2, r3, #4
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	621a      	str	r2, [r3, #32]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R8
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	1f1a      	subs	r2, r3, #4
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	621a      	str	r2, [r3, #32]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R7
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	1f1a      	subs	r2, r3, #4
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	621a      	str	r2, [r3, #32]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R6
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	1f1a      	subs	r2, r3, #4
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	621a      	str	r2, [r3, #32]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R5
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	1f1a      	subs	r2, r3, #4
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	621a      	str	r2, [r3, #32]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R4
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	1f1a      	subs	r2, r3, #4
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	621a      	str	r2, [r3, #32]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

	/* Add task to list
	 ------------------------------------------------------*/
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8003722:	2200      	movs	r2, #0
 8003724:	69b9      	ldr	r1, [r7, #24]
 8003726:	4817      	ldr	r0, [pc, #92]	; (8003784 <os_task_create+0x2ac>)
 8003728:	f7fe ffc7 	bl	80026ba <os_list_add>
 800372c:	4603      	mov	r3, r0
 800372e:	74fb      	strb	r3, [r7, #19]
	if(err != OS_ERR_OK) return err;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <os_task_create+0x262>
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	e041      	b.n	80037be <os_task_create+0x2e6>

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 800373a:	2200      	movs	r2, #0
 800373c:	69b9      	ldr	r1, [r7, #24]
 800373e:	480d      	ldr	r0, [pc, #52]	; (8003774 <os_task_create+0x29c>)
 8003740:	f7fe ffbb 	bl	80026ba <os_list_add>
 8003744:	4603      	mov	r3, r0
 8003746:	74bb      	strb	r3, [r7, #18]
	if(ret != OS_ERR_OK) return ret;
 8003748:	7cbb      	ldrb	r3, [r7, #18]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <os_task_create+0x27a>
 800374e:	7cbb      	ldrb	r3, [r7, #18]
 8003750:	e035      	b.n	80037be <os_task_create+0x2e6>

	/* Calculate task priority
	 ------------------------------------------------------*/
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 8003752:	69b8      	ldr	r0, [r7, #24]
 8003754:	f000 f930 	bl	80039b8 <os_task_getPrio>
 8003758:	4603      	mov	r3, r0
 800375a:	747b      	strb	r3, [r7, #17]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <os_task_create+0x2b0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <os_task_create+0x2b4>
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <os_task_create+0x2b0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f924 	bl	80039b8 <os_task_getPrio>
 8003770:	4603      	mov	r3, r0
 8003772:	e00d      	b.n	8003790 <os_task_create+0x2b8>
 8003774:	20014380 	.word	0x20014380
 8003778:	08003299 	.word	0x08003299
 800377c:	08003317 	.word	0x08003317
 8003780:	080037c9 	.word	0x080037c9
 8003784:	200143a0 	.word	0x200143a0
 8003788:	2001436c 	.word	0x2001436c
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	743b      	strb	r3, [r7, #16]

	/* If created task was a higher priority, and scheduler is running, yeild
	 ---------------------------------------------------*/
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8003792:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8003796:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	dd06      	ble.n	80037ac <os_task_create+0x2d4>
 800379e:	f7ff fd3f 	bl	8003220 <os_scheduler_state_get>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <os_task_create+0x2d4>
 80037a8:	f000 f8f4 	bl	8003994 <os_task_yeild>

	/* link handle with task object
	 ---------------------------------------------------*/
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <os_task_create+0x2de>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	e000      	b.n	80037b8 <os_task_create+0x2e0>
 80037b6:	2300      	movs	r3, #0
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6013      	str	r3, [r2, #0]

	return err;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop

080037c8 <os_task_return>:
 * @param void* retVal : [in] return value
 *
 * @return os_err_e : should never return. If it does, a problem occurred
 *
 **********************************************************************/
os_err_e os_task_return(void* retVal){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

	/* Check scheduler
	 ------------------------------------------------------*/
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 80037d0:	f7ff fd26 	bl	8003220 <os_scheduler_state_get>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <os_task_return+0x16>
 80037da:	2304      	movs	r3, #4
 80037dc:	e019      	b.n	8003812 <os_task_return+0x4a>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80037de:	f3ef 8310 	mrs	r3, PRIMASK
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	b672      	cpsid	i
 80037e6:	f3bf 8f6f 	isb	sy

	/* Store return value and tag as ended
	 ------------------------------------------------------*/
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <os_task_return+0x54>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2201      	movs	r2, #1
 80037f2:	761a      	strb	r2, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <os_task_return+0x54>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(os_cur_task->element);
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <os_task_return+0x54>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f9cb 	bl	8002ba0 <os_handle_list_updateAndCheck>
	 ------------------------------------------------------*/
	while(1){

		/* Yeild task
		 ------------------------------------------------------*/
		os_task_yeild();
 800380a:	f000 f8c3 	bl	8003994 <os_task_yeild>

		/* Enable IRQ no matter what
		 ------------------------------------------------------*/
		__os_enable_irq();
 800380e:	b662      	cpsie	i
		os_task_yeild();
 8003810:	e7fb      	b.n	800380a <os_task_return+0x42>
	OS_EXIT_CRITICAL();

	/* Another Failsafe
	 ------------------------------------------------------*/
	return OS_ERR_UNKNOWN;
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2001436c 	.word	0x2001436c

08003820 <os_task_delete>:
 * @param os_handle_t h : [in] handle containing the task to kill
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_delete(os_handle_t h){
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	613b      	str	r3, [r7, #16]

	/* Search to see if task exists
	 ------------------------------------------------------*/
	os_list_cell_t* list = os_list_search(&os_head, h);
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4856      	ldr	r0, [pc, #344]	; (8003988 <os_task_delete+0x168>)
 8003830:	f7fe fed1 	bl	80025d6 <os_list_search>
 8003834:	60f8      	str	r0, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <os_task_delete+0x20>
 800383c:	2301      	movs	r3, #1
 800383e:	e09e      	b.n	800397e <os_task_delete+0x15e>
	if(list == NULL) return OS_ERR_INVALID;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <os_task_delete+0x2a>
 8003846:	2302      	movs	r3, #2
 8003848:	e099      	b.n	800397e <os_task_delete+0x15e>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <os_task_delete+0x36>
 8003852:	2301      	movs	r3, #1
 8003854:	e093      	b.n	800397e <os_task_delete+0x15e>

	/* Check scheduler, we cannot kill the current task if scheduler is not ready
	 ------------------------------------------------------*/
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <os_task_delete+0x16c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d106      	bne.n	8003870 <os_task_delete+0x50>
 8003862:	f7ff fcdd 	bl	8003220 <os_scheduler_state_get>
 8003866:	4603      	mov	r3, r0
 8003868:	2b01      	cmp	r3, #1
 800386a:	d001      	beq.n	8003870 <os_task_delete+0x50>
 800386c:	2304      	movs	r3, #4
 800386e:	e086      	b.n	800397e <os_task_delete+0x15e>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003870:	f3ef 8310 	mrs	r3, PRIMASK
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	b672      	cpsid	i
 8003878:	f3bf 8f6f 	isb	sy

	/* Tag as ended
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2201      	movs	r2, #1
 8003880:	761a      	strb	r2, [r3, #24]

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(h);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff f98c 	bl	8002ba0 <os_handle_list_updateAndCheck>

	/* Check and store if we are killing the current task
	 ------------------------------------------------------*/
	if(h == os_cur_task->element){
 8003888:	4b40      	ldr	r3, [pc, #256]	; (800398c <os_task_delete+0x16c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <os_task_delete+0x82>

		/* Tag task to delete
		 ------------------------------------------------------*/
		t->state = OS_TASK_DELETING;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2204      	movs	r2, #4
 8003898:	761a      	strb	r2, [r3, #24]
		 ------------------------------------------------------*/
		while(1){

			/* Yeild task
			 ------------------------------------------------------*/
			os_task_yeild();
 800389a:	f000 f87b 	bl	8003994 <os_task_yeild>

			/* Enable IRQ no matter what
			 ------------------------------------------------------*/
			__os_enable_irq();
 800389e:	b662      	cpsie	i
			os_task_yeild();
 80038a0:	e7fb      	b.n	800389a <os_task_delete+0x7a>
		return OS_ERR_UNKNOWN;
	}

	/* Remove task from object block list if needed
	 ------------------------------------------------------*/
	if( t->objWaited != NULL) {
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d031      	beq.n	800390e <os_task_delete+0xee>

		for(uint32_t i = 0; i < t->sizeObjs; i++){
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e029      	b.n	8003904 <os_task_delete+0xe4>

			/* Failsafe
			 ------------------------------------------------------*/
			if(t->objWaited[i] == NULL) continue;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01d      	beq.n	80038fc <os_task_delete+0xdc>

			/* Remove from block list
			 ------------------------------------------------------*/
			os_list_remove(t->objWaited[i]->blockList, h);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ff60 	bl	8002796 <os_list_remove>

			/* Update object's priority
			 ------------------------------------------------------*/
			os_obj_updatePrio(t->objWaited[i]);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fdf0 	bl	80024c8 <os_obj_updatePrio>

			/* Update block list
			 ------------------------------------------------------*/
			os_handle_list_updateAndCheck(t->objWaited[i]);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f953 	bl	8002ba0 <os_handle_list_updateAndCheck>
 80038fa:	e000      	b.n	80038fe <os_task_delete+0xde>
			if(t->objWaited[i] == NULL) continue;
 80038fc:	bf00      	nop
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3301      	adds	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	429a      	cmp	r2, r3
 800390c:	d3d0      	bcc.n	80038b0 <os_task_delete+0x90>

	}

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	481f      	ldr	r0, [pc, #124]	; (8003990 <os_task_delete+0x170>)
 8003912:	f7fe ff40 	bl	8002796 <os_list_remove>

	/* Remove task from list
	 ------------------------------------------------------*/
	os_list_remove(&os_head, h);
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	481b      	ldr	r0, [pc, #108]	; (8003988 <os_task_delete+0x168>)
 800391a:	f7fe ff3c 	bl	8002796 <os_list_remove>

	/* Clear blocked list
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe ff8a 	bl	800283c <os_list_clear>

	/* Clear owned mutex list
	 ------------------------------------------------------*/
	os_list_clear(t->ownedMutex);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe ff85 	bl	800283c <os_list_clear>

	/* Free the stack memory
	 ------------------------------------------------------*/
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe fca7 	bl	8002290 <os_heap_free>

	/* Reset values just in case
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2201      	movs	r2, #1
 8003946:	761a      	strb	r2, [r3, #24]
	t->objWaited = NULL;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2200      	movs	r2, #0
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs = 0;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
	t->pStack = 0;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2200      	movs	r2, #0
 8003958:	621a      	str	r2, [r3, #32]
	t->stackBase = 0;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2200      	movs	r2, #0
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize = 0;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
	t->wakeCoutdown = 0;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2200      	movs	r2, #0
 800396a:	61da      	str	r2, [r3, #28]

	/* Delete task
	 ------------------------------------------------------*/
	os_heap_free(h);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe fc8f 	bl	8002290 <os_heap_free>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f383 8810 	msr	PRIMASK, r3
 8003978:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200143a0 	.word	0x200143a0
 800398c:	2001436c 	.word	0x2001436c
 8003990:	20014380 	.word	0x20014380

08003994 <os_task_yeild>:
 * OS Task Yeild
 *
 * @brief This function calls the scheduler in order to let other tasks to run
 *
 **********************************************************************/
void os_task_yeild(){
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <os_task_yeild+0x20>)
 800399a:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <os_task_yeild+0x20>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	e000e008 	.word	0xe000e008

080039b8 <os_task_getPrio>:
 * @param task_t* t : [in] handle to task
 *
 * @return int8_t : The effective priority or -1 if argument error
 *
 **********************************************************************/
int8_t os_task_getPrio(os_handle_t h){
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <os_task_getPrio+0x18>
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	e009      	b.n	80039e4 <os_task_getPrio+0x2c>
	if(h->type != OS_OBJ_TASK) return -1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <os_task_getPrio+0x26>
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e002      	b.n	80039e4 <os_task_getPrio+0x2c>

	return t->priority;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <os_task_getState+0x16>
 8003a02:	2300      	movs	r3, #0
 8003a04:	e023      	b.n	8003a4e <os_task_getState+0x5e>
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <os_task_getState+0x22>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e01d      	b.n	8003a4e <os_task_getState+0x5e>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4810      	ldr	r0, [pc, #64]	; (8003a58 <os_task_getState+0x68>)
 8003a16:	f7fe fdde 	bl	80025d6 <os_list_search>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <os_task_getState+0x34>
 8003a20:	2300      	movs	r3, #0
 8003a22:	e014      	b.n	8003a4e <os_task_getState+0x5e>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	7e1b      	ldrb	r3, [r3, #24]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d101      	bne.n	8003a30 <os_task_getState+0x40>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e00e      	b.n	8003a4e <os_task_getState+0x5e>

	/* Check if task is ended
	 ------------------------------------------------------*/
	os_task_state_e state = task->state;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	7e1b      	ldrb	r3, [r3, #24]
 8003a34:	72fb      	strb	r3, [r7, #11]

	/* Force blocked if task is waiting for an object
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 8003a36:	7afb      	ldrb	r3, [r7, #11]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d103      	bne.n	8003a44 <os_task_getState+0x54>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <os_task_getState+0x58>
 8003a44:	7afb      	ldrb	r3, [r7, #11]
 8003a46:	e000      	b.n	8003a4a <os_task_getState+0x5a>
 8003a48:	2303      	movs	r3, #3
 8003a4a:	72fb      	strb	r3, [r7, #11]

	return state;
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200143a0 	.word	0x200143a0

08003a5c <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	b672      	cpsid	i
 8003a6c:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <os_tick+0x100>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	4a38      	ldr	r2, [pc, #224]	; (8003b5c <os_tick+0x100>)
 8003a7a:	6013      	str	r3, [r2, #0]

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* it = os_head.head.next;
 8003a80:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <os_tick+0x104>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	613b      	str	r3, [r7, #16]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <os_tick+0x108>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <os_tick+0x42>
 8003a8e:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <os_tick+0x108>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff8f 	bl	80039b8 <os_task_getPrio>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	e001      	b.n	8003aa2 <os_tick+0x46>
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	73fb      	strb	r3, [r7, #15]

	/* Check if there is any high priority task to execute and wake up tasks
	 ------------------------------------------------------*/
	while(it != NULL){
 8003aa4:	e044      	b.n	8003b30 <os_tick+0xd4>

		/* Tick counter if necessary
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <os_tick+0x80>
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d00f      	beq.n	8003adc <os_tick+0x80>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d805      	bhi.n	8003ad4 <os_tick+0x78>
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	e000      	b.n	8003ad6 <os_tick+0x7a>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	6892      	ldr	r2, [r2, #8]
 8003ada:	61d3      	str	r3, [r2, #28]

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <os_tick+0x9c>
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	7e1b      	ldrb	r3, [r3, #24]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d103      	bne.n	8003af8 <os_tick+0x9c>
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2202      	movs	r2, #2
 8003af6:	761a      	strb	r2, [r3, #24]

		/* If current task is ready
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	7e1b      	ldrb	r3, [r3, #24]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d113      	bne.n	8003b2a <os_tick+0xce>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio(it->element);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff56 	bl	80039b8 <os_task_getPrio>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73bb      	strb	r3, [r7, #14]

			/* If there is a task with priority higher or equal to current task that is ready, than scheduling is called
			 ------------------------------------------------------*/
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 8003b10:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	db06      	blt.n	8003b2a <os_tick+0xce>
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <os_tick+0x108>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <os_tick+0xce>
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]

		}

		/* Keep going
		 ------------------------------------------------------*/
		it = it->next;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
	while(it != NULL){
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1b7      	bne.n	8003aa6 <os_tick+0x4a>
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <os_tick+0xee>
 8003b3c:	f7ff fb70 	bl	8003220 <os_scheduler_state_get>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <os_tick+0xee>
 8003b46:	f7ff ff25 	bl	8003994 <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
 8003b50:	f3bf 8f6f 	isb	sy
	return;
 8003b54:	bf00      	nop
}
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20014370 	.word	0x20014370
 8003b60:	200143a0 	.word	0x200143a0
 8003b64:	2001436c 	.word	0x2001436c

08003b68 <flash_write>:

#define FLASH_MAX_ADDR		0x8100000UL
#define FLASH_BASE_ADDR		0x8000000UL
#define FLASH_TOTAL_SIZE	0x0100000UL

int32_t flash_write(uint32_t addr, uint8_t buffer[], size_t len){
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b08d      	sub	sp, #52	; 0x34
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]

	if(len == 0) return -2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <flash_write+0x18>
 8003b7a:	f06f 0301 	mvn.w	r3, #1
 8003b7e:	e0d6      	b.n	8003d2e <flash_write+0x1c6>
	if(buffer == NULL) return -2;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <flash_write+0x24>
 8003b86:	f06f 0301 	mvn.w	r3, #1
 8003b8a:	e0d0      	b.n	8003d2e <flash_write+0x1c6>
	if(addr < FLASH_BASE_ADDR) return -2;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b92:	d202      	bcs.n	8003b9a <flash_write+0x32>
 8003b94:	f06f 0301 	mvn.w	r3, #1
 8003b98:	e0c9      	b.n	8003d2e <flash_write+0x1c6>
	if(addr >= FLASH_MAX_ADDR) return -2;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003ba0:	d302      	bcc.n	8003ba8 <flash_write+0x40>
 8003ba2:	f06f 0301 	mvn.w	r3, #1
 8003ba6:	e0c2      	b.n	8003d2e <flash_write+0x1c6>

	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8003ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bac:	f001 f886 	bl	8004cbc <FLASH_WaitForLastOperation>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ASSERT(ret == HAL_OK);
 8003bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <flash_write+0x60>
 8003bbe:	2217      	movs	r2, #23
 8003bc0:	495d      	ldr	r1, [pc, #372]	; (8003d38 <flash_write+0x1d0>)
 8003bc2:	485e      	ldr	r0, [pc, #376]	; (8003d3c <flash_write+0x1d4>)
 8003bc4:	f003 fc4e 	bl	8007464 <iprintf>
	if(ret != HAL_OK)
 8003bc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <flash_write+0x6e>
		return -1;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	e0ab      	b.n	8003d2e <flash_write+0x1c6>

	ret = HAL_FLASH_Unlock();
 8003bd6:	f001 f83f 	bl	8004c58 <HAL_FLASH_Unlock>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ASSERT(ret == HAL_OK);
 8003be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <flash_write+0x8a>
 8003be8:	221c      	movs	r2, #28
 8003bea:	4953      	ldr	r1, [pc, #332]	; (8003d38 <flash_write+0x1d0>)
 8003bec:	4853      	ldr	r0, [pc, #332]	; (8003d3c <flash_write+0x1d4>)
 8003bee:	f003 fc39 	bl	8007464 <iprintf>
	if(ret != HAL_OK)
 8003bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <flash_write+0x98>
		return -1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e096      	b.n	8003d2e <flash_write+0x1c6>

	int32_t pos = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1){

		uint32_t writePermitted = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
		writePermitted = ( (addr + 1) <= FLASH_MAX_ADDR ) 				   ? 1 : writePermitted;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003c10:	d901      	bls.n	8003c16 <flash_write+0xae>
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	e000      	b.n	8003c18 <flash_write+0xb0>
 8003c16:	2301      	movs	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
		writePermitted = ( (addr % 2) == 0 && addr + 2 <= FLASH_MAX_ADDR ) ? 2 : writePermitted;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <flash_write+0xc6>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3302      	adds	r3, #2
 8003c28:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003c2c:	d901      	bls.n	8003c32 <flash_write+0xca>
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	e000      	b.n	8003c34 <flash_write+0xcc>
 8003c32:	2302      	movs	r3, #2
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
		writePermitted = ( (addr % 4) == 0 && addr + 4 <= FLASH_MAX_ADDR ) ? 4 : writePermitted;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <flash_write+0xe2>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3304      	adds	r3, #4
 8003c44:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003c48:	d901      	bls.n	8003c4e <flash_write+0xe6>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	e000      	b.n	8003c50 <flash_write+0xe8>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t lenToWrite = writePermitted < len ? writePermitted : len;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bf28      	it	cs
 8003c5a:	4613      	movcs	r3, r2
 8003c5c:	623b      	str	r3, [r7, #32]
		lenToWrite = lenToWrite == 3 ? 2 : lenToWrite;
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d001      	beq.n	8003c68 <flash_write+0x100>
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	e000      	b.n	8003c6a <flash_write+0x102>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]

		if(lenToWrite == 0 || len == 0) return pos;
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <flash_write+0x110>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <flash_write+0x114>
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	e058      	b.n	8003d2e <flash_write+0x1c6>

		uint32_t writeFlag = FLASH_TYPEPROGRAM_BYTE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
			 	 writeFlag = lenToWrite == 2 ? FLASH_TYPEPROGRAM_HALFWORD : writeFlag;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d001      	beq.n	8003c8a <flash_write+0x122>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	e000      	b.n	8003c8c <flash_write+0x124>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
			 	 writeFlag = lenToWrite == 4 ?     FLASH_TYPEPROGRAM_WORD : writeFlag;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d001      	beq.n	8003c98 <flash_write+0x130>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	e000      	b.n	8003c9a <flash_write+0x132>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	61fb      	str	r3, [r7, #28]

		uint64_t data = 0;
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f04f 0400 	mov.w	r4, #0
 8003ca4:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(&data, &buffer[pos], lenToWrite);
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	18d1      	adds	r1, r2, r3
 8003cae:	f107 0310 	add.w	r3, r7, #16
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 f851 	bl	8006d5c <memcpy>

		ret = HAL_FLASH_Program(writeFlag, addr, data);
 8003cba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4623      	mov	r3, r4
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	69f8      	ldr	r0, [r7, #28]
 8003cc6:	f000 ff73 	bl	8004bb0 <HAL_FLASH_Program>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		ASSERT(ret == HAL_OK);
 8003cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <flash_write+0x17a>
 8003cd8:	2235      	movs	r2, #53	; 0x35
 8003cda:	4917      	ldr	r1, [pc, #92]	; (8003d38 <flash_write+0x1d0>)
 8003cdc:	4817      	ldr	r0, [pc, #92]	; (8003d3c <flash_write+0x1d4>)
 8003cde:	f003 fbc1 	bl	8007464 <iprintf>
		if(ret != HAL_OK)
 8003ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <flash_write+0x188>
			return -1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e01e      	b.n	8003d2e <flash_write+0x1c6>

		pos += (int32_t)lenToWrite;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
		addr += lenToWrite;
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
		len -= lenToWrite;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	607b      	str	r3, [r7, #4]

		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8003d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d0c:	f000 ffd6 	bl	8004cbc <FLASH_WaitForLastOperation>
 8003d10:	4603      	mov	r3, r0
 8003d12:	76fb      	strb	r3, [r7, #27]
		ASSERT(ret == HAL_OK);
 8003d14:	7efb      	ldrb	r3, [r7, #27]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <flash_write+0x1bc>
 8003d1a:	223e      	movs	r2, #62	; 0x3e
 8003d1c:	4906      	ldr	r1, [pc, #24]	; (8003d38 <flash_write+0x1d0>)
 8003d1e:	4807      	ldr	r0, [pc, #28]	; (8003d3c <flash_write+0x1d4>)
 8003d20:	f003 fba0 	bl	8007464 <iprintf>
		if(ret != HAL_OK)
 8003d24:	7efb      	ldrb	r3, [r7, #27]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f43f af6c 	beq.w	8003c04 <flash_write+0x9c>
			return pos;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}

	ret = HAL_FLASH_Lock();
	ASSERT(ret == HAL_OK);
	return pos;
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3734      	adds	r7, #52	; 0x34
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd90      	pop	{r4, r7, pc}
 8003d36:	bf00      	nop
 8003d38:	08008114 	.word	0x08008114
 8003d3c:	08008120 	.word	0x08008120

08003d40 <flash_read>:


int32_t flash_read(uint32_t addr, uint8_t buffer[], size_t len){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]

	if(len == 0) return -2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <flash_read+0x18>
 8003d52:	f06f 0301 	mvn.w	r3, #1
 8003d56:	e02a      	b.n	8003dae <flash_read+0x6e>
	if(buffer == NULL) return -2;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <flash_read+0x24>
 8003d5e:	f06f 0301 	mvn.w	r3, #1
 8003d62:	e024      	b.n	8003dae <flash_read+0x6e>
	if(addr < FLASH_BASE_ADDR) return -2;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6a:	d202      	bcs.n	8003d72 <flash_read+0x32>
 8003d6c:	f06f 0301 	mvn.w	r3, #1
 8003d70:	e01d      	b.n	8003dae <flash_read+0x6e>
	if(addr >= FLASH_MAX_ADDR) return -2;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003d78:	d302      	bcc.n	8003d80 <flash_read+0x40>
 8003d7a:	f06f 0301 	mvn.w	r3, #1
 8003d7e:	e016      	b.n	8003dae <flash_read+0x6e>

	size_t readBytes = len;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	617b      	str	r3, [r7, #20]
	if(addr + len > FLASH_MAX_ADDR){
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003d8e:	d907      	bls.n	8003da0 <flash_read+0x60>
		readBytes -= addr + len - FLASH_MAX_ADDR;
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 8003d9e:	617b      	str	r3, [r7, #20]
	}

	memcpy(buffer, (void*)addr, readBytes);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4619      	mov	r1, r3
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f002 ffd8 	bl	8006d5c <memcpy>

	return (int32_t)readBytes;
 8003dac:	697b      	ldr	r3, [r7, #20]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <flash_erase>:


int32_t flash_erase(uint32_t addrBeg, uint32_t addrEnd){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

	if(addrBeg < FLASH_BASE_ADDR) return -2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc8:	d202      	bcs.n	8003dd0 <flash_erase+0x18>
 8003dca:	f06f 0301 	mvn.w	r3, #1
 8003dce:	e12a      	b.n	8004026 <flash_erase+0x26e>
	if(addrBeg >= FLASH_MAX_ADDR) return -2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003dd6:	d302      	bcc.n	8003dde <flash_erase+0x26>
 8003dd8:	f06f 0301 	mvn.w	r3, #1
 8003ddc:	e123      	b.n	8004026 <flash_erase+0x26e>
	if(addrEnd < FLASH_BASE_ADDR) return -2;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de4:	d202      	bcs.n	8003dec <flash_erase+0x34>
 8003de6:	f06f 0301 	mvn.w	r3, #1
 8003dea:	e11c      	b.n	8004026 <flash_erase+0x26e>
	if(addrBeg >= addrEnd) return -2;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <flash_erase+0x42>
 8003df4:	f06f 0301 	mvn.w	r3, #1
 8003df8:	e115      	b.n	8004026 <flash_erase+0x26e>

	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8003dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dfe:	f000 ff5d 	bl	8004cbc <FLASH_WaitForLastOperation>
 8003e02:	4603      	mov	r3, r0
 8003e04:	72fb      	strb	r3, [r7, #11]
	ASSERT(ret == HAL_OK);
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <flash_erase+0x5e>
 8003e0c:	2263      	movs	r2, #99	; 0x63
 8003e0e:	4988      	ldr	r1, [pc, #544]	; (8004030 <flash_erase+0x278>)
 8003e10:	4888      	ldr	r0, [pc, #544]	; (8004034 <flash_erase+0x27c>)
 8003e12:	f003 fb27 	bl	8007464 <iprintf>
	if(ret != HAL_OK)
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <flash_erase+0x6a>
		return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	e101      	b.n	8004026 <flash_erase+0x26e>

	ret = HAL_FLASH_Unlock();
 8003e22:	f000 ff19 	bl	8004c58 <HAL_FLASH_Unlock>
 8003e26:	4603      	mov	r3, r0
 8003e28:	72fb      	strb	r3, [r7, #11]
	ASSERT(ret == HAL_OK);
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <flash_erase+0x82>
 8003e30:	2268      	movs	r2, #104	; 0x68
 8003e32:	497f      	ldr	r1, [pc, #508]	; (8004030 <flash_erase+0x278>)
 8003e34:	487f      	ldr	r0, [pc, #508]	; (8004034 <flash_erase+0x27c>)
 8003e36:	f003 fb15 	bl	8007464 <iprintf>
	if(ret != HAL_OK)
 8003e3a:	7afb      	ldrb	r3, [r7, #11]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <flash_erase+0x8e>
		return -1;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	e0ef      	b.n	8004026 <flash_erase+0x26e>

	uint32_t addrCur = addrBeg;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	617b      	str	r3, [r7, #20]
	int32_t sectNum = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
	while(addrCur < addrEnd && addrCur < FLASH_MAX_ADDR){
 8003e4e:	e0ce      	b.n	8003fee <flash_erase+0x236>

		uint32_t Sector = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
		sectNum++;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	3301      	adds	r3, #1
 8003e58:	613b      	str	r3, [r7, #16]
		if(0x08000000 <= addrCur && addrCur <= 0x08003FFF){
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e60:	d30a      	bcc.n	8003e78 <flash_erase+0xc0>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4a74      	ldr	r2, [pc, #464]	; (8004038 <flash_erase+0x280>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d806      	bhi.n	8003e78 <flash_erase+0xc0>
			Sector = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
			addrCur += 16*1024;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e0a3      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08004000 <= addrCur && addrCur <= 0x08007FFF) {
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <flash_erase+0x280>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d90a      	bls.n	8003e96 <flash_erase+0xde>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4a6e      	ldr	r2, [pc, #440]	; (800403c <flash_erase+0x284>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d806      	bhi.n	8003e96 <flash_erase+0xde>
			Sector = 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
			addrCur += 16*1024;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e094      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08008000 <= addrCur && addrCur <= 0x0800BFFF) {
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4a68      	ldr	r2, [pc, #416]	; (800403c <flash_erase+0x284>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d90a      	bls.n	8003eb4 <flash_erase+0xfc>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a67      	ldr	r2, [pc, #412]	; (8004040 <flash_erase+0x288>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d806      	bhi.n	8003eb4 <flash_erase+0xfc>
			Sector =  2;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	60fb      	str	r3, [r7, #12]
			addrCur += 16*1024;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e085      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x0800C000 <= addrCur && addrCur <= 0x0800FFFF) {
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4a62      	ldr	r2, [pc, #392]	; (8004040 <flash_erase+0x288>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d90a      	bls.n	8003ed2 <flash_erase+0x11a>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4a61      	ldr	r2, [pc, #388]	; (8004044 <flash_erase+0x28c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d806      	bhi.n	8003ed2 <flash_erase+0x11a>
			Sector =  3;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
			addrCur += 16*1024;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e076      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08010000 <= addrCur && addrCur <= 0x0801FFFF) {
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4a5b      	ldr	r2, [pc, #364]	; (8004044 <flash_erase+0x28c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d90a      	bls.n	8003ef0 <flash_erase+0x138>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a5a      	ldr	r2, [pc, #360]	; (8004048 <flash_erase+0x290>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d806      	bhi.n	8003ef0 <flash_erase+0x138>
			Sector =  4;
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]
			addrCur += 64*1024;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e067      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08020000 <= addrCur && addrCur <= 0x0803FFFF) {
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4a55      	ldr	r2, [pc, #340]	; (8004048 <flash_erase+0x290>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d90a      	bls.n	8003f0e <flash_erase+0x156>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4a54      	ldr	r2, [pc, #336]	; (800404c <flash_erase+0x294>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d806      	bhi.n	8003f0e <flash_erase+0x156>
			Sector =  5;
 8003f00:	2305      	movs	r3, #5
 8003f02:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e058      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08040000 <= addrCur && addrCur <= 0x0805FFFF) {
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a4e      	ldr	r2, [pc, #312]	; (800404c <flash_erase+0x294>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d90a      	bls.n	8003f2c <flash_erase+0x174>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	4a4d      	ldr	r2, [pc, #308]	; (8004050 <flash_erase+0x298>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d806      	bhi.n	8003f2c <flash_erase+0x174>
			Sector =  6;
 8003f1e:	2306      	movs	r3, #6
 8003f20:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e049      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08060000 <= addrCur && addrCur <= 0x0807FFFF) {
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4a48      	ldr	r2, [pc, #288]	; (8004050 <flash_erase+0x298>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d90a      	bls.n	8003f4a <flash_erase+0x192>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4a47      	ldr	r2, [pc, #284]	; (8004054 <flash_erase+0x29c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d806      	bhi.n	8003f4a <flash_erase+0x192>
			Sector =  7;
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e03a      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x08080000 <= addrCur && addrCur <= 0x0809FFFF) {
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4a41      	ldr	r2, [pc, #260]	; (8004054 <flash_erase+0x29c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d90a      	bls.n	8003f68 <flash_erase+0x1b0>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4a40      	ldr	r2, [pc, #256]	; (8004058 <flash_erase+0x2a0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d806      	bhi.n	8003f68 <flash_erase+0x1b0>
			Sector =  8;
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e02b      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x080A0000 <= addrCur && addrCur <= 0x080BFFFF) {
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <flash_erase+0x2a0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d90a      	bls.n	8003f86 <flash_erase+0x1ce>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <flash_erase+0x2a4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d806      	bhi.n	8003f86 <flash_erase+0x1ce>
			Sector =  9;
 8003f78:	2309      	movs	r3, #9
 8003f7a:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e01c      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x080C0000 <= addrCur && addrCur <= 0x080DFFFF) {
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4a34      	ldr	r2, [pc, #208]	; (800405c <flash_erase+0x2a4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d90a      	bls.n	8003fa4 <flash_erase+0x1ec>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4a33      	ldr	r2, [pc, #204]	; (8004060 <flash_erase+0x2a8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d806      	bhi.n	8003fa4 <flash_erase+0x1ec>
			Sector =  10;
 8003f96:	230a      	movs	r3, #10
 8003f98:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e00d      	b.n	8003fc0 <flash_erase+0x208>
		}
		else if(0x080E0000 <= addrCur && addrCur <= 0x080FFFFF) {
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <flash_erase+0x2a8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d909      	bls.n	8003fc0 <flash_erase+0x208>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003fb2:	d205      	bcs.n	8003fc0 <flash_erase+0x208>
			Sector =  11;
 8003fb4:	230b      	movs	r3, #11
 8003fb6:	60fb      	str	r3, [r7, #12]
			addrCur += 128*1024;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003fbe:	617b      	str	r3, [r7, #20]
		}


		FLASH_Erase_Sector(Sector, FLASH_VOLTAGE_RANGE_3);
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 ffa8 	bl	8004f18 <FLASH_Erase_Sector>

		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(10000);
 8003fc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8003fcc:	f000 fe76 	bl	8004cbc <FLASH_WaitForLastOperation>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	72bb      	strb	r3, [r7, #10]
		ASSERT(ret == HAL_OK);
 8003fd4:	7abb      	ldrb	r3, [r7, #10]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <flash_erase+0x22c>
 8003fda:	22a7      	movs	r2, #167	; 0xa7
 8003fdc:	4914      	ldr	r1, [pc, #80]	; (8004030 <flash_erase+0x278>)
 8003fde:	4815      	ldr	r0, [pc, #84]	; (8004034 <flash_erase+0x27c>)
 8003fe0:	f003 fa40 	bl	8007464 <iprintf>
		if(ret != HAL_OK)
 8003fe4:	7abb      	ldrb	r3, [r7, #10]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <flash_erase+0x236>
			return sectNum;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	e01b      	b.n	8004026 <flash_erase+0x26e>
	while(addrCur < addrEnd && addrCur < FLASH_MAX_ADDR){
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d204      	bcs.n	8004000 <flash_erase+0x248>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8003ffc:	f4ff af28 	bcc.w	8003e50 <flash_erase+0x98>
	}

	ret = HAL_FLASH_Lock();
 8004000:	f000 fe4c 	bl	8004c9c <HAL_FLASH_Lock>
 8004004:	4603      	mov	r3, r0
 8004006:	72fb      	strb	r3, [r7, #11]
	ASSERT(ret == HAL_OK);
 8004008:	7afb      	ldrb	r3, [r7, #11]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <flash_erase+0x260>
 800400e:	22ad      	movs	r2, #173	; 0xad
 8004010:	4907      	ldr	r1, [pc, #28]	; (8004030 <flash_erase+0x278>)
 8004012:	4808      	ldr	r0, [pc, #32]	; (8004034 <flash_erase+0x27c>)
 8004014:	f003 fa26 	bl	8007464 <iprintf>
	if(ret != HAL_OK)
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <flash_erase+0x26c>
		return -1;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	e000      	b.n	8004026 <flash_erase+0x26e>

	return sectNum;
 8004024:	693b      	ldr	r3, [r7, #16]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	08008114 	.word	0x08008114
 8004034:	08008120 	.word	0x08008120
 8004038:	08003fff 	.word	0x08003fff
 800403c:	08007fff 	.word	0x08007fff
 8004040:	0800bfff 	.word	0x0800bfff
 8004044:	0800ffff 	.word	0x0800ffff
 8004048:	0801ffff 	.word	0x0801ffff
 800404c:	0803ffff 	.word	0x0803ffff
 8004050:	0805ffff 	.word	0x0805ffff
 8004054:	0807ffff 	.word	0x0807ffff
 8004058:	0809ffff 	.word	0x0809ffff
 800405c:	080bffff 	.word	0x080bffff
 8004060:	080dffff 	.word	0x080dffff

08004064 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	; 0x30
 8004068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406a:	f107 031c 	add.w	r3, r7, #28
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	4b66      	ldr	r3, [pc, #408]	; (8004218 <MX_GPIO_Init+0x1b4>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a65      	ldr	r2, [pc, #404]	; (8004218 <MX_GPIO_Init+0x1b4>)
 8004084:	f043 0310 	orr.w	r3, r3, #16
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b63      	ldr	r3, [pc, #396]	; (8004218 <MX_GPIO_Init+0x1b4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <MX_GPIO_Init+0x1b4>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b5c      	ldr	r3, [pc, #368]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	4b58      	ldr	r3, [pc, #352]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a57      	ldr	r2, [pc, #348]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b55      	ldr	r3, [pc, #340]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a50      	ldr	r2, [pc, #320]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4a49      	ldr	r2, [pc, #292]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	6313      	str	r3, [r2, #48]	; 0x30
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <MX_GPIO_Init+0x1b4>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	4b43      	ldr	r3, [pc, #268]	; (8004218 <MX_GPIO_Init+0x1b4>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	4a42      	ldr	r2, [pc, #264]	; (8004218 <MX_GPIO_Init+0x1b4>)
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	6313      	str	r3, [r2, #48]	; 0x30
 8004116:	4b40      	ldr	r3, [pc, #256]	; (8004218 <MX_GPIO_Init+0x1b4>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8004122:	2200      	movs	r2, #0
 8004124:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004128:	483c      	ldr	r0, [pc, #240]	; (800421c <MX_GPIO_Init+0x1b8>)
 800412a:	f001 f8d7 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800412e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004132:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004134:	2303      	movs	r3, #3
 8004136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800413c:	f107 031c 	add.w	r3, r7, #28
 8004140:	4619      	mov	r1, r3
 8004142:	4837      	ldr	r0, [pc, #220]	; (8004220 <MX_GPIO_Init+0x1bc>)
 8004144:	f000 ff30 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8004148:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 800414c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800414e:	2303      	movs	r3, #3
 8004150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004156:	f107 031c 	add.w	r3, r7, #28
 800415a:	4619      	mov	r1, r3
 800415c:	4831      	ldr	r0, [pc, #196]	; (8004224 <MX_GPIO_Init+0x1c0>)
 800415e:	f000 ff23 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004162:	2303      	movs	r3, #3
 8004164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004166:	2303      	movs	r3, #3
 8004168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800416e:	f107 031c 	add.w	r3, r7, #28
 8004172:	4619      	mov	r1, r3
 8004174:	482c      	ldr	r0, [pc, #176]	; (8004228 <MX_GPIO_Init+0x1c4>)
 8004176:	f000 ff17 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800417e:	4b2b      	ldr	r3, [pc, #172]	; (800422c <MX_GPIO_Init+0x1c8>)
 8004180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004186:	f107 031c 	add.w	r3, r7, #28
 800418a:	4619      	mov	r1, r3
 800418c:	4828      	ldr	r0, [pc, #160]	; (8004230 <MX_GPIO_Init+0x1cc>)
 800418e:	f000 ff0b 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8004192:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 8004196:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004198:	2303      	movs	r3, #3
 800419a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	f107 031c 	add.w	r3, r7, #28
 80041a4:	4619      	mov	r1, r3
 80041a6:	4822      	ldr	r0, [pc, #136]	; (8004230 <MX_GPIO_Init+0x1cc>)
 80041a8:	f000 fefe 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80041ac:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80041b0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b2:	2303      	movs	r3, #3
 80041b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	4619      	mov	r1, r3
 80041c0:	481c      	ldr	r0, [pc, #112]	; (8004234 <MX_GPIO_Init+0x1d0>)
 80041c2:	f000 fef1 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80041c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80041ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041cc:	2303      	movs	r3, #3
 80041ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d4:	f107 031c 	add.w	r3, r7, #28
 80041d8:	4619      	mov	r1, r3
 80041da:	4810      	ldr	r0, [pc, #64]	; (800421c <MX_GPIO_Init+0x1b8>)
 80041dc:	f000 fee4 	bl	8004fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80041e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80041e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e6:	2301      	movs	r3, #1
 80041e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041f2:	f107 031c 	add.w	r3, r7, #28
 80041f6:	4619      	mov	r1, r3
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <MX_GPIO_Init+0x1b8>)
 80041fa:	f000 fed5 	bl	8004fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	210f      	movs	r1, #15
 8004202:	2006      	movs	r0, #6
 8004204:	f000 fc7b 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004208:	2006      	movs	r0, #6
 800420a:	f000 fc94 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 800420e:	bf00      	nop
 8004210:	3730      	adds	r7, #48	; 0x30
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	40020c00 	.word	0x40020c00
 8004220:	40021000 	.word	0x40021000
 8004224:	40020800 	.word	0x40020800
 8004228:	40021c00 	.word	0x40021c00
 800422c:	10110000 	.word	0x10110000
 8004230:	40020000 	.word	0x40020000
 8004234:	40020400 	.word	0x40020400

08004238 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800423e:	f000 fb11 	bl	8004864 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004242:	f000 f843 	bl	80042cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004246:	f7ff ff0d 	bl	8004064 <MX_GPIO_Init>
	MX_TIM13_Init();
 800424a:	f000 f9f7 	bl	800463c <MX_TIM13_Init>
	MX_USART3_UART_Init();
 800424e:	f000 fa53 	bl	80046f8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	cli_init();
 8004252:	f7fd fd5f 	bl	8001d14 <cli_init>
	PRINTLN("Periph Init Finished");
 8004256:	2260      	movs	r2, #96	; 0x60
 8004258:	4914      	ldr	r1, [pc, #80]	; (80042ac <main+0x74>)
 800425a:	4815      	ldr	r0, [pc, #84]	; (80042b0 <main+0x78>)
 800425c:	f003 f902 	bl	8007464 <iprintf>
	ASSERT(os_init("main", 10, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 8004260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <main+0x7c>)
 8004268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800426c:	210a      	movs	r1, #10
 800426e:	4812      	ldr	r0, [pc, #72]	; (80042b8 <main+0x80>)
 8004270:	f7fd fe92 	bl	8001f98 <os_init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <main+0x4c>
 800427a:	2261      	movs	r2, #97	; 0x61
 800427c:	490b      	ldr	r1, [pc, #44]	; (80042ac <main+0x74>)
 800427e:	480f      	ldr	r0, [pc, #60]	; (80042bc <main+0x84>)
 8004280:	f003 f8f0 	bl	8007464 <iprintf>
	os_scheduler_start();
 8004284:	f7fe ff9a 	bl	80031bc <os_scheduler_start>

	PRINTLN("Init OS finished");
 8004288:	2264      	movs	r2, #100	; 0x64
 800428a:	4908      	ldr	r1, [pc, #32]	; (80042ac <main+0x74>)
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <main+0x88>)
 800428e:	f003 f8e9 	bl	8007464 <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	PRINTLN("0x%08X, 0x%08X", (int)LFS_BASE_ADDR, (int)(*((uint32_t*)LFS_BASE_ADDR)));
 8004292:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <main+0x8c>)
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <main+0x8c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	226a      	movs	r2, #106	; 0x6a
 800429e:	4903      	ldr	r1, [pc, #12]	; (80042ac <main+0x74>)
 80042a0:	4809      	ldr	r0, [pc, #36]	; (80042c8 <main+0x90>)
 80042a2:	f003 f8df 	bl	8007464 <iprintf>
	HAL_FLASH_Lock();*/

	//HAL_FLASH
	while(1)
	{
		cli_process();
 80042a6:	f7fd fd45 	bl	8001d34 <cli_process>
 80042aa:	e7fc      	b.n	80042a6 <main+0x6e>
 80042ac:	0800813c 	.word	0x0800813c
 80042b0:	08008144 	.word	0x08008144
 80042b4:	08008168 	.word	0x08008168
 80042b8:	08008170 	.word	0x08008170
 80042bc:	08008178 	.word	0x08008178
 80042c0:	08008194 	.word	0x08008194
 80042c4:	08040000 	.word	0x08040000
 80042c8:	080081b4 	.word	0x080081b4

080042cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b094      	sub	sp, #80	; 0x50
 80042d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042d2:	f107 0320 	add.w	r3, r7, #32
 80042d6:	2230      	movs	r2, #48	; 0x30
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f002 fd49 	bl	8006d72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042e0:	f107 030c 	add.w	r3, r7, #12
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <SystemClock_Config+0xc8>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	4a26      	ldr	r2, [pc, #152]	; (8004394 <SystemClock_Config+0xc8>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004300:	4b24      	ldr	r3, [pc, #144]	; (8004394 <SystemClock_Config+0xc8>)
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800430c:	2300      	movs	r3, #0
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	4b21      	ldr	r3, [pc, #132]	; (8004398 <SystemClock_Config+0xcc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a20      	ldr	r2, [pc, #128]	; (8004398 <SystemClock_Config+0xcc>)
 8004316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <SystemClock_Config+0xcc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004328:	2302      	movs	r3, #2
 800432a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800432c:	2301      	movs	r3, #1
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004330:	2310      	movs	r3, #16
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004334:	2302      	movs	r3, #2
 8004336:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004338:	2300      	movs	r3, #0
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800433c:	2308      	movs	r3, #8
 800433e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8004340:	2354      	movs	r3, #84	; 0x54
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004344:	2302      	movs	r3, #2
 8004346:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004348:	2307      	movs	r3, #7
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800434c:	f107 0320 	add.w	r3, r7, #32
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f801 	bl	8005358 <HAL_RCC_OscConfig>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800435c:	f000 f81e 	bl	800439c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004360:	230f      	movs	r3, #15
 8004362:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004364:	2302      	movs	r3, #2
 8004366:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800436c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004370:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004376:	f107 030c 	add.w	r3, r7, #12
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f001 fa5b 	bl	8005838 <HAL_RCC_ClockConfig>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8004388:	f000 f808 	bl	800439c <Error_Handler>
	}
}
 800438c:	bf00      	nop
 800438e:	3750      	adds	r7, #80	; 0x50
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40023800 	.word	0x40023800
 8004398:	40007000 	.word	0x40007000

0800439c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_MspInit+0x90>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	4a20      	ldr	r2, [pc, #128]	; (800443c <HAL_MspInit+0x90>)
 80043bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c0:	6453      	str	r3, [r2, #68]	; 0x44
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_MspInit+0x90>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_MspInit+0x90>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a19      	ldr	r2, [pc, #100]	; (800443c <HAL_MspInit+0x90>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_MspInit+0x90>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	210f      	movs	r1, #15
 80043ee:	f06f 000b 	mvn.w	r0, #11
 80043f2:	f000 fb84 	bl	8004afe <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	210f      	movs	r1, #15
 80043fa:	f06f 000a 	mvn.w	r0, #10
 80043fe:	f000 fb7e 	bl	8004afe <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	210f      	movs	r1, #15
 8004406:	f06f 0009 	mvn.w	r0, #9
 800440a:	f000 fb78 	bl	8004afe <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	210f      	movs	r1, #15
 8004412:	f06f 0004 	mvn.w	r0, #4
 8004416:	f000 fb72 	bl	8004afe <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800441a:	2200      	movs	r2, #0
 800441c:	210f      	movs	r1, #15
 800441e:	f06f 0003 	mvn.w	r0, #3
 8004422:	f000 fb6c 	bl	8004afe <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	210f      	movs	r1, #15
 800442a:	f06f 0001 	mvn.w	r0, #1
 800442e:	f000 fb66 	bl	8004afe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004452:	e7fe      	b.n	8004452 <HardFault_Handler+0x4>

08004454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004458:	e7fe      	b.n	8004458 <MemManage_Handler+0x4>

0800445a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800445a:	b480      	push	{r7}
 800445c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800445e:	e7fe      	b.n	800445e <BusFault_Handler+0x4>

08004460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004464:	e7fe      	b.n	8004464 <UsageFault_Handler+0x4>

08004466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004486:	f000 fa3f 	bl	8004908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 800448a:	2001      	movs	r0, #1
 800448c:	f7ff fae6 	bl	8003a5c <os_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}

08004494 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004498:	2001      	movs	r0, #1
 800449a:	f000 ff39 	bl	8005310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044a8:	4802      	ldr	r0, [pc, #8]	; (80044b4 <USART3_IRQHandler+0x10>)
 80044aa:	f001 fe05 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20014400 	.word	0x20014400

080044b8 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;


int __io_putchar(int ch){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80044c0:	1d39      	adds	r1, r7, #4
 80044c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c6:	2201      	movs	r2, #1
 80044c8:	4803      	ldr	r0, [pc, #12]	; (80044d8 <__io_putchar+0x20>)
 80044ca:	f001 fd06 	bl	8005eda <HAL_UART_Transmit>
	return 0;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20014400 	.word	0x20014400

080044dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e00a      	b.n	8004504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044ee:	f3af 8000 	nop.w
 80044f2:	4601      	mov	r1, r0
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	60ba      	str	r2, [r7, #8]
 80044fa:	b2ca      	uxtb	r2, r1
 80044fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	3301      	adds	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	dbf0      	blt.n	80044ee <_read+0x12>
	}

return len;
 800450c:	687b      	ldr	r3, [r7, #4]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e009      	b.n	800453c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	60ba      	str	r2, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ffc1 	bl	80044b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3301      	adds	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	dbf1      	blt.n	8004528 <_write+0x12>
	}
	return len;
 8004544:	687b      	ldr	r3, [r7, #4]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_close>:

int _close(int file)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
	return -1;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004576:	605a      	str	r2, [r3, #4]
	return 0;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <_isatty>:

int _isatty(int file)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
	return 1;
 800458e:	2301      	movs	r3, #1
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
	return 0;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <_sbrk+0x50>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <_sbrk+0x16>
		heap_end = &end;
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <_sbrk+0x50>)
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <_sbrk+0x54>)
 80045cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <_sbrk+0x50>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <_sbrk+0x50>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	466a      	mov	r2, sp
 80045de:	4293      	cmp	r3, r2
 80045e0:	d907      	bls.n	80045f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80045e2:	f002 fb65 	bl	8006cb0 <__errno>
 80045e6:	4602      	mov	r2, r0
 80045e8:	230c      	movs	r3, #12
 80045ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e006      	b.n	8004600 <_sbrk+0x48>
	}

	heap_end += incr;
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <_sbrk+0x50>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	4a03      	ldr	r2, [pc, #12]	; (8004608 <_sbrk+0x50>)
 80045fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20014374 	.word	0x20014374
 800460c:	20014468 	.word	0x20014468

08004610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <SystemInit+0x28>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <SystemInit+0x28>)
 800461c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004624:	4b04      	ldr	r3, [pc, #16]	; (8004638 <SystemInit+0x28>)
 8004626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800462a:	609a      	str	r2, [r3, #8]
#endif
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <MX_TIM13_Init+0x50>)
 8004642:	4a13      	ldr	r2, [pc, #76]	; (8004690 <MX_TIM13_Init+0x54>)
 8004644:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <MX_TIM13_Init+0x50>)
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <MX_TIM13_Init+0x50>)
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0xFFFF;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <MX_TIM13_Init+0x50>)
 8004654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004658:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <MX_TIM13_Init+0x50>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <MX_TIM13_Init+0x50>)
 8004662:	2200      	movs	r2, #0
 8004664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004666:	4809      	ldr	r0, [pc, #36]	; (800468c <MX_TIM13_Init+0x50>)
 8004668:	f001 fad8 	bl	8005c1c <HAL_TIM_Base_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004672:	f7ff fe93 	bl	800439c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 8004676:	2108      	movs	r1, #8
 8004678:	4804      	ldr	r0, [pc, #16]	; (800468c <MX_TIM13_Init+0x50>)
 800467a:	f001 fafa 	bl	8005c72 <HAL_TIM_OnePulse_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004684:	f7ff fe8a 	bl	800439c <Error_Handler>
  }

}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200143c0 	.word	0x200143c0
 8004690:	40001c00 	.word	0x40001c00

08004694 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <HAL_TIM_Base_MspInit+0x3c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10d      	bne.n	80046c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_TIM_Base_MspInit+0x40>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <HAL_TIM_Base_MspInit+0x40>)
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	6413      	str	r3, [r2, #64]	; 0x40
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_TIM_Base_MspInit+0x40>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40001c00 	.word	0x40001c00
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	if(huart == &USART_CLI){
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_UART_RxCpltCallback+0x1c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_UART_RxCpltCallback+0x14>
		cli_rcv_char_cb_irq();
 80046e8:	f7fd fafe 	bl	8001ce8 <cli_rcv_char_cb_irq>
	}
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20014400 	.word	0x20014400

080046f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <MX_USART3_UART_Init+0x50>)
 8004700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 8004704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 8004712:	2200      	movs	r2, #0
 8004714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 8004718:	2200      	movs	r2, #0
 800471a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 800471e:	220c      	movs	r2, #12
 8004720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 800472a:	2200      	movs	r2, #0
 800472c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800472e:	4805      	ldr	r0, [pc, #20]	; (8004744 <MX_USART3_UART_Init+0x4c>)
 8004730:	f001 fb86 	bl	8005e40 <HAL_UART_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800473a:	f7ff fe2f 	bl	800439c <Error_Handler>
  }

}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20014400 	.word	0x20014400
 8004748:	40004800 	.word	0x40004800

0800474c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a26      	ldr	r2, [pc, #152]	; (8004804 <HAL_UART_MspInit+0xb8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d145      	bne.n	80047fa <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_UART_MspInit+0xbc>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	4a24      	ldr	r2, [pc, #144]	; (8004808 <HAL_UART_MspInit+0xbc>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6413      	str	r3, [r2, #64]	; 0x40
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_UART_MspInit+0xbc>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_UART_MspInit+0xbc>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_UART_MspInit+0xbc>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6313      	str	r3, [r2, #48]	; 0x30
 800479a:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <HAL_UART_MspInit+0xbc>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ac:	2302      	movs	r3, #2
 80047ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b4:	2303      	movs	r3, #3
 80047b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047b8:	2307      	movs	r3, #7
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4619      	mov	r1, r3
 80047c2:	4812      	ldr	r0, [pc, #72]	; (800480c <HAL_UART_MspInit+0xc0>)
 80047c4:	f000 fbf0 	bl	8004fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80047c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d6:	2303      	movs	r3, #3
 80047d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047da:	2307      	movs	r3, #7
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	4619      	mov	r1, r3
 80047e4:	4809      	ldr	r0, [pc, #36]	; (800480c <HAL_UART_MspInit+0xc0>)
 80047e6:	f000 fbdf 	bl	8004fa8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 80047ea:	2200      	movs	r2, #0
 80047ec:	210f      	movs	r1, #15
 80047ee:	2027      	movs	r0, #39	; 0x27
 80047f0:	f000 f985 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047f4:	2027      	movs	r0, #39	; 0x27
 80047f6:	f000 f99e 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047fa:	bf00      	nop
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40004800 	.word	0x40004800
 8004808:	40023800 	.word	0x40023800
 800480c:	40020800 	.word	0x40020800

08004810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004848 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004814:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004816:	e003      	b.n	8004820 <LoopCopyDataInit>

08004818 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800481a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800481c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800481e:	3104      	adds	r1, #4

08004820 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004824:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004826:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004828:	d3f6      	bcc.n	8004818 <CopyDataInit>
  ldr  r2, =_sbss
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800482c:	e002      	b.n	8004834 <LoopFillZerobss>

0800482e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800482e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004830:	f842 3b04 	str.w	r3, [r2], #4

08004834 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004836:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004838:	d3f9      	bcc.n	800482e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800483a:	f7ff fee9 	bl	8004610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800483e:	f002 fa3d 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004842:	f7ff fcf9 	bl	8004238 <main>
  bx  lr    
 8004846:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004848:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800484c:	080083b4 	.word	0x080083b4
  ldr  r0, =_sdata
 8004850:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004854:	200002b4 	.word	0x200002b4
  ldr  r2, =_sbss
 8004858:	200002b8 	.word	0x200002b8
  ldr  r3, = _ebss
 800485c:	20014468 	.word	0x20014468

08004860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <ADC_IRQHandler>
	...

08004864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_Init+0x40>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0d      	ldr	r2, [pc, #52]	; (80048a4 <HAL_Init+0x40>)
 800486e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_Init+0x40>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <HAL_Init+0x40>)
 800487a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800487e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_Init+0x40>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <HAL_Init+0x40>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488c:	2003      	movs	r0, #3
 800488e:	f000 f92b 	bl	8004ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004892:	200f      	movs	r0, #15
 8004894:	f000 f808 	bl	80048a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004898:	f7ff fd88 	bl	80043ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00

080048a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_InitTick+0x54>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_InitTick+0x58>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048be:	fbb3 f3f1 	udiv	r3, r3, r1
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f943 	bl	8004b52 <HAL_SYSTICK_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00e      	b.n	80048f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b0f      	cmp	r3, #15
 80048da:	d80a      	bhi.n	80048f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048dc:	2200      	movs	r2, #0
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	f000 f90b 	bl	8004afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048e8:	4a06      	ldr	r2, [pc, #24]	; (8004904 <HAL_InitTick+0x5c>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	200000d8 	.word	0x200000d8
 8004900:	200000e0 	.word	0x200000e0
 8004904:	200000dc 	.word	0x200000dc

08004908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_IncTick+0x20>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_IncTick+0x24>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4413      	add	r3, r2
 8004918:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_IncTick+0x24>)
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	200000e0 	.word	0x200000e0
 800492c:	20014440 	.word	0x20014440

08004930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return uwTick;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_GetTick+0x14>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20014440 	.word	0x20014440

08004948 <__NVIC_SetPriorityGrouping>:
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004964:	4013      	ands	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497a:	4a04      	ldr	r2, [pc, #16]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	60d3      	str	r3, [r2, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <__NVIC_GetPriorityGrouping>:
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 0307 	and.w	r3, r3, #7
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_EnableIRQ>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db0b      	blt.n	80049d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	f003 021f 	and.w	r2, r3, #31
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <__NVIC_EnableIRQ+0x38>)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2001      	movs	r0, #1
 80049ce:	fa00 f202 	lsl.w	r2, r0, r2
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000e100 	.word	0xe000e100

080049e8 <__NVIC_SetPriority>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	; (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	; (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <NVIC_EncodePriority>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	bf28      	it	cs
 8004a5a:	2304      	movcs	r3, #4
 8004a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d902      	bls.n	8004a6c <NVIC_EncodePriority+0x30>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3b03      	subs	r3, #3
 8004a6a:	e000      	b.n	8004a6e <NVIC_EncodePriority+0x32>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	401a      	ands	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a84:	f04f 31ff 	mov.w	r1, #4294967295
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43d9      	mvns	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	4313      	orrs	r3, r2
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d301      	bcc.n	8004aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00f      	b.n	8004ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <SysTick_Config+0x40>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f7ff ff8e 	bl	80049e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <SysTick_Config+0x40>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <SysTick_Config+0x40>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000e010 	.word	0xe000e010

08004ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff29 	bl	8004948 <__NVIC_SetPriorityGrouping>
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b10:	f7ff ff3e 	bl	8004990 <__NVIC_GetPriorityGrouping>
 8004b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff ff8e 	bl	8004a3c <NVIC_EncodePriority>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff5d 	bl	80049e8 <__NVIC_SetPriority>
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff31 	bl	80049ac <__NVIC_EnableIRQ>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffa2 	bl	8004aa4 <SysTick_Config>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d004      	beq.n	8004b88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2280      	movs	r2, #128	; 0x80
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e00c      	b.n	8004ba2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2205      	movs	r2, #5
 8004b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bc2:	4b23      	ldr	r3, [pc, #140]	; (8004c50 <HAL_FLASH_Program+0xa0>)
 8004bc4:	7e1b      	ldrb	r3, [r3, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_FLASH_Program+0x1e>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e03b      	b.n	8004c46 <HAL_FLASH_Program+0x96>
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_FLASH_Program+0xa0>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004bd8:	f000 f870 	bl	8004cbc <FLASH_WaitForLastOperation>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d12b      	bne.n	8004c3e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004bec:	783b      	ldrb	r3, [r7, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68b8      	ldr	r0, [r7, #8]
 8004bf2:	f000 f919 	bl	8004e28 <FLASH_Program_Byte>
 8004bf6:	e016      	b.n	8004c26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004bfe:	883b      	ldrh	r3, [r7, #0]
 8004c00:	4619      	mov	r1, r3
 8004c02:	68b8      	ldr	r0, [r7, #8]
 8004c04:	f000 f8ec 	bl	8004de0 <FLASH_Program_HalfWord>
 8004c08:	e00d      	b.n	8004c26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d105      	bne.n	8004c1c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	68b8      	ldr	r0, [r7, #8]
 8004c16:	f000 f8c1 	bl	8004d9c <FLASH_Program_Word>
 8004c1a:	e004      	b.n	8004c26 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c20:	68b8      	ldr	r0, [r7, #8]
 8004c22:	f000 f88b 	bl	8004d3c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c2a:	f000 f847 	bl	8004cbc <FLASH_WaitForLastOperation>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_FLASH_Program+0xa4>)
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_FLASH_Program+0xa4>)
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c3e:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <HAL_FLASH_Program+0xa0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20014444 	.word	0x20014444
 8004c54:	40023c00 	.word	0x40023c00

08004c58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_FLASH_Unlock+0x38>)
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da0b      	bge.n	8004c82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_FLASH_Unlock+0x38>)
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <HAL_FLASH_Unlock+0x3c>)
 8004c6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <HAL_FLASH_Unlock+0x38>)
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <HAL_FLASH_Unlock+0x40>)
 8004c74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_FLASH_Unlock+0x38>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	da01      	bge.n	8004c82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004c82:	79fb      	ldrb	r3, [r7, #7]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40023c00 	.word	0x40023c00
 8004c94:	45670123 	.word	0x45670123
 8004c98:	cdef89ab 	.word	0xcdef89ab

08004c9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_FLASH_Lock+0x1c>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <HAL_FLASH_Lock+0x1c>)
 8004ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004caa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40023c00 	.word	0x40023c00

08004cbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <FLASH_WaitForLastOperation+0x78>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cce:	f7ff fe2f 	bl	8004930 <HAL_GetTick>
 8004cd2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004cd4:	e010      	b.n	8004cf8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d00c      	beq.n	8004cf8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <FLASH_WaitForLastOperation+0x38>
 8004ce4:	f7ff fe24 	bl	8004930 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d201      	bcs.n	8004cf8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e019      	b.n	8004d2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <FLASH_WaitForLastOperation+0x7c>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e8      	bne.n	8004cd6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <FLASH_WaitForLastOperation+0x7c>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <FLASH_WaitForLastOperation+0x7c>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <FLASH_WaitForLastOperation+0x7c>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004d22:	f000 f8a3 	bl	8004e6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
  
}  
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20014444 	.word	0x20014444
 8004d38:	40023c00 	.word	0x40023c00

08004d3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004d3c:	b490      	push	{r4, r7}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d48:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <FLASH_Program_DoubleWord+0x5c>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <FLASH_Program_DoubleWord+0x5c>)
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <FLASH_Program_DoubleWord+0x5c>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <FLASH_Program_DoubleWord+0x5c>)
 8004d5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d60:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <FLASH_Program_DoubleWord+0x5c>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <FLASH_Program_DoubleWord+0x5c>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004d72:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004d76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	0013      	movs	r3, r2
 8004d84:	2400      	movs	r4, #0
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	3204      	adds	r2, #4
 8004d8a:	6013      	str	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc90      	pop	{r4, r7}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40023c00 	.word	0x40023c00

08004d9c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <FLASH_Program_Word+0x40>)
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <FLASH_Program_Word+0x40>)
 8004dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <FLASH_Program_Word+0x40>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <FLASH_Program_Word+0x40>)
 8004db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <FLASH_Program_Word+0x40>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4a06      	ldr	r2, [pc, #24]	; (8004ddc <FLASH_Program_Word+0x40>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40023c00 	.word	0x40023c00

08004de0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <FLASH_Program_HalfWord+0x44>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <FLASH_Program_HalfWord+0x44>)
 8004df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <FLASH_Program_HalfWord+0x44>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <FLASH_Program_HalfWord+0x44>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <FLASH_Program_HalfWord+0x44>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <FLASH_Program_HalfWord+0x44>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	801a      	strh	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40023c00 	.word	0x40023c00

08004e28 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <FLASH_Program_Byte+0x40>)
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	4a0b      	ldr	r2, [pc, #44]	; (8004e68 <FLASH_Program_Byte+0x40>)
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <FLASH_Program_Byte+0x40>)
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <FLASH_Program_Byte+0x40>)
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e48:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <FLASH_Program_Byte+0x40>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	4a06      	ldr	r2, [pc, #24]	; (8004e68 <FLASH_Program_Byte+0x40>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	701a      	strb	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40023c00 	.word	0x40023c00

08004e6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004e86:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004e88:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f043 0308 	orr.w	r3, r3, #8
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004ea4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004ec2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f043 0302 	orr.w	r3, r3, #2
 8004ede:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004ee0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f043 0320 	orr.w	r3, r3, #32
 8004efc:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <FLASH_SetErrorCode+0xa8>)
 8004efe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004f00:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <FLASH_SetErrorCode+0xa4>)
 8004f02:	2202      	movs	r2, #2
 8004f04:	60da      	str	r2, [r3, #12]
  }
}
 8004f06:	bf00      	nop
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40023c00 	.word	0x40023c00
 8004f14:	20014444 	.word	0x20014444

08004f18 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e010      	b.n	8004f56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d103      	bne.n	8004f42 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e009      	b.n	8004f56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d103      	bne.n	8004f50 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e002      	b.n	8004f56 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	490f      	ldr	r1, [pc, #60]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f96:	6113      	str	r3, [r2, #16]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e16b      	b.n	800529c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	f040 815a 	bne.w	8005296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d00b      	beq.n	8005002 <HAL_GPIO_Init+0x5a>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d007      	beq.n	8005002 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ff6:	2b11      	cmp	r3, #17
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b12      	cmp	r3, #18
 8005000:	d130      	bne.n	8005064 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 0201 	and.w	r2, r3, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	2203      	movs	r2, #3
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d003      	beq.n	80050a4 <HAL_GPIO_Init+0xfc>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d123      	bne.n	80050ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	08da      	lsrs	r2, r3, #3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3208      	adds	r2, #8
 80050ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	220f      	movs	r2, #15
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	08da      	lsrs	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3208      	adds	r2, #8
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 0203 	and.w	r2, r3, #3
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80b4 	beq.w	8005296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <HAL_GPIO_Init+0x308>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <HAL_GPIO_Init+0x308>)
 8005138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800513c:	6453      	str	r3, [r2, #68]	; 0x44
 800513e:	4b5c      	ldr	r3, [pc, #368]	; (80052b0 <HAL_GPIO_Init+0x308>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800514a:	4a5a      	ldr	r2, [pc, #360]	; (80052b4 <HAL_GPIO_Init+0x30c>)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	3302      	adds	r3, #2
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a51      	ldr	r2, [pc, #324]	; (80052b8 <HAL_GPIO_Init+0x310>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d02b      	beq.n	80051ce <HAL_GPIO_Init+0x226>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a50      	ldr	r2, [pc, #320]	; (80052bc <HAL_GPIO_Init+0x314>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d025      	beq.n	80051ca <HAL_GPIO_Init+0x222>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a4f      	ldr	r2, [pc, #316]	; (80052c0 <HAL_GPIO_Init+0x318>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01f      	beq.n	80051c6 <HAL_GPIO_Init+0x21e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a4e      	ldr	r2, [pc, #312]	; (80052c4 <HAL_GPIO_Init+0x31c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d019      	beq.n	80051c2 <HAL_GPIO_Init+0x21a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a4d      	ldr	r2, [pc, #308]	; (80052c8 <HAL_GPIO_Init+0x320>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_GPIO_Init+0x216>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a4c      	ldr	r2, [pc, #304]	; (80052cc <HAL_GPIO_Init+0x324>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00d      	beq.n	80051ba <HAL_GPIO_Init+0x212>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a4b      	ldr	r2, [pc, #300]	; (80052d0 <HAL_GPIO_Init+0x328>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <HAL_GPIO_Init+0x20e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a4a      	ldr	r2, [pc, #296]	; (80052d4 <HAL_GPIO_Init+0x32c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <HAL_GPIO_Init+0x20a>
 80051ae:	2307      	movs	r3, #7
 80051b0:	e00e      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051b2:	2308      	movs	r3, #8
 80051b4:	e00c      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051b6:	2306      	movs	r3, #6
 80051b8:	e00a      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051ba:	2305      	movs	r3, #5
 80051bc:	e008      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051be:	2304      	movs	r3, #4
 80051c0:	e006      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051c2:	2303      	movs	r3, #3
 80051c4:	e004      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e002      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_GPIO_Init+0x228>
 80051ce:	2300      	movs	r3, #0
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	f002 0203 	and.w	r2, r2, #3
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	4093      	lsls	r3, r2
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051e0:	4934      	ldr	r1, [pc, #208]	; (80052b4 <HAL_GPIO_Init+0x30c>)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	3302      	adds	r3, #2
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ee:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_GPIO_Init+0x330>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005212:	4a31      	ldr	r2, [pc, #196]	; (80052d8 <HAL_GPIO_Init+0x330>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005218:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <HAL_GPIO_Init+0x330>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800523c:	4a26      	ldr	r2, [pc, #152]	; (80052d8 <HAL_GPIO_Init+0x330>)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005242:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_GPIO_Init+0x330>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_GPIO_Init+0x330>)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_GPIO_Init+0x330>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005290:	4a11      	ldr	r2, [pc, #68]	; (80052d8 <HAL_GPIO_Init+0x330>)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3301      	adds	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	f67f ae90 	bls.w	8004fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052a4:	bf00      	nop
 80052a6:	3724      	adds	r7, #36	; 0x24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40013800 	.word	0x40013800
 80052b8:	40020000 	.word	0x40020000
 80052bc:	40020400 	.word	0x40020400
 80052c0:	40020800 	.word	0x40020800
 80052c4:	40020c00 	.word	0x40020c00
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40021400 	.word	0x40021400
 80052d0:	40021800 	.word	0x40021800
 80052d4:	40021c00 	.word	0x40021c00
 80052d8:	40013c00 	.word	0x40013c00

080052dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
 80052e8:	4613      	mov	r3, r2
 80052ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052ec:	787b      	ldrb	r3, [r7, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052f2:	887a      	ldrh	r2, [r7, #2]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052f8:	e003      	b.n	8005302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	041a      	lsls	r2, r3, #16
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005326:	4a05      	ldr	r2, [pc, #20]	; (800533c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f806 	bl	8005340 <HAL_GPIO_EXTI_Callback>
  }
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40013c00 	.word	0x40013c00

08005340 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e25b      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d075      	beq.n	8005462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005376:	4ba3      	ldr	r3, [pc, #652]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d00c      	beq.n	800539c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005382:	4ba0      	ldr	r3, [pc, #640]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538a:	2b08      	cmp	r3, #8
 800538c:	d112      	bne.n	80053b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538e:	4b9d      	ldr	r3, [pc, #628]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800539a:	d10b      	bne.n	80053b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	4b99      	ldr	r3, [pc, #612]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05b      	beq.n	8005460 <HAL_RCC_OscConfig+0x108>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d157      	bne.n	8005460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e236      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x74>
 80053be:	4b91      	ldr	r3, [pc, #580]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a90      	ldr	r2, [pc, #576]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e01d      	b.n	8005408 <HAL_RCC_OscConfig+0xb0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x98>
 80053d6:	4b8b      	ldr	r3, [pc, #556]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a8a      	ldr	r2, [pc, #552]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b88      	ldr	r3, [pc, #544]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a87      	ldr	r2, [pc, #540]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0xb0>
 80053f0:	4b84      	ldr	r3, [pc, #528]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a83      	ldr	r2, [pc, #524]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b81      	ldr	r3, [pc, #516]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a80      	ldr	r2, [pc, #512]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7ff fa8e 	bl	8004930 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005418:	f7ff fa8a 	bl	8004930 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	; 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e1fb      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542a:	4b76      	ldr	r3, [pc, #472]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0xc0>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7ff fa7a 	bl	8004930 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005440:	f7ff fa76 	bl	8004930 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e1e7      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005452:	4b6c      	ldr	r3, [pc, #432]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0xe8>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d063      	beq.n	8005536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546e:	4b65      	ldr	r3, [pc, #404]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547a:	4b62      	ldr	r3, [pc, #392]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005482:	2b08      	cmp	r3, #8
 8005484:	d11c      	bne.n	80054c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005486:	4b5f      	ldr	r3, [pc, #380]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d116      	bne.n	80054c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005492:	4b5c      	ldr	r3, [pc, #368]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_RCC_OscConfig+0x152>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d001      	beq.n	80054aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e1bb      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054aa:	4b56      	ldr	r3, [pc, #344]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4952      	ldr	r1, [pc, #328]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054be:	e03a      	b.n	8005536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d020      	beq.n	800550a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c8:	4b4f      	ldr	r3, [pc, #316]	; (8005608 <HAL_RCC_OscConfig+0x2b0>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7ff fa2f 	bl	8004930 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d6:	f7ff fa2b 	bl	8004930 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e19c      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e8:	4b46      	ldr	r3, [pc, #280]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f4:	4b43      	ldr	r3, [pc, #268]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4940      	ldr	r1, [pc, #256]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]
 8005508:	e015      	b.n	8005536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <HAL_RCC_OscConfig+0x2b0>)
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7ff fa0e 	bl	8004930 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005518:	f7ff fa0a 	bl	8004930 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e17b      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552a:	4b36      	ldr	r3, [pc, #216]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d030      	beq.n	80055a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554a:	4b30      	ldr	r3, [pc, #192]	; (800560c <HAL_RCC_OscConfig+0x2b4>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7ff f9ee 	bl	8004930 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005558:	f7ff f9ea 	bl	8004930 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e15b      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 800556c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0x200>
 8005576:	e015      	b.n	80055a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005578:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCC_OscConfig+0x2b4>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557e:	f7ff f9d7 	bl	8004930 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005586:	f7ff f9d3 	bl	8004930 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e144      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 800559a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f0      	bne.n	8005586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80a0 	beq.w	80056f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d0:	6413      	str	r3, [r2, #64]	; 0x40
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e2:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCC_OscConfig+0x2b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d121      	bne.n	8005632 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ee:	4b08      	ldr	r3, [pc, #32]	; (8005610 <HAL_RCC_OscConfig+0x2b8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a07      	ldr	r2, [pc, #28]	; (8005610 <HAL_RCC_OscConfig+0x2b8>)
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fa:	f7ff f999 	bl	8004930 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	e011      	b.n	8005626 <HAL_RCC_OscConfig+0x2ce>
 8005602:	bf00      	nop
 8005604:	40023800 	.word	0x40023800
 8005608:	42470000 	.word	0x42470000
 800560c:	42470e80 	.word	0x42470e80
 8005610:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005614:	f7ff f98c 	bl	8004930 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0fd      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_OscConfig+0x4d4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d106      	bne.n	8005648 <HAL_RCC_OscConfig+0x2f0>
 800563a:	4b7d      	ldr	r3, [pc, #500]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	4a7c      	ldr	r2, [pc, #496]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	6713      	str	r3, [r2, #112]	; 0x70
 8005646:	e01c      	b.n	8005682 <HAL_RCC_OscConfig+0x32a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b05      	cmp	r3, #5
 800564e:	d10c      	bne.n	800566a <HAL_RCC_OscConfig+0x312>
 8005650:	4b77      	ldr	r3, [pc, #476]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a76      	ldr	r2, [pc, #472]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005656:	f043 0304 	orr.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
 800565c:	4b74      	ldr	r3, [pc, #464]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a73      	ldr	r2, [pc, #460]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
 8005668:	e00b      	b.n	8005682 <HAL_RCC_OscConfig+0x32a>
 800566a:	4b71      	ldr	r3, [pc, #452]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	4a70      	ldr	r2, [pc, #448]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6713      	str	r3, [r2, #112]	; 0x70
 8005676:	4b6e      	ldr	r3, [pc, #440]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	4a6d      	ldr	r2, [pc, #436]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d015      	beq.n	80056b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568a:	f7ff f951 	bl	8004930 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7ff f94d 	bl	8004930 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e0bc      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	4b61      	ldr	r3, [pc, #388]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ee      	beq.n	8005692 <HAL_RCC_OscConfig+0x33a>
 80056b4:	e014      	b.n	80056e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b6:	f7ff f93b 	bl	8004930 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7ff f937 	bl	8004930 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e0a6      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d4:	4b56      	ldr	r3, [pc, #344]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ee      	bne.n	80056be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e6:	4b52      	ldr	r3, [pc, #328]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	4a51      	ldr	r2, [pc, #324]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80056ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8092 	beq.w	8005820 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056fc:	4b4c      	ldr	r3, [pc, #304]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 030c 	and.w	r3, r3, #12
 8005704:	2b08      	cmp	r3, #8
 8005706:	d05c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d141      	bne.n	8005794 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005710:	4b48      	ldr	r3, [pc, #288]	; (8005834 <HAL_RCC_OscConfig+0x4dc>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005716:	f7ff f90b 	bl	8004930 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800571e:	f7ff f907 	bl	8004930 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e078      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005730:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	019b      	lsls	r3, r3, #6
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	3b01      	subs	r3, #1
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	4933      	ldr	r1, [pc, #204]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005762:	4313      	orrs	r3, r2
 8005764:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005766:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_RCC_OscConfig+0x4dc>)
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7ff f8e0 	bl	8004930 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005774:	f7ff f8dc 	bl	8004930 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e04d      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005786:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x41c>
 8005792:	e045      	b.n	8005820 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005794:	4b27      	ldr	r3, [pc, #156]	; (8005834 <HAL_RCC_OscConfig+0x4dc>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579a:	f7ff f8c9 	bl	8004930 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a2:	f7ff f8c5 	bl	8004930 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e036      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b4:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCC_OscConfig+0x44a>
 80057c0:	e02e      	b.n	8005820 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e029      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057ce:	4b18      	ldr	r3, [pc, #96]	; (8005830 <HAL_RCC_OscConfig+0x4d8>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d11c      	bne.n	800581c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d115      	bne.n	800581c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057f6:	4013      	ands	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10d      	bne.n	800581c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d106      	bne.n	800581c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40007000 	.word	0x40007000
 8005830:	40023800 	.word	0x40023800
 8005834:	42470060 	.word	0x42470060

08005838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0cc      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800584c:	4b68      	ldr	r3, [pc, #416]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d90c      	bls.n	8005874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585a:	4b65      	ldr	r3, [pc, #404]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005862:	4b63      	ldr	r3, [pc, #396]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0b8      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d020      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800588c:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4a58      	ldr	r2, [pc, #352]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a4:	4b53      	ldr	r3, [pc, #332]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4a52      	ldr	r2, [pc, #328]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b0:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	494d      	ldr	r1, [pc, #308]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d044      	beq.n	8005958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d107      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d6:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d119      	bne.n	8005916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e07f      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d003      	beq.n	80058f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d107      	bne.n	8005906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f6:	4b3f      	ldr	r3, [pc, #252]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e06f      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005906:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e067      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005916:	4b37      	ldr	r3, [pc, #220]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f023 0203 	bic.w	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4934      	ldr	r1, [pc, #208]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005928:	f7ff f802 	bl	8004930 <HAL_GetTick>
 800592c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	e00a      	b.n	8005946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005930:	f7fe fffe 	bl	8004930 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	; 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e04f      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005946:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 020c 	and.w	r2, r3, #12
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	429a      	cmp	r2, r3
 8005956:	d1eb      	bne.n	8005930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d20c      	bcs.n	8005980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e032      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4916      	ldr	r1, [pc, #88]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	490e      	ldr	r1, [pc, #56]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059be:	f000 f821 	bl	8005a04 <HAL_RCC_GetSysClockFreq>
 80059c2:	4601      	mov	r1, r0
 80059c4:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	4a0a      	ldr	r2, [pc, #40]	; (80059f8 <HAL_RCC_ClockConfig+0x1c0>)
 80059d0:	5cd3      	ldrb	r3, [r2, r3]
 80059d2:	fa21 f303 	lsr.w	r3, r1, r3
 80059d6:	4a09      	ldr	r2, [pc, #36]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 80059d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe ff62 	bl	80048a8 <HAL_InitTick>

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40023c00 	.word	0x40023c00
 80059f4:	40023800 	.word	0x40023800
 80059f8:	080081e8 	.word	0x080081e8
 80059fc:	200000d8 	.word	0x200000d8
 8005a00:	200000dc 	.word	0x200000dc

08005a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	2300      	movs	r3, #0
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a1a:	4b63      	ldr	r3, [pc, #396]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d007      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x32>
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d008      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x38>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 80b4 	bne.w	8005b98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a30:	4b5e      	ldr	r3, [pc, #376]	; (8005bac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a32:	60bb      	str	r3, [r7, #8]
       break;
 8005a34:	e0b3      	b.n	8005b9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a36:	4b5e      	ldr	r3, [pc, #376]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a38:	60bb      	str	r3, [r7, #8]
      break;
 8005a3a:	e0b0      	b.n	8005b9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a3c:	4b5a      	ldr	r3, [pc, #360]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a46:	4b58      	ldr	r3, [pc, #352]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04a      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a52:	4b55      	ldr	r3, [pc, #340]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	ea03 0501 	and.w	r5, r3, r1
 8005a68:	ea04 0602 	and.w	r6, r4, r2
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4632      	mov	r2, r6
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	f04f 0400 	mov.w	r4, #0
 8005a78:	0154      	lsls	r4, r2, #5
 8005a7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a7e:	014b      	lsls	r3, r1, #5
 8005a80:	4619      	mov	r1, r3
 8005a82:	4622      	mov	r2, r4
 8005a84:	1b49      	subs	r1, r1, r5
 8005a86:	eb62 0206 	sbc.w	r2, r2, r6
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	f04f 0400 	mov.w	r4, #0
 8005a92:	0194      	lsls	r4, r2, #6
 8005a94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a98:	018b      	lsls	r3, r1, #6
 8005a9a:	1a5b      	subs	r3, r3, r1
 8005a9c:	eb64 0402 	sbc.w	r4, r4, r2
 8005aa0:	f04f 0100 	mov.w	r1, #0
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	00e2      	lsls	r2, r4, #3
 8005aaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005aae:	00d9      	lsls	r1, r3, #3
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	195b      	adds	r3, r3, r5
 8005ab6:	eb44 0406 	adc.w	r4, r4, r6
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	0262      	lsls	r2, r4, #9
 8005ac4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ac8:	0259      	lsls	r1, r3, #9
 8005aca:	460b      	mov	r3, r1
 8005acc:	4614      	mov	r4, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f04f 0400 	mov.w	r4, #0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4623      	mov	r3, r4
 8005adc:	f7fa fbe0 	bl	80002a0 <__aeabi_uldivmod>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e049      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae8:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	099b      	lsrs	r3, r3, #6
 8005aee:	f04f 0400 	mov.w	r4, #0
 8005af2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	ea03 0501 	and.w	r5, r3, r1
 8005afe:	ea04 0602 	and.w	r6, r4, r2
 8005b02:	4629      	mov	r1, r5
 8005b04:	4632      	mov	r2, r6
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	f04f 0400 	mov.w	r4, #0
 8005b0e:	0154      	lsls	r4, r2, #5
 8005b10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b14:	014b      	lsls	r3, r1, #5
 8005b16:	4619      	mov	r1, r3
 8005b18:	4622      	mov	r2, r4
 8005b1a:	1b49      	subs	r1, r1, r5
 8005b1c:	eb62 0206 	sbc.w	r2, r2, r6
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	0194      	lsls	r4, r2, #6
 8005b2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b2e:	018b      	lsls	r3, r1, #6
 8005b30:	1a5b      	subs	r3, r3, r1
 8005b32:	eb64 0402 	sbc.w	r4, r4, r2
 8005b36:	f04f 0100 	mov.w	r1, #0
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	00e2      	lsls	r2, r4, #3
 8005b40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b44:	00d9      	lsls	r1, r3, #3
 8005b46:	460b      	mov	r3, r1
 8005b48:	4614      	mov	r4, r2
 8005b4a:	195b      	adds	r3, r3, r5
 8005b4c:	eb44 0406 	adc.w	r4, r4, r6
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	02a2      	lsls	r2, r4, #10
 8005b5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b5e:	0299      	lsls	r1, r3, #10
 8005b60:	460b      	mov	r3, r1
 8005b62:	4614      	mov	r4, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	4621      	mov	r1, r4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f04f 0400 	mov.w	r4, #0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4623      	mov	r3, r4
 8005b72:	f7fa fb95 	bl	80002a0 <__aeabi_uldivmod>
 8005b76:	4603      	mov	r3, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	0c1b      	lsrs	r3, r3, #16
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	3301      	adds	r3, #1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	60bb      	str	r3, [r7, #8]
      break;
 8005b96:	e002      	b.n	8005b9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b9a:	60bb      	str	r3, [r7, #8]
      break;
 8005b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	00f42400 	.word	0x00f42400
 8005bb0:	007a1200 	.word	0x007a1200

08005bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bba:	681b      	ldr	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	200000d8 	.word	0x200000d8

08005bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bd0:	f7ff fff0 	bl	8005bb4 <HAL_RCC_GetHCLKFreq>
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	0a9b      	lsrs	r3, r3, #10
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	4a03      	ldr	r2, [pc, #12]	; (8005bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be2:	5cd3      	ldrb	r3, [r2, r3]
 8005be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	080081f8 	.word	0x080081f8

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bf8:	f7ff ffdc 	bl	8005bb4 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0b5b      	lsrs	r3, r3, #13
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4a03      	ldr	r2, [pc, #12]	; (8005c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c0a:	5cd3      	ldrb	r3, [r2, r3]
 8005c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40023800 	.word	0x40023800
 8005c18:	080081f8 	.word	0x080081f8

08005c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e01d      	b.n	8005c6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fe fd26 	bl	8004694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 f850 	bl	8005d00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e02d      	b.n	8005ce2 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f825 	bl	8005cea <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f000 f824 	bl	8005d00 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0208 	bic.w	r2, r2, #8
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a40      	ldr	r2, [pc, #256]	; (8005e14 <TIM_Base_SetConfig+0x114>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1e:	d00f      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3d      	ldr	r2, [pc, #244]	; (8005e18 <TIM_Base_SetConfig+0x118>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3c      	ldr	r2, [pc, #240]	; (8005e1c <TIM_Base_SetConfig+0x11c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3b      	ldr	r2, [pc, #236]	; (8005e20 <TIM_Base_SetConfig+0x120>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3a      	ldr	r2, [pc, #232]	; (8005e24 <TIM_Base_SetConfig+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2f      	ldr	r2, [pc, #188]	; (8005e14 <TIM_Base_SetConfig+0x114>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d02b      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d60:	d027      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2c      	ldr	r2, [pc, #176]	; (8005e18 <TIM_Base_SetConfig+0x118>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d023      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2b      	ldr	r2, [pc, #172]	; (8005e1c <TIM_Base_SetConfig+0x11c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01f      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <TIM_Base_SetConfig+0x120>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01b      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <TIM_Base_SetConfig+0x124>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d017      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <TIM_Base_SetConfig+0x128>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a27      	ldr	r2, [pc, #156]	; (8005e2c <TIM_Base_SetConfig+0x12c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00f      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a26      	ldr	r2, [pc, #152]	; (8005e30 <TIM_Base_SetConfig+0x130>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <TIM_Base_SetConfig+0x134>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <TIM_Base_SetConfig+0x138>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a23      	ldr	r2, [pc, #140]	; (8005e3c <TIM_Base_SetConfig+0x13c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <TIM_Base_SetConfig+0x114>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0xf8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <TIM_Base_SetConfig+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d103      	bne.n	8005e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	615a      	str	r2, [r3, #20]
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40010400 	.word	0x40010400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400
 8005e30:	40014800 	.word	0x40014800
 8005e34:	40001800 	.word	0x40001800
 8005e38:	40001c00 	.word	0x40001c00
 8005e3c:	40002000 	.word	0x40002000

08005e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e03f      	b.n	8005ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fe fc70 	bl	800474c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fb97 	bl	80065b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b088      	sub	sp, #32
 8005ede:	af02      	add	r7, sp, #8
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	603b      	str	r3, [r7, #0]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	f040 8083 	bne.w	8006002 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_UART_Transmit+0x2e>
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e07b      	b.n	8006004 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Transmit+0x40>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e074      	b.n	8006004 <HAL_UART_Transmit+0x12a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2221      	movs	r2, #33	; 0x21
 8005f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f30:	f7fe fcfe 	bl	8004930 <HAL_GetTick>
 8005f34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f4a:	e042      	b.n	8005fd2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	d122      	bne.n	8005faa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f9b6 	bl	80062e0 <UART_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e042      	b.n	8006004 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	e017      	b.n	8005fd2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	e013      	b.n	8005fd2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f993 	bl	80062e0 <UART_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e01f      	b.n	8006004 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	60ba      	str	r2, [r7, #8]
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1b7      	bne.n	8005f4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2140      	movs	r1, #64	; 0x40
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f97a 	bl	80062e0 <UART_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e006      	b.n	8006004 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b20      	cmp	r3, #32
 8006024:	d140      	bne.n	80060a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_UART_Receive_IT+0x26>
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e039      	b.n	80060aa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UART_Receive_IT+0x38>
 8006040:	2302      	movs	r3, #2
 8006042:	e032      	b.n	80060aa <HAL_UART_Receive_IT+0x9e>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2222      	movs	r2, #34	; 0x22
 8006068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006082:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0220 	orr.w	r2, r2, #32
 80060a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060d8:	2300      	movs	r3, #0
 80060da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10d      	bne.n	800610a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_UART_IRQHandler+0x52>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f9d6 	bl	80064b4 <UART_Receive_IT>
      return;
 8006108:	e0d1      	b.n	80062ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80b0 	beq.w	8006272 <HAL_UART_IRQHandler+0x1ba>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <HAL_UART_IRQHandler+0x70>
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80a5 	beq.w	8006272 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <HAL_UART_IRQHandler+0x90>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	f043 0201 	orr.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_UART_IRQHandler+0xb0>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	f043 0202 	orr.w	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_UART_IRQHandler+0xd0>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	f043 0204 	orr.w	r2, r3, #4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00f      	beq.n	80061b2 <HAL_UART_IRQHandler+0xfa>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <HAL_UART_IRQHandler+0xee>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	f043 0208 	orr.w	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d078      	beq.n	80062ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <HAL_UART_IRQHandler+0x11c>
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f970 	bl	80064b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <HAL_UART_IRQHandler+0x144>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d031      	beq.n	8006260 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f8b9 	bl	8006374 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d123      	bne.n	8006258 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	2b00      	cmp	r3, #0
 8006226:	d013      	beq.n	8006250 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <HAL_UART_IRQHandler+0x1fc>)
 800622e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fc98 	bl	8004b6a <HAL_DMA_Abort_IT>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d016      	beq.n	800626e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800624a:	4610      	mov	r0, r2
 800624c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624e:	e00e      	b.n	800626e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f83b 	bl	80062cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006256:	e00a      	b.n	800626e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f837 	bl	80062cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625e:	e006      	b.n	800626e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f833 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800626c:	e01e      	b.n	80062ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626e:	bf00      	nop
    return;
 8006270:	e01c      	b.n	80062ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_UART_IRQHandler+0x1d6>
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f8a6 	bl	80063d8 <UART_Transmit_IT>
    return;
 800628c:	e00f      	b.n	80062ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <HAL_UART_IRQHandler+0x1f6>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f8ee 	bl	8006484 <UART_EndTransmit_IT>
    return;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80062ac:	bf00      	nop
  }
}
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	080063b1 	.word	0x080063b1

080062b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f0:	e02c      	b.n	800634c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d028      	beq.n	800634c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <UART_WaitOnFlagUntilTimeout+0x30>
 8006300:	f7fe fb16 	bl	8004930 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	429a      	cmp	r2, r3
 800630e:	d21d      	bcs.n	800634c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800631e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e00f      	b.n	800636c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4013      	ands	r3, r2
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	429a      	cmp	r2, r3
 8006368:	d0c3      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800638a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff ff7e 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b21      	cmp	r3, #33	; 0x21
 80063ea:	d144      	bne.n	8006476 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d11a      	bne.n	800642c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800640a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	1c9a      	adds	r2, r3, #2
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]
 800641e:	e00e      	b.n	800643e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	621a      	str	r2, [r3, #32]
 800642a:	e008      	b.n	800643e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6211      	str	r1, [r2, #32]
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29b      	uxth	r3, r3
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4619      	mov	r1, r3
 800644c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006460:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006470:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e000      	b.n	8006478 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006476:	2302      	movs	r3, #2
  }
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff07 	bl	80062b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b22      	cmp	r3, #34	; 0x22
 80064c6:	d171      	bne.n	80065ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d0:	d123      	bne.n	800651a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10e      	bne.n	80064fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
 80064fc:	e029      	b.n	8006552 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	b29b      	uxth	r3, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
 8006518:	e01b      	b.n	8006552 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6858      	ldr	r0, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6291      	str	r1, [r2, #40]	; 0x28
 8006532:	b2c2      	uxtb	r2, r0
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e00c      	b.n	8006552 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	1c58      	adds	r0, r3, #1
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	6288      	str	r0, [r1, #40]	; 0x28
 800654a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	4619      	mov	r1, r3
 8006560:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006562:	2b00      	cmp	r3, #0
 8006564:	d120      	bne.n	80065a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0220 	bic.w	r2, r2, #32
 8006574:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006584:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe f89a 	bl	80046d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	e002      	b.n	80065ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	e000      	b.n	80065ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
  }
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065fa:	f023 030c 	bic.w	r3, r3, #12
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	430b      	orrs	r3, r1
 8006606:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006626:	f040 818b 	bne.w	8006940 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4ac1      	ldr	r2, [pc, #772]	; (8006934 <UART_SetConfig+0x37c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d005      	beq.n	8006640 <UART_SetConfig+0x88>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4abf      	ldr	r2, [pc, #764]	; (8006938 <UART_SetConfig+0x380>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f040 80bd 	bne.w	80067ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7ff fad8 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 8006644:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	461d      	mov	r5, r3
 800664a:	f04f 0600 	mov.w	r6, #0
 800664e:	46a8      	mov	r8, r5
 8006650:	46b1      	mov	r9, r6
 8006652:	eb18 0308 	adds.w	r3, r8, r8
 8006656:	eb49 0409 	adc.w	r4, r9, r9
 800665a:	4698      	mov	r8, r3
 800665c:	46a1      	mov	r9, r4
 800665e:	eb18 0805 	adds.w	r8, r8, r5
 8006662:	eb49 0906 	adc.w	r9, r9, r6
 8006666:	f04f 0100 	mov.w	r1, #0
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006672:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006676:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800667a:	4688      	mov	r8, r1
 800667c:	4691      	mov	r9, r2
 800667e:	eb18 0005 	adds.w	r0, r8, r5
 8006682:	eb49 0106 	adc.w	r1, r9, r6
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	461d      	mov	r5, r3
 800668c:	f04f 0600 	mov.w	r6, #0
 8006690:	196b      	adds	r3, r5, r5
 8006692:	eb46 0406 	adc.w	r4, r6, r6
 8006696:	461a      	mov	r2, r3
 8006698:	4623      	mov	r3, r4
 800669a:	f7f9 fe01 	bl	80002a0 <__aeabi_uldivmod>
 800669e:	4603      	mov	r3, r0
 80066a0:	460c      	mov	r4, r1
 80066a2:	461a      	mov	r2, r3
 80066a4:	4ba5      	ldr	r3, [pc, #660]	; (800693c <UART_SetConfig+0x384>)
 80066a6:	fba3 2302 	umull	r2, r3, r3, r2
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	461d      	mov	r5, r3
 80066b4:	f04f 0600 	mov.w	r6, #0
 80066b8:	46a9      	mov	r9, r5
 80066ba:	46b2      	mov	sl, r6
 80066bc:	eb19 0309 	adds.w	r3, r9, r9
 80066c0:	eb4a 040a 	adc.w	r4, sl, sl
 80066c4:	4699      	mov	r9, r3
 80066c6:	46a2      	mov	sl, r4
 80066c8:	eb19 0905 	adds.w	r9, r9, r5
 80066cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066e4:	4689      	mov	r9, r1
 80066e6:	4692      	mov	sl, r2
 80066e8:	eb19 0005 	adds.w	r0, r9, r5
 80066ec:	eb4a 0106 	adc.w	r1, sl, r6
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	461d      	mov	r5, r3
 80066f6:	f04f 0600 	mov.w	r6, #0
 80066fa:	196b      	adds	r3, r5, r5
 80066fc:	eb46 0406 	adc.w	r4, r6, r6
 8006700:	461a      	mov	r2, r3
 8006702:	4623      	mov	r3, r4
 8006704:	f7f9 fdcc 	bl	80002a0 <__aeabi_uldivmod>
 8006708:	4603      	mov	r3, r0
 800670a:	460c      	mov	r4, r1
 800670c:	461a      	mov	r2, r3
 800670e:	4b8b      	ldr	r3, [pc, #556]	; (800693c <UART_SetConfig+0x384>)
 8006710:	fba3 1302 	umull	r1, r3, r3, r2
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	2164      	movs	r1, #100	; 0x64
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	3332      	adds	r3, #50	; 0x32
 8006722:	4a86      	ldr	r2, [pc, #536]	; (800693c <UART_SetConfig+0x384>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006730:	4498      	add	r8, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	461d      	mov	r5, r3
 8006736:	f04f 0600 	mov.w	r6, #0
 800673a:	46a9      	mov	r9, r5
 800673c:	46b2      	mov	sl, r6
 800673e:	eb19 0309 	adds.w	r3, r9, r9
 8006742:	eb4a 040a 	adc.w	r4, sl, sl
 8006746:	4699      	mov	r9, r3
 8006748:	46a2      	mov	sl, r4
 800674a:	eb19 0905 	adds.w	r9, r9, r5
 800674e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006752:	f04f 0100 	mov.w	r1, #0
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800675e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006762:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006766:	4689      	mov	r9, r1
 8006768:	4692      	mov	sl, r2
 800676a:	eb19 0005 	adds.w	r0, r9, r5
 800676e:	eb4a 0106 	adc.w	r1, sl, r6
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	461d      	mov	r5, r3
 8006778:	f04f 0600 	mov.w	r6, #0
 800677c:	196b      	adds	r3, r5, r5
 800677e:	eb46 0406 	adc.w	r4, r6, r6
 8006782:	461a      	mov	r2, r3
 8006784:	4623      	mov	r3, r4
 8006786:	f7f9 fd8b 	bl	80002a0 <__aeabi_uldivmod>
 800678a:	4603      	mov	r3, r0
 800678c:	460c      	mov	r4, r1
 800678e:	461a      	mov	r2, r3
 8006790:	4b6a      	ldr	r3, [pc, #424]	; (800693c <UART_SetConfig+0x384>)
 8006792:	fba3 1302 	umull	r1, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2164      	movs	r1, #100	; 0x64
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	3332      	adds	r3, #50	; 0x32
 80067a4:	4a65      	ldr	r2, [pc, #404]	; (800693c <UART_SetConfig+0x384>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f003 0207 	and.w	r2, r3, #7
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4442      	add	r2, r8
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	e26f      	b.n	8006c9a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067ba:	f7ff fa07 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80067be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	461d      	mov	r5, r3
 80067c4:	f04f 0600 	mov.w	r6, #0
 80067c8:	46a8      	mov	r8, r5
 80067ca:	46b1      	mov	r9, r6
 80067cc:	eb18 0308 	adds.w	r3, r8, r8
 80067d0:	eb49 0409 	adc.w	r4, r9, r9
 80067d4:	4698      	mov	r8, r3
 80067d6:	46a1      	mov	r9, r4
 80067d8:	eb18 0805 	adds.w	r8, r8, r5
 80067dc:	eb49 0906 	adc.w	r9, r9, r6
 80067e0:	f04f 0100 	mov.w	r1, #0
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067f4:	4688      	mov	r8, r1
 80067f6:	4691      	mov	r9, r2
 80067f8:	eb18 0005 	adds.w	r0, r8, r5
 80067fc:	eb49 0106 	adc.w	r1, r9, r6
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	461d      	mov	r5, r3
 8006806:	f04f 0600 	mov.w	r6, #0
 800680a:	196b      	adds	r3, r5, r5
 800680c:	eb46 0406 	adc.w	r4, r6, r6
 8006810:	461a      	mov	r2, r3
 8006812:	4623      	mov	r3, r4
 8006814:	f7f9 fd44 	bl	80002a0 <__aeabi_uldivmod>
 8006818:	4603      	mov	r3, r0
 800681a:	460c      	mov	r4, r1
 800681c:	461a      	mov	r2, r3
 800681e:	4b47      	ldr	r3, [pc, #284]	; (800693c <UART_SetConfig+0x384>)
 8006820:	fba3 2302 	umull	r2, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	461d      	mov	r5, r3
 800682e:	f04f 0600 	mov.w	r6, #0
 8006832:	46a9      	mov	r9, r5
 8006834:	46b2      	mov	sl, r6
 8006836:	eb19 0309 	adds.w	r3, r9, r9
 800683a:	eb4a 040a 	adc.w	r4, sl, sl
 800683e:	4699      	mov	r9, r3
 8006840:	46a2      	mov	sl, r4
 8006842:	eb19 0905 	adds.w	r9, r9, r5
 8006846:	eb4a 0a06 	adc.w	sl, sl, r6
 800684a:	f04f 0100 	mov.w	r1, #0
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800685a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800685e:	4689      	mov	r9, r1
 8006860:	4692      	mov	sl, r2
 8006862:	eb19 0005 	adds.w	r0, r9, r5
 8006866:	eb4a 0106 	adc.w	r1, sl, r6
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	461d      	mov	r5, r3
 8006870:	f04f 0600 	mov.w	r6, #0
 8006874:	196b      	adds	r3, r5, r5
 8006876:	eb46 0406 	adc.w	r4, r6, r6
 800687a:	461a      	mov	r2, r3
 800687c:	4623      	mov	r3, r4
 800687e:	f7f9 fd0f 	bl	80002a0 <__aeabi_uldivmod>
 8006882:	4603      	mov	r3, r0
 8006884:	460c      	mov	r4, r1
 8006886:	461a      	mov	r2, r3
 8006888:	4b2c      	ldr	r3, [pc, #176]	; (800693c <UART_SetConfig+0x384>)
 800688a:	fba3 1302 	umull	r1, r3, r3, r2
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2164      	movs	r1, #100	; 0x64
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	3332      	adds	r3, #50	; 0x32
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <UART_SetConfig+0x384>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068aa:	4498      	add	r8, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	461d      	mov	r5, r3
 80068b0:	f04f 0600 	mov.w	r6, #0
 80068b4:	46a9      	mov	r9, r5
 80068b6:	46b2      	mov	sl, r6
 80068b8:	eb19 0309 	adds.w	r3, r9, r9
 80068bc:	eb4a 040a 	adc.w	r4, sl, sl
 80068c0:	4699      	mov	r9, r3
 80068c2:	46a2      	mov	sl, r4
 80068c4:	eb19 0905 	adds.w	r9, r9, r5
 80068c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068e0:	4689      	mov	r9, r1
 80068e2:	4692      	mov	sl, r2
 80068e4:	eb19 0005 	adds.w	r0, r9, r5
 80068e8:	eb4a 0106 	adc.w	r1, sl, r6
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	461d      	mov	r5, r3
 80068f2:	f04f 0600 	mov.w	r6, #0
 80068f6:	196b      	adds	r3, r5, r5
 80068f8:	eb46 0406 	adc.w	r4, r6, r6
 80068fc:	461a      	mov	r2, r3
 80068fe:	4623      	mov	r3, r4
 8006900:	f7f9 fcce 	bl	80002a0 <__aeabi_uldivmod>
 8006904:	4603      	mov	r3, r0
 8006906:	460c      	mov	r4, r1
 8006908:	461a      	mov	r2, r3
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <UART_SetConfig+0x384>)
 800690c:	fba3 1302 	umull	r1, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	2164      	movs	r1, #100	; 0x64
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	3332      	adds	r3, #50	; 0x32
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <UART_SetConfig+0x384>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 0207 	and.w	r2, r3, #7
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4442      	add	r2, r8
 8006930:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006932:	e1b2      	b.n	8006c9a <UART_SetConfig+0x6e2>
 8006934:	40011000 	.word	0x40011000
 8006938:	40011400 	.word	0x40011400
 800693c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4ad7      	ldr	r2, [pc, #860]	; (8006ca4 <UART_SetConfig+0x6ec>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d005      	beq.n	8006956 <UART_SetConfig+0x39e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4ad6      	ldr	r2, [pc, #856]	; (8006ca8 <UART_SetConfig+0x6f0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	f040 80d1 	bne.w	8006af8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006956:	f7ff f94d 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 800695a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	469a      	mov	sl, r3
 8006960:	f04f 0b00 	mov.w	fp, #0
 8006964:	46d0      	mov	r8, sl
 8006966:	46d9      	mov	r9, fp
 8006968:	eb18 0308 	adds.w	r3, r8, r8
 800696c:	eb49 0409 	adc.w	r4, r9, r9
 8006970:	4698      	mov	r8, r3
 8006972:	46a1      	mov	r9, r4
 8006974:	eb18 080a 	adds.w	r8, r8, sl
 8006978:	eb49 090b 	adc.w	r9, r9, fp
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006988:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800698c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006990:	4688      	mov	r8, r1
 8006992:	4691      	mov	r9, r2
 8006994:	eb1a 0508 	adds.w	r5, sl, r8
 8006998:	eb4b 0609 	adc.w	r6, fp, r9
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4619      	mov	r1, r3
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	f04f 0400 	mov.w	r4, #0
 80069ae:	0094      	lsls	r4, r2, #2
 80069b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069b4:	008b      	lsls	r3, r1, #2
 80069b6:	461a      	mov	r2, r3
 80069b8:	4623      	mov	r3, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	4631      	mov	r1, r6
 80069be:	f7f9 fc6f 	bl	80002a0 <__aeabi_uldivmod>
 80069c2:	4603      	mov	r3, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	461a      	mov	r2, r3
 80069c8:	4bb8      	ldr	r3, [pc, #736]	; (8006cac <UART_SetConfig+0x6f4>)
 80069ca:	fba3 2302 	umull	r2, r3, r3, r2
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	469b      	mov	fp, r3
 80069d8:	f04f 0c00 	mov.w	ip, #0
 80069dc:	46d9      	mov	r9, fp
 80069de:	46e2      	mov	sl, ip
 80069e0:	eb19 0309 	adds.w	r3, r9, r9
 80069e4:	eb4a 040a 	adc.w	r4, sl, sl
 80069e8:	4699      	mov	r9, r3
 80069ea:	46a2      	mov	sl, r4
 80069ec:	eb19 090b 	adds.w	r9, r9, fp
 80069f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069f4:	f04f 0100 	mov.w	r1, #0
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a08:	4689      	mov	r9, r1
 8006a0a:	4692      	mov	sl, r2
 8006a0c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a10:	eb4c 060a 	adc.w	r6, ip, sl
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	f04f 0400 	mov.w	r4, #0
 8006a26:	0094      	lsls	r4, r2, #2
 8006a28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a2c:	008b      	lsls	r3, r1, #2
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4623      	mov	r3, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	4631      	mov	r1, r6
 8006a36:	f7f9 fc33 	bl	80002a0 <__aeabi_uldivmod>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4b9a      	ldr	r3, [pc, #616]	; (8006cac <UART_SetConfig+0x6f4>)
 8006a42:	fba3 1302 	umull	r1, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	2164      	movs	r1, #100	; 0x64
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	3332      	adds	r3, #50	; 0x32
 8006a54:	4a95      	ldr	r2, [pc, #596]	; (8006cac <UART_SetConfig+0x6f4>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a60:	4498      	add	r8, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	469b      	mov	fp, r3
 8006a66:	f04f 0c00 	mov.w	ip, #0
 8006a6a:	46d9      	mov	r9, fp
 8006a6c:	46e2      	mov	sl, ip
 8006a6e:	eb19 0309 	adds.w	r3, r9, r9
 8006a72:	eb4a 040a 	adc.w	r4, sl, sl
 8006a76:	4699      	mov	r9, r3
 8006a78:	46a2      	mov	sl, r4
 8006a7a:	eb19 090b 	adds.w	r9, r9, fp
 8006a7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a82:	f04f 0100 	mov.w	r1, #0
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a96:	4689      	mov	r9, r1
 8006a98:	4692      	mov	sl, r2
 8006a9a:	eb1b 0509 	adds.w	r5, fp, r9
 8006a9e:	eb4c 060a 	adc.w	r6, ip, sl
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	f04f 0400 	mov.w	r4, #0
 8006ab4:	0094      	lsls	r4, r2, #2
 8006ab6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aba:	008b      	lsls	r3, r1, #2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4623      	mov	r3, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	f7f9 fbec 	bl	80002a0 <__aeabi_uldivmod>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b77      	ldr	r3, [pc, #476]	; (8006cac <UART_SetConfig+0x6f4>)
 8006ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	2164      	movs	r1, #100	; 0x64
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	3332      	adds	r3, #50	; 0x32
 8006ae2:	4a72      	ldr	r2, [pc, #456]	; (8006cac <UART_SetConfig+0x6f4>)
 8006ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	f003 020f 	and.w	r2, r3, #15
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4442      	add	r2, r8
 8006af4:	609a      	str	r2, [r3, #8]
 8006af6:	e0d0      	b.n	8006c9a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7ff f868 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 8006afc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	469a      	mov	sl, r3
 8006b02:	f04f 0b00 	mov.w	fp, #0
 8006b06:	46d0      	mov	r8, sl
 8006b08:	46d9      	mov	r9, fp
 8006b0a:	eb18 0308 	adds.w	r3, r8, r8
 8006b0e:	eb49 0409 	adc.w	r4, r9, r9
 8006b12:	4698      	mov	r8, r3
 8006b14:	46a1      	mov	r9, r4
 8006b16:	eb18 080a 	adds.w	r8, r8, sl
 8006b1a:	eb49 090b 	adc.w	r9, r9, fp
 8006b1e:	f04f 0100 	mov.w	r1, #0
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b32:	4688      	mov	r8, r1
 8006b34:	4691      	mov	r9, r2
 8006b36:	eb1a 0508 	adds.w	r5, sl, r8
 8006b3a:	eb4b 0609 	adc.w	r6, fp, r9
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4619      	mov	r1, r3
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	f04f 0400 	mov.w	r4, #0
 8006b50:	0094      	lsls	r4, r2, #2
 8006b52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4623      	mov	r3, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	4631      	mov	r1, r6
 8006b60:	f7f9 fb9e 	bl	80002a0 <__aeabi_uldivmod>
 8006b64:	4603      	mov	r3, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b50      	ldr	r3, [pc, #320]	; (8006cac <UART_SetConfig+0x6f4>)
 8006b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	469b      	mov	fp, r3
 8006b7a:	f04f 0c00 	mov.w	ip, #0
 8006b7e:	46d9      	mov	r9, fp
 8006b80:	46e2      	mov	sl, ip
 8006b82:	eb19 0309 	adds.w	r3, r9, r9
 8006b86:	eb4a 040a 	adc.w	r4, sl, sl
 8006b8a:	4699      	mov	r9, r3
 8006b8c:	46a2      	mov	sl, r4
 8006b8e:	eb19 090b 	adds.w	r9, r9, fp
 8006b92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b96:	f04f 0100 	mov.w	r1, #0
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006baa:	4689      	mov	r9, r1
 8006bac:	4692      	mov	sl, r2
 8006bae:	eb1b 0509 	adds.w	r5, fp, r9
 8006bb2:	eb4c 060a 	adc.w	r6, ip, sl
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	f04f 0400 	mov.w	r4, #0
 8006bc8:	0094      	lsls	r4, r2, #2
 8006bca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bce:	008b      	lsls	r3, r1, #2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4623      	mov	r3, r4
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	f7f9 fb62 	bl	80002a0 <__aeabi_uldivmod>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	461a      	mov	r2, r3
 8006be2:	4b32      	ldr	r3, [pc, #200]	; (8006cac <UART_SetConfig+0x6f4>)
 8006be4:	fba3 1302 	umull	r1, r3, r3, r2
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	2164      	movs	r1, #100	; 0x64
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	3332      	adds	r3, #50	; 0x32
 8006bf6:	4a2d      	ldr	r2, [pc, #180]	; (8006cac <UART_SetConfig+0x6f4>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c02:	4498      	add	r8, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	469b      	mov	fp, r3
 8006c08:	f04f 0c00 	mov.w	ip, #0
 8006c0c:	46d9      	mov	r9, fp
 8006c0e:	46e2      	mov	sl, ip
 8006c10:	eb19 0309 	adds.w	r3, r9, r9
 8006c14:	eb4a 040a 	adc.w	r4, sl, sl
 8006c18:	4699      	mov	r9, r3
 8006c1a:	46a2      	mov	sl, r4
 8006c1c:	eb19 090b 	adds.w	r9, r9, fp
 8006c20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c24:	f04f 0100 	mov.w	r1, #0
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c38:	4689      	mov	r9, r1
 8006c3a:	4692      	mov	sl, r2
 8006c3c:	eb1b 0509 	adds.w	r5, fp, r9
 8006c40:	eb4c 060a 	adc.w	r6, ip, sl
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	f04f 0400 	mov.w	r4, #0
 8006c56:	0094      	lsls	r4, r2, #2
 8006c58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c5c:	008b      	lsls	r3, r1, #2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4623      	mov	r3, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	4631      	mov	r1, r6
 8006c66:	f7f9 fb1b 	bl	80002a0 <__aeabi_uldivmod>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <UART_SetConfig+0x6f4>)
 8006c72:	fba3 1302 	umull	r1, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2164      	movs	r1, #100	; 0x64
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	3332      	adds	r3, #50	; 0x32
 8006c84:	4a09      	ldr	r2, [pc, #36]	; (8006cac <UART_SetConfig+0x6f4>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4442      	add	r2, r8
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	e7ff      	b.n	8006c9a <UART_SetConfig+0x6e2>
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	40011000 	.word	0x40011000
 8006ca8:	40011400 	.word	0x40011400
 8006cac:	51eb851f 	.word	0x51eb851f

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	200000e4 	.word	0x200000e4

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4e0d      	ldr	r6, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1ba4      	subs	r4, r4, r6
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	42a5      	cmp	r5, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4e0b      	ldr	r6, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f001 f846 	bl	8007d60 <_init>
 8006cd4:	1ba4      	subs	r4, r4, r6
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2500      	movs	r5, #0
 8006cda:	42a5      	cmp	r5, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce4:	4798      	blx	r3
 8006ce6:	3501      	adds	r5, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cee:	4798      	blx	r3
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	080083ac 	.word	0x080083ac
 8006cf8:	080083ac 	.word	0x080083ac
 8006cfc:	080083ac 	.word	0x080083ac
 8006d00:	080083b0 	.word	0x080083b0

08006d04 <__locale_ctype_ptr_l>:
 8006d04:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006d08:	4770      	bx	lr
	...

08006d0c <__locale_ctype_ptr>:
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__locale_ctype_ptr+0x14>)
 8006d0e:	4a05      	ldr	r2, [pc, #20]	; (8006d24 <__locale_ctype_ptr+0x18>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf08      	it	eq
 8006d18:	4613      	moveq	r3, r2
 8006d1a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006d1e:	4770      	bx	lr
 8006d20:	200000e4 	.word	0x200000e4
 8006d24:	20000148 	.word	0x20000148

08006d28 <malloc>:
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <malloc+0xc>)
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	f000 b877 	b.w	8006e20 <_malloc_r>
 8006d32:	bf00      	nop
 8006d34:	200000e4 	.word	0x200000e4

08006d38 <__ascii_mbtowc>:
 8006d38:	b082      	sub	sp, #8
 8006d3a:	b901      	cbnz	r1, 8006d3e <__ascii_mbtowc+0x6>
 8006d3c:	a901      	add	r1, sp, #4
 8006d3e:	b142      	cbz	r2, 8006d52 <__ascii_mbtowc+0x1a>
 8006d40:	b14b      	cbz	r3, 8006d56 <__ascii_mbtowc+0x1e>
 8006d42:	7813      	ldrb	r3, [r2, #0]
 8006d44:	600b      	str	r3, [r1, #0]
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	1c10      	adds	r0, r2, #0
 8006d4a:	bf18      	it	ne
 8006d4c:	2001      	movne	r0, #1
 8006d4e:	b002      	add	sp, #8
 8006d50:	4770      	bx	lr
 8006d52:	4610      	mov	r0, r2
 8006d54:	e7fb      	b.n	8006d4e <__ascii_mbtowc+0x16>
 8006d56:	f06f 0001 	mvn.w	r0, #1
 8006d5a:	e7f8      	b.n	8006d4e <__ascii_mbtowc+0x16>

08006d5c <memcpy>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	1e43      	subs	r3, r0, #1
 8006d60:	440a      	add	r2, r1
 8006d62:	4291      	cmp	r1, r2
 8006d64:	d100      	bne.n	8006d68 <memcpy+0xc>
 8006d66:	bd10      	pop	{r4, pc}
 8006d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d70:	e7f7      	b.n	8006d62 <memcpy+0x6>

08006d72 <memset>:
 8006d72:	4402      	add	r2, r0
 8006d74:	4603      	mov	r3, r0
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d100      	bne.n	8006d7c <memset+0xa>
 8006d7a:	4770      	bx	lr
 8006d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d80:	e7f9      	b.n	8006d76 <memset+0x4>
	...

08006d84 <_free_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4605      	mov	r5, r0
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d045      	beq.n	8006e18 <_free_r+0x94>
 8006d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d90:	1f0c      	subs	r4, r1, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bfb8      	it	lt
 8006d96:	18e4      	addlt	r4, r4, r3
 8006d98:	f000 ff34 	bl	8007c04 <__malloc_lock>
 8006d9c:	4a1f      	ldr	r2, [pc, #124]	; (8006e1c <_free_r+0x98>)
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	4610      	mov	r0, r2
 8006da2:	b933      	cbnz	r3, 8006db2 <_free_r+0x2e>
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	6014      	str	r4, [r2, #0]
 8006da8:	4628      	mov	r0, r5
 8006daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dae:	f000 bf2a 	b.w	8007c06 <__malloc_unlock>
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	d90c      	bls.n	8006dd0 <_free_r+0x4c>
 8006db6:	6821      	ldr	r1, [r4, #0]
 8006db8:	1862      	adds	r2, r4, r1
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bf04      	itt	eq
 8006dbe:	681a      	ldreq	r2, [r3, #0]
 8006dc0:	685b      	ldreq	r3, [r3, #4]
 8006dc2:	6063      	str	r3, [r4, #4]
 8006dc4:	bf04      	itt	eq
 8006dc6:	1852      	addeq	r2, r2, r1
 8006dc8:	6022      	streq	r2, [r4, #0]
 8006dca:	6004      	str	r4, [r0, #0]
 8006dcc:	e7ec      	b.n	8006da8 <_free_r+0x24>
 8006dce:	4613      	mov	r3, r2
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	b10a      	cbz	r2, 8006dd8 <_free_r+0x54>
 8006dd4:	42a2      	cmp	r2, r4
 8006dd6:	d9fa      	bls.n	8006dce <_free_r+0x4a>
 8006dd8:	6819      	ldr	r1, [r3, #0]
 8006dda:	1858      	adds	r0, r3, r1
 8006ddc:	42a0      	cmp	r0, r4
 8006dde:	d10b      	bne.n	8006df8 <_free_r+0x74>
 8006de0:	6820      	ldr	r0, [r4, #0]
 8006de2:	4401      	add	r1, r0
 8006de4:	1858      	adds	r0, r3, r1
 8006de6:	4282      	cmp	r2, r0
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	d1dd      	bne.n	8006da8 <_free_r+0x24>
 8006dec:	6810      	ldr	r0, [r2, #0]
 8006dee:	6852      	ldr	r2, [r2, #4]
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	4401      	add	r1, r0
 8006df4:	6019      	str	r1, [r3, #0]
 8006df6:	e7d7      	b.n	8006da8 <_free_r+0x24>
 8006df8:	d902      	bls.n	8006e00 <_free_r+0x7c>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	602b      	str	r3, [r5, #0]
 8006dfe:	e7d3      	b.n	8006da8 <_free_r+0x24>
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	1821      	adds	r1, r4, r0
 8006e04:	428a      	cmp	r2, r1
 8006e06:	bf04      	itt	eq
 8006e08:	6811      	ldreq	r1, [r2, #0]
 8006e0a:	6852      	ldreq	r2, [r2, #4]
 8006e0c:	6062      	str	r2, [r4, #4]
 8006e0e:	bf04      	itt	eq
 8006e10:	1809      	addeq	r1, r1, r0
 8006e12:	6021      	streq	r1, [r4, #0]
 8006e14:	605c      	str	r4, [r3, #4]
 8006e16:	e7c7      	b.n	8006da8 <_free_r+0x24>
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20014378 	.word	0x20014378

08006e20 <_malloc_r>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	1ccd      	adds	r5, r1, #3
 8006e24:	f025 0503 	bic.w	r5, r5, #3
 8006e28:	3508      	adds	r5, #8
 8006e2a:	2d0c      	cmp	r5, #12
 8006e2c:	bf38      	it	cc
 8006e2e:	250c      	movcc	r5, #12
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	4606      	mov	r6, r0
 8006e34:	db01      	blt.n	8006e3a <_malloc_r+0x1a>
 8006e36:	42a9      	cmp	r1, r5
 8006e38:	d903      	bls.n	8006e42 <_malloc_r+0x22>
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	2000      	movs	r0, #0
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	f000 fedf 	bl	8007c04 <__malloc_lock>
 8006e46:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <_malloc_r+0xac>)
 8006e48:	6814      	ldr	r4, [r2, #0]
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	b991      	cbnz	r1, 8006e74 <_malloc_r+0x54>
 8006e4e:	4c20      	ldr	r4, [pc, #128]	; (8006ed0 <_malloc_r+0xb0>)
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	b91b      	cbnz	r3, 8006e5c <_malloc_r+0x3c>
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 fb1d 	bl	8007494 <_sbrk_r>
 8006e5a:	6020      	str	r0, [r4, #0]
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f000 fb18 	bl	8007494 <_sbrk_r>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d124      	bne.n	8006eb2 <_malloc_r+0x92>
 8006e68:	230c      	movs	r3, #12
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f000 feca 	bl	8007c06 <__malloc_unlock>
 8006e72:	e7e4      	b.n	8006e3e <_malloc_r+0x1e>
 8006e74:	680b      	ldr	r3, [r1, #0]
 8006e76:	1b5b      	subs	r3, r3, r5
 8006e78:	d418      	bmi.n	8006eac <_malloc_r+0x8c>
 8006e7a:	2b0b      	cmp	r3, #11
 8006e7c:	d90f      	bls.n	8006e9e <_malloc_r+0x7e>
 8006e7e:	600b      	str	r3, [r1, #0]
 8006e80:	50cd      	str	r5, [r1, r3]
 8006e82:	18cc      	adds	r4, r1, r3
 8006e84:	4630      	mov	r0, r6
 8006e86:	f000 febe 	bl	8007c06 <__malloc_unlock>
 8006e8a:	f104 000b 	add.w	r0, r4, #11
 8006e8e:	1d23      	adds	r3, r4, #4
 8006e90:	f020 0007 	bic.w	r0, r0, #7
 8006e94:	1ac3      	subs	r3, r0, r3
 8006e96:	d0d3      	beq.n	8006e40 <_malloc_r+0x20>
 8006e98:	425a      	negs	r2, r3
 8006e9a:	50e2      	str	r2, [r4, r3]
 8006e9c:	e7d0      	b.n	8006e40 <_malloc_r+0x20>
 8006e9e:	428c      	cmp	r4, r1
 8006ea0:	684b      	ldr	r3, [r1, #4]
 8006ea2:	bf16      	itet	ne
 8006ea4:	6063      	strne	r3, [r4, #4]
 8006ea6:	6013      	streq	r3, [r2, #0]
 8006ea8:	460c      	movne	r4, r1
 8006eaa:	e7eb      	b.n	8006e84 <_malloc_r+0x64>
 8006eac:	460c      	mov	r4, r1
 8006eae:	6849      	ldr	r1, [r1, #4]
 8006eb0:	e7cc      	b.n	8006e4c <_malloc_r+0x2c>
 8006eb2:	1cc4      	adds	r4, r0, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d005      	beq.n	8006ec8 <_malloc_r+0xa8>
 8006ebc:	1a21      	subs	r1, r4, r0
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 fae8 	bl	8007494 <_sbrk_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d0cf      	beq.n	8006e68 <_malloc_r+0x48>
 8006ec8:	6025      	str	r5, [r4, #0]
 8006eca:	e7db      	b.n	8006e84 <_malloc_r+0x64>
 8006ecc:	20014378 	.word	0x20014378
 8006ed0:	2001437c 	.word	0x2001437c

08006ed4 <__sfputc_r>:
 8006ed4:	6893      	ldr	r3, [r2, #8]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	b410      	push	{r4}
 8006edc:	6093      	str	r3, [r2, #8]
 8006ede:	da08      	bge.n	8006ef2 <__sfputc_r+0x1e>
 8006ee0:	6994      	ldr	r4, [r2, #24]
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	db01      	blt.n	8006eea <__sfputc_r+0x16>
 8006ee6:	290a      	cmp	r1, #10
 8006ee8:	d103      	bne.n	8006ef2 <__sfputc_r+0x1e>
 8006eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eee:	f000 bbdd 	b.w	80076ac <__swbuf_r>
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	1c58      	adds	r0, r3, #1
 8006ef6:	6010      	str	r0, [r2, #0]
 8006ef8:	7019      	strb	r1, [r3, #0]
 8006efa:	4608      	mov	r0, r1
 8006efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <__sfputs_r>:
 8006f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f04:	4606      	mov	r6, r0
 8006f06:	460f      	mov	r7, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	18d5      	adds	r5, r2, r3
 8006f0c:	42ac      	cmp	r4, r5
 8006f0e:	d101      	bne.n	8006f14 <__sfputs_r+0x12>
 8006f10:	2000      	movs	r0, #0
 8006f12:	e007      	b.n	8006f24 <__sfputs_r+0x22>
 8006f14:	463a      	mov	r2, r7
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff ffda 	bl	8006ed4 <__sfputc_r>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d1f3      	bne.n	8006f0c <__sfputs_r+0xa>
 8006f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f28 <_vfiprintf_r>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	b09d      	sub	sp, #116	; 0x74
 8006f30:	4617      	mov	r7, r2
 8006f32:	461d      	mov	r5, r3
 8006f34:	4606      	mov	r6, r0
 8006f36:	b118      	cbz	r0, 8006f40 <_vfiprintf_r+0x18>
 8006f38:	6983      	ldr	r3, [r0, #24]
 8006f3a:	b90b      	cbnz	r3, 8006f40 <_vfiprintf_r+0x18>
 8006f3c:	f000 fd74 	bl	8007a28 <__sinit>
 8006f40:	4b7c      	ldr	r3, [pc, #496]	; (8007134 <_vfiprintf_r+0x20c>)
 8006f42:	429c      	cmp	r4, r3
 8006f44:	d158      	bne.n	8006ff8 <_vfiprintf_r+0xd0>
 8006f46:	6874      	ldr	r4, [r6, #4]
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	0718      	lsls	r0, r3, #28
 8006f4c:	d55e      	bpl.n	800700c <_vfiprintf_r+0xe4>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05b      	beq.n	800700c <_vfiprintf_r+0xe4>
 8006f54:	2300      	movs	r3, #0
 8006f56:	9309      	str	r3, [sp, #36]	; 0x24
 8006f58:	2320      	movs	r3, #32
 8006f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f5e:	2330      	movs	r3, #48	; 0x30
 8006f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f64:	9503      	str	r5, [sp, #12]
 8006f66:	f04f 0b01 	mov.w	fp, #1
 8006f6a:	46b8      	mov	r8, r7
 8006f6c:	4645      	mov	r5, r8
 8006f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f72:	b10b      	cbz	r3, 8006f78 <_vfiprintf_r+0x50>
 8006f74:	2b25      	cmp	r3, #37	; 0x25
 8006f76:	d154      	bne.n	8007022 <_vfiprintf_r+0xfa>
 8006f78:	ebb8 0a07 	subs.w	sl, r8, r7
 8006f7c:	d00b      	beq.n	8006f96 <_vfiprintf_r+0x6e>
 8006f7e:	4653      	mov	r3, sl
 8006f80:	463a      	mov	r2, r7
 8006f82:	4621      	mov	r1, r4
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7ff ffbc 	bl	8006f02 <__sfputs_r>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f000 80c2 	beq.w	8007114 <_vfiprintf_r+0x1ec>
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	4453      	add	r3, sl
 8006f94:	9309      	str	r3, [sp, #36]	; 0x24
 8006f96:	f898 3000 	ldrb.w	r3, [r8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80ba 	beq.w	8007114 <_vfiprintf_r+0x1ec>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	9307      	str	r3, [sp, #28]
 8006fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb4:	46a8      	mov	r8, r5
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006fbc:	485e      	ldr	r0, [pc, #376]	; (8007138 <_vfiprintf_r+0x210>)
 8006fbe:	f7f9 f91f 	bl	8000200 <memchr>
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	bb78      	cbnz	r0, 8007026 <_vfiprintf_r+0xfe>
 8006fc6:	06d9      	lsls	r1, r3, #27
 8006fc8:	bf44      	itt	mi
 8006fca:	2220      	movmi	r2, #32
 8006fcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fd0:	071a      	lsls	r2, r3, #28
 8006fd2:	bf44      	itt	mi
 8006fd4:	222b      	movmi	r2, #43	; 0x2b
 8006fd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fda:	782a      	ldrb	r2, [r5, #0]
 8006fdc:	2a2a      	cmp	r2, #42	; 0x2a
 8006fde:	d02a      	beq.n	8007036 <_vfiprintf_r+0x10e>
 8006fe0:	9a07      	ldr	r2, [sp, #28]
 8006fe2:	46a8      	mov	r8, r5
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	250a      	movs	r5, #10
 8006fe8:	4641      	mov	r1, r8
 8006fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fee:	3b30      	subs	r3, #48	; 0x30
 8006ff0:	2b09      	cmp	r3, #9
 8006ff2:	d969      	bls.n	80070c8 <_vfiprintf_r+0x1a0>
 8006ff4:	b360      	cbz	r0, 8007050 <_vfiprintf_r+0x128>
 8006ff6:	e024      	b.n	8007042 <_vfiprintf_r+0x11a>
 8006ff8:	4b50      	ldr	r3, [pc, #320]	; (800713c <_vfiprintf_r+0x214>)
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d101      	bne.n	8007002 <_vfiprintf_r+0xda>
 8006ffe:	68b4      	ldr	r4, [r6, #8]
 8007000:	e7a2      	b.n	8006f48 <_vfiprintf_r+0x20>
 8007002:	4b4f      	ldr	r3, [pc, #316]	; (8007140 <_vfiprintf_r+0x218>)
 8007004:	429c      	cmp	r4, r3
 8007006:	bf08      	it	eq
 8007008:	68f4      	ldreq	r4, [r6, #12]
 800700a:	e79d      	b.n	8006f48 <_vfiprintf_r+0x20>
 800700c:	4621      	mov	r1, r4
 800700e:	4630      	mov	r0, r6
 8007010:	f000 fbac 	bl	800776c <__swsetup_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	d09d      	beq.n	8006f54 <_vfiprintf_r+0x2c>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	b01d      	add	sp, #116	; 0x74
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	46a8      	mov	r8, r5
 8007024:	e7a2      	b.n	8006f6c <_vfiprintf_r+0x44>
 8007026:	4a44      	ldr	r2, [pc, #272]	; (8007138 <_vfiprintf_r+0x210>)
 8007028:	1a80      	subs	r0, r0, r2
 800702a:	fa0b f000 	lsl.w	r0, fp, r0
 800702e:	4318      	orrs	r0, r3
 8007030:	9004      	str	r0, [sp, #16]
 8007032:	4645      	mov	r5, r8
 8007034:	e7be      	b.n	8006fb4 <_vfiprintf_r+0x8c>
 8007036:	9a03      	ldr	r2, [sp, #12]
 8007038:	1d11      	adds	r1, r2, #4
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	9103      	str	r1, [sp, #12]
 800703e:	2a00      	cmp	r2, #0
 8007040:	db01      	blt.n	8007046 <_vfiprintf_r+0x11e>
 8007042:	9207      	str	r2, [sp, #28]
 8007044:	e004      	b.n	8007050 <_vfiprintf_r+0x128>
 8007046:	4252      	negs	r2, r2
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	9207      	str	r2, [sp, #28]
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	f898 3000 	ldrb.w	r3, [r8]
 8007054:	2b2e      	cmp	r3, #46	; 0x2e
 8007056:	d10e      	bne.n	8007076 <_vfiprintf_r+0x14e>
 8007058:	f898 3001 	ldrb.w	r3, [r8, #1]
 800705c:	2b2a      	cmp	r3, #42	; 0x2a
 800705e:	d138      	bne.n	80070d2 <_vfiprintf_r+0x1aa>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9203      	str	r2, [sp, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfb8      	it	lt
 800706c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007070:	f108 0802 	add.w	r8, r8, #2
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	4d33      	ldr	r5, [pc, #204]	; (8007144 <_vfiprintf_r+0x21c>)
 8007078:	f898 1000 	ldrb.w	r1, [r8]
 800707c:	2203      	movs	r2, #3
 800707e:	4628      	mov	r0, r5
 8007080:	f7f9 f8be 	bl	8000200 <memchr>
 8007084:	b140      	cbz	r0, 8007098 <_vfiprintf_r+0x170>
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	1b40      	subs	r0, r0, r5
 800708a:	fa03 f000 	lsl.w	r0, r3, r0
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	4303      	orrs	r3, r0
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	f898 1000 	ldrb.w	r1, [r8]
 800709c:	482a      	ldr	r0, [pc, #168]	; (8007148 <_vfiprintf_r+0x220>)
 800709e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070a2:	2206      	movs	r2, #6
 80070a4:	f108 0701 	add.w	r7, r8, #1
 80070a8:	f7f9 f8aa 	bl	8000200 <memchr>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d037      	beq.n	8007120 <_vfiprintf_r+0x1f8>
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <_vfiprintf_r+0x224>)
 80070b2:	bb1b      	cbnz	r3, 80070fc <_vfiprintf_r+0x1d4>
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	3307      	adds	r3, #7
 80070b8:	f023 0307 	bic.w	r3, r3, #7
 80070bc:	3308      	adds	r3, #8
 80070be:	9303      	str	r3, [sp, #12]
 80070c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c2:	444b      	add	r3, r9
 80070c4:	9309      	str	r3, [sp, #36]	; 0x24
 80070c6:	e750      	b.n	8006f6a <_vfiprintf_r+0x42>
 80070c8:	fb05 3202 	mla	r2, r5, r2, r3
 80070cc:	2001      	movs	r0, #1
 80070ce:	4688      	mov	r8, r1
 80070d0:	e78a      	b.n	8006fe8 <_vfiprintf_r+0xc0>
 80070d2:	2300      	movs	r3, #0
 80070d4:	f108 0801 	add.w	r8, r8, #1
 80070d8:	9305      	str	r3, [sp, #20]
 80070da:	4619      	mov	r1, r3
 80070dc:	250a      	movs	r5, #10
 80070de:	4640      	mov	r0, r8
 80070e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070e4:	3a30      	subs	r2, #48	; 0x30
 80070e6:	2a09      	cmp	r2, #9
 80070e8:	d903      	bls.n	80070f2 <_vfiprintf_r+0x1ca>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0c3      	beq.n	8007076 <_vfiprintf_r+0x14e>
 80070ee:	9105      	str	r1, [sp, #20]
 80070f0:	e7c1      	b.n	8007076 <_vfiprintf_r+0x14e>
 80070f2:	fb05 2101 	mla	r1, r5, r1, r2
 80070f6:	2301      	movs	r3, #1
 80070f8:	4680      	mov	r8, r0
 80070fa:	e7f0      	b.n	80070de <_vfiprintf_r+0x1b6>
 80070fc:	ab03      	add	r3, sp, #12
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4622      	mov	r2, r4
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <_vfiprintf_r+0x228>)
 8007104:	a904      	add	r1, sp, #16
 8007106:	4630      	mov	r0, r6
 8007108:	f3af 8000 	nop.w
 800710c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007110:	4681      	mov	r9, r0
 8007112:	d1d5      	bne.n	80070c0 <_vfiprintf_r+0x198>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	065b      	lsls	r3, r3, #25
 8007118:	f53f af7e 	bmi.w	8007018 <_vfiprintf_r+0xf0>
 800711c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800711e:	e77d      	b.n	800701c <_vfiprintf_r+0xf4>
 8007120:	ab03      	add	r3, sp, #12
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4622      	mov	r2, r4
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <_vfiprintf_r+0x228>)
 8007128:	a904      	add	r1, sp, #16
 800712a:	4630      	mov	r0, r6
 800712c:	f000 f888 	bl	8007240 <_printf_i>
 8007130:	e7ec      	b.n	800710c <_vfiprintf_r+0x1e4>
 8007132:	bf00      	nop
 8007134:	08008364 	.word	0x08008364
 8007138:	0800820e 	.word	0x0800820e
 800713c:	08008384 	.word	0x08008384
 8007140:	08008344 	.word	0x08008344
 8007144:	08008214 	.word	0x08008214
 8007148:	08008218 	.word	0x08008218
 800714c:	00000000 	.word	0x00000000
 8007150:	08006f03 	.word	0x08006f03

08007154 <_printf_common>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	4691      	mov	r9, r2
 800715a:	461f      	mov	r7, r3
 800715c:	688a      	ldr	r2, [r1, #8]
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007164:	4293      	cmp	r3, r2
 8007166:	bfb8      	it	lt
 8007168:	4613      	movlt	r3, r2
 800716a:	f8c9 3000 	str.w	r3, [r9]
 800716e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007172:	4606      	mov	r6, r0
 8007174:	460c      	mov	r4, r1
 8007176:	b112      	cbz	r2, 800717e <_printf_common+0x2a>
 8007178:	3301      	adds	r3, #1
 800717a:	f8c9 3000 	str.w	r3, [r9]
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	0699      	lsls	r1, r3, #26
 8007182:	bf42      	ittt	mi
 8007184:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007188:	3302      	addmi	r3, #2
 800718a:	f8c9 3000 	strmi.w	r3, [r9]
 800718e:	6825      	ldr	r5, [r4, #0]
 8007190:	f015 0506 	ands.w	r5, r5, #6
 8007194:	d107      	bne.n	80071a6 <_printf_common+0x52>
 8007196:	f104 0a19 	add.w	sl, r4, #25
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	f8d9 2000 	ldr.w	r2, [r9]
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	42ab      	cmp	r3, r5
 80071a4:	dc28      	bgt.n	80071f8 <_printf_common+0xa4>
 80071a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80071aa:	6822      	ldr	r2, [r4, #0]
 80071ac:	3300      	adds	r3, #0
 80071ae:	bf18      	it	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	0692      	lsls	r2, r2, #26
 80071b4:	d42d      	bmi.n	8007212 <_printf_common+0xbe>
 80071b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071ba:	4639      	mov	r1, r7
 80071bc:	4630      	mov	r0, r6
 80071be:	47c0      	blx	r8
 80071c0:	3001      	adds	r0, #1
 80071c2:	d020      	beq.n	8007206 <_printf_common+0xb2>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	68e5      	ldr	r5, [r4, #12]
 80071c8:	f8d9 2000 	ldr.w	r2, [r9]
 80071cc:	f003 0306 	and.w	r3, r3, #6
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	bf08      	it	eq
 80071d4:	1aad      	subeq	r5, r5, r2
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	6922      	ldr	r2, [r4, #16]
 80071da:	bf0c      	ite	eq
 80071dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071e0:	2500      	movne	r5, #0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	bfc4      	itt	gt
 80071e6:	1a9b      	subgt	r3, r3, r2
 80071e8:	18ed      	addgt	r5, r5, r3
 80071ea:	f04f 0900 	mov.w	r9, #0
 80071ee:	341a      	adds	r4, #26
 80071f0:	454d      	cmp	r5, r9
 80071f2:	d11a      	bne.n	800722a <_printf_common+0xd6>
 80071f4:	2000      	movs	r0, #0
 80071f6:	e008      	b.n	800720a <_printf_common+0xb6>
 80071f8:	2301      	movs	r3, #1
 80071fa:	4652      	mov	r2, sl
 80071fc:	4639      	mov	r1, r7
 80071fe:	4630      	mov	r0, r6
 8007200:	47c0      	blx	r8
 8007202:	3001      	adds	r0, #1
 8007204:	d103      	bne.n	800720e <_printf_common+0xba>
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720e:	3501      	adds	r5, #1
 8007210:	e7c3      	b.n	800719a <_printf_common+0x46>
 8007212:	18e1      	adds	r1, r4, r3
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	2030      	movs	r0, #48	; 0x30
 8007218:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800721c:	4422      	add	r2, r4
 800721e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007222:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007226:	3302      	adds	r3, #2
 8007228:	e7c5      	b.n	80071b6 <_printf_common+0x62>
 800722a:	2301      	movs	r3, #1
 800722c:	4622      	mov	r2, r4
 800722e:	4639      	mov	r1, r7
 8007230:	4630      	mov	r0, r6
 8007232:	47c0      	blx	r8
 8007234:	3001      	adds	r0, #1
 8007236:	d0e6      	beq.n	8007206 <_printf_common+0xb2>
 8007238:	f109 0901 	add.w	r9, r9, #1
 800723c:	e7d8      	b.n	80071f0 <_printf_common+0x9c>
	...

08007240 <_printf_i>:
 8007240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007244:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007248:	460c      	mov	r4, r1
 800724a:	7e09      	ldrb	r1, [r1, #24]
 800724c:	b085      	sub	sp, #20
 800724e:	296e      	cmp	r1, #110	; 0x6e
 8007250:	4617      	mov	r7, r2
 8007252:	4606      	mov	r6, r0
 8007254:	4698      	mov	r8, r3
 8007256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007258:	f000 80b3 	beq.w	80073c2 <_printf_i+0x182>
 800725c:	d822      	bhi.n	80072a4 <_printf_i+0x64>
 800725e:	2963      	cmp	r1, #99	; 0x63
 8007260:	d036      	beq.n	80072d0 <_printf_i+0x90>
 8007262:	d80a      	bhi.n	800727a <_printf_i+0x3a>
 8007264:	2900      	cmp	r1, #0
 8007266:	f000 80b9 	beq.w	80073dc <_printf_i+0x19c>
 800726a:	2958      	cmp	r1, #88	; 0x58
 800726c:	f000 8083 	beq.w	8007376 <_printf_i+0x136>
 8007270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007274:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007278:	e032      	b.n	80072e0 <_printf_i+0xa0>
 800727a:	2964      	cmp	r1, #100	; 0x64
 800727c:	d001      	beq.n	8007282 <_printf_i+0x42>
 800727e:	2969      	cmp	r1, #105	; 0x69
 8007280:	d1f6      	bne.n	8007270 <_printf_i+0x30>
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	6813      	ldr	r3, [r2, #0]
 8007286:	0605      	lsls	r5, r0, #24
 8007288:	f103 0104 	add.w	r1, r3, #4
 800728c:	d52a      	bpl.n	80072e4 <_printf_i+0xa4>
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6011      	str	r1, [r2, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da03      	bge.n	800729e <_printf_i+0x5e>
 8007296:	222d      	movs	r2, #45	; 0x2d
 8007298:	425b      	negs	r3, r3
 800729a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800729e:	486f      	ldr	r0, [pc, #444]	; (800745c <_printf_i+0x21c>)
 80072a0:	220a      	movs	r2, #10
 80072a2:	e039      	b.n	8007318 <_printf_i+0xd8>
 80072a4:	2973      	cmp	r1, #115	; 0x73
 80072a6:	f000 809d 	beq.w	80073e4 <_printf_i+0x1a4>
 80072aa:	d808      	bhi.n	80072be <_printf_i+0x7e>
 80072ac:	296f      	cmp	r1, #111	; 0x6f
 80072ae:	d020      	beq.n	80072f2 <_printf_i+0xb2>
 80072b0:	2970      	cmp	r1, #112	; 0x70
 80072b2:	d1dd      	bne.n	8007270 <_printf_i+0x30>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f043 0320 	orr.w	r3, r3, #32
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	e003      	b.n	80072c6 <_printf_i+0x86>
 80072be:	2975      	cmp	r1, #117	; 0x75
 80072c0:	d017      	beq.n	80072f2 <_printf_i+0xb2>
 80072c2:	2978      	cmp	r1, #120	; 0x78
 80072c4:	d1d4      	bne.n	8007270 <_printf_i+0x30>
 80072c6:	2378      	movs	r3, #120	; 0x78
 80072c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072cc:	4864      	ldr	r0, [pc, #400]	; (8007460 <_printf_i+0x220>)
 80072ce:	e055      	b.n	800737c <_printf_i+0x13c>
 80072d0:	6813      	ldr	r3, [r2, #0]
 80072d2:	1d19      	adds	r1, r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6011      	str	r1, [r2, #0]
 80072d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072e0:	2301      	movs	r3, #1
 80072e2:	e08c      	b.n	80073fe <_printf_i+0x1be>
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6011      	str	r1, [r2, #0]
 80072e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ec:	bf18      	it	ne
 80072ee:	b21b      	sxthne	r3, r3
 80072f0:	e7cf      	b.n	8007292 <_printf_i+0x52>
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	6825      	ldr	r5, [r4, #0]
 80072f6:	1d18      	adds	r0, r3, #4
 80072f8:	6010      	str	r0, [r2, #0]
 80072fa:	0628      	lsls	r0, r5, #24
 80072fc:	d501      	bpl.n	8007302 <_printf_i+0xc2>
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	e002      	b.n	8007308 <_printf_i+0xc8>
 8007302:	0668      	lsls	r0, r5, #25
 8007304:	d5fb      	bpl.n	80072fe <_printf_i+0xbe>
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	4854      	ldr	r0, [pc, #336]	; (800745c <_printf_i+0x21c>)
 800730a:	296f      	cmp	r1, #111	; 0x6f
 800730c:	bf14      	ite	ne
 800730e:	220a      	movne	r2, #10
 8007310:	2208      	moveq	r2, #8
 8007312:	2100      	movs	r1, #0
 8007314:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007318:	6865      	ldr	r5, [r4, #4]
 800731a:	60a5      	str	r5, [r4, #8]
 800731c:	2d00      	cmp	r5, #0
 800731e:	f2c0 8095 	blt.w	800744c <_printf_i+0x20c>
 8007322:	6821      	ldr	r1, [r4, #0]
 8007324:	f021 0104 	bic.w	r1, r1, #4
 8007328:	6021      	str	r1, [r4, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d13d      	bne.n	80073aa <_printf_i+0x16a>
 800732e:	2d00      	cmp	r5, #0
 8007330:	f040 808e 	bne.w	8007450 <_printf_i+0x210>
 8007334:	4665      	mov	r5, ip
 8007336:	2a08      	cmp	r2, #8
 8007338:	d10b      	bne.n	8007352 <_printf_i+0x112>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	07db      	lsls	r3, r3, #31
 800733e:	d508      	bpl.n	8007352 <_printf_i+0x112>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	6862      	ldr	r2, [r4, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	bfde      	ittt	le
 8007348:	2330      	movle	r3, #48	; 0x30
 800734a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800734e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007352:	ebac 0305 	sub.w	r3, ip, r5
 8007356:	6123      	str	r3, [r4, #16]
 8007358:	f8cd 8000 	str.w	r8, [sp]
 800735c:	463b      	mov	r3, r7
 800735e:	aa03      	add	r2, sp, #12
 8007360:	4621      	mov	r1, r4
 8007362:	4630      	mov	r0, r6
 8007364:	f7ff fef6 	bl	8007154 <_printf_common>
 8007368:	3001      	adds	r0, #1
 800736a:	d14d      	bne.n	8007408 <_printf_i+0x1c8>
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	b005      	add	sp, #20
 8007372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007376:	4839      	ldr	r0, [pc, #228]	; (800745c <_printf_i+0x21c>)
 8007378:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800737c:	6813      	ldr	r3, [r2, #0]
 800737e:	6821      	ldr	r1, [r4, #0]
 8007380:	1d1d      	adds	r5, r3, #4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6015      	str	r5, [r2, #0]
 8007386:	060a      	lsls	r2, r1, #24
 8007388:	d50b      	bpl.n	80073a2 <_printf_i+0x162>
 800738a:	07ca      	lsls	r2, r1, #31
 800738c:	bf44      	itt	mi
 800738e:	f041 0120 	orrmi.w	r1, r1, #32
 8007392:	6021      	strmi	r1, [r4, #0]
 8007394:	b91b      	cbnz	r3, 800739e <_printf_i+0x15e>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	f022 0220 	bic.w	r2, r2, #32
 800739c:	6022      	str	r2, [r4, #0]
 800739e:	2210      	movs	r2, #16
 80073a0:	e7b7      	b.n	8007312 <_printf_i+0xd2>
 80073a2:	064d      	lsls	r5, r1, #25
 80073a4:	bf48      	it	mi
 80073a6:	b29b      	uxthmi	r3, r3
 80073a8:	e7ef      	b.n	800738a <_printf_i+0x14a>
 80073aa:	4665      	mov	r5, ip
 80073ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b0:	fb02 3311 	mls	r3, r2, r1, r3
 80073b4:	5cc3      	ldrb	r3, [r0, r3]
 80073b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80073ba:	460b      	mov	r3, r1
 80073bc:	2900      	cmp	r1, #0
 80073be:	d1f5      	bne.n	80073ac <_printf_i+0x16c>
 80073c0:	e7b9      	b.n	8007336 <_printf_i+0xf6>
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	6825      	ldr	r5, [r4, #0]
 80073c6:	6961      	ldr	r1, [r4, #20]
 80073c8:	1d18      	adds	r0, r3, #4
 80073ca:	6010      	str	r0, [r2, #0]
 80073cc:	0628      	lsls	r0, r5, #24
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	d501      	bpl.n	80073d6 <_printf_i+0x196>
 80073d2:	6019      	str	r1, [r3, #0]
 80073d4:	e002      	b.n	80073dc <_printf_i+0x19c>
 80073d6:	066a      	lsls	r2, r5, #25
 80073d8:	d5fb      	bpl.n	80073d2 <_printf_i+0x192>
 80073da:	8019      	strh	r1, [r3, #0]
 80073dc:	2300      	movs	r3, #0
 80073de:	6123      	str	r3, [r4, #16]
 80073e0:	4665      	mov	r5, ip
 80073e2:	e7b9      	b.n	8007358 <_printf_i+0x118>
 80073e4:	6813      	ldr	r3, [r2, #0]
 80073e6:	1d19      	adds	r1, r3, #4
 80073e8:	6011      	str	r1, [r2, #0]
 80073ea:	681d      	ldr	r5, [r3, #0]
 80073ec:	6862      	ldr	r2, [r4, #4]
 80073ee:	2100      	movs	r1, #0
 80073f0:	4628      	mov	r0, r5
 80073f2:	f7f8 ff05 	bl	8000200 <memchr>
 80073f6:	b108      	cbz	r0, 80073fc <_printf_i+0x1bc>
 80073f8:	1b40      	subs	r0, r0, r5
 80073fa:	6060      	str	r0, [r4, #4]
 80073fc:	6863      	ldr	r3, [r4, #4]
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	2300      	movs	r3, #0
 8007402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007406:	e7a7      	b.n	8007358 <_printf_i+0x118>
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	462a      	mov	r2, r5
 800740c:	4639      	mov	r1, r7
 800740e:	4630      	mov	r0, r6
 8007410:	47c0      	blx	r8
 8007412:	3001      	adds	r0, #1
 8007414:	d0aa      	beq.n	800736c <_printf_i+0x12c>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	079b      	lsls	r3, r3, #30
 800741a:	d413      	bmi.n	8007444 <_printf_i+0x204>
 800741c:	68e0      	ldr	r0, [r4, #12]
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	4298      	cmp	r0, r3
 8007422:	bfb8      	it	lt
 8007424:	4618      	movlt	r0, r3
 8007426:	e7a3      	b.n	8007370 <_printf_i+0x130>
 8007428:	2301      	movs	r3, #1
 800742a:	464a      	mov	r2, r9
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	47c0      	blx	r8
 8007432:	3001      	adds	r0, #1
 8007434:	d09a      	beq.n	800736c <_printf_i+0x12c>
 8007436:	3501      	adds	r5, #1
 8007438:	68e3      	ldr	r3, [r4, #12]
 800743a:	9a03      	ldr	r2, [sp, #12]
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	42ab      	cmp	r3, r5
 8007440:	dcf2      	bgt.n	8007428 <_printf_i+0x1e8>
 8007442:	e7eb      	b.n	800741c <_printf_i+0x1dc>
 8007444:	2500      	movs	r5, #0
 8007446:	f104 0919 	add.w	r9, r4, #25
 800744a:	e7f5      	b.n	8007438 <_printf_i+0x1f8>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1ac      	bne.n	80073aa <_printf_i+0x16a>
 8007450:	7803      	ldrb	r3, [r0, #0]
 8007452:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007456:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745a:	e76c      	b.n	8007336 <_printf_i+0xf6>
 800745c:	0800821f 	.word	0x0800821f
 8007460:	08008230 	.word	0x08008230

08007464 <iprintf>:
 8007464:	b40f      	push	{r0, r1, r2, r3}
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <iprintf+0x2c>)
 8007468:	b513      	push	{r0, r1, r4, lr}
 800746a:	681c      	ldr	r4, [r3, #0]
 800746c:	b124      	cbz	r4, 8007478 <iprintf+0x14>
 800746e:	69a3      	ldr	r3, [r4, #24]
 8007470:	b913      	cbnz	r3, 8007478 <iprintf+0x14>
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fad8 	bl	8007a28 <__sinit>
 8007478:	ab05      	add	r3, sp, #20
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	68a1      	ldr	r1, [r4, #8]
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff fd51 	bl	8006f28 <_vfiprintf_r>
 8007486:	b002      	add	sp, #8
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	b004      	add	sp, #16
 800748e:	4770      	bx	lr
 8007490:	200000e4 	.word	0x200000e4

08007494 <_sbrk_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4c06      	ldr	r4, [pc, #24]	; (80074b0 <_sbrk_r+0x1c>)
 8007498:	2300      	movs	r3, #0
 800749a:	4605      	mov	r5, r0
 800749c:	4608      	mov	r0, r1
 800749e:	6023      	str	r3, [r4, #0]
 80074a0:	f7fd f88a 	bl	80045b8 <_sbrk>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_sbrk_r+0x1a>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_sbrk_r+0x1a>
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20014464 	.word	0x20014464

080074b4 <strtok>:
 80074b4:	4b13      	ldr	r3, [pc, #76]	; (8007504 <strtok+0x50>)
 80074b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ba:	681d      	ldr	r5, [r3, #0]
 80074bc:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80074be:	4606      	mov	r6, r0
 80074c0:	460f      	mov	r7, r1
 80074c2:	b9b4      	cbnz	r4, 80074f2 <strtok+0x3e>
 80074c4:	2050      	movs	r0, #80	; 0x50
 80074c6:	f7ff fc2f 	bl	8006d28 <malloc>
 80074ca:	65a8      	str	r0, [r5, #88]	; 0x58
 80074cc:	e9c0 4400 	strd	r4, r4, [r0]
 80074d0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80074d4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80074d8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80074dc:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80074e0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80074e4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80074e8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80074ec:	6184      	str	r4, [r0, #24]
 80074ee:	7704      	strb	r4, [r0, #28]
 80074f0:	6244      	str	r4, [r0, #36]	; 0x24
 80074f2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80074f4:	4639      	mov	r1, r7
 80074f6:	4630      	mov	r0, r6
 80074f8:	2301      	movs	r3, #1
 80074fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fe:	f000 b803 	b.w	8007508 <__strtok_r>
 8007502:	bf00      	nop
 8007504:	200000e4 	.word	0x200000e4

08007508 <__strtok_r>:
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	b918      	cbnz	r0, 8007514 <__strtok_r+0xc>
 800750c:	6810      	ldr	r0, [r2, #0]
 800750e:	b908      	cbnz	r0, 8007514 <__strtok_r+0xc>
 8007510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007512:	4620      	mov	r0, r4
 8007514:	4604      	mov	r4, r0
 8007516:	460f      	mov	r7, r1
 8007518:	f814 5b01 	ldrb.w	r5, [r4], #1
 800751c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007520:	b91e      	cbnz	r6, 800752a <__strtok_r+0x22>
 8007522:	b96d      	cbnz	r5, 8007540 <__strtok_r+0x38>
 8007524:	6015      	str	r5, [r2, #0]
 8007526:	4628      	mov	r0, r5
 8007528:	e7f2      	b.n	8007510 <__strtok_r+0x8>
 800752a:	42b5      	cmp	r5, r6
 800752c:	d1f6      	bne.n	800751c <__strtok_r+0x14>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ef      	bne.n	8007512 <__strtok_r+0xa>
 8007532:	6014      	str	r4, [r2, #0]
 8007534:	7003      	strb	r3, [r0, #0]
 8007536:	e7eb      	b.n	8007510 <__strtok_r+0x8>
 8007538:	462b      	mov	r3, r5
 800753a:	e00d      	b.n	8007558 <__strtok_r+0x50>
 800753c:	b926      	cbnz	r6, 8007548 <__strtok_r+0x40>
 800753e:	461c      	mov	r4, r3
 8007540:	4623      	mov	r3, r4
 8007542:	460f      	mov	r7, r1
 8007544:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007548:	f817 6b01 	ldrb.w	r6, [r7], #1
 800754c:	42b5      	cmp	r5, r6
 800754e:	d1f5      	bne.n	800753c <__strtok_r+0x34>
 8007550:	2d00      	cmp	r5, #0
 8007552:	d0f1      	beq.n	8007538 <__strtok_r+0x30>
 8007554:	2100      	movs	r1, #0
 8007556:	7021      	strb	r1, [r4, #0]
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e7d9      	b.n	8007510 <__strtok_r+0x8>

0800755c <_strtol_l.isra.0>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	4680      	mov	r8, r0
 8007562:	4689      	mov	r9, r1
 8007564:	4692      	mov	sl, r2
 8007566:	461e      	mov	r6, r3
 8007568:	460f      	mov	r7, r1
 800756a:	463d      	mov	r5, r7
 800756c:	9808      	ldr	r0, [sp, #32]
 800756e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007572:	f7ff fbc7 	bl	8006d04 <__locale_ctype_ptr_l>
 8007576:	4420      	add	r0, r4
 8007578:	7843      	ldrb	r3, [r0, #1]
 800757a:	f013 0308 	ands.w	r3, r3, #8
 800757e:	d132      	bne.n	80075e6 <_strtol_l.isra.0+0x8a>
 8007580:	2c2d      	cmp	r4, #45	; 0x2d
 8007582:	d132      	bne.n	80075ea <_strtol_l.isra.0+0x8e>
 8007584:	787c      	ldrb	r4, [r7, #1]
 8007586:	1cbd      	adds	r5, r7, #2
 8007588:	2201      	movs	r2, #1
 800758a:	2e00      	cmp	r6, #0
 800758c:	d05d      	beq.n	800764a <_strtol_l.isra.0+0xee>
 800758e:	2e10      	cmp	r6, #16
 8007590:	d109      	bne.n	80075a6 <_strtol_l.isra.0+0x4a>
 8007592:	2c30      	cmp	r4, #48	; 0x30
 8007594:	d107      	bne.n	80075a6 <_strtol_l.isra.0+0x4a>
 8007596:	782b      	ldrb	r3, [r5, #0]
 8007598:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800759c:	2b58      	cmp	r3, #88	; 0x58
 800759e:	d14f      	bne.n	8007640 <_strtol_l.isra.0+0xe4>
 80075a0:	786c      	ldrb	r4, [r5, #1]
 80075a2:	2610      	movs	r6, #16
 80075a4:	3502      	adds	r5, #2
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	bf14      	ite	ne
 80075aa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80075ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80075b2:	2700      	movs	r7, #0
 80075b4:	fbb1 fcf6 	udiv	ip, r1, r6
 80075b8:	4638      	mov	r0, r7
 80075ba:	fb06 1e1c 	mls	lr, r6, ip, r1
 80075be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d817      	bhi.n	80075f6 <_strtol_l.isra.0+0x9a>
 80075c6:	461c      	mov	r4, r3
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	dd23      	ble.n	8007614 <_strtol_l.isra.0+0xb8>
 80075cc:	1c7b      	adds	r3, r7, #1
 80075ce:	d007      	beq.n	80075e0 <_strtol_l.isra.0+0x84>
 80075d0:	4584      	cmp	ip, r0
 80075d2:	d31c      	bcc.n	800760e <_strtol_l.isra.0+0xb2>
 80075d4:	d101      	bne.n	80075da <_strtol_l.isra.0+0x7e>
 80075d6:	45a6      	cmp	lr, r4
 80075d8:	db19      	blt.n	800760e <_strtol_l.isra.0+0xb2>
 80075da:	fb00 4006 	mla	r0, r0, r6, r4
 80075de:	2701      	movs	r7, #1
 80075e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075e4:	e7eb      	b.n	80075be <_strtol_l.isra.0+0x62>
 80075e6:	462f      	mov	r7, r5
 80075e8:	e7bf      	b.n	800756a <_strtol_l.isra.0+0xe>
 80075ea:	2c2b      	cmp	r4, #43	; 0x2b
 80075ec:	bf04      	itt	eq
 80075ee:	1cbd      	addeq	r5, r7, #2
 80075f0:	787c      	ldrbeq	r4, [r7, #1]
 80075f2:	461a      	mov	r2, r3
 80075f4:	e7c9      	b.n	800758a <_strtol_l.isra.0+0x2e>
 80075f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80075fa:	2b19      	cmp	r3, #25
 80075fc:	d801      	bhi.n	8007602 <_strtol_l.isra.0+0xa6>
 80075fe:	3c37      	subs	r4, #55	; 0x37
 8007600:	e7e2      	b.n	80075c8 <_strtol_l.isra.0+0x6c>
 8007602:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007606:	2b19      	cmp	r3, #25
 8007608:	d804      	bhi.n	8007614 <_strtol_l.isra.0+0xb8>
 800760a:	3c57      	subs	r4, #87	; 0x57
 800760c:	e7dc      	b.n	80075c8 <_strtol_l.isra.0+0x6c>
 800760e:	f04f 37ff 	mov.w	r7, #4294967295
 8007612:	e7e5      	b.n	80075e0 <_strtol_l.isra.0+0x84>
 8007614:	1c7b      	adds	r3, r7, #1
 8007616:	d108      	bne.n	800762a <_strtol_l.isra.0+0xce>
 8007618:	2322      	movs	r3, #34	; 0x22
 800761a:	f8c8 3000 	str.w	r3, [r8]
 800761e:	4608      	mov	r0, r1
 8007620:	f1ba 0f00 	cmp.w	sl, #0
 8007624:	d107      	bne.n	8007636 <_strtol_l.isra.0+0xda>
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	b102      	cbz	r2, 800762e <_strtol_l.isra.0+0xd2>
 800762c:	4240      	negs	r0, r0
 800762e:	f1ba 0f00 	cmp.w	sl, #0
 8007632:	d0f8      	beq.n	8007626 <_strtol_l.isra.0+0xca>
 8007634:	b10f      	cbz	r7, 800763a <_strtol_l.isra.0+0xde>
 8007636:	f105 39ff 	add.w	r9, r5, #4294967295
 800763a:	f8ca 9000 	str.w	r9, [sl]
 800763e:	e7f2      	b.n	8007626 <_strtol_l.isra.0+0xca>
 8007640:	2430      	movs	r4, #48	; 0x30
 8007642:	2e00      	cmp	r6, #0
 8007644:	d1af      	bne.n	80075a6 <_strtol_l.isra.0+0x4a>
 8007646:	2608      	movs	r6, #8
 8007648:	e7ad      	b.n	80075a6 <_strtol_l.isra.0+0x4a>
 800764a:	2c30      	cmp	r4, #48	; 0x30
 800764c:	d0a3      	beq.n	8007596 <_strtol_l.isra.0+0x3a>
 800764e:	260a      	movs	r6, #10
 8007650:	e7a9      	b.n	80075a6 <_strtol_l.isra.0+0x4a>
	...

08007654 <strtol>:
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <strtol+0x24>)
 8007656:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007658:	681c      	ldr	r4, [r3, #0]
 800765a:	4d08      	ldr	r5, [pc, #32]	; (800767c <strtol+0x28>)
 800765c:	6a23      	ldr	r3, [r4, #32]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf08      	it	eq
 8007662:	462b      	moveq	r3, r5
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	4613      	mov	r3, r2
 8007668:	460a      	mov	r2, r1
 800766a:	4601      	mov	r1, r0
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff ff75 	bl	800755c <_strtol_l.isra.0>
 8007672:	b003      	add	sp, #12
 8007674:	bd30      	pop	{r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	200000e4 	.word	0x200000e4
 800767c:	20000148 	.word	0x20000148

08007680 <viprintf>:
 8007680:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <viprintf+0x28>)
 8007682:	b570      	push	{r4, r5, r6, lr}
 8007684:	681c      	ldr	r4, [r3, #0]
 8007686:	4605      	mov	r5, r0
 8007688:	460e      	mov	r6, r1
 800768a:	b124      	cbz	r4, 8007696 <viprintf+0x16>
 800768c:	69a3      	ldr	r3, [r4, #24]
 800768e:	b913      	cbnz	r3, 8007696 <viprintf+0x16>
 8007690:	4620      	mov	r0, r4
 8007692:	f000 f9c9 	bl	8007a28 <__sinit>
 8007696:	4633      	mov	r3, r6
 8007698:	462a      	mov	r2, r5
 800769a:	68a1      	ldr	r1, [r4, #8]
 800769c:	4620      	mov	r0, r4
 800769e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076a2:	f7ff bc41 	b.w	8006f28 <_vfiprintf_r>
 80076a6:	bf00      	nop
 80076a8:	200000e4 	.word	0x200000e4

080076ac <__swbuf_r>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	460e      	mov	r6, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	4605      	mov	r5, r0
 80076b4:	b118      	cbz	r0, 80076be <__swbuf_r+0x12>
 80076b6:	6983      	ldr	r3, [r0, #24]
 80076b8:	b90b      	cbnz	r3, 80076be <__swbuf_r+0x12>
 80076ba:	f000 f9b5 	bl	8007a28 <__sinit>
 80076be:	4b21      	ldr	r3, [pc, #132]	; (8007744 <__swbuf_r+0x98>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	d12a      	bne.n	800771a <__swbuf_r+0x6e>
 80076c4:	686c      	ldr	r4, [r5, #4]
 80076c6:	69a3      	ldr	r3, [r4, #24]
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	071a      	lsls	r2, r3, #28
 80076ce:	d52e      	bpl.n	800772e <__swbuf_r+0x82>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	b363      	cbz	r3, 800772e <__swbuf_r+0x82>
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	6820      	ldr	r0, [r4, #0]
 80076d8:	1ac0      	subs	r0, r0, r3
 80076da:	6963      	ldr	r3, [r4, #20]
 80076dc:	b2f6      	uxtb	r6, r6
 80076de:	4283      	cmp	r3, r0
 80076e0:	4637      	mov	r7, r6
 80076e2:	dc04      	bgt.n	80076ee <__swbuf_r+0x42>
 80076e4:	4621      	mov	r1, r4
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 f934 	bl	8007954 <_fflush_r>
 80076ec:	bb28      	cbnz	r0, 800773a <__swbuf_r+0x8e>
 80076ee:	68a3      	ldr	r3, [r4, #8]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	60a3      	str	r3, [r4, #8]
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	6022      	str	r2, [r4, #0]
 80076fa:	701e      	strb	r6, [r3, #0]
 80076fc:	6963      	ldr	r3, [r4, #20]
 80076fe:	3001      	adds	r0, #1
 8007700:	4283      	cmp	r3, r0
 8007702:	d004      	beq.n	800770e <__swbuf_r+0x62>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	07db      	lsls	r3, r3, #31
 8007708:	d519      	bpl.n	800773e <__swbuf_r+0x92>
 800770a:	2e0a      	cmp	r6, #10
 800770c:	d117      	bne.n	800773e <__swbuf_r+0x92>
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f000 f91f 	bl	8007954 <_fflush_r>
 8007716:	b190      	cbz	r0, 800773e <__swbuf_r+0x92>
 8007718:	e00f      	b.n	800773a <__swbuf_r+0x8e>
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <__swbuf_r+0x9c>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d101      	bne.n	8007724 <__swbuf_r+0x78>
 8007720:	68ac      	ldr	r4, [r5, #8]
 8007722:	e7d0      	b.n	80076c6 <__swbuf_r+0x1a>
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <__swbuf_r+0xa0>)
 8007726:	429c      	cmp	r4, r3
 8007728:	bf08      	it	eq
 800772a:	68ec      	ldreq	r4, [r5, #12]
 800772c:	e7cb      	b.n	80076c6 <__swbuf_r+0x1a>
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f000 f81b 	bl	800776c <__swsetup_r>
 8007736:	2800      	cmp	r0, #0
 8007738:	d0cc      	beq.n	80076d4 <__swbuf_r+0x28>
 800773a:	f04f 37ff 	mov.w	r7, #4294967295
 800773e:	4638      	mov	r0, r7
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007742:	bf00      	nop
 8007744:	08008364 	.word	0x08008364
 8007748:	08008384 	.word	0x08008384
 800774c:	08008344 	.word	0x08008344

08007750 <__ascii_wctomb>:
 8007750:	b149      	cbz	r1, 8007766 <__ascii_wctomb+0x16>
 8007752:	2aff      	cmp	r2, #255	; 0xff
 8007754:	bf85      	ittet	hi
 8007756:	238a      	movhi	r3, #138	; 0x8a
 8007758:	6003      	strhi	r3, [r0, #0]
 800775a:	700a      	strbls	r2, [r1, #0]
 800775c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007760:	bf98      	it	ls
 8007762:	2001      	movls	r0, #1
 8007764:	4770      	bx	lr
 8007766:	4608      	mov	r0, r1
 8007768:	4770      	bx	lr
	...

0800776c <__swsetup_r>:
 800776c:	4b32      	ldr	r3, [pc, #200]	; (8007838 <__swsetup_r+0xcc>)
 800776e:	b570      	push	{r4, r5, r6, lr}
 8007770:	681d      	ldr	r5, [r3, #0]
 8007772:	4606      	mov	r6, r0
 8007774:	460c      	mov	r4, r1
 8007776:	b125      	cbz	r5, 8007782 <__swsetup_r+0x16>
 8007778:	69ab      	ldr	r3, [r5, #24]
 800777a:	b913      	cbnz	r3, 8007782 <__swsetup_r+0x16>
 800777c:	4628      	mov	r0, r5
 800777e:	f000 f953 	bl	8007a28 <__sinit>
 8007782:	4b2e      	ldr	r3, [pc, #184]	; (800783c <__swsetup_r+0xd0>)
 8007784:	429c      	cmp	r4, r3
 8007786:	d10f      	bne.n	80077a8 <__swsetup_r+0x3c>
 8007788:	686c      	ldr	r4, [r5, #4]
 800778a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800778e:	b29a      	uxth	r2, r3
 8007790:	0715      	lsls	r5, r2, #28
 8007792:	d42c      	bmi.n	80077ee <__swsetup_r+0x82>
 8007794:	06d0      	lsls	r0, r2, #27
 8007796:	d411      	bmi.n	80077bc <__swsetup_r+0x50>
 8007798:	2209      	movs	r2, #9
 800779a:	6032      	str	r2, [r6, #0]
 800779c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295
 80077a6:	e03e      	b.n	8007826 <__swsetup_r+0xba>
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <__swsetup_r+0xd4>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d101      	bne.n	80077b2 <__swsetup_r+0x46>
 80077ae:	68ac      	ldr	r4, [r5, #8]
 80077b0:	e7eb      	b.n	800778a <__swsetup_r+0x1e>
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <__swsetup_r+0xd8>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	bf08      	it	eq
 80077b8:	68ec      	ldreq	r4, [r5, #12]
 80077ba:	e7e6      	b.n	800778a <__swsetup_r+0x1e>
 80077bc:	0751      	lsls	r1, r2, #29
 80077be:	d512      	bpl.n	80077e6 <__swsetup_r+0x7a>
 80077c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c2:	b141      	cbz	r1, 80077d6 <__swsetup_r+0x6a>
 80077c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077c8:	4299      	cmp	r1, r3
 80077ca:	d002      	beq.n	80077d2 <__swsetup_r+0x66>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff fad9 	bl	8006d84 <_free_r>
 80077d2:	2300      	movs	r3, #0
 80077d4:	6363      	str	r3, [r4, #52]	; 0x34
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	2300      	movs	r3, #0
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f043 0308 	orr.w	r3, r3, #8
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	b94b      	cbnz	r3, 8007806 <__swsetup_r+0x9a>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fc:	d003      	beq.n	8007806 <__swsetup_r+0x9a>
 80077fe:	4621      	mov	r1, r4
 8007800:	4630      	mov	r0, r6
 8007802:	f000 f9bf 	bl	8007b84 <__smakebuf_r>
 8007806:	89a2      	ldrh	r2, [r4, #12]
 8007808:	f012 0301 	ands.w	r3, r2, #1
 800780c:	d00c      	beq.n	8007828 <__swsetup_r+0xbc>
 800780e:	2300      	movs	r3, #0
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	6963      	ldr	r3, [r4, #20]
 8007814:	425b      	negs	r3, r3
 8007816:	61a3      	str	r3, [r4, #24]
 8007818:	6923      	ldr	r3, [r4, #16]
 800781a:	b953      	cbnz	r3, 8007832 <__swsetup_r+0xc6>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007824:	d1ba      	bne.n	800779c <__swsetup_r+0x30>
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	0792      	lsls	r2, r2, #30
 800782a:	bf58      	it	pl
 800782c:	6963      	ldrpl	r3, [r4, #20]
 800782e:	60a3      	str	r3, [r4, #8]
 8007830:	e7f2      	b.n	8007818 <__swsetup_r+0xac>
 8007832:	2000      	movs	r0, #0
 8007834:	e7f7      	b.n	8007826 <__swsetup_r+0xba>
 8007836:	bf00      	nop
 8007838:	200000e4 	.word	0x200000e4
 800783c:	08008364 	.word	0x08008364
 8007840:	08008384 	.word	0x08008384
 8007844:	08008344 	.word	0x08008344

08007848 <__sflush_r>:
 8007848:	898a      	ldrh	r2, [r1, #12]
 800784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	4605      	mov	r5, r0
 8007850:	0710      	lsls	r0, r2, #28
 8007852:	460c      	mov	r4, r1
 8007854:	d458      	bmi.n	8007908 <__sflush_r+0xc0>
 8007856:	684b      	ldr	r3, [r1, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc05      	bgt.n	8007868 <__sflush_r+0x20>
 800785c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc02      	bgt.n	8007868 <__sflush_r+0x20>
 8007862:	2000      	movs	r0, #0
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786a:	2e00      	cmp	r6, #0
 800786c:	d0f9      	beq.n	8007862 <__sflush_r+0x1a>
 800786e:	2300      	movs	r3, #0
 8007870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007874:	682f      	ldr	r7, [r5, #0]
 8007876:	6a21      	ldr	r1, [r4, #32]
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	d032      	beq.n	80078e2 <__sflush_r+0x9a>
 800787c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	075a      	lsls	r2, r3, #29
 8007882:	d505      	bpl.n	8007890 <__sflush_r+0x48>
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	1ac0      	subs	r0, r0, r3
 8007888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800788a:	b10b      	cbz	r3, 8007890 <__sflush_r+0x48>
 800788c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800788e:	1ac0      	subs	r0, r0, r3
 8007890:	2300      	movs	r3, #0
 8007892:	4602      	mov	r2, r0
 8007894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007896:	6a21      	ldr	r1, [r4, #32]
 8007898:	4628      	mov	r0, r5
 800789a:	47b0      	blx	r6
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	d106      	bne.n	80078b0 <__sflush_r+0x68>
 80078a2:	6829      	ldr	r1, [r5, #0]
 80078a4:	291d      	cmp	r1, #29
 80078a6:	d848      	bhi.n	800793a <__sflush_r+0xf2>
 80078a8:	4a29      	ldr	r2, [pc, #164]	; (8007950 <__sflush_r+0x108>)
 80078aa:	40ca      	lsrs	r2, r1
 80078ac:	07d6      	lsls	r6, r2, #31
 80078ae:	d544      	bpl.n	800793a <__sflush_r+0xf2>
 80078b0:	2200      	movs	r2, #0
 80078b2:	6062      	str	r2, [r4, #4]
 80078b4:	04d9      	lsls	r1, r3, #19
 80078b6:	6922      	ldr	r2, [r4, #16]
 80078b8:	6022      	str	r2, [r4, #0]
 80078ba:	d504      	bpl.n	80078c6 <__sflush_r+0x7e>
 80078bc:	1c42      	adds	r2, r0, #1
 80078be:	d101      	bne.n	80078c4 <__sflush_r+0x7c>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b903      	cbnz	r3, 80078c6 <__sflush_r+0x7e>
 80078c4:	6560      	str	r0, [r4, #84]	; 0x54
 80078c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c8:	602f      	str	r7, [r5, #0]
 80078ca:	2900      	cmp	r1, #0
 80078cc:	d0c9      	beq.n	8007862 <__sflush_r+0x1a>
 80078ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d002      	beq.n	80078dc <__sflush_r+0x94>
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7ff fa54 	bl	8006d84 <_free_r>
 80078dc:	2000      	movs	r0, #0
 80078de:	6360      	str	r0, [r4, #52]	; 0x34
 80078e0:	e7c0      	b.n	8007864 <__sflush_r+0x1c>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b0      	blx	r6
 80078e8:	1c41      	adds	r1, r0, #1
 80078ea:	d1c8      	bne.n	800787e <__sflush_r+0x36>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c5      	beq.n	800787e <__sflush_r+0x36>
 80078f2:	2b1d      	cmp	r3, #29
 80078f4:	d001      	beq.n	80078fa <__sflush_r+0xb2>
 80078f6:	2b16      	cmp	r3, #22
 80078f8:	d101      	bne.n	80078fe <__sflush_r+0xb6>
 80078fa:	602f      	str	r7, [r5, #0]
 80078fc:	e7b1      	b.n	8007862 <__sflush_r+0x1a>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e7ad      	b.n	8007864 <__sflush_r+0x1c>
 8007908:	690f      	ldr	r7, [r1, #16]
 800790a:	2f00      	cmp	r7, #0
 800790c:	d0a9      	beq.n	8007862 <__sflush_r+0x1a>
 800790e:	0793      	lsls	r3, r2, #30
 8007910:	680e      	ldr	r6, [r1, #0]
 8007912:	bf08      	it	eq
 8007914:	694b      	ldreq	r3, [r1, #20]
 8007916:	600f      	str	r7, [r1, #0]
 8007918:	bf18      	it	ne
 800791a:	2300      	movne	r3, #0
 800791c:	eba6 0807 	sub.w	r8, r6, r7
 8007920:	608b      	str	r3, [r1, #8]
 8007922:	f1b8 0f00 	cmp.w	r8, #0
 8007926:	dd9c      	ble.n	8007862 <__sflush_r+0x1a>
 8007928:	4643      	mov	r3, r8
 800792a:	463a      	mov	r2, r7
 800792c:	6a21      	ldr	r1, [r4, #32]
 800792e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007930:	4628      	mov	r0, r5
 8007932:	47b0      	blx	r6
 8007934:	2800      	cmp	r0, #0
 8007936:	dc06      	bgt.n	8007946 <__sflush_r+0xfe>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e78e      	b.n	8007864 <__sflush_r+0x1c>
 8007946:	4407      	add	r7, r0
 8007948:	eba8 0800 	sub.w	r8, r8, r0
 800794c:	e7e9      	b.n	8007922 <__sflush_r+0xda>
 800794e:	bf00      	nop
 8007950:	20400001 	.word	0x20400001

08007954 <_fflush_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	690b      	ldr	r3, [r1, #16]
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	b1db      	cbz	r3, 8007996 <_fflush_r+0x42>
 800795e:	b118      	cbz	r0, 8007968 <_fflush_r+0x14>
 8007960:	6983      	ldr	r3, [r0, #24]
 8007962:	b90b      	cbnz	r3, 8007968 <_fflush_r+0x14>
 8007964:	f000 f860 	bl	8007a28 <__sinit>
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <_fflush_r+0x48>)
 800796a:	429c      	cmp	r4, r3
 800796c:	d109      	bne.n	8007982 <_fflush_r+0x2e>
 800796e:	686c      	ldr	r4, [r5, #4]
 8007970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007974:	b17b      	cbz	r3, 8007996 <_fflush_r+0x42>
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800797e:	f7ff bf63 	b.w	8007848 <__sflush_r>
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <_fflush_r+0x4c>)
 8007984:	429c      	cmp	r4, r3
 8007986:	d101      	bne.n	800798c <_fflush_r+0x38>
 8007988:	68ac      	ldr	r4, [r5, #8]
 800798a:	e7f1      	b.n	8007970 <_fflush_r+0x1c>
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <_fflush_r+0x50>)
 800798e:	429c      	cmp	r4, r3
 8007990:	bf08      	it	eq
 8007992:	68ec      	ldreq	r4, [r5, #12]
 8007994:	e7ec      	b.n	8007970 <_fflush_r+0x1c>
 8007996:	2000      	movs	r0, #0
 8007998:	bd38      	pop	{r3, r4, r5, pc}
 800799a:	bf00      	nop
 800799c:	08008364 	.word	0x08008364
 80079a0:	08008384 	.word	0x08008384
 80079a4:	08008344 	.word	0x08008344

080079a8 <std>:
 80079a8:	2300      	movs	r3, #0
 80079aa:	b510      	push	{r4, lr}
 80079ac:	4604      	mov	r4, r0
 80079ae:	e9c0 3300 	strd	r3, r3, [r0]
 80079b2:	6083      	str	r3, [r0, #8]
 80079b4:	8181      	strh	r1, [r0, #12]
 80079b6:	6643      	str	r3, [r0, #100]	; 0x64
 80079b8:	81c2      	strh	r2, [r0, #14]
 80079ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079be:	6183      	str	r3, [r0, #24]
 80079c0:	4619      	mov	r1, r3
 80079c2:	2208      	movs	r2, #8
 80079c4:	305c      	adds	r0, #92	; 0x5c
 80079c6:	f7ff f9d4 	bl	8006d72 <memset>
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <std+0x38>)
 80079cc:	6263      	str	r3, [r4, #36]	; 0x24
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <std+0x3c>)
 80079d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <std+0x40>)
 80079d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <std+0x44>)
 80079d8:	6224      	str	r4, [r4, #32]
 80079da:	6323      	str	r3, [r4, #48]	; 0x30
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	08007c09 	.word	0x08007c09
 80079e4:	08007c2b 	.word	0x08007c2b
 80079e8:	08007c63 	.word	0x08007c63
 80079ec:	08007c87 	.word	0x08007c87

080079f0 <_cleanup_r>:
 80079f0:	4901      	ldr	r1, [pc, #4]	; (80079f8 <_cleanup_r+0x8>)
 80079f2:	f000 b885 	b.w	8007b00 <_fwalk_reent>
 80079f6:	bf00      	nop
 80079f8:	08007955 	.word	0x08007955

080079fc <__sfmoreglue>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	1e4a      	subs	r2, r1, #1
 8007a00:	2568      	movs	r5, #104	; 0x68
 8007a02:	4355      	muls	r5, r2
 8007a04:	460e      	mov	r6, r1
 8007a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a0a:	f7ff fa09 	bl	8006e20 <_malloc_r>
 8007a0e:	4604      	mov	r4, r0
 8007a10:	b140      	cbz	r0, 8007a24 <__sfmoreglue+0x28>
 8007a12:	2100      	movs	r1, #0
 8007a14:	e9c0 1600 	strd	r1, r6, [r0]
 8007a18:	300c      	adds	r0, #12
 8007a1a:	60a0      	str	r0, [r4, #8]
 8007a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a20:	f7ff f9a7 	bl	8006d72 <memset>
 8007a24:	4620      	mov	r0, r4
 8007a26:	bd70      	pop	{r4, r5, r6, pc}

08007a28 <__sinit>:
 8007a28:	6983      	ldr	r3, [r0, #24]
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	bb33      	cbnz	r3, 8007a7e <__sinit+0x56>
 8007a30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007a34:	6503      	str	r3, [r0, #80]	; 0x50
 8007a36:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <__sinit+0x58>)
 8007a38:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <__sinit+0x5c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6282      	str	r2, [r0, #40]	; 0x28
 8007a3e:	4298      	cmp	r0, r3
 8007a40:	bf04      	itt	eq
 8007a42:	2301      	moveq	r3, #1
 8007a44:	6183      	streq	r3, [r0, #24]
 8007a46:	f000 f81f 	bl	8007a88 <__sfp>
 8007a4a:	6060      	str	r0, [r4, #4]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f81b 	bl	8007a88 <__sfp>
 8007a52:	60a0      	str	r0, [r4, #8]
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 f817 	bl	8007a88 <__sfp>
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	60e0      	str	r0, [r4, #12]
 8007a5e:	2104      	movs	r1, #4
 8007a60:	6860      	ldr	r0, [r4, #4]
 8007a62:	f7ff ffa1 	bl	80079a8 <std>
 8007a66:	2201      	movs	r2, #1
 8007a68:	2109      	movs	r1, #9
 8007a6a:	68a0      	ldr	r0, [r4, #8]
 8007a6c:	f7ff ff9c 	bl	80079a8 <std>
 8007a70:	2202      	movs	r2, #2
 8007a72:	2112      	movs	r1, #18
 8007a74:	68e0      	ldr	r0, [r4, #12]
 8007a76:	f7ff ff97 	bl	80079a8 <std>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61a3      	str	r3, [r4, #24]
 8007a7e:	bd10      	pop	{r4, pc}
 8007a80:	08008200 	.word	0x08008200
 8007a84:	080079f1 	.word	0x080079f1

08007a88 <__sfp>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <__sfp+0x70>)
 8007a8c:	681e      	ldr	r6, [r3, #0]
 8007a8e:	69b3      	ldr	r3, [r6, #24]
 8007a90:	4607      	mov	r7, r0
 8007a92:	b913      	cbnz	r3, 8007a9a <__sfp+0x12>
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7ff ffc7 	bl	8007a28 <__sinit>
 8007a9a:	3648      	adds	r6, #72	; 0x48
 8007a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	d503      	bpl.n	8007aac <__sfp+0x24>
 8007aa4:	6833      	ldr	r3, [r6, #0]
 8007aa6:	b133      	cbz	r3, 8007ab6 <__sfp+0x2e>
 8007aa8:	6836      	ldr	r6, [r6, #0]
 8007aaa:	e7f7      	b.n	8007a9c <__sfp+0x14>
 8007aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ab0:	b16d      	cbz	r5, 8007ace <__sfp+0x46>
 8007ab2:	3468      	adds	r4, #104	; 0x68
 8007ab4:	e7f4      	b.n	8007aa0 <__sfp+0x18>
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7ff ff9f 	bl	80079fc <__sfmoreglue>
 8007abe:	6030      	str	r0, [r6, #0]
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d1f1      	bne.n	8007aa8 <__sfp+0x20>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4604      	mov	r4, r0
 8007aca:	4620      	mov	r0, r4
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <__sfp+0x74>)
 8007ad0:	6665      	str	r5, [r4, #100]	; 0x64
 8007ad2:	e9c4 5500 	strd	r5, r5, [r4]
 8007ad6:	60a5      	str	r5, [r4, #8]
 8007ad8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007adc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ae8:	f7ff f943 	bl	8006d72 <memset>
 8007aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007af4:	e7e9      	b.n	8007aca <__sfp+0x42>
 8007af6:	bf00      	nop
 8007af8:	08008200 	.word	0x08008200
 8007afc:	ffff0001 	.word	0xffff0001

08007b00 <_fwalk_reent>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	4680      	mov	r8, r0
 8007b06:	4689      	mov	r9, r1
 8007b08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b0c:	2600      	movs	r6, #0
 8007b0e:	b914      	cbnz	r4, 8007b16 <_fwalk_reent+0x16>
 8007b10:	4630      	mov	r0, r6
 8007b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007b1a:	3f01      	subs	r7, #1
 8007b1c:	d501      	bpl.n	8007b22 <_fwalk_reent+0x22>
 8007b1e:	6824      	ldr	r4, [r4, #0]
 8007b20:	e7f5      	b.n	8007b0e <_fwalk_reent+0xe>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d907      	bls.n	8007b38 <_fwalk_reent+0x38>
 8007b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	d003      	beq.n	8007b38 <_fwalk_reent+0x38>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4640      	mov	r0, r8
 8007b34:	47c8      	blx	r9
 8007b36:	4306      	orrs	r6, r0
 8007b38:	3568      	adds	r5, #104	; 0x68
 8007b3a:	e7ee      	b.n	8007b1a <_fwalk_reent+0x1a>

08007b3c <__swhatbuf_r>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	460e      	mov	r6, r1
 8007b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b44:	2900      	cmp	r1, #0
 8007b46:	b096      	sub	sp, #88	; 0x58
 8007b48:	4614      	mov	r4, r2
 8007b4a:	461d      	mov	r5, r3
 8007b4c:	da07      	bge.n	8007b5e <__swhatbuf_r+0x22>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	89b3      	ldrh	r3, [r6, #12]
 8007b54:	061a      	lsls	r2, r3, #24
 8007b56:	d410      	bmi.n	8007b7a <__swhatbuf_r+0x3e>
 8007b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b5c:	e00e      	b.n	8007b7c <__swhatbuf_r+0x40>
 8007b5e:	466a      	mov	r2, sp
 8007b60:	f000 f8b8 	bl	8007cd4 <_fstat_r>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	dbf2      	blt.n	8007b4e <__swhatbuf_r+0x12>
 8007b68:	9a01      	ldr	r2, [sp, #4]
 8007b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b72:	425a      	negs	r2, r3
 8007b74:	415a      	adcs	r2, r3
 8007b76:	602a      	str	r2, [r5, #0]
 8007b78:	e7ee      	b.n	8007b58 <__swhatbuf_r+0x1c>
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	b016      	add	sp, #88	; 0x58
 8007b82:	bd70      	pop	{r4, r5, r6, pc}

08007b84 <__smakebuf_r>:
 8007b84:	898b      	ldrh	r3, [r1, #12]
 8007b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b88:	079d      	lsls	r5, r3, #30
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	d507      	bpl.n	8007ba0 <__smakebuf_r+0x1c>
 8007b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	6123      	str	r3, [r4, #16]
 8007b98:	2301      	movs	r3, #1
 8007b9a:	6163      	str	r3, [r4, #20]
 8007b9c:	b002      	add	sp, #8
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	ab01      	add	r3, sp, #4
 8007ba2:	466a      	mov	r2, sp
 8007ba4:	f7ff ffca 	bl	8007b3c <__swhatbuf_r>
 8007ba8:	9900      	ldr	r1, [sp, #0]
 8007baa:	4605      	mov	r5, r0
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff f937 	bl	8006e20 <_malloc_r>
 8007bb2:	b948      	cbnz	r0, 8007bc8 <__smakebuf_r+0x44>
 8007bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb8:	059a      	lsls	r2, r3, #22
 8007bba:	d4ef      	bmi.n	8007b9c <__smakebuf_r+0x18>
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	f043 0302 	orr.w	r3, r3, #2
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	e7e3      	b.n	8007b90 <__smakebuf_r+0xc>
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <__smakebuf_r+0x7c>)
 8007bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	6020      	str	r0, [r4, #0]
 8007bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	6163      	str	r3, [r4, #20]
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	6120      	str	r0, [r4, #16]
 8007bde:	b15b      	cbz	r3, 8007bf8 <__smakebuf_r+0x74>
 8007be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 f887 	bl	8007cf8 <_isatty_r>
 8007bea:	b128      	cbz	r0, 8007bf8 <__smakebuf_r+0x74>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	431d      	orrs	r5, r3
 8007bfc:	81a5      	strh	r5, [r4, #12]
 8007bfe:	e7cd      	b.n	8007b9c <__smakebuf_r+0x18>
 8007c00:	080079f1 	.word	0x080079f1

08007c04 <__malloc_lock>:
 8007c04:	4770      	bx	lr

08007c06 <__malloc_unlock>:
 8007c06:	4770      	bx	lr

08007c08 <__sread>:
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	f000 f894 	bl	8007d3c <_read_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	bfab      	itete	ge
 8007c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c1c:	181b      	addge	r3, r3, r0
 8007c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c22:	bfac      	ite	ge
 8007c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c26:	81a3      	strhlt	r3, [r4, #12]
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <__swrite>:
 8007c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	461f      	mov	r7, r3
 8007c30:	898b      	ldrh	r3, [r1, #12]
 8007c32:	05db      	lsls	r3, r3, #23
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4616      	mov	r6, r2
 8007c3a:	d505      	bpl.n	8007c48 <__swrite+0x1e>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	f000 f868 	bl	8007d18 <_lseek_r>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	f000 b817 	b.w	8007c90 <_write_r>

08007c62 <__sseek>:
 8007c62:	b510      	push	{r4, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6a:	f000 f855 	bl	8007d18 <_lseek_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	bf15      	itete	ne
 8007c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c7e:	81a3      	strheq	r3, [r4, #12]
 8007c80:	bf18      	it	ne
 8007c82:	81a3      	strhne	r3, [r4, #12]
 8007c84:	bd10      	pop	{r4, pc}

08007c86 <__sclose>:
 8007c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8a:	f000 b813 	b.w	8007cb4 <_close_r>
	...

08007c90 <_write_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4c07      	ldr	r4, [pc, #28]	; (8007cb0 <_write_r+0x20>)
 8007c94:	4605      	mov	r5, r0
 8007c96:	4608      	mov	r0, r1
 8007c98:	4611      	mov	r1, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f7fc fc39 	bl	8004516 <_write>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_write_r+0x1e>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_write_r+0x1e>
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20014464 	.word	0x20014464

08007cb4 <_close_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4c06      	ldr	r4, [pc, #24]	; (8007cd0 <_close_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4605      	mov	r5, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	f7fc fc45 	bl	800454e <_close>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_close_r+0x1a>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_close_r+0x1a>
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	20014464 	.word	0x20014464

08007cd4 <_fstat_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4c07      	ldr	r4, [pc, #28]	; (8007cf4 <_fstat_r+0x20>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4605      	mov	r5, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	f7fc fc40 	bl	8004566 <_fstat>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d102      	bne.n	8007cf0 <_fstat_r+0x1c>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	b103      	cbz	r3, 8007cf0 <_fstat_r+0x1c>
 8007cee:	602b      	str	r3, [r5, #0]
 8007cf0:	bd38      	pop	{r3, r4, r5, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20014464 	.word	0x20014464

08007cf8 <_isatty_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4c06      	ldr	r4, [pc, #24]	; (8007d14 <_isatty_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4605      	mov	r5, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	f7fc fc3f 	bl	8004586 <_isatty>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_isatty_r+0x1a>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_isatty_r+0x1a>
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	20014464 	.word	0x20014464

08007d18 <_lseek_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4c07      	ldr	r4, [pc, #28]	; (8007d38 <_lseek_r+0x20>)
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	4608      	mov	r0, r1
 8007d20:	4611      	mov	r1, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	6022      	str	r2, [r4, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f7fc fc38 	bl	800459c <_lseek>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_lseek_r+0x1e>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_lseek_r+0x1e>
 8007d34:	602b      	str	r3, [r5, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20014464 	.word	0x20014464

08007d3c <_read_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4c07      	ldr	r4, [pc, #28]	; (8007d5c <_read_r+0x20>)
 8007d40:	4605      	mov	r5, r0
 8007d42:	4608      	mov	r0, r1
 8007d44:	4611      	mov	r1, r2
 8007d46:	2200      	movs	r2, #0
 8007d48:	6022      	str	r2, [r4, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f7fc fbc6 	bl	80044dc <_read>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_read_r+0x1e>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_read_r+0x1e>
 8007d58:	602b      	str	r3, [r5, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20014464 	.word	0x20014464

08007d60 <_init>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr

08007d6c <_fini>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr
