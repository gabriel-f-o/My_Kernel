
My_Kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e70  08006e70  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141a8  200001e0  08007054  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014388  08007054  00024388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018496  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038ed  00000000  00000000  000386a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  0003bf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002523c  00000000  00000000  0003cec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010ee1  00000000  00000000  00062104  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000cd0ce  00000000  00000000  00072fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001400b3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000df8  00000000  00000000  00140130  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004500  00000000  00000000  00140f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a54 	.word	0x08006a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006a54 	.word	0x08006a54

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <cli_is_terminator>:

/**********************************************
 * PRIVATE FUNCTIONS
 *********************************************/
 
static inline bool cli_is_terminator(cliElement_t const * const e){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <cli_is_terminator+0x12>
 80005ae:	2300      	movs	r3, #0
 80005b0:	e019      	b.n	80005e6 <cli_is_terminator+0x46>
    return (e->name == NULL && e->action == NULL && e->args == NULL && e->desc == NULL && e->argsDesc == NULL);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d111      	bne.n	80005de <cli_is_terminator+0x3e>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10d      	bne.n	80005de <cli_is_terminator+0x3e>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d109      	bne.n	80005de <cli_is_terminator+0x3e>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <cli_is_terminator+0x3e>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <cli_is_terminator+0x3e>
 80005da:	2301      	movs	r3, #1
 80005dc:	e000      	b.n	80005e0 <cli_is_terminator+0x40>
 80005de:	2300      	movs	r3, #0
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <cli_is_sub_menu>:

static inline bool cli_is_sub_menu(cliElement_t const * const e){
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <cli_is_sub_menu+0x12>
 8000600:	2300      	movs	r3, #0
 8000602:	e006      	b.n	8000612 <cli_is_sub_menu+0x20>
    return (e->subMenuRef != NULL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2db      	uxtb	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <cli_is_action>:

static inline bool cli_is_action(cliElement_t const * const e){
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <cli_is_action+0x12>
 800062c:	2300      	movs	r3, #0
 800062e:	e006      	b.n	800063e <cli_is_action+0x20>
    return (e->action != NULL);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <cli_verify_args_str>:

static int64_t cli_verify_args_str(cliElement_t const * const e, bool* elipsisPresent){
 800064a:	b590      	push	{r4, r7, lr}
 800064c:	b087      	sub	sp, #28
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
    if(e->args == NULL) return -1;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d104      	bne.n	8000666 <cli_verify_args_str+0x1c>
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	f04f 34ff 	mov.w	r4, #4294967295
 8000664:	e063      	b.n	800072e <cli_verify_args_str+0xe4>
    
    size_t len = strlen(e->args);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdba 	bl	80001e4 <strlen>
 8000670:	60f8      	str	r0, [r7, #12]
    size_t argsLen = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
    *elipsisPresent = 0;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
    
    for(int i = 0; i < len; i++){
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	e04e      	b.n	8000720 <cli_verify_args_str+0xd6>
        switch(e->args[i]){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b62      	cmp	r3, #98	; 0x62
 800068e:	d00c      	beq.n	80006aa <cli_verify_args_str+0x60>
 8000690:	2b62      	cmp	r3, #98	; 0x62
 8000692:	dc04      	bgt.n	800069e <cli_verify_args_str+0x54>
 8000694:	2b2a      	cmp	r3, #42	; 0x2a
 8000696:	d008      	beq.n	80006aa <cli_verify_args_str+0x60>
 8000698:	2b2e      	cmp	r3, #46	; 0x2e
 800069a:	d00a      	beq.n	80006b2 <cli_verify_args_str+0x68>
 800069c:	e038      	b.n	8000710 <cli_verify_args_str+0xc6>
 800069e:	2b73      	cmp	r3, #115	; 0x73
 80006a0:	d003      	beq.n	80006aa <cli_verify_args_str+0x60>
 80006a2:	2b75      	cmp	r3, #117	; 0x75
 80006a4:	d001      	beq.n	80006aa <cli_verify_args_str+0x60>
 80006a6:	2b69      	cmp	r3, #105	; 0x69
 80006a8:	d132      	bne.n	8000710 <cli_verify_args_str+0xc6>
            case 'u' :
            case 'i' :
            case 's' :
            case 'b' :
            case '*' : {
                argsLen++;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
                break;
 80006b0:	e033      	b.n	800071a <cli_verify_args_str+0xd0>
            }
            
            case '.' : {
                if(len < i + 2 || e->args[i + 1] != '.' || e->args[i + 2] != '.'){
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	3302      	adds	r3, #2
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d30f      	bcc.n	80006de <cli_verify_args_str+0x94>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b2e      	cmp	r3, #46	; 0x2e
 80006cc:	d107      	bne.n	80006de <cli_verify_args_str+0x94>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3302      	adds	r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b2e      	cmp	r3, #46	; 0x2e
 80006dc:	d004      	beq.n	80006e8 <cli_verify_args_str+0x9e>
                    ERR_PRINTLN("Arguments string list contains incomplete elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	f04f 34ff 	mov.w	r4, #4294967295
 80006e6:	e022      	b.n	800072e <cli_verify_args_str+0xe4>
                }
                
                DBG_PRINTLN("%d, %d", len, i);
                
                if(len > i + 3){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3303      	adds	r3, #3
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d904      	bls.n	80006fe <cli_verify_args_str+0xb4>
                    ERR_PRINTLN("Arguments string list contains arguments after elipsis for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                    ERR_PRINTLN("");
                    return -1;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	f04f 34ff 	mov.w	r4, #4294967295
 80006fc:	e017      	b.n	800072e <cli_verify_args_str+0xe4>
                }
                
                *elipsisPresent = 1;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
                return argsLen++;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	617a      	str	r2, [r7, #20]
 800070a:	f04f 0400 	mov.w	r4, #0
 800070e:	e00e      	b.n	800072e <cli_verify_args_str+0xe4>
            }
            
            default : {
                ERR_PRINTLN("Unrecognized character in argument list index %d for action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                ERR_PRINTLN("");
                return -1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	f04f 34ff 	mov.w	r4, #4294967295
 8000718:	e009      	b.n	800072e <cli_verify_args_str+0xe4>
    for(int i = 0; i < len; i++){
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8ac      	bhi.n	8000682 <cli_verify_args_str+0x38>
            }
        }
    }
    
    return argsLen;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	f04f 0400 	mov.w	r4, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	4621      	mov	r1, r4
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <cli_print_element>:

static void cli_print_element(cliElement_t const * const e){
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d04b      	beq.n	80007de <cli_print_element+0xa6>
    
    bool const is_sub_menu = cli_is_sub_menu(e);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff53 	bl	80005f2 <cli_is_sub_menu>
 800074c:	4603      	mov	r3, r0
 800074e:	76fb      	strb	r3, [r7, #27]

    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <cli_print_element+0x26>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	e000      	b.n	8000760 <cli_print_element+0x28>
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <cli_print_element+0xb0>)
 8000760:	617b      	str	r3, [r7, #20]
    
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000762:	7efb      	ldrb	r3, [r7, #27]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <cli_print_element+0x34>
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <cli_print_element+0xb4>)
 800076a:	e000      	b.n	800076e <cli_print_element+0x36>
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <cli_print_element+0xb8>)
 800076e:	461a      	mov	r2, r3
 8000770:	6979      	ldr	r1, [r7, #20]
 8000772:	4820      	ldr	r0, [pc, #128]	; (80007f4 <cli_print_element+0xbc>)
 8000774:	f000 ff66 	bl	8001644 <cli_printf>

    size_t len = (size_t)(strlen(name) + (size_t)(3 * is_sub_menu) + 1); //name length with '... '
 8000778:	6978      	ldr	r0, [r7, #20]
 800077a:	f7ff fd33 	bl	80001e4 <strlen>
 800077e:	4601      	mov	r1, r0
 8000780:	7efa      	ldrb	r2, [r7, #27]
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	440b      	add	r3, r1
 800078a:	3301      	adds	r3, #1
 800078c:	613b      	str	r3, [r7, #16]

    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	3316      	adds	r3, #22
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <cli_print_element+0xc0>)
 8000794:	fba2 2303 	umull	r2, r3, r2, r3
 8000798:	091b      	lsrs	r3, r3, #4
 800079a:	2216      	movs	r2, #22
 800079c:	fb02 f303 	mul.w	r3, r2, r3
 80007a0:	60fb      	str	r3, [r7, #12]

    spaces -= len;
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	60fb      	str	r3, [r7, #12]

    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	e005      	b.n	80007bc <cli_print_element+0x84>
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <cli_print_element+0xb8>)
 80007b2:	f000 ff47 	bl	8001644 <cli_printf>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3301      	adds	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fa      	ldr	r2, [r7, #28]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3f5      	bcc.n	80007b0 <cli_print_element+0x78>
    
    MENU_PRINTLN("- %s", ( (e->desc == NULL) ? "NULL_DESC" : e->desc) );
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <cli_print_element+0x9a>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	e000      	b.n	80007d4 <cli_print_element+0x9c>
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <cli_print_element+0xc4>)
 80007d4:	4619      	mov	r1, r3
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <cli_print_element+0xc8>)
 80007d8:	f000 ff34 	bl	8001644 <cli_printf>
 80007dc:	e000      	b.n	80007e0 <cli_print_element+0xa8>
    if(e == NULL) return;
 80007de:	bf00      	nop
} 
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08006a6c 	.word	0x08006a6c
 80007ec:	08006a78 	.word	0x08006a78
 80007f0:	08006a80 	.word	0x08006a80
 80007f4:	08006a84 	.word	0x08006a84
 80007f8:	ba2e8ba3 	.word	0xba2e8ba3
 80007fc:	08006a8c 	.word	0x08006a8c
 8000800:	08006a98 	.word	0x08006a98

08000804 <cli_print_menu>:

static void cli_print_menu(cliElement_t const * const e){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d029      	beq.n	8000866 <cli_print_menu+0x62>
    if(e->subMenuRef == NULL){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d027      	beq.n	800086a <cli_print_menu+0x66>
        ERR_PRINTLN("Reference of menu '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;  
    } 

    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00d      	b.n	800083c <cli_print_menu+0x38>
        cli_print_element(&e->subMenuRef[i]);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff81 	bl	8000738 <cli_print_element>
    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	3301      	adds	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6859      	ldr	r1, [r3, #4]
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fea7 	bl	80005a0 <cli_is_terminator>
 8000852:	4603      	mov	r3, r0
 8000854:	f083 0301 	eor.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e0      	bne.n	8000820 <cli_print_menu+0x1c>
        
    MENU_PRINTLN("");
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <cli_print_menu+0x70>)
 8000860:	f000 fef0 	bl	8001644 <cli_printf>
 8000864:	e002      	b.n	800086c <cli_print_menu+0x68>
    if(e == NULL) return;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <cli_print_menu+0x68>
        return;  
 800086a:	bf00      	nop
}
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08006aa0 	.word	0x08006aa0

08000878 <cli_print_action>:

static void cli_print_action(cliElement_t const * const e){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80dd 	beq.w	8000a42 <cli_print_action+0x1ca>
    if(e->args == NULL) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	f000 80da 	beq.w	8000a46 <cli_print_action+0x1ce>
        ERR_PRINTLN("Action of element '%s' is NULL", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    MENU_PRINTLN("Action '%s' - %s - usage :", ( (e->name == NULL) ? "NULL_NAME" : e->name), ( (e->desc == NULL) ? "NULL_DESC" : e->desc ) );
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <cli_print_action+0x28>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	e000      	b.n	80008a2 <cli_print_action+0x2a>
 80008a0:	496c      	ldr	r1, [pc, #432]	; (8000a54 <cli_print_action+0x1dc>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <cli_print_action+0x38>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	e000      	b.n	80008b2 <cli_print_action+0x3a>
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <cli_print_action+0x1e0>)
 80008b2:	461a      	mov	r2, r3
 80008b4:	4869      	ldr	r0, [pc, #420]	; (8000a5c <cli_print_action+0x1e4>)
 80008b6:	f000 fec5 	bl	8001644 <cli_printf>
    
    bool elipsisPresent = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80008be:	f107 030f 	add.w	r3, r7, #15
 80008c2:	4619      	mov	r1, r3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fec0 	bl	800064a <cli_verify_args_str>
 80008ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    if(len == -1){
 80008ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008d2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008d6:	bf08      	it	eq
 80008d8:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 80008dc:	f000 80b5 	beq.w	8000a4a <cli_print_action+0x1d2>
        return;
    }
    
    if(len == 0){
 80008e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008e4:	4323      	orrs	r3, r4
 80008e6:	d103      	bne.n	80008f0 <cli_print_action+0x78>
        MENU_PRINTLN("   No arguments");
 80008e8:	485d      	ldr	r0, [pc, #372]	; (8000a60 <cli_print_action+0x1e8>)
 80008ea:	f000 feab 	bl	8001644 <cli_printf>
        return;
 80008ee:	e0ad      	b.n	8000a4c <cli_print_action+0x1d4>
    }
    
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <cli_print_action+0x8a>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <cli_print_action+0x8e>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <cli_print_action+0x90>
 8000906:	2300      	movs	r3, #0
 8000908:	77fb      	strb	r3, [r7, #31]
 800090a:	7ffb      	ldrb	r3, [r7, #31]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	77fb      	strb	r3, [r7, #31]
    
    int i = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < len; i++){
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	e054      	b.n	80009c6 <cli_print_action+0x14e>
        switch(e->args[i]){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b69      	cmp	r3, #105	; 0x69
 8000928:	d00e      	beq.n	8000948 <cli_print_action+0xd0>
 800092a:	2b69      	cmp	r3, #105	; 0x69
 800092c:	dc04      	bgt.n	8000938 <cli_print_action+0xc0>
 800092e:	2b2a      	cmp	r3, #42	; 0x2a
 8000930:	d016      	beq.n	8000960 <cli_print_action+0xe8>
 8000932:	2b62      	cmp	r3, #98	; 0x62
 8000934:	d010      	beq.n	8000958 <cli_print_action+0xe0>
 8000936:	e017      	b.n	8000968 <cli_print_action+0xf0>
 8000938:	2b73      	cmp	r3, #115	; 0x73
 800093a:	d009      	beq.n	8000950 <cli_print_action+0xd8>
 800093c:	2b75      	cmp	r3, #117	; 0x75
 800093e:	d113      	bne.n	8000968 <cli_print_action+0xf0>
            #if (defined(CLI_FLOAT_EN) && CLI_FLOAT_EN == 1)
            case 'f' : MENU_PRINTF("   < float   > - "); break;
            #endif

            case 'u' : MENU_PRINTF("   < uint64  > - "); break;
 8000940:	4848      	ldr	r0, [pc, #288]	; (8000a64 <cli_print_action+0x1ec>)
 8000942:	f000 fe7f 	bl	8001644 <cli_printf>
 8000946:	e013      	b.n	8000970 <cli_print_action+0xf8>
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 8000948:	4847      	ldr	r0, [pc, #284]	; (8000a68 <cli_print_action+0x1f0>)
 800094a:	f000 fe7b 	bl	8001644 <cli_printf>
 800094e:	e00f      	b.n	8000970 <cli_print_action+0xf8>
            case 's' : MENU_PRINTF("   < string  > - "); break;
 8000950:	4846      	ldr	r0, [pc, #280]	; (8000a6c <cli_print_action+0x1f4>)
 8000952:	f000 fe77 	bl	8001644 <cli_printf>
 8000956:	e00b      	b.n	8000970 <cli_print_action+0xf8>
            case 'b' : MENU_PRINTF("   < buffer  > - "); break;
 8000958:	4845      	ldr	r0, [pc, #276]	; (8000a70 <cli_print_action+0x1f8>)
 800095a:	f000 fe73 	bl	8001644 <cli_printf>
 800095e:	e007      	b.n	8000970 <cli_print_action+0xf8>
            case '*' : MENU_PRINTF("   < any     > - "); break;
 8000960:	4844      	ldr	r0, [pc, #272]	; (8000a74 <cli_print_action+0x1fc>)
 8000962:	f000 fe6f 	bl	8001644 <cli_printf>
 8000966:	e003      	b.n	8000970 <cli_print_action+0xf8>
            default  : MENU_PRINTF("   < unknown > - "); break;
 8000968:	4843      	ldr	r0, [pc, #268]	; (8000a78 <cli_print_action+0x200>)
 800096a:	f000 fe6b 	bl	8001644 <cli_printf>
 800096e:	bf00      	nop
        }
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 8000970:	7ffb      	ldrb	r3, [r7, #31]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10b      	bne.n	800098e <cli_print_action+0x116>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d007      	beq.n	800098e <cli_print_action+0x116>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <cli_print_action+0x11a>
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <cli_print_action+0x11c>
 8000992:	2300      	movs	r3, #0
 8000994:	77fb      	strb	r3, [r7, #31]
 8000996:	7ffb      	ldrb	r3, [r7, #31]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	77fb      	strb	r3, [r7, #31]
        
        if(argsDescEnded){
 800099e:	7ffb      	ldrb	r3, [r7, #31]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <cli_print_action+0x134>
            MENU_PRINTLN("");
 80009a4:	4835      	ldr	r0, [pc, #212]	; (8000a7c <cli_print_action+0x204>)
 80009a6:	f000 fe4d 	bl	8001644 <cli_printf>
            continue;
 80009aa:	e009      	b.n	80009c0 <cli_print_action+0x148>
        }
        
        MENU_PRINTLN("%s", e->argsDesc[i]);   
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4831      	ldr	r0, [pc, #196]	; (8000a80 <cli_print_action+0x208>)
 80009bc:	f000 fe42 	bl	8001644 <cli_printf>
    for(i = 0; i < len; i++){
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4619      	mov	r1, r3
 80009ca:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80009ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009d2:	4299      	cmp	r1, r3
 80009d4:	eb72 0304 	sbcs.w	r3, r2, r4
 80009d8:	dba0      	blt.n	800091c <cli_print_action+0xa4>
    }
    
    if(elipsisPresent){
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d02c      	beq.n	8000a3a <cli_print_action+0x1c2>
        MENU_PRINTF("   < various > - ");
 80009e0:	4828      	ldr	r0, [pc, #160]	; (8000a84 <cli_print_action+0x20c>)
 80009e2:	f000 fe2f 	bl	8001644 <cli_printf>
        
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 80009e6:	7ffb      	ldrb	r3, [r7, #31]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10b      	bne.n	8000a04 <cli_print_action+0x18c>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <cli_print_action+0x18c>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <cli_print_action+0x190>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <cli_print_action+0x192>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	77fb      	strb	r3, [r7, #31]
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	77fb      	strb	r3, [r7, #31]

        if(!argsDescEnded) MENU_PRINTLN("%s", e->argsDesc[i]);
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	f083 0301 	eor.w	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d009      	beq.n	8000a34 <cli_print_action+0x1bc>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <cli_print_action+0x208>)
 8000a30:	f000 fe08 	bl	8001644 <cli_printf>

        MENU_PRINTLN("");
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <cli_print_action+0x204>)
 8000a36:	f000 fe05 	bl	8001644 <cli_printf>
    }
    
    MENU_PRINTLN("");
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <cli_print_action+0x204>)
 8000a3c:	f000 fe02 	bl	8001644 <cli_printf>
 8000a40:	e004      	b.n	8000a4c <cli_print_action+0x1d4>
    if(e == NULL) return;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <cli_print_action+0x1d4>
        return;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <cli_print_action+0x1d4>
        return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08006a6c 	.word	0x08006a6c
 8000a58:	08006a8c 	.word	0x08006a8c
 8000a5c:	08006aa4 	.word	0x08006aa4
 8000a60:	08006ac4 	.word	0x08006ac4
 8000a64:	08006ad8 	.word	0x08006ad8
 8000a68:	08006aec 	.word	0x08006aec
 8000a6c:	08006b00 	.word	0x08006b00
 8000a70:	08006b14 	.word	0x08006b14
 8000a74:	08006b28 	.word	0x08006b28
 8000a78:	08006b3c 	.word	0x08006b3c
 8000a7c:	08006aa0 	.word	0x08006aa0
 8000a80:	08006b50 	.word	0x08006b50
 8000a84:	08006b58 	.word	0x08006b58

08000a88 <cli_str_starts_with>:

static bool cli_str_starts_with(char const tkn[], char const str[]){
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    if(tkn == NULL || str == NULL) return false;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <cli_str_starts_with+0x16>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <cli_str_starts_with+0x1a>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e04f      	b.n	8000b42 <cli_str_starts_with+0xba>
    
    size_t const lenTkn = strlen(tkn);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fb9e 	bl	80001e4 <strlen>
 8000aa8:	6138      	str	r0, [r7, #16]
    size_t const lenStr = strlen(str);
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f7ff fb9a 	bl	80001e4 <strlen>
 8000ab0:	60f8      	str	r0, [r7, #12]
    
    if(lenTkn == 0 || lenStr == 0) return false;
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <cli_str_starts_with+0x36>
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <cli_str_starts_with+0x3a>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e03f      	b.n	8000b42 <cli_str_starts_with+0xba>
    if(lenTkn > lenStr) return false;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d901      	bls.n	8000ace <cli_str_starts_with+0x46>
 8000aca:	2300      	movs	r3, #0
 8000acc:	e039      	b.n	8000b42 <cli_str_starts_with+0xba>

    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e02f      	b.n	8000b34 <cli_str_starts_with+0xac>
        if(tolower(tkn[i]) != tolower(str[i])) return false;
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	72fb      	strb	r3, [r7, #11]
 8000ade:	f005 f82d 	bl	8005b3c <__locale_ctype_ptr>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d103      	bne.n	8000afc <cli_str_starts_with+0x74>
 8000af4:	7afb      	ldrb	r3, [r7, #11]
 8000af6:	f103 0420 	add.w	r4, r3, #32
 8000afa:	e000      	b.n	8000afe <cli_str_starts_with+0x76>
 8000afc:	7afc      	ldrb	r4, [r7, #11]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	72bb      	strb	r3, [r7, #10]
 8000b08:	f005 f818 	bl	8005b3c <__locale_ctype_ptr>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d102      	bne.n	8000b24 <cli_str_starts_with+0x9c>
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	3320      	adds	r3, #32
 8000b22:	e000      	b.n	8000b26 <cli_str_starts_with+0x9e>
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	429c      	cmp	r4, r3
 8000b28:	d001      	beq.n	8000b2e <cli_str_starts_with+0xa6>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e009      	b.n	8000b42 <cli_str_starts_with+0xba>
    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1c9      	bne.n	8000ad4 <cli_str_starts_with+0x4c>
    }
    
    return true;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}

08000b4a <cli_find_element_in_menu>:

static cliElement_t* cli_find_element_in_menu(char* tkn, char cliBuffer[], size_t maxLen, cliElement_t currentMenu[]){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
    if(tkn == NULL) return NULL;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <cli_find_element_in_menu+0x18>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e05e      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(maxLen == 0) return NULL;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <cli_find_element_in_menu+0x22>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e059      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(cliBuffer == NULL) return NULL;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <cli_find_element_in_menu+0x2c>
 8000b72:	2300      	movs	r3, #0
 8000b74:	e054      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(currentMenu == NULL) return NULL;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <cli_find_element_in_menu+0x36>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e04f      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <cli_find_element_in_menu+0x42>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e049      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
    
    cliElement_t* ret = NULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000b90:	2300      	movs	r3, #0
 8000b92:	74fb      	strb	r3, [r7, #19]
 8000b94:	e032      	b.n	8000bfc <cli_find_element_in_menu+0xb2>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	6859      	ldr	r1, [r3, #4]
 8000b9a:	7cfa      	ldrb	r2, [r7, #19]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	440b      	add	r3, r1
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d021      	beq.n	8000bf0 <cli_find_element_in_menu+0xa6>
        
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	7cfa      	ldrb	r2, [r7, #19]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff ff61 	bl	8000a88 <cli_str_starts_with>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d110      	bne.n	8000bf4 <cli_find_element_in_menu+0xaa>
        
        if(ret != NULL){
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <cli_find_element_in_menu+0x92>
            ERR_PRINTLN("Command not unique");
            return NULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e021      	b.n	8000c20 <cli_find_element_in_menu+0xd6>
        } 
        
        ret = (cliElement_t*) &currentMenu->subMenuRef[i];
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	7cfa      	ldrb	r2, [r7, #19]
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	e002      	b.n	8000bf6 <cli_find_element_in_menu+0xac>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000bf0:	bf00      	nop
 8000bf2:	e000      	b.n	8000bf6 <cli_find_element_in_menu+0xac>
        if(!cli_str_starts_with(tkn, currentMenu->subMenuRef[i].name)) continue;
 8000bf4:	bf00      	nop
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000bf6:	7cfb      	ldrb	r3, [r7, #19]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	74fb      	strb	r3, [r7, #19]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	6859      	ldr	r1, [r3, #4]
 8000c00:	7cfa      	ldrb	r2, [r7, #19]
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	440b      	add	r3, r1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fcc7 	bl	80005a0 <cli_is_terminator>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f083 0301 	eor.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1bb      	bne.n	8000b96 <cli_find_element_in_menu+0x4c>
    }
    
    DBG_PRINTLN("%s", ret == NULL ? "Not found" : "Sub menu or action found" );
    
    return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <cli_arg_str_len>:

static int32_t cli_arg_str_len(char* arg){
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    if(arg ==  NULL) return -1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <cli_arg_str_len+0x14>
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e050      	b.n	8000cde <cli_arg_str_len+0xb6>
    
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b7b      	cmp	r3, #123	; 0x7b
 8000c42:	d003      	beq.n	8000c4c <cli_arg_str_len+0x24>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b22      	cmp	r3, #34	; 0x22
 8000c4a:	d101      	bne.n	8000c50 <cli_arg_str_len+0x28>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <cli_arg_str_len+0x2a>
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
    
    while(1){
        switch(arg[0]){
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b22      	cmp	r3, #34	; 0x22
 8000c5a:	d001      	beq.n	8000c60 <cli_arg_str_len+0x38>
 8000c5c:	2b7b      	cmp	r3, #123	; 0x7b
 8000c5e:	d129      	bne.n	8000cb4 <cli_arg_str_len+0x8c>
            
            case '{' :
            case '"' : {
                if(arg[i] == '\0') return -1;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <cli_arg_str_len+0x4a>
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	e035      	b.n	8000cde <cli_arg_str_len+0xb6>
                
                if(arg[0] == '{' && arg[i] == '}'){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7b      	cmp	r3, #123	; 0x7b
 8000c78:	d108      	bne.n	8000c8c <cli_arg_str_len+0x64>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b7d      	cmp	r3, #125	; 0x7d
 8000c84:	d102      	bne.n	8000c8c <cli_arg_str_len+0x64>
                    return i+1;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	e028      	b.n	8000cde <cli_arg_str_len+0xb6>
                }
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b22      	cmp	r3, #34	; 0x22
 8000c92:	d11d      	bne.n	8000cd0 <cli_arg_str_len+0xa8>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b22      	cmp	r3, #34	; 0x22
 8000c9e:	d117      	bne.n	8000cd0 <cli_arg_str_len+0xa8>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b5c      	cmp	r3, #92	; 0x5c
 8000cac:	d010      	beq.n	8000cd0 <cli_arg_str_len+0xa8>
                    return i+1;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	e014      	b.n	8000cde <cli_arg_str_len+0xb6>
                }
                break;
            }
            
            default : {
                if(arg[i] == ' ' || arg[i] == '\0') return i;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b20      	cmp	r3, #32
 8000cbe:	d005      	beq.n	8000ccc <cli_arg_str_len+0xa4>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <cli_arg_str_len+0xac>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	e006      	b.n	8000cde <cli_arg_str_len+0xb6>
                break;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <cli_arg_str_len+0xae>
                break;
 8000cd4:	bf00      	nop
            } 
        }
        
        i++;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
        switch(arg[0]){
 8000cdc:	e7ba      	b.n	8000c54 <cli_arg_str_len+0x2c>
    }
    
    return -1;
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <cli_go_to_next_argument>:

static char* cli_go_to_next_argument(char* arg){
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
    if(arg == NULL) return NULL;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <cli_go_to_next_argument+0x12>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e01c      	b.n	8000d36 <cli_go_to_next_argument+0x4c>
    
    int32_t size = cli_arg_str_len(arg);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff93 	bl	8000c28 <cli_arg_str_len>
 8000d02:	60f8      	str	r0, [r7, #12]
    
    if(size == -1) return NULL;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d101      	bne.n	8000d10 <cli_go_to_next_argument+0x26>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e012      	b.n	8000d36 <cli_go_to_next_argument+0x4c>
    
    arg += size;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
    
    while(arg[0] != '\0'){ 
 8000d18:	e006      	b.n	8000d28 <cli_go_to_next_argument+0x3e>
        //if(arg[0] == '-' || arg[0] == '{' || arg[0] == '"' || ('0' <= arg[0] && arg[0] <= '9')) break;
        if(arg[0] != ' ') break;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b20      	cmp	r3, #32
 8000d20:	d107      	bne.n	8000d32 <cli_go_to_next_argument+0x48>
        arg++;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
    while(arg[0] != '\0'){ 
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f4      	bne.n	8000d1a <cli_go_to_next_argument+0x30>
 8000d30:	e000      	b.n	8000d34 <cli_go_to_next_argument+0x4a>
        if(arg[0] != ' ') break;
 8000d32:	bf00      	nop
    }
    
    return arg;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <cli_print_arg>:

static void cli_print_arg(char* s){
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
    int len = cli_arg_str_len(s);
    DBG_PRINTF("Argument size %d = ", len);
    for(int i = 0; i < len; i++) DBG_PRINTF("%c", s[i]);
    DBG_PRINTLN("");
#endif
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <cli_verify_int>:
    
    return true;
}
#endif

static bool cli_verify_int(char* tkn, bool isUnsigned, bool printEn){
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b088      	sub	sp, #32
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	70fb      	strb	r3, [r7, #3]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	70bb      	strb	r3, [r7, #2]
    int32_t len = cli_arg_str_len(tkn);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff60 	bl	8000c28 <cli_arg_str_len>
 8000d68:	6178      	str	r0, [r7, #20]
    bool is_negative = false;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	77fb      	strb	r3, [r7, #31]
    int32_t i = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]

    if(isUnsigned == false && tkn[0] == '-'){
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80cf 	beq.w	8000f1e <cli_verify_int+0x1cc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b2d      	cmp	r3, #45	; 0x2d
 8000d86:	f040 80ca 	bne.w	8000f1e <cli_verify_int+0x1cc>
        if(len == 1) {
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <cli_verify_int+0x42>
            if(printEn) ERR_PRINTLN("Negative int does not begin");
            return false;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e0ca      	b.n	8000f2a <cli_verify_int+0x1d8>
        }
        is_negative = true;
 8000d94:	2301      	movs	r3, #1
 8000d96:	77fb      	strb	r3, [r7, #31]
        i++;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
    }
    
    while(i < len){
 8000d9e:	e0be      	b.n	8000f1e <cli_verify_int+0x1cc>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	74fb      	strb	r3, [r7, #19]
 8000daa:	f004 fec7 	bl	8005b3c <__locale_ctype_ptr>
 8000dae:	4602      	mov	r2, r0
 8000db0:	7cfb      	ldrb	r3, [r7, #19]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d102      	bne.n	8000dc6 <cli_verify_int+0x74>
 8000dc0:	7cfb      	ldrb	r3, [r7, #19]
 8000dc2:	3320      	adds	r3, #32
 8000dc4:	e000      	b.n	8000dc8 <cli_verify_int+0x76>
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	2b78      	cmp	r3, #120	; 0x78
 8000dca:	d152      	bne.n	8000e72 <cli_verify_int+0x120>
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b30      	cmp	r3, #48	; 0x30
 8000dd8:	d149      	bne.n	8000e6e <cli_verify_int+0x11c>
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b20      	cmp	r3, #32
 8000de6:	d006      	beq.n	8000df6 <cli_verify_int+0xa4>
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	3b02      	subs	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d13b      	bne.n	8000e6e <cli_verify_int+0x11c>
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b2f      	cmp	r3, #47	; 0x2f
 8000e02:	d906      	bls.n	8000e12 <cli_verify_int+0xc0>
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3301      	adds	r3, #1
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b39      	cmp	r3, #57	; 0x39
 8000e10:	d92f      	bls.n	8000e72 <cli_verify_int+0x120>
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	3301      	adds	r3, #1
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	74bb      	strb	r3, [r7, #18]
 8000e1e:	f004 fe8d 	bl	8005b3c <__locale_ctype_ptr>
 8000e22:	4602      	mov	r2, r0
 8000e24:	7cbb      	ldrb	r3, [r7, #18]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d102      	bne.n	8000e3a <cli_verify_int+0xe8>
 8000e34:	7cbb      	ldrb	r3, [r7, #18]
 8000e36:	3320      	adds	r3, #32
 8000e38:	e000      	b.n	8000e3c <cli_verify_int+0xea>
 8000e3a:	7cbb      	ldrb	r3, [r7, #18]
 8000e3c:	2b60      	cmp	r3, #96	; 0x60
 8000e3e:	dd16      	ble.n	8000e6e <cli_verify_int+0x11c>
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	3301      	adds	r3, #1
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	747b      	strb	r3, [r7, #17]
 8000e4c:	f004 fe76 	bl	8005b3c <__locale_ctype_ptr>
 8000e50:	4602      	mov	r2, r0
 8000e52:	7c7b      	ldrb	r3, [r7, #17]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <cli_verify_int+0x116>
 8000e62:	7c7b      	ldrb	r3, [r7, #17]
 8000e64:	3320      	adds	r3, #32
 8000e66:	e000      	b.n	8000e6a <cli_verify_int+0x118>
 8000e68:	7c7b      	ldrb	r3, [r7, #17]
 8000e6a:	2b66      	cmp	r3, #102	; 0x66
 8000e6c:	dd01      	ble.n	8000e72 <cli_verify_int+0x120>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ));
            return false;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e05b      	b.n	8000f2a <cli_verify_int+0x1d8>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e7c:	d905      	bls.n	8000e8a <cli_verify_int+0x138>
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b39      	cmp	r3, #57	; 0x39
 8000e88:	d946      	bls.n	8000f18 <cli_verify_int+0x1c6>
 8000e8a:	7ffb      	ldrb	r3, [r7, #31]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d141      	bne.n	8000f14 <cli_verify_int+0x1c2>
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	743b      	strb	r3, [r7, #16]
 8000e9a:	f004 fe4f 	bl	8005b3c <__locale_ctype_ptr>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	7c3b      	ldrb	r3, [r7, #16]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <cli_verify_int+0x164>
 8000eb0:	7c3b      	ldrb	r3, [r7, #16]
 8000eb2:	3320      	adds	r3, #32
 8000eb4:	e000      	b.n	8000eb8 <cli_verify_int+0x166>
 8000eb6:	7c3b      	ldrb	r3, [r7, #16]
 8000eb8:	2b60      	cmp	r3, #96	; 0x60
 8000eba:	dd15      	ble.n	8000ee8 <cli_verify_int+0x196>
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	f004 fe39 	bl	8005b3c <__locale_ctype_ptr>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d102      	bne.n	8000ee2 <cli_verify_int+0x190>
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	3320      	adds	r3, #32
 8000ee0:	e000      	b.n	8000ee4 <cli_verify_int+0x192>
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	2b66      	cmp	r3, #102	; 0x66
 8000ee6:	dd17      	ble.n	8000f18 <cli_verify_int+0x1c6>
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	73bb      	strb	r3, [r7, #14]
 8000ef2:	f004 fe23 	bl	8005b3c <__locale_ctype_ptr>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <cli_verify_int+0x1bc>
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	3320      	adds	r3, #32
 8000f0c:	e000      	b.n	8000f10 <cli_verify_int+0x1be>
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b78      	cmp	r3, #120	; 0x78
 8000f12:	d001      	beq.n	8000f18 <cli_verify_int+0x1c6>
            if(printEn) ERR_PRINTLN("Invalid character in %s int argument", ( (isUnsigned == true) ? "unsigned" : "signed" ) );
            return false;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e008      	b.n	8000f2a <cli_verify_int+0x1d8>
        }

        i++;
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
    while(i < len){
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	f6ff af3c 	blt.w	8000da0 <cli_verify_int+0x4e>
    }  
    
    return true;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <cli_verify_buffer>:

static bool cli_verify_buffer(char* tkn, bool printEn){
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	70fb      	strb	r3, [r7, #3]
    int i = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
    
    if(tkn == NULL) return false;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <cli_verify_buffer+0x1a>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e0ef      	b.n	800112c <cli_verify_buffer+0x1fa>
    if(tkn[0] != '"' && tkn[0] != '{') {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b22      	cmp	r3, #34	; 0x22
 8000f52:	d005      	beq.n	8000f60 <cli_verify_buffer+0x2e>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b7b      	cmp	r3, #123	; 0x7b
 8000f5a:	d001      	beq.n	8000f60 <cli_verify_buffer+0x2e>
        if(printEn) ERR_PRINTLN("Buffer argument does not begin with '\"' nor '{'");
        return false;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e0e5      	b.n	800112c <cli_verify_buffer+0x1fa>
    }
    
    int32_t len = cli_arg_str_len(tkn);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fe61 	bl	8000c28 <cli_arg_str_len>
 8000f66:	6138      	str	r0, [r7, #16]
    
    if(len == -1) {
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d101      	bne.n	8000f74 <cli_verify_buffer+0x42>
        if(printEn) ERR_PRINTLN("Buffer beginning with '%c' does not end", tkn[0]);
        return false;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e0db      	b.n	800112c <cli_verify_buffer+0x1fa>
    }
    
    if(tkn[0] == '"') return true;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b22      	cmp	r3, #34	; 0x22
 8000f7a:	d101      	bne.n	8000f80 <cli_verify_buffer+0x4e>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0d5      	b.n	800112c <cli_verify_buffer+0x1fa>
    
    for(i = 1; i < len; i++){
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e0ca      	b.n	800111c <cli_verify_buffer+0x1ea>
        if(tkn[i] == '}') break; 
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b7d      	cmp	r3, #125	; 0x7d
 8000f90:	f000 80ca 	beq.w	8001128 <cli_verify_buffer+0x1f6>
        
        if(tkn[i] == ' ') continue;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	f000 80b9 	beq.w	8001114 <cli_verify_buffer+0x1e2>
        
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	f004 fdc6 	bl	8005b3c <__locale_ctype_ptr>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <cli_verify_buffer+0x96>
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	e000      	b.n	8000fca <cli_verify_buffer+0x98>
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b78      	cmp	r3, #120	; 0x78
 8000fcc:	d152      	bne.n	8001074 <cli_verify_buffer+0x142>
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b30      	cmp	r3, #48	; 0x30
 8000fda:	d149      	bne.n	8001070 <cli_verify_buffer+0x13e>
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b20      	cmp	r3, #32
 8000fe8:	d006      	beq.n	8000ff8 <cli_verify_buffer+0xc6>
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3b02      	subs	r3, #2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b7b      	cmp	r3, #123	; 0x7b
 8000ff6:	d13b      	bne.n	8001070 <cli_verify_buffer+0x13e>
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b2f      	cmp	r3, #47	; 0x2f
 8001004:	d906      	bls.n	8001014 <cli_verify_buffer+0xe2>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b39      	cmp	r3, #57	; 0x39
 8001012:	d92f      	bls.n	8001074 <cli_verify_buffer+0x142>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	73bb      	strb	r3, [r7, #14]
 8001020:	f004 fd8c 	bl	8005b3c <__locale_ctype_ptr>
 8001024:	4602      	mov	r2, r0
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	3301      	adds	r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <cli_verify_buffer+0x10a>
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	3320      	adds	r3, #32
 800103a:	e000      	b.n	800103e <cli_verify_buffer+0x10c>
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b60      	cmp	r3, #96	; 0x60
 8001040:	dd16      	ble.n	8001070 <cli_verify_buffer+0x13e>
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	737b      	strb	r3, [r7, #13]
 800104e:	f004 fd75 	bl	8005b3c <__locale_ctype_ptr>
 8001052:	4602      	mov	r2, r0
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	3301      	adds	r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <cli_verify_buffer+0x138>
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	3320      	adds	r3, #32
 8001068:	e000      	b.n	800106c <cli_verify_buffer+0x13a>
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	2b66      	cmp	r3, #102	; 0x66
 800106e:	dd01      	ble.n	8001074 <cli_verify_buffer+0x142>
            if(printEn) ERR_PRINTLN("Incorrect Hex format in buffer beginning with '{'");
            return false;
 8001070:	2300      	movs	r3, #0
 8001072:	e05b      	b.n	800112c <cli_verify_buffer+0x1fa>
        }
        
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b2f      	cmp	r3, #47	; 0x2f
 800107e:	d905      	bls.n	800108c <cli_verify_buffer+0x15a>
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b39      	cmp	r3, #57	; 0x39
 800108a:	d944      	bls.n	8001116 <cli_verify_buffer+0x1e4>
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	733b      	strb	r3, [r7, #12]
 8001096:	f004 fd51 	bl	8005b3c <__locale_ctype_ptr>
 800109a:	4602      	mov	r2, r0
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <cli_verify_buffer+0x180>
 80010ac:	7b3b      	ldrb	r3, [r7, #12]
 80010ae:	3320      	adds	r3, #32
 80010b0:	e000      	b.n	80010b4 <cli_verify_buffer+0x182>
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	2b60      	cmp	r3, #96	; 0x60
 80010b6:	dd15      	ble.n	80010e4 <cli_verify_buffer+0x1b2>
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	f004 fd3b 	bl	8005b3c <__locale_ctype_ptr>
 80010c6:	4602      	mov	r2, r0
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <cli_verify_buffer+0x1ac>
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	3320      	adds	r3, #32
 80010dc:	e000      	b.n	80010e0 <cli_verify_buffer+0x1ae>
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b66      	cmp	r3, #102	; 0x66
 80010e2:	dd18      	ble.n	8001116 <cli_verify_buffer+0x1e4>
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	72bb      	strb	r3, [r7, #10]
 80010ee:	f004 fd25 	bl	8005b3c <__locale_ctype_ptr>
 80010f2:	4602      	mov	r2, r0
 80010f4:	7abb      	ldrb	r3, [r7, #10]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <cli_verify_buffer+0x1d8>
 8001104:	7abb      	ldrb	r3, [r7, #10]
 8001106:	3320      	adds	r3, #32
 8001108:	e000      	b.n	800110c <cli_verify_buffer+0x1da>
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	2b78      	cmp	r3, #120	; 0x78
 800110e:	d002      	beq.n	8001116 <cli_verify_buffer+0x1e4>
            if(printEn) ERR_PRINTLN("Invalid character in buffer beginning with '{'");
            return false;
 8001110:	2300      	movs	r3, #0
 8001112:	e00b      	b.n	800112c <cli_verify_buffer+0x1fa>
        if(tkn[i] == ' ') continue;
 8001114:	bf00      	nop
    for(i = 1; i < len; i++){
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	f6ff af30 	blt.w	8000f86 <cli_verify_buffer+0x54>
 8001126:	e000      	b.n	800112a <cli_verify_buffer+0x1f8>
        if(tkn[i] == '}') break; 
 8001128:	bf00      	nop
        }
    }
    
    return true;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <cli_verify_arguments>:

static bool cli_verify_arguments(cliElement_t* e){
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    if(e == NULL) return false;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <cli_verify_arguments+0x12>
 8001142:	2300      	movs	r3, #0
 8001144:	e0be      	b.n	80012c4 <cli_verify_arguments+0x190>
    if(e->args == NULL) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <cli_verify_arguments+0x1e>
        ERR_PRINTLN("Arguments string is null for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return false;
 800114e:	2300      	movs	r3, #0
 8001150:	e0b8      	b.n	80012c4 <cli_verify_arguments+0x190>
    }
    
    DBG_PRINTLN("args = %s", argsStr);
    
    char* argTkn = argsStr;
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <cli_verify_arguments+0x198>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	61fb      	str	r3, [r7, #28]
    
    bool elipsisPresent = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 800115c:	f107 030f 	add.w	r3, r7, #15
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fa71 	bl	800064a <cli_verify_args_str>
 8001168:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
    DBG_PRINTLN("Len = %d, elipsisPresent = %d", len, elipsisPresent);
    
    if(len == -1){
 800116c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001170:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001174:	bf08      	it	eq
 8001176:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 800117a:	d101      	bne.n	8001180 <cli_verify_arguments+0x4c>
        return false;
 800117c:	2300      	movs	r3, #0
 800117e:	e0a1      	b.n	80012c4 <cli_verify_arguments+0x190>
    }
    
    size_t i = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    
    for(i = 0; i < len; i++){
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	e05e      	b.n	8001248 <cli_verify_arguments+0x114>
        if(argTkn == NULL) {
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <cli_verify_arguments+0x60>
            ERR_PRINTLN("No arguments in argument list for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 8001190:	2300      	movs	r3, #0
 8001192:	e097      	b.n	80012c4 <cli_verify_arguments+0x190>
        }
        
        if(argTkn[0] == '\0'){
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <cli_verify_arguments+0x6c>
            ERR_PRINTLN("Expected more arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 800119c:	2300      	movs	r3, #0
 800119e:	e091      	b.n	80012c4 <cli_verify_arguments+0x190>
        }
        
        cli_print_arg(argTkn);
 80011a0:	69f8      	ldr	r0, [r7, #28]
 80011a2:	f7ff fdcc 	bl	8000d3e <cli_print_arg>

        switch(e->args[i]){
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b69      	cmp	r3, #105	; 0x69
 80011b2:	d00b      	beq.n	80011cc <cli_verify_arguments+0x98>
 80011b4:	2b69      	cmp	r3, #105	; 0x69
 80011b6:	dc04      	bgt.n	80011c2 <cli_verify_arguments+0x8e>
 80011b8:	2b2a      	cmp	r3, #42	; 0x2a
 80011ba:	d024      	beq.n	8001206 <cli_verify_arguments+0xd2>
 80011bc:	2b62      	cmp	r3, #98	; 0x62
 80011be:	d019      	beq.n	80011f4 <cli_verify_arguments+0xc0>
 80011c0:	e032      	b.n	8001228 <cli_verify_arguments+0xf4>
 80011c2:	2b73      	cmp	r3, #115	; 0x73
 80011c4:	d016      	beq.n	80011f4 <cli_verify_arguments+0xc0>
 80011c6:	2b75      	cmp	r3, #117	; 0x75
 80011c8:	d00a      	beq.n	80011e0 <cli_verify_arguments+0xac>
 80011ca:	e02d      	b.n	8001228 <cli_verify_arguments+0xf4>
                return false;
            }
            #endif
            
            case 'i' : {
                if(cli_verify_int(argTkn, false, true)) break;
 80011cc:	2201      	movs	r2, #1
 80011ce:	2100      	movs	r1, #0
 80011d0:	69f8      	ldr	r0, [r7, #28]
 80011d2:	f7ff fdbe 	bl	8000d52 <cli_verify_int>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d127      	bne.n	800122c <cli_verify_arguments+0xf8>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 80011dc:	2300      	movs	r3, #0
 80011de:	e071      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            case 'u' : {
                if(cli_verify_int(argTkn, true, true)) break;
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	69f8      	ldr	r0, [r7, #28]
 80011e6:	f7ff fdb4 	bl	8000d52 <cli_verify_int>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11f      	bne.n	8001230 <cli_verify_arguments+0xfc>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e067      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            case 's' :
            case 'b' : {
                if(cli_verify_buffer(argTkn, true)) break;
 80011f4:	2101      	movs	r1, #1
 80011f6:	69f8      	ldr	r0, [r7, #28]
 80011f8:	f7ff fe9b 	bl	8000f32 <cli_verify_buffer>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <cli_verify_arguments+0x100>
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001202:	2300      	movs	r3, #0
 8001204:	e05e      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            case '*' : {
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7ff fda1 	bl	8000d52 <cli_verify_int>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d110      	bne.n	8001238 <cli_verify_arguments+0x104>
 8001216:	2100      	movs	r1, #0
 8001218:	69f8      	ldr	r0, [r7, #28]
 800121a:	f7ff fe8a 	bl	8000f32 <cli_verify_buffer>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d109      	bne.n	8001238 <cli_verify_arguments+0x104>
                {
                    break;
                }
                
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001224:	2300      	movs	r3, #0
 8001226:	e04d      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            default : {
                DBG_PRINTLN("Unrecognized arguments");
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
                return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e04b      	b.n	80012c4 <cli_verify_arguments+0x190>
                if(cli_verify_int(argTkn, false, true)) break;
 800122c:	bf00      	nop
 800122e:	e004      	b.n	800123a <cli_verify_arguments+0x106>
                if(cli_verify_int(argTkn, true, true)) break;
 8001230:	bf00      	nop
 8001232:	e002      	b.n	800123a <cli_verify_arguments+0x106>
                if(cli_verify_buffer(argTkn, true)) break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <cli_verify_arguments+0x106>
            }
        }
        
        argTkn = cli_go_to_next_argument(argTkn);
 8001238:	bf00      	nop
 800123a:	69f8      	ldr	r0, [r7, #28]
 800123c:	f7ff fd55 	bl	8000cea <cli_go_to_next_argument>
 8001240:	61f8      	str	r0, [r7, #28]
    for(i = 0; i < len; i++){
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3301      	adds	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001254:	4299      	cmp	r1, r3
 8001256:	eb72 0304 	sbcs.w	r3, r2, r4
 800125a:	db96      	blt.n	800118a <cli_verify_arguments+0x56>
    }
    
    if(elipsisPresent){
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d026      	beq.n	80012b0 <cli_verify_arguments+0x17c>
        while(argTkn != NULL && argTkn[0] != '\0'){
 8001262:	e01d      	b.n	80012a0 <cli_verify_arguments+0x16c>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f7ff fd72 	bl	8000d52 <cli_verify_int>
 800126e:	4603      	mov	r3, r0
 8001270:	f083 0301 	eor.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <cli_verify_arguments+0x15e>
 800127a:	2100      	movs	r1, #0
 800127c:	69f8      	ldr	r0, [r7, #28]
 800127e:	f7ff fe58 	bl	8000f32 <cli_verify_buffer>
 8001282:	4603      	mov	r3, r0
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <cli_verify_arguments+0x15e>
                #endif
            
                ) ) 
            {
                ERR_PRINTLN("Error occured in argument %d in action '%s'", i, ( (e->name == NULL) ? "NULL_NAME" : e->name ));
                return false;
 800128e:	2300      	movs	r3, #0
 8001290:	e018      	b.n	80012c4 <cli_verify_arguments+0x190>
            }
            
            argTkn = cli_go_to_next_argument(argTkn);
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff fd29 	bl	8000cea <cli_go_to_next_argument>
 8001298:	61f8      	str	r0, [r7, #28]
            i++;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
        while(argTkn != NULL && argTkn[0] != '\0'){
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <cli_verify_arguments+0x18e>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1da      	bne.n	8001264 <cli_verify_arguments+0x130>
 80012ae:	e008      	b.n	80012c2 <cli_verify_arguments+0x18e>
        }
    }
    
    else {
        if(argTkn != NULL && argTkn[0] != '\0'){
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <cli_verify_arguments+0x18e>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <cli_verify_arguments+0x18e>
            ERR_PRINTLN("Expected less arguments for action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
            return false;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <cli_verify_arguments+0x190>
        }
    }
    
    //if(argTkn[0] != '\0') ERR_PRINTLN();
    return true;
 80012c2:	2301      	movs	r3, #1
    //return ( (argTkn[0] == '\0') ? true : false );
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	20000218 	.word	0x20000218

080012d0 <cli_execute_action>:

static void cli_execute_action(cliElement_t* e){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    if(e == NULL) return;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80be 	beq.w	800145c <cli_execute_action+0x18c>
    if(e->args == NULL) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80bb 	beq.w	8001460 <cli_execute_action+0x190>
        ERR_PRINTLN("Argument list NULL in action '%s'", ( (e->name == NULL) ? "NULL_NAME" : e->name ) );
        return;
    }
    
    do{
        bool elipsisPresent = false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	737b      	strb	r3, [r7, #13]
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 80012ee:	f107 030d 	add.w	r3, r7, #13
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff f9a8 	bl	800064a <cli_verify_args_str>
 80012fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
        
        if(len == -1) return;
 80012fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001302:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001306:	bf08      	it	eq
 8001308:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 800130c:	f000 80aa 	beq.w	8001464 <cli_execute_action+0x194>

        argsStr = strtok(NULL, "\0");
 8001310:	4956      	ldr	r1, [pc, #344]	; (800146c <cli_execute_action+0x19c>)
 8001312:	2000      	movs	r0, #0
 8001314:	f004 fc52 	bl	8005bbc <strtok>
 8001318:	4602      	mov	r2, r0
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <cli_execute_action+0x1a0>)
 800131c:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL) argsStr = "";
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <cli_execute_action+0x1a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <cli_execute_action+0x5c>
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <cli_execute_action+0x1a0>)
 8001328:	4a52      	ldr	r2, [pc, #328]	; (8001474 <cli_execute_action+0x1a4>)
 800132a:	601a      	str	r2, [r3, #0]
        
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <cli_execute_action+0x1a0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d14c      	bne.n	80013ce <cli_execute_action+0xfe>
 8001334:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001338:	4323      	orrs	r3, r4
 800133a:	d17d      	bne.n	8001438 <cli_execute_action+0x168>
        
        while(argsStr != NULL && argsStr[0] != '\0') {
 800133c:	e047      	b.n	80013ce <cli_execute_action+0xfe>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 800133e:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <cli_execute_action+0x1a0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b2d      	cmp	r3, #45	; 0x2d
 8001346:	d04b      	beq.n	80013e0 <cli_execute_action+0x110>
 8001348:	4b49      	ldr	r3, [pc, #292]	; (8001470 <cli_execute_action+0x1a0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b7b      	cmp	r3, #123	; 0x7b
 8001350:	d046      	beq.n	80013e0 <cli_execute_action+0x110>
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <cli_execute_action+0x1a0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b22      	cmp	r3, #34	; 0x22
 800135a:	d041      	beq.n	80013e0 <cli_execute_action+0x110>
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <cli_execute_action+0x1a0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b2f      	cmp	r3, #47	; 0x2f
 8001364:	d904      	bls.n	8001370 <cli_execute_action+0xa0>
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <cli_execute_action+0x1a0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b39      	cmp	r3, #57	; 0x39
 800136e:	d937      	bls.n	80013e0 <cli_execute_action+0x110>
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <cli_execute_action+0x1a0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	f004 fbe0 	bl	8005b3c <__locale_ctype_ptr>
 800137c:	4602      	mov	r2, r0
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3301      	adds	r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d102      	bne.n	8001394 <cli_execute_action+0xc4>
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3320      	adds	r3, #32
 8001392:	e000      	b.n	8001396 <cli_execute_action+0xc6>
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b60      	cmp	r3, #96	; 0x60
 8001398:	dd14      	ble.n	80013c4 <cli_execute_action+0xf4>
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <cli_execute_action+0x1a0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	73bb      	strb	r3, [r7, #14]
 80013a2:	f004 fbcb 	bl	8005b3c <__locale_ctype_ptr>
 80013a6:	4602      	mov	r2, r0
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <cli_execute_action+0xee>
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	3320      	adds	r3, #32
 80013bc:	e000      	b.n	80013c0 <cli_execute_action+0xf0>
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	2b66      	cmp	r3, #102	; 0x66
 80013c2:	dd0d      	ble.n	80013e0 <cli_execute_action+0x110>
            argsStr++;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <cli_execute_action+0x1a0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a29      	ldr	r2, [pc, #164]	; (8001470 <cli_execute_action+0x1a0>)
 80013cc:	6013      	str	r3, [r2, #0]
        while(argsStr != NULL && argsStr[0] != '\0') {
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <cli_execute_action+0x1a0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <cli_execute_action+0x110>
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <cli_execute_action+0x1a0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ae      	bne.n	800133e <cli_execute_action+0x6e>
        }
        
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <cli_execute_action+0x1a0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <cli_execute_action+0x12a>
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <cli_execute_action+0x1a0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <cli_execute_action+0x12a>
 80013f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013f6:	4323      	orrs	r3, r4
 80013f8:	d120      	bne.n	800143c <cli_execute_action+0x16c>
        
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe9a 	bl	8001134 <cli_verify_arguments>
 8001400:	4603      	mov	r3, r0
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d119      	bne.n	8001440 <cli_execute_action+0x170>
        
        if(e->action == NULL) { 
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <cli_execute_action+0x14c>
            ERR_PRINTLN("No action configured for action '%s'", ( (e->name == NULL)  ? "NULL_NAME" : e->name ) );
            ERR_PRINTLN("");
            argsStr = NULL;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <cli_execute_action+0x1a0>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
            return;
 800141a:	e024      	b.n	8001466 <cli_execute_action+0x196>
        }
        
        currEl = e;
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <cli_execute_action+0x1a8>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
        
        e->action();
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4798      	blx	r3
        
        currEl = NULL;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <cli_execute_action+0x1a8>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
        argsStr = NULL;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <cli_execute_action+0x1a0>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
        
        return;
 8001434:	bf00      	nop
 8001436:	e016      	b.n	8001466 <cli_execute_action+0x196>
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <cli_execute_action+0x172>
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <cli_execute_action+0x172>
        if(cli_verify_arguments(e) == false) { DBG_PRINTLN("Invalid args"); break; }
 8001440:	bf00      	nop
        
    }while(0);
    
    argsStr = NULL;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <cli_execute_action+0x1a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <cli_execute_action+0x1ac>)
 800144a:	f000 f8fb 	bl	8001644 <cli_printf>
    MENU_PRINTLN("");
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <cli_execute_action+0x1b0>)
 8001450:	f000 f8f8 	bl	8001644 <cli_printf>
    cli_print_action(e);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fa0f 	bl	8000878 <cli_print_action>
 800145a:	e004      	b.n	8001466 <cli_execute_action+0x196>
    if(e == NULL) return;
 800145c:	bf00      	nop
 800145e:	e002      	b.n	8001466 <cli_execute_action+0x196>
        return;
 8001460:	bf00      	nop
 8001462:	e000      	b.n	8001466 <cli_execute_action+0x196>
        if(len == -1) return;
 8001464:	bf00      	nop
}
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	08006b6c 	.word	0x08006b6c
 8001470:	20000218 	.word	0x20000218
 8001474:	08006b70 	.word	0x08006b70
 8001478:	2000021c 	.word	0x2000021c
 800147c:	08006b74 	.word	0x08006b74
 8001480:	08006aa0 	.word	0x08006aa0

08001484 <cli_find_action>:

static void cli_find_action(char cliBuffer[], size_t maxLen){
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d048      	beq.n	8001526 <cli_find_action+0xa2>
    if(cliBuffer == NULL) return;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d047      	beq.n	800152a <cli_find_action+0xa6>
    
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <cli_find_action+0xb4>)
 800149c:	f107 040c 	add.w	r4, r7, #12
 80014a0:	461d      	mov	r5, r3
 80014a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014aa:	e884 0003 	stmia.w	r4, {r0, r1}
    cliElement_t* currentMenu = &init;
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char* tkn = strtok((char*)cliBuffer, " ");
 80014b4:	4921      	ldr	r1, [pc, #132]	; (800153c <cli_find_action+0xb8>)
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f004 fb80 	bl	8005bbc <strtok>
 80014bc:	62b8      	str	r0, [r7, #40]	; 0x28
    
    while(tkn != NULL){
 80014be:	e021      	b.n	8001504 <cli_find_action+0x80>
        cliElement_t* e = cli_find_element_in_menu(tkn, cliBuffer, maxLen, currentMenu);
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c8:	f7ff fb3f 	bl	8000b4a <cli_find_element_in_menu>
 80014cc:	6278      	str	r0, [r7, #36]	; 0x24
        
        if(e == NULL){
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01b      	beq.n	800150c <cli_find_action+0x88>
            break;
        }
        
        if(cli_is_sub_menu(e)){
 80014d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014d6:	f7ff f88c 	bl	80005f2 <cli_is_sub_menu>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <cli_find_action+0x62>
            DBG_PRINTLN("Entering submenu '%s'", e->name);
            currentMenu = e;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e4:	e009      	b.n	80014fa <cli_find_action+0x76>
        }
        
        else if(cli_is_action(e)){
 80014e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014e8:	f7ff f899 	bl	800061e <cli_is_action>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01d      	beq.n	800152e <cli_find_action+0xaa>
            DBG_PRINTLN("Action '%s' found", e->name);
            cli_execute_action(e);
 80014f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f4:	f7ff feec 	bl	80012d0 <cli_execute_action>
            return;
 80014f8:	e01a      	b.n	8001530 <cli_find_action+0xac>
            ERR_PRINTLN("Unknown type of CLI element (check for NULLs in CLIs defines ref cli.h lines 49 - 52)");
            ERR_PRINTLN("");
            return;
        }

        tkn = strtok(NULL, " ");
 80014fa:	4910      	ldr	r1, [pc, #64]	; (800153c <cli_find_action+0xb8>)
 80014fc:	2000      	movs	r0, #0
 80014fe:	f004 fb5d 	bl	8005bbc <strtok>
 8001502:	62b8      	str	r0, [r7, #40]	; 0x28
    while(tkn != NULL){
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1da      	bne.n	80014c0 <cli_find_action+0x3c>
 800150a:	e000      	b.n	800150e <cli_find_action+0x8a>
            break;
 800150c:	bf00      	nop
    }
    
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	461a      	mov	r2, r3
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <cli_find_action+0xbc>)
 800151a:	f000 f893 	bl	8001644 <cli_printf>
    cli_print_menu(currentMenu);
 800151e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001520:	f7ff f970 	bl	8000804 <cli_print_menu>
 8001524:	e004      	b.n	8001530 <cli_find_action+0xac>
    if(maxLen == 0) return;
 8001526:	bf00      	nop
 8001528:	e002      	b.n	8001530 <cli_find_action+0xac>
    if(cliBuffer == NULL) return;
 800152a:	bf00      	nop
 800152c:	e000      	b.n	8001530 <cli_find_action+0xac>
            return;
 800152e:	bf00      	nop
}
 8001530:	3730      	adds	r7, #48	; 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bdb0      	pop	{r4, r5, r7, pc}
 8001536:	bf00      	nop
 8001538:	08006c1c 	.word	0x08006c1c
 800153c:	08006a80 	.word	0x08006a80
 8001540:	08006bf4 	.word	0x08006bf4

08001544 <cli_treat_command>:

/**********************************************
 * PRIVATE / PUBLIC FUNCTIONS
 *********************************************/
 
void cli_treat_command(char cliBuffer[], size_t maxLen){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
    if(maxLen == 0) return;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d019      	beq.n	8001588 <cli_treat_command+0x44>
    if(cliBuffer == NULL) return;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d018      	beq.n	800158c <cli_treat_command+0x48>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment == false) return;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <cli_treat_command+0x54>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d113      	bne.n	8001590 <cli_treat_command+0x4c>
    
    cli_cmd_waiting_treatment = false; 
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <cli_treat_command+0x54>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
#endif //CLI_POLLING_EN
    
    cli_find_action(cliBuffer, maxLen);
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff87 	bl	8001484 <cli_find_action>
    
    len = 0;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <cli_treat_command+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    memset(cliBuffer, 0, maxLen);
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	2100      	movs	r1, #0
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f004 fafb 	bl	8005b7c <memset>
 8001586:	e004      	b.n	8001592 <cli_treat_command+0x4e>
    if(maxLen == 0) return;
 8001588:	bf00      	nop
 800158a:	e002      	b.n	8001592 <cli_treat_command+0x4e>
    if(cliBuffer == NULL) return;
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <cli_treat_command+0x4e>
    if(cli_cmd_waiting_treatment == false) return;
 8001590:	bf00      	nop
    DBG_PRINT("Cmd treated, enter new command = ");
}
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000220 	.word	0x20000220
 800159c:	20000214 	.word	0x20000214

080015a0 <cli_insert_char>:
    if(res != NULL) *res = ret;
    
    return bRead;
}

cli_status_e cli_insert_char(char cliBuffer[], size_t maxLen, char const c){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	4613      	mov	r3, r2
 80015ac:	71fb      	strb	r3, [r7, #7]
    if(maxLen == 0) return CLI_ERR;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <cli_insert_char+0x18>
 80015b4:	2306      	movs	r3, #6
 80015b6:	e03d      	b.n	8001634 <cli_insert_char+0x94>
    if(cliBuffer == NULL) return CLI_ERR;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <cli_insert_char+0x22>
 80015be:	2306      	movs	r3, #6
 80015c0:	e038      	b.n	8001634 <cli_insert_char+0x94>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment){
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <cli_insert_char+0x9c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <cli_insert_char+0x2e>
        ERR_PRINTLN("Command waiting for treatment");
        return CLI_WAITING_TREATMENT;
 80015ca:	2304      	movs	r3, #4
 80015cc:	e032      	b.n	8001634 <cli_insert_char+0x94>
    }
#endif //CLI_POLLING_EN

    if(c == '\r') return CLI_CONTINUE;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b0d      	cmp	r3, #13
 80015d2:	d101      	bne.n	80015d8 <cli_insert_char+0x38>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e02d      	b.n	8001634 <cli_insert_char+0x94>

    if(c != '\n'){
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d011      	beq.n	8001602 <cli_insert_char+0x62>
        cliBuffer[((len++)%maxLen)] = c;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <cli_insert_char+0xa0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	4916      	ldr	r1, [pc, #88]	; (8001640 <cli_insert_char+0xa0>)
 80015e6:	600a      	str	r2, [r1, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	fb01 f202 	mul.w	r2, r1, r2
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	701a      	strb	r2, [r3, #0]
        return CLI_CONTINUE;
 80015fe:	2301      	movs	r3, #1
 8001600:	e018      	b.n	8001634 <cli_insert_char+0x94>
    }
    
    if(len >= maxLen){
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <cli_insert_char+0xa0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	d809      	bhi.n	8001620 <cli_insert_char+0x80>
        len = 0;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <cli_insert_char+0xa0>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
        memset(cliBuffer, 0, maxLen);
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	2100      	movs	r1, #0
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f004 fab0 	bl	8005b7c <memset>
        ERR_PRINT("COMMAND TOO LARGE! Enter new command = ");
        return CLI_TOO_BIG;
 800161c:	2303      	movs	r3, #3
 800161e:	e009      	b.n	8001634 <cli_insert_char+0x94>
    }
    
    cliBuffer[len] = '\0';
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <cli_insert_char+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 0)
    cli_treat_command(cliBuffer, maxLen);
    return CLI_COMMAND_RCV;
#else
    cli_cmd_waiting_treatment = true;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <cli_insert_char+0x9c>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
    return CLI_WAITING_TREATMENT;
 8001632:	2304      	movs	r3, #4
#endif //CLI_POLLING_EN
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000220 	.word	0x20000220
 8001640:	20000214 	.word	0x20000214

08001644 <cli_printf>:

__attribute__((weak)) void cli_printf(char const * const str, ...){
 8001644:	b40f      	push	{r0, r1, r2, r3}
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, str);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	607b      	str	r3, [r7, #4]
    vprintf(str, args);
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	6938      	ldr	r0, [r7, #16]
 8001656:	f004 fb05 	bl	8005c64 <viprintf>
    va_end(args);

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001664:	b004      	add	sp, #16
 8001666:	4770      	bx	lr

08001668 <cli_rcv_char_cb_irq>:
 * CLI Receive char (IRQ)
 *
 * @brief This function receives a character and puts in the cli buffer
 *
 **********************************************************************/
void cli_rcv_char_cb_irq(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	cli_insert_char(cliBuffer, sizeof(cliBuffer), c);
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <cli_rcv_char_cb_irq+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <cli_rcv_char_cb_irq+0x24>)
 8001676:	f7ff ff93 	bl	80015a0 <cli_insert_char>
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	4902      	ldr	r1, [pc, #8]	; (8001688 <cli_rcv_char_cb_irq+0x20>)
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <cli_rcv_char_cb_irq+0x28>)
 8001680:	f003 fbe0 	bl	8004e44 <HAL_UART_Receive_IT>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000221 	.word	0x20000221
 800168c:	20000224 	.word	0x20000224
 8001690:	20014340 	.word	0x20014340

08001694 <cli_init>:
 * CLI INIT
 *
 * @brief This function initializes the CLI
 *
 **********************************************************************/
void cli_init(){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <cli_init+0x18>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	4903      	ldr	r1, [pc, #12]	; (80016b0 <cli_init+0x1c>)
 80016a2:	4802      	ldr	r0, [pc, #8]	; (80016ac <cli_init+0x18>)
 80016a4:	f003 fbce 	bl	8004e44 <HAL_UART_Receive_IT>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20014340 	.word	0x20014340
 80016b0:	20000221 	.word	0x20000221

080016b4 <cli_process>:
 * CLI Process
 *
 * @brief This function treats the command sent by CLI
 *
 **********************************************************************/
void cli_process(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	cli_treat_command(cliBuffer, sizeof(cliBuffer));
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <cli_process+0x10>)
 80016bc:	f7ff ff42 	bl	8001544 <cli_treat_command>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000224 	.word	0x20000224

080016c8 <os_init_get>:
 * @brief This function informs other processes that the OS is initialized
 *
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	return os_init_done;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <os_init_get+0x14>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200002a4 	.word	0x200002a4

080016e0 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	460b      	mov	r3, r1
 80016ee:	72fb      	strb	r3, [r7, #11]

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <os_init+0xbc>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <os_init+0x1c>
 80016f8:	2305      	movs	r3, #5
 80016fa:	e04a      	b.n	8001792 <os_init+0xb2>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <os_init+0xc0>)
 80016fe:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	; 0xd80
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <os_init+0xc0>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <os_init+0xc4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <os_init+0xc4>)
 8001712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001716:	6013      	str	r3, [r2, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <os_init+0xc4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <os_init+0xc4>)
 800171e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001722:	6013      	str	r3, [r2, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <os_init+0xc0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <os_init+0xc0>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6093      	str	r3, [r2, #8]
	OS_SYSTICK_SET_PRIO(14);
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <os_init+0xc0>)
 8001732:	22e0      	movs	r2, #224	; 0xe0
 8001734:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <os_init+0xc0>)
 800173a:	22f0      	movs	r2, #240	; 0xf0
 800173c:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <os_init+0xc0>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <os_init+0xc0>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6093      	str	r3, [r2, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 800174c:	f000 f8c6 	bl	80018dc <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 8001750:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f001 f98b 	bl	8002a74 <os_task_init>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK)
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <os_init+0x8c>
		return ret;
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	e012      	b.n	8001792 <os_init+0xb2>

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <os_init+0xbc>)
 800177a:	701a      	strb	r2, [r3, #0]

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, 0, idle_stack_size, NULL);
 800177c:	2300      	movs	r3, #0
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <os_init+0xc8>)
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <os_init+0xcc>)
 800178c:	f001 fa48 	bl	8002c20 <os_task_create>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002a4 	.word	0x200002a4
 80017a0:	e000e008 	.word	0xe000e008
 80017a4:	e000ef34 	.word	0xe000ef34
 80017a8:	080017b1 	.word	0x080017b1
 80017ac:	200142dc 	.word	0x200142dc

080017b0 <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(i);
	while(1){
 80017b8:	e7fe      	b.n	80017b8 <os_idle_task_fn+0x8>

080017ba <os_no_task_ready_cb>:
 * or is unblocked by an interrupt that this function will stop calling
 *
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
	return;
 80017be:	bf00      	nop
}
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <os_insufficient_heap_cb>:
 *
 * @brief This function is called by the OS when an os_alloc fails due to
 * not enogh memory
 *
 **********************************************************************/
__weak void os_insufficient_heap_cb(){
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	return;
 80017cc:	bf00      	nop
}
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <os_heap_BlockGetSize>:
 *
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if(p == NULL) return 0; //Avoid explosion
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <os_heap_BlockGetSize+0x12>
 80017e6:	2300      	movs	r3, #0
 80017e8:	e00b      	b.n	8001802 <os_heap_BlockGetSize+0x2a>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <os_heap_BlockGetSize+0x24>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	e002      	b.n	8001802 <os_heap_BlockGetSize+0x2a>
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <os_heap_BlockGetSize+0x38>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	1ad3      	subs	r3, r2, r3
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200142a8 	.word	0x200142a8

08001814 <os_heap_AllocateBeginning>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateBeginning(os_heap_header_t* p, uint32_t size){
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <os_heap_AllocateBeginning+0x14>
 8001824:	2300      	movs	r3, #0
 8001826:	e01f      	b.n	8001868 <os_heap_AllocateBeginning+0x54>
	if(size == 0) return NULL;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <os_heap_AllocateBeginning+0x1e>
 800182e:	2300      	movs	r3, #0
 8001830:	e01a      	b.n	8001868 <os_heap_AllocateBeginning+0x54>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	os_heap_header_t* newBlock   = p;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	3308      	adds	r3, #8
 800183e:	60bb      	str	r3, [r7, #8]

	/* Add Block to list
	 ---------------------------------------------------*/
	newTopHead->addr_next = newBlock->addr_next != (uint32_t)newTopHead ? newBlock->addr_next : newTopHead->addr_next;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	429a      	cmp	r2, r3
 8001848:	d002      	beq.n	8001850 <os_heap_AllocateBeginning+0x3c>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e001      	b.n	8001854 <os_heap_AllocateBeginning+0x40>
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	6013      	str	r3, [r2, #0]
	newBlock->addr_next	  = (uint32_t) newTopHead;
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3308      	adds	r3, #8
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <os_heap_AllocateEnd>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateEnd(os_heap_header_t* p, uint32_t size){
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <os_heap_AllocateEnd+0x14>
 8001884:	2300      	movs	r3, #0
 8001886:	e024      	b.n	80018d2 <os_heap_AllocateEnd+0x5e>
	if(size == 0) return NULL;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <os_heap_AllocateEnd+0x1e>
 800188e:	2300      	movs	r3, #0
 8001890:	e01f      	b.n	80018d2 <os_heap_AllocateEnd+0x5e>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	uint32_t block_size = os_heap_BlockGetSize(p);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa0 	bl	80017d8 <os_heap_BlockGetSize>
 8001898:	6178      	str	r0, [r7, #20]
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	441a      	add	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	3b08      	subs	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
	os_heap_header_t* oldTopHead = (os_heap_header_t*) (p);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60fb      	str	r3, [r7, #12]

	/* Add Block to list
	 ---------------------------------------------------*/
	newBlock->addr_next   = oldTopHead->addr_next;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	601a      	str	r2, [r3, #0]
	oldTopHead->addr_next = newBlock != oldTopHead ? (uint32_t) newBlock : oldTopHead->addr_next;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d102      	bne.n	80018c2 <os_heap_AllocateEnd+0x4e>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	e000      	b.n	80018c4 <os_heap_AllocateEnd+0x50>
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	6013      	str	r3, [r2, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2201      	movs	r2, #1
 80018cc:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	3308      	adds	r3, #8

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <os_heap_clear>:
 * OS Heap Clear
 *
 * @brief This function clears the heap
 *
 **********************************************************************/
void os_heap_clear(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 80018e2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80018e6:	2100      	movs	r1, #0
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <os_heap_clear+0x2c>)
 80018ea:	f004 f947 	bl	8005b7c <memset>

	/* Get header pointers
	 ---------------------------------------------------*/
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <os_heap_clear+0x2c>)
 80018f0:	607b      	str	r3, [r7, #4]

	/* Initialize headers
	 ---------------------------------------------------*/
	p->block_used = 0; //Mark as not used
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
	p->addr_next  = 0; //Point outside of the heap to indicate end
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200002a8 	.word	0x200002a8

0800190c <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <os_heap_alloc+0x12>
 800191a:	2300      	movs	r3, #0
 800191c:	e054      	b.n	80019c8 <os_heap_alloc+0xbc>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800191e:	f3ef 8310 	mrs	r3, PRIMASK
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	b672      	cpsid	i
 8001926:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t min_size = 0xFFFFFFFF;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	623b      	str	r3, [r7, #32]
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <os_heap_alloc+0xc4>)
 8001936:	61fb      	str	r3, [r7, #28]

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3307      	adds	r3, #7
 800193c:	f023 0307 	bic.w	r3, r3, #7
 8001940:	61bb      	str	r3, [r7, #24]
	while(p != NULL){
 8001942:	e018      	b.n	8001976 <os_heap_alloc+0x6a>

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 8001944:	69f8      	ldr	r0, [r7, #28]
 8001946:	f7ff ff47 	bl	80017d8 <os_heap_BlockGetSize>
 800194a:	4603      	mov	r3, r0
 800194c:	3b08      	subs	r3, #8
 800194e:	613b      	str	r3, [r7, #16]
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10b      	bne.n	8001970 <os_heap_alloc+0x64>
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <os_heap_alloc+0x64>
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	429a      	cmp	r2, r3
 8001966:	d303      	bcc.n	8001970 <os_heap_alloc+0x64>
			pBlock = p;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
			min_size = data_size;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	623b      	str	r3, [r7, #32]
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61fb      	str	r3, [r7, #28]
	while(p != NULL){
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e3      	bne.n	8001944 <os_heap_alloc+0x38>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <os_heap_alloc+0xc4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d303      	bcc.n	800198c <os_heap_alloc+0x80>
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <os_heap_alloc+0xc8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d908      	bls.n	800199e <os_heap_alloc+0x92>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 800198c:	f7ff ff1c 	bl	80017c8 <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f383 8810 	msr	PRIMASK, r3
 8001996:	f3bf 8f6f 	isb	sy
		return NULL;
 800199a:	2300      	movs	r3, #0
 800199c:	e014      	b.n	80019c8 <os_heap_alloc+0xbc>
	}

	/* If pBlock is not NULL, reserve a memory block
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	d805      	bhi.n	80019b0 <os_heap_alloc+0xa4>
 80019a4:	69b9      	ldr	r1, [r7, #24]
 80019a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019a8:	f7ff ff34 	bl	8001814 <os_heap_AllocateBeginning>
 80019ac:	4603      	mov	r3, r0
 80019ae:	e004      	b.n	80019ba <os_heap_alloc+0xae>
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019b4:	f7ff ff5e 	bl	8001874 <os_heap_AllocateEnd>
 80019b8:	4603      	mov	r3, r0
 80019ba:	617b      	str	r3, [r7, #20]
	OS_EXIT_CRITICAL();
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f383 8810 	msr	PRIMASK, r3
 80019c2:	f3bf 8f6f 	isb	sy
	return ret;
 80019c6:	697b      	ldr	r3, [r7, #20]

}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200002a8 	.word	0x200002a8
 80019d4:	200142a7 	.word	0x200142a7

080019d8 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <os_heap_free+0x12>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e065      	b.n	8001ab6 <os_heap_free+0xde>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a35      	ldr	r2, [pc, #212]	; (8001ac4 <os_heap_free+0xec>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d303      	bcc.n	80019fa <os_heap_free+0x22>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <os_heap_free+0xf0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <os_heap_free+0x26>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e05b      	b.n	8001ab6 <os_heap_free+0xde>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80019fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	b672      	cpsid	i
 8001a06:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <os_heap_free+0xf4>)
 8001a0c:	61fb      	str	r3, [r7, #28]
	os_heap_header_t* block = (os_heap_header_t*)((uint32_t)p - sizeof(os_heap_header_t));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3b08      	subs	r3, #8
 8001a12:	617b      	str	r3, [r7, #20]

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
	os_heap_header_t* pPrev = NULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]

	/* Search for the target block while still inside the heap
	 ---------------------------------------------------*/
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 8001a1c:	e004      	b.n	8001a28 <os_heap_free+0x50>

		/* Save current block and go to next block
		 ---------------------------------------------------*/
		pPrev = cur;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	61bb      	str	r3, [r7, #24]
		cur = (os_heap_header_t*) ( cur->addr_next );
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61fb      	str	r3, [r7, #28]
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4a28      	ldr	r2, [pc, #160]	; (8001acc <os_heap_free+0xf4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d307      	bcc.n	8001a40 <os_heap_free+0x68>
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <os_heap_free+0xf0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d803      	bhi.n	8001a40 <os_heap_free+0x68>
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1ee      	bne.n	8001a1e <os_heap_free+0x46>
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if(cur != block || !(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1]) ) {
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <os_heap_free+0x80>
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <os_heap_free+0xf4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d303      	bcc.n	8001a58 <os_heap_free+0x80>
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <os_heap_free+0xf0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d906      	bls.n	8001a66 <os_heap_free+0x8e>
		OS_EXIT_CRITICAL();
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f383 8810 	msr	PRIMASK, r3
 8001a5e:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 8001a62:	2302      	movs	r3, #2
 8001a64:	e027      	b.n	8001ab6 <os_heap_free+0xde>
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	613b      	str	r3, [r7, #16]

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00a      	beq.n	8001a8e <os_heap_free+0xb6>
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <os_heap_free+0xb6>
		cur->addr_next = pNext->addr_next;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	601a      	str	r2, [r3, #0]
		pNext->addr_next = 0; //For principle, but not necessary
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <os_heap_free+0xd2>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d106      	bne.n	8001aaa <os_heap_free+0xd2>
		pPrev->addr_next = cur->addr_next;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]
		cur->addr_next = 0; //For principle, but not necessary
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
	}

	OS_EXIT_CRITICAL();
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f383 8810 	msr	PRIMASK, r3
 8001ab0:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200002b0 	.word	0x200002b0
 8001ac8:	200142a7 	.word	0x200142a7
 8001acc:	200002a8 	.word	0x200002a8

08001ad0 <os_mutex_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the mutex
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_mutex_udpatePrio(os_handle_t h){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

	/* Error Check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <os_mutex_udpatePrio+0x12>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e032      	b.n	8001b48 <os_mutex_udpatePrio+0x78>
	if(h->type != OS_OBJ_MUTEX) return false;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d001      	beq.n	8001aee <os_mutex_udpatePrio+0x1e>
 8001aea:	2300      	movs	r3, #0
 8001aec:	e02c      	b.n	8001b48 <os_mutex_udpatePrio+0x78>

	/* Convet reference and store previous priority
	 ---------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*)h;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	617b      	str	r3, [r7, #20]
	int8_t prev_max_prio = mutex->max_prio;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	7f5b      	ldrb	r3, [r3, #29]
 8001af6:	74fb      	strb	r3, [r7, #19]

	/* Get reference to the first blocked task
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8001af8:	23ff      	movs	r3, #255	; 0xff
 8001afa:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8001b08:	e00f      	b.n	8001b2a <os_mutex_udpatePrio+0x5a>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b12:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8001b14:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001b18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	da01      	bge.n	8001b24 <os_mutex_udpatePrio+0x54>
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ec      	bne.n	8001b0a <os_mutex_udpatePrio+0x3a>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	mutex->max_prio = maxPrio;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	7ffa      	ldrb	r2, [r7, #31]
 8001b34:	775a      	strb	r2, [r3, #29]
	return prev_max_prio != maxPrio;
 8001b36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3724      	adds	r7, #36	; 0x24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <os_task_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the task
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_task_udpatePrio(os_handle_t h){
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <os_task_udpatePrio+0x12>
 8001b62:	2300      	movs	r3, #0
 8001b64:	e04e      	b.n	8001c04 <os_task_udpatePrio+0xb0>
	if(h->type != OS_OBJ_TASK) return false;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <os_task_udpatePrio+0x1e>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e048      	b.n	8001c04 <os_task_udpatePrio+0xb0>

	/* Store priority
	 ---------------------------------------------------*/
	os_task_t* tsk = (os_task_t*)h;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	617b      	str	r3, [r7, #20]
	int8_t prev_prio = tsk->priority;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b7c:	74fb      	strb	r3, [r7, #19]

	/* Point to the first task on block list
	 ---------------------------------------------------*/
	int8_t maxPrio = tsk->basePriority;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	7e5b      	ldrb	r3, [r3, #25]
 8001b82:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8001b90:	e00f      	b.n	8001bb2 <os_task_udpatePrio+0x5e>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b9a:	72bb      	strb	r3, [r7, #10]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8001b9c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001ba0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	da01      	bge.n	8001bac <os_task_udpatePrio+0x58>
 8001ba8:	7abb      	ldrb	r3, [r7, #10]
 8001baa:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ec      	bne.n	8001b92 <os_task_udpatePrio+0x3e>
	}

	/* Point to the first mutex in the owned list
	 ---------------------------------------------------*/
	head = (os_list_head_t*) ( ((os_task_t*)h)->ownedMutex);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	60fb      	str	r3, [r7, #12]
	it = head->head.next;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]

	/* While it is a valid mutex
	 ---------------------------------------------------*/
	while(it != NULL){
 8001bc4:	e00e      	b.n	8001be4 <os_task_udpatePrio+0x90>

		/* Get mutex' priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	7f5b      	ldrb	r3, [r3, #29]
 8001bcc:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8001bce:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001bd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	da01      	bge.n	8001bde <os_task_udpatePrio+0x8a>
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	77fb      	strb	r3, [r7, #31]

		/* Goes to next mutex
		 ---------------------------------------------------*/
		it = it->next;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ed      	bne.n	8001bc6 <os_task_udpatePrio+0x72>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	tsk->priority = maxPrio;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	7ffa      	ldrb	r2, [r7, #31]
 8001bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	return prev_prio != maxPrio;
 8001bf2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001bf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	bf14      	ite	ne
 8001bfe:	2301      	movne	r3, #1
 8001c00:	2300      	moveq	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3724      	adds	r7, #36	; 0x24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <os_obj_updatePrio>:
 * @param os_handle_t h : [in] The reference to the object
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
void os_obj_updatePrio(os_handle_t h){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

	/* Enter critical section
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001c18:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	b672      	cpsid	i
 8001c20:	f3bf 8f6f 	isb	sy

	/* If the object is a mutex, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d10a      	bne.n	8001c42 <os_obj_updatePrio+0x32>
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff4f 	bl	8001ad0 <os_mutex_udpatePrio>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <os_obj_updatePrio+0x32>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ffe7 	bl	8001c10 <os_obj_updatePrio>
	}

	/* If the object is a task, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d13d      	bne.n	8001cc6 <os_obj_updatePrio+0xb6>
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff82 	bl	8001b54 <os_task_udpatePrio>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d037      	beq.n	8001cc6 <os_obj_updatePrio+0xb6>

		/* If its priority changed, we must update the objects the task is waiting
		 ---------------------------------------------------*/
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e02f      	b.n	8001cbc <os_obj_updatePrio+0xac>

			/* objects that are not tasks or mutexes
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d008      	beq.n	8001c80 <os_obj_updatePrio+0x70>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d108      	bne.n	8001c92 <os_obj_updatePrio+0x82>

				/* Update object's priority
				 ---------------------------------------------------*/
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffbf 	bl	8001c10 <os_obj_updatePrio>
			}

			/* update msgQ
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d108      	bne.n	8001cb6 <os_obj_updatePrio+0xa6>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fcb7 	bl	8002624 <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3ca      	bcc.n	8001c5c <os_obj_updatePrio+0x4c>
		}
	}

	/* Exit critical section
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f383 8810 	msr	PRIMASK, r3
 8001ccc:	f3bf 8f6f 	isb	sy
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <os_list_init>:
 *
 * @brief This function initializes a list
 *
 * @return os_list_head_t* : reference to the head of the list
 **********************************************************************/
os_list_head_t* os_list_init(){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

	/* Allocate head
	 ---------------------------------------------------*/
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 8001cde:	201c      	movs	r0, #28
 8001ce0:	f7ff fe14 	bl	800190c <os_heap_alloc>
 8001ce4:	6078      	str	r0, [r7, #4]
	if(ret == NULL) return NULL;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <os_list_init+0x18>
 8001cec:	2300      	movs	r3, #0
 8001cee:	e012      	b.n	8001d16 <os_list_init+0x3e>

	/* Init head and return
	 ---------------------------------------------------*/
	ret->head.next = NULL;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
	ret->head.prev = NULL;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
	ret->head.element = NULL;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
	ret->first = NULL;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
	ret->last = NULL;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	615a      	str	r2, [r3, #20]
	ret->listSize = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]

	return ret;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <os_list_search>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	  		   : [in] element to search
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(el == NULL) return NULL;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <os_list_search+0x14>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e01f      	b.n	8001d72 <os_list_search+0x54>
	if(head == NULL) return NULL;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <os_list_search+0x1e>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e01a      	b.n	8001d72 <os_list_search+0x54>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	b672      	cpsid	i
 8001d44:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8001d4e:	e002      	b.n	8001d56 <os_list_search+0x38>
		it = it->next;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <os_list_search+0x48>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d1f4      	bne.n	8001d50 <os_list_search+0x32>
	}

	OS_EXIT_CRITICAL();
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f383 8810 	msr	PRIMASK, r3
 8001d6c:	f3bf 8f6f 	isb	sy
	return it;
 8001d70:	68fb      	ldr	r3, [r7, #12]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <os_handle_list_searchByName>:
 * @param os_obj_type_e type   : [in] type of the object
 * @param char* name		   : [in] name of the object
 *
 * @return os_list_cell_t* : reference to the cell containing the handle or null if not found
 **********************************************************************/
os_list_cell_t* os_handle_list_searchByName(os_list_head_t* head, os_obj_type_e type, char const * name){
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	460b      	mov	r3, r1
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(head == NULL) return NULL;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <os_handle_list_searchByName+0x18>
 8001d92:	2300      	movs	r3, #0
 8001d94:	e031      	b.n	8001dfa <os_handle_list_searchByName+0x7c>
	if(name == NULL) return NULL;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <os_handle_list_searchByName+0x22>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e02c      	b.n	8001dfa <os_handle_list_searchByName+0x7c>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001da0:	f3ef 8310 	mrs	r3, PRIMASK
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	b672      	cpsid	i
 8001da8:	f3bf 8f6f 	isb	sy

	/* Search list
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 8001db2:	e017      	b.n	8001de4 <os_handle_list_searchByName+0x66>

		/* If type and name match, we break.
		 ------------------------------------------------------*/
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	7afa      	ldrb	r2, [r7, #11]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10e      	bne.n	8001dde <os_handle_list_searchByName+0x60>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <os_handle_list_searchByName+0x60>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe f9fc 	bl	80001d0 <strcmp>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <os_handle_list_searchByName+0x6e>

		/* Otherwise we go to next one
		 ------------------------------------------------------*/
		it = it->next;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1e4      	bne.n	8001db4 <os_handle_list_searchByName+0x36>
 8001dea:	e000      	b.n	8001dee <os_handle_list_searchByName+0x70>
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 8001dec:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f383 8810 	msr	PRIMASK, r3
 8001df4:	f3bf 8f6f 	isb	sy
	return it;
 8001df8:	697b      	ldr	r3, [r7, #20]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <os_list_add>:
 * @param void* el	   		    : [in] reference to the element
 * @param os_list_add_pos_e pos : [in] flag to indicate whether to add at the first or last position
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71fb      	strb	r3, [r7, #7]

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8001e10:	f3ef 8310 	mrs	r3, PRIMASK
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	b672      	cpsid	i
 8001e18:	f3bf 8f6f 	isb	sy

	/* Allocate cell
	 ------------------------------------------------------*/
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 8001e1c:	2010      	movs	r0, #16
 8001e1e:	f7ff fd75 	bl	800190c <os_heap_alloc>
 8001e22:	6178      	str	r0, [r7, #20]

	/* Check allocation
	 ------------------------------------------------------*/
	if(new == NULL) {
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <os_list_add+0x36>

		/* EXIT Critical Section
		 ------------------------------------------------------*/
		OS_EXIT_CRITICAL();
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f383 8810 	msr	PRIMASK, r3
 8001e30:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e04e      	b.n	8001ed6 <os_list_add+0xd4>
	}

	/* Store information on new cell
	 ------------------------------------------------------*/
	new->order  = head->listSize++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	1c59      	adds	r1, r3, #1
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6191      	str	r1, [r2, #24]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	60d3      	str	r3, [r2, #12]
	new->element = el;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	609a      	str	r2, [r3, #8]

	/* Add first element
	 ------------------------------------------------------*/
	if(head->head.next == NULL) {
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10f      	bne.n	8001e74 <os_list_add+0x72>
		head->last = new;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	615a      	str	r2, [r3, #20]
		new->prev = &head->head;
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	605a      	str	r2, [r3, #4]
		new->next = NULL;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
		head->head.next = new;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
		head->first = new;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	e02a      	b.n	8001eca <os_list_add+0xc8>
	}
	else{

		/* Add cell at the beginning
		 ------------------------------------------------------*/
		if(pos == OS_LIST_FIRST){
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d114      	bne.n	8001ea4 <os_list_add+0xa2>
			new->prev = head->first->prev;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	605a      	str	r2, [r3, #4]
			new->next = head->first;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	601a      	str	r2, [r3, #0]
			head->first->prev->next = new;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
			head->first->prev = new;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	605a      	str	r2, [r3, #4]
			head->first = new;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	611a      	str	r2, [r3, #16]
		}

		/* Add cell at the end
		 ------------------------------------------------------*/
		if(pos == OS_LIST_LAST){
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10f      	bne.n	8001eca <os_list_add+0xc8>
			new->next  = head->last->next;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]
			new->prev  = head->last;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	605a      	str	r2, [r3, #4]
			head->last->next = new;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]
			head->last = new;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]
		}
	}
	OS_EXIT_CRITICAL();
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f383 8810 	msr	PRIMASK, r3
 8001ed0:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <os_list_remove>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	   		   : [in]  reference to the element
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_remove(os_list_head_t* head, void* el){
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b088      	sub	sp, #32
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) el;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	617b      	str	r3, [r7, #20]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <os_list_remove+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e042      	b.n	8001f7c <os_list_remove+0x9e>

	/* Search cell to verify it is in the list
	 ------------------------------------------------------*/
	os_list_cell_t* pCell = os_list_search(head, el);
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff10 	bl	8001d1e <os_list_search>
 8001efe:	6138      	str	r0, [r7, #16]

	/* Return if not
	 ------------------------------------------------------*/
	if(pCell == NULL) return OS_ERR_INVALID;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <os_list_remove+0x2c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e038      	b.n	8001f7c <os_list_remove+0x9e>

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8001f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	b672      	cpsid	i
 8001f12:	f3bf 8f6f 	isb	sy

	/* Declare Iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = &head->head;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* pPrev = NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]

	/* Search for the task
	 ------------------------------------------------------*/
	while(it->next != NULL){
 8001f1e:	e016      	b.n	8001f4e <os_list_remove+0x70>

		/* Update order
		 ------------------------------------------------------*/
		if(it->next->order > pCell->order) it->next->order--;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d904      	bls.n	8001f38 <os_list_remove+0x5a>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	3a01      	subs	r2, #1
 8001f36:	60da      	str	r2, [r3, #12]

		/* Store previous
		 ------------------------------------------------------*/
		if(it->next->element == el) pPrev = it;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d101      	bne.n	8001f48 <os_list_remove+0x6a>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	61bb      	str	r3, [r7, #24]

		/* Go to next
		 ------------------------------------------------------*/
		it = it->next;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61fb      	str	r3, [r7, #28]
	while(it->next != NULL){
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e4      	bne.n	8001f20 <os_list_remove+0x42>
	}

	/* Kill cell
	 ------------------------------------------------------*/
	pPrev->next = pPrev->next->next;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
	OS_EXIT_CRITICAL();
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f383 8810 	msr	PRIMASK, r3
 8001f70:	f3bf 8f6f 	isb	sy
	return os_heap_free(pCell);
 8001f74:	6938      	ldr	r0, [r7, #16]
 8001f76:	f7ff fd2f 	bl	80019d8 <os_heap_free>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <os_list_clear>:
 * @brief This function clears a list, freeing all its cells and head
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_list_clear(os_list_head_t* head){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01c      	beq.n	8001fcc <os_list_clear+0x48>

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8001f92:	f3ef 8310 	mrs	r3, PRIMASK
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	b672      	cpsid	i
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e007      	b.n	8001fb4 <os_list_clear+0x30>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	6938      	ldr	r0, [r7, #16]
 8001fb0:	f7ff fd12 	bl	80019d8 <os_heap_free>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f4      	bne.n	8001fa4 <os_list_clear+0x20>
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fd0c 	bl	80019d8 <os_heap_free>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f383 8810 	msr	PRIMASK, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	e000      	b.n	8001fce <os_list_clear+0x4a>
	if(head == NULL) return;
 8001fcc:	bf00      	nop

		/* Free head
		 ---------------------------------------------------*/
		os_heap_free(head);
	);
}
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <os_task_list_sort>:
 * Must be used on task lists
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_task_list_sort(os_list_head_t* head){
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b08b      	sub	sp, #44	; 0x2c
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8098 	beq.w	8002114 <os_task_list_sort+0x140>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	b672      	cpsid	i
 8001fec:	f3bf 8f6f 	isb	sy

	/* Update priority for all tasks
	 ---------------------------------------------------*/
	os_list_cell_t* p = head->head.next;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8001ff6:	e00c      	b.n	8002012 <os_task_list_sort+0x3e>
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	689c      	ldr	r4, [r3, #8]
 8002000:	4610      	mov	r0, r2
 8002002:	f001 f87d 	bl	8003100 <os_task_getPrio>
 8002006:	4603      	mov	r3, r0
 8002008:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		p = p->next;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ef      	bne.n	8001ff8 <os_task_list_sort+0x24>
	}

	/* Begin sort
	 ---------------------------------------------------*/
	os_list_cell_t* it_slow = &head->head;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 800201c:	e069      	b.n	80020f2 <os_task_list_sort+0x11e>

		/* For each cell
		 ---------------------------------------------------*/
		bool changeMade = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	77fb      	strb	r3, [r7, #31]
		os_list_cell_t* it_fast = &head->head;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8002026:	e052      	b.n	80020ce <os_task_list_sort+0xfa>

			/* Decide to swap or not
			 ---------------------------------------------------*/
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f993 2044 	ldrsb.w	r2, [r3, #68]	; 0x44
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 800203e:	429a      	cmp	r2, r3
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	75fb      	strb	r3, [r7, #23]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	68d1      	ldr	r1, [r2, #12]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	68d2      	ldr	r2, [r2, #12]
 8002058:	4291      	cmp	r1, r2
 800205a:	bf8c      	ite	hi
 800205c:	2201      	movhi	r2, #1
 800205e:	2200      	movls	r2, #0
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
				 swap |= ((os_task_t*)it_fast->next->element)->priority < ((os_task_t*)it_fast->next->next->element)->priority;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	6892      	ldr	r2, [r2, #8]
 8002076:	f992 1044 	ldrsb.w	r1, [r2, #68]	; 0x44
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	f992 2044 	ldrsb.w	r2, [r2, #68]	; 0x44
 8002086:	4291      	cmp	r1, r2
 8002088:	bfb4      	ite	lt
 800208a:	2201      	movlt	r2, #1
 800208c:	2200      	movge	r2, #0
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4313      	orrs	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]

			/* Swap cells
			 ---------------------------------------------------*/
			if(swap){
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <os_task_list_sort+0xf4>

				/* Store references
				 ---------------------------------------------------*/
				os_list_cell_t* pN1 = it_fast->next;
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
				os_list_cell_t* pN2 = it_fast->next->next;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

				/* Swap
				 ---------------------------------------------------*/
				it_fast->next = pN2;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]
				pN1->next = pN2->next;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	601a      	str	r2, [r3, #0]
				pN2->next = pN1;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	601a      	str	r2, [r3, #0]

				changeMade = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]

			}

			it_fast = it_fast->next;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <os_task_list_sort+0x10c>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1a3      	bne.n	8002028 <os_task_list_sort+0x54>

		}

		/* If no changement was made, we finished
		 ---------------------------------------------------*/
		if(changeMade == 0) break;
 80020e0:	7ffb      	ldrb	r3, [r7, #31]
 80020e2:	f083 0301 	eor.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <os_task_list_sort+0x132>

		it_slow = it_slow->next;
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <os_task_list_sort+0x134>
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d18c      	bne.n	800201e <os_task_list_sort+0x4a>
 8002104:	e000      	b.n	8002108 <os_task_list_sort+0x134>
		if(changeMade == 0) break;
 8002106:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f383 8810 	msr	PRIMASK, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	e000      	b.n	8002116 <os_task_list_sort+0x142>
	if(head == NULL) return;
 8002114:	bf00      	nop
}
 8002116:	372c      	adds	r7, #44	; 0x2c
 8002118:	46bd      	mov	sp, r7
 800211a:	bd90      	pop	{r4, r7, pc}

0800211c <os_handle_list_getObjToUpdate>:
 *
 * @brief This function searches for an object in the object list that needs to update. Must be used in a handle list
 *
 * @return os_handle_t handle to the object to update or NULL if nothing to do
 **********************************************************************/
os_handle_t os_handle_list_getObjToUpdate(){
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0

	/* Search object list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <os_handle_list_getObjToUpdate+0x38>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	e00a      	b.n	8002140 <os_handle_list_getObjToUpdate+0x24>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	7a1b      	ldrb	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <os_handle_list_getObjToUpdate+0x1e>
			return it->element;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	e006      	b.n	8002148 <os_handle_list_getObjToUpdate+0x2c>
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f1      	bne.n	800212a <os_handle_list_getObjToUpdate+0xe>
	}

	return NULL;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	200142c0 	.word	0x200142c0

08002158 <os_task_list_isObjFreeOnTask>:
 * @param os_handle_t obj  : [in] object to scan
 * @param os_handle_t task : [in] task to stop the scan
 *
 * @return bool : 1 = object is free ; 0 = object is not free
 **********************************************************************/
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002162:	f3ef 8310 	mrs	r3, PRIMASK
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	b672      	cpsid	i
 800216a:	f3bf 8f6f 	isb	sy

	/* Get current free count
	 ---------------------------------------------------*/
	uint32_t freeCount = obj->getFreeCount(obj);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
 8002176:	6278      	str	r0, [r7, #36]	; 0x24

	/* If it is 0, return 0 immediately
	 ---------------------------------------------------*/
	if(freeCount == 0) {
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <os_task_list_isObjFreeOnTask+0x34>
		OS_EXIT_CRITICAL();
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f383 8810 	msr	PRIMASK, r3
 8002184:	f3bf 8f6f 	isb	sy
		return 0;
 8002188:	2300      	movs	r3, #0
 800218a:	e0a8      	b.n	80022de <os_task_list_isObjFreeOnTask+0x186>
	}

	/* If it can be taken more times than the number of tasks waiting for it return 1
	 ---------------------------------------------------*/
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002194:	429a      	cmp	r2, r3
 8002196:	d203      	bcs.n	80021a0 <os_task_list_isObjFreeOnTask+0x48>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d106      	bne.n	80021ae <os_task_list_isObjFreeOnTask+0x56>
		OS_EXIT_CRITICAL();
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f383 8810 	msr	PRIMASK, r3
 80021a6:	f3bf 8f6f 	isb	sy
		return 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e097      	b.n	80022de <os_task_list_isObjFreeOnTask+0x186>
	}

	/* Otherwise, sort and start scan
	 ---------------------------------------------------*/
	os_task_list_sort(obj->blockList);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff0e 	bl	8001fd4 <os_task_list_sort>

	/* Start scan by pointing to the first waiting task
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	e07c      	b.n	80022bc <os_task_list_isObjFreeOnTask+0x164>

		/* Convert address
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*) it->element;
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	613b      	str	r3, [r7, #16]

		/* Return if the object has no more free counters
		 ---------------------------------------------------*/
		if(freeCount == 0) {
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <os_task_list_isObjFreeOnTask+0x84>
			OS_EXIT_CRITICAL();
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f383 8810 	msr	PRIMASK, r3
 80021d4:	f3bf 8f6f 	isb	sy
			return 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	e080      	b.n	80022de <os_task_list_isObjFreeOnTask+0x186>
		}

		/* Stop scanning if we are pointing at the task we are searching
		 ---------------------------------------------------*/
		if(it->element == task) break;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d06f      	beq.n	80022c6 <os_task_list_isObjFreeOnTask+0x16e>

		/* Do not consider deleting or ended tasks
		 ---------------------------------------------------*/
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	7e1b      	ldrb	r3, [r3, #24]
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d062      	beq.n	80022b4 <os_task_list_isObjFreeOnTask+0x15c>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	7e1b      	ldrb	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d05e      	beq.n	80022b4 <os_task_list_isObjFreeOnTask+0x15c>

		/* If the task is waiting one object
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d121      	bne.n	8002244 <os_task_list_isObjFreeOnTask+0xec>

			/* Search for the position on the array of the object
			 ---------------------------------------------------*/
			size_t i = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < t->sizeObjs; i++){
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e00b      	b.n	8002222 <os_task_list_isObjFreeOnTask+0xca>
				if(t->objWaited[i] == obj) break;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d008      	beq.n	800222e <os_task_list_isObjFreeOnTask+0xd6>
			for(i = 0; i < t->sizeObjs; i++){
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3ee      	bcc.n	800220a <os_task_list_isObjFreeOnTask+0xb2>
 800222c:	e000      	b.n	8002230 <os_task_list_isObjFreeOnTask+0xd8>
				if(t->objWaited[i] == obj) break;
 800222e:	bf00      	nop
			}

			/* If the position of the object is smaller than the current object the task wants, it will switch
			 ---------------------------------------------------*/
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	429a      	cmp	r2, r3
 8002238:	d202      	bcs.n	8002240 <os_task_list_isObjFreeOnTask+0xe8>
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	3b01      	subs	r3, #1
 800223e:	e000      	b.n	8002242 <os_task_list_isObjFreeOnTask+0xea>
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If the task is waiting all objects
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224a:	2b01      	cmp	r3, #1
 800224c:	d133      	bne.n	80022b6 <os_task_list_isObjFreeOnTask+0x15e>

			/* Scan all objects to know if all of them are available
			 ---------------------------------------------------*/
			bool getObjs = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	76fb      	strb	r3, [r7, #27]
			for(size_t i = 0; i < t->sizeObjs; i++){
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e01f      	b.n	8002298 <os_task_list_isObjFreeOnTask+0x140>

				/* Skip current object
				 ---------------------------------------------------*/
				if(t->objWaited[i] == obj) continue;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d012      	beq.n	8002290 <os_task_list_isObjFreeOnTask+0x138>

				/* If one of the objects is not free on the task, we must wait
				 ---------------------------------------------------*/
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6939      	ldr	r1, [r7, #16]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff6d 	bl	8002158 <os_task_list_isObjFreeOnTask>
 800227e:	4603      	mov	r3, r0
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <os_task_list_isObjFreeOnTask+0x13a>
					getObjs = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	76fb      	strb	r3, [r7, #27]
					break;
 800228e:	e008      	b.n	80022a2 <os_task_list_isObjFreeOnTask+0x14a>
				if(t->objWaited[i] == obj) continue;
 8002290:	bf00      	nop
			for(size_t i = 0; i < t->sizeObjs; i++){
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3da      	bcc.n	8002258 <os_task_list_isObjFreeOnTask+0x100>
				}
			}

			/* Decrement freeCount if all objects are free
			 ---------------------------------------------------*/
			freeCount = getObjs ? freeCount - 1 : freeCount;
 80022a2:	7efb      	ldrb	r3, [r7, #27]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <os_task_list_isObjFreeOnTask+0x156>
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	3b01      	subs	r3, #1
 80022ac:	e000      	b.n	80022b0 <os_task_list_isObjFreeOnTask+0x158>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	e000      	b.n	80022b6 <os_task_list_isObjFreeOnTask+0x15e>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80022b4:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f47f af7f 	bne.w	80021c2 <os_task_list_isObjFreeOnTask+0x6a>
 80022c4:	e000      	b.n	80022c8 <os_task_list_isObjFreeOnTask+0x170>
		if(it->element == task) break;
 80022c6:	bf00      	nop
		}
	}

	/* Return if the object is free or not
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f383 8810 	msr	PRIMASK, r3
 80022ce:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <os_handle_list_updateAndCheck>:
 *
 * @param os_handle_t h : [in] handle to the object to update
 *
 * @return bool : 1 = current task must yield
 **********************************************************************/
bool os_handle_list_updateAndCheck(os_handle_t h){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80022f0:	f3ef 8310 	mrs	r3, PRIMASK
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	b672      	cpsid	i
 80022f8:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 80022fc:	23ff      	movs	r3, #255	; 0xff
 80022fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(h != NULL){
 8002302:	e167      	b.n	80025d4 <os_handle_list_updateAndCheck+0x2ec>

		/* Sort List
		 ---------------------------------------------------*/
		os_task_list_sort(h->blockList);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fe63 	bl	8001fd4 <os_task_list_sort>

		/* Get the number of times we can get the object
		 ---------------------------------------------------*/
		uint32_t freeCount = h->getFreeCount(h);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
 8002316:	6338      	str	r0, [r7, #48]	; 0x30

		/* Updates every task on the block list
		 ---------------------------------------------------*/
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002320:	e14e      	b.n	80025c0 <os_handle_list_updateAndCheck+0x2d8>

			/* Ignore deleting and ended tasks
			 ---------------------------------------------------*/
			os_task_t* t = (os_task_t*)it->element;
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	617b      	str	r3, [r7, #20]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	7e1b      	ldrb	r3, [r3, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	f000 8143 	beq.w	80025b8 <os_handle_list_updateAndCheck+0x2d0>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	7e1b      	ldrb	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f000 813e 	beq.w	80025b8 <os_handle_list_updateAndCheck+0x2d0>

			/* If the task is only waiting one object
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8091 	bne.w	800246a <os_handle_list_updateAndCheck+0x182>

				/* Search the position of the object in the task array
				 ---------------------------------------------------*/
				size_t i = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
				for(i = 0; i < t->sizeObjs; i++){
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002350:	e00b      	b.n	800236a <os_handle_list_updateAndCheck+0x82>
					if(t->objWaited[i] == h) break;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d008      	beq.n	8002376 <os_handle_list_updateAndCheck+0x8e>
				for(i = 0; i < t->sizeObjs; i++){
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	3301      	adds	r3, #1
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002370:	429a      	cmp	r2, r3
 8002372:	d3ee      	bcc.n	8002352 <os_handle_list_updateAndCheck+0x6a>
 8002374:	e000      	b.n	8002378 <os_handle_list_updateAndCheck+0x90>
					if(t->objWaited[i] == h) break;
 8002376:	bf00      	nop
				}

				/* If the object can still be taken
				 ---------------------------------------------------*/
				if(freeCount != 0){
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	2b00      	cmp	r3, #0
 800237c:	d026      	beq.n	80023cc <os_handle_list_updateAndCheck+0xe4>

					/* Only do something if the current object has a smaller index than the one the task is waiting for
					 ---------------------------------------------------*/
					if(i < t->objWanted){
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002384:	429a      	cmp	r2, r3
 8002386:	d270      	bcs.n	800246a <os_handle_list_updateAndCheck+0x182>

						/* Since the task will switch to the smaller index object, we must update the old object
						 * This update can possibly wake a task
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	429a      	cmp	r2, r3
 8002392:	d208      	bcs.n	80023a6 <os_handle_list_updateAndCheck+0xbe>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	721a      	strb	r2, [r3, #8]

						/* Store the object's index and tag task as ready
						 ---------------------------------------------------*/
						t->objWanted = i;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
						t->state = OS_TASK_READY;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2202      	movs	r2, #2
 80023b0:	761a      	strb	r2, [r3, #24]

						/* Decrement freecount if needed
						 ---------------------------------------------------*/
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d005      	beq.n	80023c6 <os_handle_list_updateAndCheck+0xde>
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <os_handle_list_updateAndCheck+0xde>
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	3b01      	subs	r3, #1
 80023c4:	e000      	b.n	80023c8 <os_handle_list_updateAndCheck+0xe0>
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ca:	e04e      	b.n	800246a <os_handle_list_updateAndCheck+0x182>
				 ---------------------------------------------------*/
				else{

					/* Only do something if the current waited object is no longer available
					 ---------------------------------------------------*/
					if(t->objWanted == i){
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d149      	bne.n	800246a <os_handle_list_updateAndCheck+0x182>

						/* Search for an available object in higher indexes
						 ---------------------------------------------------*/
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	3301      	adds	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023de:	e00f      	b.n	8002400 <os_handle_list_updateAndCheck+0x118>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6979      	ldr	r1, [r7, #20]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff feb2 	bl	8002158 <os_task_list_isObjFreeOnTask>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d108      	bne.n	800240c <os_handle_list_updateAndCheck+0x124>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	3301      	adds	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002406:	429a      	cmp	r2, r3
 8002408:	d3ea      	bcc.n	80023e0 <os_handle_list_updateAndCheck+0xf8>
 800240a:	e000      	b.n	800240e <os_handle_list_updateAndCheck+0x126>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 800240c:	bf00      	nop


						/* Tag task as ready if there is an available object, or blocked if not timeout
						 ---------------------------------------------------*/
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002414:	429a      	cmp	r2, r3
 8002416:	d201      	bcs.n	800241c <os_handle_list_updateAndCheck+0x134>
 8002418:	2202      	movs	r2, #2
 800241a:	e000      	b.n	800241e <os_handle_list_updateAndCheck+0x136>
 800241c:	2203      	movs	r2, #3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	761a      	strb	r2, [r3, #24]
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <os_handle_list_updateAndCheck+0x148>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	7e1a      	ldrb	r2, [r3, #24]
 800242e:	e000      	b.n	8002432 <os_handle_list_updateAndCheck+0x14a>
 8002430:	2202      	movs	r2, #2
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	761a      	strb	r2, [r3, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800243c:	429a      	cmp	r2, r3
 800243e:	d201      	bcs.n	8002444 <os_handle_list_updateAndCheck+0x15c>
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	e001      	b.n	8002448 <os_handle_list_updateAndCheck+0x160>
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	6353      	str	r3, [r2, #52]	; 0x34

						/* If the task switched to a higher index object, update it
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	429a      	cmp	r2, r3
 8002456:	d208      	bcs.n	800246a <os_handle_list_updateAndCheck+0x182>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	721a      	strb	r2, [r3, #8]
				}
			}

			/* If the task is waiting all objects
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002470:	2b01      	cmp	r3, #1
 8002472:	f040 808d 	bne.w	8002590 <os_handle_list_updateAndCheck+0x2a8>

				/* Store objWanted to use it later
				 ---------------------------------------------------*/
				size_t last_objWanted = t->objWanted;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	613b      	str	r3, [r7, #16]

				/* If the current object is available
				 ---------------------------------------------------*/
				if(freeCount != 0){
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d056      	beq.n	8002530 <os_handle_list_updateAndCheck+0x248>

					/* Check if all other objects are available
					 ---------------------------------------------------*/
					bool getObjs = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	e020      	b.n	80024d0 <os_handle_list_updateAndCheck+0x1e8>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d013      	beq.n	80024c8 <os_handle_list_updateAndCheck+0x1e0>

						/* If one of the objects is not free on the task, we must wait
						 ---------------------------------------------------*/
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6979      	ldr	r1, [r7, #20]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fe52 	bl	8002158 <os_task_list_isObjFreeOnTask>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <os_handle_list_updateAndCheck+0x1e2>
							getObjs = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 80024c6:	e008      	b.n	80024da <os_handle_list_updateAndCheck+0x1f2>
						if(t->objWaited[i] == h) continue;
 80024c8:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	3301      	adds	r3, #1
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d3d9      	bcc.n	800248e <os_handle_list_updateAndCheck+0x1a6>
						}
					}

					/* Update task infos according to the result
					 ---------------------------------------------------*/
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 80024da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <os_handle_list_updateAndCheck+0x1fe>
 80024e2:	2200      	movs	r2, #0
 80024e4:	e001      	b.n	80024ea <os_handle_list_updateAndCheck+0x202>
 80024e6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 80024ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <os_handle_list_updateAndCheck+0x212>
 80024f6:	2202      	movs	r2, #2
 80024f8:	e000      	b.n	80024fc <os_handle_list_updateAndCheck+0x214>
 80024fa:	2203      	movs	r2, #3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	761a      	strb	r2, [r3, #24]
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <os_handle_list_updateAndCheck+0x226>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	7e1a      	ldrb	r2, [r3, #24]
 800250c:	e000      	b.n	8002510 <os_handle_list_updateAndCheck+0x228>
 800250e:	2202      	movs	r2, #2
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	761a      	strb	r2, [r3, #24]

					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 8002514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <os_handle_list_updateAndCheck+0x242>
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002522:	d002      	beq.n	800252a <os_handle_list_updateAndCheck+0x242>
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	3b01      	subs	r3, #1
 8002528:	e000      	b.n	800252c <os_handle_list_updateAndCheck+0x244>
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
 800252e:	e00c      	b.n	800254a <os_handle_list_updateAndCheck+0x262>
				 ---------------------------------------------------*/
				else{

					/* Just update task infos
					 ---------------------------------------------------*/
					t->objWanted = 0xFFFFFFFF;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f04f 32ff 	mov.w	r2, #4294967295
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <os_handle_list_updateAndCheck+0x25c>
 8002540:	2202      	movs	r2, #2
 8002542:	e000      	b.n	8002546 <os_handle_list_updateAndCheck+0x25e>
 8002544:	2203      	movs	r2, #3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	761a      	strb	r2, [r3, #24]
				}

				/* Detects that the objWanted changed
				 ---------------------------------------------------*/
				if(last_objWanted != t->objWanted){
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	429a      	cmp	r2, r3
 8002552:	d01d      	beq.n	8002590 <os_handle_list_updateAndCheck+0x2a8>

					/* If the task was waiting and now wants to get them all (all of them are available)
					 * or if the task wanted to get them all and now is waiting (one of them is no longer available)
					 * we must tag the other objects to update as well
					 ---------------------------------------------------*/
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	e015      	b.n	8002586 <os_handle_list_updateAndCheck+0x29e>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	d008      	beq.n	800257e <os_handle_list_updateAndCheck+0x296>

						/* Tag all objects to update
						 ---------------------------------------------------*/
						t->objWaited[i]->objUpdate = 1;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	721a      	strb	r2, [r3, #8]
 800257c:	e000      	b.n	8002580 <os_handle_list_updateAndCheck+0x298>
						if(t->objWaited[i] == h) continue;
 800257e:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3301      	adds	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3e4      	bcc.n	800255a <os_handle_list_updateAndCheck+0x272>
				}
			}

			/* If the task is ready, get its priority to check if we should yeild
			 ---------------------------------------------------*/
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d10a      	bne.n	80025ae <os_handle_list_updateAndCheck+0x2c6>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 800259e:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80025a2:	429a      	cmp	r2, r3
 80025a4:	da03      	bge.n	80025ae <os_handle_list_updateAndCheck+0x2c6>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 80025ac:	e001      	b.n	80025b2 <os_handle_list_updateAndCheck+0x2ca>
 80025ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025b6:	e000      	b.n	80025ba <os_handle_list_updateAndCheck+0x2d2>
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80025b8:	bf00      	nop
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f47f aead 	bne.w	8002322 <os_handle_list_updateAndCheck+0x3a>
		}

		/* End of while. All tasks have been updated, so we remove the update flag
		 ---------------------------------------------------*/
		h->objUpdate = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	721a      	strb	r2, [r3, #8]
		 * This logic is important for 2 reasons
		 *
		 * 1 - avoids extra recursive calls
		 * 2 - makes sure that an object is updated ultil the end before switching to another one
		 ---------------------------------------------------*/
		h = os_handle_list_getObjToUpdate();
 80025ce:	f7ff fda5 	bl	800211c <os_handle_list_getObjToUpdate>
 80025d2:	6078      	str	r0, [r7, #4]
	while(h != NULL){
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f ae94 	bne.w	8002304 <os_handle_list_updateAndCheck+0x1c>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 80025dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	dd0d      	ble.n	8002600 <os_handle_list_updateAndCheck+0x318>
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <os_handle_list_updateAndCheck+0x338>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fd88 	bl	8003100 <os_task_getPrio>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025f8:	4293      	cmp	r3, r2
 80025fa:	dd01      	ble.n	8002600 <os_handle_list_updateAndCheck+0x318>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <os_handle_list_updateAndCheck+0x31a>
 8002600:	2300      	movs	r3, #0
 8002602:	76fb      	strb	r3, [r7, #27]
 8002604:	7efb      	ldrb	r3, [r7, #27]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	76fb      	strb	r3, [r7, #27]

	OS_EXIT_CRITICAL();
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f383 8810 	msr	PRIMASK, r3
 8002612:	f3bf 8f6f 	isb	sy
	return mustYield;
 8002616:	7efb      	ldrb	r3, [r7, #27]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3738      	adds	r7, #56	; 0x38
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200142ac 	.word	0x200142ac

08002624 <os_msgQ_updateAndCheck>:
 * @param os_hMsgQ_t msgQ : [in] msgQ to update
 *
 * @return bool : (1) current task should yeild
 *
 **********************************************************************/
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(msgQ == NULL) return 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <os_msgQ_updateAndCheck+0x12>
 8002632:	2300      	movs	r3, #0
 8002634:	e081      	b.n	800273a <os_msgQ_updateAndCheck+0x116>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d001      	beq.n	8002642 <os_msgQ_updateAndCheck+0x1e>
 800263e:	2300      	movs	r3, #0
 8002640:	e07b      	b.n	800273a <os_msgQ_updateAndCheck+0x116>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002642:	f3ef 8310 	mrs	r3, PRIMASK
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	b672      	cpsid	i
 800264a:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 800264e:	23ff      	movs	r3, #255	; 0xff
 8002650:	77fb      	strb	r3, [r7, #31]

	/* Sort List
	 ---------------------------------------------------*/
	os_task_list_sort(msgQ->obj.blockList);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fcbc 	bl	8001fd4 <os_task_list_sort>

	/* Get the number of times we can get the object
	 ---------------------------------------------------*/
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	61bb      	str	r3, [r7, #24]

	/* Updates every task on the block list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e044      	b.n	80026f8 <os_msgQ_updateAndCheck+0xd4>

		/* Ignore deleting and ended tasks
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*)it->element;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	7e1b      	ldrb	r3, [r3, #24]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d039      	beq.n	80026f0 <os_msgQ_updateAndCheck+0xcc>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	7e1b      	ldrb	r3, [r3, #24]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d035      	beq.n	80026f0 <os_msgQ_updateAndCheck+0xcc>

		/* If the object can still be taken
		 ---------------------------------------------------*/
		if(freeCount != 0){
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <os_msgQ_updateAndCheck+0x8c>

			/* Tag task as ready
			 ---------------------------------------------------*/
			t->objWanted = 0;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
			t->state = OS_TASK_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2202      	movs	r2, #2
 8002694:	761a      	strb	r2, [r3, #24]

			/* Decrement freecount if needed
			 ---------------------------------------------------*/
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d005      	beq.n	80026aa <os_msgQ_updateAndCheck+0x86>
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <os_msgQ_updateAndCheck+0x86>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	e000      	b.n	80026ac <os_msgQ_updateAndCheck+0x88>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e00c      	b.n	80026ca <os_msgQ_updateAndCheck+0xa6>
		 ---------------------------------------------------*/
		else{

			/* Just update task infos
			 ---------------------------------------------------*/
			t->objWanted = 0xFFFFFFFF;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <os_msgQ_updateAndCheck+0xa0>
 80026c0:	2202      	movs	r2, #2
 80026c2:	e000      	b.n	80026c6 <os_msgQ_updateAndCheck+0xa2>
 80026c4:	2203      	movs	r2, #3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	761a      	strb	r2, [r3, #24]
		}

		/* If the task is ready, get its priority to check if we should yeild
		 ---------------------------------------------------*/
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	7e1b      	ldrb	r3, [r3, #24]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d10a      	bne.n	80026e8 <os_msgQ_updateAndCheck+0xc4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 80026d8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80026dc:	429a      	cmp	r2, r3
 80026de:	da03      	bge.n	80026e8 <os_msgQ_updateAndCheck+0xc4>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 80026e6:	e001      	b.n	80026ec <os_msgQ_updateAndCheck+0xc8>
 80026e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026ec:	77fb      	strb	r3, [r7, #31]
 80026ee:	e000      	b.n	80026f2 <os_msgQ_updateAndCheck+0xce>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80026f0:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1b7      	bne.n	800266e <os_msgQ_updateAndCheck+0x4a>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 80026fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002702:	2b00      	cmp	r3, #0
 8002704:	dd0d      	ble.n	8002722 <os_msgQ_updateAndCheck+0xfe>
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <os_msgQ_updateAndCheck+0x120>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fcf7 	bl	8003100 <os_task_getPrio>
 8002712:	4603      	mov	r3, r0
 8002714:	461a      	mov	r2, r3
 8002716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800271a:	4293      	cmp	r3, r2
 800271c:	dd01      	ble.n	8002722 <os_msgQ_updateAndCheck+0xfe>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <os_msgQ_updateAndCheck+0x100>
 8002722:	2300      	movs	r3, #0
 8002724:	74fb      	strb	r3, [r7, #19]
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	74fb      	strb	r3, [r7, #19]

	OS_EXIT_CRITICAL();
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f383 8810 	msr	PRIMASK, r3
 8002734:	f3bf 8f6f 	isb	sy
	return mustYield;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200142ac 	.word	0x200142ac

08002748 <os_round_robin>:
 *
 * @brief This function decides the task that will gain the cpu
 *
 * @return task_list_t : Reference to the chosen task
 **********************************************************************/
static os_list_cell_t* os_round_robin(){
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0

	/* Declare iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 800274e:	4b37      	ldr	r3, [pc, #220]	; (800282c <os_round_robin+0xe4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* it_low = os_cur_task;
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <os_round_robin+0xe8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]

	/* Saves first higher priority available in the higher side (all tasks before the current one in list order)
	 ------------------------------------------------------*/
	int8_t highSidePrio = -1;
 800275a:	23ff      	movs	r3, #255	; 0xff
 800275c:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* highSide= NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]

	/* Saves first higher priority available in the lower side (all tasks after and including the current one in list order)
	 ------------------------------------------------------*/
	int8_t lowSidePrio = -1;
 8002762:	23ff      	movs	r3, #255	; 0xff
 8002764:	73fb      	strb	r3, [r7, #15]
	os_list_cell_t* lowSide = NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]

	/* Search the high side of the list
	 ------------------------------------------------------*/
	while(it != os_cur_task){
 800276a:	e018      	b.n	800279e <os_round_robin+0x56>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	7e1b      	ldrb	r3, [r3, #24]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d110      	bne.n	8002798 <os_round_robin+0x50>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fcc0 	bl	8003100 <os_task_getPrio>
 8002780:	4603      	mov	r3, r0
 8002782:	71bb      	strb	r3, [r7, #6]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(highSidePrio <= task_prio){
 8002784:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002788:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800278c:	429a      	cmp	r2, r3
 800278e:	dc03      	bgt.n	8002798 <os_round_robin+0x50>
				highSidePrio = task_prio;
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	75fb      	strb	r3, [r7, #23]
				highSide = it;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	613b      	str	r3, [r7, #16]

		}

		/* Otherwise continue
		 ------------------------------------------------------*/
		it = it->next;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61fb      	str	r3, [r7, #28]
	while(it != os_cur_task){
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <os_round_robin+0xe8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1e1      	bne.n	800276c <os_round_robin+0x24>
	}

	/* Search the low side of the list
	 ------------------------------------------------------*/
	while(it_low != NULL){
 80027a8:	e018      	b.n	80027dc <os_round_robin+0x94>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	7e1b      	ldrb	r3, [r3, #24]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d110      	bne.n	80027d6 <os_round_robin+0x8e>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fca1 	bl	8003100 <os_task_getPrio>
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(lowSidePrio <= task_prio ){
 80027c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dc03      	bgt.n	80027d6 <os_round_robin+0x8e>
				lowSidePrio = task_prio;
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	73fb      	strb	r3, [r7, #15]
				lowSide = it_low;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60bb      	str	r3, [r7, #8]
			}

		}

		it_low = it_low->next;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61bb      	str	r3, [r7, #24]
	while(it_low != NULL){
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e3      	bne.n	80027aa <os_round_robin+0x62>
	}

	/* If nothing was found, return NULL
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide == NULL) return NULL;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <os_round_robin+0xaa>
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <os_round_robin+0xaa>
 80027ee:	2300      	movs	r3, #0
 80027f0:	e018      	b.n	8002824 <os_round_robin+0xdc>

	/* If only the low side found something, return it
	 ------------------------------------------------------*/
	if(highSide == NULL && lowSide != NULL) return lowSide;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d104      	bne.n	8002802 <os_round_robin+0xba>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <os_round_robin+0xba>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	e010      	b.n	8002824 <os_round_robin+0xdc>

	/* If only the high side found something, return it
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide != NULL) return highSide;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <os_round_robin+0xca>
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <os_round_robin+0xca>
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	e008      	b.n	8002824 <os_round_robin+0xdc>

	/* If both found something, return the task with higher priority.
	 * If both are equal, chose the lower side to peform the round robin for the same priority task
	 ------------------------------------------------------*/
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 8002812:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800281a:	429a      	cmp	r2, r3
 800281c:	dd01      	ble.n	8002822 <os_round_robin+0xda>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	e000      	b.n	8002824 <os_round_robin+0xdc>
 8002822:	693b      	ldr	r3, [r7, #16]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200142e0 	.word	0x200142e0
 8002830:	200142ac 	.word	0x200142ac

08002834 <os_scheduler>:
 * OS Scheduler
 *
 * @brief This function performs the stack management of the context change (must be called in PENDSV interrupt)
 *
 **********************************************************************/
__used static void os_scheduler(){
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <os_scheduler+0x8c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d139      	bne.n	80028b6 <os_scheduler+0x82>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__os_disable_irq();
 8002842:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	603b      	str	r3, [r7, #0]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8002848:	f3ef 8309 	mrs	r3, PSP
 800284c:	603b      	str	r3, [r7, #0]

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <os_scheduler+0x90>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <os_scheduler+0x2c>
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <os_scheduler+0x90>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	621a      	str	r2, [r3, #32]

	/* Save last task
	 ------------------------------------------------------*/
	os_list_cell_t* last_task = os_cur_task;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <os_scheduler+0x90>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	607b      	str	r3, [r7, #4]
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 8002866:	f7ff ff6f 	bl	8002748 <os_round_robin>
 800286a:	4602      	mov	r2, r0
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <os_scheduler+0x90>)
 800286e:	601a      	str	r2, [r3, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <os_scheduler+0x90>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <os_scheduler+0x4c>
			__os_enable_irq();
 8002878:	b662      	cpsie	i
			os_no_task_ready_cb();
 800287a:	f7fe ff9e 	bl	80017ba <os_no_task_ready_cb>
			__os_disable_irq();
 800287e:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <os_scheduler+0x90>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <os_scheduler+0x32>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <os_scheduler+0x90>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	603b      	str	r3, [r7, #0]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <os_scheduler+0x7e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	7e1b      	ldrb	r3, [r3, #24]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d104      	bne.n	80028b2 <os_scheduler+0x7e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fb5b 	bl	8002f68 <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__os_enable_irq();
 80028b2:	b662      	cpsie	i
 80028b4:	e000      	b.n	80028b8 <os_scheduler+0x84>
	if(state != OS_SCHEDULER_START) return;
 80028b6:	bf00      	nop

}
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200142a8 	.word	0x200142a8
 80028c4:	200142ac 	.word	0x200142ac

080028c8 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 80028c8:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 80028cc:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 80028d0:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 80028d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 80028d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 80028da:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 80028de:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 80028e0:	f7ff ffa8 	bl	8002834 <os_scheduler>
	__asm volatile ("pop {lr}");
 80028e4:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 80028e8:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 80028ec:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 80028f0:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 80028f4:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 80028f6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 80028fa:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 80028fe:	4770      	bx	lr

}
 8002900:	bf00      	nop
	...

08002904 <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 800290a:	f7fe fedd 	bl	80016c8 <os_init_get>
 800290e:	4603      	mov	r3, r0
 8002910:	f083 0301 	eor.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <os_scheduler_start+0x1a>
 800291a:	2304      	movs	r3, #4
 800291c:	e01b      	b.n	8002956 <os_scheduler_start+0x52>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 800291e:	f3ef 8310 	mrs	r3, PRIMASK
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	b672      	cpsid	i
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <os_scheduler_start+0x5c>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	f000 f932 	bl	8002b98 <os_task_must_yeild>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <os_scheduler_start+0x46>
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <os_scheduler_start+0x60>)
 800293c:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8002940:	4a08      	ldr	r2, [pc, #32]	; (8002964 <os_scheduler_start+0x60>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f383 8810 	msr	PRIMASK, r3
 8002950:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200142a8 	.word	0x200142a8
 8002964:	e000e008 	.word	0xe000e008

08002968 <os_scheduler_state_get>:
 * @brief Returns the state of the scheduler
 *
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	return state;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <os_scheduler_state_get+0x14>)
 800296e:	781b      	ldrb	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200142a8 	.word	0x200142a8

08002980 <os_task_init_stack>:
 * @param uint32_t interruptStackSize : [in] size of the interrupt stack
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_init_stack(uint32_t interruptStackSize){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ------------------------------------------------------*/
	if(interruptStackSize < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800298e:	d201      	bcs.n	8002994 <os_task_init_stack+0x14>
 8002990:	2301      	movs	r3, #1
 8002992:	e021      	b.n	80029d8 <os_task_init_stack+0x58>

	/* Allocate the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fe ffb9 	bl	800190c <os_heap_alloc>
 800299a:	4603      	mov	r3, r0
 800299c:	60fb      	str	r3, [r7, #12]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <os_task_init_stack+0x28>
 80029a4:	2303      	movs	r3, #3
 80029a6:	e017      	b.n	80029d8 <os_task_init_stack+0x58>

	/* Save context and make PSP = MSP
	 ------------------------------------------------------*/
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 80029a8:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 80029aa:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 80029ae:	f386 8809 	msr	PSP, r6

	/* Position MSP to interrput stack
	 ------------------------------------------------------*/
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	f023 0307 	bic.w	r3, r3, #7
 80029bc:	60bb      	str	r3, [r7, #8]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 80029c2:	f386 8808 	msr	MSP, r6

	/* Select PSP as current stack pointer
	 ------------------------------------------------------*/
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 80029c6:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 80029ca:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 80029ce:	f386 8814 	msr	CONTROL, r6

	/* Recover stack
	 ------------------------------------------------------*/
	__asm volatile ("pop {r6, lr}");
 80029d2:	e8bd 4040 	ldmia.w	sp!, {r6, lr}

	return OS_ERR_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <os_task_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_task_getFreeCount(os_handle_t h){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <os_task_getFreeCount+0x12>
 80029ee:	2300      	movs	r3, #0
 80029f0:	e031      	b.n	8002a56 <os_task_getFreeCount+0x76>
	if(h->type != OS_OBJ_TASK) return 0;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <os_task_getFreeCount+0x1e>
 80029fa:	2300      	movs	r3, #0
 80029fc:	e02b      	b.n	8002a56 <os_task_getFreeCount+0x76>

	/* Check if task ended
	 ------------------------------------------------------*/
	os_task_state_e state = os_task_getState(h);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fb9a 	bl	8003138 <os_task_getState>
 8002a04:	4603      	mov	r3, r0
 8002a06:	73fb      	strb	r3, [r7, #15]

	/* Determines if task ended
	 ------------------------------------------------------*/
	bool task_ended  = (state == OS_TASK_NOT_EXIST);
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_ENDED);
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	2a01      	cmp	r2, #1
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2201      	moveq	r2, #1
 8002a1e:	2200      	movne	r2, #0
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4313      	orrs	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_DELETING);
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	2a04      	cmp	r2, #4
 8002a34:	bf0c      	ite	eq
 8002a36:	2201      	moveq	r2, #1
 8002a38:	2200      	movne	r2, #0
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	73bb      	strb	r3, [r7, #14]

	return task_ended ? OS_OBJ_COUNT_INF : 0;
 8002a48:	7bbb      	ldrb	r3, [r7, #14]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <os_task_getFreeCount+0x74>
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e000      	b.n	8002a56 <os_task_getFreeCount+0x76>
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <os_task_objTake>:
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static void os_task_objTake(os_handle_t h, os_handle_t takingTask){
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	460b      	mov	r3, r1
 8002a82:	72fb      	strb	r3, [r7, #11]

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 8002a84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da01      	bge.n	8002a90 <os_task_init+0x1c>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e073      	b.n	8002b78 <os_task_init+0x104>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002a96:	d201      	bcs.n	8002a9c <os_task_init+0x28>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e06d      	b.n	8002b78 <os_task_init+0x104>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002aa2:	d201      	bcs.n	8002aa8 <os_task_init+0x34>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e067      	b.n	8002b78 <os_task_init+0x104>

	/* Init stack by changing the register used (MSP to PSP) and allocate interrupt stack
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init_stack(interrput_stack_size);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff69 	bl	8002980 <os_task_init_stack>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <os_task_init+0x48>
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	e05d      	b.n	8002b78 <os_task_init+0x104>

	/* Allocate task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8002abc:	2048      	movs	r0, #72	; 0x48
 8002abe:	f7fe ff25 	bl	800190c <os_heap_alloc>
 8002ac2:	6138      	str	r0, [r7, #16]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <os_task_init+0x5a>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e054      	b.n	8002b78 <os_task_init+0x104>

	/* Init main task
	 ------------------------------------------------------*/
	t->obj.objUpdate		= 0;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	721a      	strb	r2, [r3, #8]
	t->obj.type				= OS_OBJ_TASK;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <os_task_init+0x10c>)
 8002ade:	60da      	str	r2, [r3, #12]
	t->obj.blockList		= os_list_init();
 8002ae0:	f7ff f8fa 	bl	8001cd8 <os_list_init>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	615a      	str	r2, [r3, #20]
	t->obj.obj_take			= &os_task_objTake;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <os_task_init+0x110>)
 8002aee:	611a      	str	r2, [r3, #16]
	t->obj.name 			= main_name;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	605a      	str	r2, [r3, #4]

	t->basePriority 		= main_task_priority;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	7afa      	ldrb	r2, [r7, #11]
 8002afa:	765a      	strb	r2, [r3, #25]
	t->priority		    	= main_task_priority;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	7afa      	ldrb	r2, [r7, #11]
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	t->state	 			= OS_TASK_READY;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2202      	movs	r2, #2
 8002b08:	761a      	strb	r2, [r3, #24]
	t->pStack   			= NULL;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
	t->wakeCoutdown  		= 0;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
	t->stackBase	    	= 0;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
	t->objWaited			= NULL;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs 			= 0;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
	t->retVal				= NULL;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

	t->ownedMutex			= os_list_init();
 8002b2e:	f7ff f8d3 	bl	8001cd8 <os_list_init>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Init head list and Add main task
	 ------------------------------------------------------*/
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6939      	ldr	r1, [r7, #16]
 8002b3c:	4812      	ldr	r0, [pc, #72]	; (8002b88 <os_task_init+0x114>)
 8002b3e:	f7ff f960 	bl	8001e02 <os_list_add>
 8002b42:	4603      	mov	r3, r0
 8002b44:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <os_task_init+0xdc>
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	e013      	b.n	8002b78 <os_task_init+0x104>

	/* Add object to object list
	 ------------------------------------------------------*/
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6939      	ldr	r1, [r7, #16]
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <os_task_init+0x118>)
 8002b56:	f7ff f954 	bl	8001e02 <os_list_add>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <os_task_init+0xf4>
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	e007      	b.n	8002b78 <os_task_init+0x104>

	/* Point to current task
	 ------------------------------------------------------*/
	os_cur_task = os_head.head.next;
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <os_task_init+0x114>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <os_task_init+0x11c>)
 8002b6e:	6013      	str	r3, [r2, #0]

	/* Link handle with task
	 ------------------------------------------------------*/
	main_task = (os_handle_t) t;
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <os_task_init+0x120>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6013      	str	r3, [r2, #0]

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	080029e1 	.word	0x080029e1
 8002b84:	08002a5f 	.word	0x08002a5f
 8002b88:	200142e0 	.word	0x200142e0
 8002b8c:	200142c0 	.word	0x200142c0
 8002b90:	200142ac 	.word	0x200142ac
 8002b94:	200142fc 	.word	0x200142fc

08002b98 <os_task_must_yeild>:
 * @brief This function checks the priority of all tasks and decides if the current task should yield
 *
 * @return bool : 1 = yeild
 *
 **********************************************************************/
bool os_task_must_yeild(){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0

	/* Enter critical
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8002b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	b672      	cpsid	i
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <os_task_must_yeild+0x80>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <os_task_must_yeild+0x84>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <os_task_must_yeild+0x30>
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <os_task_must_yeild+0x84>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa9e 	bl	8003100 <os_task_getPrio>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	e001      	b.n	8002bcc <os_task_must_yeild+0x34>
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	72fb      	strb	r3, [r7, #11]
 8002bce:	e016      	b.n	8002bfe <os_task_must_yeild+0x66>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fa93 	bl	8003100 <os_task_getPrio>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	72bb      	strb	r3, [r7, #10]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	7e1b      	ldrb	r3, [r3, #24]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d107      	bne.n	8002bf8 <os_task_must_yeild+0x60>
 8002be8:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002bec:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	da01      	bge.n	8002bf8 <os_task_must_yeild+0x60>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e00b      	b.n	8002c10 <os_task_must_yeild+0x78>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e5      	bne.n	8002bd0 <os_task_must_yeild+0x38>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f383 8810 	msr	PRIMASK, r3
 8002c0a:	f3bf 8f6f 	isb	sy
			 ------------------------------------------------------*/
			it = it->next;
		}
	);

	return false;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200142e0 	.word	0x200142e0
 8002c1c:	200142ac 	.word	0x200142ac

08002c20 <os_task_create>:
 * @param void* arg				: [ in] Argument to be passed to the task
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), int8_t priority, uint32_t stack_size, void* arg){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	70fb      	strb	r3, [r7, #3]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <os_task_create+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e166      	b.n	8002f06 <os_task_create+0x2e6>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <os_task_create+0x22>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e161      	b.n	8002f06 <os_task_create+0x2e6>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 8002c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da01      	bge.n	8002c4e <os_task_create+0x2e>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e15b      	b.n	8002f06 <os_task_create+0x2e6>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c54:	d201      	bcs.n	8002c5a <os_task_create+0x3a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e155      	b.n	8002f06 <os_task_create+0x2e6>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 8002c5a:	f7fe fd35 	bl	80016c8 <os_init_get>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f083 0301 	eor.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <os_task_create+0x4e>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	e14b      	b.n	8002f06 <os_task_create+0x2e6>

	/* If task exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <os_task_create+0x72>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_TASK, name);
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4890      	ldr	r0, [pc, #576]	; (8002ebc <os_task_create+0x29c>)
 8002c7a:	f7ff f880 	bl	8001d7e <os_handle_list_searchByName>
 8002c7e:	61f8      	str	r0, [r7, #28]
		if(obj != NULL){
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <os_task_create+0x72>
			*h = obj->element;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]
			return OS_ERR_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e139      	b.n	8002f06 <os_task_create+0x2e6>
		}
	}

	/* Alloc the task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8002c92:	2048      	movs	r0, #72	; 0x48
 8002c94:	f7fe fe3a 	bl	800190c <os_heap_alloc>
 8002c98:	61b8      	str	r0, [r7, #24]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <os_task_create+0x84>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e130      	b.n	8002f06 <os_task_create+0x2e6>

	/* Alloc the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 8002ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca6:	f7fe fe31 	bl	800190c <os_heap_alloc>
 8002caa:	4603      	mov	r3, r0
 8002cac:	617b      	str	r3, [r7, #20]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <os_task_create+0x98>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e126      	b.n	8002f06 <os_task_create+0x2e6>

	/* Init Task
	 ------------------------------------------------------*/
	t->obj.objUpdate	= 0;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	721a      	strb	r2, [r3, #8]
	t->obj.type			= OS_OBJ_TASK;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	4a7e      	ldr	r2, [pc, #504]	; (8002ec0 <os_task_create+0x2a0>)
 8002cc8:	60da      	str	r2, [r3, #12]
	t->obj.blockList	= os_list_init();
 8002cca:	f7ff f805 	bl	8001cd8 <os_list_init>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	615a      	str	r2, [r3, #20]
	t->obj.obj_take		= &os_task_objTake;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4a7b      	ldr	r2, [pc, #492]	; (8002ec4 <os_task_create+0x2a4>)
 8002cd8:	611a      	str	r2, [r3, #16]
	t->obj.name			= (char*) name;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	605a      	str	r2, [r3, #4]

	t->basePriority		= priority;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	765a      	strb	r2, [r3, #25]
	t->priority		    = priority;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	t->state			= OS_TASK_READY;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	761a      	strb	r2, [r3, #24]
	t->wakeCoutdown	 	= 0;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
	t->stackBase		= (stk + stack_size);
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	441a      	add	r2, r3
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize 		= stack_size;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f023 0307 	bic.w	r3, r3, #7
 8002d12:	461a      	mov	r2, r3
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	621a      	str	r2, [r3, #32]
	t->objWaited		= NULL;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs 		= 0;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
	t->retVal			= NULL;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2200      	movs	r2, #0
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

	t->ownedMutex		= os_list_init();
 8002d2a:	f7fe ffd5 	bl	8001cd8 <os_list_init>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Init Task Stack
	 ------------------------------------------------------*/
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	1f1a      	subs	r2, r3, #4
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	621a      	str	r2, [r3, #32]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d46:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) fn;				//Return
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	1f1a      	subs	r2, r3, #4
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	621a      	str	r2, [r3, #32]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) &os_task_return;  //LR
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	1f1a      	subs	r2, r3, #4
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	621a      	str	r2, [r3, #32]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <os_task_create+0x2a8>)
 8002d6a:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R12
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	1f1a      	subs	r2, r3, #4
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	621a      	str	r2, [r3, #32]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R3
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	1f1a      	subs	r2, r3, #4
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	621a      	str	r2, [r3, #32]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R2
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	1f1a      	subs	r2, r3, #4
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	621a      	str	r2, [r3, #32]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R1
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1f1a      	subs	r2, r3, #4
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	621a      	str	r2, [r3, #32]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) arg;			 	//R0 (argument)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	1f1a      	subs	r2, r3, #4
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	621a      	str	r2, [r3, #32]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc4:	601a      	str	r2, [r3, #0]

	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	1f1a      	subs	r2, r3, #4
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	621a      	str	r2, [r3, #32]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f06f 0202 	mvn.w	r2, #2
 8002dd8:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R11
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	1f1a      	subs	r2, r3, #4
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	621a      	str	r2, [r3, #32]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R10
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	1f1a      	subs	r2, r3, #4
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	621a      	str	r2, [r3, #32]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0; 			 	//R9
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	1f1a      	subs	r2, r3, #4
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	621a      	str	r2, [r3, #32]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R8
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	1f1a      	subs	r2, r3, #4
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	621a      	str	r2, [r3, #32]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R7
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	1f1a      	subs	r2, r3, #4
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	621a      	str	r2, [r3, #32]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R6
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	1f1a      	subs	r2, r3, #4
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	621a      	str	r2, [r3, #32]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	1f1a      	subs	r2, r3, #4
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	621a      	str	r2, [r3, #32]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R4
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	1f1a      	subs	r2, r3, #4
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

	/* Add task to list
	 ------------------------------------------------------*/
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	69b9      	ldr	r1, [r7, #24]
 8002e6e:	4817      	ldr	r0, [pc, #92]	; (8002ecc <os_task_create+0x2ac>)
 8002e70:	f7fe ffc7 	bl	8001e02 <os_list_add>
 8002e74:	4603      	mov	r3, r0
 8002e76:	74fb      	strb	r3, [r7, #19]
	if(err != OS_ERR_OK) return err;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <os_task_create+0x262>
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	e041      	b.n	8002f06 <os_task_create+0x2e6>

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8002e82:	2200      	movs	r2, #0
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	480d      	ldr	r0, [pc, #52]	; (8002ebc <os_task_create+0x29c>)
 8002e88:	f7fe ffbb 	bl	8001e02 <os_list_add>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74bb      	strb	r3, [r7, #18]
	if(ret != OS_ERR_OK) return ret;
 8002e90:	7cbb      	ldrb	r3, [r7, #18]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <os_task_create+0x27a>
 8002e96:	7cbb      	ldrb	r3, [r7, #18]
 8002e98:	e035      	b.n	8002f06 <os_task_create+0x2e6>

	/* Calculate task priority
	 ------------------------------------------------------*/
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 8002e9a:	69b8      	ldr	r0, [r7, #24]
 8002e9c:	f000 f930 	bl	8003100 <os_task_getPrio>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	747b      	strb	r3, [r7, #17]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <os_task_create+0x2b0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <os_task_create+0x2b4>
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <os_task_create+0x2b0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f924 	bl	8003100 <os_task_getPrio>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	e00d      	b.n	8002ed8 <os_task_create+0x2b8>
 8002ebc:	200142c0 	.word	0x200142c0
 8002ec0:	080029e1 	.word	0x080029e1
 8002ec4:	08002a5f 	.word	0x08002a5f
 8002ec8:	08002f11 	.word	0x08002f11
 8002ecc:	200142e0 	.word	0x200142e0
 8002ed0:	200142ac 	.word	0x200142ac
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	743b      	strb	r3, [r7, #16]

	/* If created task was a higher priority, and scheduler is running, yeild
	 ---------------------------------------------------*/
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8002eda:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8002ede:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	dd06      	ble.n	8002ef4 <os_task_create+0x2d4>
 8002ee6:	f7ff fd3f 	bl	8002968 <os_scheduler_state_get>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <os_task_create+0x2d4>
 8002ef0:	f000 f8f4 	bl	80030dc <os_task_yeild>

	/* link handle with task object
	 ---------------------------------------------------*/
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <os_task_create+0x2de>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	e000      	b.n	8002f00 <os_task_create+0x2e0>
 8002efe:	2300      	movs	r3, #0
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	6013      	str	r3, [r2, #0]

	return err;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop

08002f10 <os_task_return>:
 * @param void* retVal : [in] return value
 *
 * @return os_err_e : should never return. If it does, a problem occurred
 *
 **********************************************************************/
os_err_e os_task_return(void* retVal){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

	/* Check scheduler
	 ------------------------------------------------------*/
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002f18:	f7ff fd26 	bl	8002968 <os_scheduler_state_get>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <os_task_return+0x16>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e019      	b.n	8002f5a <os_task_return+0x4a>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	b672      	cpsid	i
 8002f2e:	f3bf 8f6f 	isb	sy

	/* Store return value and tag as ended
	 ------------------------------------------------------*/
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <os_task_return+0x54>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	761a      	strb	r2, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <os_task_return+0x54>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(os_cur_task->element);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <os_task_return+0x54>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f9cb 	bl	80022e8 <os_handle_list_updateAndCheck>
	 ------------------------------------------------------*/
	while(1){

		/* Yeild task
		 ------------------------------------------------------*/
		os_task_yeild();
 8002f52:	f000 f8c3 	bl	80030dc <os_task_yeild>

		/* Enable IRQ no matter what
		 ------------------------------------------------------*/
		__os_enable_irq();
 8002f56:	b662      	cpsie	i
		os_task_yeild();
 8002f58:	e7fb      	b.n	8002f52 <os_task_return+0x42>
	OS_EXIT_CRITICAL();

	/* Another Failsafe
	 ------------------------------------------------------*/
	return OS_ERR_UNKNOWN;
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200142ac 	.word	0x200142ac

08002f68 <os_task_delete>:
 * @param os_handle_t h : [in] handle containing the task to kill
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_delete(os_handle_t h){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	613b      	str	r3, [r7, #16]

	/* Search to see if task exists
	 ------------------------------------------------------*/
	os_list_cell_t* list = os_list_search(&os_head, h);
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4856      	ldr	r0, [pc, #344]	; (80030d0 <os_task_delete+0x168>)
 8002f78:	f7fe fed1 	bl	8001d1e <os_list_search>
 8002f7c:	60f8      	str	r0, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <os_task_delete+0x20>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e09e      	b.n	80030c6 <os_task_delete+0x15e>
	if(list == NULL) return OS_ERR_INVALID;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <os_task_delete+0x2a>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e099      	b.n	80030c6 <os_task_delete+0x15e>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <os_task_delete+0x36>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e093      	b.n	80030c6 <os_task_delete+0x15e>

	/* Check scheduler, we cannot kill the current task if scheduler is not ready
	 ------------------------------------------------------*/
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002f9e:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <os_task_delete+0x16c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d106      	bne.n	8002fb8 <os_task_delete+0x50>
 8002faa:	f7ff fcdd 	bl	8002968 <os_scheduler_state_get>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d001      	beq.n	8002fb8 <os_task_delete+0x50>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e086      	b.n	80030c6 <os_task_delete+0x15e>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	b672      	cpsid	i
 8002fc0:	f3bf 8f6f 	isb	sy

	/* Tag as ended
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	761a      	strb	r2, [r3, #24]

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(h);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff f98c 	bl	80022e8 <os_handle_list_updateAndCheck>

	/* Check and store if we are killing the current task
	 ------------------------------------------------------*/
	if(h == os_cur_task->element){
 8002fd0:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <os_task_delete+0x16c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <os_task_delete+0x82>

		/* Tag task to delete
		 ------------------------------------------------------*/
		t->state = OS_TASK_DELETING;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	761a      	strb	r2, [r3, #24]
		 ------------------------------------------------------*/
		while(1){

			/* Yeild task
			 ------------------------------------------------------*/
			os_task_yeild();
 8002fe2:	f000 f87b 	bl	80030dc <os_task_yeild>

			/* Enable IRQ no matter what
			 ------------------------------------------------------*/
			__os_enable_irq();
 8002fe6:	b662      	cpsie	i
			os_task_yeild();
 8002fe8:	e7fb      	b.n	8002fe2 <os_task_delete+0x7a>
		return OS_ERR_UNKNOWN;
	}

	/* Remove task from object block list if needed
	 ------------------------------------------------------*/
	if( t->objWaited != NULL) {
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d031      	beq.n	8003056 <os_task_delete+0xee>

		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e029      	b.n	800304c <os_task_delete+0xe4>

			/* Failsafe
			 ------------------------------------------------------*/
			if(t->objWaited[i] == NULL) continue;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01d      	beq.n	8003044 <os_task_delete+0xdc>

			/* Remove from block list
			 ------------------------------------------------------*/
			os_list_remove(t->objWaited[i]->blockList, h);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe ff60 	bl	8001ede <os_list_remove>

			/* Update object's priority
			 ------------------------------------------------------*/
			os_obj_updatePrio(t->objWaited[i]);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fdf0 	bl	8001c10 <os_obj_updatePrio>

			/* Update block list
			 ------------------------------------------------------*/
			os_handle_list_updateAndCheck(t->objWaited[i]);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f953 	bl	80022e8 <os_handle_list_updateAndCheck>
 8003042:	e000      	b.n	8003046 <os_task_delete+0xde>
			if(t->objWaited[i] == NULL) continue;
 8003044:	bf00      	nop
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3d0      	bcc.n	8002ff8 <os_task_delete+0x90>

	}

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	481f      	ldr	r0, [pc, #124]	; (80030d8 <os_task_delete+0x170>)
 800305a:	f7fe ff40 	bl	8001ede <os_list_remove>

	/* Remove task from list
	 ------------------------------------------------------*/
	os_list_remove(&os_head, h);
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	481b      	ldr	r0, [pc, #108]	; (80030d0 <os_task_delete+0x168>)
 8003062:	f7fe ff3c 	bl	8001ede <os_list_remove>

	/* Clear blocked list
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff8a 	bl	8001f84 <os_list_clear>

	/* Clear owned mutex list
	 ------------------------------------------------------*/
	os_list_clear(t->ownedMutex);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe ff85 	bl	8001f84 <os_list_clear>

	/* Free the stack memory
	 ------------------------------------------------------*/
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fca7 	bl	80019d8 <os_heap_free>

	/* Reset values just in case
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2201      	movs	r2, #1
 800308e:	761a      	strb	r2, [r3, #24]
	t->objWaited = NULL;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2200      	movs	r2, #0
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs = 0;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
	t->pStack = 0;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2200      	movs	r2, #0
 80030a0:	621a      	str	r2, [r3, #32]
	t->stackBase = 0;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize = 0;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
	t->wakeCoutdown = 0;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]

	/* Delete task
	 ------------------------------------------------------*/
	os_heap_free(h);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7fe fc8f 	bl	80019d8 <os_heap_free>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f383 8810 	msr	PRIMASK, r3
 80030c0:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200142e0 	.word	0x200142e0
 80030d4:	200142ac 	.word	0x200142ac
 80030d8:	200142c0 	.word	0x200142c0

080030dc <os_task_yeild>:
 * OS Task Yeild
 *
 * @brief This function calls the scheduler in order to let other tasks to run
 *
 **********************************************************************/
void os_task_yeild(){
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <os_task_yeild+0x20>)
 80030e2:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <os_task_yeild+0x20>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ec:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e008 	.word	0xe000e008

08003100 <os_task_getPrio>:
 * @param task_t* t : [in] handle to task
 *
 * @return int8_t : The effective priority or -1 if argument error
 *
 **********************************************************************/
int8_t os_task_getPrio(os_handle_t h){
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60fb      	str	r3, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <os_task_getPrio+0x18>
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	e009      	b.n	800312c <os_task_getPrio+0x2c>
	if(h->type != OS_OBJ_TASK) return -1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d002      	beq.n	8003126 <os_task_getPrio+0x26>
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e002      	b.n	800312c <os_task_getPrio+0x2c>

	return t->priority;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60fb      	str	r3, [r7, #12]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <os_task_getState+0x16>
 800314a:	2300      	movs	r3, #0
 800314c:	e023      	b.n	8003196 <os_task_getState+0x5e>
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <os_task_getState+0x22>
 8003156:	2300      	movs	r3, #0
 8003158:	e01d      	b.n	8003196 <os_task_getState+0x5e>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4810      	ldr	r0, [pc, #64]	; (80031a0 <os_task_getState+0x68>)
 800315e:	f7fe fdde 	bl	8001d1e <os_list_search>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <os_task_getState+0x34>
 8003168:	2300      	movs	r3, #0
 800316a:	e014      	b.n	8003196 <os_task_getState+0x5e>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	7e1b      	ldrb	r3, [r3, #24]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d101      	bne.n	8003178 <os_task_getState+0x40>
 8003174:	2300      	movs	r3, #0
 8003176:	e00e      	b.n	8003196 <os_task_getState+0x5e>

	/* Check if task is ended
	 ------------------------------------------------------*/
	os_task_state_e state = task->state;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
 800317c:	72fb      	strb	r3, [r7, #11]

	/* Force blocked if task is waiting for an object
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d103      	bne.n	800318c <os_task_getState+0x54>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <os_task_getState+0x58>
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	e000      	b.n	8003192 <os_task_getState+0x5a>
 8003190:	2303      	movs	r3, #3
 8003192:	72fb      	strb	r3, [r7, #11]

	return state;
 8003194:	7afb      	ldrb	r3, [r7, #11]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200142e0 	.word	0x200142e0

080031a4 <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80031ac:	f3ef 8310 	mrs	r3, PRIMASK
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	b672      	cpsid	i
 80031b4:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <os_tick+0x100>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	4a38      	ldr	r2, [pc, #224]	; (80032a4 <os_tick+0x100>)
 80031c2:	6013      	str	r3, [r2, #0]

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* it = os_head.head.next;
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <os_tick+0x104>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <os_tick+0x108>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <os_tick+0x42>
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <os_tick+0x108>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff8f 	bl	8003100 <os_task_getPrio>
 80031e2:	4603      	mov	r3, r0
 80031e4:	e001      	b.n	80031ea <os_tick+0x46>
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	73fb      	strb	r3, [r7, #15]

	/* Check if there is any high priority task to execute and wake up tasks
	 ------------------------------------------------------*/
	while(it != NULL){
 80031ec:	e044      	b.n	8003278 <os_tick+0xd4>

		/* Tick counter if necessary
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <os_tick+0x80>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d00f      	beq.n	8003224 <os_tick+0x80>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d805      	bhi.n	800321c <os_tick+0x78>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	e000      	b.n	800321e <os_tick+0x7a>
 800321c:	2300      	movs	r3, #0
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	6892      	ldr	r2, [r2, #8]
 8003222:	61d3      	str	r3, [r2, #28]

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <os_tick+0x9c>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	7e1b      	ldrb	r3, [r3, #24]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d103      	bne.n	8003240 <os_tick+0x9c>
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2202      	movs	r2, #2
 800323e:	761a      	strb	r2, [r3, #24]

		/* If current task is ready
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	7e1b      	ldrb	r3, [r3, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d113      	bne.n	8003272 <os_tick+0xce>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio(it->element);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff56 	bl	8003100 <os_task_getPrio>
 8003254:	4603      	mov	r3, r0
 8003256:	73bb      	strb	r3, [r7, #14]

			/* If there is a task with priority higher or equal to current task that is ready, than scheduling is called
			 ------------------------------------------------------*/
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 8003258:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800325c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003260:	429a      	cmp	r2, r3
 8003262:	db06      	blt.n	8003272 <os_tick+0xce>
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <os_tick+0x108>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <os_tick+0xce>
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]

		}

		/* Keep going
		 ------------------------------------------------------*/
		it = it->next;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]
	while(it != NULL){
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1b7      	bne.n	80031ee <os_tick+0x4a>
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <os_tick+0xee>
 8003284:	f7ff fb70 	bl	8002968 <os_scheduler_state_get>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <os_tick+0xee>
 800328e:	f7ff ff25 	bl	80030dc <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f383 8810 	msr	PRIMASK, r3
 8003298:	f3bf 8f6f 	isb	sy
	return;
 800329c:	bf00      	nop
}
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200142b0 	.word	0x200142b0
 80032a8:	200142e0 	.word	0x200142e0
 80032ac:	200142ac 	.word	0x200142ac

080032b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <MX_GPIO_Init+0x1b4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a65      	ldr	r2, [pc, #404]	; (8003464 <MX_GPIO_Init+0x1b4>)
 80032d0:	f043 0310 	orr.w	r3, r3, #16
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <MX_GPIO_Init+0x1b4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <MX_GPIO_Init+0x1b4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <MX_GPIO_Init+0x1b4>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <MX_GPIO_Init+0x1b4>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	4b58      	ldr	r3, [pc, #352]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a57      	ldr	r2, [pc, #348]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b55      	ldr	r3, [pc, #340]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a50      	ldr	r2, [pc, #320]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <MX_GPIO_Init+0x1b4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <MX_GPIO_Init+0x1b4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a49      	ldr	r2, [pc, #292]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a42      	ldr	r2, [pc, #264]	; (8003464 <MX_GPIO_Init+0x1b4>)
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <MX_GPIO_Init+0x1b4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800336e:	2200      	movs	r2, #0
 8003370:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003374:	483c      	ldr	r0, [pc, #240]	; (8003468 <MX_GPIO_Init+0x1b8>)
 8003376:	f000 fecd 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800337a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800337e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003380:	2303      	movs	r3, #3
 8003382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	4619      	mov	r1, r3
 800338e:	4837      	ldr	r0, [pc, #220]	; (800346c <MX_GPIO_Init+0x1bc>)
 8003390:	f000 fd26 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003394:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8003398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800339a:	2303      	movs	r3, #3
 800339c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	4831      	ldr	r0, [pc, #196]	; (8003470 <MX_GPIO_Init+0x1c0>)
 80033aa:	f000 fd19 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033ae:	2303      	movs	r3, #3
 80033b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033b2:	2303      	movs	r3, #3
 80033b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	4619      	mov	r1, r3
 80033c0:	482c      	ldr	r0, [pc, #176]	; (8003474 <MX_GPIO_Init+0x1c4>)
 80033c2:	f000 fd0d 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <MX_GPIO_Init+0x1c8>)
 80033cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 031c 	add.w	r3, r7, #28
 80033d6:	4619      	mov	r1, r3
 80033d8:	4828      	ldr	r0, [pc, #160]	; (800347c <MX_GPIO_Init+0x1cc>)
 80033da:	f000 fd01 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80033de:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 80033e2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e4:	2303      	movs	r3, #3
 80033e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ec:	f107 031c 	add.w	r3, r7, #28
 80033f0:	4619      	mov	r1, r3
 80033f2:	4822      	ldr	r0, [pc, #136]	; (800347c <MX_GPIO_Init+0x1cc>)
 80033f4:	f000 fcf4 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80033f8:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80033fc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fe:	2303      	movs	r3, #3
 8003400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	481c      	ldr	r0, [pc, #112]	; (8003480 <MX_GPIO_Init+0x1d0>)
 800340e:	f000 fce7 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003412:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003416:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003418:	2303      	movs	r3, #3
 800341a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4619      	mov	r1, r3
 8003426:	4810      	ldr	r0, [pc, #64]	; (8003468 <MX_GPIO_Init+0x1b8>)
 8003428:	f000 fcda 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800342c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	4619      	mov	r1, r3
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <MX_GPIO_Init+0x1b8>)
 8003446:	f000 fccb 	bl	8003de0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	210f      	movs	r1, #15
 800344e:	2006      	movs	r0, #6
 8003450:	f000 fc6d 	bl	8003d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003454:	2006      	movs	r0, #6
 8003456:	f000 fc86 	bl	8003d66 <HAL_NVIC_EnableIRQ>

}
 800345a:	bf00      	nop
 800345c:	3730      	adds	r7, #48	; 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40020c00 	.word	0x40020c00
 800346c:	40021000 	.word	0x40021000
 8003470:	40020800 	.word	0x40020800
 8003474:	40021c00 	.word	0x40021c00
 8003478:	10110000 	.word	0x10110000
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400

08003484 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800348a:	f000 fb03 	bl	8003a94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800348e:	f000 f835 	bl	80034fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003492:	f7ff ff0d 	bl	80032b0 <MX_GPIO_Init>
	MX_TIM13_Init();
 8003496:	f000 f9e9 	bl	800386c <MX_TIM13_Init>
	MX_USART3_UART_Init();
 800349a:	f000 fa45 	bl	8003928 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	cli_init();
 800349e:	f7fe f8f9 	bl	8001694 <cli_init>
	PRINTLN("Periph Init Finished");
 80034a2:	2260      	movs	r2, #96	; 0x60
 80034a4:	490f      	ldr	r1, [pc, #60]	; (80034e4 <main+0x60>)
 80034a6:	4810      	ldr	r0, [pc, #64]	; (80034e8 <main+0x64>)
 80034a8:	f002 fb70 	bl	8005b8c <iprintf>
	ASSERT(os_init("main", 10, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 80034ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <main+0x68>)
 80034b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b8:	210a      	movs	r1, #10
 80034ba:	480d      	ldr	r0, [pc, #52]	; (80034f0 <main+0x6c>)
 80034bc:	f7fe f910 	bl	80016e0 <os_init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <main+0x4c>
 80034c6:	2261      	movs	r2, #97	; 0x61
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <main+0x60>)
 80034ca:	480a      	ldr	r0, [pc, #40]	; (80034f4 <main+0x70>)
 80034cc:	f002 fb5e 	bl	8005b8c <iprintf>
	os_scheduler_start();
 80034d0:	f7ff fa18 	bl	8002904 <os_scheduler_start>

	PRINTLN("Init OS finished");
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	4903      	ldr	r1, [pc, #12]	; (80034e4 <main+0x60>)
 80034d8:	4807      	ldr	r0, [pc, #28]	; (80034f8 <main+0x74>)
 80034da:	f002 fb57 	bl	8005b8c <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		cli_process();
 80034de:	f7fe f8e9 	bl	80016b4 <cli_process>
 80034e2:	e7fc      	b.n	80034de <main+0x5a>
 80034e4:	08006c34 	.word	0x08006c34
 80034e8:	08006c3c 	.word	0x08006c3c
 80034ec:	08006c60 	.word	0x08006c60
 80034f0:	08006c68 	.word	0x08006c68
 80034f4:	08006c70 	.word	0x08006c70
 80034f8:	08006c8c 	.word	0x08006c8c

080034fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b094      	sub	sp, #80	; 0x50
 8003500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003502:	f107 0320 	add.w	r3, r7, #32
 8003506:	2230      	movs	r2, #48	; 0x30
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f002 fb36 	bl	8005b7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <SystemClock_Config+0xc8>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <SystemClock_Config+0xc8>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <SystemClock_Config+0xc8>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800353c:	2300      	movs	r3, #0
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <SystemClock_Config+0xcc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <SystemClock_Config+0xcc>)
 8003546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <SystemClock_Config+0xcc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003558:	2302      	movs	r3, #2
 800355a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800355c:	2301      	movs	r3, #1
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003560:	2310      	movs	r3, #16
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003564:	2302      	movs	r3, #2
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800356c:	2308      	movs	r3, #8
 800356e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8003570:	2354      	movs	r3, #84	; 0x54
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003574:	2302      	movs	r3, #2
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003578:	2307      	movs	r3, #7
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800357c:	f107 0320 	add.w	r3, r7, #32
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fe05 	bl	8004190 <HAL_RCC_OscConfig>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800358c:	f000 f81e 	bl	80035cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003590:	230f      	movs	r3, #15
 8003592:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003594:	2302      	movs	r3, #2
 8003596:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 f85f 	bl	8004670 <HAL_RCC_ClockConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80035b8:	f000 f808 	bl	80035cc <Error_Handler>
	}
}
 80035bc:	bf00      	nop
 80035be:	3750      	adds	r7, #80	; 0x50
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40007000 	.word	0x40007000

080035cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_MspInit+0x90>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a20      	ldr	r2, [pc, #128]	; (800366c <HAL_MspInit+0x90>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_MspInit+0x90>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_MspInit+0x90>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a19      	ldr	r2, [pc, #100]	; (800366c <HAL_MspInit+0x90>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b17      	ldr	r3, [pc, #92]	; (800366c <HAL_MspInit+0x90>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	210f      	movs	r1, #15
 800361e:	f06f 000b 	mvn.w	r0, #11
 8003622:	f000 fb84 	bl	8003d2e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	210f      	movs	r1, #15
 800362a:	f06f 000a 	mvn.w	r0, #10
 800362e:	f000 fb7e 	bl	8003d2e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	210f      	movs	r1, #15
 8003636:	f06f 0009 	mvn.w	r0, #9
 800363a:	f000 fb78 	bl	8003d2e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	210f      	movs	r1, #15
 8003642:	f06f 0004 	mvn.w	r0, #4
 8003646:	f000 fb72 	bl	8003d2e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	210f      	movs	r1, #15
 800364e:	f06f 0003 	mvn.w	r0, #3
 8003652:	f000 fb6c 	bl	8003d2e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	210f      	movs	r1, #15
 800365a:	f06f 0001 	mvn.w	r0, #1
 800365e:	f000 fb66 	bl	8003d2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800

08003670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003682:	e7fe      	b.n	8003682 <HardFault_Handler+0x4>

08003684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003688:	e7fe      	b.n	8003688 <MemManage_Handler+0x4>

0800368a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <BusFault_Handler+0x4>

08003690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <UsageFault_Handler+0x4>

08003696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036b6:	f000 fa3f 	bl	8003b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7ff fd72 	bl	80031a4 <os_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036c8:	2001      	movs	r0, #1
 80036ca:	f000 fd3d 	bl	8004148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <USART3_IRQHandler+0x10>)
 80036da:	f001 fc09 	bl	8004ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20014340 	.word	0x20014340

080036e8 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;


int __io_putchar(int ch){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80036f0:	1d39      	adds	r1, r7, #4
 80036f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f6:	2201      	movs	r2, #1
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <__io_putchar+0x20>)
 80036fa:	f001 fb0a 	bl	8004d12 <HAL_UART_Transmit>
	return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20014340 	.word	0x20014340

0800370c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e00a      	b.n	8003734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800371e:	f3af 8000 	nop.w
 8003722:	4601      	mov	r1, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	b2ca      	uxtb	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf0      	blt.n	800371e <_read+0x12>
	}

return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e009      	b.n	800376c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	60ba      	str	r2, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ffc1 	bl	80036e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	dbf1      	blt.n	8003758 <_write+0x12>
	}
	return len;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_close>:

int _close(int file)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
	return -1;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037a6:	605a      	str	r2, [r3, #4]
	return 0;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_isatty>:

int _isatty(int file)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
	return 1;
 80037be:	2301      	movs	r3, #1
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
	return 0;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <_sbrk+0x50>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <_sbrk+0x16>
		heap_end = &end;
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <_sbrk+0x50>)
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <_sbrk+0x54>)
 80037fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <_sbrk+0x50>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <_sbrk+0x50>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	466a      	mov	r2, sp
 800380e:	4293      	cmp	r3, r2
 8003810:	d907      	bls.n	8003822 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003812:	f002 f969 	bl	8005ae8 <__errno>
 8003816:	4602      	mov	r2, r0
 8003818:	230c      	movs	r3, #12
 800381a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295
 8003820:	e006      	b.n	8003830 <_sbrk+0x48>
	}

	heap_end += incr;
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <_sbrk+0x50>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	4a03      	ldr	r2, [pc, #12]	; (8003838 <_sbrk+0x50>)
 800382c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200142b4 	.word	0x200142b4
 800383c:	20014388 	.word	0x20014388

08003840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <SystemInit+0x28>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <SystemInit+0x28>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <SystemInit+0x28>)
 8003856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800385a:	609a      	str	r2, [r3, #8]
#endif
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <MX_TIM13_Init+0x50>)
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <MX_TIM13_Init+0x54>)
 8003874:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_TIM13_Init+0x50>)
 8003878:	2200      	movs	r2, #0
 800387a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <MX_TIM13_Init+0x50>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0xFFFF;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_TIM13_Init+0x50>)
 8003884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003888:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_TIM13_Init+0x50>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <MX_TIM13_Init+0x50>)
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003896:	4809      	ldr	r0, [pc, #36]	; (80038bc <MX_TIM13_Init+0x50>)
 8003898:	f001 f8dc 	bl	8004a54 <HAL_TIM_Base_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80038a2:	f7ff fe93 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 80038a6:	2108      	movs	r1, #8
 80038a8:	4804      	ldr	r0, [pc, #16]	; (80038bc <MX_TIM13_Init+0x50>)
 80038aa:	f001 f8fe 	bl	8004aaa <HAL_TIM_OnePulse_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 80038b4:	f7ff fe8a 	bl	80035cc <Error_Handler>
  }

}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20014300 	.word	0x20014300
 80038c0:	40001c00 	.word	0x40001c00

080038c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_TIM_Base_MspInit+0x3c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10d      	bne.n	80038f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_TIM_Base_MspInit+0x40>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_TIM_Base_MspInit+0x40>)
 80038e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_TIM_Base_MspInit+0x40>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40001c00 	.word	0x40001c00
 8003904:	40023800 	.word	0x40023800

08003908 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	if(huart == &USART_CLI){
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_UART_RxCpltCallback+0x1c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_UART_RxCpltCallback+0x14>
		cli_rcv_char_cb_irq();
 8003918:	f7fd fea6 	bl	8001668 <cli_rcv_char_cb_irq>
	}
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20014340 	.word	0x20014340

08003928 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <MX_USART3_UART_Init+0x50>)
 8003930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 8003934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 800394e:	220c      	movs	r2, #12
 8003950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800395e:	4805      	ldr	r0, [pc, #20]	; (8003974 <MX_USART3_UART_Init+0x4c>)
 8003960:	f001 f98a 	bl	8004c78 <HAL_UART_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800396a:	f7ff fe2f 	bl	80035cc <Error_Handler>
  }

}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20014340 	.word	0x20014340
 8003978:	40004800 	.word	0x40004800

0800397c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <HAL_UART_MspInit+0xb8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d145      	bne.n	8003a2a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <HAL_UART_MspInit+0xbc>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <HAL_UART_MspInit+0xbc>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <HAL_UART_MspInit+0xbc>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_UART_MspInit+0xbc>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_UART_MspInit+0xbc>)
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_UART_MspInit+0xbc>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039e8:	2307      	movs	r3, #7
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4619      	mov	r1, r3
 80039f2:	4812      	ldr	r0, [pc, #72]	; (8003a3c <HAL_UART_MspInit+0xc0>)
 80039f4:	f000 f9f4 	bl	8003de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4809      	ldr	r0, [pc, #36]	; (8003a3c <HAL_UART_MspInit+0xc0>)
 8003a16:	f000 f9e3 	bl	8003de0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	210f      	movs	r1, #15
 8003a1e:	2027      	movs	r0, #39	; 0x27
 8003a20:	f000 f985 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a24:	2027      	movs	r0, #39	; 0x27
 8003a26:	f000 f99e 	bl	8003d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3728      	adds	r7, #40	; 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40004800 	.word	0x40004800
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40020800 	.word	0x40020800

08003a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a46:	e003      	b.n	8003a50 <LoopCopyDataInit>

08003a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a4e:	3104      	adds	r1, #4

08003a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a58:	d3f6      	bcc.n	8003a48 <CopyDataInit>
  ldr  r2, =_sbss
 8003a5a:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a5c:	e002      	b.n	8003a64 <LoopFillZerobss>

08003a5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a60:	f842 3b04 	str.w	r3, [r2], #4

08003a64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a68:	d3f9      	bcc.n	8003a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a6a:	f7ff fee9 	bl	8003840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a6e:	f002 f841 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a72:	f7ff fd07 	bl	8003484 <main>
  bx  lr    
 8003a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a7c:	08006e78 	.word	0x08006e78
  ldr  r0, =_sdata
 8003a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a84:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003a88:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003a8c:	20014388 	.word	0x20014388

08003a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a90:	e7fe      	b.n	8003a90 <ADC_IRQHandler>
	...

08003a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <HAL_Init+0x40>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_Init+0x40>)
 8003a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_Init+0x40>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <HAL_Init+0x40>)
 8003aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <HAL_Init+0x40>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_Init+0x40>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003abc:	2003      	movs	r0, #3
 8003abe:	f000 f92b 	bl	8003d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ac2:	200f      	movs	r0, #15
 8003ac4:	f000 f808 	bl	8003ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac8:	f7ff fd88 	bl	80035dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00

08003ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae0:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_InitTick+0x54>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_InitTick+0x58>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f943 	bl	8003d82 <HAL_SYSTICK_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00e      	b.n	8003b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d80a      	bhi.n	8003b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	f000 f90b 	bl	8003d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b18:	4a06      	ldr	r2, [pc, #24]	; (8003b34 <HAL_InitTick+0x5c>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	20000008 	.word	0x20000008
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_IncTick+0x20>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_IncTick+0x24>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4413      	add	r3, r2
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_IncTick+0x24>)
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000008 	.word	0x20000008
 8003b5c:	20014380 	.word	0x20014380

08003b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return uwTick;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_GetTick+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20014380 	.word	0x20014380

08003b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b94:	4013      	ands	r3, r2
 8003b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	60d3      	str	r3, [r2, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 0307 	and.w	r3, r3, #7
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	db0b      	blt.n	8003c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	f003 021f 	and.w	r2, r3, #31
 8003bf4:	4907      	ldr	r1, [pc, #28]	; (8003c14 <__NVIC_EnableIRQ+0x38>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e100 	.word	0xe000e100

08003c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	6039      	str	r1, [r7, #0]
 8003c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	db0a      	blt.n	8003c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	490c      	ldr	r1, [pc, #48]	; (8003c64 <__NVIC_SetPriority+0x4c>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c40:	e00a      	b.n	8003c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4908      	ldr	r1, [pc, #32]	; (8003c68 <__NVIC_SetPriority+0x50>)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	440b      	add	r3, r1
 8003c56:	761a      	strb	r2, [r3, #24]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000e100 	.word	0xe000e100
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f1c3 0307 	rsb	r3, r3, #7
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	bf28      	it	cs
 8003c8a:	2304      	movcs	r3, #4
 8003c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d902      	bls.n	8003c9c <NVIC_EncodePriority+0x30>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3b03      	subs	r3, #3
 8003c9a:	e000      	b.n	8003c9e <NVIC_EncodePriority+0x32>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	401a      	ands	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	43d9      	mvns	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	4313      	orrs	r3, r2
         );
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce4:	d301      	bcc.n	8003cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e00f      	b.n	8003d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <SysTick_Config+0x40>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	f7ff ff8e 	bl	8003c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <SysTick_Config+0x40>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <SysTick_Config+0x40>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000e010 	.word	0xe000e010

08003d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff29 	bl	8003b78 <__NVIC_SetPriorityGrouping>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b086      	sub	sp, #24
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d40:	f7ff ff3e 	bl	8003bc0 <__NVIC_GetPriorityGrouping>
 8003d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7ff ff8e 	bl	8003c6c <NVIC_EncodePriority>
 8003d50:	4602      	mov	r2, r0
 8003d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff5d 	bl	8003c18 <__NVIC_SetPriority>
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff31 	bl	8003bdc <__NVIC_EnableIRQ>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ffa2 	bl	8003cd4 <SysTick_Config>
 8003d90:	4603      	mov	r3, r0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d004      	beq.n	8003db8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e00c      	b.n	8003dd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2205      	movs	r2, #5
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	e16b      	b.n	80040d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	f040 815a 	bne.w	80040ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d00b      	beq.n	8003e3a <HAL_GPIO_Init+0x5a>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d007      	beq.n	8003e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e2e:	2b11      	cmp	r3, #17
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d130      	bne.n	8003e9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e70:	2201      	movs	r2, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 0201 	and.w	r2, r3, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0xfc>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b12      	cmp	r3, #18
 8003eda:	d123      	bne.n	8003f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	08da      	lsrs	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3208      	adds	r2, #8
 8003f1e:	69b9      	ldr	r1, [r7, #24]
 8003f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2203      	movs	r2, #3
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0203 	and.w	r2, r3, #3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80b4 	beq.w	80040ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	; (80040e8 <HAL_GPIO_Init+0x308>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4a5e      	ldr	r2, [pc, #376]	; (80040e8 <HAL_GPIO_Init+0x308>)
 8003f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f74:	6453      	str	r3, [r2, #68]	; 0x44
 8003f76:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <HAL_GPIO_Init+0x308>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_GPIO_Init+0x30c>)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	220f      	movs	r2, #15
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a51      	ldr	r2, [pc, #324]	; (80040f0 <HAL_GPIO_Init+0x310>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02b      	beq.n	8004006 <HAL_GPIO_Init+0x226>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_GPIO_Init+0x314>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d025      	beq.n	8004002 <HAL_GPIO_Init+0x222>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4f      	ldr	r2, [pc, #316]	; (80040f8 <HAL_GPIO_Init+0x318>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01f      	beq.n	8003ffe <HAL_GPIO_Init+0x21e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4e      	ldr	r2, [pc, #312]	; (80040fc <HAL_GPIO_Init+0x31c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d019      	beq.n	8003ffa <HAL_GPIO_Init+0x21a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4d      	ldr	r2, [pc, #308]	; (8004100 <HAL_GPIO_Init+0x320>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_GPIO_Init+0x216>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4c      	ldr	r2, [pc, #304]	; (8004104 <HAL_GPIO_Init+0x324>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_GPIO_Init+0x212>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4b      	ldr	r2, [pc, #300]	; (8004108 <HAL_GPIO_Init+0x328>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d007      	beq.n	8003fee <HAL_GPIO_Init+0x20e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4a      	ldr	r2, [pc, #296]	; (800410c <HAL_GPIO_Init+0x32c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_GPIO_Init+0x20a>
 8003fe6:	2307      	movs	r3, #7
 8003fe8:	e00e      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003fea:	2308      	movs	r3, #8
 8003fec:	e00c      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003fee:	2306      	movs	r3, #6
 8003ff0:	e00a      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e008      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e006      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e004      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e002      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_GPIO_Init+0x228>
 8004006:	2300      	movs	r3, #0
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f002 0203 	and.w	r2, r2, #3
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	4093      	lsls	r3, r2
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004018:	4934      	ldr	r1, [pc, #208]	; (80040ec <HAL_GPIO_Init+0x30c>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004026:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_GPIO_Init+0x330>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404a:	4a31      	ldr	r2, [pc, #196]	; (8004110 <HAL_GPIO_Init+0x330>)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_GPIO_Init+0x330>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_GPIO_Init+0x330>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_GPIO_Init+0x330>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <HAL_GPIO_Init+0x330>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_GPIO_Init+0x330>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_GPIO_Init+0x330>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	f67f ae90 	bls.w	8003dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040dc:	bf00      	nop
 80040de:	3724      	adds	r7, #36	; 0x24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	40020400 	.word	0x40020400
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40020c00 	.word	0x40020c00
 8004100:	40021000 	.word	0x40021000
 8004104:	40021400 	.word	0x40021400
 8004108:	40021800 	.word	0x40021800
 800410c:	40021c00 	.word	0x40021c00
 8004110:	40013c00 	.word	0x40013c00

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004130:	e003      	b.n	800413a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	041a      	lsls	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	619a      	str	r2, [r3, #24]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f806 	bl	8004178 <HAL_GPIO_EXTI_Callback>
  }
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40013c00 	.word	0x40013c00

08004178 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e25b      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d075      	beq.n	800429a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ae:	4ba3      	ldr	r3, [pc, #652]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d00c      	beq.n	80041d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4ba0      	ldr	r3, [pc, #640]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d112      	bne.n	80041ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c6:	4b9d      	ldr	r3, [pc, #628]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d2:	d10b      	bne.n	80041ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	4b99      	ldr	r3, [pc, #612]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05b      	beq.n	8004298 <HAL_RCC_OscConfig+0x108>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d157      	bne.n	8004298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e236      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x74>
 80041f6:	4b91      	ldr	r3, [pc, #580]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a90      	ldr	r2, [pc, #576]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e01d      	b.n	8004240 <HAL_RCC_OscConfig+0xb0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x98>
 800420e:	4b8b      	ldr	r3, [pc, #556]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a8a      	ldr	r2, [pc, #552]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b88      	ldr	r3, [pc, #544]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a87      	ldr	r2, [pc, #540]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xb0>
 8004228:	4b84      	ldr	r3, [pc, #528]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a83      	ldr	r2, [pc, #524]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b81      	ldr	r3, [pc, #516]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7ff fc8a 	bl	8003b60 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7ff fc86 	bl	8003b60 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1fb      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xc0>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7ff fc76 	bl	8003b60 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004278:	f7ff fc72 	bl	8003b60 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1e7      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428a:	4b6c      	ldr	r3, [pc, #432]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0xe8>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d063      	beq.n	800436e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b62      	ldr	r3, [pc, #392]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d11c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	4b5c      	ldr	r3, [pc, #368]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x152>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e1bb      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b56      	ldr	r3, [pc, #344]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4952      	ldr	r1, [pc, #328]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	e03a      	b.n	800436e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCC_OscConfig+0x2b0>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7ff fc2b 	bl	8003b60 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430e:	f7ff fc27 	bl	8003b60 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e19c      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004320:	4b46      	ldr	r3, [pc, #280]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4940      	ldr	r1, [pc, #256]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCC_OscConfig+0x2b0>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7ff fc0a 	bl	8003b60 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004350:	f7ff fc06 	bl	8003b60 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e17b      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d030      	beq.n	80043dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b30      	ldr	r3, [pc, #192]	; (8004444 <HAL_RCC_OscConfig+0x2b4>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7ff fbea 	bl	8003b60 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004390:	f7ff fbe6 	bl	8003b60 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e15b      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x200>
 80043ae:	e015      	b.n	80043dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <HAL_RCC_OscConfig+0x2b4>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7ff fbd3 	bl	8003b60 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043be:	f7ff fbcf 	bl	8003b60 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e144      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a0 	beq.w	800452a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a0e      	ldr	r2, [pc, #56]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x2b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d121      	bne.n	800446a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RCC_OscConfig+0x2b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <HAL_RCC_OscConfig+0x2b8>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7ff fb95 	bl	8003b60 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e011      	b.n	800445e <HAL_RCC_OscConfig+0x2ce>
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	42470000 	.word	0x42470000
 8004444:	42470e80 	.word	0x42470e80
 8004448:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7ff fb88 	bl	8003b60 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0fd      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b81      	ldr	r3, [pc, #516]	; (8004664 <HAL_RCC_OscConfig+0x4d4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x2f0>
 8004472:	4b7d      	ldr	r3, [pc, #500]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a7c      	ldr	r2, [pc, #496]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e01c      	b.n	80044ba <HAL_RCC_OscConfig+0x32a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x312>
 8004488:	4b77      	ldr	r3, [pc, #476]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a76      	ldr	r2, [pc, #472]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800448e:	f043 0304 	orr.w	r3, r3, #4
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	4b74      	ldr	r3, [pc, #464]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a73      	ldr	r2, [pc, #460]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e00b      	b.n	80044ba <HAL_RCC_OscConfig+0x32a>
 80044a2:	4b71      	ldr	r3, [pc, #452]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a70      	ldr	r2, [pc, #448]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70
 80044ae:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a6d      	ldr	r2, [pc, #436]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7ff fb4d 	bl	8003b60 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7ff fb49 	bl	8003b60 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0bc      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	4b61      	ldr	r3, [pc, #388]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ee      	beq.n	80044ca <HAL_RCC_OscConfig+0x33a>
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7ff fb37 	bl	8003b60 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7ff fb33 	bl	8003b60 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0a6      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	4b56      	ldr	r3, [pc, #344]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ee      	bne.n	80044f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b52      	ldr	r3, [pc, #328]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a51      	ldr	r2, [pc, #324]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8092 	beq.w	8004658 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d05c      	beq.n	80045fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d141      	bne.n	80045cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b48      	ldr	r3, [pc, #288]	; (800466c <HAL_RCC_OscConfig+0x4dc>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7ff fb07 	bl	8003b60 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004556:	f7ff fb03 	bl	8003b60 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e078      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	019b      	lsls	r3, r3, #6
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	4933      	ldr	r1, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_RCC_OscConfig+0x4dc>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7ff fadc 	bl	8003b60 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7ff fad8 	bl	8003b60 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e04d      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x41c>
 80045ca:	e045      	b.n	8004658 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x4dc>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7ff fac5 	bl	8003b60 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f7ff fac1 	bl	8003b60 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e036      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f0      	bne.n	80045da <HAL_RCC_OscConfig+0x44a>
 80045f8:	e02e      	b.n	8004658 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e029      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	429a      	cmp	r2, r3
 8004618:	d11c      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d115      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d106      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40007000 	.word	0x40007000
 8004668:	40023800 	.word	0x40023800
 800466c:	42470060 	.word	0x42470060

08004670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0cc      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b68      	ldr	r3, [pc, #416]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d90c      	bls.n	80046ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b63      	ldr	r3, [pc, #396]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0b8      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a58      	ldr	r2, [pc, #352]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046dc:	4b53      	ldr	r3, [pc, #332]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a52      	ldr	r2, [pc, #328]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e8:	4b50      	ldr	r3, [pc, #320]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	494d      	ldr	r1, [pc, #308]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d044      	beq.n	8004790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d003      	beq.n	800472e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	4b3f      	ldr	r3, [pc, #252]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e067      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4934      	ldr	r1, [pc, #208]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004760:	f7ff f9fe 	bl	8003b60 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7ff f9fa 	bl	8003b60 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e04f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 020c 	and.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	429a      	cmp	r2, r3
 800478e:	d1eb      	bne.n	8004768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d20c      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e032      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4916      	ldr	r1, [pc, #88]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	490e      	ldr	r1, [pc, #56]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047f6:	f000 f821 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047fa:	4601      	mov	r1, r0
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	5cd3      	ldrb	r3, [r2, r3]
 800480a:	fa21 f303 	lsr.w	r3, r1, r3
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f95e 	bl	8003ad8 <HAL_InitTick>

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023c00 	.word	0x40023c00
 800482c:	40023800 	.word	0x40023800
 8004830:	08006cac 	.word	0x08006cac
 8004834:	20000000 	.word	0x20000000
 8004838:	20000004 	.word	0x20000004

0800483c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	2300      	movs	r3, #0
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004852:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b04      	cmp	r3, #4
 800485c:	d007      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0x32>
 800485e:	2b08      	cmp	r3, #8
 8004860:	d008      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x38>
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80b4 	bne.w	80049d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b5e      	ldr	r3, [pc, #376]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800486a:	60bb      	str	r3, [r7, #8]
       break;
 800486c:	e0b3      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486e:	4b5e      	ldr	r3, [pc, #376]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004870:	60bb      	str	r3, [r7, #8]
      break;
 8004872:	e0b0      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004874:	4b5a      	ldr	r3, [pc, #360]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487e:	4b58      	ldr	r3, [pc, #352]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04a      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	f04f 0400 	mov.w	r4, #0
 8004894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	ea03 0501 	and.w	r5, r3, r1
 80048a0:	ea04 0602 	and.w	r6, r4, r2
 80048a4:	4629      	mov	r1, r5
 80048a6:	4632      	mov	r2, r6
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	0154      	lsls	r4, r2, #5
 80048b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048b6:	014b      	lsls	r3, r1, #5
 80048b8:	4619      	mov	r1, r3
 80048ba:	4622      	mov	r2, r4
 80048bc:	1b49      	subs	r1, r1, r5
 80048be:	eb62 0206 	sbc.w	r2, r2, r6
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	0194      	lsls	r4, r2, #6
 80048cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048d0:	018b      	lsls	r3, r1, #6
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	eb64 0402 	sbc.w	r4, r4, r2
 80048d8:	f04f 0100 	mov.w	r1, #0
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	00e2      	lsls	r2, r4, #3
 80048e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048e6:	00d9      	lsls	r1, r3, #3
 80048e8:	460b      	mov	r3, r1
 80048ea:	4614      	mov	r4, r2
 80048ec:	195b      	adds	r3, r3, r5
 80048ee:	eb44 0406 	adc.w	r4, r4, r6
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	0262      	lsls	r2, r4, #9
 80048fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004900:	0259      	lsls	r1, r3, #9
 8004902:	460b      	mov	r3, r1
 8004904:	4614      	mov	r4, r2
 8004906:	4618      	mov	r0, r3
 8004908:	4621      	mov	r1, r4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	f7fb fcc4 	bl	80002a0 <__aeabi_uldivmod>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e049      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	ea03 0501 	and.w	r5, r3, r1
 8004936:	ea04 0602 	and.w	r6, r4, r2
 800493a:	4629      	mov	r1, r5
 800493c:	4632      	mov	r2, r6
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f04f 0400 	mov.w	r4, #0
 8004946:	0154      	lsls	r4, r2, #5
 8004948:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800494c:	014b      	lsls	r3, r1, #5
 800494e:	4619      	mov	r1, r3
 8004950:	4622      	mov	r2, r4
 8004952:	1b49      	subs	r1, r1, r5
 8004954:	eb62 0206 	sbc.w	r2, r2, r6
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	f04f 0400 	mov.w	r4, #0
 8004960:	0194      	lsls	r4, r2, #6
 8004962:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004966:	018b      	lsls	r3, r1, #6
 8004968:	1a5b      	subs	r3, r3, r1
 800496a:	eb64 0402 	sbc.w	r4, r4, r2
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800497c:	00d9      	lsls	r1, r3, #3
 800497e:	460b      	mov	r3, r1
 8004980:	4614      	mov	r4, r2
 8004982:	195b      	adds	r3, r3, r5
 8004984:	eb44 0406 	adc.w	r4, r4, r6
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	02a2      	lsls	r2, r4, #10
 8004992:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004996:	0299      	lsls	r1, r3, #10
 8004998:	460b      	mov	r3, r1
 800499a:	4614      	mov	r4, r2
 800499c:	4618      	mov	r0, r3
 800499e:	4621      	mov	r1, r4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	461a      	mov	r2, r3
 80049a8:	4623      	mov	r3, r4
 80049aa:	f7fb fc79 	bl	80002a0 <__aeabi_uldivmod>
 80049ae:	4603      	mov	r3, r0
 80049b0:	460c      	mov	r4, r1
 80049b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	60bb      	str	r3, [r7, #8]
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049d2:	60bb      	str	r3, [r7, #8]
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	68bb      	ldr	r3, [r7, #8]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e0:	40023800 	.word	0x40023800
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	007a1200 	.word	0x007a1200

080049ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000000 	.word	0x20000000

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a08:	f7ff fff0 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a0c:	4601      	mov	r1, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1a:	5cd3      	ldrb	r3, [r2, r3]
 8004a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40023800 	.word	0x40023800
 8004a28:	08006cbc 	.word	0x08006cbc

08004a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a30:	f7ff ffdc 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a34:	4601      	mov	r1, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0b5b      	lsrs	r3, r3, #13
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a42:	5cd3      	ldrb	r3, [r2, r3]
 8004a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	08006cbc 	.word	0x08006cbc

08004a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e01d      	b.n	8004aa2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fe ff22 	bl	80038c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f000 f850 	bl	8004b38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e02d      	b.n	8004b1a <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f825 	bl	8004b22 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 f824 	bl	8004b38 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0208 	bic.w	r2, r2, #8
 8004afe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a40      	ldr	r2, [pc, #256]	; (8004c4c <TIM_Base_SetConfig+0x114>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3d      	ldr	r2, [pc, #244]	; (8004c50 <TIM_Base_SetConfig+0x118>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3c      	ldr	r2, [pc, #240]	; (8004c54 <TIM_Base_SetConfig+0x11c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3b      	ldr	r2, [pc, #236]	; (8004c58 <TIM_Base_SetConfig+0x120>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <TIM_Base_SetConfig+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <TIM_Base_SetConfig+0x114>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d02b      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d027      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <TIM_Base_SetConfig+0x118>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d023      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2b      	ldr	r2, [pc, #172]	; (8004c54 <TIM_Base_SetConfig+0x11c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01f      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2a      	ldr	r2, [pc, #168]	; (8004c58 <TIM_Base_SetConfig+0x120>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01b      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <TIM_Base_SetConfig+0x124>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d017      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <TIM_Base_SetConfig+0x128>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <TIM_Base_SetConfig+0x12c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00f      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <TIM_Base_SetConfig+0x130>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <TIM_Base_SetConfig+0x134>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a24      	ldr	r2, [pc, #144]	; (8004c70 <TIM_Base_SetConfig+0x138>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <TIM_Base_SetConfig+0x13c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <TIM_Base_SetConfig+0x114>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0xf8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <TIM_Base_SetConfig+0x124>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	615a      	str	r2, [r3, #20]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40010400 	.word	0x40010400
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800
 8004c6c:	40001800 	.word	0x40001800
 8004c70:	40001c00 	.word	0x40001c00
 8004c74:	40002000 	.word	0x40002000

08004c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e03f      	b.n	8004d0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fe fe6c 	bl	800397c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2224      	movs	r2, #36	; 0x24
 8004ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fb97 	bl	80053f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af02      	add	r7, sp, #8
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	f040 8083 	bne.w	8004e3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_UART_Transmit+0x2e>
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e07b      	b.n	8004e3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Transmit+0x40>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e074      	b.n	8004e3c <HAL_UART_Transmit+0x12a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2221      	movs	r2, #33	; 0x21
 8004d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d68:	f7fe fefa 	bl	8003b60 <HAL_GetTick>
 8004d6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d82:	e042      	b.n	8004e0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	d122      	bne.n	8004de2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f9b6 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e042      	b.n	8004e3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	e017      	b.n	8004e0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	e013      	b.n	8004e0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f993 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e01f      	b.n	8004e3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	60ba      	str	r2, [r7, #8]
 8004e02:	781a      	ldrb	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1b7      	bne.n	8004d84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f97a 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e006      	b.n	8004e3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d140      	bne.n	8004ee0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_UART_Receive_IT+0x26>
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e039      	b.n	8004ee2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_UART_Receive_IT+0x38>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e032      	b.n	8004ee2 <HAL_UART_Receive_IT+0x9e>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2222      	movs	r2, #34	; 0x22
 8004ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0220 	orr.w	r2, r2, #32
 8004eda:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_UART_IRQHandler+0x52>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f9d6 	bl	80052ec <UART_Receive_IT>
      return;
 8004f40:	e0d1      	b.n	80050e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80b0 	beq.w	80050aa <HAL_UART_IRQHandler+0x1ba>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <HAL_UART_IRQHandler+0x70>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80a5 	beq.w	80050aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_UART_IRQHandler+0x90>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xb0>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	f043 0202 	orr.w	r2, r3, #2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xd0>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	f043 0204 	orr.w	r2, r3, #4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00f      	beq.n	8004fea <HAL_UART_IRQHandler+0xfa>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <HAL_UART_IRQHandler+0xee>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	f043 0208 	orr.w	r2, r3, #8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d078      	beq.n	80050e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_UART_IRQHandler+0x11c>
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f970 	bl	80052ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_UART_IRQHandler+0x144>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d031      	beq.n	8005098 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f8b9 	bl	80051ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d123      	bne.n	8005090 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005056:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d013      	beq.n	8005088 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005064:	4a21      	ldr	r2, [pc, #132]	; (80050ec <HAL_UART_IRQHandler+0x1fc>)
 8005066:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fe94 	bl	8003d9a <HAL_DMA_Abort_IT>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d016      	beq.n	80050a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005082:	4610      	mov	r0, r2
 8005084:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005086:	e00e      	b.n	80050a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f83b 	bl	8005104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508e:	e00a      	b.n	80050a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f837 	bl	8005104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005096:	e006      	b.n	80050a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f833 	bl	8005104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80050a4:	e01e      	b.n	80050e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a6:	bf00      	nop
    return;
 80050a8:	e01c      	b.n	80050e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1d6>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8a6 	bl	8005210 <UART_Transmit_IT>
    return;
 80050c4:	e00f      	b.n	80050e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_UART_IRQHandler+0x1f6>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f8ee 	bl	80052bc <UART_EndTransmit_IT>
    return;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80050e4:	bf00      	nop
  }
}
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	080051e9 	.word	0x080051e9

080050f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	e02c      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d028      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <UART_WaitOnFlagUntilTimeout+0x30>
 8005138:	f7fe fd12 	bl	8003b60 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	d21d      	bcs.n	8005184 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005156:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e00f      	b.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d0c3      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ff7e 	bl	8005104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b21      	cmp	r3, #33	; 0x21
 8005222:	d144      	bne.n	80052ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d11a      	bne.n	8005264 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005242:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	621a      	str	r2, [r3, #32]
 8005256:	e00e      	b.n	8005276 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]
 8005262:	e008      	b.n	8005276 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6211      	str	r1, [r2, #32]
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4619      	mov	r1, r3
 8005284:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff07 	bl	80050f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b22      	cmp	r3, #34	; 0x22
 80052fe:	d171      	bne.n	80053e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005308:	d123      	bne.n	8005352 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10e      	bne.n	8005336 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	1c9a      	adds	r2, r3, #2
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
 8005334:	e029      	b.n	800538a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	b29b      	uxth	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
 8005350:	e01b      	b.n	800538a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6858      	ldr	r0, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6291      	str	r1, [r2, #40]	; 0x28
 800536a:	b2c2      	uxtb	r2, r0
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e00c      	b.n	800538a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	1c58      	adds	r0, r3, #1
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	6288      	str	r0, [r1, #40]	; 0x28
 8005382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29b      	uxth	r3, r3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4619      	mov	r1, r3
 8005398:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800539a:	2b00      	cmp	r3, #0
 800539c:	d120      	bne.n	80053e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0220 	bic.w	r2, r2, #32
 80053ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fe fa96 	bl	8003908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e002      	b.n	80053e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005432:	f023 030c 	bic.w	r3, r3, #12
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	430b      	orrs	r3, r1
 800543e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	f040 818b 	bne.w	8005778 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4ac1      	ldr	r2, [pc, #772]	; (800576c <UART_SetConfig+0x37c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d005      	beq.n	8005478 <UART_SetConfig+0x88>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4abf      	ldr	r2, [pc, #764]	; (8005770 <UART_SetConfig+0x380>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f040 80bd 	bne.w	80055f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005478:	f7ff fad8 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 800547c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	461d      	mov	r5, r3
 8005482:	f04f 0600 	mov.w	r6, #0
 8005486:	46a8      	mov	r8, r5
 8005488:	46b1      	mov	r9, r6
 800548a:	eb18 0308 	adds.w	r3, r8, r8
 800548e:	eb49 0409 	adc.w	r4, r9, r9
 8005492:	4698      	mov	r8, r3
 8005494:	46a1      	mov	r9, r4
 8005496:	eb18 0805 	adds.w	r8, r8, r5
 800549a:	eb49 0906 	adc.w	r9, r9, r6
 800549e:	f04f 0100 	mov.w	r1, #0
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054b2:	4688      	mov	r8, r1
 80054b4:	4691      	mov	r9, r2
 80054b6:	eb18 0005 	adds.w	r0, r8, r5
 80054ba:	eb49 0106 	adc.w	r1, r9, r6
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	461d      	mov	r5, r3
 80054c4:	f04f 0600 	mov.w	r6, #0
 80054c8:	196b      	adds	r3, r5, r5
 80054ca:	eb46 0406 	adc.w	r4, r6, r6
 80054ce:	461a      	mov	r2, r3
 80054d0:	4623      	mov	r3, r4
 80054d2:	f7fa fee5 	bl	80002a0 <__aeabi_uldivmod>
 80054d6:	4603      	mov	r3, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	461a      	mov	r2, r3
 80054dc:	4ba5      	ldr	r3, [pc, #660]	; (8005774 <UART_SetConfig+0x384>)
 80054de:	fba3 2302 	umull	r2, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	461d      	mov	r5, r3
 80054ec:	f04f 0600 	mov.w	r6, #0
 80054f0:	46a9      	mov	r9, r5
 80054f2:	46b2      	mov	sl, r6
 80054f4:	eb19 0309 	adds.w	r3, r9, r9
 80054f8:	eb4a 040a 	adc.w	r4, sl, sl
 80054fc:	4699      	mov	r9, r3
 80054fe:	46a2      	mov	sl, r4
 8005500:	eb19 0905 	adds.w	r9, r9, r5
 8005504:	eb4a 0a06 	adc.w	sl, sl, r6
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800551c:	4689      	mov	r9, r1
 800551e:	4692      	mov	sl, r2
 8005520:	eb19 0005 	adds.w	r0, r9, r5
 8005524:	eb4a 0106 	adc.w	r1, sl, r6
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	461d      	mov	r5, r3
 800552e:	f04f 0600 	mov.w	r6, #0
 8005532:	196b      	adds	r3, r5, r5
 8005534:	eb46 0406 	adc.w	r4, r6, r6
 8005538:	461a      	mov	r2, r3
 800553a:	4623      	mov	r3, r4
 800553c:	f7fa feb0 	bl	80002a0 <__aeabi_uldivmod>
 8005540:	4603      	mov	r3, r0
 8005542:	460c      	mov	r4, r1
 8005544:	461a      	mov	r2, r3
 8005546:	4b8b      	ldr	r3, [pc, #556]	; (8005774 <UART_SetConfig+0x384>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	3332      	adds	r3, #50	; 0x32
 800555a:	4a86      	ldr	r2, [pc, #536]	; (8005774 <UART_SetConfig+0x384>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005568:	4498      	add	r8, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	461d      	mov	r5, r3
 800556e:	f04f 0600 	mov.w	r6, #0
 8005572:	46a9      	mov	r9, r5
 8005574:	46b2      	mov	sl, r6
 8005576:	eb19 0309 	adds.w	r3, r9, r9
 800557a:	eb4a 040a 	adc.w	r4, sl, sl
 800557e:	4699      	mov	r9, r3
 8005580:	46a2      	mov	sl, r4
 8005582:	eb19 0905 	adds.w	r9, r9, r5
 8005586:	eb4a 0a06 	adc.w	sl, sl, r6
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005596:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800559a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800559e:	4689      	mov	r9, r1
 80055a0:	4692      	mov	sl, r2
 80055a2:	eb19 0005 	adds.w	r0, r9, r5
 80055a6:	eb4a 0106 	adc.w	r1, sl, r6
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	461d      	mov	r5, r3
 80055b0:	f04f 0600 	mov.w	r6, #0
 80055b4:	196b      	adds	r3, r5, r5
 80055b6:	eb46 0406 	adc.w	r4, r6, r6
 80055ba:	461a      	mov	r2, r3
 80055bc:	4623      	mov	r3, r4
 80055be:	f7fa fe6f 	bl	80002a0 <__aeabi_uldivmod>
 80055c2:	4603      	mov	r3, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b6a      	ldr	r3, [pc, #424]	; (8005774 <UART_SetConfig+0x384>)
 80055ca:	fba3 1302 	umull	r1, r3, r3, r2
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2164      	movs	r1, #100	; 0x64
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	3332      	adds	r3, #50	; 0x32
 80055dc:	4a65      	ldr	r2, [pc, #404]	; (8005774 <UART_SetConfig+0x384>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	f003 0207 	and.w	r2, r3, #7
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4442      	add	r2, r8
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e26f      	b.n	8005ad2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055f2:	f7ff fa07 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 80055f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	461d      	mov	r5, r3
 80055fc:	f04f 0600 	mov.w	r6, #0
 8005600:	46a8      	mov	r8, r5
 8005602:	46b1      	mov	r9, r6
 8005604:	eb18 0308 	adds.w	r3, r8, r8
 8005608:	eb49 0409 	adc.w	r4, r9, r9
 800560c:	4698      	mov	r8, r3
 800560e:	46a1      	mov	r9, r4
 8005610:	eb18 0805 	adds.w	r8, r8, r5
 8005614:	eb49 0906 	adc.w	r9, r9, r6
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005624:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005628:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800562c:	4688      	mov	r8, r1
 800562e:	4691      	mov	r9, r2
 8005630:	eb18 0005 	adds.w	r0, r8, r5
 8005634:	eb49 0106 	adc.w	r1, r9, r6
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	461d      	mov	r5, r3
 800563e:	f04f 0600 	mov.w	r6, #0
 8005642:	196b      	adds	r3, r5, r5
 8005644:	eb46 0406 	adc.w	r4, r6, r6
 8005648:	461a      	mov	r2, r3
 800564a:	4623      	mov	r3, r4
 800564c:	f7fa fe28 	bl	80002a0 <__aeabi_uldivmod>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	461a      	mov	r2, r3
 8005656:	4b47      	ldr	r3, [pc, #284]	; (8005774 <UART_SetConfig+0x384>)
 8005658:	fba3 2302 	umull	r2, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	461d      	mov	r5, r3
 8005666:	f04f 0600 	mov.w	r6, #0
 800566a:	46a9      	mov	r9, r5
 800566c:	46b2      	mov	sl, r6
 800566e:	eb19 0309 	adds.w	r3, r9, r9
 8005672:	eb4a 040a 	adc.w	r4, sl, sl
 8005676:	4699      	mov	r9, r3
 8005678:	46a2      	mov	sl, r4
 800567a:	eb19 0905 	adds.w	r9, r9, r5
 800567e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800568e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005692:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005696:	4689      	mov	r9, r1
 8005698:	4692      	mov	sl, r2
 800569a:	eb19 0005 	adds.w	r0, r9, r5
 800569e:	eb4a 0106 	adc.w	r1, sl, r6
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	461d      	mov	r5, r3
 80056a8:	f04f 0600 	mov.w	r6, #0
 80056ac:	196b      	adds	r3, r5, r5
 80056ae:	eb46 0406 	adc.w	r4, r6, r6
 80056b2:	461a      	mov	r2, r3
 80056b4:	4623      	mov	r3, r4
 80056b6:	f7fa fdf3 	bl	80002a0 <__aeabi_uldivmod>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	461a      	mov	r2, r3
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <UART_SetConfig+0x384>)
 80056c2:	fba3 1302 	umull	r1, r3, r3, r2
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2164      	movs	r1, #100	; 0x64
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	3332      	adds	r3, #50	; 0x32
 80056d4:	4a27      	ldr	r2, [pc, #156]	; (8005774 <UART_SetConfig+0x384>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056e2:	4498      	add	r8, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	461d      	mov	r5, r3
 80056e8:	f04f 0600 	mov.w	r6, #0
 80056ec:	46a9      	mov	r9, r5
 80056ee:	46b2      	mov	sl, r6
 80056f0:	eb19 0309 	adds.w	r3, r9, r9
 80056f4:	eb4a 040a 	adc.w	r4, sl, sl
 80056f8:	4699      	mov	r9, r3
 80056fa:	46a2      	mov	sl, r4
 80056fc:	eb19 0905 	adds.w	r9, r9, r5
 8005700:	eb4a 0a06 	adc.w	sl, sl, r6
 8005704:	f04f 0100 	mov.w	r1, #0
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005718:	4689      	mov	r9, r1
 800571a:	4692      	mov	sl, r2
 800571c:	eb19 0005 	adds.w	r0, r9, r5
 8005720:	eb4a 0106 	adc.w	r1, sl, r6
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	461d      	mov	r5, r3
 800572a:	f04f 0600 	mov.w	r6, #0
 800572e:	196b      	adds	r3, r5, r5
 8005730:	eb46 0406 	adc.w	r4, r6, r6
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	f7fa fdb2 	bl	80002a0 <__aeabi_uldivmod>
 800573c:	4603      	mov	r3, r0
 800573e:	460c      	mov	r4, r1
 8005740:	461a      	mov	r2, r3
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <UART_SetConfig+0x384>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	; 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	4a07      	ldr	r2, [pc, #28]	; (8005774 <UART_SetConfig+0x384>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 0207 	and.w	r2, r3, #7
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4442      	add	r2, r8
 8005768:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800576a:	e1b2      	b.n	8005ad2 <UART_SetConfig+0x6e2>
 800576c:	40011000 	.word	0x40011000
 8005770:	40011400 	.word	0x40011400
 8005774:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4ad7      	ldr	r2, [pc, #860]	; (8005adc <UART_SetConfig+0x6ec>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d005      	beq.n	800578e <UART_SetConfig+0x39e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4ad6      	ldr	r2, [pc, #856]	; (8005ae0 <UART_SetConfig+0x6f0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	f040 80d1 	bne.w	8005930 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800578e:	f7ff f94d 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8005792:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	469a      	mov	sl, r3
 8005798:	f04f 0b00 	mov.w	fp, #0
 800579c:	46d0      	mov	r8, sl
 800579e:	46d9      	mov	r9, fp
 80057a0:	eb18 0308 	adds.w	r3, r8, r8
 80057a4:	eb49 0409 	adc.w	r4, r9, r9
 80057a8:	4698      	mov	r8, r3
 80057aa:	46a1      	mov	r9, r4
 80057ac:	eb18 080a 	adds.w	r8, r8, sl
 80057b0:	eb49 090b 	adc.w	r9, r9, fp
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057c8:	4688      	mov	r8, r1
 80057ca:	4691      	mov	r9, r2
 80057cc:	eb1a 0508 	adds.w	r5, sl, r8
 80057d0:	eb4b 0609 	adc.w	r6, fp, r9
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4619      	mov	r1, r3
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	f04f 0400 	mov.w	r4, #0
 80057e6:	0094      	lsls	r4, r2, #2
 80057e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057ec:	008b      	lsls	r3, r1, #2
 80057ee:	461a      	mov	r2, r3
 80057f0:	4623      	mov	r3, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	4631      	mov	r1, r6
 80057f6:	f7fa fd53 	bl	80002a0 <__aeabi_uldivmod>
 80057fa:	4603      	mov	r3, r0
 80057fc:	460c      	mov	r4, r1
 80057fe:	461a      	mov	r2, r3
 8005800:	4bb8      	ldr	r3, [pc, #736]	; (8005ae4 <UART_SetConfig+0x6f4>)
 8005802:	fba3 2302 	umull	r2, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	469b      	mov	fp, r3
 8005810:	f04f 0c00 	mov.w	ip, #0
 8005814:	46d9      	mov	r9, fp
 8005816:	46e2      	mov	sl, ip
 8005818:	eb19 0309 	adds.w	r3, r9, r9
 800581c:	eb4a 040a 	adc.w	r4, sl, sl
 8005820:	4699      	mov	r9, r3
 8005822:	46a2      	mov	sl, r4
 8005824:	eb19 090b 	adds.w	r9, r9, fp
 8005828:	eb4a 0a0c 	adc.w	sl, sl, ip
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005838:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800583c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005840:	4689      	mov	r9, r1
 8005842:	4692      	mov	sl, r2
 8005844:	eb1b 0509 	adds.w	r5, fp, r9
 8005848:	eb4c 060a 	adc.w	r6, ip, sl
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	f04f 0400 	mov.w	r4, #0
 800585e:	0094      	lsls	r4, r2, #2
 8005860:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005864:	008b      	lsls	r3, r1, #2
 8005866:	461a      	mov	r2, r3
 8005868:	4623      	mov	r3, r4
 800586a:	4628      	mov	r0, r5
 800586c:	4631      	mov	r1, r6
 800586e:	f7fa fd17 	bl	80002a0 <__aeabi_uldivmod>
 8005872:	4603      	mov	r3, r0
 8005874:	460c      	mov	r4, r1
 8005876:	461a      	mov	r2, r3
 8005878:	4b9a      	ldr	r3, [pc, #616]	; (8005ae4 <UART_SetConfig+0x6f4>)
 800587a:	fba3 1302 	umull	r1, r3, r3, r2
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	2164      	movs	r1, #100	; 0x64
 8005882:	fb01 f303 	mul.w	r3, r1, r3
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	3332      	adds	r3, #50	; 0x32
 800588c:	4a95      	ldr	r2, [pc, #596]	; (8005ae4 <UART_SetConfig+0x6f4>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005898:	4498      	add	r8, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	469b      	mov	fp, r3
 800589e:	f04f 0c00 	mov.w	ip, #0
 80058a2:	46d9      	mov	r9, fp
 80058a4:	46e2      	mov	sl, ip
 80058a6:	eb19 0309 	adds.w	r3, r9, r9
 80058aa:	eb4a 040a 	adc.w	r4, sl, sl
 80058ae:	4699      	mov	r9, r3
 80058b0:	46a2      	mov	sl, r4
 80058b2:	eb19 090b 	adds.w	r9, r9, fp
 80058b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ce:	4689      	mov	r9, r1
 80058d0:	4692      	mov	sl, r2
 80058d2:	eb1b 0509 	adds.w	r5, fp, r9
 80058d6:	eb4c 060a 	adc.w	r6, ip, sl
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4619      	mov	r1, r3
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	0094      	lsls	r4, r2, #2
 80058ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058f2:	008b      	lsls	r3, r1, #2
 80058f4:	461a      	mov	r2, r3
 80058f6:	4623      	mov	r3, r4
 80058f8:	4628      	mov	r0, r5
 80058fa:	4631      	mov	r1, r6
 80058fc:	f7fa fcd0 	bl	80002a0 <__aeabi_uldivmod>
 8005900:	4603      	mov	r3, r0
 8005902:	460c      	mov	r4, r1
 8005904:	461a      	mov	r2, r3
 8005906:	4b77      	ldr	r3, [pc, #476]	; (8005ae4 <UART_SetConfig+0x6f4>)
 8005908:	fba3 1302 	umull	r1, r3, r3, r2
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	2164      	movs	r1, #100	; 0x64
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	3332      	adds	r3, #50	; 0x32
 800591a:	4a72      	ldr	r2, [pc, #456]	; (8005ae4 <UART_SetConfig+0x6f4>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	f003 020f 	and.w	r2, r3, #15
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4442      	add	r2, r8
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	e0d0      	b.n	8005ad2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7ff f868 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8005934:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	469a      	mov	sl, r3
 800593a:	f04f 0b00 	mov.w	fp, #0
 800593e:	46d0      	mov	r8, sl
 8005940:	46d9      	mov	r9, fp
 8005942:	eb18 0308 	adds.w	r3, r8, r8
 8005946:	eb49 0409 	adc.w	r4, r9, r9
 800594a:	4698      	mov	r8, r3
 800594c:	46a1      	mov	r9, r4
 800594e:	eb18 080a 	adds.w	r8, r8, sl
 8005952:	eb49 090b 	adc.w	r9, r9, fp
 8005956:	f04f 0100 	mov.w	r1, #0
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005962:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005966:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800596a:	4688      	mov	r8, r1
 800596c:	4691      	mov	r9, r2
 800596e:	eb1a 0508 	adds.w	r5, sl, r8
 8005972:	eb4b 0609 	adc.w	r6, fp, r9
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4619      	mov	r1, r3
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	0094      	lsls	r4, r2, #2
 800598a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800598e:	008b      	lsls	r3, r1, #2
 8005990:	461a      	mov	r2, r3
 8005992:	4623      	mov	r3, r4
 8005994:	4628      	mov	r0, r5
 8005996:	4631      	mov	r1, r6
 8005998:	f7fa fc82 	bl	80002a0 <__aeabi_uldivmod>
 800599c:	4603      	mov	r3, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	461a      	mov	r2, r3
 80059a2:	4b50      	ldr	r3, [pc, #320]	; (8005ae4 <UART_SetConfig+0x6f4>)
 80059a4:	fba3 2302 	umull	r2, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	469b      	mov	fp, r3
 80059b2:	f04f 0c00 	mov.w	ip, #0
 80059b6:	46d9      	mov	r9, fp
 80059b8:	46e2      	mov	sl, ip
 80059ba:	eb19 0309 	adds.w	r3, r9, r9
 80059be:	eb4a 040a 	adc.w	r4, sl, sl
 80059c2:	4699      	mov	r9, r3
 80059c4:	46a2      	mov	sl, r4
 80059c6:	eb19 090b 	adds.w	r9, r9, fp
 80059ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059e2:	4689      	mov	r9, r1
 80059e4:	4692      	mov	sl, r2
 80059e6:	eb1b 0509 	adds.w	r5, fp, r9
 80059ea:	eb4c 060a 	adc.w	r6, ip, sl
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4619      	mov	r1, r3
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	0094      	lsls	r4, r2, #2
 8005a02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a06:	008b      	lsls	r3, r1, #2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	4631      	mov	r1, r6
 8005a10:	f7fa fc46 	bl	80002a0 <__aeabi_uldivmod>
 8005a14:	4603      	mov	r3, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b32      	ldr	r3, [pc, #200]	; (8005ae4 <UART_SetConfig+0x6f4>)
 8005a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	2164      	movs	r1, #100	; 0x64
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	3332      	adds	r3, #50	; 0x32
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <UART_SetConfig+0x6f4>)
 8005a30:	fba2 2303 	umull	r2, r3, r2, r3
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a3a:	4498      	add	r8, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	469b      	mov	fp, r3
 8005a40:	f04f 0c00 	mov.w	ip, #0
 8005a44:	46d9      	mov	r9, fp
 8005a46:	46e2      	mov	sl, ip
 8005a48:	eb19 0309 	adds.w	r3, r9, r9
 8005a4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a50:	4699      	mov	r9, r3
 8005a52:	46a2      	mov	sl, r4
 8005a54:	eb19 090b 	adds.w	r9, r9, fp
 8005a58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a5c:	f04f 0100 	mov.w	r1, #0
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a70:	4689      	mov	r9, r1
 8005a72:	4692      	mov	sl, r2
 8005a74:	eb1b 0509 	adds.w	r5, fp, r9
 8005a78:	eb4c 060a 	adc.w	r6, ip, sl
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4619      	mov	r1, r3
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f04f 0400 	mov.w	r4, #0
 8005a8e:	0094      	lsls	r4, r2, #2
 8005a90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a94:	008b      	lsls	r3, r1, #2
 8005a96:	461a      	mov	r2, r3
 8005a98:	4623      	mov	r3, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	f7fa fbff 	bl	80002a0 <__aeabi_uldivmod>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <UART_SetConfig+0x6f4>)
 8005aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	2164      	movs	r1, #100	; 0x64
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	3332      	adds	r3, #50	; 0x32
 8005abc:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <UART_SetConfig+0x6f4>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	f003 020f 	and.w	r2, r3, #15
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4442      	add	r2, r8
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	e7ff      	b.n	8005ad2 <UART_SetConfig+0x6e2>
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	40011400 	.word	0x40011400
 8005ae4:	51eb851f 	.word	0x51eb851f

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4e0d      	ldr	r6, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1ba4      	subs	r4, r4, r6
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2500      	movs	r5, #0
 8005b00:	42a5      	cmp	r5, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4e0b      	ldr	r6, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f000 ffa4 	bl	8006a54 <_init>
 8005b0c:	1ba4      	subs	r4, r4, r6
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2500      	movs	r5, #0
 8005b12:	42a5      	cmp	r5, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b1c:	4798      	blx	r3
 8005b1e:	3501      	adds	r5, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b26:	4798      	blx	r3
 8005b28:	3501      	adds	r5, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	08006e70 	.word	0x08006e70
 8005b30:	08006e70 	.word	0x08006e70
 8005b34:	08006e70 	.word	0x08006e70
 8005b38:	08006e74 	.word	0x08006e74

08005b3c <__locale_ctype_ptr>:
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <__locale_ctype_ptr+0x14>)
 8005b3e:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <__locale_ctype_ptr+0x18>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf08      	it	eq
 8005b48:	4613      	moveq	r3, r2
 8005b4a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005b4e:	4770      	bx	lr
 8005b50:	2000000c 	.word	0x2000000c
 8005b54:	20000070 	.word	0x20000070

08005b58 <__ascii_mbtowc>:
 8005b58:	b082      	sub	sp, #8
 8005b5a:	b901      	cbnz	r1, 8005b5e <__ascii_mbtowc+0x6>
 8005b5c:	a901      	add	r1, sp, #4
 8005b5e:	b142      	cbz	r2, 8005b72 <__ascii_mbtowc+0x1a>
 8005b60:	b14b      	cbz	r3, 8005b76 <__ascii_mbtowc+0x1e>
 8005b62:	7813      	ldrb	r3, [r2, #0]
 8005b64:	600b      	str	r3, [r1, #0]
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	1c10      	adds	r0, r2, #0
 8005b6a:	bf18      	it	ne
 8005b6c:	2001      	movne	r0, #1
 8005b6e:	b002      	add	sp, #8
 8005b70:	4770      	bx	lr
 8005b72:	4610      	mov	r0, r2
 8005b74:	e7fb      	b.n	8005b6e <__ascii_mbtowc+0x16>
 8005b76:	f06f 0001 	mvn.w	r0, #1
 8005b7a:	e7f8      	b.n	8005b6e <__ascii_mbtowc+0x16>

08005b7c <memset>:
 8005b7c:	4402      	add	r2, r0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <iprintf>:
 8005b8c:	b40f      	push	{r0, r1, r2, r3}
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <iprintf+0x2c>)
 8005b90:	b513      	push	{r0, r1, r4, lr}
 8005b92:	681c      	ldr	r4, [r3, #0]
 8005b94:	b124      	cbz	r4, 8005ba0 <iprintf+0x14>
 8005b96:	69a3      	ldr	r3, [r4, #24]
 8005b98:	b913      	cbnz	r3, 8005ba0 <iprintf+0x14>
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 f8c6 	bl	8005d2c <__sinit>
 8005ba0:	ab05      	add	r3, sp, #20
 8005ba2:	9a04      	ldr	r2, [sp, #16]
 8005ba4:	68a1      	ldr	r1, [r4, #8]
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 fa23 	bl	8005ff4 <_vfiprintf_r>
 8005bae:	b002      	add	sp, #8
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	b004      	add	sp, #16
 8005bb6:	4770      	bx	lr
 8005bb8:	2000000c 	.word	0x2000000c

08005bbc <strtok>:
 8005bbc:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <strtok+0x50>)
 8005bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	681d      	ldr	r5, [r3, #0]
 8005bc4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	b9b4      	cbnz	r4, 8005bfa <strtok+0x3e>
 8005bcc:	2050      	movs	r0, #80	; 0x50
 8005bce:	f000 f937 	bl	8005e40 <malloc>
 8005bd2:	65a8      	str	r0, [r5, #88]	; 0x58
 8005bd4:	e9c0 4400 	strd	r4, r4, [r0]
 8005bd8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bdc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005be0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005be4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005be8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bec:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005bf0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005bf4:	6184      	str	r4, [r0, #24]
 8005bf6:	7704      	strb	r4, [r0, #28]
 8005bf8:	6244      	str	r4, [r0, #36]	; 0x24
 8005bfa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	4630      	mov	r0, r6
 8005c00:	2301      	movs	r3, #1
 8005c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	f000 b803 	b.w	8005c10 <__strtok_r>
 8005c0a:	bf00      	nop
 8005c0c:	2000000c 	.word	0x2000000c

08005c10 <__strtok_r>:
 8005c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c12:	b918      	cbnz	r0, 8005c1c <__strtok_r+0xc>
 8005c14:	6810      	ldr	r0, [r2, #0]
 8005c16:	b908      	cbnz	r0, 8005c1c <__strtok_r+0xc>
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460f      	mov	r7, r1
 8005c20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c24:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c28:	b91e      	cbnz	r6, 8005c32 <__strtok_r+0x22>
 8005c2a:	b96d      	cbnz	r5, 8005c48 <__strtok_r+0x38>
 8005c2c:	6015      	str	r5, [r2, #0]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	e7f2      	b.n	8005c18 <__strtok_r+0x8>
 8005c32:	42b5      	cmp	r5, r6
 8005c34:	d1f6      	bne.n	8005c24 <__strtok_r+0x14>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ef      	bne.n	8005c1a <__strtok_r+0xa>
 8005c3a:	6014      	str	r4, [r2, #0]
 8005c3c:	7003      	strb	r3, [r0, #0]
 8005c3e:	e7eb      	b.n	8005c18 <__strtok_r+0x8>
 8005c40:	462b      	mov	r3, r5
 8005c42:	e00d      	b.n	8005c60 <__strtok_r+0x50>
 8005c44:	b926      	cbnz	r6, 8005c50 <__strtok_r+0x40>
 8005c46:	461c      	mov	r4, r3
 8005c48:	4623      	mov	r3, r4
 8005c4a:	460f      	mov	r7, r1
 8005c4c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005c50:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c54:	42b5      	cmp	r5, r6
 8005c56:	d1f5      	bne.n	8005c44 <__strtok_r+0x34>
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	d0f1      	beq.n	8005c40 <__strtok_r+0x30>
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	7021      	strb	r1, [r4, #0]
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e7d9      	b.n	8005c18 <__strtok_r+0x8>

08005c64 <viprintf>:
 8005c64:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <viprintf+0x28>)
 8005c66:	b570      	push	{r4, r5, r6, lr}
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	460e      	mov	r6, r1
 8005c6e:	b124      	cbz	r4, 8005c7a <viprintf+0x16>
 8005c70:	69a3      	ldr	r3, [r4, #24]
 8005c72:	b913      	cbnz	r3, 8005c7a <viprintf+0x16>
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 f859 	bl	8005d2c <__sinit>
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	68a1      	ldr	r1, [r4, #8]
 8005c80:	4620      	mov	r0, r4
 8005c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c86:	f000 b9b5 	b.w	8005ff4 <_vfiprintf_r>
 8005c8a:	bf00      	nop
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <__ascii_wctomb>:
 8005c90:	b149      	cbz	r1, 8005ca6 <__ascii_wctomb+0x16>
 8005c92:	2aff      	cmp	r2, #255	; 0xff
 8005c94:	bf85      	ittet	hi
 8005c96:	238a      	movhi	r3, #138	; 0x8a
 8005c98:	6003      	strhi	r3, [r0, #0]
 8005c9a:	700a      	strbls	r2, [r1, #0]
 8005c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ca0:	bf98      	it	ls
 8005ca2:	2001      	movls	r0, #1
 8005ca4:	4770      	bx	lr
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4770      	bx	lr
	...

08005cac <std>:
 8005cac:	2300      	movs	r3, #0
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb6:	6083      	str	r3, [r0, #8]
 8005cb8:	8181      	strh	r1, [r0, #12]
 8005cba:	6643      	str	r3, [r0, #100]	; 0x64
 8005cbc:	81c2      	strh	r2, [r0, #14]
 8005cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cc2:	6183      	str	r3, [r0, #24]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	305c      	adds	r0, #92	; 0x5c
 8005cca:	f7ff ff57 	bl	8005b7c <memset>
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <std+0x38>)
 8005cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <std+0x3c>)
 8005cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x40>)
 8005cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <std+0x44>)
 8005cdc:	6224      	str	r4, [r4, #32]
 8005cde:	6323      	str	r3, [r4, #48]	; 0x30
 8005ce0:	bd10      	pop	{r4, pc}
 8005ce2:	bf00      	nop
 8005ce4:	08006551 	.word	0x08006551
 8005ce8:	08006573 	.word	0x08006573
 8005cec:	080065ab 	.word	0x080065ab
 8005cf0:	080065cf 	.word	0x080065cf

08005cf4 <_cleanup_r>:
 8005cf4:	4901      	ldr	r1, [pc, #4]	; (8005cfc <_cleanup_r+0x8>)
 8005cf6:	f000 b885 	b.w	8005e04 <_fwalk_reent>
 8005cfa:	bf00      	nop
 8005cfc:	080068a9 	.word	0x080068a9

08005d00 <__sfmoreglue>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	1e4a      	subs	r2, r1, #1
 8005d04:	2568      	movs	r5, #104	; 0x68
 8005d06:	4355      	muls	r5, r2
 8005d08:	460e      	mov	r6, r1
 8005d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d0e:	f000 f8ed 	bl	8005eec <_malloc_r>
 8005d12:	4604      	mov	r4, r0
 8005d14:	b140      	cbz	r0, 8005d28 <__sfmoreglue+0x28>
 8005d16:	2100      	movs	r1, #0
 8005d18:	e9c0 1600 	strd	r1, r6, [r0]
 8005d1c:	300c      	adds	r0, #12
 8005d1e:	60a0      	str	r0, [r4, #8]
 8005d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d24:	f7ff ff2a 	bl	8005b7c <memset>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}

08005d2c <__sinit>:
 8005d2c:	6983      	ldr	r3, [r0, #24]
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	4604      	mov	r4, r0
 8005d32:	bb33      	cbnz	r3, 8005d82 <__sinit+0x56>
 8005d34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d38:	6503      	str	r3, [r0, #80]	; 0x50
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <__sinit+0x58>)
 8005d3c:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <__sinit+0x5c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6282      	str	r2, [r0, #40]	; 0x28
 8005d42:	4298      	cmp	r0, r3
 8005d44:	bf04      	itt	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	6183      	streq	r3, [r0, #24]
 8005d4a:	f000 f81f 	bl	8005d8c <__sfp>
 8005d4e:	6060      	str	r0, [r4, #4]
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 f81b 	bl	8005d8c <__sfp>
 8005d56:	60a0      	str	r0, [r4, #8]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 f817 	bl	8005d8c <__sfp>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	60e0      	str	r0, [r4, #12]
 8005d62:	2104      	movs	r1, #4
 8005d64:	6860      	ldr	r0, [r4, #4]
 8005d66:	f7ff ffa1 	bl	8005cac <std>
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	2109      	movs	r1, #9
 8005d6e:	68a0      	ldr	r0, [r4, #8]
 8005d70:	f7ff ff9c 	bl	8005cac <std>
 8005d74:	2202      	movs	r2, #2
 8005d76:	2112      	movs	r1, #18
 8005d78:	68e0      	ldr	r0, [r4, #12]
 8005d7a:	f7ff ff97 	bl	8005cac <std>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61a3      	str	r3, [r4, #24]
 8005d82:	bd10      	pop	{r4, pc}
 8005d84:	08006cc4 	.word	0x08006cc4
 8005d88:	08005cf5 	.word	0x08005cf5

08005d8c <__sfp>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <__sfp+0x70>)
 8005d90:	681e      	ldr	r6, [r3, #0]
 8005d92:	69b3      	ldr	r3, [r6, #24]
 8005d94:	4607      	mov	r7, r0
 8005d96:	b913      	cbnz	r3, 8005d9e <__sfp+0x12>
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f7ff ffc7 	bl	8005d2c <__sinit>
 8005d9e:	3648      	adds	r6, #72	; 0x48
 8005da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	d503      	bpl.n	8005db0 <__sfp+0x24>
 8005da8:	6833      	ldr	r3, [r6, #0]
 8005daa:	b133      	cbz	r3, 8005dba <__sfp+0x2e>
 8005dac:	6836      	ldr	r6, [r6, #0]
 8005dae:	e7f7      	b.n	8005da0 <__sfp+0x14>
 8005db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005db4:	b16d      	cbz	r5, 8005dd2 <__sfp+0x46>
 8005db6:	3468      	adds	r4, #104	; 0x68
 8005db8:	e7f4      	b.n	8005da4 <__sfp+0x18>
 8005dba:	2104      	movs	r1, #4
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f7ff ff9f 	bl	8005d00 <__sfmoreglue>
 8005dc2:	6030      	str	r0, [r6, #0]
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1f1      	bne.n	8005dac <__sfp+0x20>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4604      	mov	r4, r0
 8005dce:	4620      	mov	r0, r4
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <__sfp+0x74>)
 8005dd4:	6665      	str	r5, [r4, #100]	; 0x64
 8005dd6:	e9c4 5500 	strd	r5, r5, [r4]
 8005dda:	60a5      	str	r5, [r4, #8]
 8005ddc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005de0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005de4:	2208      	movs	r2, #8
 8005de6:	4629      	mov	r1, r5
 8005de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dec:	f7ff fec6 	bl	8005b7c <memset>
 8005df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005df8:	e7e9      	b.n	8005dce <__sfp+0x42>
 8005dfa:	bf00      	nop
 8005dfc:	08006cc4 	.word	0x08006cc4
 8005e00:	ffff0001 	.word	0xffff0001

08005e04 <_fwalk_reent>:
 8005e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e10:	2600      	movs	r6, #0
 8005e12:	b914      	cbnz	r4, 8005e1a <_fwalk_reent+0x16>
 8005e14:	4630      	mov	r0, r6
 8005e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e1e:	3f01      	subs	r7, #1
 8005e20:	d501      	bpl.n	8005e26 <_fwalk_reent+0x22>
 8005e22:	6824      	ldr	r4, [r4, #0]
 8005e24:	e7f5      	b.n	8005e12 <_fwalk_reent+0xe>
 8005e26:	89ab      	ldrh	r3, [r5, #12]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d907      	bls.n	8005e3c <_fwalk_reent+0x38>
 8005e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e30:	3301      	adds	r3, #1
 8005e32:	d003      	beq.n	8005e3c <_fwalk_reent+0x38>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4640      	mov	r0, r8
 8005e38:	47c8      	blx	r9
 8005e3a:	4306      	orrs	r6, r0
 8005e3c:	3568      	adds	r5, #104	; 0x68
 8005e3e:	e7ee      	b.n	8005e1e <_fwalk_reent+0x1a>

08005e40 <malloc>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	; (8005e4c <malloc+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f000 b851 	b.w	8005eec <_malloc_r>
 8005e4a:	bf00      	nop
 8005e4c:	2000000c 	.word	0x2000000c

08005e50 <_free_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4605      	mov	r5, r0
 8005e54:	2900      	cmp	r1, #0
 8005e56:	d045      	beq.n	8005ee4 <_free_r+0x94>
 8005e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e5c:	1f0c      	subs	r4, r1, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bfb8      	it	lt
 8005e62:	18e4      	addlt	r4, r4, r3
 8005e64:	f000 fdc0 	bl	80069e8 <__malloc_lock>
 8005e68:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <_free_r+0x98>)
 8005e6a:	6813      	ldr	r3, [r2, #0]
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	b933      	cbnz	r3, 8005e7e <_free_r+0x2e>
 8005e70:	6063      	str	r3, [r4, #4]
 8005e72:	6014      	str	r4, [r2, #0]
 8005e74:	4628      	mov	r0, r5
 8005e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e7a:	f000 bdb6 	b.w	80069ea <__malloc_unlock>
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	d90c      	bls.n	8005e9c <_free_r+0x4c>
 8005e82:	6821      	ldr	r1, [r4, #0]
 8005e84:	1862      	adds	r2, r4, r1
 8005e86:	4293      	cmp	r3, r2
 8005e88:	bf04      	itt	eq
 8005e8a:	681a      	ldreq	r2, [r3, #0]
 8005e8c:	685b      	ldreq	r3, [r3, #4]
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	bf04      	itt	eq
 8005e92:	1852      	addeq	r2, r2, r1
 8005e94:	6022      	streq	r2, [r4, #0]
 8005e96:	6004      	str	r4, [r0, #0]
 8005e98:	e7ec      	b.n	8005e74 <_free_r+0x24>
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	b10a      	cbz	r2, 8005ea4 <_free_r+0x54>
 8005ea0:	42a2      	cmp	r2, r4
 8005ea2:	d9fa      	bls.n	8005e9a <_free_r+0x4a>
 8005ea4:	6819      	ldr	r1, [r3, #0]
 8005ea6:	1858      	adds	r0, r3, r1
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d10b      	bne.n	8005ec4 <_free_r+0x74>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	4401      	add	r1, r0
 8005eb0:	1858      	adds	r0, r3, r1
 8005eb2:	4282      	cmp	r2, r0
 8005eb4:	6019      	str	r1, [r3, #0]
 8005eb6:	d1dd      	bne.n	8005e74 <_free_r+0x24>
 8005eb8:	6810      	ldr	r0, [r2, #0]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	4401      	add	r1, r0
 8005ec0:	6019      	str	r1, [r3, #0]
 8005ec2:	e7d7      	b.n	8005e74 <_free_r+0x24>
 8005ec4:	d902      	bls.n	8005ecc <_free_r+0x7c>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	e7d3      	b.n	8005e74 <_free_r+0x24>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	1821      	adds	r1, r4, r0
 8005ed0:	428a      	cmp	r2, r1
 8005ed2:	bf04      	itt	eq
 8005ed4:	6811      	ldreq	r1, [r2, #0]
 8005ed6:	6852      	ldreq	r2, [r2, #4]
 8005ed8:	6062      	str	r2, [r4, #4]
 8005eda:	bf04      	itt	eq
 8005edc:	1809      	addeq	r1, r1, r0
 8005ede:	6021      	streq	r1, [r4, #0]
 8005ee0:	605c      	str	r4, [r3, #4]
 8005ee2:	e7c7      	b.n	8005e74 <_free_r+0x24>
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200142b8 	.word	0x200142b8

08005eec <_malloc_r>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	1ccd      	adds	r5, r1, #3
 8005ef0:	f025 0503 	bic.w	r5, r5, #3
 8005ef4:	3508      	adds	r5, #8
 8005ef6:	2d0c      	cmp	r5, #12
 8005ef8:	bf38      	it	cc
 8005efa:	250c      	movcc	r5, #12
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	4606      	mov	r6, r0
 8005f00:	db01      	blt.n	8005f06 <_malloc_r+0x1a>
 8005f02:	42a9      	cmp	r1, r5
 8005f04:	d903      	bls.n	8005f0e <_malloc_r+0x22>
 8005f06:	230c      	movs	r3, #12
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	f000 fd6b 	bl	80069e8 <__malloc_lock>
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <_malloc_r+0xac>)
 8005f14:	6814      	ldr	r4, [r2, #0]
 8005f16:	4621      	mov	r1, r4
 8005f18:	b991      	cbnz	r1, 8005f40 <_malloc_r+0x54>
 8005f1a:	4c20      	ldr	r4, [pc, #128]	; (8005f9c <_malloc_r+0xb0>)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	b91b      	cbnz	r3, 8005f28 <_malloc_r+0x3c>
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 fb05 	bl	8006530 <_sbrk_r>
 8005f26:	6020      	str	r0, [r4, #0]
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f000 fb00 	bl	8006530 <_sbrk_r>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d124      	bne.n	8005f7e <_malloc_r+0x92>
 8005f34:	230c      	movs	r3, #12
 8005f36:	6033      	str	r3, [r6, #0]
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f000 fd56 	bl	80069ea <__malloc_unlock>
 8005f3e:	e7e4      	b.n	8005f0a <_malloc_r+0x1e>
 8005f40:	680b      	ldr	r3, [r1, #0]
 8005f42:	1b5b      	subs	r3, r3, r5
 8005f44:	d418      	bmi.n	8005f78 <_malloc_r+0x8c>
 8005f46:	2b0b      	cmp	r3, #11
 8005f48:	d90f      	bls.n	8005f6a <_malloc_r+0x7e>
 8005f4a:	600b      	str	r3, [r1, #0]
 8005f4c:	50cd      	str	r5, [r1, r3]
 8005f4e:	18cc      	adds	r4, r1, r3
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 fd4a 	bl	80069ea <__malloc_unlock>
 8005f56:	f104 000b 	add.w	r0, r4, #11
 8005f5a:	1d23      	adds	r3, r4, #4
 8005f5c:	f020 0007 	bic.w	r0, r0, #7
 8005f60:	1ac3      	subs	r3, r0, r3
 8005f62:	d0d3      	beq.n	8005f0c <_malloc_r+0x20>
 8005f64:	425a      	negs	r2, r3
 8005f66:	50e2      	str	r2, [r4, r3]
 8005f68:	e7d0      	b.n	8005f0c <_malloc_r+0x20>
 8005f6a:	428c      	cmp	r4, r1
 8005f6c:	684b      	ldr	r3, [r1, #4]
 8005f6e:	bf16      	itet	ne
 8005f70:	6063      	strne	r3, [r4, #4]
 8005f72:	6013      	streq	r3, [r2, #0]
 8005f74:	460c      	movne	r4, r1
 8005f76:	e7eb      	b.n	8005f50 <_malloc_r+0x64>
 8005f78:	460c      	mov	r4, r1
 8005f7a:	6849      	ldr	r1, [r1, #4]
 8005f7c:	e7cc      	b.n	8005f18 <_malloc_r+0x2c>
 8005f7e:	1cc4      	adds	r4, r0, #3
 8005f80:	f024 0403 	bic.w	r4, r4, #3
 8005f84:	42a0      	cmp	r0, r4
 8005f86:	d005      	beq.n	8005f94 <_malloc_r+0xa8>
 8005f88:	1a21      	subs	r1, r4, r0
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 fad0 	bl	8006530 <_sbrk_r>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d0cf      	beq.n	8005f34 <_malloc_r+0x48>
 8005f94:	6025      	str	r5, [r4, #0]
 8005f96:	e7db      	b.n	8005f50 <_malloc_r+0x64>
 8005f98:	200142b8 	.word	0x200142b8
 8005f9c:	200142bc 	.word	0x200142bc

08005fa0 <__sfputc_r>:
 8005fa0:	6893      	ldr	r3, [r2, #8]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	b410      	push	{r4}
 8005fa8:	6093      	str	r3, [r2, #8]
 8005faa:	da08      	bge.n	8005fbe <__sfputc_r+0x1e>
 8005fac:	6994      	ldr	r4, [r2, #24]
 8005fae:	42a3      	cmp	r3, r4
 8005fb0:	db01      	blt.n	8005fb6 <__sfputc_r+0x16>
 8005fb2:	290a      	cmp	r1, #10
 8005fb4:	d103      	bne.n	8005fbe <__sfputc_r+0x1e>
 8005fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fba:	f000 bb0d 	b.w	80065d8 <__swbuf_r>
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	1c58      	adds	r0, r3, #1
 8005fc2:	6010      	str	r0, [r2, #0]
 8005fc4:	7019      	strb	r1, [r3, #0]
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <__sfputs_r>:
 8005fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	460f      	mov	r7, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	18d5      	adds	r5, r2, r3
 8005fd8:	42ac      	cmp	r4, r5
 8005fda:	d101      	bne.n	8005fe0 <__sfputs_r+0x12>
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e007      	b.n	8005ff0 <__sfputs_r+0x22>
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ffda 	bl	8005fa0 <__sfputc_r>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d1f3      	bne.n	8005fd8 <__sfputs_r+0xa>
 8005ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ff4 <_vfiprintf_r>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	b09d      	sub	sp, #116	; 0x74
 8005ffc:	4617      	mov	r7, r2
 8005ffe:	461d      	mov	r5, r3
 8006000:	4606      	mov	r6, r0
 8006002:	b118      	cbz	r0, 800600c <_vfiprintf_r+0x18>
 8006004:	6983      	ldr	r3, [r0, #24]
 8006006:	b90b      	cbnz	r3, 800600c <_vfiprintf_r+0x18>
 8006008:	f7ff fe90 	bl	8005d2c <__sinit>
 800600c:	4b7c      	ldr	r3, [pc, #496]	; (8006200 <_vfiprintf_r+0x20c>)
 800600e:	429c      	cmp	r4, r3
 8006010:	d158      	bne.n	80060c4 <_vfiprintf_r+0xd0>
 8006012:	6874      	ldr	r4, [r6, #4]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	0718      	lsls	r0, r3, #28
 8006018:	d55e      	bpl.n	80060d8 <_vfiprintf_r+0xe4>
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05b      	beq.n	80060d8 <_vfiprintf_r+0xe4>
 8006020:	2300      	movs	r3, #0
 8006022:	9309      	str	r3, [sp, #36]	; 0x24
 8006024:	2320      	movs	r3, #32
 8006026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800602a:	2330      	movs	r3, #48	; 0x30
 800602c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006030:	9503      	str	r5, [sp, #12]
 8006032:	f04f 0b01 	mov.w	fp, #1
 8006036:	46b8      	mov	r8, r7
 8006038:	4645      	mov	r5, r8
 800603a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800603e:	b10b      	cbz	r3, 8006044 <_vfiprintf_r+0x50>
 8006040:	2b25      	cmp	r3, #37	; 0x25
 8006042:	d154      	bne.n	80060ee <_vfiprintf_r+0xfa>
 8006044:	ebb8 0a07 	subs.w	sl, r8, r7
 8006048:	d00b      	beq.n	8006062 <_vfiprintf_r+0x6e>
 800604a:	4653      	mov	r3, sl
 800604c:	463a      	mov	r2, r7
 800604e:	4621      	mov	r1, r4
 8006050:	4630      	mov	r0, r6
 8006052:	f7ff ffbc 	bl	8005fce <__sfputs_r>
 8006056:	3001      	adds	r0, #1
 8006058:	f000 80c2 	beq.w	80061e0 <_vfiprintf_r+0x1ec>
 800605c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605e:	4453      	add	r3, sl
 8006060:	9309      	str	r3, [sp, #36]	; 0x24
 8006062:	f898 3000 	ldrb.w	r3, [r8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80ba 	beq.w	80061e0 <_vfiprintf_r+0x1ec>
 800606c:	2300      	movs	r3, #0
 800606e:	f04f 32ff 	mov.w	r2, #4294967295
 8006072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	9307      	str	r3, [sp, #28]
 800607a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800607e:	931a      	str	r3, [sp, #104]	; 0x68
 8006080:	46a8      	mov	r8, r5
 8006082:	2205      	movs	r2, #5
 8006084:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006088:	485e      	ldr	r0, [pc, #376]	; (8006204 <_vfiprintf_r+0x210>)
 800608a:	f7fa f8b9 	bl	8000200 <memchr>
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	bb78      	cbnz	r0, 80060f2 <_vfiprintf_r+0xfe>
 8006092:	06d9      	lsls	r1, r3, #27
 8006094:	bf44      	itt	mi
 8006096:	2220      	movmi	r2, #32
 8006098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800609c:	071a      	lsls	r2, r3, #28
 800609e:	bf44      	itt	mi
 80060a0:	222b      	movmi	r2, #43	; 0x2b
 80060a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060a6:	782a      	ldrb	r2, [r5, #0]
 80060a8:	2a2a      	cmp	r2, #42	; 0x2a
 80060aa:	d02a      	beq.n	8006102 <_vfiprintf_r+0x10e>
 80060ac:	9a07      	ldr	r2, [sp, #28]
 80060ae:	46a8      	mov	r8, r5
 80060b0:	2000      	movs	r0, #0
 80060b2:	250a      	movs	r5, #10
 80060b4:	4641      	mov	r1, r8
 80060b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ba:	3b30      	subs	r3, #48	; 0x30
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d969      	bls.n	8006194 <_vfiprintf_r+0x1a0>
 80060c0:	b360      	cbz	r0, 800611c <_vfiprintf_r+0x128>
 80060c2:	e024      	b.n	800610e <_vfiprintf_r+0x11a>
 80060c4:	4b50      	ldr	r3, [pc, #320]	; (8006208 <_vfiprintf_r+0x214>)
 80060c6:	429c      	cmp	r4, r3
 80060c8:	d101      	bne.n	80060ce <_vfiprintf_r+0xda>
 80060ca:	68b4      	ldr	r4, [r6, #8]
 80060cc:	e7a2      	b.n	8006014 <_vfiprintf_r+0x20>
 80060ce:	4b4f      	ldr	r3, [pc, #316]	; (800620c <_vfiprintf_r+0x218>)
 80060d0:	429c      	cmp	r4, r3
 80060d2:	bf08      	it	eq
 80060d4:	68f4      	ldreq	r4, [r6, #12]
 80060d6:	e79d      	b.n	8006014 <_vfiprintf_r+0x20>
 80060d8:	4621      	mov	r1, r4
 80060da:	4630      	mov	r0, r6
 80060dc:	f000 fae0 	bl	80066a0 <__swsetup_r>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d09d      	beq.n	8006020 <_vfiprintf_r+0x2c>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b01d      	add	sp, #116	; 0x74
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ee:	46a8      	mov	r8, r5
 80060f0:	e7a2      	b.n	8006038 <_vfiprintf_r+0x44>
 80060f2:	4a44      	ldr	r2, [pc, #272]	; (8006204 <_vfiprintf_r+0x210>)
 80060f4:	1a80      	subs	r0, r0, r2
 80060f6:	fa0b f000 	lsl.w	r0, fp, r0
 80060fa:	4318      	orrs	r0, r3
 80060fc:	9004      	str	r0, [sp, #16]
 80060fe:	4645      	mov	r5, r8
 8006100:	e7be      	b.n	8006080 <_vfiprintf_r+0x8c>
 8006102:	9a03      	ldr	r2, [sp, #12]
 8006104:	1d11      	adds	r1, r2, #4
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	9103      	str	r1, [sp, #12]
 800610a:	2a00      	cmp	r2, #0
 800610c:	db01      	blt.n	8006112 <_vfiprintf_r+0x11e>
 800610e:	9207      	str	r2, [sp, #28]
 8006110:	e004      	b.n	800611c <_vfiprintf_r+0x128>
 8006112:	4252      	negs	r2, r2
 8006114:	f043 0302 	orr.w	r3, r3, #2
 8006118:	9207      	str	r2, [sp, #28]
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	f898 3000 	ldrb.w	r3, [r8]
 8006120:	2b2e      	cmp	r3, #46	; 0x2e
 8006122:	d10e      	bne.n	8006142 <_vfiprintf_r+0x14e>
 8006124:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006128:	2b2a      	cmp	r3, #42	; 0x2a
 800612a:	d138      	bne.n	800619e <_vfiprintf_r+0x1aa>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	9203      	str	r2, [sp, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	bfb8      	it	lt
 8006138:	f04f 33ff 	movlt.w	r3, #4294967295
 800613c:	f108 0802 	add.w	r8, r8, #2
 8006140:	9305      	str	r3, [sp, #20]
 8006142:	4d33      	ldr	r5, [pc, #204]	; (8006210 <_vfiprintf_r+0x21c>)
 8006144:	f898 1000 	ldrb.w	r1, [r8]
 8006148:	2203      	movs	r2, #3
 800614a:	4628      	mov	r0, r5
 800614c:	f7fa f858 	bl	8000200 <memchr>
 8006150:	b140      	cbz	r0, 8006164 <_vfiprintf_r+0x170>
 8006152:	2340      	movs	r3, #64	; 0x40
 8006154:	1b40      	subs	r0, r0, r5
 8006156:	fa03 f000 	lsl.w	r0, r3, r0
 800615a:	9b04      	ldr	r3, [sp, #16]
 800615c:	4303      	orrs	r3, r0
 800615e:	f108 0801 	add.w	r8, r8, #1
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	f898 1000 	ldrb.w	r1, [r8]
 8006168:	482a      	ldr	r0, [pc, #168]	; (8006214 <_vfiprintf_r+0x220>)
 800616a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800616e:	2206      	movs	r2, #6
 8006170:	f108 0701 	add.w	r7, r8, #1
 8006174:	f7fa f844 	bl	8000200 <memchr>
 8006178:	2800      	cmp	r0, #0
 800617a:	d037      	beq.n	80061ec <_vfiprintf_r+0x1f8>
 800617c:	4b26      	ldr	r3, [pc, #152]	; (8006218 <_vfiprintf_r+0x224>)
 800617e:	bb1b      	cbnz	r3, 80061c8 <_vfiprintf_r+0x1d4>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	3307      	adds	r3, #7
 8006184:	f023 0307 	bic.w	r3, r3, #7
 8006188:	3308      	adds	r3, #8
 800618a:	9303      	str	r3, [sp, #12]
 800618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618e:	444b      	add	r3, r9
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	e750      	b.n	8006036 <_vfiprintf_r+0x42>
 8006194:	fb05 3202 	mla	r2, r5, r2, r3
 8006198:	2001      	movs	r0, #1
 800619a:	4688      	mov	r8, r1
 800619c:	e78a      	b.n	80060b4 <_vfiprintf_r+0xc0>
 800619e:	2300      	movs	r3, #0
 80061a0:	f108 0801 	add.w	r8, r8, #1
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	4619      	mov	r1, r3
 80061a8:	250a      	movs	r5, #10
 80061aa:	4640      	mov	r0, r8
 80061ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061b0:	3a30      	subs	r2, #48	; 0x30
 80061b2:	2a09      	cmp	r2, #9
 80061b4:	d903      	bls.n	80061be <_vfiprintf_r+0x1ca>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0c3      	beq.n	8006142 <_vfiprintf_r+0x14e>
 80061ba:	9105      	str	r1, [sp, #20]
 80061bc:	e7c1      	b.n	8006142 <_vfiprintf_r+0x14e>
 80061be:	fb05 2101 	mla	r1, r5, r1, r2
 80061c2:	2301      	movs	r3, #1
 80061c4:	4680      	mov	r8, r0
 80061c6:	e7f0      	b.n	80061aa <_vfiprintf_r+0x1b6>
 80061c8:	ab03      	add	r3, sp, #12
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	4622      	mov	r2, r4
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <_vfiprintf_r+0x228>)
 80061d0:	a904      	add	r1, sp, #16
 80061d2:	4630      	mov	r0, r6
 80061d4:	f3af 8000 	nop.w
 80061d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061dc:	4681      	mov	r9, r0
 80061de:	d1d5      	bne.n	800618c <_vfiprintf_r+0x198>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	065b      	lsls	r3, r3, #25
 80061e4:	f53f af7e 	bmi.w	80060e4 <_vfiprintf_r+0xf0>
 80061e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ea:	e77d      	b.n	80060e8 <_vfiprintf_r+0xf4>
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	4622      	mov	r2, r4
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <_vfiprintf_r+0x228>)
 80061f4:	a904      	add	r1, sp, #16
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 f888 	bl	800630c <_printf_i>
 80061fc:	e7ec      	b.n	80061d8 <_vfiprintf_r+0x1e4>
 80061fe:	bf00      	nop
 8006200:	08006df4 	.word	0x08006df4
 8006204:	08006e34 	.word	0x08006e34
 8006208:	08006e14 	.word	0x08006e14
 800620c:	08006dd4 	.word	0x08006dd4
 8006210:	08006e3a 	.word	0x08006e3a
 8006214:	08006e3e 	.word	0x08006e3e
 8006218:	00000000 	.word	0x00000000
 800621c:	08005fcf 	.word	0x08005fcf

08006220 <_printf_common>:
 8006220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	4691      	mov	r9, r2
 8006226:	461f      	mov	r7, r3
 8006228:	688a      	ldr	r2, [r1, #8]
 800622a:	690b      	ldr	r3, [r1, #16]
 800622c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006230:	4293      	cmp	r3, r2
 8006232:	bfb8      	it	lt
 8006234:	4613      	movlt	r3, r2
 8006236:	f8c9 3000 	str.w	r3, [r9]
 800623a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800623e:	4606      	mov	r6, r0
 8006240:	460c      	mov	r4, r1
 8006242:	b112      	cbz	r2, 800624a <_printf_common+0x2a>
 8006244:	3301      	adds	r3, #1
 8006246:	f8c9 3000 	str.w	r3, [r9]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	0699      	lsls	r1, r3, #26
 800624e:	bf42      	ittt	mi
 8006250:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006254:	3302      	addmi	r3, #2
 8006256:	f8c9 3000 	strmi.w	r3, [r9]
 800625a:	6825      	ldr	r5, [r4, #0]
 800625c:	f015 0506 	ands.w	r5, r5, #6
 8006260:	d107      	bne.n	8006272 <_printf_common+0x52>
 8006262:	f104 0a19 	add.w	sl, r4, #25
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	f8d9 2000 	ldr.w	r2, [r9]
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	42ab      	cmp	r3, r5
 8006270:	dc28      	bgt.n	80062c4 <_printf_common+0xa4>
 8006272:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	3300      	adds	r3, #0
 800627a:	bf18      	it	ne
 800627c:	2301      	movne	r3, #1
 800627e:	0692      	lsls	r2, r2, #26
 8006280:	d42d      	bmi.n	80062de <_printf_common+0xbe>
 8006282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006286:	4639      	mov	r1, r7
 8006288:	4630      	mov	r0, r6
 800628a:	47c0      	blx	r8
 800628c:	3001      	adds	r0, #1
 800628e:	d020      	beq.n	80062d2 <_printf_common+0xb2>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	68e5      	ldr	r5, [r4, #12]
 8006294:	f8d9 2000 	ldr.w	r2, [r9]
 8006298:	f003 0306 	and.w	r3, r3, #6
 800629c:	2b04      	cmp	r3, #4
 800629e:	bf08      	it	eq
 80062a0:	1aad      	subeq	r5, r5, r2
 80062a2:	68a3      	ldr	r3, [r4, #8]
 80062a4:	6922      	ldr	r2, [r4, #16]
 80062a6:	bf0c      	ite	eq
 80062a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ac:	2500      	movne	r5, #0
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bfc4      	itt	gt
 80062b2:	1a9b      	subgt	r3, r3, r2
 80062b4:	18ed      	addgt	r5, r5, r3
 80062b6:	f04f 0900 	mov.w	r9, #0
 80062ba:	341a      	adds	r4, #26
 80062bc:	454d      	cmp	r5, r9
 80062be:	d11a      	bne.n	80062f6 <_printf_common+0xd6>
 80062c0:	2000      	movs	r0, #0
 80062c2:	e008      	b.n	80062d6 <_printf_common+0xb6>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4652      	mov	r2, sl
 80062c8:	4639      	mov	r1, r7
 80062ca:	4630      	mov	r0, r6
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d103      	bne.n	80062da <_printf_common+0xba>
 80062d2:	f04f 30ff 	mov.w	r0, #4294967295
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	3501      	adds	r5, #1
 80062dc:	e7c3      	b.n	8006266 <_printf_common+0x46>
 80062de:	18e1      	adds	r1, r4, r3
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	2030      	movs	r0, #48	; 0x30
 80062e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062e8:	4422      	add	r2, r4
 80062ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f2:	3302      	adds	r3, #2
 80062f4:	e7c5      	b.n	8006282 <_printf_common+0x62>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4622      	mov	r2, r4
 80062fa:	4639      	mov	r1, r7
 80062fc:	4630      	mov	r0, r6
 80062fe:	47c0      	blx	r8
 8006300:	3001      	adds	r0, #1
 8006302:	d0e6      	beq.n	80062d2 <_printf_common+0xb2>
 8006304:	f109 0901 	add.w	r9, r9, #1
 8006308:	e7d8      	b.n	80062bc <_printf_common+0x9c>
	...

0800630c <_printf_i>:
 800630c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006310:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006314:	460c      	mov	r4, r1
 8006316:	7e09      	ldrb	r1, [r1, #24]
 8006318:	b085      	sub	sp, #20
 800631a:	296e      	cmp	r1, #110	; 0x6e
 800631c:	4617      	mov	r7, r2
 800631e:	4606      	mov	r6, r0
 8006320:	4698      	mov	r8, r3
 8006322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006324:	f000 80b3 	beq.w	800648e <_printf_i+0x182>
 8006328:	d822      	bhi.n	8006370 <_printf_i+0x64>
 800632a:	2963      	cmp	r1, #99	; 0x63
 800632c:	d036      	beq.n	800639c <_printf_i+0x90>
 800632e:	d80a      	bhi.n	8006346 <_printf_i+0x3a>
 8006330:	2900      	cmp	r1, #0
 8006332:	f000 80b9 	beq.w	80064a8 <_printf_i+0x19c>
 8006336:	2958      	cmp	r1, #88	; 0x58
 8006338:	f000 8083 	beq.w	8006442 <_printf_i+0x136>
 800633c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006340:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006344:	e032      	b.n	80063ac <_printf_i+0xa0>
 8006346:	2964      	cmp	r1, #100	; 0x64
 8006348:	d001      	beq.n	800634e <_printf_i+0x42>
 800634a:	2969      	cmp	r1, #105	; 0x69
 800634c:	d1f6      	bne.n	800633c <_printf_i+0x30>
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	6813      	ldr	r3, [r2, #0]
 8006352:	0605      	lsls	r5, r0, #24
 8006354:	f103 0104 	add.w	r1, r3, #4
 8006358:	d52a      	bpl.n	80063b0 <_printf_i+0xa4>
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	da03      	bge.n	800636a <_printf_i+0x5e>
 8006362:	222d      	movs	r2, #45	; 0x2d
 8006364:	425b      	negs	r3, r3
 8006366:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800636a:	486f      	ldr	r0, [pc, #444]	; (8006528 <_printf_i+0x21c>)
 800636c:	220a      	movs	r2, #10
 800636e:	e039      	b.n	80063e4 <_printf_i+0xd8>
 8006370:	2973      	cmp	r1, #115	; 0x73
 8006372:	f000 809d 	beq.w	80064b0 <_printf_i+0x1a4>
 8006376:	d808      	bhi.n	800638a <_printf_i+0x7e>
 8006378:	296f      	cmp	r1, #111	; 0x6f
 800637a:	d020      	beq.n	80063be <_printf_i+0xb2>
 800637c:	2970      	cmp	r1, #112	; 0x70
 800637e:	d1dd      	bne.n	800633c <_printf_i+0x30>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	f043 0320 	orr.w	r3, r3, #32
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	e003      	b.n	8006392 <_printf_i+0x86>
 800638a:	2975      	cmp	r1, #117	; 0x75
 800638c:	d017      	beq.n	80063be <_printf_i+0xb2>
 800638e:	2978      	cmp	r1, #120	; 0x78
 8006390:	d1d4      	bne.n	800633c <_printf_i+0x30>
 8006392:	2378      	movs	r3, #120	; 0x78
 8006394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006398:	4864      	ldr	r0, [pc, #400]	; (800652c <_printf_i+0x220>)
 800639a:	e055      	b.n	8006448 <_printf_i+0x13c>
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	1d19      	adds	r1, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6011      	str	r1, [r2, #0]
 80063a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063ac:	2301      	movs	r3, #1
 80063ae:	e08c      	b.n	80064ca <_printf_i+0x1be>
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6011      	str	r1, [r2, #0]
 80063b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063b8:	bf18      	it	ne
 80063ba:	b21b      	sxthne	r3, r3
 80063bc:	e7cf      	b.n	800635e <_printf_i+0x52>
 80063be:	6813      	ldr	r3, [r2, #0]
 80063c0:	6825      	ldr	r5, [r4, #0]
 80063c2:	1d18      	adds	r0, r3, #4
 80063c4:	6010      	str	r0, [r2, #0]
 80063c6:	0628      	lsls	r0, r5, #24
 80063c8:	d501      	bpl.n	80063ce <_printf_i+0xc2>
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	e002      	b.n	80063d4 <_printf_i+0xc8>
 80063ce:	0668      	lsls	r0, r5, #25
 80063d0:	d5fb      	bpl.n	80063ca <_printf_i+0xbe>
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	4854      	ldr	r0, [pc, #336]	; (8006528 <_printf_i+0x21c>)
 80063d6:	296f      	cmp	r1, #111	; 0x6f
 80063d8:	bf14      	ite	ne
 80063da:	220a      	movne	r2, #10
 80063dc:	2208      	moveq	r2, #8
 80063de:	2100      	movs	r1, #0
 80063e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063e4:	6865      	ldr	r5, [r4, #4]
 80063e6:	60a5      	str	r5, [r4, #8]
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	f2c0 8095 	blt.w	8006518 <_printf_i+0x20c>
 80063ee:	6821      	ldr	r1, [r4, #0]
 80063f0:	f021 0104 	bic.w	r1, r1, #4
 80063f4:	6021      	str	r1, [r4, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d13d      	bne.n	8006476 <_printf_i+0x16a>
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	f040 808e 	bne.w	800651c <_printf_i+0x210>
 8006400:	4665      	mov	r5, ip
 8006402:	2a08      	cmp	r2, #8
 8006404:	d10b      	bne.n	800641e <_printf_i+0x112>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	07db      	lsls	r3, r3, #31
 800640a:	d508      	bpl.n	800641e <_printf_i+0x112>
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	bfde      	ittt	le
 8006414:	2330      	movle	r3, #48	; 0x30
 8006416:	f805 3c01 	strble.w	r3, [r5, #-1]
 800641a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800641e:	ebac 0305 	sub.w	r3, ip, r5
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	f8cd 8000 	str.w	r8, [sp]
 8006428:	463b      	mov	r3, r7
 800642a:	aa03      	add	r2, sp, #12
 800642c:	4621      	mov	r1, r4
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff fef6 	bl	8006220 <_printf_common>
 8006434:	3001      	adds	r0, #1
 8006436:	d14d      	bne.n	80064d4 <_printf_i+0x1c8>
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	b005      	add	sp, #20
 800643e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006442:	4839      	ldr	r0, [pc, #228]	; (8006528 <_printf_i+0x21c>)
 8006444:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006448:	6813      	ldr	r3, [r2, #0]
 800644a:	6821      	ldr	r1, [r4, #0]
 800644c:	1d1d      	adds	r5, r3, #4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6015      	str	r5, [r2, #0]
 8006452:	060a      	lsls	r2, r1, #24
 8006454:	d50b      	bpl.n	800646e <_printf_i+0x162>
 8006456:	07ca      	lsls	r2, r1, #31
 8006458:	bf44      	itt	mi
 800645a:	f041 0120 	orrmi.w	r1, r1, #32
 800645e:	6021      	strmi	r1, [r4, #0]
 8006460:	b91b      	cbnz	r3, 800646a <_printf_i+0x15e>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	f022 0220 	bic.w	r2, r2, #32
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	2210      	movs	r2, #16
 800646c:	e7b7      	b.n	80063de <_printf_i+0xd2>
 800646e:	064d      	lsls	r5, r1, #25
 8006470:	bf48      	it	mi
 8006472:	b29b      	uxthmi	r3, r3
 8006474:	e7ef      	b.n	8006456 <_printf_i+0x14a>
 8006476:	4665      	mov	r5, ip
 8006478:	fbb3 f1f2 	udiv	r1, r3, r2
 800647c:	fb02 3311 	mls	r3, r2, r1, r3
 8006480:	5cc3      	ldrb	r3, [r0, r3]
 8006482:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006486:	460b      	mov	r3, r1
 8006488:	2900      	cmp	r1, #0
 800648a:	d1f5      	bne.n	8006478 <_printf_i+0x16c>
 800648c:	e7b9      	b.n	8006402 <_printf_i+0xf6>
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	6961      	ldr	r1, [r4, #20]
 8006494:	1d18      	adds	r0, r3, #4
 8006496:	6010      	str	r0, [r2, #0]
 8006498:	0628      	lsls	r0, r5, #24
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	d501      	bpl.n	80064a2 <_printf_i+0x196>
 800649e:	6019      	str	r1, [r3, #0]
 80064a0:	e002      	b.n	80064a8 <_printf_i+0x19c>
 80064a2:	066a      	lsls	r2, r5, #25
 80064a4:	d5fb      	bpl.n	800649e <_printf_i+0x192>
 80064a6:	8019      	strh	r1, [r3, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	4665      	mov	r5, ip
 80064ae:	e7b9      	b.n	8006424 <_printf_i+0x118>
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	1d19      	adds	r1, r3, #4
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	681d      	ldr	r5, [r3, #0]
 80064b8:	6862      	ldr	r2, [r4, #4]
 80064ba:	2100      	movs	r1, #0
 80064bc:	4628      	mov	r0, r5
 80064be:	f7f9 fe9f 	bl	8000200 <memchr>
 80064c2:	b108      	cbz	r0, 80064c8 <_printf_i+0x1bc>
 80064c4:	1b40      	subs	r0, r0, r5
 80064c6:	6060      	str	r0, [r4, #4]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	2300      	movs	r3, #0
 80064ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d2:	e7a7      	b.n	8006424 <_printf_i+0x118>
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	462a      	mov	r2, r5
 80064d8:	4639      	mov	r1, r7
 80064da:	4630      	mov	r0, r6
 80064dc:	47c0      	blx	r8
 80064de:	3001      	adds	r0, #1
 80064e0:	d0aa      	beq.n	8006438 <_printf_i+0x12c>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	079b      	lsls	r3, r3, #30
 80064e6:	d413      	bmi.n	8006510 <_printf_i+0x204>
 80064e8:	68e0      	ldr	r0, [r4, #12]
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	4298      	cmp	r0, r3
 80064ee:	bfb8      	it	lt
 80064f0:	4618      	movlt	r0, r3
 80064f2:	e7a3      	b.n	800643c <_printf_i+0x130>
 80064f4:	2301      	movs	r3, #1
 80064f6:	464a      	mov	r2, r9
 80064f8:	4639      	mov	r1, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d09a      	beq.n	8006438 <_printf_i+0x12c>
 8006502:	3501      	adds	r5, #1
 8006504:	68e3      	ldr	r3, [r4, #12]
 8006506:	9a03      	ldr	r2, [sp, #12]
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	42ab      	cmp	r3, r5
 800650c:	dcf2      	bgt.n	80064f4 <_printf_i+0x1e8>
 800650e:	e7eb      	b.n	80064e8 <_printf_i+0x1dc>
 8006510:	2500      	movs	r5, #0
 8006512:	f104 0919 	add.w	r9, r4, #25
 8006516:	e7f5      	b.n	8006504 <_printf_i+0x1f8>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ac      	bne.n	8006476 <_printf_i+0x16a>
 800651c:	7803      	ldrb	r3, [r0, #0]
 800651e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006526:	e76c      	b.n	8006402 <_printf_i+0xf6>
 8006528:	08006e45 	.word	0x08006e45
 800652c:	08006e56 	.word	0x08006e56

08006530 <_sbrk_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4c06      	ldr	r4, [pc, #24]	; (800654c <_sbrk_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4605      	mov	r5, r0
 8006538:	4608      	mov	r0, r1
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	f7fd f954 	bl	80037e8 <_sbrk>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_sbrk_r+0x1a>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	b103      	cbz	r3, 800654a <_sbrk_r+0x1a>
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20014384 	.word	0x20014384

08006550 <__sread>:
 8006550:	b510      	push	{r4, lr}
 8006552:	460c      	mov	r4, r1
 8006554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006558:	f000 fa48 	bl	80069ec <_read_r>
 800655c:	2800      	cmp	r0, #0
 800655e:	bfab      	itete	ge
 8006560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006562:	89a3      	ldrhlt	r3, [r4, #12]
 8006564:	181b      	addge	r3, r3, r0
 8006566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800656a:	bfac      	ite	ge
 800656c:	6563      	strge	r3, [r4, #84]	; 0x54
 800656e:	81a3      	strhlt	r3, [r4, #12]
 8006570:	bd10      	pop	{r4, pc}

08006572 <__swrite>:
 8006572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	461f      	mov	r7, r3
 8006578:	898b      	ldrh	r3, [r1, #12]
 800657a:	05db      	lsls	r3, r3, #23
 800657c:	4605      	mov	r5, r0
 800657e:	460c      	mov	r4, r1
 8006580:	4616      	mov	r6, r2
 8006582:	d505      	bpl.n	8006590 <__swrite+0x1e>
 8006584:	2302      	movs	r3, #2
 8006586:	2200      	movs	r2, #0
 8006588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658c:	f000 f9b6 	bl	80068fc <_lseek_r>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	4632      	mov	r2, r6
 800659e:	463b      	mov	r3, r7
 80065a0:	4628      	mov	r0, r5
 80065a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	f000 b869 	b.w	800667c <_write_r>

080065aa <__sseek>:
 80065aa:	b510      	push	{r4, lr}
 80065ac:	460c      	mov	r4, r1
 80065ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b2:	f000 f9a3 	bl	80068fc <_lseek_r>
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	bf15      	itete	ne
 80065bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80065be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065c6:	81a3      	strheq	r3, [r4, #12]
 80065c8:	bf18      	it	ne
 80065ca:	81a3      	strhne	r3, [r4, #12]
 80065cc:	bd10      	pop	{r4, pc}

080065ce <__sclose>:
 80065ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d2:	f000 b8d3 	b.w	800677c <_close_r>
	...

080065d8 <__swbuf_r>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	460e      	mov	r6, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	4605      	mov	r5, r0
 80065e0:	b118      	cbz	r0, 80065ea <__swbuf_r+0x12>
 80065e2:	6983      	ldr	r3, [r0, #24]
 80065e4:	b90b      	cbnz	r3, 80065ea <__swbuf_r+0x12>
 80065e6:	f7ff fba1 	bl	8005d2c <__sinit>
 80065ea:	4b21      	ldr	r3, [pc, #132]	; (8006670 <__swbuf_r+0x98>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d12a      	bne.n	8006646 <__swbuf_r+0x6e>
 80065f0:	686c      	ldr	r4, [r5, #4]
 80065f2:	69a3      	ldr	r3, [r4, #24]
 80065f4:	60a3      	str	r3, [r4, #8]
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	071a      	lsls	r2, r3, #28
 80065fa:	d52e      	bpl.n	800665a <__swbuf_r+0x82>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	b363      	cbz	r3, 800665a <__swbuf_r+0x82>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	1ac0      	subs	r0, r0, r3
 8006606:	6963      	ldr	r3, [r4, #20]
 8006608:	b2f6      	uxtb	r6, r6
 800660a:	4283      	cmp	r3, r0
 800660c:	4637      	mov	r7, r6
 800660e:	dc04      	bgt.n	800661a <__swbuf_r+0x42>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f948 	bl	80068a8 <_fflush_r>
 8006618:	bb28      	cbnz	r0, 8006666 <__swbuf_r+0x8e>
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	3b01      	subs	r3, #1
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	701e      	strb	r6, [r3, #0]
 8006628:	6963      	ldr	r3, [r4, #20]
 800662a:	3001      	adds	r0, #1
 800662c:	4283      	cmp	r3, r0
 800662e:	d004      	beq.n	800663a <__swbuf_r+0x62>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d519      	bpl.n	800666a <__swbuf_r+0x92>
 8006636:	2e0a      	cmp	r6, #10
 8006638:	d117      	bne.n	800666a <__swbuf_r+0x92>
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f000 f933 	bl	80068a8 <_fflush_r>
 8006642:	b190      	cbz	r0, 800666a <__swbuf_r+0x92>
 8006644:	e00f      	b.n	8006666 <__swbuf_r+0x8e>
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <__swbuf_r+0x9c>)
 8006648:	429c      	cmp	r4, r3
 800664a:	d101      	bne.n	8006650 <__swbuf_r+0x78>
 800664c:	68ac      	ldr	r4, [r5, #8]
 800664e:	e7d0      	b.n	80065f2 <__swbuf_r+0x1a>
 8006650:	4b09      	ldr	r3, [pc, #36]	; (8006678 <__swbuf_r+0xa0>)
 8006652:	429c      	cmp	r4, r3
 8006654:	bf08      	it	eq
 8006656:	68ec      	ldreq	r4, [r5, #12]
 8006658:	e7cb      	b.n	80065f2 <__swbuf_r+0x1a>
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f81f 	bl	80066a0 <__swsetup_r>
 8006662:	2800      	cmp	r0, #0
 8006664:	d0cc      	beq.n	8006600 <__swbuf_r+0x28>
 8006666:	f04f 37ff 	mov.w	r7, #4294967295
 800666a:	4638      	mov	r0, r7
 800666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800666e:	bf00      	nop
 8006670:	08006df4 	.word	0x08006df4
 8006674:	08006e14 	.word	0x08006e14
 8006678:	08006dd4 	.word	0x08006dd4

0800667c <_write_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4c07      	ldr	r4, [pc, #28]	; (800669c <_write_r+0x20>)
 8006680:	4605      	mov	r5, r0
 8006682:	4608      	mov	r0, r1
 8006684:	4611      	mov	r1, r2
 8006686:	2200      	movs	r2, #0
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f7fd f85b 	bl	8003746 <_write>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_write_r+0x1e>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	b103      	cbz	r3, 800669a <_write_r+0x1e>
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	20014384 	.word	0x20014384

080066a0 <__swsetup_r>:
 80066a0:	4b32      	ldr	r3, [pc, #200]	; (800676c <__swsetup_r+0xcc>)
 80066a2:	b570      	push	{r4, r5, r6, lr}
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	4606      	mov	r6, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	b125      	cbz	r5, 80066b6 <__swsetup_r+0x16>
 80066ac:	69ab      	ldr	r3, [r5, #24]
 80066ae:	b913      	cbnz	r3, 80066b6 <__swsetup_r+0x16>
 80066b0:	4628      	mov	r0, r5
 80066b2:	f7ff fb3b 	bl	8005d2c <__sinit>
 80066b6:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <__swsetup_r+0xd0>)
 80066b8:	429c      	cmp	r4, r3
 80066ba:	d10f      	bne.n	80066dc <__swsetup_r+0x3c>
 80066bc:	686c      	ldr	r4, [r5, #4]
 80066be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	0715      	lsls	r5, r2, #28
 80066c6:	d42c      	bmi.n	8006722 <__swsetup_r+0x82>
 80066c8:	06d0      	lsls	r0, r2, #27
 80066ca:	d411      	bmi.n	80066f0 <__swsetup_r+0x50>
 80066cc:	2209      	movs	r2, #9
 80066ce:	6032      	str	r2, [r6, #0]
 80066d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	f04f 30ff 	mov.w	r0, #4294967295
 80066da:	e03e      	b.n	800675a <__swsetup_r+0xba>
 80066dc:	4b25      	ldr	r3, [pc, #148]	; (8006774 <__swsetup_r+0xd4>)
 80066de:	429c      	cmp	r4, r3
 80066e0:	d101      	bne.n	80066e6 <__swsetup_r+0x46>
 80066e2:	68ac      	ldr	r4, [r5, #8]
 80066e4:	e7eb      	b.n	80066be <__swsetup_r+0x1e>
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <__swsetup_r+0xd8>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	bf08      	it	eq
 80066ec:	68ec      	ldreq	r4, [r5, #12]
 80066ee:	e7e6      	b.n	80066be <__swsetup_r+0x1e>
 80066f0:	0751      	lsls	r1, r2, #29
 80066f2:	d512      	bpl.n	800671a <__swsetup_r+0x7a>
 80066f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f6:	b141      	cbz	r1, 800670a <__swsetup_r+0x6a>
 80066f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d002      	beq.n	8006706 <__swsetup_r+0x66>
 8006700:	4630      	mov	r0, r6
 8006702:	f7ff fba5 	bl	8005e50 <_free_r>
 8006706:	2300      	movs	r3, #0
 8006708:	6363      	str	r3, [r4, #52]	; 0x34
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	2300      	movs	r3, #0
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f043 0308 	orr.w	r3, r3, #8
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	b94b      	cbnz	r3, 800673a <__swsetup_r+0x9a>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800672c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006730:	d003      	beq.n	800673a <__swsetup_r+0x9a>
 8006732:	4621      	mov	r1, r4
 8006734:	4630      	mov	r0, r6
 8006736:	f000 f917 	bl	8006968 <__smakebuf_r>
 800673a:	89a2      	ldrh	r2, [r4, #12]
 800673c:	f012 0301 	ands.w	r3, r2, #1
 8006740:	d00c      	beq.n	800675c <__swsetup_r+0xbc>
 8006742:	2300      	movs	r3, #0
 8006744:	60a3      	str	r3, [r4, #8]
 8006746:	6963      	ldr	r3, [r4, #20]
 8006748:	425b      	negs	r3, r3
 800674a:	61a3      	str	r3, [r4, #24]
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	b953      	cbnz	r3, 8006766 <__swsetup_r+0xc6>
 8006750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006754:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006758:	d1ba      	bne.n	80066d0 <__swsetup_r+0x30>
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	0792      	lsls	r2, r2, #30
 800675e:	bf58      	it	pl
 8006760:	6963      	ldrpl	r3, [r4, #20]
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	e7f2      	b.n	800674c <__swsetup_r+0xac>
 8006766:	2000      	movs	r0, #0
 8006768:	e7f7      	b.n	800675a <__swsetup_r+0xba>
 800676a:	bf00      	nop
 800676c:	2000000c 	.word	0x2000000c
 8006770:	08006df4 	.word	0x08006df4
 8006774:	08006e14 	.word	0x08006e14
 8006778:	08006dd4 	.word	0x08006dd4

0800677c <_close_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4c06      	ldr	r4, [pc, #24]	; (8006798 <_close_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4605      	mov	r5, r0
 8006784:	4608      	mov	r0, r1
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	f7fc fff9 	bl	800377e <_close>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_close_r+0x1a>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	b103      	cbz	r3, 8006796 <_close_r+0x1a>
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20014384 	.word	0x20014384

0800679c <__sflush_r>:
 800679c:	898a      	ldrh	r2, [r1, #12]
 800679e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a2:	4605      	mov	r5, r0
 80067a4:	0710      	lsls	r0, r2, #28
 80067a6:	460c      	mov	r4, r1
 80067a8:	d458      	bmi.n	800685c <__sflush_r+0xc0>
 80067aa:	684b      	ldr	r3, [r1, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	dc05      	bgt.n	80067bc <__sflush_r+0x20>
 80067b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc02      	bgt.n	80067bc <__sflush_r+0x20>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d0f9      	beq.n	80067b6 <__sflush_r+0x1a>
 80067c2:	2300      	movs	r3, #0
 80067c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067c8:	682f      	ldr	r7, [r5, #0]
 80067ca:	6a21      	ldr	r1, [r4, #32]
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	d032      	beq.n	8006836 <__sflush_r+0x9a>
 80067d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	075a      	lsls	r2, r3, #29
 80067d6:	d505      	bpl.n	80067e4 <__sflush_r+0x48>
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	1ac0      	subs	r0, r0, r3
 80067dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067de:	b10b      	cbz	r3, 80067e4 <__sflush_r+0x48>
 80067e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067e2:	1ac0      	subs	r0, r0, r3
 80067e4:	2300      	movs	r3, #0
 80067e6:	4602      	mov	r2, r0
 80067e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ea:	6a21      	ldr	r1, [r4, #32]
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b0      	blx	r6
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	d106      	bne.n	8006804 <__sflush_r+0x68>
 80067f6:	6829      	ldr	r1, [r5, #0]
 80067f8:	291d      	cmp	r1, #29
 80067fa:	d848      	bhi.n	800688e <__sflush_r+0xf2>
 80067fc:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <__sflush_r+0x108>)
 80067fe:	40ca      	lsrs	r2, r1
 8006800:	07d6      	lsls	r6, r2, #31
 8006802:	d544      	bpl.n	800688e <__sflush_r+0xf2>
 8006804:	2200      	movs	r2, #0
 8006806:	6062      	str	r2, [r4, #4]
 8006808:	04d9      	lsls	r1, r3, #19
 800680a:	6922      	ldr	r2, [r4, #16]
 800680c:	6022      	str	r2, [r4, #0]
 800680e:	d504      	bpl.n	800681a <__sflush_r+0x7e>
 8006810:	1c42      	adds	r2, r0, #1
 8006812:	d101      	bne.n	8006818 <__sflush_r+0x7c>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b903      	cbnz	r3, 800681a <__sflush_r+0x7e>
 8006818:	6560      	str	r0, [r4, #84]	; 0x54
 800681a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800681c:	602f      	str	r7, [r5, #0]
 800681e:	2900      	cmp	r1, #0
 8006820:	d0c9      	beq.n	80067b6 <__sflush_r+0x1a>
 8006822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006826:	4299      	cmp	r1, r3
 8006828:	d002      	beq.n	8006830 <__sflush_r+0x94>
 800682a:	4628      	mov	r0, r5
 800682c:	f7ff fb10 	bl	8005e50 <_free_r>
 8006830:	2000      	movs	r0, #0
 8006832:	6360      	str	r0, [r4, #52]	; 0x34
 8006834:	e7c0      	b.n	80067b8 <__sflush_r+0x1c>
 8006836:	2301      	movs	r3, #1
 8006838:	4628      	mov	r0, r5
 800683a:	47b0      	blx	r6
 800683c:	1c41      	adds	r1, r0, #1
 800683e:	d1c8      	bne.n	80067d2 <__sflush_r+0x36>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0c5      	beq.n	80067d2 <__sflush_r+0x36>
 8006846:	2b1d      	cmp	r3, #29
 8006848:	d001      	beq.n	800684e <__sflush_r+0xb2>
 800684a:	2b16      	cmp	r3, #22
 800684c:	d101      	bne.n	8006852 <__sflush_r+0xb6>
 800684e:	602f      	str	r7, [r5, #0]
 8006850:	e7b1      	b.n	80067b6 <__sflush_r+0x1a>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006858:	81a3      	strh	r3, [r4, #12]
 800685a:	e7ad      	b.n	80067b8 <__sflush_r+0x1c>
 800685c:	690f      	ldr	r7, [r1, #16]
 800685e:	2f00      	cmp	r7, #0
 8006860:	d0a9      	beq.n	80067b6 <__sflush_r+0x1a>
 8006862:	0793      	lsls	r3, r2, #30
 8006864:	680e      	ldr	r6, [r1, #0]
 8006866:	bf08      	it	eq
 8006868:	694b      	ldreq	r3, [r1, #20]
 800686a:	600f      	str	r7, [r1, #0]
 800686c:	bf18      	it	ne
 800686e:	2300      	movne	r3, #0
 8006870:	eba6 0807 	sub.w	r8, r6, r7
 8006874:	608b      	str	r3, [r1, #8]
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	dd9c      	ble.n	80067b6 <__sflush_r+0x1a>
 800687c:	4643      	mov	r3, r8
 800687e:	463a      	mov	r2, r7
 8006880:	6a21      	ldr	r1, [r4, #32]
 8006882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006884:	4628      	mov	r0, r5
 8006886:	47b0      	blx	r6
 8006888:	2800      	cmp	r0, #0
 800688a:	dc06      	bgt.n	800689a <__sflush_r+0xfe>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	e78e      	b.n	80067b8 <__sflush_r+0x1c>
 800689a:	4407      	add	r7, r0
 800689c:	eba8 0800 	sub.w	r8, r8, r0
 80068a0:	e7e9      	b.n	8006876 <__sflush_r+0xda>
 80068a2:	bf00      	nop
 80068a4:	20400001 	.word	0x20400001

080068a8 <_fflush_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	690b      	ldr	r3, [r1, #16]
 80068ac:	4605      	mov	r5, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	b1db      	cbz	r3, 80068ea <_fflush_r+0x42>
 80068b2:	b118      	cbz	r0, 80068bc <_fflush_r+0x14>
 80068b4:	6983      	ldr	r3, [r0, #24]
 80068b6:	b90b      	cbnz	r3, 80068bc <_fflush_r+0x14>
 80068b8:	f7ff fa38 	bl	8005d2c <__sinit>
 80068bc:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <_fflush_r+0x48>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	d109      	bne.n	80068d6 <_fflush_r+0x2e>
 80068c2:	686c      	ldr	r4, [r5, #4]
 80068c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c8:	b17b      	cbz	r3, 80068ea <_fflush_r+0x42>
 80068ca:	4621      	mov	r1, r4
 80068cc:	4628      	mov	r0, r5
 80068ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d2:	f7ff bf63 	b.w	800679c <__sflush_r>
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <_fflush_r+0x4c>)
 80068d8:	429c      	cmp	r4, r3
 80068da:	d101      	bne.n	80068e0 <_fflush_r+0x38>
 80068dc:	68ac      	ldr	r4, [r5, #8]
 80068de:	e7f1      	b.n	80068c4 <_fflush_r+0x1c>
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <_fflush_r+0x50>)
 80068e2:	429c      	cmp	r4, r3
 80068e4:	bf08      	it	eq
 80068e6:	68ec      	ldreq	r4, [r5, #12]
 80068e8:	e7ec      	b.n	80068c4 <_fflush_r+0x1c>
 80068ea:	2000      	movs	r0, #0
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	bf00      	nop
 80068f0:	08006df4 	.word	0x08006df4
 80068f4:	08006e14 	.word	0x08006e14
 80068f8:	08006dd4 	.word	0x08006dd4

080068fc <_lseek_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4c07      	ldr	r4, [pc, #28]	; (800691c <_lseek_r+0x20>)
 8006900:	4605      	mov	r5, r0
 8006902:	4608      	mov	r0, r1
 8006904:	4611      	mov	r1, r2
 8006906:	2200      	movs	r2, #0
 8006908:	6022      	str	r2, [r4, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	f7fc ff5e 	bl	80037cc <_lseek>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_lseek_r+0x1e>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	b103      	cbz	r3, 800691a <_lseek_r+0x1e>
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20014384 	.word	0x20014384

08006920 <__swhatbuf_r>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	460e      	mov	r6, r1
 8006924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006928:	2900      	cmp	r1, #0
 800692a:	b096      	sub	sp, #88	; 0x58
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	da07      	bge.n	8006942 <__swhatbuf_r+0x22>
 8006932:	2300      	movs	r3, #0
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	89b3      	ldrh	r3, [r6, #12]
 8006938:	061a      	lsls	r2, r3, #24
 800693a:	d410      	bmi.n	800695e <__swhatbuf_r+0x3e>
 800693c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006940:	e00e      	b.n	8006960 <__swhatbuf_r+0x40>
 8006942:	466a      	mov	r2, sp
 8006944:	f000 f864 	bl	8006a10 <_fstat_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	dbf2      	blt.n	8006932 <__swhatbuf_r+0x12>
 800694c:	9a01      	ldr	r2, [sp, #4]
 800694e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006956:	425a      	negs	r2, r3
 8006958:	415a      	adcs	r2, r3
 800695a:	602a      	str	r2, [r5, #0]
 800695c:	e7ee      	b.n	800693c <__swhatbuf_r+0x1c>
 800695e:	2340      	movs	r3, #64	; 0x40
 8006960:	2000      	movs	r0, #0
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	b016      	add	sp, #88	; 0x58
 8006966:	bd70      	pop	{r4, r5, r6, pc}

08006968 <__smakebuf_r>:
 8006968:	898b      	ldrh	r3, [r1, #12]
 800696a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800696c:	079d      	lsls	r5, r3, #30
 800696e:	4606      	mov	r6, r0
 8006970:	460c      	mov	r4, r1
 8006972:	d507      	bpl.n	8006984 <__smakebuf_r+0x1c>
 8006974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	2301      	movs	r3, #1
 800697e:	6163      	str	r3, [r4, #20]
 8006980:	b002      	add	sp, #8
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	ab01      	add	r3, sp, #4
 8006986:	466a      	mov	r2, sp
 8006988:	f7ff ffca 	bl	8006920 <__swhatbuf_r>
 800698c:	9900      	ldr	r1, [sp, #0]
 800698e:	4605      	mov	r5, r0
 8006990:	4630      	mov	r0, r6
 8006992:	f7ff faab 	bl	8005eec <_malloc_r>
 8006996:	b948      	cbnz	r0, 80069ac <__smakebuf_r+0x44>
 8006998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699c:	059a      	lsls	r2, r3, #22
 800699e:	d4ef      	bmi.n	8006980 <__smakebuf_r+0x18>
 80069a0:	f023 0303 	bic.w	r3, r3, #3
 80069a4:	f043 0302 	orr.w	r3, r3, #2
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	e7e3      	b.n	8006974 <__smakebuf_r+0xc>
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <__smakebuf_r+0x7c>)
 80069ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	6020      	str	r0, [r4, #0]
 80069b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	9b00      	ldr	r3, [sp, #0]
 80069bc:	6163      	str	r3, [r4, #20]
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	6120      	str	r0, [r4, #16]
 80069c2:	b15b      	cbz	r3, 80069dc <__smakebuf_r+0x74>
 80069c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 f833 	bl	8006a34 <_isatty_r>
 80069ce:	b128      	cbz	r0, 80069dc <__smakebuf_r+0x74>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	431d      	orrs	r5, r3
 80069e0:	81a5      	strh	r5, [r4, #12]
 80069e2:	e7cd      	b.n	8006980 <__smakebuf_r+0x18>
 80069e4:	08005cf5 	.word	0x08005cf5

080069e8 <__malloc_lock>:
 80069e8:	4770      	bx	lr

080069ea <__malloc_unlock>:
 80069ea:	4770      	bx	lr

080069ec <_read_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4c07      	ldr	r4, [pc, #28]	; (8006a0c <_read_r+0x20>)
 80069f0:	4605      	mov	r5, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	4611      	mov	r1, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	6022      	str	r2, [r4, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fc fe86 	bl	800370c <_read>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_read_r+0x1e>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_read_r+0x1e>
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20014384 	.word	0x20014384

08006a10 <_fstat_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4c07      	ldr	r4, [pc, #28]	; (8006a30 <_fstat_r+0x20>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4605      	mov	r5, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	f7fc feba 	bl	8003796 <_fstat>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d102      	bne.n	8006a2c <_fstat_r+0x1c>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	b103      	cbz	r3, 8006a2c <_fstat_r+0x1c>
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	20014384 	.word	0x20014384

08006a34 <_isatty_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4c06      	ldr	r4, [pc, #24]	; (8006a50 <_isatty_r+0x1c>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	f7fc feb9 	bl	80037b6 <_isatty>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_isatty_r+0x1a>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_isatty_r+0x1a>
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20014384 	.word	0x20014384

08006a54 <_init>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr

08006a60 <_fini>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr
