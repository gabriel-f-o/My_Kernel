
My_Kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a8  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf8  08009cf8  000203f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d00  08009d00  000203f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f0  20000000  08009d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a94  200003f0  0800a0f8  000203f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20014e84  0800a0f8  00024e84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY
 12 .lfs          000a0000  08060000  08060000  00030000  2**0
                  ALLOC
 13 .debug_info   000304a1  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000621e  00000000  00000000  000508c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001170  00000000  00000000  00056ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f6a  00000000  00000000  00057c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017ebf  00000000  00000000  0007fbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d01c4  00000000  00000000  00097a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167c3d  2**0
                  CONTENTS, READONLY
 20 .debug_loc    00012845  00000000  00000000  00167cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002b38  00000000  00000000  0017a500  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  000040a8  00000000  00000000  0017d038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003f0 	.word	0x200003f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a38 	.word	0x08008a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003f4 	.word	0x200003f4
 80001cc:	08008a38 	.word	0x08008a38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b986 	b.w	80005c4 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9e08      	ldr	r6, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	4688      	mov	r8, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14b      	bne.n	800039e <__udivmoddi4+0xa6>
 8000306:	428a      	cmp	r2, r1
 8000308:	4615      	mov	r5, r2
 800030a:	d967      	bls.n	80003dc <__udivmoddi4+0xe4>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b14a      	cbz	r2, 8000326 <__udivmoddi4+0x2e>
 8000312:	f1c2 0720 	rsb	r7, r2, #32
 8000316:	fa01 f302 	lsl.w	r3, r1, r2
 800031a:	fa20 f707 	lsr.w	r7, r0, r7
 800031e:	4095      	lsls	r5, r2
 8000320:	ea47 0803 	orr.w	r8, r7, r3
 8000324:	4094      	lsls	r4, r2
 8000326:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000330:	fa1f fc85 	uxth.w	ip, r5
 8000334:	fb0e 8817 	mls	r8, lr, r7, r8
 8000338:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800033c:	fb07 f10c 	mul.w	r1, r7, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x60>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f107 30ff 	add.w	r0, r7, #4294967295
 800034a:	f080 811b 	bcs.w	8000584 <__udivmoddi4+0x28c>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 8118 	bls.w	8000584 <__udivmoddi4+0x28c>
 8000354:	3f02      	subs	r7, #2
 8000356:	442b      	add	r3, r5
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000368:	fb00 fc0c 	mul.w	ip, r0, ip
 800036c:	45a4      	cmp	ip, r4
 800036e:	d909      	bls.n	8000384 <__udivmoddi4+0x8c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	f080 8107 	bcs.w	8000588 <__udivmoddi4+0x290>
 800037a:	45a4      	cmp	ip, r4
 800037c:	f240 8104 	bls.w	8000588 <__udivmoddi4+0x290>
 8000380:	3802      	subs	r0, #2
 8000382:	442c      	add	r4, r5
 8000384:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000388:	eba4 040c 	sub.w	r4, r4, ip
 800038c:	2700      	movs	r7, #0
 800038e:	b11e      	cbz	r6, 8000398 <__udivmoddi4+0xa0>
 8000390:	40d4      	lsrs	r4, r2
 8000392:	2300      	movs	r3, #0
 8000394:	e9c6 4300 	strd	r4, r3, [r6]
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	428b      	cmp	r3, r1
 80003a0:	d909      	bls.n	80003b6 <__udivmoddi4+0xbe>
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	f000 80eb 	beq.w	800057e <__udivmoddi4+0x286>
 80003a8:	2700      	movs	r7, #0
 80003aa:	e9c6 0100 	strd	r0, r1, [r6]
 80003ae:	4638      	mov	r0, r7
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	fab3 f783 	clz	r7, r3
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d147      	bne.n	800044e <__udivmoddi4+0x156>
 80003be:	428b      	cmp	r3, r1
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xd0>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 80fa 	bhi.w	80005bc <__udivmoddi4+0x2c4>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb61 0303 	sbc.w	r3, r1, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4698      	mov	r8, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d0e0      	beq.n	8000398 <__udivmoddi4+0xa0>
 80003d6:	e9c6 4800 	strd	r4, r8, [r6]
 80003da:	e7dd      	b.n	8000398 <__udivmoddi4+0xa0>
 80003dc:	b902      	cbnz	r2, 80003e0 <__udivmoddi4+0xe8>
 80003de:	deff      	udf	#255	; 0xff
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f040 808f 	bne.w	8000508 <__udivmoddi4+0x210>
 80003ea:	1b49      	subs	r1, r1, r5
 80003ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f0:	fa1f f885 	uxth.w	r8, r5
 80003f4:	2701      	movs	r7, #1
 80003f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80003fa:	0c23      	lsrs	r3, r4, #16
 80003fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb08 f10c 	mul.w	r1, r8, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x124>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x122>
 8000414:	4299      	cmp	r1, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2bc>
 800041a:	4684      	mov	ip, r0
 800041c:	1a59      	subs	r1, r3, r1
 800041e:	b2a3      	uxth	r3, r4
 8000420:	fbb1 f0fe 	udiv	r0, r1, lr
 8000424:	fb0e 1410 	mls	r4, lr, r0, r1
 8000428:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800042c:	fb08 f800 	mul.w	r8, r8, r0
 8000430:	45a0      	cmp	r8, r4
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x14c>
 8000434:	192c      	adds	r4, r5, r4
 8000436:	f100 33ff 	add.w	r3, r0, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x14a>
 800043c:	45a0      	cmp	r8, r4
 800043e:	f200 80b6 	bhi.w	80005ae <__udivmoddi4+0x2b6>
 8000442:	4618      	mov	r0, r3
 8000444:	eba4 0408 	sub.w	r4, r4, r8
 8000448:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800044c:	e79f      	b.n	800038e <__udivmoddi4+0x96>
 800044e:	f1c7 0c20 	rsb	ip, r7, #32
 8000452:	40bb      	lsls	r3, r7
 8000454:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000458:	ea4e 0e03 	orr.w	lr, lr, r3
 800045c:	fa01 f407 	lsl.w	r4, r1, r7
 8000460:	fa20 f50c 	lsr.w	r5, r0, ip
 8000464:	fa21 f30c 	lsr.w	r3, r1, ip
 8000468:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800046c:	4325      	orrs	r5, r4
 800046e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	fb08 3319 	mls	r3, r8, r9, r3
 8000478:	fa1f fa8e 	uxth.w	sl, lr
 800047c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000480:	fb09 f40a 	mul.w	r4, r9, sl
 8000484:	429c      	cmp	r4, r3
 8000486:	fa02 f207 	lsl.w	r2, r2, r7
 800048a:	fa00 f107 	lsl.w	r1, r0, r7
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b0>
 8000490:	eb1e 0303 	adds.w	r3, lr, r3
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	f080 8087 	bcs.w	80005aa <__udivmoddi4+0x2b2>
 800049c:	429c      	cmp	r4, r3
 800049e:	f240 8084 	bls.w	80005aa <__udivmoddi4+0x2b2>
 80004a2:	f1a9 0902 	sub.w	r9, r9, #2
 80004a6:	4473      	add	r3, lr
 80004a8:	1b1b      	subs	r3, r3, r4
 80004aa:	b2ad      	uxth	r5, r5
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004bc:	45a2      	cmp	sl, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1da>
 80004c0:	eb1e 0404 	adds.w	r4, lr, r4
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d26b      	bcs.n	80005a2 <__udivmoddi4+0x2aa>
 80004ca:	45a2      	cmp	sl, r4
 80004cc:	d969      	bls.n	80005a2 <__udivmoddi4+0x2aa>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4474      	add	r4, lr
 80004d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	eba4 040a 	sub.w	r4, r4, sl
 80004de:	454c      	cmp	r4, r9
 80004e0:	46c2      	mov	sl, r8
 80004e2:	464b      	mov	r3, r9
 80004e4:	d354      	bcc.n	8000590 <__udivmoddi4+0x298>
 80004e6:	d051      	beq.n	800058c <__udivmoddi4+0x294>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d069      	beq.n	80005c0 <__udivmoddi4+0x2c8>
 80004ec:	ebb1 050a 	subs.w	r5, r1, sl
 80004f0:	eb64 0403 	sbc.w	r4, r4, r3
 80004f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	40fc      	lsrs	r4, r7
 80004fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000500:	e9c6 5400 	strd	r5, r4, [r6]
 8000504:	2700      	movs	r7, #0
 8000506:	e747      	b.n	8000398 <__udivmoddi4+0xa0>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f703 	lsr.w	r7, r0, r3
 8000510:	4095      	lsls	r5, r2
 8000512:	fa01 f002 	lsl.w	r0, r1, r2
 8000516:	fa21 f303 	lsr.w	r3, r1, r3
 800051a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800051e:	4338      	orrs	r0, r7
 8000520:	0c01      	lsrs	r1, r0, #16
 8000522:	fbb3 f7fe 	udiv	r7, r3, lr
 8000526:	fa1f f885 	uxth.w	r8, r5
 800052a:	fb0e 3317 	mls	r3, lr, r7, r3
 800052e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000532:	fb07 f308 	mul.w	r3, r7, r8
 8000536:	428b      	cmp	r3, r1
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x256>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f107 3cff 	add.w	ip, r7, #4294967295
 8000544:	d22f      	bcs.n	80005a6 <__udivmoddi4+0x2ae>
 8000546:	428b      	cmp	r3, r1
 8000548:	d92d      	bls.n	80005a6 <__udivmoddi4+0x2ae>
 800054a:	3f02      	subs	r7, #2
 800054c:	4429      	add	r1, r5
 800054e:	1acb      	subs	r3, r1, r3
 8000550:	b281      	uxth	r1, r0
 8000552:	fbb3 f0fe 	udiv	r0, r3, lr
 8000556:	fb0e 3310 	mls	r3, lr, r0, r3
 800055a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055e:	fb00 f308 	mul.w	r3, r0, r8
 8000562:	428b      	cmp	r3, r1
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x27e>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f100 3cff 	add.w	ip, r0, #4294967295
 800056c:	d217      	bcs.n	800059e <__udivmoddi4+0x2a6>
 800056e:	428b      	cmp	r3, r1
 8000570:	d915      	bls.n	800059e <__udivmoddi4+0x2a6>
 8000572:	3802      	subs	r0, #2
 8000574:	4429      	add	r1, r5
 8000576:	1ac9      	subs	r1, r1, r3
 8000578:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800057c:	e73b      	b.n	80003f6 <__udivmoddi4+0xfe>
 800057e:	4637      	mov	r7, r6
 8000580:	4630      	mov	r0, r6
 8000582:	e709      	b.n	8000398 <__udivmoddi4+0xa0>
 8000584:	4607      	mov	r7, r0
 8000586:	e6e7      	b.n	8000358 <__udivmoddi4+0x60>
 8000588:	4618      	mov	r0, r3
 800058a:	e6fb      	b.n	8000384 <__udivmoddi4+0x8c>
 800058c:	4541      	cmp	r1, r8
 800058e:	d2ab      	bcs.n	80004e8 <__udivmoddi4+0x1f0>
 8000590:	ebb8 0a02 	subs.w	sl, r8, r2
 8000594:	eb69 020e 	sbc.w	r2, r9, lr
 8000598:	3801      	subs	r0, #1
 800059a:	4613      	mov	r3, r2
 800059c:	e7a4      	b.n	80004e8 <__udivmoddi4+0x1f0>
 800059e:	4660      	mov	r0, ip
 80005a0:	e7e9      	b.n	8000576 <__udivmoddi4+0x27e>
 80005a2:	4618      	mov	r0, r3
 80005a4:	e795      	b.n	80004d2 <__udivmoddi4+0x1da>
 80005a6:	4667      	mov	r7, ip
 80005a8:	e7d1      	b.n	800054e <__udivmoddi4+0x256>
 80005aa:	4681      	mov	r9, r0
 80005ac:	e77c      	b.n	80004a8 <__udivmoddi4+0x1b0>
 80005ae:	3802      	subs	r0, #2
 80005b0:	442c      	add	r4, r5
 80005b2:	e747      	b.n	8000444 <__udivmoddi4+0x14c>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	442b      	add	r3, r5
 80005ba:	e72f      	b.n	800041c <__udivmoddi4+0x124>
 80005bc:	4638      	mov	r0, r7
 80005be:	e708      	b.n	80003d2 <__udivmoddi4+0xda>
 80005c0:	4637      	mov	r7, r6
 80005c2:	e6e9      	b.n	8000398 <__udivmoddi4+0xa0>

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <cli_is_terminator>:
/**********************************************
 * PRIVATE FUNCTIONS
 *********************************************/
 
static inline bool cli_is_terminator(cliElement_t const * const e){
    if(e == NULL) return false;
 80005c8:	b178      	cbz	r0, 80005ea <cli_is_terminator+0x22>
    return (e->name == NULL && e->action == NULL && e->args == NULL && e->desc == NULL && e->argsDesc == NULL);
 80005ca:	6803      	ldr	r3, [r0, #0]
 80005cc:	b953      	cbnz	r3, 80005e4 <cli_is_terminator+0x1c>
 80005ce:	6882      	ldr	r2, [r0, #8]
 80005d0:	b942      	cbnz	r2, 80005e4 <cli_is_terminator+0x1c>
 80005d2:	68c3      	ldr	r3, [r0, #12]
 80005d4:	b933      	cbnz	r3, 80005e4 <cli_is_terminator+0x1c>
 80005d6:	6902      	ldr	r2, [r0, #16]
 80005d8:	b932      	cbnz	r2, 80005e8 <cli_is_terminator+0x20>
 80005da:	6940      	ldr	r0, [r0, #20]
 80005dc:	fab0 f080 	clz	r0, r0
 80005e0:	0940      	lsrs	r0, r0, #5
 80005e2:	4770      	bx	lr
 80005e4:	2000      	movs	r0, #0
 80005e6:	4770      	bx	lr
 80005e8:	4618      	mov	r0, r3
}
 80005ea:	4770      	bx	lr

080005ec <cli_arg_str_len>:
    DBG_PRINTLN("%s", ret == NULL ? "Not found" : "Sub menu or action found" );
    
    return ret;
}

static int32_t cli_arg_str_len(char* arg){
 80005ec:	b510      	push	{r4, lr}
    if(arg ==  NULL) return -1;
 80005ee:	b330      	cbz	r0, 800063e <cli_arg_str_len+0x52>
    
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 80005f0:	7801      	ldrb	r1, [r0, #0]
 80005f2:	297b      	cmp	r1, #123	; 0x7b
 80005f4:	d014      	beq.n	8000620 <cli_arg_str_len+0x34>
 80005f6:	f1a1 0322 	sub.w	r3, r1, #34	; 0x22
 80005fa:	425a      	negs	r2, r3
 80005fc:	415a      	adcs	r2, r3
 80005fe:	4402      	add	r2, r0
    
    while(1){
        switch(arg[0]){
 8000600:	2922      	cmp	r1, #34	; 0x22
 8000602:	eba2 0300 	sub.w	r3, r2, r0
 8000606:	f812 4b01 	ldrb.w	r4, [r2], #1
 800060a:	d001      	beq.n	8000610 <cli_arg_str_len+0x24>
 800060c:	297b      	cmp	r1, #123	; 0x7b
 800060e:	d112      	bne.n	8000636 <cli_arg_str_len+0x4a>
            
            case '{' :
            case '"' : {
                if(arg[i] == '\0') return -1;
 8000610:	b1ac      	cbz	r4, 800063e <cli_arg_str_len+0x52>
                
                if(arg[0] == '{' && arg[i] == '}'){
 8000612:	297b      	cmp	r1, #123	; 0x7b
 8000614:	d106      	bne.n	8000624 <cli_arg_str_len+0x38>
 8000616:	2c7d      	cmp	r4, #125	; 0x7d
 8000618:	d1f2      	bne.n	8000600 <cli_arg_str_len+0x14>
                    return i+1;
                }
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
                    return i+1;
 800061a:	3301      	adds	r3, #1
        
        i++;
    }
    
    return -1;
}
 800061c:	4618      	mov	r0, r3
 800061e:	bd10      	pop	{r4, pc}
    int32_t i = ( (arg[0] != '{' && arg[0] != '"') ? 0 : 1 );
 8000620:	2201      	movs	r2, #1
 8000622:	e7ec      	b.n	80005fe <cli_arg_str_len+0x12>
                else if(arg[0] == '"' && arg[i] == '"' && arg[i-1] != '\\'){
 8000624:	2922      	cmp	r1, #34	; 0x22
 8000626:	d1eb      	bne.n	8000600 <cli_arg_str_len+0x14>
 8000628:	2c22      	cmp	r4, #34	; 0x22
 800062a:	d1e9      	bne.n	8000600 <cli_arg_str_len+0x14>
 800062c:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8000630:	2c5c      	cmp	r4, #92	; 0x5c
 8000632:	d0e5      	beq.n	8000600 <cli_arg_str_len+0x14>
 8000634:	e7f1      	b.n	800061a <cli_arg_str_len+0x2e>
                if(arg[i] == ' ' || arg[i] == '\0') return i;
 8000636:	f014 0fdf 	tst.w	r4, #223	; 0xdf
 800063a:	d1e1      	bne.n	8000600 <cli_arg_str_len+0x14>
 800063c:	e7ee      	b.n	800061c <cli_arg_str_len+0x30>
    if(arg ==  NULL) return -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	e7eb      	b.n	800061c <cli_arg_str_len+0x30>

08000644 <cli_go_to_next_argument>:

static char* cli_go_to_next_argument(char* arg){
 8000644:	b510      	push	{r4, lr}
    if(arg == NULL) return NULL;
 8000646:	4604      	mov	r4, r0
 8000648:	b148      	cbz	r0, 800065e <cli_go_to_next_argument+0x1a>
    
    int32_t size = cli_arg_str_len(arg);
 800064a:	f7ff ffcf 	bl	80005ec <cli_arg_str_len>
    
    if(size == -1) return NULL;
 800064e:	1c43      	adds	r3, r0, #1
 8000650:	d007      	beq.n	8000662 <cli_go_to_next_argument+0x1e>
    
    arg += size;
 8000652:	4420      	add	r0, r4
 8000654:	4604      	mov	r4, r0
 8000656:	3001      	adds	r0, #1
    
    while(arg[0] != '\0'){ 
        //if(arg[0] == '-' || arg[0] == '{' || arg[0] == '"' || ('0' <= arg[0] && arg[0] <= '9')) break;
        if(arg[0] != ' ') break;
 8000658:	7823      	ldrb	r3, [r4, #0]
 800065a:	2b20      	cmp	r3, #32
 800065c:	d0fa      	beq.n	8000654 <cli_go_to_next_argument+0x10>
        arg++;
    }
    
    return arg;
}
 800065e:	4620      	mov	r0, r4
 8000660:	bd10      	pop	{r4, pc}
    if(arg == NULL) return NULL;
 8000662:	2400      	movs	r4, #0
 8000664:	e7fb      	b.n	800065e <cli_go_to_next_argument+0x1a>

08000666 <cli_buff_element_is_hex>:
    
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
    cli_print_menu(currentMenu);
}

static bool cli_buff_element_is_hex(char* base, size_t argLen){
 8000666:	b570      	push	{r4, r5, r6, lr}
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 8000668:	7803      	ldrb	r3, [r0, #0]
 800066a:	2b30      	cmp	r3, #48	; 0x30
static bool cli_buff_element_is_hex(char* base, size_t argLen){
 800066c:	4604      	mov	r4, r0
 800066e:	460e      	mov	r6, r1
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 8000670:	d004      	beq.n	800067c <cli_buff_element_is_hex+0x16>
 8000672:	4426      	add	r6, r4
    
    for(size_t i = 0; i < argLen; i++){
 8000674:	42b4      	cmp	r4, r6
 8000676:	d110      	bne.n	800069a <cli_buff_element_is_hex+0x34>
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
    }
    
    return false;
 8000678:	2000      	movs	r0, #0
 800067a:	e00d      	b.n	8000698 <cli_buff_element_is_hex+0x32>
    if(base[0] == '0' && tolower(base[1]) == 'x') return true;
 800067c:	7845      	ldrb	r5, [r0, #1]
 800067e:	f007 f915 	bl	80078ac <__locale_ctype_ptr>
 8000682:	4428      	add	r0, r5
 8000684:	462b      	mov	r3, r5
 8000686:	7842      	ldrb	r2, [r0, #1]
 8000688:	f002 0203 	and.w	r2, r2, #3
 800068c:	2a01      	cmp	r2, #1
 800068e:	bf08      	it	eq
 8000690:	3320      	addeq	r3, #32
 8000692:	2b78      	cmp	r3, #120	; 0x78
 8000694:	d1ed      	bne.n	8000672 <cli_buff_element_is_hex+0xc>
 8000696:	2001      	movs	r0, #1
}
 8000698:	bd70      	pop	{r4, r5, r6, pc}
        if('a' <= tolower(base[i]) && tolower(base[i]) <= 'f') return true;
 800069a:	7825      	ldrb	r5, [r4, #0]
 800069c:	f007 f906 	bl	80078ac <__locale_ctype_ptr>
 80006a0:	4428      	add	r0, r5
 80006a2:	462b      	mov	r3, r5
 80006a4:	7842      	ldrb	r2, [r0, #1]
 80006a6:	f002 0203 	and.w	r2, r2, #3
 80006aa:	2a01      	cmp	r2, #1
 80006ac:	bf08      	it	eq
 80006ae:	3320      	addeq	r3, #32
 80006b0:	2b60      	cmp	r3, #96	; 0x60
 80006b2:	dc01      	bgt.n	80006b8 <cli_buff_element_is_hex+0x52>
 80006b4:	3401      	adds	r4, #1
 80006b6:	e7dd      	b.n	8000674 <cli_buff_element_is_hex+0xe>
 80006b8:	7825      	ldrb	r5, [r4, #0]
 80006ba:	f007 f8f7 	bl	80078ac <__locale_ctype_ptr>
 80006be:	4428      	add	r0, r5
 80006c0:	462b      	mov	r3, r5
 80006c2:	7842      	ldrb	r2, [r0, #1]
 80006c4:	f002 0203 	and.w	r2, r2, #3
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	bf08      	it	eq
 80006cc:	3320      	addeq	r3, #32
 80006ce:	2b66      	cmp	r3, #102	; 0x66
 80006d0:	dcf0      	bgt.n	80006b4 <cli_buff_element_is_hex+0x4e>
 80006d2:	e7e0      	b.n	8000696 <cli_buff_element_is_hex+0x30>

080006d4 <cli_verify_int.isra.2>:
static bool cli_verify_int(char* tkn, bool isUnsigned, bool printEn){
 80006d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006d8:	4607      	mov	r7, r0
 80006da:	460e      	mov	r6, r1
    int32_t len = cli_arg_str_len(tkn);
 80006dc:	f7ff ff86 	bl	80005ec <cli_arg_str_len>
 80006e0:	4680      	mov	r8, r0
    if(isUnsigned == false && tkn[0] == '-'){
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d170      	bne.n	80007c8 <cli_verify_int.isra.2+0xf4>
 80006e6:	783b      	ldrb	r3, [r7, #0]
 80006e8:	2b2d      	cmp	r3, #45	; 0x2d
 80006ea:	d170      	bne.n	80007ce <cli_verify_int.isra.2+0xfa>
        if(len == 1) {
 80006ec:	2801      	cmp	r0, #1
 80006ee:	d171      	bne.n	80007d4 <cli_verify_int.isra.2+0x100>
            return false;
 80006f0:	2000      	movs	r0, #0
}
 80006f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 80006f6:	7825      	ldrb	r5, [r4, #0]
 80006f8:	f007 f8d8 	bl	80078ac <__locale_ctype_ptr>
 80006fc:	4428      	add	r0, r5
 80006fe:	462b      	mov	r3, r5
 8000700:	7842      	ldrb	r2, [r0, #1]
 8000702:	f002 0203 	and.w	r2, r2, #3
 8000706:	2a01      	cmp	r2, #1
 8000708:	bf08      	it	eq
 800070a:	3320      	addeq	r3, #32
 800070c:	2b78      	cmp	r3, #120	; 0x78
 800070e:	d00a      	beq.n	8000726 <cli_verify_int.isra.2+0x52>
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000710:	7825      	ldrb	r5, [r4, #0]
 8000712:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8000716:	2b09      	cmp	r3, #9
 8000718:	d82d      	bhi.n	8000776 <cli_verify_int.isra.2+0xa2>
 800071a:	3401      	adds	r4, #1
    while(i < len){
 800071c:	1be3      	subs	r3, r4, r7
 800071e:	4598      	cmp	r8, r3
 8000720:	dce9      	bgt.n	80006f6 <cli_verify_int.isra.2+0x22>
    return true;
 8000722:	2001      	movs	r0, #1
 8000724:	e7e5      	b.n	80006f2 <cli_verify_int.isra.2+0x1e>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '\0') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000726:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800072a:	2b30      	cmp	r3, #48	; 0x30
 800072c:	d1e0      	bne.n	80006f0 <cli_verify_int.isra.2+0x1c>
 800072e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8000732:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8000736:	d1db      	bne.n	80006f0 <cli_verify_int.isra.2+0x1c>
 8000738:	7865      	ldrb	r5, [r4, #1]
 800073a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800073e:	2b09      	cmp	r3, #9
 8000740:	d9e6      	bls.n	8000710 <cli_verify_int.isra.2+0x3c>
 8000742:	f007 f8b3 	bl	80078ac <__locale_ctype_ptr>
 8000746:	4428      	add	r0, r5
 8000748:	462b      	mov	r3, r5
 800074a:	7842      	ldrb	r2, [r0, #1]
 800074c:	f002 0203 	and.w	r2, r2, #3
 8000750:	2a01      	cmp	r2, #1
 8000752:	bf08      	it	eq
 8000754:	3320      	addeq	r3, #32
 8000756:	2b60      	cmp	r3, #96	; 0x60
 8000758:	ddca      	ble.n	80006f0 <cli_verify_int.isra.2+0x1c>
 800075a:	7865      	ldrb	r5, [r4, #1]
 800075c:	f007 f8a6 	bl	80078ac <__locale_ctype_ptr>
 8000760:	4428      	add	r0, r5
 8000762:	462b      	mov	r3, r5
 8000764:	7842      	ldrb	r2, [r0, #1]
 8000766:	f002 0203 	and.w	r2, r2, #3
 800076a:	2a01      	cmp	r2, #1
 800076c:	bf08      	it	eq
 800076e:	3320      	addeq	r3, #32
 8000770:	2b66      	cmp	r3, #102	; 0x66
 8000772:	ddcd      	ble.n	8000710 <cli_verify_int.isra.2+0x3c>
 8000774:	e7bc      	b.n	80006f0 <cli_verify_int.isra.2+0x1c>
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ( is_negative == false && ( ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') || tolower(tkn[i]) == 'x') ) ) ) {
 8000776:	2e00      	cmp	r6, #0
 8000778:	d1ba      	bne.n	80006f0 <cli_verify_int.isra.2+0x1c>
 800077a:	f007 f897 	bl	80078ac <__locale_ctype_ptr>
 800077e:	4428      	add	r0, r5
 8000780:	462b      	mov	r3, r5
 8000782:	7842      	ldrb	r2, [r0, #1]
 8000784:	f002 0203 	and.w	r2, r2, #3
 8000788:	2a01      	cmp	r2, #1
 800078a:	bf08      	it	eq
 800078c:	3320      	addeq	r3, #32
 800078e:	2b60      	cmp	r3, #96	; 0x60
 8000790:	dc0d      	bgt.n	80007ae <cli_verify_int.isra.2+0xda>
 8000792:	7825      	ldrb	r5, [r4, #0]
 8000794:	f007 f88a 	bl	80078ac <__locale_ctype_ptr>
 8000798:	4428      	add	r0, r5
 800079a:	462b      	mov	r3, r5
 800079c:	7842      	ldrb	r2, [r0, #1]
 800079e:	f002 0203 	and.w	r2, r2, #3
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	d100      	bne.n	80007a8 <cli_verify_int.isra.2+0xd4>
 80007a6:	3320      	adds	r3, #32
 80007a8:	2b78      	cmp	r3, #120	; 0x78
 80007aa:	d0b6      	beq.n	800071a <cli_verify_int.isra.2+0x46>
 80007ac:	e7a0      	b.n	80006f0 <cli_verify_int.isra.2+0x1c>
 80007ae:	7825      	ldrb	r5, [r4, #0]
 80007b0:	f007 f87c 	bl	80078ac <__locale_ctype_ptr>
 80007b4:	4428      	add	r0, r5
 80007b6:	7843      	ldrb	r3, [r0, #1]
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	2b01      	cmp	r3, #1
 80007be:	bf08      	it	eq
 80007c0:	3520      	addeq	r5, #32
 80007c2:	2d66      	cmp	r5, #102	; 0x66
 80007c4:	dce5      	bgt.n	8000792 <cli_verify_int.isra.2+0xbe>
 80007c6:	e7a8      	b.n	800071a <cli_verify_int.isra.2+0x46>
    int32_t i = 0;
 80007c8:	2400      	movs	r4, #0
        is_negative = true;
 80007ca:	4626      	mov	r6, r4
 80007cc:	e000      	b.n	80007d0 <cli_verify_int.isra.2+0xfc>
    int32_t i = 0;
 80007ce:	4634      	mov	r4, r6
 80007d0:	443c      	add	r4, r7
 80007d2:	e7a3      	b.n	800071c <cli_verify_int.isra.2+0x48>
        i++;
 80007d4:	2401      	movs	r4, #1
 80007d6:	e7f8      	b.n	80007ca <cli_verify_int.isra.2+0xf6>

080007d8 <cli_verify_buffer.isra.3>:
static bool cli_verify_buffer(char* tkn, bool printEn){
 80007d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(tkn == NULL) return false;
 80007dc:	4605      	mov	r5, r0
 80007de:	b910      	cbnz	r0, 80007e6 <cli_verify_buffer.isra.3+0xe>
 80007e0:	2000      	movs	r0, #0
}
 80007e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(tkn[0] != '"' && tkn[0] != '{') {
 80007e6:	7804      	ldrb	r4, [r0, #0]
 80007e8:	2c22      	cmp	r4, #34	; 0x22
 80007ea:	d001      	beq.n	80007f0 <cli_verify_buffer.isra.3+0x18>
 80007ec:	2c7b      	cmp	r4, #123	; 0x7b
 80007ee:	d1f7      	bne.n	80007e0 <cli_verify_buffer.isra.3+0x8>
    int32_t len = cli_arg_str_len(tkn);
 80007f0:	4628      	mov	r0, r5
 80007f2:	f7ff fefb 	bl	80005ec <cli_arg_str_len>
    if(len == -1) {
 80007f6:	1c43      	adds	r3, r0, #1
    int32_t len = cli_arg_str_len(tkn);
 80007f8:	4607      	mov	r7, r0
    if(len == -1) {
 80007fa:	d0f1      	beq.n	80007e0 <cli_verify_buffer.isra.3+0x8>
    if(tkn[0] == '"') return true;
 80007fc:	2c22      	cmp	r4, #34	; 0x22
 80007fe:	d16f      	bne.n	80008e0 <cli_verify_buffer.isra.3+0x108>
 8000800:	2001      	movs	r0, #1
 8000802:	e7ee      	b.n	80007e2 <cli_verify_buffer.isra.3+0xa>
        if(tkn[i] == '}') break; 
 8000804:	5d2e      	ldrb	r6, [r5, r4]
 8000806:	2e7d      	cmp	r6, #125	; 0x7d
 8000808:	d0fa      	beq.n	8000800 <cli_verify_buffer.isra.3+0x28>
        if(tkn[i] == ' ') continue;
 800080a:	2e20      	cmp	r6, #32
 800080c:	d103      	bne.n	8000816 <cli_verify_buffer.isra.3+0x3e>
    for(i = 1; i < len; i++){
 800080e:	3401      	adds	r4, #1
 8000810:	42a7      	cmp	r7, r4
 8000812:	dcf7      	bgt.n	8000804 <cli_verify_buffer.isra.3+0x2c>
 8000814:	e7f4      	b.n	8000800 <cli_verify_buffer.isra.3+0x28>
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000816:	f007 f849 	bl	80078ac <__locale_ctype_ptr>
 800081a:	4430      	add	r0, r6
 800081c:	4633      	mov	r3, r6
 800081e:	7842      	ldrb	r2, [r0, #1]
 8000820:	f002 0203 	and.w	r2, r2, #3
 8000824:	2a01      	cmp	r2, #1
 8000826:	bf08      	it	eq
 8000828:	3320      	addeq	r3, #32
 800082a:	2b78      	cmp	r3, #120	; 0x78
 800082c:	d01e      	beq.n	800086c <cli_verify_buffer.isra.3+0x94>
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 800082e:	5d2e      	ldrb	r6, [r5, r4]
 8000830:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8000834:	2b09      	cmp	r3, #9
 8000836:	d9ea      	bls.n	800080e <cli_verify_buffer.isra.3+0x36>
 8000838:	f007 f838 	bl	80078ac <__locale_ctype_ptr>
 800083c:	4430      	add	r0, r6
 800083e:	4633      	mov	r3, r6
 8000840:	7842      	ldrb	r2, [r0, #1]
 8000842:	f002 0203 	and.w	r2, r2, #3
 8000846:	2a01      	cmp	r2, #1
 8000848:	bf08      	it	eq
 800084a:	3320      	addeq	r3, #32
 800084c:	2b60      	cmp	r3, #96	; 0x60
 800084e:	dc3a      	bgt.n	80008c6 <cli_verify_buffer.isra.3+0xee>
 8000850:	5d2e      	ldrb	r6, [r5, r4]
 8000852:	f007 f82b 	bl	80078ac <__locale_ctype_ptr>
 8000856:	4430      	add	r0, r6
 8000858:	4633      	mov	r3, r6
 800085a:	7842      	ldrb	r2, [r0, #1]
 800085c:	f002 0203 	and.w	r2, r2, #3
 8000860:	2a01      	cmp	r2, #1
 8000862:	d100      	bne.n	8000866 <cli_verify_buffer.isra.3+0x8e>
 8000864:	3320      	adds	r3, #32
 8000866:	2b78      	cmp	r3, #120	; 0x78
 8000868:	d0d1      	beq.n	800080e <cli_verify_buffer.isra.3+0x36>
 800086a:	e7b9      	b.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 800086c:	eb05 0804 	add.w	r8, r5, r4
        if( tolower(tkn[i]) == 'x' && ( tkn[i-1] != '0' || (tkn[i-2] != ' ' && tkn[i-2] != '{') || ! ( ( '0' <= tkn[i+1] && tkn[i+1] <= '9' ) || ('a' <= tolower(tkn[i+1]) && tolower(tkn[i+1]) <= 'f') ) ) ){
 8000870:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8000874:	2b30      	cmp	r3, #48	; 0x30
 8000876:	d1b3      	bne.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 8000878:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 800087c:	2b20      	cmp	r3, #32
 800087e:	d001      	beq.n	8000884 <cli_verify_buffer.isra.3+0xac>
 8000880:	2b7b      	cmp	r3, #123	; 0x7b
 8000882:	d1ad      	bne.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 8000884:	f898 6001 	ldrb.w	r6, [r8, #1]
 8000888:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800088c:	2b09      	cmp	r3, #9
 800088e:	d9ce      	bls.n	800082e <cli_verify_buffer.isra.3+0x56>
 8000890:	f007 f80c 	bl	80078ac <__locale_ctype_ptr>
 8000894:	4430      	add	r0, r6
 8000896:	4633      	mov	r3, r6
 8000898:	7842      	ldrb	r2, [r0, #1]
 800089a:	f002 0203 	and.w	r2, r2, #3
 800089e:	2a01      	cmp	r2, #1
 80008a0:	bf08      	it	eq
 80008a2:	3320      	addeq	r3, #32
 80008a4:	2b60      	cmp	r3, #96	; 0x60
 80008a6:	dd9b      	ble.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 80008a8:	f898 6001 	ldrb.w	r6, [r8, #1]
 80008ac:	f006 fffe 	bl	80078ac <__locale_ctype_ptr>
 80008b0:	4430      	add	r0, r6
 80008b2:	4633      	mov	r3, r6
 80008b4:	7842      	ldrb	r2, [r0, #1]
 80008b6:	f002 0203 	and.w	r2, r2, #3
 80008ba:	2a01      	cmp	r2, #1
 80008bc:	bf08      	it	eq
 80008be:	3320      	addeq	r3, #32
 80008c0:	2b66      	cmp	r3, #102	; 0x66
 80008c2:	ddb4      	ble.n	800082e <cli_verify_buffer.isra.3+0x56>
 80008c4:	e78c      	b.n	80007e0 <cli_verify_buffer.isra.3+0x8>
 80008c6:	5d2e      	ldrb	r6, [r5, r4]
        if( !( ( ( '0' <= tkn[i] && tkn[i] <= '9' ) ) || ('a' <= tolower(tkn[i]) && tolower(tkn[i]) <= 'f') ) && tolower(tkn[i]) != 'x' ) {
 80008c8:	f006 fff0 	bl	80078ac <__locale_ctype_ptr>
 80008cc:	4430      	add	r0, r6
 80008ce:	7843      	ldrb	r3, [r0, #1]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	bf08      	it	eq
 80008d8:	3620      	addeq	r6, #32
 80008da:	2e66      	cmp	r6, #102	; 0x66
 80008dc:	dcb8      	bgt.n	8000850 <cli_verify_buffer.isra.3+0x78>
 80008de:	e796      	b.n	800080e <cli_verify_buffer.isra.3+0x36>
    for(i = 1; i < len; i++){
 80008e0:	2401      	movs	r4, #1
 80008e2:	e795      	b.n	8000810 <cli_verify_buffer.isra.3+0x38>

080008e4 <cli_verify_args_str.isra.1.constprop.6>:
static int64_t cli_verify_args_str(cliElement_t const * const e, bool* elipsisPresent){
 80008e4:	b538      	push	{r3, r4, r5, lr}
 80008e6:	460d      	mov	r5, r1
    if(e->args == NULL) return -1;
 80008e8:	4604      	mov	r4, r0
 80008ea:	b918      	cbnz	r0, 80008f4 <cli_verify_args_str.isra.1.constprop.6+0x10>
                return -1;
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	4601      	mov	r1, r0
 80008f2:	e01e      	b.n	8000932 <cli_verify_args_str.isra.1.constprop.6+0x4e>
    size_t len = strlen(e->args);
 80008f4:	f7ff fc76 	bl	80001e4 <strlen>
    *elipsisPresent = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	702b      	strb	r3, [r5, #0]
    for(int i = 0; i < len; i++){
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d017      	beq.n	8000930 <cli_verify_args_str.isra.1.constprop.6+0x4c>
        switch(e->args[i]){
 8000900:	5ce2      	ldrb	r2, [r4, r3]
 8000902:	2a62      	cmp	r2, #98	; 0x62
 8000904:	d01c      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 8000906:	d815      	bhi.n	8000934 <cli_verify_args_str.isra.1.constprop.6+0x50>
 8000908:	2a2a      	cmp	r2, #42	; 0x2a
 800090a:	d019      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 800090c:	2a2e      	cmp	r2, #46	; 0x2e
 800090e:	d1ed      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                if(len < i + 2 || e->args[i + 1] != '.' || e->args[i + 2] != '.'){
 8000910:	1c9a      	adds	r2, r3, #2
 8000912:	4290      	cmp	r0, r2
 8000914:	d3ea      	bcc.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
 8000916:	441c      	add	r4, r3
 8000918:	7862      	ldrb	r2, [r4, #1]
 800091a:	2a2e      	cmp	r2, #46	; 0x2e
 800091c:	d1e6      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
 800091e:	78a2      	ldrb	r2, [r4, #2]
 8000920:	2a2e      	cmp	r2, #46	; 0x2e
 8000922:	d1e3      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                if(len > i + 3){
 8000924:	1cda      	adds	r2, r3, #3
 8000926:	4290      	cmp	r0, r2
 8000928:	d8e0      	bhi.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                *elipsisPresent = 1;
 800092a:	2201      	movs	r2, #1
 800092c:	702a      	strb	r2, [r5, #0]
                return argsLen++;
 800092e:	4618      	mov	r0, r3
    return argsLen;
 8000930:	2100      	movs	r1, #0
}
 8000932:	bd38      	pop	{r3, r4, r5, pc}
        switch(e->args[i]){
 8000934:	2a73      	cmp	r2, #115	; 0x73
 8000936:	d003      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 8000938:	2a75      	cmp	r2, #117	; 0x75
 800093a:	d001      	beq.n	8000940 <cli_verify_args_str.isra.1.constprop.6+0x5c>
 800093c:	2a69      	cmp	r2, #105	; 0x69
 800093e:	d1d5      	bne.n	80008ec <cli_verify_args_str.isra.1.constprop.6+0x8>
                argsLen++;
 8000940:	3301      	adds	r3, #1
 8000942:	e7db      	b.n	80008fc <cli_verify_args_str.isra.1.constprop.6+0x18>

08000944 <cli_get_int_arg.constprop.5>:

static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	b085      	sub	sp, #20
 800094a:	e9cd 2100 	strd	r2, r1, [sp]
    if(currEl == NULL || argsStr == NULL) {
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <cli_get_int_arg.constprop.5+0xb8>)
 8000950:	6816      	ldr	r6, [r2, #0]
static bool cli_get_int_arg(size_t argNum, int64_t *res, bool isUnsigned){
 8000952:	4607      	mov	r7, r0
    if(currEl == NULL || argsStr == NULL) {
 8000954:	b91e      	cbnz	r6, 800095e <cli_get_int_arg.constprop.5+0x1a>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 8000956:	2000      	movs	r0, #0
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
        
    *res = strtol(argBase, NULL, num_base);

    return true;
}
 8000958:	b005      	add	sp, #20
 800095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(currEl == NULL || argsStr == NULL) {
 800095e:	4928      	ldr	r1, [pc, #160]	; (8000a00 <cli_get_int_arg.constprop.5+0xbc>)
 8000960:	680c      	ldr	r4, [r1, #0]
 8000962:	2c00      	cmp	r4, #0
 8000964:	d0f7      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    if(currEl->args == NULL) {
 8000966:	68f0      	ldr	r0, [r6, #12]
 8000968:	2800      	cmp	r0, #0
 800096a:	d0f4      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    bool elipsisPresent = false;
 800096c:	a904      	add	r1, sp, #16
 800096e:	2500      	movs	r5, #0
 8000970:	f801 5d01 	strb.w	r5, [r1, #-1]!
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000974:	f7ff ffb6 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(argNum >= len && !elipsisPresent) {
 8000978:	f04f 0b00 	mov.w	fp, #0
 800097c:	4287      	cmp	r7, r0
 800097e:	eb7b 0301 	sbcs.w	r3, fp, r1
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000982:	4680      	mov	r8, r0
 8000984:	4689      	mov	r9, r1
    if(argNum >= len && !elipsisPresent) {
 8000986:	46ba      	mov	sl, r7
 8000988:	db03      	blt.n	8000992 <cli_get_int_arg.constprop.5+0x4e>
 800098a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800098e:	2900      	cmp	r1, #0
 8000990:	d0e1      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    for(size_t i = 0; i < argNum; i++)
 8000992:	42af      	cmp	r7, r5
 8000994:	d12a      	bne.n	80009ec <cli_get_int_arg.constprop.5+0xa8>
    if(argBase[0] == '\0'){ 
 8000996:	7821      	ldrb	r1, [r4, #0]
 8000998:	2900      	cmp	r1, #0
 800099a:	d0dc      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 800099c:	45c2      	cmp	sl, r8
 800099e:	eb7b 0309 	sbcs.w	r3, fp, r9
 80009a2:	da07      	bge.n	80009b4 <cli_get_int_arg.constprop.5+0x70>
 80009a4:	68f2      	ldr	r2, [r6, #12]
 80009a6:	5dd3      	ldrb	r3, [r2, r7]
 80009a8:	9a00      	ldr	r2, [sp, #0]
 80009aa:	b32a      	cbz	r2, 80009f8 <cli_get_int_arg.constprop.5+0xb4>
 80009ac:	2b75      	cmp	r3, #117	; 0x75
 80009ae:	d007      	beq.n	80009c0 <cli_get_int_arg.constprop.5+0x7c>
 80009b0:	2b2a      	cmp	r3, #42	; 0x2a
 80009b2:	d1d0      	bne.n	8000956 <cli_get_int_arg.constprop.5+0x12>
        if(!cli_verify_int(argBase, isUnsigned, true)) return false;
 80009b4:	9900      	ldr	r1, [sp, #0]
 80009b6:	4620      	mov	r0, r4
 80009b8:	f7ff fe8c 	bl	80006d4 <cli_verify_int.isra.2>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d0ca      	beq.n	8000956 <cli_get_int_arg.constprop.5+0x12>
    int32_t argLen = cli_arg_str_len(argBase);
 80009c0:	4620      	mov	r0, r4
 80009c2:	f7ff fe13 	bl	80005ec <cli_arg_str_len>
    int num_base = ( (cli_buff_element_is_hex(argBase, (size_t)argLen) == true) ? 16 : 10 );
 80009c6:	4601      	mov	r1, r0
 80009c8:	4620      	mov	r0, r4
 80009ca:	f7ff fe4c 	bl	8000666 <cli_buff_element_is_hex>
 80009ce:	2800      	cmp	r0, #0
    *res = strtol(argBase, NULL, num_base);
 80009d0:	f04f 0100 	mov.w	r1, #0
 80009d4:	bf14      	ite	ne
 80009d6:	2210      	movne	r2, #16
 80009d8:	220a      	moveq	r2, #10
 80009da:	4620      	mov	r0, r4
 80009dc:	f007 fc5a 	bl	8008294 <strtol>
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	17c1      	asrs	r1, r0, #31
 80009e4:	e9c3 0100 	strd	r0, r1, [r3]
    return true;
 80009e8:	2001      	movs	r0, #1
 80009ea:	e7b5      	b.n	8000958 <cli_get_int_arg.constprop.5+0x14>
        argBase = cli_go_to_next_argument(argBase);
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff fe29 	bl	8000644 <cli_go_to_next_argument>
    for(size_t i = 0; i < argNum; i++)
 80009f2:	3501      	adds	r5, #1
        argBase = cli_go_to_next_argument(argBase);
 80009f4:	4604      	mov	r4, r0
 80009f6:	e7cc      	b.n	8000992 <cli_get_int_arg.constprop.5+0x4e>
    if( argNum < len && ( (isUnsigned && currEl->args[argNum] != 'u') || (!isUnsigned && currEl->args[argNum] != 'i') ) && currEl->args[argNum] != '*' ) {
 80009f8:	2b69      	cmp	r3, #105	; 0x69
 80009fa:	e7d8      	b.n	80009ae <cli_get_int_arg.constprop.5+0x6a>
 80009fc:	20000414 	.word	0x20000414
 8000a00:	2000040c 	.word	0x2000040c

08000a04 <cli_get_buff_arg.constprop.4>:
    *res = pos;
    
    return err;
}

static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8000a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a08:	b087      	sub	sp, #28
 8000a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if(currEl == NULL || argsStr == NULL) {
 8000a0e:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <cli_get_buff_arg.constprop.4+0x1b4>)
static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8000a10:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
    if(currEl == NULL || argsStr == NULL) {
 8000a14:	f8d3 8000 	ldr.w	r8, [r3]
static bool cli_get_buff_arg(size_t argNum, uint8_t buff[], size_t buffLen, size_t *res, bool isString){
 8000a18:	4606      	mov	r6, r0
 8000a1a:	460d      	mov	r5, r1
    if(currEl == NULL || argsStr == NULL) {
 8000a1c:	f1b8 0f00 	cmp.w	r8, #0
 8000a20:	d103      	bne.n	8000a2a <cli_get_buff_arg.constprop.4+0x26>
        ERR_PRINTLN("Function usage is exculise to functions inside CLI");
        return false;
 8000a22:	2000      	movs	r0, #0
    else if(argBase[0] == '"')
        return cli_get_quotes(argBase, argLen, buff, buffLen, res, isString);
    
    ERR_PRINTLN("Buffer does not begin with \" nor {");
    return false;
}
 8000a24:	b007      	add	sp, #28
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(currEl == NULL || argsStr == NULL) {
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <cli_get_buff_arg.constprop.4+0x1b8>)
 8000a2c:	681c      	ldr	r4, [r3, #0]
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d0f7      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    if(currEl->args == NULL) {
 8000a32:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d0f3      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    bool elipsisPresent = false;
 8000a3a:	a906      	add	r1, sp, #24
 8000a3c:	f04f 0900 	mov.w	r9, #0
 8000a40:	f801 9d01 	strb.w	r9, [r1, #-1]!
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000a44:	f7ff ff4e 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(argNum >= len && !elipsisPresent) { 
 8000a48:	f04f 0b00 	mov.w	fp, #0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	4286      	cmp	r6, r0
 8000a50:	eb7b 0303 	sbcs.w	r3, fp, r3
    int64_t len = cli_verify_args_str(currEl, &elipsisPresent);
 8000a54:	e9cd 0100 	strd	r0, r1, [sp]
    if(argNum >= len && !elipsisPresent) { 
 8000a58:	46b2      	mov	sl, r6
 8000a5a:	db03      	blt.n	8000a64 <cli_get_buff_arg.constprop.4+0x60>
 8000a5c:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d0de      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    for(size_t i = 0; i < argNum; i++)
 8000a64:	454e      	cmp	r6, r9
 8000a66:	d12f      	bne.n	8000ac8 <cli_get_buff_arg.constprop.4+0xc4>
    if(argBase[0] == '\0') {
 8000a68:	7823      	ldrb	r3, [r4, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0d9      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8000a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000a72:	4592      	cmp	sl, r2
 8000a74:	eb7b 0303 	sbcs.w	r3, fp, r3
 8000a78:	da07      	bge.n	8000a8a <cli_get_buff_arg.constprop.4+0x86>
 8000a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000a7e:	5d9b      	ldrb	r3, [r3, r6]
 8000a80:	bb4f      	cbnz	r7, 8000ad6 <cli_get_buff_arg.constprop.4+0xd2>
 8000a82:	2b62      	cmp	r3, #98	; 0x62
 8000a84:	d004      	beq.n	8000a90 <cli_get_buff_arg.constprop.4+0x8c>
 8000a86:	2b2a      	cmp	r3, #42	; 0x2a
 8000a88:	d1cb      	bne.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
        cli_verify_buffer(argBase, true);
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fea4 	bl	80007d8 <cli_verify_buffer.isra.3>
    int32_t argLen = cli_arg_str_len(argBase);
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff fdab 	bl	80005ec <cli_arg_str_len>
    if(argLen == -1) { 
 8000a96:	1c43      	adds	r3, r0, #1
 8000a98:	d0c3      	beq.n	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
    if(argBase[0] == '{') 
 8000a9a:	7823      	ldrb	r3, [r4, #0]
 8000a9c:	2b7b      	cmp	r3, #123	; 0x7b
 8000a9e:	d144      	bne.n	8000b2a <cli_get_buff_arg.constprop.4+0x126>
        if(pos >= buffLen - endString){
 8000aa0:	9b02      	ldr	r3, [sp, #8]
    for(int i = 1; i < argLen - 1; i++){
 8000aa2:	f04f 0801 	mov.w	r8, #1
	size_t pos = 0;
 8000aa6:	2600      	movs	r6, #0
    for(int i = 1; i < argLen - 1; i++){
 8000aa8:	f100 39ff 	add.w	r9, r0, #4294967295
        if(pos >= buffLen - endString){
 8000aac:	1bdb      	subs	r3, r3, r7
    for(int i = 1; i < argLen - 1; i++){
 8000aae:	45c8      	cmp	r8, r9
 8000ab0:	db13      	blt.n	8000ada <cli_get_buff_arg.constprop.4+0xd6>
    bool err = true;
 8000ab2:	2001      	movs	r0, #1
    if(isString && pos < buffLen) buff[pos++] = '\0';
 8000ab4:	b12f      	cbz	r7, 8000ac2 <cli_get_buff_arg.constprop.4+0xbe>
 8000ab6:	9b02      	ldr	r3, [sp, #8]
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	bf82      	ittt	hi
 8000abc:	2300      	movhi	r3, #0
 8000abe:	55ab      	strbhi	r3, [r5, r6]
 8000ac0:	3601      	addhi	r6, #1
    *res = pos;
 8000ac2:	9b03      	ldr	r3, [sp, #12]
 8000ac4:	601e      	str	r6, [r3, #0]
 8000ac6:	e7ad      	b.n	8000a24 <cli_get_buff_arg.constprop.4+0x20>
        argBase = cli_go_to_next_argument(argBase);
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff fdbb 	bl	8000644 <cli_go_to_next_argument>
    for(size_t i = 0; i < argNum; i++)
 8000ace:	f109 0901 	add.w	r9, r9, #1
        argBase = cli_go_to_next_argument(argBase);
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	e7c6      	b.n	8000a64 <cli_get_buff_arg.constprop.4+0x60>
    if( argNum < len && ( (!isString && currEl->args[argNum] != 'b') || (isString && currEl->args[argNum] != 's' ) ) && currEl->args[argNum] != '*' ) {
 8000ad6:	2b73      	cmp	r3, #115	; 0x73
 8000ad8:	e7d4      	b.n	8000a84 <cli_get_buff_arg.constprop.4+0x80>
        if(base[i] == ' ') continue;
 8000ada:	f814 2008 	ldrb.w	r2, [r4, r8]
 8000ade:	2a20      	cmp	r2, #32
 8000ae0:	eb04 0a08 	add.w	sl, r4, r8
 8000ae4:	d01c      	beq.n	8000b20 <cli_get_buff_arg.constprop.4+0x11c>
        int32_t sz = cli_arg_str_len(&base[i]);
 8000ae6:	4650      	mov	r0, sl
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	f7ff fd7f 	bl	80005ec <cli_arg_str_len>
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 8000aee:	4601      	mov	r1, r0
        int32_t sz = cli_arg_str_len(&base[i]);
 8000af0:	4683      	mov	fp, r0
        int num_base = ( (cli_buff_element_is_hex(&base[i], (size_t)sz) == true) ? 16 : 10 );
 8000af2:	4650      	mov	r0, sl
 8000af4:	f7ff fdb7 	bl	8000666 <cli_buff_element_is_hex>
 8000af8:	2800      	cmp	r0, #0
        uint64_t num = (uint64_t)strtol(&base[i], NULL, num_base);
 8000afa:	bf0c      	ite	eq
 8000afc:	220a      	moveq	r2, #10
 8000afe:	2210      	movne	r2, #16
 8000b00:	2100      	movs	r1, #0
 8000b02:	4650      	mov	r0, sl
 8000b04:	f007 fbc6 	bl	8008294 <strtol>
 8000b08:	17c1      	asrs	r1, r0, #31
        if(num > 255){
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	bf08      	it	eq
 8000b0e:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
 8000b12:	d208      	bcs.n	8000b26 <cli_get_buff_arg.constprop.4+0x122>
        if(pos >= buffLen - endString){
 8000b14:	9b00      	ldr	r3, [sp, #0]
 8000b16:	42b3      	cmp	r3, r6
 8000b18:	d905      	bls.n	8000b26 <cli_get_buff_arg.constprop.4+0x122>
        buff[pos++] = (uint8_t) num;
 8000b1a:	55a8      	strb	r0, [r5, r6]
        i += sz;
 8000b1c:	44d8      	add	r8, fp
        buff[pos++] = (uint8_t) num;
 8000b1e:	3601      	adds	r6, #1
    for(int i = 1; i < argLen - 1; i++){
 8000b20:	f108 0801 	add.w	r8, r8, #1
 8000b24:	e7c3      	b.n	8000aae <cli_get_buff_arg.constprop.4+0xaa>
            err = false;
 8000b26:	2000      	movs	r0, #0
 8000b28:	e7c4      	b.n	8000ab4 <cli_get_buff_arg.constprop.4+0xb0>
    else if(argBase[0] == '"')
 8000b2a:	2b22      	cmp	r3, #34	; 0x22
 8000b2c:	f47f af79 	bne.w	8000a22 <cli_get_buff_arg.constprop.4+0x1e>
        if(pos >= buffLen - endString){
 8000b30:	9902      	ldr	r1, [sp, #8]
    size_t endString = ( (isString == true) ? 1 : 0 );
 8000b32:	2300      	movs	r3, #0
    for(int i = 1; i < argLen - 1; i++){
 8000b34:	2201      	movs	r2, #1
 8000b36:	f100 3aff 	add.w	sl, r0, #4294967295
        if(pos >= buffLen - endString){
 8000b3a:	1bce      	subs	r6, r1, r7
                default   : buff[pos++] = '\\'; break;
 8000b3c:	f04f 0c5c 	mov.w	ip, #92	; 0x5c
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8000b40:	f04f 0e0a 	mov.w	lr, #10
                case 'r'  : buff[pos++] = '\r'; i++; break;
 8000b44:	f04f 080d 	mov.w	r8, #13
                case '0'  : buff[pos++] = '\0'; i++; break;
 8000b48:	4699      	mov	r9, r3
    for(int i = 1; i < argLen - 1; i++){
 8000b4a:	4552      	cmp	r2, sl
 8000b4c:	db0a      	blt.n	8000b64 <cli_get_buff_arg.constprop.4+0x160>
    bool err = true;
 8000b4e:	2001      	movs	r0, #1
    if(isString && pos < buffLen) buff[pos++] = '\0';
 8000b50:	b12f      	cbz	r7, 8000b5e <cli_get_buff_arg.constprop.4+0x15a>
 8000b52:	9a02      	ldr	r2, [sp, #8]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	bf82      	ittt	hi
 8000b58:	2200      	movhi	r2, #0
 8000b5a:	54ea      	strbhi	r2, [r5, r3]
 8000b5c:	3301      	addhi	r3, #1
    *res = pos;
 8000b5e:	9a03      	ldr	r2, [sp, #12]
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e75f      	b.n	8000a24 <cli_get_buff_arg.constprop.4+0x20>
        if(pos >= buffLen - endString){
 8000b64:	429e      	cmp	r6, r3
 8000b66:	d924      	bls.n	8000bb2 <cli_get_buff_arg.constprop.4+0x1ae>
        if(base[i] == '\\'){
 8000b68:	5ca1      	ldrb	r1, [r4, r2]
 8000b6a:	295c      	cmp	r1, #92	; 0x5c
 8000b6c:	f102 0001 	add.w	r0, r2, #1
 8000b70:	d11d      	bne.n	8000bae <cli_get_buff_arg.constprop.4+0x1aa>
            switch(base[i + 1]){
 8000b72:	18a1      	adds	r1, r4, r2
 8000b74:	7849      	ldrb	r1, [r1, #1]
 8000b76:	295c      	cmp	r1, #92	; 0x5c
 8000b78:	d00f      	beq.n	8000b9a <cli_get_buff_arg.constprop.4+0x196>
 8000b7a:	d807      	bhi.n	8000b8c <cli_get_buff_arg.constprop.4+0x188>
 8000b7c:	2922      	cmp	r1, #34	; 0x22
 8000b7e:	d00c      	beq.n	8000b9a <cli_get_buff_arg.constprop.4+0x196>
 8000b80:	2930      	cmp	r1, #48	; 0x30
 8000b82:	d00e      	beq.n	8000ba2 <cli_get_buff_arg.constprop.4+0x19e>
                default   : buff[pos++] = '\\'; break;
 8000b84:	f805 c003 	strb.w	ip, [r5, r3]
        buff[pos++] = base[i];
 8000b88:	4610      	mov	r0, r2
 8000b8a:	e007      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
            switch(base[i + 1]){
 8000b8c:	296e      	cmp	r1, #110	; 0x6e
 8000b8e:	d00b      	beq.n	8000ba8 <cli_get_buff_arg.constprop.4+0x1a4>
 8000b90:	2972      	cmp	r1, #114	; 0x72
 8000b92:	d1f7      	bne.n	8000b84 <cli_get_buff_arg.constprop.4+0x180>
                case 'r'  : buff[pos++] = '\r'; i++; break;
 8000b94:	f805 8003 	strb.w	r8, [r5, r3]
 8000b98:	e000      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
                case '"'  : buff[pos++] = '"';  i++; break;
 8000b9a:	54e9      	strb	r1, [r5, r3]
    for(int i = 1; i < argLen - 1; i++){
 8000b9c:	1c42      	adds	r2, r0, #1
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	e7d3      	b.n	8000b4a <cli_get_buff_arg.constprop.4+0x146>
                case '0'  : buff[pos++] = '\0'; i++; break;
 8000ba2:	f805 9003 	strb.w	r9, [r5, r3]
 8000ba6:	e7f9      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
                case 'n'  : buff[pos++] = '\n'; i++; break;
 8000ba8:	f805 e003 	strb.w	lr, [r5, r3]
 8000bac:	e7f6      	b.n	8000b9c <cli_get_buff_arg.constprop.4+0x198>
        buff[pos++] = base[i];
 8000bae:	54e9      	strb	r1, [r5, r3]
 8000bb0:	e7ea      	b.n	8000b88 <cli_get_buff_arg.constprop.4+0x184>
            err = false;
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	e7cc      	b.n	8000b50 <cli_get_buff_arg.constprop.4+0x14c>
 8000bb6:	bf00      	nop
 8000bb8:	20000414 	.word	0x20000414
 8000bbc:	2000040c 	.word	0x2000040c

08000bc0 <cli_get_int_argument>:

/**********************************************
 * PUBLIC FUNCTIONS
 *********************************************/

int64_t cli_get_int_argument(size_t argNum, bool *res){
 8000bc0:	b513      	push	{r0, r1, r4, lr}
    int64_t ret = 0;
 8000bc2:	2200      	movs	r2, #0
int64_t cli_get_int_argument(size_t argNum, bool *res){
 8000bc4:	460c      	mov	r4, r1
    int64_t ret = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	a902      	add	r1, sp, #8
 8000bca:	e961 2302 	strd	r2, r3, [r1, #-8]!
    bool success = cli_get_int_arg(argNum, &ret, false);
 8000bce:	f7ff feb9 	bl	8000944 <cli_get_int_arg.constprop.5>
    
    if(res != NULL) *res = success;
 8000bd2:	b104      	cbz	r4, 8000bd6 <cli_get_int_argument+0x16>
 8000bd4:	7020      	strb	r0, [r4, #0]
    
    return ret;
}
 8000bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd10      	pop	{r4, pc}

08000bde <cli_get_uint_argument>:

uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8000bde:	b513      	push	{r0, r1, r4, lr}
    uint64_t ret = 0;
 8000be0:	2200      	movs	r2, #0
uint64_t cli_get_uint_argument(size_t argNum, bool *res){
 8000be2:	460c      	mov	r4, r1
    uint64_t ret = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	a902      	add	r1, sp, #8
 8000be8:	e961 2302 	strd	r2, r3, [r1, #-8]!
    bool success = cli_get_int_arg(argNum, (int64_t*)&ret, true);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f7ff fea9 	bl	8000944 <cli_get_int_arg.constprop.5>
    
    if(res != NULL) *res = success;
 8000bf2:	b104      	cbz	r4, 8000bf6 <cli_get_uint_argument+0x18>
 8000bf4:	7020      	strb	r0, [r4, #0]
    
    return ret;
}
 8000bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd10      	pop	{r4, pc}

08000bfe <cli_get_buffer_argument>:
    
    return ret;
}
#endif

size_t cli_get_buffer_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8000bfe:	b530      	push	{r4, r5, lr}
 8000c00:	b085      	sub	sp, #20
 8000c02:	461c      	mov	r4, r3
    size_t bRead = 0;
 8000c04:	ab04      	add	r3, sp, #16
 8000c06:	2500      	movs	r5, #0
 8000c08:	f843 5d04 	str.w	r5, [r3, #-4]!
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, false);
 8000c0c:	9500      	str	r5, [sp, #0]
 8000c0e:	f7ff fef9 	bl	8000a04 <cli_get_buff_arg.constprop.4>
    
    if(res != NULL) *res = ret;
 8000c12:	b104      	cbz	r4, 8000c16 <cli_get_buffer_argument+0x18>
 8000c14:	7020      	strb	r0, [r4, #0]
    
    return bRead;
}
 8000c16:	9803      	ldr	r0, [sp, #12]
 8000c18:	b005      	add	sp, #20
 8000c1a:	bd30      	pop	{r4, r5, pc}

08000c1c <cli_get_string_argument>:
    if(res != NULL) *res = ret;
    
    return bRead;
}

size_t cli_get_string_argument(size_t argNum, uint8_t buff[], size_t buffLen, bool* res){
 8000c1c:	b530      	push	{r4, r5, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	461c      	mov	r4, r3
    size_t bRead = 0;
 8000c22:	ab04      	add	r3, sp, #16
 8000c24:	2500      	movs	r5, #0
 8000c26:	f843 5d04 	str.w	r5, [r3, #-4]!
    bool ret = cli_get_buff_arg(argNum, buff, buffLen, &bRead, true);
 8000c2a:	2501      	movs	r5, #1
 8000c2c:	9500      	str	r5, [sp, #0]
 8000c2e:	f7ff fee9 	bl	8000a04 <cli_get_buff_arg.constprop.4>
    
    if(res != NULL) *res = ret;
 8000c32:	b104      	cbz	r4, 8000c36 <cli_get_string_argument+0x1a>
 8000c34:	7020      	strb	r0, [r4, #0]
    
    return bRead;
}
 8000c36:	9803      	ldr	r0, [sp, #12]
 8000c38:	b005      	add	sp, #20
 8000c3a:	bd30      	pop	{r4, r5, pc}

08000c3c <cli_insert_char>:

cli_status_e cli_insert_char(char cliBuffer[], size_t maxLen, char const c){
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	4616      	mov	r6, r2
    if(maxLen == 0) return CLI_ERR;
 8000c40:	460a      	mov	r2, r1
 8000c42:	b1f1      	cbz	r1, 8000c82 <cli_insert_char+0x46>
    if(cliBuffer == NULL) return CLI_ERR;
 8000c44:	b1e8      	cbz	r0, 8000c82 <cli_insert_char+0x46>
    
#if (defined(CLI_POLLING_EN) && CLI_POLLING_EN == 1)
    if(cli_cmd_waiting_treatment){
 8000c46:	4f10      	ldr	r7, [pc, #64]	; (8000c88 <cli_insert_char+0x4c>)
 8000c48:	7839      	ldrb	r1, [r7, #0]
 8000c4a:	b9c1      	cbnz	r1, 8000c7e <cli_insert_char+0x42>
        ERR_PRINTLN("Command waiting for treatment");
        return CLI_WAITING_TREATMENT;
    }
#endif //CLI_POLLING_EN

    if(c == '\r') return CLI_CONTINUE;
 8000c4c:	2e0d      	cmp	r6, #13
 8000c4e:	d00a      	beq.n	8000c66 <cli_insert_char+0x2a>
 8000c50:	4d0e      	ldr	r5, [pc, #56]	; (8000c8c <cli_insert_char+0x50>)

    if(c != '\n'){
 8000c52:	2e0a      	cmp	r6, #10
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	d008      	beq.n	8000c6a <cli_insert_char+0x2e>
        cliBuffer[((len++)%maxLen)] = c;
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	6029      	str	r1, [r5, #0]
 8000c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c60:	fb02 3311 	mls	r3, r2, r1, r3
 8000c64:	54c6      	strb	r6, [r0, r3]
    if(c == '\r') return CLI_CONTINUE;
 8000c66:	2001      	movs	r0, #1
 8000c68:	e005      	b.n	8000c76 <cli_insert_char+0x3a>
        return CLI_CONTINUE;
    }
    
    if(len >= maxLen){
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d804      	bhi.n	8000c78 <cli_insert_char+0x3c>
        len = 0;
 8000c6e:	6029      	str	r1, [r5, #0]
        memset(cliBuffer, 0, maxLen);
 8000c70:	f006 fe66 	bl	8007940 <memset>
        ERR_PRINT("COMMAND TOO LARGE! Enter new command = ");
        return CLI_TOO_BIG;
 8000c74:	2003      	movs	r0, #3
    return CLI_COMMAND_RCV;
#else
    cli_cmd_waiting_treatment = true;
    return CLI_WAITING_TREATMENT;
#endif //CLI_POLLING_EN
}
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cliBuffer[len] = '\0';
 8000c78:	54c1      	strb	r1, [r0, r3]
    cli_cmd_waiting_treatment = true;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	703b      	strb	r3, [r7, #0]
        return CLI_WAITING_TREATMENT;
 8000c7e:	2004      	movs	r0, #4
 8000c80:	e7f9      	b.n	8000c76 <cli_insert_char+0x3a>
    if(maxLen == 0) return CLI_ERR;
 8000c82:	2006      	movs	r0, #6
 8000c84:	e7f7      	b.n	8000c76 <cli_insert_char+0x3a>
 8000c86:	bf00      	nop
 8000c88:	20000410 	.word	0x20000410
 8000c8c:	20000418 	.word	0x20000418

08000c90 <cli_printf>:

__attribute__((weak)) void cli_printf(char const * const str, ...){
 8000c90:	b40f      	push	{r0, r1, r2, r3}
 8000c92:	b507      	push	{r0, r1, r2, lr}
 8000c94:	a904      	add	r1, sp, #16
 8000c96:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    va_start(args, str);
 8000c9a:	9101      	str	r1, [sp, #4]
    vprintf(str, args);
 8000c9c:	f007 fb10 	bl	80082c0 <viprintf>
    va_end(args);

}
 8000ca0:	b003      	add	sp, #12
 8000ca2:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
	...

08000cac <cli_treat_command>:
void cli_treat_command(char cliBuffer[], size_t maxLen){
 8000cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb0:	b08d      	sub	sp, #52	; 0x34
 8000cb2:	4683      	mov	fp, r0
    if(maxLen == 0) return;
 8000cb4:	9102      	str	r1, [sp, #8]
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	f000 824c 	beq.w	8001154 <cli_treat_command+0x4a8>
    if(cliBuffer == NULL) return;
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f000 8249 	beq.w	8001154 <cli_treat_command+0x4a8>
    if(cli_cmd_waiting_treatment == false) return;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	; (8000f44 <cli_treat_command+0x298>)
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f000 8244 	beq.w	8001154 <cli_treat_command+0x4a8>
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 8000ccc:	4d9e      	ldr	r5, [pc, #632]	; (8000f48 <cli_treat_command+0x29c>)
    cli_cmd_waiting_treatment = false; 
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    cliElement_t init = cliSubMenuElement("main", cliMainMenu, "main menu");
 8000cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd4:	ac06      	add	r4, sp, #24
 8000cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cdc:	e884 0003 	stmia.w	r4, {r0, r1}
    char* tkn = strtok((char*)cliBuffer, " ");
 8000ce0:	499a      	ldr	r1, [pc, #616]	; (8000f4c <cli_treat_command+0x2a0>)
 8000ce2:	4658      	mov	r0, fp
 8000ce4:	f007 fa06 	bl	80080f4 <strtok>
    cliElement_t* currentMenu = &init;
 8000ce8:	ad06      	add	r5, sp, #24
    char* tkn = strtok((char*)cliBuffer, " ");
 8000cea:	4680      	mov	r8, r0
    while(tkn != NULL){
 8000cec:	f1b8 0f00 	cmp.w	r8, #0
 8000cf0:	d003      	beq.n	8000cfa <cli_treat_command+0x4e>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000cf2:	686b      	ldr	r3, [r5, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 809c 	bne.w	8000e32 <cli_treat_command+0x186>
    MENU_PRINTF("Menu '%s' - %s\r\n", currentMenu->name, currentMenu->desc);
 8000cfa:	692a      	ldr	r2, [r5, #16]
 8000cfc:	6829      	ldr	r1, [r5, #0]
 8000cfe:	4894      	ldr	r0, [pc, #592]	; (8000f50 <cli_treat_command+0x2a4>)
 8000d00:	f7ff ffc6 	bl	8000c90 <cli_printf>
    if(e->subMenuRef == NULL){
 8000d04:	686b      	ldr	r3, [r5, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 81aa 	beq.w	8001060 <cli_treat_command+0x3b4>
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000d0c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8000f4c <cli_treat_command+0x2a0>
    if(e->subMenuRef == NULL){
 8000d10:	f04f 0800 	mov.w	r8, #0
    for(uint8_t i = 0; !cli_is_terminator(&e->subMenuRef[i]); i++)
 8000d14:	fa5f f388 	uxtb.w	r3, r8
 8000d18:	2118      	movs	r1, #24
 8000d1a:	686e      	ldr	r6, [r5, #4]
 8000d1c:	4359      	muls	r1, r3
 8000d1e:	1877      	adds	r7, r6, r1
 8000d20:	4638      	mov	r0, r7
 8000d22:	f7ff fc51 	bl	80005c8 <cli_is_terminator>
 8000d26:	4604      	mov	r4, r0
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f040 81d9 	bne.w	80010e0 <cli_treat_command+0x434>
    if(e == NULL) return;
 8000d2e:	b36f      	cbz	r7, 8000d8c <cli_treat_command+0xe0>
    return (e->subMenuRef != NULL);
 8000d30:	687a      	ldr	r2, [r7, #4]
    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000d32:	5876      	ldr	r6, [r6, r1]
 8000d34:	4b87      	ldr	r3, [pc, #540]	; (8000f54 <cli_treat_command+0x2a8>)
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000d36:	4888      	ldr	r0, [pc, #544]	; (8000f58 <cli_treat_command+0x2ac>)
    return (e->subMenuRef != NULL);
 8000d38:	f112 0a00 	adds.w	sl, r2, #0
 8000d3c:	bf18      	it	ne
 8000d3e:	f04f 0a01 	movne.w	sl, #1
    char const * const name = ( (e->name == NULL) ? "NULL_NAME" : e->name );
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	bf08      	it	eq
 8000d46:	461e      	moveq	r6, r3
    MENU_PRINTF("   %s%s", name, ( (is_sub_menu == true) ? "... " : " " ) );
 8000d48:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <cli_treat_command+0x2b0>)
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	bf08      	it	eq
 8000d4e:	464b      	moveq	r3, r9
 8000d50:	461a      	mov	r2, r3
 8000d52:	4631      	mov	r1, r6
 8000d54:	f7ff ff9c 	bl	8000c90 <cli_printf>
    size_t len = (size_t)(strlen(name) + (size_t)(3 * is_sub_menu) + 1); //name length with '... '
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f7ff fa43 	bl	80001e4 <strlen>
 8000d5e:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8000d62:	eb00 030a 	add.w	r3, r0, sl
    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 8000d66:	f103 0617 	add.w	r6, r3, #23
 8000d6a:	2016      	movs	r0, #22
    spaces -= len;
 8000d6c:	43db      	mvns	r3, r3
    size_t spaces = (len + CLI_AMOUNT_OF_ALIGN_CHARS) / CLI_AMOUNT_OF_ALIGN_CHARS * CLI_AMOUNT_OF_ALIGN_CHARS; //Gets nearest multiple of CLI_AMOUNT_OF_ALIGN_CHARS that is bigger than len
 8000d6e:	fbb6 f6f0 	udiv	r6, r6, r0
    spaces -= len;
 8000d72:	fb00 3606 	mla	r6, r0, r6, r3
    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	f040 81e7 	bne.w	800114a <cli_treat_command+0x49e>
    MENU_PRINTLN("- %s", ( (e->desc == NULL) ? "NULL_DESC" : e->desc) );
 8000d7c:	6939      	ldr	r1, [r7, #16]
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <cli_treat_command+0x2b4>)
 8000d80:	4878      	ldr	r0, [pc, #480]	; (8000f64 <cli_treat_command+0x2b8>)
 8000d82:	2900      	cmp	r1, #0
 8000d84:	bf08      	it	eq
 8000d86:	4619      	moveq	r1, r3
 8000d88:	f7ff ff82 	bl	8000c90 <cli_printf>
 8000d8c:	f108 0801 	add.w	r8, r8, #1
 8000d90:	e7c0      	b.n	8000d14 <cli_treat_command+0x68>
        if(currentMenu->subMenuRef[i].name == NULL) continue;
 8000d92:	59ce      	ldr	r6, [r1, r7]
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d033      	beq.n	8000e00 <cli_treat_command+0x154>
    size_t const lenTkn = strlen(tkn);
 8000d98:	4640      	mov	r0, r8
 8000d9a:	f7ff fa23 	bl	80001e4 <strlen>
 8000d9e:	4682      	mov	sl, r0
    size_t const lenStr = strlen(str);
 8000da0:	4630      	mov	r0, r6
 8000da2:	f7ff fa1f 	bl	80001e4 <strlen>
    if(lenTkn == 0 || lenStr == 0) return false;
 8000da6:	f1ba 0f00 	cmp.w	sl, #0
 8000daa:	d029      	beq.n	8000e00 <cli_treat_command+0x154>
 8000dac:	b340      	cbz	r0, 8000e00 <cli_treat_command+0x154>
    if(lenTkn > lenStr) return false;
 8000dae:	4582      	cmp	sl, r0
 8000db0:	d826      	bhi.n	8000e00 <cli_treat_command+0x154>
 8000db2:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db6:	3e01      	subs	r6, #1
    for(size_t i = 0; tkn[i] != '\0' ; i++){
 8000db8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8000dbc:	b923      	cbnz	r3, 8000dc8 <cli_treat_command+0x11c>
        if(ret != NULL){
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d19b      	bne.n	8000cfa <cli_treat_command+0x4e>
        ret = (cliElement_t*) &currentMenu->subMenuRef[i];
 8000dc2:	686c      	ldr	r4, [r5, #4]
 8000dc4:	443c      	add	r4, r7
 8000dc6:	e01b      	b.n	8000e00 <cli_treat_command+0x154>
 8000dc8:	9300      	str	r3, [sp, #0]
        if(tolower(tkn[i]) != tolower(str[i])) return false;
 8000dca:	f006 fd6f 	bl	80078ac <__locale_ctype_ptr>
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	4418      	add	r0, r3
 8000dd2:	7842      	ldrb	r2, [r0, #1]
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	bf08      	it	eq
 8000ddc:	3320      	addeq	r3, #32
 8000dde:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	9200      	str	r2, [sp, #0]
 8000de6:	f006 fd61 	bl	80078ac <__locale_ctype_ptr>
 8000dea:	9a00      	ldr	r2, [sp, #0]
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	4410      	add	r0, r2
 8000df0:	7841      	ldrb	r1, [r0, #1]
 8000df2:	f001 0103 	and.w	r1, r1, #3
 8000df6:	2901      	cmp	r1, #1
 8000df8:	bf08      	it	eq
 8000dfa:	3220      	addeq	r2, #32
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d0db      	beq.n	8000db8 <cli_treat_command+0x10c>
 8000e00:	f109 0901 	add.w	r9, r9, #1
    for(uint8_t i = 0; !cli_is_terminator(&currentMenu->subMenuRef[i]); i++){
 8000e04:	2318      	movs	r3, #24
 8000e06:	6869      	ldr	r1, [r5, #4]
 8000e08:	fa5f f789 	uxtb.w	r7, r9
 8000e0c:	435f      	muls	r7, r3
 8000e0e:	19c8      	adds	r0, r1, r7
 8000e10:	f7ff fbda 	bl	80005c8 <cli_is_terminator>
 8000e14:	4606      	mov	r6, r0
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d0bb      	beq.n	8000d92 <cli_treat_command+0xe6>
        if(e == NULL){
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	f43f af6d 	beq.w	8000cfa <cli_treat_command+0x4e>
        if(cli_is_sub_menu(e)){
 8000e20:	6865      	ldr	r5, [r4, #4]
 8000e22:	b155      	cbz	r5, 8000e3a <cli_treat_command+0x18e>
        tkn = strtok(NULL, " ");
 8000e24:	4949      	ldr	r1, [pc, #292]	; (8000f4c <cli_treat_command+0x2a0>)
 8000e26:	2000      	movs	r0, #0
 8000e28:	f007 f964 	bl	80080f4 <strtok>
 8000e2c:	4625      	mov	r5, r4
 8000e2e:	4680      	mov	r8, r0
 8000e30:	e75c      	b.n	8000cec <cli_treat_command+0x40>
    if(currentMenu->subMenuRef == NULL) return NULL;
 8000e32:	f04f 0900 	mov.w	r9, #0
    cliElement_t* ret = NULL;
 8000e36:	464c      	mov	r4, r9
 8000e38:	e7e4      	b.n	8000e04 <cli_treat_command+0x158>
        else if(cli_is_action(e)){
 8000e3a:	68a3      	ldr	r3, [r4, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 810f 	beq.w	8001060 <cli_treat_command+0x3b4>
    if(e->args == NULL) {
 8000e42:	68e0      	ldr	r0, [r4, #12]
 8000e44:	2800      	cmp	r0, #0
 8000e46:	f000 810b 	beq.w	8001060 <cli_treat_command+0x3b4>
        bool elipsisPresent = false;
 8000e4a:	a90c      	add	r1, sp, #48	; 0x30
 8000e4c:	f801 5d1a 	strb.w	r5, [r1, #-26]!
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000e50:	f7ff fd48 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
        if(len == -1) return;
 8000e54:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000e58:	bf08      	it	eq
 8000e5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
        int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000e5e:	4680      	mov	r8, r0
 8000e60:	4689      	mov	r9, r1
        if(len == -1) return;
 8000e62:	f000 80fd 	beq.w	8001060 <cli_treat_command+0x3b4>
        argsStr = strtok(NULL, "\0");
 8000e66:	4628      	mov	r0, r5
 8000e68:	493f      	ldr	r1, [pc, #252]	; (8000f68 <cli_treat_command+0x2bc>)
 8000e6a:	4d40      	ldr	r5, [pc, #256]	; (8000f6c <cli_treat_command+0x2c0>)
 8000e6c:	f007 f942 	bl	80080f4 <strtok>
        if(argsStr == NULL) argsStr = "";
 8000e70:	b140      	cbz	r0, 8000e84 <cli_treat_command+0x1d8>
        argsStr = strtok(NULL, "\0");
 8000e72:	6028      	str	r0, [r5, #0]
        if(argsStr == NULL && len != 0) { ERR_PRINTLN("No arguments in list"); break; }
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	b91b      	cbnz	r3, 8000e80 <cli_treat_command+0x1d4>
 8000e78:	ea58 0309 	orrs.w	r3, r8, r9
 8000e7c:	f040 8083 	bne.w	8000f86 <cli_treat_command+0x2da>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000e80:	4f3b      	ldr	r7, [pc, #236]	; (8000f70 <cli_treat_command+0x2c4>)
 8000e82:	e01b      	b.n	8000ebc <cli_treat_command+0x210>
        if(argsStr == NULL) argsStr = "";
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <cli_treat_command+0x2c8>)
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	e7f4      	b.n	8000e74 <cli_treat_command+0x1c8>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000e8a:	f1aa 0322 	sub.w	r3, sl, #34	; 0x22
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b17      	cmp	r3, #23
 8000e92:	d803      	bhi.n	8000e9c <cli_treat_command+0x1f0>
 8000e94:	fa27 f303 	lsr.w	r3, r7, r3
 8000e98:	07db      	lsls	r3, r3, #31
 8000e9a:	d419      	bmi.n	8000ed0 <cli_treat_command+0x224>
 8000e9c:	f006 fd06 	bl	80078ac <__locale_ctype_ptr>
 8000ea0:	4450      	add	r0, sl
 8000ea2:	7843      	ldrb	r3, [r0, #1]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	bf08      	it	eq
 8000eac:	f10a 0a20 	addeq.w	sl, sl, #32
 8000eb0:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000eb4:	dc36      	bgt.n	8000f24 <cli_treat_command+0x278>
            argsStr++;
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	602b      	str	r3, [r5, #0]
        while(argsStr != NULL && argsStr[0] != '\0') {
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	b13b      	cbz	r3, 8000ed0 <cli_treat_command+0x224>
 8000ec0:	f893 a000 	ldrb.w	sl, [r3]
 8000ec4:	f1ba 0f00 	cmp.w	sl, #0
 8000ec8:	d002      	beq.n	8000ed0 <cli_treat_command+0x224>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000eca:	f1ba 0f7b 	cmp.w	sl, #123	; 0x7b
 8000ece:	d1dc      	bne.n	8000e8a <cli_treat_command+0x1de>
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8000ed0:	f8d5 a000 	ldr.w	sl, [r5]
 8000ed4:	f1ba 0f00 	cmp.w	sl, #0
 8000ed8:	d14e      	bne.n	8000f78 <cli_treat_command+0x2cc>
    if(e->args == NULL) {
 8000eda:	68e0      	ldr	r0, [r4, #12]
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d052      	beq.n	8000f86 <cli_treat_command+0x2da>
    bool elipsisPresent = 0;
 8000ee0:	a90c      	add	r1, sp, #48	; 0x30
 8000ee2:	2700      	movs	r7, #0
 8000ee4:	f801 7d19 	strb.w	r7, [r1, #-25]!
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000ee8:	f7ff fcfc 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(len == -1){
 8000eec:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000ef0:	bf08      	it	eq
 8000ef2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000ef6:	4680      	mov	r8, r0
 8000ef8:	4689      	mov	r9, r1
    if(len == -1){
 8000efa:	d044      	beq.n	8000f86 <cli_treat_command+0x2da>
    for(i = 0; i < len; i++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	4547      	cmp	r7, r8
 8000f00:	eb73 0309 	sbcs.w	r3, r3, r9
 8000f04:	db6c      	blt.n	8000fe0 <cli_treat_command+0x334>
    if(elipsisPresent){
 8000f06:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 809e 	bne.w	800104c <cli_treat_command+0x3a0>
        if(argTkn != NULL && argTkn[0] != '\0'){
 8000f10:	f1ba 0f00 	cmp.w	sl, #0
 8000f14:	f000 80a1 	beq.w	800105a <cli_treat_command+0x3ae>
 8000f18:	f89a 3000 	ldrb.w	r3, [sl]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 809c 	beq.w	800105a <cli_treat_command+0x3ae>
 8000f22:	e030      	b.n	8000f86 <cli_treat_command+0x2da>
            if(argsStr[0] == '-' || argsStr[0] == '{' || argsStr[0] == '"' || ('0' <= argsStr[0] && argsStr[0] <= '9') || ('a' <= tolower(argsStr[0]) && tolower(argsStr[0]) <= 'f')) break;
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	f893 a000 	ldrb.w	sl, [r3]
 8000f2a:	f006 fcbf 	bl	80078ac <__locale_ctype_ptr>
 8000f2e:	4450      	add	r0, sl
 8000f30:	4653      	mov	r3, sl
 8000f32:	7842      	ldrb	r2, [r0, #1]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	2a01      	cmp	r2, #1
 8000f3a:	bf08      	it	eq
 8000f3c:	3320      	addeq	r3, #32
 8000f3e:	2b66      	cmp	r3, #102	; 0x66
 8000f40:	dcb9      	bgt.n	8000eb6 <cli_treat_command+0x20a>
 8000f42:	e7c5      	b.n	8000ed0 <cli_treat_command+0x224>
 8000f44:	20000410 	.word	0x20000410
 8000f48:	08008a50 	.word	0x08008a50
 8000f4c:	08009b66 	.word	0x08009b66
 8000f50:	08008ac9 	.word	0x08008ac9
 8000f54:	08008ab0 	.word	0x08008ab0
 8000f58:	08008c05 	.word	0x08008c05
 8000f5c:	08008ac4 	.word	0x08008ac4
 8000f60:	08008aba 	.word	0x08008aba
 8000f64:	08008ad3 	.word	0x08008ad3
 8000f68:	08008a68 	.word	0x08008a68
 8000f6c:	2000040c 	.word	0x2000040c
 8000f70:	00ffc801 	.word	0x00ffc801
 8000f74:	08008b74 	.word	0x08008b74
        if(argsStr != NULL && argsStr[0] == '\0' && len != 0) { ERR_PRINTLN("Unable to find first argument in list"); break; }
 8000f78:	f89a 3000 	ldrb.w	r3, [sl]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ac      	bne.n	8000eda <cli_treat_command+0x22e>
 8000f80:	ea58 0309 	orrs.w	r3, r8, r9
 8000f84:	d0a9      	beq.n	8000eda <cli_treat_command+0x22e>
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8000f86:	4875      	ldr	r0, [pc, #468]	; (800115c <cli_treat_command+0x4b0>)
    argsStr = NULL;
 8000f88:	2700      	movs	r7, #0
 8000f8a:	602f      	str	r7, [r5, #0]
    MENU_PRINTLN("Invalid arguments, use 10, -10, or 0x10 for integers, 2.5 or -2.5 for float, and \"foo\" or { 0A 0B } for strings and buffers");
 8000f8c:	f7ff fe80 	bl	8000c90 <cli_printf>
    MENU_PRINTLN("");
 8000f90:	4873      	ldr	r0, [pc, #460]	; (8001160 <cli_treat_command+0x4b4>)
 8000f92:	f7ff fe7d 	bl	8000c90 <cli_printf>
    if(e->args == NULL) {
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d061      	beq.n	8001060 <cli_treat_command+0x3b4>
    MENU_PRINTLN("Action '%s' - %s - usage :", ( (e->name == NULL) ? "NULL_NAME" : e->name), ( (e->desc == NULL) ? "NULL_DESC" : e->desc ) );
 8000f9c:	6922      	ldr	r2, [r4, #16]
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <cli_treat_command+0x4b8>)
 8000fa0:	6821      	ldr	r1, [r4, #0]
 8000fa2:	4871      	ldr	r0, [pc, #452]	; (8001168 <cli_treat_command+0x4bc>)
 8000fa4:	42ba      	cmp	r2, r7
 8000fa6:	bf08      	it	eq
 8000fa8:	461a      	moveq	r2, r3
 8000faa:	4b70      	ldr	r3, [pc, #448]	; (800116c <cli_treat_command+0x4c0>)
 8000fac:	42b9      	cmp	r1, r7
 8000fae:	bf08      	it	eq
 8000fb0:	4619      	moveq	r1, r3
 8000fb2:	f7ff fe6d 	bl	8000c90 <cli_printf>
    bool elipsisPresent = 0;
 8000fb6:	a90c      	add	r1, sp, #48	; 0x30
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000fb8:	68e0      	ldr	r0, [r4, #12]
    bool elipsisPresent = 0;
 8000fba:	f801 7d19 	strb.w	r7, [r1, #-25]!
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000fbe:	f7ff fc91 	bl	80008e4 <cli_verify_args_str.isra.1.constprop.6>
    if(len == -1){
 8000fc2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000fc6:	bf08      	it	eq
 8000fc8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    int64_t len = cli_verify_args_str(e, &elipsisPresent);
 8000fcc:	4680      	mov	r8, r0
 8000fce:	4689      	mov	r9, r1
    if(len == -1){
 8000fd0:	d046      	beq.n	8001060 <cli_treat_command+0x3b4>
    if(len == 0){
 8000fd2:	ea58 0309 	orrs.w	r3, r8, r9
 8000fd6:	d159      	bne.n	800108c <cli_treat_command+0x3e0>
        MENU_PRINTLN("   No arguments");
 8000fd8:	4865      	ldr	r0, [pc, #404]	; (8001170 <cli_treat_command+0x4c4>)
    MENU_PRINTLN("");
 8000fda:	f7ff fe59 	bl	8000c90 <cli_printf>
 8000fde:	e03f      	b.n	8001060 <cli_treat_command+0x3b4>
        if(argTkn == NULL) {
 8000fe0:	f1ba 0f00 	cmp.w	sl, #0
 8000fe4:	d0cf      	beq.n	8000f86 <cli_treat_command+0x2da>
        if(argTkn[0] == '\0'){
 8000fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0cb      	beq.n	8000f86 <cli_treat_command+0x2da>
        switch(e->args[i]){
 8000fee:	68e3      	ldr	r3, [r4, #12]
 8000ff0:	5ddb      	ldrb	r3, [r3, r7]
 8000ff2:	2b69      	cmp	r3, #105	; 0x69
 8000ff4:	d00e      	beq.n	8001014 <cli_treat_command+0x368>
 8000ff6:	d807      	bhi.n	8001008 <cli_treat_command+0x35c>
 8000ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8000ffa:	d017      	beq.n	800102c <cli_treat_command+0x380>
 8000ffc:	2b62      	cmp	r3, #98	; 0x62
 8000ffe:	d1c2      	bne.n	8000f86 <cli_treat_command+0x2da>
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 8001000:	4650      	mov	r0, sl
 8001002:	f7ff fbe9 	bl	80007d8 <cli_verify_buffer.isra.3>
 8001006:	e009      	b.n	800101c <cli_treat_command+0x370>
        switch(e->args[i]){
 8001008:	2b73      	cmp	r3, #115	; 0x73
 800100a:	d0f9      	beq.n	8001000 <cli_treat_command+0x354>
 800100c:	2b75      	cmp	r3, #117	; 0x75
 800100e:	d1ba      	bne.n	8000f86 <cli_treat_command+0x2da>
                if(cli_verify_int(argTkn, true, true)) break;
 8001010:	2101      	movs	r1, #1
 8001012:	e000      	b.n	8001016 <cli_treat_command+0x36a>
                if(cli_verify_int(argTkn, false, true)) break;
 8001014:	2100      	movs	r1, #0
 8001016:	4650      	mov	r0, sl
 8001018:	f7ff fb5c 	bl	80006d4 <cli_verify_int.isra.2>
 800101c:	2800      	cmp	r0, #0
 800101e:	d0b2      	beq.n	8000f86 <cli_treat_command+0x2da>
        argTkn = cli_go_to_next_argument(argTkn);
 8001020:	4650      	mov	r0, sl
 8001022:	f7ff fb0f 	bl	8000644 <cli_go_to_next_argument>
    for(i = 0; i < len; i++){
 8001026:	3701      	adds	r7, #1
        argTkn = cli_go_to_next_argument(argTkn);
 8001028:	4682      	mov	sl, r0
 800102a:	e767      	b.n	8000efc <cli_treat_command+0x250>
                if(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false)
 800102c:	2100      	movs	r1, #0
 800102e:	4650      	mov	r0, sl
 8001030:	f7ff fb50 	bl	80006d4 <cli_verify_int.isra.2>
 8001034:	2800      	cmp	r0, #0
 8001036:	d1f3      	bne.n	8001020 <cli_treat_command+0x374>
 8001038:	e7e2      	b.n	8001000 <cli_treat_command+0x354>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 800103a:	2100      	movs	r1, #0
 800103c:	4650      	mov	r0, sl
 800103e:	f7ff fb49 	bl	80006d4 <cli_verify_int.isra.2>
 8001042:	b1b8      	cbz	r0, 8001074 <cli_treat_command+0x3c8>
            argTkn = cli_go_to_next_argument(argTkn);
 8001044:	4650      	mov	r0, sl
 8001046:	f7ff fafd 	bl	8000644 <cli_go_to_next_argument>
 800104a:	4682      	mov	sl, r0
        while(argTkn != NULL && argTkn[0] != '\0'){
 800104c:	f1ba 0f00 	cmp.w	sl, #0
 8001050:	d003      	beq.n	800105a <cli_treat_command+0x3ae>
 8001052:	f89a 3000 	ldrb.w	r3, [sl]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1ef      	bne.n	800103a <cli_treat_command+0x38e>
        if(e->action == NULL) { 
 800105a:	68a3      	ldr	r3, [r4, #8]
 800105c:	b983      	cbnz	r3, 8001080 <cli_treat_command+0x3d4>
        argsStr = NULL;
 800105e:	602b      	str	r3, [r5, #0]
    len = 0;
 8001060:	4b44      	ldr	r3, [pc, #272]	; (8001174 <cli_treat_command+0x4c8>)
    memset(cliBuffer, 0, maxLen);
 8001062:	9a02      	ldr	r2, [sp, #8]
    len = 0;
 8001064:	2100      	movs	r1, #0
    memset(cliBuffer, 0, maxLen);
 8001066:	4658      	mov	r0, fp
    len = 0;
 8001068:	6019      	str	r1, [r3, #0]
}
 800106a:	b00d      	add	sp, #52	; 0x34
 800106c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(cliBuffer, 0, maxLen);
 8001070:	f006 bc66 	b.w	8007940 <memset>
            if( !(cli_verify_int(argTkn, false, false) || cli_verify_buffer(argTkn, false) 
 8001074:	4650      	mov	r0, sl
 8001076:	f7ff fbaf 	bl	80007d8 <cli_verify_buffer.isra.3>
 800107a:	2800      	cmp	r0, #0
 800107c:	d1e2      	bne.n	8001044 <cli_treat_command+0x398>
 800107e:	e782      	b.n	8000f86 <cli_treat_command+0x2da>
        currEl = e;
 8001080:	4e3d      	ldr	r6, [pc, #244]	; (8001178 <cli_treat_command+0x4cc>)
 8001082:	6034      	str	r4, [r6, #0]
        e->action();
 8001084:	4798      	blx	r3
        currEl = NULL;
 8001086:	2300      	movs	r3, #0
 8001088:	6033      	str	r3, [r6, #0]
 800108a:	e7e8      	b.n	800105e <cli_treat_command+0x3b2>
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 800108c:	6963      	ldr	r3, [r4, #20]
 800108e:	b34b      	cbz	r3, 80010e4 <cli_treat_command+0x438>
 8001090:	681d      	ldr	r5, [r3, #0]
 8001092:	fab5 f585 	clz	r5, r5
 8001096:	096d      	lsrs	r5, r5, #5
 8001098:	2200      	movs	r2, #0
 800109a:	2300      	movs	r3, #0
 800109c:	e9cd 2300 	strd	r2, r3, [sp]
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 80010a0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8001198 <cli_treat_command+0x4ec>
    for(i = 0; i < len; i++){
 80010a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80010a8:	4542      	cmp	r2, r8
 80010aa:	eb73 0309 	sbcs.w	r3, r3, r9
 80010ae:	db1b      	blt.n	80010e8 <cli_treat_command+0x43c>
 80010b0:	4646      	mov	r6, r8
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	f179 0300 	sbcs.w	r3, r9, #0
    if(elipsisPresent){
 80010b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80010bc:	bfb8      	it	lt
 80010be:	2600      	movlt	r6, #0
 80010c0:	b173      	cbz	r3, 80010e0 <cli_treat_command+0x434>
        MENU_PRINTF("   < various > - ");
 80010c2:	482e      	ldr	r0, [pc, #184]	; (800117c <cli_treat_command+0x4d0>)
 80010c4:	f7ff fde4 	bl	8000c90 <cli_printf>
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 80010c8:	b93d      	cbnz	r5, 80010da <cli_treat_command+0x42e>
 80010ca:	6963      	ldr	r3, [r4, #20]
 80010cc:	b12b      	cbz	r3, 80010da <cli_treat_command+0x42e>
 80010ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
        if(!argsDescEnded) MENU_PRINTLN("%s", e->argsDesc[i]);
 80010d2:	b111      	cbz	r1, 80010da <cli_treat_command+0x42e>
 80010d4:	482a      	ldr	r0, [pc, #168]	; (8001180 <cli_treat_command+0x4d4>)
 80010d6:	f7ff fddb 	bl	8000c90 <cli_printf>
        MENU_PRINTLN("");
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <cli_treat_command+0x4b4>)
 80010dc:	f7ff fdd8 	bl	8000c90 <cli_printf>
    MENU_PRINTLN("");
 80010e0:	481f      	ldr	r0, [pc, #124]	; (8001160 <cli_treat_command+0x4b4>)
 80010e2:	e77a      	b.n	8000fda <cli_treat_command+0x32e>
    bool argsDescEnded = (e->argsDesc == NULL || e->argsDesc[0] == NULL);
 80010e4:	2501      	movs	r5, #1
 80010e6:	e7d7      	b.n	8001098 <cli_treat_command+0x3ec>
        switch(e->args[i]){
 80010e8:	9f00      	ldr	r7, [sp, #0]
 80010ea:	68e3      	ldr	r3, [r4, #12]
 80010ec:	5ddb      	ldrb	r3, [r3, r7]
 80010ee:	2b69      	cmp	r3, #105	; 0x69
 80010f0:	d01f      	beq.n	8001132 <cli_treat_command+0x486>
 80010f2:	d805      	bhi.n	8001100 <cli_treat_command+0x454>
 80010f4:	2b2a      	cmp	r3, #42	; 0x2a
 80010f6:	d022      	beq.n	800113e <cli_treat_command+0x492>
 80010f8:	2b62      	cmp	r3, #98	; 0x62
 80010fa:	d01e      	beq.n	800113a <cli_treat_command+0x48e>
            default  : MENU_PRINTF("   < unknown > - "); break;
 80010fc:	4821      	ldr	r0, [pc, #132]	; (8001184 <cli_treat_command+0x4d8>)
 80010fe:	e004      	b.n	800110a <cli_treat_command+0x45e>
        switch(e->args[i]){
 8001100:	2b73      	cmp	r3, #115	; 0x73
 8001102:	d018      	beq.n	8001136 <cli_treat_command+0x48a>
 8001104:	2b75      	cmp	r3, #117	; 0x75
 8001106:	d1f9      	bne.n	80010fc <cli_treat_command+0x450>
            case 'u' : MENU_PRINTF("   < uint64  > - "); break;
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <cli_treat_command+0x4dc>)
            default  : MENU_PRINTF("   < unknown > - "); break;
 800110a:	f7ff fdc1 	bl	8000c90 <cli_printf>
        argsDescEnded = (argsDescEnded == true || e->argsDesc == NULL || e->argsDesc[i] == NULL);
 800110e:	b925      	cbnz	r5, 800111a <cli_treat_command+0x46e>
 8001110:	6963      	ldr	r3, [r4, #20]
 8001112:	b113      	cbz	r3, 800111a <cli_treat_command+0x46e>
 8001114:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
        if(argsDescEnded){
 8001118:	b999      	cbnz	r1, 8001142 <cli_treat_command+0x496>
            MENU_PRINTLN("");
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <cli_treat_command+0x4b4>)
 800111c:	f7ff fdb8 	bl	8000c90 <cli_printf>
 8001120:	4635      	mov	r5, r6
 8001122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001126:	3201      	adds	r2, #1
 8001128:	f143 0300 	adc.w	r3, r3, #0
 800112c:	e9cd 2300 	strd	r2, r3, [sp]
 8001130:	e7b8      	b.n	80010a4 <cli_treat_command+0x3f8>
            case 'i' : MENU_PRINTF("   < int64   > - "); break;
 8001132:	4650      	mov	r0, sl
 8001134:	e7e9      	b.n	800110a <cli_treat_command+0x45e>
            case 's' : MENU_PRINTF("   < string  > - "); break;
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <cli_treat_command+0x4e0>)
 8001138:	e7e7      	b.n	800110a <cli_treat_command+0x45e>
            case 'b' : MENU_PRINTF("   < buffer  > - "); break;
 800113a:	4815      	ldr	r0, [pc, #84]	; (8001190 <cli_treat_command+0x4e4>)
 800113c:	e7e5      	b.n	800110a <cli_treat_command+0x45e>
            case '*' : MENU_PRINTF("   < any     > - "); break;
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <cli_treat_command+0x4e8>)
 8001140:	e7e3      	b.n	800110a <cli_treat_command+0x45e>
        MENU_PRINTLN("%s", e->argsDesc[i]);   
 8001142:	480f      	ldr	r0, [pc, #60]	; (8001180 <cli_treat_command+0x4d4>)
 8001144:	f7ff fda4 	bl	8000c90 <cli_printf>
 8001148:	e7eb      	b.n	8001122 <cli_treat_command+0x476>
    for(uint32_t i = 0; i < spaces; i++) MENU_PRINTF(" ");
 800114a:	4648      	mov	r0, r9
 800114c:	f7ff fda0 	bl	8000c90 <cli_printf>
 8001150:	3401      	adds	r4, #1
 8001152:	e610      	b.n	8000d76 <cli_treat_command+0xca>
}
 8001154:	b00d      	add	sp, #52	; 0x34
 8001156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115a:	bf00      	nop
 800115c:	08008ada 	.word	0x08008ada
 8001160:	08008b72 	.word	0x08008b72
 8001164:	08008aba 	.word	0x08008aba
 8001168:	08008b58 	.word	0x08008b58
 800116c:	08008ab0 	.word	0x08008ab0
 8001170:	08008b75 	.word	0x08008b75
 8001174:	20000418 	.word	0x20000418
 8001178:	20000414 	.word	0x20000414
 800117c:	08008bf3 	.word	0x08008bf3
 8001180:	080093b7 	.word	0x080093b7
 8001184:	08008be1 	.word	0x08008be1
 8001188:	08008b87 	.word	0x08008b87
 800118c:	08008bab 	.word	0x08008bab
 8001190:	08008bbd 	.word	0x08008bbd
 8001194:	08008bcf 	.word	0x08008bcf
 8001198:	08008b99 	.word	0x08008b99

0800119c <cli_rcv_char_cb_irq>:
 * CLI Receive char (IRQ)
 *
 * @brief This function receives a character and puts in the cli buffer
 *
 **********************************************************************/
void cli_rcv_char_cb_irq(){
 800119c:	b510      	push	{r4, lr}
	cli_insert_char(cliBuffer, sizeof(cliBuffer), c);
 800119e:	4c06      	ldr	r4, [pc, #24]	; (80011b8 <cli_rcv_char_cb_irq+0x1c>)
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <cli_rcv_char_cb_irq+0x20>)
 80011a2:	7822      	ldrb	r2, [r4, #0]
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	f7ff fd49 	bl	8000c3c <cli_insert_char>
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 80011aa:	4621      	mov	r1, r4
 80011ac:	2201      	movs	r2, #1
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <cli_rcv_char_cb_irq+0x24>)
}
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 80011b4:	f006 ba0e 	b.w	80075d4 <HAL_UART_Receive_IT>
 80011b8:	2000041c 	.word	0x2000041c
 80011bc:	2000041d 	.word	0x2000041d
 80011c0:	20014e1c 	.word	0x20014e1c

080011c4 <cli_init>:
 *
 * @brief This function initializes the CLI
 *
 **********************************************************************/
void cli_init(){
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <cli_init+0x10>)
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 80011c6:	4904      	ldr	r1, [pc, #16]	; (80011d8 <cli_init+0x14>)
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 80011c8:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 80011ca:	2201      	movs	r2, #1
	__HAL_UART_FLUSH_DRREGISTER(&USART_CLI);
 80011cc:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&USART_CLI, (uint8_t*)&c, 1);
 80011ce:	f006 ba01 	b.w	80075d4 <HAL_UART_Receive_IT>
 80011d2:	bf00      	nop
 80011d4:	20014e1c 	.word	0x20014e1c
 80011d8:	2000041c 	.word	0x2000041c

080011dc <cli_process>:
 *
 * @brief This function treats the command sent by CLI
 *
 **********************************************************************/
void cli_process(){
	cli_treat_command(cliBuffer, sizeof(cliBuffer));
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <cli_process+0x8>)
 80011e0:	f7ff bd64 	b.w	8000cac <cli_treat_command>
 80011e4:	2000041d 	.word	0x2000041d

080011e8 <erase>:

static void erase(){

	/* Get arguments
	 --------------------------------------------------*/
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 80011e8:	2100      	movs	r1, #0
static void erase(){
 80011ea:	b510      	push	{r4, lr}
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 80011ec:	4608      	mov	r0, r1
 80011ee:	f7ff fcf6 	bl	8000bde <cli_get_uint_argument>
	uint32_t addrE = cli_get_uint32_argument(1, NULL);
 80011f2:	2100      	movs	r1, #0
	uint32_t addrB = cli_get_uint32_argument(0, NULL);
 80011f4:	4604      	mov	r4, r0
	uint32_t addrE = cli_get_uint32_argument(1, NULL);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff fcf1 	bl	8000bde <cli_get_uint_argument>

	/* Erase sectors
	 --------------------------------------------------*/
	int32_t erase = os_flash_erase(addrB, addrE);
 80011fc:	4601      	mov	r1, r0
 80011fe:	4620      	mov	r0, r4
 8001200:	f001 fa2c 	bl	800265c <os_flash_erase>
	ASSERT(erase >= 0);
 8001204:	1e04      	subs	r4, r0, #0
 8001206:	da04      	bge.n	8001212 <erase+0x2a>
 8001208:	225c      	movs	r2, #92	; 0x5c
 800120a:	4906      	ldr	r1, [pc, #24]	; (8001224 <erase+0x3c>)
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <erase+0x40>)
 800120e:	f006 ff0f 	bl	8008030 <iprintf>

	/* Feedback
	 --------------------------------------------------*/
	PRINTLN("erase %ld sectors", erase);
 8001212:	4623      	mov	r3, r4
 8001214:	2260      	movs	r2, #96	; 0x60
 8001216:	4903      	ldr	r1, [pc, #12]	; (8001224 <erase+0x3c>)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <erase+0x44>)
}
 800121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PRINTLN("erase %ld sectors", erase);
 800121e:	f006 bf07 	b.w	8008030 <iprintf>
 8001222:	bf00      	nop
 8001224:	08008c1c 	.word	0x08008c1c
 8001228:	08008c28 	.word	0x08008c28
 800122c:	08008c42 	.word	0x08008c42

08001230 <write>:
static void write(){
 8001230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001234:	2100      	movs	r1, #0
static void write(){
 8001236:	b0b4      	sub	sp, #208	; 0xd0
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001238:	4608      	mov	r0, r1
 800123a:	f7ff fcd0 	bl	8000bde <cli_get_uint_argument>
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 800123e:	ad02      	add	r5, sp, #8
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 8001240:	4604      	mov	r4, r0
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001242:	2300      	movs	r3, #0
 8001244:	22c8      	movs	r2, #200	; 0xc8
 8001246:	4629      	mov	r1, r5
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fcd8 	bl	8000bfe <cli_get_buffer_argument>
	int32_t writeB = os_flash_write(addr, buffer, realSize);
 800124e:	4629      	mov	r1, r5
 8001250:	4602      	mov	r2, r0
	uint32_t realSize = cli_get_buffer_argument(1, buffer, sizeof(buffer), NULL);
 8001252:	4606      	mov	r6, r0
	int32_t writeB = os_flash_write(addr, buffer, realSize);
 8001254:	4620      	mov	r0, r4
 8001256:	f001 f957 	bl	8002508 <os_flash_write>
	ASSERT(writeB >= 0);
 800125a:	1e04      	subs	r4, r0, #0
 800125c:	da04      	bge.n	8001268 <write+0x38>
 800125e:	2248      	movs	r2, #72	; 0x48
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <write+0x6c>)
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <write+0x70>)
 8001264:	f006 fee4 	bl	8008030 <iprintf>
	PRINTLN("Write %ld bytes", writeB);
 8001268:	4623      	mov	r3, r4
 800126a:	224c      	movs	r2, #76	; 0x4c
 800126c:	490b      	ldr	r1, [pc, #44]	; (800129c <write+0x6c>)
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <write+0x74>)
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001270:	4f0a      	ldr	r7, [pc, #40]	; (800129c <write+0x6c>)
 8001272:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80012a8 <write+0x78>
	PRINTLN("Write %ld bytes", writeB);
 8001276:	f006 fedb 	bl	8008030 <iprintf>
	for(int i = 0; i < realSize; i++){
 800127a:	2400      	movs	r4, #0
 800127c:	42b4      	cmp	r4, r6
 800127e:	d102      	bne.n	8001286 <write+0x56>
}
 8001280:	b034      	add	sp, #208	; 0xd0
 8001282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 8001286:	5d2b      	ldrb	r3, [r5, r4]
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	224e      	movs	r2, #78	; 0x4e
 800128c:	4623      	mov	r3, r4
 800128e:	4639      	mov	r1, r7
 8001290:	4640      	mov	r0, r8
 8001292:	f006 fecd 	bl	8008030 <iprintf>
	for(int i = 0; i < realSize; i++){
 8001296:	3401      	adds	r4, #1
 8001298:	e7f0      	b.n	800127c <write+0x4c>
 800129a:	bf00      	nop
 800129c:	08008c1c 	.word	0x08008c1c
 80012a0:	08008c28 	.word	0x08008c28
 80012a4:	08008d46 	.word	0x08008d46
 80012a8:	08008d62 	.word	0x08008d62

080012ac <read>:
static void read(){
 80012ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4608      	mov	r0, r1
 80012b4:	f7ff fc93 	bl	8000bde <cli_get_uint_argument>
	uint32_t len = cli_get_uint32_argument(1, NULL);
 80012b8:	2100      	movs	r1, #0
	uint32_t addr = cli_get_uint32_argument(0, NULL);
 80012ba:	4604      	mov	r4, r0
	uint32_t len = cli_get_uint32_argument(1, NULL);
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fc8e 	bl	8000bde <cli_get_uint_argument>
 80012c2:	4606      	mov	r6, r0
	uint8_t* buffer = (uint8_t*)os_heap_alloc(len);
 80012c4:	f000 fa3e 	bl	8001744 <os_heap_alloc>
	ASSERT(buffer != NULL);
 80012c8:	4605      	mov	r5, r0
 80012ca:	b920      	cbnz	r0, 80012d6 <read+0x2a>
 80012cc:	222c      	movs	r2, #44	; 0x2c
 80012ce:	491a      	ldr	r1, [pc, #104]	; (8001338 <read+0x8c>)
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <read+0x90>)
 80012d2:	f006 fead 	bl	8008030 <iprintf>
	int32_t readB = os_flash_read(addr, buffer, len);
 80012d6:	4632      	mov	r2, r6
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f001 f9a4 	bl	8002628 <os_flash_read>
	ASSERT(readB >= 0);
 80012e0:	1e06      	subs	r6, r0, #0
 80012e2:	da04      	bge.n	80012ee <read+0x42>
 80012e4:	2231      	movs	r2, #49	; 0x31
 80012e6:	4914      	ldr	r1, [pc, #80]	; (8001338 <read+0x8c>)
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <read+0x90>)
 80012ea:	f006 fea1 	bl	8008030 <iprintf>
	PRINTLN("Read %ld bytes", readB);
 80012ee:	4633      	mov	r3, r6
 80012f0:	2235      	movs	r2, #53	; 0x35
 80012f2:	4911      	ldr	r1, [pc, #68]	; (8001338 <read+0x8c>)
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <read+0x94>)
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 80012f6:	4f10      	ldr	r7, [pc, #64]	; (8001338 <read+0x8c>)
 80012f8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001344 <read+0x98>
	PRINTLN("Read %ld bytes", readB);
 80012fc:	f006 fe98 	bl	8008030 <iprintf>
	for(int i = 0; i < readB; i++){
 8001300:	2400      	movs	r4, #0
 8001302:	42b4      	cmp	r4, r6
 8001304:	db0b      	blt.n	800131e <read+0x72>
	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 8001306:	4628      	mov	r0, r5
 8001308:	f000 fa7c 	bl	8001804 <os_heap_free>
 800130c:	b188      	cbz	r0, 8001332 <read+0x86>
 800130e:	490a      	ldr	r1, [pc, #40]	; (8001338 <read+0x8c>)
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <read+0x90>)
 8001312:	223a      	movs	r2, #58	; 0x3a
}
 8001314:	b002      	add	sp, #8
 8001316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(os_heap_free(buffer) == OS_ERR_OK);
 800131a:	f006 be89 	b.w	8008030 <iprintf>
		PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 800131e:	5d2b      	ldrb	r3, [r5, r4]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2237      	movs	r2, #55	; 0x37
 8001324:	4623      	mov	r3, r4
 8001326:	4639      	mov	r1, r7
 8001328:	4640      	mov	r0, r8
 800132a:	f006 fe81 	bl	8008030 <iprintf>
	for(int i = 0; i < readB; i++){
 800132e:	3401      	adds	r4, #1
 8001330:	e7e7      	b.n	8001302 <read+0x56>
}
 8001332:	b002      	add	sp, #8
 8001334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001338:	08008c1c 	.word	0x08008c1c
 800133c:	08008c28 	.word	0x08008c28
 8001340:	08008c6c 	.word	0x08008c6c
 8001344:	08008d62 	.word	0x08008d62

08001348 <ls>:
	else{
		PRINTLN("Remove '%s' OK", name);
	}
}

static void ls(){
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	b0d2      	sub	sp, #328	; 0x148

	/* Open current directory
	 --------------------------------------------------*/
	lfs_dir_t dir;
	int err = lfs_dir_open(&lfs, &dir, cur_dir);
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <ls+0x7c>)
 800134e:	481e      	ldr	r0, [pc, #120]	; (80013c8 <ls+0x80>)
 8001350:	a903      	add	r1, sp, #12
 8001352:	f004 fdb5 	bl	8005ec0 <lfs_dir_open>
	if(err < 0){
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	db18      	blt.n	800138c <ls+0x44>
	struct lfs_info info;
	while(1){

		/* Get its info
		 --------------------------------------------------*/
		err = lfs_dir_read(&lfs, &dir, &info);
 800135a:	4e1b      	ldr	r6, [pc, #108]	; (80013c8 <ls+0x80>)
		if(strlen(info.name) == 0)
			break;

		/* Print filename and size
		 --------------------------------------------------*/
		PRINTLN("[%s] %s, size = %lu", info.type == LFS_TYPE_REG ? "File" : "Dir", info.name, info.size);
 800135c:	4d1b      	ldr	r5, [pc, #108]	; (80013cc <ls+0x84>)
 800135e:	4c1c      	ldr	r4, [pc, #112]	; (80013d0 <ls+0x88>)
		err = lfs_dir_read(&lfs, &dir, &info);
 8001360:	aa10      	add	r2, sp, #64	; 0x40
 8001362:	a903      	add	r1, sp, #12
 8001364:	4630      	mov	r0, r6
 8001366:	f004 fe0f 	bl	8005f88 <lfs_dir_read>
		if(err < 0){
 800136a:	1e03      	subs	r3, r0, #0
 800136c:	da15      	bge.n	800139a <ls+0x52>
			PRINTLN("Dir open err %d", err);
 800136e:	22b8      	movs	r2, #184	; 0xb8
 8001370:	4918      	ldr	r1, [pc, #96]	; (80013d4 <ls+0x8c>)
 8001372:	4819      	ldr	r0, [pc, #100]	; (80013d8 <ls+0x90>)
 8001374:	f006 fe5c 	bl	8008030 <iprintf>
	};

	/* Close directory
	 --------------------------------------------------*/
	err = lfs_dir_close(&lfs, &dir);
 8001378:	a903      	add	r1, sp, #12
 800137a:	4813      	ldr	r0, [pc, #76]	; (80013c8 <ls+0x80>)
 800137c:	f004 fdf6 	bl	8005f6c <lfs_dir_close>
	if(err < 0){
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	da08      	bge.n	8001396 <ls+0x4e>
		PRINTLN("Dir close err %d", err);
 8001384:	22ca      	movs	r2, #202	; 0xca
 8001386:	4913      	ldr	r1, [pc, #76]	; (80013d4 <ls+0x8c>)
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <ls+0x94>)
 800138a:	e002      	b.n	8001392 <ls+0x4a>
		PRINTLN("Dir open err %d", err);
 800138c:	4911      	ldr	r1, [pc, #68]	; (80013d4 <ls+0x8c>)
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <ls+0x90>)
 8001390:	22ab      	movs	r2, #171	; 0xab
		PRINTLN("Dir close err %d", err);
 8001392:	f006 fe4d 	bl	8008030 <iprintf>
	}
}
 8001396:	b052      	add	sp, #328	; 0x148
 8001398:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen(info.name) == 0)
 800139a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0ea      	beq.n	8001378 <ls+0x30>
		PRINTLN("[%s] %s, size = %lu", info.type == LFS_TYPE_REG ? "File" : "Dir", info.name, info.size);
 80013a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80013a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	aa12      	add	r2, sp, #72	; 0x48
 80013ac:	9200      	str	r2, [sp, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	bf0c      	ite	eq
 80013b2:	462b      	moveq	r3, r5
 80013b4:	4623      	movne	r3, r4
 80013b6:	22c3      	movs	r2, #195	; 0xc3
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <ls+0x8c>)
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <ls+0x98>)
 80013bc:	f006 fe38 	bl	8008030 <iprintf>
		err = lfs_dir_read(&lfs, &dir, &info);
 80013c0:	e7ce      	b.n	8001360 <ls+0x18>
 80013c2:	bf00      	nop
 80013c4:	08009303 	.word	0x08009303
 80013c8:	20014d64 	.word	0x20014d64
 80013cc:	08008df5 	.word	0x08008df5
 80013d0:	08008dfa 	.word	0x08008dfa
 80013d4:	08008dfe 	.word	0x08008dfe
 80013d8:	08008e08 	.word	0x08008e08
 80013dc:	08008e44 	.word	0x08008e44
 80013e0:	08008e24 	.word	0x08008e24

080013e4 <delete>:
static void delete(){
 80013e4:	b500      	push	{lr}
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 80013e6:	2300      	movs	r3, #0
static void delete(){
 80013e8:	b091      	sub	sp, #68	; 0x44
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 80013ea:	2232      	movs	r2, #50	; 0x32
 80013ec:	a903      	add	r1, sp, #12
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fc14 	bl	8000c1c <cli_get_string_argument>
	int err = lfs_remove(&lfs, name);
 80013f4:	a903      	add	r1, sp, #12
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <delete+0x40>)
 80013f8:	f004 fc58 	bl	8005cac <lfs_remove>
	if(err < 0)
 80013fc:	2800      	cmp	r0, #0
 80013fe:	da09      	bge.n	8001414 <delete+0x30>
		PRINTLN("lfs remove '%s' error %d", name, err);
 8001400:	9000      	str	r0, [sp, #0]
 8001402:	ab03      	add	r3, sp, #12
 8001404:	229e      	movs	r2, #158	; 0x9e
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <delete+0x44>)
 8001408:	4808      	ldr	r0, [pc, #32]	; (800142c <delete+0x48>)
 800140a:	f006 fe11 	bl	8008030 <iprintf>
}
 800140e:	b011      	add	sp, #68	; 0x44
 8001410:	f85d fb04 	ldr.w	pc, [sp], #4
		PRINTLN("Remove '%s' OK", name);
 8001414:	ab03      	add	r3, sp, #12
 8001416:	22a0      	movs	r2, #160	; 0xa0
 8001418:	4903      	ldr	r1, [pc, #12]	; (8001428 <delete+0x44>)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <delete+0x4c>)
 800141c:	f006 fe08 	bl	8008030 <iprintf>
}
 8001420:	e7f5      	b.n	800140e <delete+0x2a>
 8001422:	bf00      	nop
 8001424:	20014d64 	.word	0x20014d64
 8001428:	08008dfe 	.word	0x08008dfe
 800142c:	08008db5 	.word	0x08008db5
 8001430:	08008dda 	.word	0x08008dda

08001434 <read>:
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 8001434:	2100      	movs	r1, #0
static void read(){
 8001436:	b570      	push	{r4, r5, r6, lr}
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 8001438:	4608      	mov	r0, r1
 800143a:	f7ff fbd0 	bl	8000bde <cli_get_uint_argument>
 800143e:	4605      	mov	r5, r0
	uint8_t* buffer = os_heap_alloc(nBytes+1);
 8001440:	3001      	adds	r0, #1
 8001442:	f000 f97f 	bl	8001744 <os_heap_alloc>
	buffer[nBytes] = '\0';
 8001446:	2600      	movs	r6, #0
 8001448:	5546      	strb	r6, [r0, r5]
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 800144a:	462b      	mov	r3, r5
 800144c:	4602      	mov	r2, r0
	uint8_t* buffer = os_heap_alloc(nBytes+1);
 800144e:	4604      	mov	r4, r0
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 8001450:	490d      	ldr	r1, [pc, #52]	; (8001488 <read+0x54>)
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <read+0x58>)
 8001454:	f004 fcd0 	bl	8005df8 <lfs_file_read>
	if(err < 0)
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	da09      	bge.n	8001470 <read+0x3c>
		PRINTLN("lfs read error %ld", err);
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <read+0x5c>)
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <read+0x60>)
 8001460:	2257      	movs	r2, #87	; 0x57
		PRINTLN("File : %s", buffer);
 8001462:	f006 fde5 	bl	8008030 <iprintf>
	os_heap_free(buffer);
 8001466:	4620      	mov	r0, r4
}
 8001468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	os_heap_free(buffer);
 800146c:	f000 b9ca 	b.w	8001804 <os_heap_free>
		buffer[err] = '\0';
 8001470:	54e6      	strb	r6, [r4, r3]
		PRINTLN("Read %ld bytes", err);
 8001472:	225d      	movs	r2, #93	; 0x5d
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <read+0x5c>)
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <read+0x64>)
 8001478:	f006 fdda 	bl	8008030 <iprintf>
		PRINTLN("File : %s", buffer);
 800147c:	4623      	mov	r3, r4
 800147e:	225e      	movs	r2, #94	; 0x5e
 8001480:	4903      	ldr	r1, [pc, #12]	; (8001490 <read+0x5c>)
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <read+0x68>)
 8001484:	e7ed      	b.n	8001462 <read+0x2e>
 8001486:	bf00      	nop
 8001488:	200004a0 	.word	0x200004a0
 800148c:	20014d64 	.word	0x20014d64
 8001490:	08008dfe 	.word	0x08008dfe
 8001494:	08008e9d 	.word	0x08008e9d
 8001498:	08008c6c 	.word	0x08008c6c
 800149c:	08008ebc 	.word	0x08008ebc

080014a0 <bRead>:
static void bRead(){
 80014a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t nBytes = cli_get_uint32_argument(0, NULL);
 80014a4:	2100      	movs	r1, #0
 80014a6:	4608      	mov	r0, r1
 80014a8:	f7ff fb99 	bl	8000bde <cli_get_uint_argument>
 80014ac:	4606      	mov	r6, r0
	uint8_t* buffer = os_heap_alloc(nBytes);
 80014ae:	f000 f949 	bl	8001744 <os_heap_alloc>
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 80014b2:	4633      	mov	r3, r6
 80014b4:	4602      	mov	r2, r0
	uint8_t* buffer = os_heap_alloc(nBytes);
 80014b6:	4605      	mov	r5, r0
	lfs_ssize_t err = lfs_file_read(&lfs, &lfs_file, buffer, nBytes);
 80014b8:	4912      	ldr	r1, [pc, #72]	; (8001504 <bRead+0x64>)
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <bRead+0x68>)
 80014bc:	f004 fc9c 	bl	8005df8 <lfs_file_read>
	if(err < 0)
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	da0a      	bge.n	80014da <bRead+0x3a>
		PRINTLN("lfs read error %ld", err);
 80014c4:	2238      	movs	r2, #56	; 0x38
 80014c6:	4911      	ldr	r1, [pc, #68]	; (800150c <bRead+0x6c>)
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <bRead+0x70>)
 80014ca:	f006 fdb1 	bl	8008030 <iprintf>
	os_heap_free(buffer);
 80014ce:	4628      	mov	r0, r5
}
 80014d0:	b002      	add	sp, #8
 80014d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	os_heap_free(buffer);
 80014d6:	f000 b995 	b.w	8001804 <os_heap_free>
		PRINTLN("Read %ld bytes", err);
 80014da:	223c      	movs	r2, #60	; 0x3c
 80014dc:	490b      	ldr	r1, [pc, #44]	; (800150c <bRead+0x6c>)
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <bRead+0x74>)
			PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 80014e0:	4f0a      	ldr	r7, [pc, #40]	; (800150c <bRead+0x6c>)
 80014e2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001518 <bRead+0x78>
		PRINTLN("Read %ld bytes", err);
 80014e6:	f006 fda3 	bl	8008030 <iprintf>
		for(int i = 0; i < nBytes; i++){
 80014ea:	2400      	movs	r4, #0
 80014ec:	42a6      	cmp	r6, r4
 80014ee:	d9ee      	bls.n	80014ce <bRead+0x2e>
			PRINTLN("   [%03d] = 0x%02X", i, buffer[i]);
 80014f0:	5d2b      	ldrb	r3, [r5, r4]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	223e      	movs	r2, #62	; 0x3e
 80014f6:	4623      	mov	r3, r4
 80014f8:	4639      	mov	r1, r7
 80014fa:	4640      	mov	r0, r8
 80014fc:	f006 fd98 	bl	8008030 <iprintf>
		for(int i = 0; i < nBytes; i++){
 8001500:	3401      	adds	r4, #1
 8001502:	e7f3      	b.n	80014ec <bRead+0x4c>
 8001504:	200004a0 	.word	0x200004a0
 8001508:	20014d64 	.word	0x20014d64
 800150c:	08008dfe 	.word	0x08008dfe
 8001510:	08008e9d 	.word	0x08008e9d
 8001514:	08008c6c 	.word	0x08008c6c
 8001518:	08008d62 	.word	0x08008d62

0800151c <open>:
static void open(){
 800151c:	b500      	push	{lr}
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 800151e:	2300      	movs	r3, #0
static void open(){
 8001520:	b091      	sub	sp, #68	; 0x44
	cli_get_string_argument(0, (uint8_t*)name, sizeof(name), NULL);
 8001522:	2232      	movs	r2, #50	; 0x32
 8001524:	a903      	add	r1, sp, #12
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb78 	bl	8000c1c <cli_get_string_argument>
	int err = lfs_file_open(&lfs, &lfs_file, name, LFS_O_CREAT | LFS_O_RDWR);
 800152c:	f240 1303 	movw	r3, #259	; 0x103
 8001530:	aa03      	add	r2, sp, #12
 8001532:	490b      	ldr	r1, [pc, #44]	; (8001560 <open+0x44>)
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <open+0x48>)
 8001536:	f004 fc29 	bl	8005d8c <lfs_file_open>
	if(err < 0)
 800153a:	2800      	cmp	r0, #0
 800153c:	da09      	bge.n	8001552 <open+0x36>
		PRINTLN("lfs open '%s' error %d", name, err);
 800153e:	9000      	str	r0, [sp, #0]
 8001540:	ab03      	add	r3, sp, #12
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	4908      	ldr	r1, [pc, #32]	; (8001568 <open+0x4c>)
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <open+0x50>)
 8001548:	f006 fd72 	bl	8008030 <iprintf>
}
 800154c:	b011      	add	sp, #68	; 0x44
 800154e:	f85d fb04 	ldr.w	pc, [sp], #4
		PRINTLN("Open '%s' OK", name);
 8001552:	ab03      	add	r3, sp, #12
 8001554:	2226      	movs	r2, #38	; 0x26
 8001556:	4904      	ldr	r1, [pc, #16]	; (8001568 <open+0x4c>)
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <open+0x54>)
 800155a:	f006 fd69 	bl	8008030 <iprintf>
}
 800155e:	e7f5      	b.n	800154c <open+0x30>
 8001560:	200004a0 	.word	0x200004a0
 8001564:	20014d64 	.word	0x20014d64
 8001568:	08008dfe 	.word	0x08008dfe
 800156c:	08008e61 	.word	0x08008e61
 8001570:	08008e84 	.word	0x08008e84

08001574 <close>:
static void close(){
 8001574:	b510      	push	{r4, lr}
	int err = lfs_file_close(&lfs, &lfs_file);
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <close+0x2c>)
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <close+0x30>)
 800157a:	f004 fc25 	bl	8005dc8 <lfs_file_close>
	if(err < 0)
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	da06      	bge.n	8001590 <close+0x1c>
		PRINTLN("lfs close error %d", err);
 8001582:	228d      	movs	r2, #141	; 0x8d
 8001584:	4908      	ldr	r1, [pc, #32]	; (80015a8 <close+0x34>)
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <close+0x38>)
}
 8001588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("lfs close error %d", err);
 800158c:	f006 bd50 	b.w	8008030 <iprintf>
		PRINTLN("Close OK");
 8001590:	228f      	movs	r2, #143	; 0x8f
 8001592:	4905      	ldr	r1, [pc, #20]	; (80015a8 <close+0x34>)
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <close+0x3c>)
}
 8001596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("Close OK");
 800159a:	f006 bd49 	b.w	8008030 <iprintf>
 800159e:	bf00      	nop
 80015a0:	200004a0 	.word	0x200004a0
 80015a4:	20014d64 	.word	0x20014d64
 80015a8:	08008dfe 	.word	0x08008dfe
 80015ac:	08008d81 	.word	0x08008d81
 80015b0:	08008da0 	.word	0x08008da0

080015b4 <seek>:
	lfs_soff_t pos = (lfs_soff_t)cli_get_int32_argument(0, NULL);
 80015b4:	2100      	movs	r1, #0
static void seek(){
 80015b6:	b510      	push	{r4, lr}
	lfs_soff_t pos = (lfs_soff_t)cli_get_int32_argument(0, NULL);
 80015b8:	4608      	mov	r0, r1
 80015ba:	f7ff fb01 	bl	8000bc0 <cli_get_int_argument>
	lfs_soff_t err = lfs_file_seek(&lfs, &lfs_file, pos, LFS_SEEK_SET);
 80015be:	2300      	movs	r3, #0
 80015c0:	4602      	mov	r2, r0
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <seek+0x38>)
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <seek+0x3c>)
 80015c6:	f004 fc63 	bl	8005e90 <lfs_file_seek>
	if(err < 0)
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	da06      	bge.n	80015dc <seek+0x28>
		PRINTLN("lfs seek error %ld", err);
 80015ce:	2281      	movs	r2, #129	; 0x81
 80015d0:	4908      	ldr	r1, [pc, #32]	; (80015f4 <seek+0x40>)
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <seek+0x44>)
}
 80015d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("lfs seek error %ld", err);
 80015d8:	f006 bd2a 	b.w	8008030 <iprintf>
		PRINTLN("seek OK");
 80015dc:	2283      	movs	r2, #131	; 0x83
 80015de:	4905      	ldr	r1, [pc, #20]	; (80015f4 <seek+0x40>)
 80015e0:	4806      	ldr	r0, [pc, #24]	; (80015fc <seek+0x48>)
}
 80015e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINTLN("seek OK");
 80015e6:	f006 bd23 	b.w	8008030 <iprintf>
 80015ea:	bf00      	nop
 80015ec:	200004a0 	.word	0x200004a0
 80015f0:	20014d64 	.word	0x20014d64
 80015f4:	08008dfe 	.word	0x08008dfe
 80015f8:	08008ed2 	.word	0x08008ed2
 80015fc:	08008ef1 	.word	0x08008ef1

08001600 <write>:
static void write(){
 8001600:	b500      	push	{lr}
	uint32_t nBytes = cli_get_string_argument(0, buffer, sizeof(buffer), NULL);
 8001602:	2300      	movs	r3, #0
static void write(){
 8001604:	b0b3      	sub	sp, #204	; 0xcc
	uint32_t nBytes = cli_get_string_argument(0, buffer, sizeof(buffer), NULL);
 8001606:	22c8      	movs	r2, #200	; 0xc8
 8001608:	4669      	mov	r1, sp
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fb06 	bl	8000c1c <cli_get_string_argument>
	lfs_ssize_t err = lfs_file_write(&lfs, &lfs_file, buffer, nBytes);
 8001610:	466a      	mov	r2, sp
 8001612:	4603      	mov	r3, r0
 8001614:	4909      	ldr	r1, [pc, #36]	; (800163c <write+0x3c>)
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <write+0x40>)
 8001618:	f004 fc22 	bl	8005e60 <lfs_file_write>
	if(err < 0)
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	da07      	bge.n	8001630 <write+0x30>
		PRINTLN("lfs write error %ld", err);
 8001620:	2271      	movs	r2, #113	; 0x71
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <write+0x44>)
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <write+0x48>)
 8001626:	f006 fd03 	bl	8008030 <iprintf>
}
 800162a:	b033      	add	sp, #204	; 0xcc
 800162c:	f85d fb04 	ldr.w	pc, [sp], #4
		PRINTLN("write OK");
 8001630:	2273      	movs	r2, #115	; 0x73
 8001632:	4904      	ldr	r1, [pc, #16]	; (8001644 <write+0x44>)
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <write+0x4c>)
 8001636:	f006 fcfb 	bl	8008030 <iprintf>
}
 800163a:	e7f6      	b.n	800162a <write+0x2a>
 800163c:	200004a0 	.word	0x200004a0
 8001640:	20014d64 	.word	0x20014d64
 8001644:	08008dfe 	.word	0x08008dfe
 8001648:	08009010 	.word	0x08009010
 800164c:	08009030 	.word	0x08009030

08001650 <reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001650:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001654:	4905      	ldr	r1, [pc, #20]	; (800166c <reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001658:	68ca      	ldr	r2, [r1, #12]
 800165a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800165e:	4313      	orrs	r3, r2
 8001660:	60cb      	str	r3, [r1, #12]
 8001662:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001666:	bf00      	nop
 8001668:	e7fd      	b.n	8001666 <reset+0x16>
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	05fa0004 	.word	0x05fa0004

08001674 <os_init_get>:
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
	return os_init_done;
}
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <os_init_get+0x8>)
 8001676:	7818      	ldrb	r0, [r3, #0]
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200004f4 	.word	0x200004f4

08001680 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 8001680:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8001684:	4e1f      	ldr	r6, [pc, #124]	; (8001704 <os_init+0x84>)
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 8001686:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001688:	461f      	mov	r7, r3
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 800168a:	7833      	ldrb	r3, [r6, #0]
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 800168c:	4680      	mov	r8, r0
 800168e:	4689      	mov	r9, r1
 8001690:	4692      	mov	sl, r2
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8001692:	2b00      	cmp	r3, #0
 8001694:	d133      	bne.n	80016fe <os_init+0x7e>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <os_init+0x88>)
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 8001698:	4c1c      	ldr	r4, [pc, #112]	; (800170c <os_init+0x8c>)
	OS_FPU_ENABLE();			//Enable
 800169a:	f8d3 2d80 	ldr.w	r2, [r3, #3456]	; 0xd80
 800169e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016a2:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016ac:	6022      	str	r2, [r4, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016b4:	6022      	str	r2, [r4, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 80016b6:	689c      	ldr	r4, [r3, #8]
	OS_SYSTICK_SET_PRIO(14);
 80016b8:	22e0      	movs	r2, #224	; 0xe0
	OS_SYSTICK_DISABLE();
 80016ba:	f024 0401 	bic.w	r4, r4, #1
 80016be:	609c      	str	r4, [r3, #8]
	OS_SYSTICK_SET_PRIO(14);
 80016c0:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 80016c4:	22f0      	movs	r2, #240	; 0xf0
 80016c6:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 80016ca:	689c      	ldr	r4, [r3, #8]
 80016cc:	f044 0401 	orr.w	r4, r4, #1
 80016d0:	609c      	str	r4, [r3, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 80016d2:	f000 f82f 	bl	8001734 <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 80016d6:	462b      	mov	r3, r5
 80016d8:	4652      	mov	r2, sl
 80016da:	4649      	mov	r1, r9
 80016dc:	4640      	mov	r0, r8
 80016de:	f000 fca5 	bl	800202c <os_task_init>
	if(ret != OS_ERR_OK)
 80016e2:	b948      	cbnz	r0, 80016f8 <os_init+0x78>
		return ret;

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 80016e4:	2301      	movs	r3, #1
 80016e6:	7033      	strb	r3, [r6, #0]

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, 0, idle_stack_size, NULL);
 80016e8:	e9cd 5000 	strd	r5, r0, [sp]
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <os_init+0x90>)
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <os_init+0x94>)
 80016f2:	4639      	mov	r1, r7
 80016f4:	f000 fdde 	bl	80022b4 <os_task_create>
}
 80016f8:	b002      	add	sp, #8
 80016fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 80016fe:	2005      	movs	r0, #5
 8001700:	e7fa      	b.n	80016f8 <os_init+0x78>
 8001702:	bf00      	nop
 8001704:	200004f4 	.word	0x200004f4
 8001708:	e000e008 	.word	0xe000e008
 800170c:	e000ef34 	.word	0xe000ef34
 8001710:	08001719 	.word	0x08001719
 8001714:	20014d40 	.word	0x20014d40

08001718 <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 8001718:	e7fe      	b.n	8001718 <os_idle_task_fn>

0800171a <os_no_task_ready_cb>:
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
	return;
}
 800171a:	4770      	bx	lr

0800171c <os_insufficient_heap_cb>:
 800171c:	4770      	bx	lr
	...

08001720 <os_heap_BlockGetSize>:
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
	if(p == NULL) return 0; //Avoid explosion
 8001720:	b110      	cbz	r0, 8001728 <os_heap_BlockGetSize+0x8>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 8001722:	6803      	ldr	r3, [r0, #0]
 8001724:	b10b      	cbz	r3, 800172a <os_heap_BlockGetSize+0xa>
 8001726:	1a18      	subs	r0, r3, r0
}
 8001728:	4770      	bx	lr
	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 800172a:	4b01      	ldr	r3, [pc, #4]	; (8001730 <os_heap_BlockGetSize+0x10>)
 800172c:	e7fb      	b.n	8001726 <os_heap_BlockGetSize+0x6>
 800172e:	bf00      	nop
 8001730:	200144f8 	.word	0x200144f8

08001734 <os_heap_clear>:
 **********************************************************************/
void os_heap_clear(){

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 8001734:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8001738:	2100      	movs	r1, #0
 800173a:	4801      	ldr	r0, [pc, #4]	; (8001740 <os_heap_clear+0xc>)
 800173c:	f006 b900 	b.w	8007940 <memset>
 8001740:	200004f8 	.word	0x200004f8

08001744 <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 8001744:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 8001746:	b348      	cbz	r0, 800179c <os_heap_alloc+0x58>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001748:	f3ef 8310 	mrs	r3, PRIMASK
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	b672      	cpsid	i
 8001750:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
	uint32_t min_size = 0xFFFFFFFF;
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 8001754:	4c29      	ldr	r4, [pc, #164]	; (80017fc <os_heap_alloc+0xb8>)

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 8001756:	3007      	adds	r0, #7
 8001758:	f020 0107 	bic.w	r1, r0, #7
	uint32_t min_size = 0xFFFFFFFF;
 800175c:	f04f 35ff 	mov.w	r5, #4294967295
	os_heap_header_t* pBlock = NULL;
 8001760:	2200      	movs	r2, #0
 8001762:	4626      	mov	r6, r4
	while(p != NULL){

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff ffdb 	bl	8001720 <os_heap_BlockGetSize>
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 800176a:	6863      	ldr	r3, [r4, #4]
 800176c:	b933      	cbnz	r3, 800177c <os_heap_alloc+0x38>
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 800176e:	3808      	subs	r0, #8
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 8001770:	42a8      	cmp	r0, r5
 8001772:	d203      	bcs.n	800177c <os_heap_alloc+0x38>
 8001774:	4281      	cmp	r1, r0
 8001776:	bf9c      	itt	ls
 8001778:	4605      	movls	r5, r0
 800177a:	4622      	movls	r2, r4
			min_size = data_size;
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 800177c:	6824      	ldr	r4, [r4, #0]
	while(p != NULL){
 800177e:	2c00      	cmp	r4, #0
 8001780:	d1f0      	bne.n	8001764 <os_heap_alloc+0x20>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 8001782:	42b2      	cmp	r2, r6
 8001784:	d302      	bcc.n	800178c <os_heap_alloc+0x48>
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <os_heap_alloc+0xbc>)
 8001788:	429a      	cmp	r2, r3
 800178a:	d909      	bls.n	80017a0 <os_heap_alloc+0x5c>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 800178c:	f7ff ffc6 	bl	800171c <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	f383 8810 	msr	PRIMASK, r3
 8001796:	f3bf 8f6f 	isb	sy
		return NULL;
 800179a:	2000      	movs	r0, #0
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
	OS_EXIT_CRITICAL();
	return ret;

}
 800179c:	b002      	add	sp, #8
 800179e:	bd70      	pop	{r4, r5, r6, pc}
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 80017a0:	2931      	cmp	r1, #49	; 0x31
 80017a2:	d814      	bhi.n	80017ce <os_heap_alloc+0x8a>
	if(p == NULL) return NULL;
 80017a4:	b332      	cbz	r2, 80017f4 <os_heap_alloc+0xb0>
	if(size == 0) return NULL;
 80017a6:	b339      	cbz	r1, 80017f8 <os_heap_alloc+0xb4>
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 80017a8:	f101 0008 	add.w	r0, r1, #8
	newTopHead->addr_next = newBlock->addr_next != (uint32_t)newTopHead ? newBlock->addr_next : newTopHead->addr_next;
 80017ac:	6811      	ldr	r1, [r2, #0]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 80017ae:	1883      	adds	r3, r0, r2
	newTopHead->addr_next = newBlock->addr_next != (uint32_t)newTopHead ? newBlock->addr_next : newTopHead->addr_next;
 80017b0:	428b      	cmp	r3, r1
 80017b2:	bf08      	it	eq
 80017b4:	5881      	ldreq	r1, [r0, r2]
 80017b6:	6019      	str	r1, [r3, #0]
	newBlock->addr_next	  = (uint32_t) newTopHead;
 80017b8:	6013      	str	r3, [r2, #0]
	newBlock->block_used = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 80017be:	f102 0008 	add.w	r0, r2, #8
	OS_EXIT_CRITICAL();
 80017c2:	9b01      	ldr	r3, [sp, #4]
 80017c4:	f383 8810 	msr	PRIMASK, r3
 80017c8:	f3bf 8f6f 	isb	sy
	return ret;
 80017cc:	e7e6      	b.n	800179c <os_heap_alloc+0x58>
	if(p == NULL) return NULL;
 80017ce:	4610      	mov	r0, r2
	if(p == NULL) return NULL;
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d0f6      	beq.n	80017c2 <os_heap_alloc+0x7e>
	uint32_t block_size = os_heap_BlockGetSize(p);
 80017d4:	f7ff ffa4 	bl	8001720 <os_heap_BlockGetSize>
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 80017d8:	1a51      	subs	r1, r2, r1
	newBlock->addr_next   = oldTopHead->addr_next;
 80017da:	6813      	ldr	r3, [r2, #0]
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 80017dc:	4408      	add	r0, r1
 80017de:	f1a0 0108 	sub.w	r1, r0, #8
	newBlock->addr_next   = oldTopHead->addr_next;
 80017e2:	f840 3c08 	str.w	r3, [r0, #-8]
	oldTopHead->addr_next = newBlock != oldTopHead ? (uint32_t) newBlock : oldTopHead->addr_next;
 80017e6:	428a      	cmp	r2, r1
 80017e8:	bf18      	it	ne
 80017ea:	460b      	movne	r3, r1
 80017ec:	6013      	str	r3, [r2, #0]
	newBlock->block_used = 1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	604b      	str	r3, [r1, #4]
 80017f2:	e7e6      	b.n	80017c2 <os_heap_alloc+0x7e>
	if(p == NULL) return NULL;
 80017f4:	4610      	mov	r0, r2
 80017f6:	e7e4      	b.n	80017c2 <os_heap_alloc+0x7e>
 80017f8:	4608      	mov	r0, r1
 80017fa:	e7e2      	b.n	80017c2 <os_heap_alloc+0x7e>
 80017fc:	200004f8 	.word	0x200004f8
 8001800:	200144f7 	.word	0x200144f7

08001804 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 8001804:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 8001806:	2800      	cmp	r0, #0
 8001808:	d03e      	beq.n	8001888 <os_heap_free+0x84>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <os_heap_free+0x88>)
 800180c:	4298      	cmp	r0, r3
 800180e:	d33b      	bcc.n	8001888 <os_heap_free+0x84>
 8001810:	491f      	ldr	r1, [pc, #124]	; (8001890 <os_heap_free+0x8c>)
 8001812:	4288      	cmp	r0, r1
 8001814:	d838      	bhi.n	8001888 <os_heap_free+0x84>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001816:	f3ef 8210 	mrs	r2, PRIMASK
 800181a:	9201      	str	r2, [sp, #4]
 800181c:	b672      	cpsid	i
 800181e:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 8001822:	3b08      	subs	r3, #8
	os_heap_header_t* block = (os_heap_header_t*)((uint32_t)p - sizeof(os_heap_header_t));
 8001824:	f1a0 0408 	sub.w	r4, r0, #8

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
	os_heap_header_t* pPrev = NULL;
 8001828:	2200      	movs	r2, #0
 800182a:	461e      	mov	r6, r3

	/* Search for the target block while still inside the heap
	 ---------------------------------------------------*/
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 800182c:	429c      	cmp	r4, r3
 800182e:	d11b      	bne.n	8001868 <os_heap_free+0x64>
		cur = (os_heap_header_t*) ( cur->addr_next );
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if(cur != block || !(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1]) ) {
 8001830:	42b4      	cmp	r4, r6
 8001832:	d321      	bcc.n	8001878 <os_heap_free+0x74>
		return OS_ERR_INVALID;
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	6063      	str	r3, [r4, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );
 8001838:	f850 3c08 	ldr.w	r3, [r0, #-8]

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 800183c:	b12b      	cbz	r3, 800184a <os_heap_free+0x46>
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	b919      	cbnz	r1, 800184a <os_heap_free+0x46>
		cur->addr_next = pNext->addr_next;
 8001842:	681c      	ldr	r4, [r3, #0]
 8001844:	f840 4c08 	str.w	r4, [r0, #-8]
		pNext->addr_next = 0; //For principle, but not necessary
 8001848:	6019      	str	r1, [r3, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 800184a:	b132      	cbz	r2, 800185a <os_heap_free+0x56>
 800184c:	6853      	ldr	r3, [r2, #4]
 800184e:	b923      	cbnz	r3, 800185a <os_heap_free+0x56>
		pPrev->addr_next = cur->addr_next;
 8001850:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001854:	6011      	str	r1, [r2, #0]
		cur->addr_next = 0; //For principle, but not necessary
 8001856:	f840 3c08 	str.w	r3, [r0, #-8]
	}

	OS_EXIT_CRITICAL();
 800185a:	9b01      	ldr	r3, [sp, #4]
 800185c:	f383 8810 	msr	PRIMASK, r3
 8001860:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8001864:	2000      	movs	r0, #0
 8001866:	e00d      	b.n	8001884 <os_heap_free+0x80>
		cur = (os_heap_header_t*) ( cur->addr_next );
 8001868:	681d      	ldr	r5, [r3, #0]
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 800186a:	42b5      	cmp	r5, r6
 800186c:	d304      	bcc.n	8001878 <os_heap_free+0x74>
 800186e:	428d      	cmp	r5, r1
 8001870:	461a      	mov	r2, r3
 8001872:	d801      	bhi.n	8001878 <os_heap_free+0x74>
 8001874:	462b      	mov	r3, r5
 8001876:	e7d9      	b.n	800182c <os_heap_free+0x28>
		OS_EXIT_CRITICAL();
 8001878:	9b01      	ldr	r3, [sp, #4]
 800187a:	f383 8810 	msr	PRIMASK, r3
 800187e:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 8001882:	2002      	movs	r0, #2
}
 8001884:	b002      	add	sp, #8
 8001886:	bd70      	pop	{r4, r5, r6, pc}
	if(p == NULL) return OS_ERR_BAD_ARG;
 8001888:	2001      	movs	r0, #1
 800188a:	e7fb      	b.n	8001884 <os_heap_free+0x80>
 800188c:	20000500 	.word	0x20000500
 8001890:	200144f7 	.word	0x200144f7

08001894 <os_list_init>:
 *
 * @brief This function initializes a list
 *
 * @return os_list_head_t* : reference to the head of the list
 **********************************************************************/
os_list_head_t* os_list_init(){
 8001894:	b508      	push	{r3, lr}

	/* Allocate head
	 ---------------------------------------------------*/
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 8001896:	201c      	movs	r0, #28
 8001898:	f7ff ff54 	bl	8001744 <os_heap_alloc>
	if(ret == NULL) return NULL;
 800189c:	b130      	cbz	r0, 80018ac <os_list_init+0x18>

	/* Init head and return
	 ---------------------------------------------------*/
	ret->head.next = NULL;
 800189e:	2300      	movs	r3, #0
	ret->head.prev = NULL;
 80018a0:	e9c0 3300 	strd	r3, r3, [r0]
	ret->head.element = NULL;
	ret->first = NULL;
	ret->last = NULL;
 80018a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	ret->head.element = NULL;
 80018a8:	6083      	str	r3, [r0, #8]
	ret->listSize = 0;
 80018aa:	6183      	str	r3, [r0, #24]

	return ret;
}
 80018ac:	bd08      	pop	{r3, pc}

080018ae <os_list_search>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	  		   : [in] element to search
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 80018ae:	b082      	sub	sp, #8

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(el == NULL) return NULL;
 80018b0:	b191      	cbz	r1, 80018d8 <os_list_search+0x2a>
	if(head == NULL) return NULL;
 80018b2:	b178      	cbz	r0, 80018d4 <os_list_search+0x26>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80018b4:	f3ef 8310 	mrs	r3, PRIMASK
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	b672      	cpsid	i
 80018bc:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
	while(it != NULL && it->element != el){
		it = it->next;
 80018c0:	6800      	ldr	r0, [r0, #0]
	while(it != NULL && it->element != el){
 80018c2:	b110      	cbz	r0, 80018ca <os_list_search+0x1c>
 80018c4:	6883      	ldr	r3, [r0, #8]
 80018c6:	428b      	cmp	r3, r1
 80018c8:	d1fa      	bne.n	80018c0 <os_list_search+0x12>
	}

	OS_EXIT_CRITICAL();
 80018ca:	9b01      	ldr	r3, [sp, #4]
 80018cc:	f383 8810 	msr	PRIMASK, r3
 80018d0:	f3bf 8f6f 	isb	sy
	return it;
}
 80018d4:	b002      	add	sp, #8
 80018d6:	4770      	bx	lr
	if(el == NULL) return NULL;
 80018d8:	4608      	mov	r0, r1
 80018da:	e7fb      	b.n	80018d4 <os_list_search+0x26>

080018dc <os_handle_list_searchByName>:
 * @param os_obj_type_e type   : [in] type of the object
 * @param char* name		   : [in] name of the object
 *
 * @return os_list_cell_t* : reference to the cell containing the handle or null if not found
 **********************************************************************/
os_list_cell_t* os_handle_list_searchByName(os_list_head_t* head, os_obj_type_e type, char const * name){
 80018dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018de:	460e      	mov	r6, r1
 80018e0:	4615      	mov	r5, r2

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(head == NULL) return NULL;
 80018e2:	b1e8      	cbz	r0, 8001920 <os_handle_list_searchByName+0x44>
	if(name == NULL) return NULL;
 80018e4:	b1f2      	cbz	r2, 8001924 <os_handle_list_searchByName+0x48>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80018e6:	f3ef 8310 	mrs	r3, PRIMASK
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	b672      	cpsid	i
 80018ee:	f3bf 8f6f 	isb	sy

	/* Search list
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 80018f2:	6804      	ldr	r4, [r0, #0]
	while(it != NULL){
 80018f4:	b93c      	cbnz	r4, 8001906 <os_handle_list_searchByName+0x2a>
		/* Otherwise we go to next one
		 ------------------------------------------------------*/
		it = it->next;
	}

	OS_EXIT_CRITICAL();
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	f383 8810 	msr	PRIMASK, r3
 80018fc:	f3bf 8f6f 	isb	sy
	return it;
}
 8001900:	4620      	mov	r0, r4
 8001902:	b002      	add	sp, #8
 8001904:	bd70      	pop	{r4, r5, r6, pc}
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 8001906:	68a3      	ldr	r3, [r4, #8]
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	42b2      	cmp	r2, r6
 800190c:	d106      	bne.n	800191c <os_handle_list_searchByName+0x40>
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	b121      	cbz	r1, 800191c <os_handle_list_searchByName+0x40>
 8001912:	4628      	mov	r0, r5
 8001914:	f7fe fc5c 	bl	80001d0 <strcmp>
 8001918:	2800      	cmp	r0, #0
 800191a:	d0ec      	beq.n	80018f6 <os_handle_list_searchByName+0x1a>
		it = it->next;
 800191c:	6824      	ldr	r4, [r4, #0]
 800191e:	e7e9      	b.n	80018f4 <os_handle_list_searchByName+0x18>
	if(head == NULL) return NULL;
 8001920:	4604      	mov	r4, r0
 8001922:	e7ed      	b.n	8001900 <os_handle_list_searchByName+0x24>
 8001924:	4614      	mov	r4, r2
 8001926:	e7eb      	b.n	8001900 <os_handle_list_searchByName+0x24>

08001928 <os_list_add>:
 * @param void* el	   		    : [in] reference to the element
 * @param os_list_add_pos_e pos : [in] flag to indicate whether to add at the first or last position
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 8001928:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800192a:	4604      	mov	r4, r0
 800192c:	460e      	mov	r6, r1
 800192e:	4615      	mov	r5, r2

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8001930:	f3ef 8310 	mrs	r3, PRIMASK
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	b672      	cpsid	i
 8001938:	f3bf 8f6f 	isb	sy

	/* Allocate cell
	 ------------------------------------------------------*/
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 800193c:	2010      	movs	r0, #16
 800193e:	f7ff ff01 	bl	8001744 <os_heap_alloc>

	/* Check allocation
	 ------------------------------------------------------*/
	if(new == NULL) {
 8001942:	b938      	cbnz	r0, 8001954 <os_list_add+0x2c>

		/* EXIT Critical Section
		 ------------------------------------------------------*/
		OS_EXIT_CRITICAL();
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	f383 8810 	msr	PRIMASK, r3
 800194a:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 800194e:	2003      	movs	r0, #3
			head->last = new;
		}
	}
	OS_EXIT_CRITICAL();
	return OS_ERR_OK;
}
 8001950:	b002      	add	sp, #8
 8001952:	bd70      	pop	{r4, r5, r6, pc}
	new->order  = head->listSize++;
 8001954:	69a3      	ldr	r3, [r4, #24]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	61a2      	str	r2, [r4, #24]
	new->element = el;
 800195a:	e9c0 6302 	strd	r6, r3, [r0, #8]
	if(head->head.next == NULL) {
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	b95b      	cbnz	r3, 800197a <os_list_add+0x52>
		head->last = new;
 8001962:	6160      	str	r0, [r4, #20]
		new->next = NULL;
 8001964:	e9c0 3400 	strd	r3, r4, [r0]
		head->head.next = new;
 8001968:	6020      	str	r0, [r4, #0]
			head->first = new;
 800196a:	6120      	str	r0, [r4, #16]
	OS_EXIT_CRITICAL();
 800196c:	9b01      	ldr	r3, [sp, #4]
 800196e:	f383 8810 	msr	PRIMASK, r3
 8001972:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8001976:	2000      	movs	r0, #0
 8001978:	e7ea      	b.n	8001950 <os_list_add+0x28>
		if(pos == OS_LIST_FIRST){
 800197a:	b93d      	cbnz	r5, 800198c <os_list_add+0x64>
			new->prev = head->first->prev;
 800197c:	6923      	ldr	r3, [r4, #16]
 800197e:	685a      	ldr	r2, [r3, #4]
			new->next = head->first;
 8001980:	e9c0 3200 	strd	r3, r2, [r0]
			head->first->prev->next = new;
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	6010      	str	r0, [r2, #0]
			head->first->prev = new;
 8001988:	6058      	str	r0, [r3, #4]
 800198a:	e7ee      	b.n	800196a <os_list_add+0x42>
		if(pos == OS_LIST_LAST){
 800198c:	2d01      	cmp	r5, #1
 800198e:	d1ed      	bne.n	800196c <os_list_add+0x44>
			new->next  = head->last->next;
 8001990:	6963      	ldr	r3, [r4, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
			new->prev  = head->last;
 8001994:	e9c0 2300 	strd	r2, r3, [r0]
			head->last->next = new;
 8001998:	6018      	str	r0, [r3, #0]
			head->last = new;
 800199a:	6160      	str	r0, [r4, #20]
 800199c:	e7e6      	b.n	800196c <os_list_add+0x44>

0800199e <os_list_remove>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	   		   : [in]  reference to the element
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_remove(os_list_head_t* head, void* el){
 800199e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019a0:	4604      	mov	r4, r0
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) el;

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 80019a2:	460e      	mov	r6, r1
 80019a4:	b349      	cbz	r1, 80019fa <os_list_remove+0x5c>

	/* Search cell to verify it is in the list
	 ------------------------------------------------------*/
	os_list_cell_t* pCell = os_list_search(head, el);
 80019a6:	f7ff ff82 	bl	80018ae <os_list_search>

	/* Return if not
	 ------------------------------------------------------*/
	if(pCell == NULL) return OS_ERR_INVALID;
 80019aa:	b348      	cbz	r0, 8001a00 <os_list_remove+0x62>

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 80019ac:	f3ef 8310 	mrs	r3, PRIMASK
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	b672      	cpsid	i
 80019b4:	f3bf 8f6f 	isb	sy

	/* Declare Iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = &head->head;
	os_list_cell_t* pPrev = NULL;
 80019b8:	2200      	movs	r2, #0
	os_list_cell_t* it = &head->head;
 80019ba:	4625      	mov	r5, r4

	/* Search for the task
	 ------------------------------------------------------*/
	while(it->next != NULL){
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	b97b      	cbnz	r3, 80019e0 <os_list_remove+0x42>
		it = it->next;
	}

	/* Kill cell
	 ------------------------------------------------------*/
	pPrev->next = pPrev->next->next;
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6013      	str	r3, [r2, #0]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 80019c6:	69a3      	ldr	r3, [r4, #24]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	61a3      	str	r3, [r4, #24]
	OS_EXIT_CRITICAL();
 80019cc:	9b01      	ldr	r3, [sp, #4]
 80019ce:	f383 8810 	msr	PRIMASK, r3
 80019d2:	f3bf 8f6f 	isb	sy
	return os_heap_free(pCell);
}
 80019d6:	b003      	add	sp, #12
 80019d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return os_heap_free(pCell);
 80019dc:	f7ff bf12 	b.w	8001804 <os_heap_free>
		if(it->next->order > pCell->order) it->next->order--;
 80019e0:	68d9      	ldr	r1, [r3, #12]
 80019e2:	68c7      	ldr	r7, [r0, #12]
 80019e4:	42b9      	cmp	r1, r7
 80019e6:	bf84      	itt	hi
 80019e8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80019ec:	60d9      	strhi	r1, [r3, #12]
		if(it->next->element == el) pPrev = it;
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	42b1      	cmp	r1, r6
 80019f2:	bf08      	it	eq
 80019f4:	462a      	moveq	r2, r5
 80019f6:	461d      	mov	r5, r3
 80019f8:	e7e0      	b.n	80019bc <os_list_remove+0x1e>
	if(t == NULL) return OS_ERR_BAD_ARG;
 80019fa:	2001      	movs	r0, #1
}
 80019fc:	b003      	add	sp, #12
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(pCell == NULL) return OS_ERR_INVALID;
 8001a00:	2002      	movs	r0, #2
 8001a02:	e7fb      	b.n	80019fc <os_list_remove+0x5e>

08001a04 <os_list_clear>:
 * @brief This function clears a list, freeing all its cells and head
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_list_clear(os_list_head_t* head){
 8001a04:	b537      	push	{r0, r1, r2, r4, r5, lr}

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8001a06:	4604      	mov	r4, r0
 8001a08:	b198      	cbz	r0, 8001a32 <os_list_clear+0x2e>

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8001a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	b672      	cpsid	i
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	6805      	ldr	r5, [r0, #0]
 8001a18:	f7ff fef4 	bl	8001804 <os_heap_free>
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	2d00      	cmp	r5, #0
 8001a20:	d1f9      	bne.n	8001a16 <os_list_clear+0x12>
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff feee 	bl	8001804 <os_heap_free>
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	f383 8810 	msr	PRIMASK, r3
 8001a2e:	f3bf 8f6f 	isb	sy

		/* Free head
		 ---------------------------------------------------*/
		os_heap_free(head);
	);
}
 8001a32:	b003      	add	sp, #12
 8001a34:	bd30      	pop	{r4, r5, pc}

08001a36 <os_task_list_sort>:
 * Must be used on task lists
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_task_list_sort(os_list_head_t* head){
 8001a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8001a38:	4604      	mov	r4, r0
 8001a3a:	b190      	cbz	r0, 8001a62 <os_task_list_sort+0x2c>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	b672      	cpsid	i
 8001a44:	f3bf 8f6f 	isb	sy

	/* Update priority for all tasks
	 ---------------------------------------------------*/
	os_list_cell_t* p = head->head.next;
 8001a48:	6805      	ldr	r5, [r0, #0]
	while(p != NULL){
 8001a4a:	b965      	cbnz	r5, 8001a66 <os_task_list_sort+0x30>
		p = p->next;
	}

	/* Begin sort
	 ---------------------------------------------------*/
	os_list_cell_t* it_slow = &head->head;
 8001a4c:	4625      	mov	r5, r4
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	b113      	cbz	r3, 8001a58 <os_task_list_sort+0x22>
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d130      	bne.n	8001aba <os_task_list_sort+0x84>
		if(changeMade == 0) break;

		it_slow = it_slow->next;
	}

	OS_EXIT_CRITICAL();
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	f383 8810 	msr	PRIMASK, r3
 8001a5e:	f3bf 8f6f 	isb	sy
}
 8001a62:	b003      	add	sp, #12
 8001a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 8001a66:	68ae      	ldr	r6, [r5, #8]
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f000 fbeb 	bl	8002244 <os_task_getPrio>
 8001a6e:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
		p = p->next;
 8001a72:	682d      	ldr	r5, [r5, #0]
 8001a74:	e7e9      	b.n	8001a4a <os_task_list_sort+0x14>
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8001a76:	688b      	ldr	r3, [r1, #8]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8001a78:	68d7      	ldr	r7, [r2, #12]
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8001a7a:	f993 e044 	ldrsb.w	lr, [r3, #68]	; 0x44
 8001a7e:	6893      	ldr	r3, [r2, #8]
 8001a80:	f993 c044 	ldrsb.w	ip, [r3, #68]	; 0x44
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8001a84:	68cb      	ldr	r3, [r1, #12]
 8001a86:	42bb      	cmp	r3, r7
 8001a88:	bf94      	ite	ls
 8001a8a:	2300      	movls	r3, #0
 8001a8c:	2301      	movhi	r3, #1
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8001a8e:	45e6      	cmp	lr, ip
 8001a90:	bf18      	it	ne
 8001a92:	2300      	movne	r3, #0
 8001a94:	bfb8      	it	lt
 8001a96:	f043 0301 	orrlt.w	r3, r3, #1
			if(swap){
 8001a9a:	b123      	cbz	r3, 8001aa6 <os_task_list_sort+0x70>
				it_fast->next = pN2;
 8001a9c:	6002      	str	r2, [r0, #0]
				pN1->next = pN2->next;
 8001a9e:	6816      	ldr	r6, [r2, #0]
 8001aa0:	600e      	str	r6, [r1, #0]
				pN2->next = pN1;
 8001aa2:	6011      	str	r1, [r2, #0]
				changeMade = 1;
 8001aa4:	461e      	mov	r6, r3
			it_fast = it_fast->next;
 8001aa6:	6800      	ldr	r0, [r0, #0]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8001aa8:	6801      	ldr	r1, [r0, #0]
 8001aaa:	b111      	cbz	r1, 8001ab2 <os_task_list_sort+0x7c>
 8001aac:	680a      	ldr	r2, [r1, #0]
 8001aae:	2a00      	cmp	r2, #0
 8001ab0:	d1e1      	bne.n	8001a76 <os_task_list_sort+0x40>
		if(changeMade == 0) break;
 8001ab2:	2e00      	cmp	r6, #0
 8001ab4:	d0d0      	beq.n	8001a58 <os_task_list_sort+0x22>
		it_slow = it_slow->next;
 8001ab6:	682d      	ldr	r5, [r5, #0]
 8001ab8:	e7c9      	b.n	8001a4e <os_task_list_sort+0x18>
		os_list_cell_t* it_fast = &head->head;
 8001aba:	4620      	mov	r0, r4
		bool changeMade = 0;
 8001abc:	2600      	movs	r6, #0
 8001abe:	e7f3      	b.n	8001aa8 <os_task_list_sort+0x72>

08001ac0 <os_handle_list_getObjToUpdate>:
 **********************************************************************/
os_handle_t os_handle_list_getObjToUpdate(){

	/* Search object list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <os_handle_list_getObjToUpdate+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b90b      	cbnz	r3, 8001aca <os_handle_list_getObjToUpdate+0xa>
		if( ((os_handle_t)it->element)->objUpdate == 1)
			return it->element;
	}

	return NULL;
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	e003      	b.n	8001ad2 <os_handle_list_getObjToUpdate+0x12>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 8001aca:	6898      	ldr	r0, [r3, #8]
 8001acc:	7a02      	ldrb	r2, [r0, #8]
 8001ace:	2a00      	cmp	r2, #0
 8001ad0:	d0f7      	beq.n	8001ac2 <os_handle_list_getObjToUpdate+0x2>
}
 8001ad2:	4770      	bx	lr
 8001ad4:	20014d24 	.word	0x20014d24

08001ad8 <os_task_list_isObjFreeOnTask>:
 * @param os_handle_t obj  : [in] object to scan
 * @param os_handle_t task : [in] task to stop the scan
 *
 * @return bool : 1 = object is free ; 0 = object is not free
 **********************************************************************/
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 8001ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001adc:	4606      	mov	r6, r0
 8001ade:	4689      	mov	r9, r1

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	b672      	cpsid	i
 8001ae8:	f3bf 8f6f 	isb	sy

	/* Get current free count
	 ---------------------------------------------------*/
	uint32_t freeCount = obj->getFreeCount(obj);
 8001aec:	68c3      	ldr	r3, [r0, #12]
 8001aee:	4798      	blx	r3

	/* If it is 0, return 0 immediately
	 ---------------------------------------------------*/
	if(freeCount == 0) {
 8001af0:	4604      	mov	r4, r0
 8001af2:	b928      	cbnz	r0, 8001b00 <os_task_list_isObjFreeOnTask+0x28>
		os_task_t* t = (os_task_t*) it->element;

		/* Return if the object has no more free counters
		 ---------------------------------------------------*/
		if(freeCount == 0) {
			OS_EXIT_CRITICAL();
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	f383 8810 	msr	PRIMASK, r3
 8001afa:	f3bf 8f6f 	isb	sy
			return 0;
 8001afe:	e00b      	b.n	8001b18 <os_task_list_isObjFreeOnTask+0x40>
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 8001b00:	6970      	ldr	r0, [r6, #20]
 8001b02:	6983      	ldr	r3, [r0, #24]
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	d901      	bls.n	8001b0c <os_task_list_isObjFreeOnTask+0x34>
 8001b08:	1c63      	adds	r3, r4, #1
 8001b0a:	d109      	bne.n	8001b20 <os_task_list_isObjFreeOnTask+0x48>
		OS_EXIT_CRITICAL();
 8001b0c:	9b01      	ldr	r3, [sp, #4]
 8001b0e:	f383 8810 	msr	PRIMASK, r3
 8001b12:	f3bf 8f6f 	isb	sy
		return 1;
 8001b16:	2401      	movs	r4, #1

	/* Return if the object is free or not
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
	return freeCount > 0 ? 1 : 0;
}
 8001b18:	4620      	mov	r0, r4
 8001b1a:	b003      	add	sp, #12
 8001b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	os_task_list_sort(obj->blockList);
 8001b20:	f7ff ff89 	bl	8001a36 <os_task_list_sort>
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8001b24:	6973      	ldr	r3, [r6, #20]
 8001b26:	681f      	ldr	r7, [r3, #0]
 8001b28:	b947      	cbnz	r7, 8001b3c <os_task_list_isObjFreeOnTask+0x64>
	OS_EXIT_CRITICAL();
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	f383 8810 	msr	PRIMASK, r3
 8001b30:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 8001b34:	3400      	adds	r4, #0
 8001b36:	bf18      	it	ne
 8001b38:	2401      	movne	r4, #1
 8001b3a:	e7ed      	b.n	8001b18 <os_task_list_isObjFreeOnTask+0x40>
		os_task_t* t = (os_task_t*) it->element;
 8001b3c:	68bd      	ldr	r5, [r7, #8]
		if(freeCount == 0) {
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d0d8      	beq.n	8001af4 <os_task_list_isObjFreeOnTask+0x1c>
		if(it->element == task) break;
 8001b42:	454d      	cmp	r5, r9
 8001b44:	d0f1      	beq.n	8001b2a <os_task_list_isObjFreeOnTask+0x52>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001b46:	7e2b      	ldrb	r3, [r5, #24]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d028      	beq.n	8001b9e <os_task_list_isObjFreeOnTask+0xc6>
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d026      	beq.n	8001b9e <os_task_list_isObjFreeOnTask+0xc6>
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8001b50:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001b54:	b973      	cbnz	r3, 8001b74 <os_task_list_isObjFreeOnTask+0x9c>
			for(i = 0; i < t->sizeObjs; i++){
 8001b56:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d104      	bne.n	8001b66 <os_task_list_isObjFreeOnTask+0x8e>
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 8001b5c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d91d      	bls.n	8001b9e <os_task_list_isObjFreeOnTask+0xc6>
			freeCount = getObjs ? freeCount - 1 : freeCount;
 8001b62:	3c01      	subs	r4, #1
 8001b64:	e01b      	b.n	8001b9e <os_task_list_isObjFreeOnTask+0xc6>
				if(t->objWaited[i] == obj) break;
 8001b66:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001b68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001b6c:	42b1      	cmp	r1, r6
 8001b6e:	d0f5      	beq.n	8001b5c <os_task_list_isObjFreeOnTask+0x84>
			for(i = 0; i < t->sizeObjs; i++){
 8001b70:	3301      	adds	r3, #1
 8001b72:	e7f1      	b.n	8001b58 <os_task_list_isObjFreeOnTask+0x80>
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d112      	bne.n	8001b9e <os_task_list_isObjFreeOnTask+0xc6>
			for(size_t i = 0; i < t->sizeObjs; i++){
 8001b78:	f04f 0800 	mov.w	r8, #0
 8001b7c:	e006      	b.n	8001b8c <os_task_list_isObjFreeOnTask+0xb4>
				if(t->objWaited[i] == obj) continue;
 8001b7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001b80:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8001b84:	42b0      	cmp	r0, r6
 8001b86:	d105      	bne.n	8001b94 <os_task_list_isObjFreeOnTask+0xbc>
			for(size_t i = 0; i < t->sizeObjs; i++){
 8001b88:	f108 0801 	add.w	r8, r8, #1
 8001b8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b8e:	4543      	cmp	r3, r8
 8001b90:	d8f5      	bhi.n	8001b7e <os_task_list_isObjFreeOnTask+0xa6>
 8001b92:	e7e6      	b.n	8001b62 <os_task_list_isObjFreeOnTask+0x8a>
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7ff ff9f 	bl	8001ad8 <os_task_list_isObjFreeOnTask>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d1f4      	bne.n	8001b88 <os_task_list_isObjFreeOnTask+0xb0>
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8001b9e:	683f      	ldr	r7, [r7, #0]
 8001ba0:	e7c2      	b.n	8001b28 <os_task_list_isObjFreeOnTask+0x50>
	...

08001ba4 <os_handle_list_updateAndCheck>:
 *
 * @param os_handle_t h : [in] handle to the object to update
 *
 * @return bool : 1 = current task must yield
 **********************************************************************/
bool os_handle_list_updateAndCheck(os_handle_t h){
 8001ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba8:	4606      	mov	r6, r0

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001baa:	f3ef 8310 	mrs	r3, PRIMASK
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	b672      	cpsid	i
 8001bb2:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8001bb6:	f04f 38ff 	mov.w	r8, #4294967295
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;

						/* Tag all objects to update
						 ---------------------------------------------------*/
						t->objWaited[i]->objUpdate = 1;
 8001bba:	f04f 0901 	mov.w	r9, #1
	while(h != NULL){
 8001bbe:	b9a6      	cbnz	r6, 8001bea <os_handle_list_updateAndCheck+0x46>
		h = os_handle_list_getObjToUpdate();
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8001bc0:	f1b8 0f00 	cmp.w	r8, #0
 8001bc4:	f340 80ca 	ble.w	8001d5c <os_handle_list_updateAndCheck+0x1b8>
 8001bc8:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <os_handle_list_updateAndCheck+0x1bc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6898      	ldr	r0, [r3, #8]
 8001bce:	f000 fb39 	bl	8002244 <os_task_getPrio>
 8001bd2:	4540      	cmp	r0, r8
 8001bd4:	bfac      	ite	ge
 8001bd6:	2000      	movge	r0, #0
 8001bd8:	2001      	movlt	r0, #1

	OS_EXIT_CRITICAL();
 8001bda:	9b01      	ldr	r3, [sp, #4]
 8001bdc:	f383 8810 	msr	PRIMASK, r3
 8001be0:	f3bf 8f6f 	isb	sy
	return mustYield;
}
 8001be4:	b003      	add	sp, #12
 8001be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		os_task_list_sort(h->blockList);
 8001bea:	6970      	ldr	r0, [r6, #20]
 8001bec:	f7ff ff23 	bl	8001a36 <os_task_list_sort>
		uint32_t freeCount = h->getFreeCount(h);
 8001bf0:	68f3      	ldr	r3, [r6, #12]
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	4798      	blx	r3
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8001bf6:	6973      	ldr	r3, [r6, #20]
 8001bf8:	f8d3 a000 	ldr.w	sl, [r3]
		uint32_t freeCount = h->getFreeCount(h);
 8001bfc:	4607      	mov	r7, r0
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8001bfe:	f1ba 0f00 	cmp.w	sl, #0
 8001c02:	d105      	bne.n	8001c10 <os_handle_list_updateAndCheck+0x6c>
		h->objUpdate = 0;
 8001c04:	f886 a008 	strb.w	sl, [r6, #8]
		h = os_handle_list_getObjToUpdate();
 8001c08:	f7ff ff5a 	bl	8001ac0 <os_handle_list_getObjToUpdate>
 8001c0c:	4606      	mov	r6, r0
 8001c0e:	e7d6      	b.n	8001bbe <os_handle_list_updateAndCheck+0x1a>
			os_task_t* t = (os_task_t*)it->element;
 8001c10:	f8da 4008 	ldr.w	r4, [sl, #8]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001c14:	7e23      	ldrb	r3, [r4, #24]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	f000 808a 	beq.w	8001d30 <os_handle_list_updateAndCheck+0x18c>
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f000 8087 	beq.w	8001d30 <os_handle_list_updateAndCheck+0x18c>
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8001c22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001c26:	b9c3      	cbnz	r3, 8001c5a <os_handle_list_updateAndCheck+0xb6>
				for(i = 0; i < t->sizeObjs; i++){
 8001c28:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001c2a:	429d      	cmp	r5, r3
 8001c2c:	d11f      	bne.n	8001c6e <os_handle_list_updateAndCheck+0xca>
 8001c2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
				if(freeCount != 0){
 8001c30:	b327      	cbz	r7, 8001c7c <os_handle_list_updateAndCheck+0xd8>
					if(i < t->objWanted){
 8001c32:	4283      	cmp	r3, r0
 8001c34:	d211      	bcs.n	8001c5a <os_handle_list_updateAndCheck+0xb6>
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8001c36:	4285      	cmp	r5, r0
 8001c38:	bf84      	itt	hi
 8001c3a:	6ae1      	ldrhi	r1, [r4, #44]	; 0x2c
 8001c3c:	f851 1020 	ldrhi.w	r1, [r1, r0, lsl #2]
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8001c40:	f107 37ff 	add.w	r7, r7, #4294967295
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8001c44:	bf88      	it	hi
 8001c46:	f881 9008 	strbhi.w	r9, [r1, #8]
						t->objWanted = i;
 8001c4a:	6363      	str	r3, [r4, #52]	; 0x34
 8001c4c:	1cba      	adds	r2, r7, #2
						t->state = OS_TASK_READY;
 8001c4e:	f04f 0302 	mov.w	r3, #2
 8001c52:	7623      	strb	r3, [r4, #24]
 8001c54:	bf08      	it	eq
 8001c56:	f04f 37ff 	moveq.w	r7, #4294967295
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8001c5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d15e      	bne.n	8001d20 <os_handle_list_updateAndCheck+0x17c>
				size_t last_objWanted = t->objWanted;
 8001c62:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
				if(freeCount != 0){
 8001c66:	2f00      	cmp	r7, #0
 8001c68:	d065      	beq.n	8001d36 <os_handle_list_updateAndCheck+0x192>
					for(size_t i = 0; i < t->sizeObjs; i++){
 8001c6a:	2500      	movs	r5, #0
 8001c6c:	e036      	b.n	8001cdc <os_handle_list_updateAndCheck+0x138>
					if(t->objWaited[i] == h) break;
 8001c6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001c74:	42b1      	cmp	r1, r6
 8001c76:	d0da      	beq.n	8001c2e <os_handle_list_updateAndCheck+0x8a>
				for(i = 0; i < t->sizeObjs; i++){
 8001c78:	3301      	adds	r3, #1
 8001c7a:	e7d6      	b.n	8001c2a <os_handle_list_updateAndCheck+0x86>
					if(t->objWanted == i){
 8001c7c:	4283      	cmp	r3, r0
 8001c7e:	d1ec      	bne.n	8001c5a <os_handle_list_updateAndCheck+0xb6>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8001c80:	f103 0b01 	add.w	fp, r3, #1
 8001c84:	009d      	lsls	r5, r3, #2
 8001c86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c88:	455b      	cmp	r3, fp
 8001c8a:	d906      	bls.n	8001c9a <os_handle_list_updateAndCheck+0xf6>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8001c8c:	3504      	adds	r5, #4
 8001c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c90:	4621      	mov	r1, r4
 8001c92:	5958      	ldr	r0, [r3, r5]
 8001c94:	f7ff ff20 	bl	8001ad8 <os_task_list_isObjFreeOnTask>
 8001c98:	b1b8      	cbz	r0, 8001cca <os_handle_list_updateAndCheck+0x126>
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8001c9c:	69e1      	ldr	r1, [r4, #28]
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001c9e:	455b      	cmp	r3, fp
 8001ca0:	bf94      	ite	ls
 8001ca2:	2003      	movls	r0, #3
 8001ca4:	2002      	movhi	r0, #2
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	bf08      	it	eq
 8001caa:	2002      	moveq	r0, #2
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8001cac:	455b      	cmp	r3, fp
 8001cae:	bf98      	it	ls
 8001cb0:	f04f 3bff 	movls.w	fp, #4294967295
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8001cb4:	455b      	cmp	r3, fp
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8001cb6:	7620      	strb	r0, [r4, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8001cb8:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8001cbc:	d9cd      	bls.n	8001c5a <os_handle_list_updateAndCheck+0xb6>
 8001cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cc0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8001cc4:	f883 9008 	strb.w	r9, [r3, #8]
 8001cc8:	e7c7      	b.n	8001c5a <os_handle_list_updateAndCheck+0xb6>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8001cca:	f10b 0b01 	add.w	fp, fp, #1
 8001cce:	e7da      	b.n	8001c86 <os_handle_list_updateAndCheck+0xe2>
						if(t->objWaited[i] == h) continue;
 8001cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001cd6:	42b0      	cmp	r0, r6
 8001cd8:	d106      	bne.n	8001ce8 <os_handle_list_updateAndCheck+0x144>
					for(size_t i = 0; i < t->sizeObjs; i++){
 8001cda:	3501      	adds	r5, #1
 8001cdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cde:	42ab      	cmp	r3, r5
 8001ce0:	d8f6      	bhi.n	8001cd0 <os_handle_list_updateAndCheck+0x12c>
					bool getObjs = 1;
 8001ce2:	2001      	movs	r0, #1
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e006      	b.n	8001cf6 <os_handle_list_updateAndCheck+0x152>
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 8001ce8:	4621      	mov	r1, r4
 8001cea:	f7ff fef5 	bl	8001ad8 <os_task_list_isObjFreeOnTask>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	d1f3      	bne.n	8001cda <os_handle_list_updateAndCheck+0x136>
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	6363      	str	r3, [r4, #52]	; 0x34
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8001cf8:	69e3      	ldr	r3, [r4, #28]
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2103      	moveq	r1, #3
 8001d00:	2102      	movne	r1, #2
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf08      	it	eq
 8001d06:	2102      	moveq	r1, #2
 8001d08:	7621      	strb	r1, [r4, #24]
					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 8001d0a:	b110      	cbz	r0, 8001d12 <os_handle_list_updateAndCheck+0x16e>
 8001d0c:	1c7b      	adds	r3, r7, #1
 8001d0e:	d000      	beq.n	8001d12 <os_handle_list_updateAndCheck+0x16e>
 8001d10:	3f01      	subs	r7, #1
				if(last_objWanted != t->objWanted){
 8001d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d14:	455b      	cmp	r3, fp
 8001d16:	d003      	beq.n	8001d20 <os_handle_list_updateAndCheck+0x17c>
					for(size_t i = 0; i < t->sizeObjs; i++){
 8001d18:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4298      	cmp	r0, r3
 8001d1e:	d114      	bne.n	8001d4a <os_handle_list_updateAndCheck+0x1a6>
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8001d20:	7e23      	ldrb	r3, [r4, #24]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d104      	bne.n	8001d30 <os_handle_list_updateAndCheck+0x18c>
 8001d26:	f994 3044 	ldrsb.w	r3, [r4, #68]	; 0x44
 8001d2a:	4598      	cmp	r8, r3
 8001d2c:	bfb8      	it	lt
 8001d2e:	4698      	movlt	r8, r3
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8001d30:	f8da a000 	ldr.w	sl, [sl]
 8001d34:	e763      	b.n	8001bfe <os_handle_list_updateAndCheck+0x5a>
					t->objWanted = 0xFFFFFFFF;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	6363      	str	r3, [r4, #52]	; 0x34
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001d3c:	69e3      	ldr	r3, [r4, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2303      	movne	r3, #3
 8001d44:	2302      	moveq	r3, #2
 8001d46:	7623      	strb	r3, [r4, #24]
 8001d48:	e7e3      	b.n	8001d12 <os_handle_list_updateAndCheck+0x16e>
						if(t->objWaited[i] == h) continue;
 8001d4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001d50:	42b1      	cmp	r1, r6
						t->objWaited[i]->objUpdate = 1;
 8001d52:	bf18      	it	ne
 8001d54:	f881 9008 	strbne.w	r9, [r1, #8]
					for(size_t i = 0; i < t->sizeObjs; i++){
 8001d58:	3301      	adds	r3, #1
 8001d5a:	e7df      	b.n	8001d1c <os_handle_list_updateAndCheck+0x178>
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	e73c      	b.n	8001bda <os_handle_list_updateAndCheck+0x36>
 8001d60:	200144fc 	.word	0x200144fc

08001d64 <os_msgQ_updateAndCheck>:
 * @param os_hMsgQ_t msgQ : [in] msgQ to update
 *
 * @return bool : (1) current task should yeild
 *
 **********************************************************************/
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8001d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	/* Error check
	 ---------------------------------------------------*/
	if(msgQ == NULL) return 0;
 8001d66:	4604      	mov	r4, r0
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d047      	beq.n	8001dfc <os_msgQ_updateAndCheck+0x98>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8001d6c:	7803      	ldrb	r3, [r0, #0]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d144      	bne.n	8001dfc <os_msgQ_updateAndCheck+0x98>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001d72:	f3ef 8310 	mrs	r3, PRIMASK
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	b672      	cpsid	i
 8001d7a:	f3bf 8f6f 	isb	sy
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;

	/* Sort List
	 ---------------------------------------------------*/
	os_task_list_sort(msgQ->obj.blockList);
 8001d7e:	6940      	ldr	r0, [r0, #20]
 8001d80:	f7ff fe59 	bl	8001a36 <os_task_list_sort>

	/* Get the number of times we can get the object
	 ---------------------------------------------------*/
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 8001d84:	69a3      	ldr	r3, [r4, #24]
 8001d86:	699a      	ldr	r2, [r3, #24]

	/* Updates every task on the block list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8001d88:	6963      	ldr	r3, [r4, #20]
	int8_t maxPrio = -1;
 8001d8a:	f04f 34ff 	mov.w	r4, #4294967295
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8001d8e:	6818      	ldr	r0, [r3, #0]
		 ---------------------------------------------------*/
		else{

			/* Just update task infos
			 ---------------------------------------------------*/
			t->objWanted = 0xFFFFFFFF;
 8001d90:	4625      	mov	r5, r4
			t->objWanted = 0;
 8001d92:	2600      	movs	r6, #0
			t->state = OS_TASK_READY;
 8001d94:	2702      	movs	r7, #2
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8001d96:	b988      	cbnz	r0, 8001dbc <os_msgQ_updateAndCheck+0x58>
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8001d98:	2c00      	cmp	r4, #0
 8001d9a:	dd08      	ble.n	8001dae <os_msgQ_updateAndCheck+0x4a>
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <os_msgQ_updateAndCheck+0x9c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6898      	ldr	r0, [r3, #8]
 8001da2:	f000 fa4f 	bl	8002244 <os_task_getPrio>
 8001da6:	4284      	cmp	r4, r0
 8001da8:	bfd4      	ite	le
 8001daa:	2000      	movle	r0, #0
 8001dac:	2001      	movgt	r0, #1

	OS_EXIT_CRITICAL();
 8001dae:	9b01      	ldr	r3, [sp, #4]
 8001db0:	f383 8810 	msr	PRIMASK, r3
 8001db4:	f3bf 8f6f 	isb	sy
	return mustYield;
}
 8001db8:	b003      	add	sp, #12
 8001dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		os_task_t* t = (os_task_t*)it->element;
 8001dbc:	6883      	ldr	r3, [r0, #8]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001dbe:	7e19      	ldrb	r1, [r3, #24]
 8001dc0:	2904      	cmp	r1, #4
 8001dc2:	d011      	beq.n	8001de8 <os_msgQ_updateAndCheck+0x84>
 8001dc4:	2901      	cmp	r1, #1
 8001dc6:	d00f      	beq.n	8001de8 <os_msgQ_updateAndCheck+0x84>
		if(freeCount != 0){
 8001dc8:	b182      	cbz	r2, 8001dec <os_msgQ_updateAndCheck+0x88>
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	1c91      	adds	r1, r2, #2
			t->objWanted = 0;
 8001dce:	635e      	str	r6, [r3, #52]	; 0x34
			t->state = OS_TASK_READY;
 8001dd0:	761f      	strb	r7, [r3, #24]
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 8001dd2:	bf08      	it	eq
 8001dd4:	f04f 32ff 	moveq.w	r2, #4294967295
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8001dd8:	7e19      	ldrb	r1, [r3, #24]
 8001dda:	2902      	cmp	r1, #2
 8001ddc:	d104      	bne.n	8001de8 <os_msgQ_updateAndCheck+0x84>
 8001dde:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8001de2:	429c      	cmp	r4, r3
 8001de4:	bfb8      	it	lt
 8001de6:	461c      	movlt	r4, r3
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 8001de8:	6800      	ldr	r0, [r0, #0]
 8001dea:	e7d4      	b.n	8001d96 <os_msgQ_updateAndCheck+0x32>
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001dec:	69d9      	ldr	r1, [r3, #28]
			t->objWanted = 0xFFFFFFFF;
 8001dee:	635d      	str	r5, [r3, #52]	; 0x34
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001df0:	2900      	cmp	r1, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2102      	moveq	r1, #2
 8001df6:	2103      	movne	r1, #3
 8001df8:	7619      	strb	r1, [r3, #24]
 8001dfa:	e7ed      	b.n	8001dd8 <os_msgQ_updateAndCheck+0x74>
	if(msgQ == NULL) return 0;
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	e7db      	b.n	8001db8 <os_msgQ_updateAndCheck+0x54>
 8001e00:	200144fc 	.word	0x200144fc

08001e04 <os_obj_updatePrio>:
void os_obj_updatePrio(os_handle_t h){
 8001e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e06:	4604      	mov	r4, r0
	OS_ENTER_CRITICAL();
 8001e08:	f3ef 8310 	mrs	r3, PRIMASK
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	b672      	cpsid	i
 8001e10:	f3bf 8f6f 	isb	sy
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8001e14:	7803      	ldrb	r3, [r0, #0]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d10c      	bne.n	8001e34 <os_obj_updatePrio+0x30>
	os_list_cell_t* it = head->head.next;
 8001e1a:	6943      	ldr	r3, [r0, #20]
	int8_t prev_max_prio = mutex->max_prio;
 8001e1c:	f990 101d 	ldrsb.w	r1, [r0, #29]
	os_list_cell_t* it = head->head.next;
 8001e20:	681a      	ldr	r2, [r3, #0]
	int8_t maxPrio = -1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
	while(it != NULL){
 8001e26:	b97a      	cbnz	r2, 8001e48 <os_obj_updatePrio+0x44>
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8001e28:	4299      	cmp	r1, r3
	mutex->max_prio = maxPrio;
 8001e2a:	7763      	strb	r3, [r4, #29]
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8001e2c:	d005      	beq.n	8001e3a <os_obj_updatePrio+0x36>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 8001e2e:	69a0      	ldr	r0, [r4, #24]
 8001e30:	f7ff ffe8 	bl	8001e04 <os_obj_updatePrio>
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8001e34:	7823      	ldrb	r3, [r4, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00e      	beq.n	8001e58 <os_obj_updatePrio+0x54>
	OS_EXIT_CRITICAL();
 8001e3a:	9b01      	ldr	r3, [sp, #4]
 8001e3c:	f383 8810 	msr	PRIMASK, r3
 8001e40:	f3bf 8f6f 	isb	sy
}
 8001e44:	b002      	add	sp, #8
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8001e48:	6890      	ldr	r0, [r2, #8]
		it = it->next;
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f990 0044 	ldrsb.w	r0, [r0, #68]	; 0x44
 8001e50:	4283      	cmp	r3, r0
 8001e52:	bfb8      	it	lt
 8001e54:	4603      	movlt	r3, r0
 8001e56:	e7e6      	b.n	8001e26 <os_obj_updatePrio+0x22>
	int8_t prev_prio = tsk->priority;
 8001e58:	f994 1044 	ldrsb.w	r1, [r4, #68]	; 0x44
	int8_t maxPrio = tsk->basePriority;
 8001e5c:	f994 3019 	ldrsb.w	r3, [r4, #25]
	os_list_cell_t* it = head->head.next;
 8001e60:	6962      	ldr	r2, [r4, #20]
		it = it->next;
 8001e62:	6812      	ldr	r2, [r2, #0]
	while(it != NULL){
 8001e64:	b9ea      	cbnz	r2, 8001ea2 <os_obj_updatePrio+0x9e>
	it = head->head.next;
 8001e66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e68:	6815      	ldr	r5, [r2, #0]
	while(it != NULL){
 8001e6a:	bb0d      	cbnz	r5, 8001eb0 <os_obj_updatePrio+0xac>
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8001e6c:	4299      	cmp	r1, r3
	tsk->priority = maxPrio;
 8001e6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8001e72:	d0e2      	beq.n	8001e3a <os_obj_updatePrio+0x36>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8001e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d9df      	bls.n	8001e3a <os_obj_updatePrio+0x36>
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 8001e7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e7c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001e80:	7803      	ldrb	r3, [r0, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	ea4f 0685 	mov.w	r6, r5, lsl #2
 8001e8a:	d801      	bhi.n	8001e90 <os_obj_updatePrio+0x8c>
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 8001e8c:	f7ff ffba 	bl	8001e04 <os_obj_updatePrio>
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 8001e90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e92:	5998      	ldr	r0, [r3, r6]
 8001e94:	7803      	ldrb	r3, [r0, #0]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d101      	bne.n	8001e9e <os_obj_updatePrio+0x9a>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 8001e9a:	f7ff ff63 	bl	8001d64 <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8001e9e:	3501      	adds	r5, #1
 8001ea0:	e7e8      	b.n	8001e74 <os_obj_updatePrio+0x70>
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8001ea2:	6890      	ldr	r0, [r2, #8]
 8001ea4:	f990 0044 	ldrsb.w	r0, [r0, #68]	; 0x44
 8001ea8:	4283      	cmp	r3, r0
 8001eaa:	bfb8      	it	lt
 8001eac:	4603      	movlt	r3, r0
 8001eae:	e7d8      	b.n	8001e62 <os_obj_updatePrio+0x5e>
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 8001eb0:	68aa      	ldr	r2, [r5, #8]
		it = it->next;
 8001eb2:	682d      	ldr	r5, [r5, #0]
 8001eb4:	f992 201d 	ldrsb.w	r2, [r2, #29]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bfb8      	it	lt
 8001ebc:	4613      	movlt	r3, r2
 8001ebe:	e7d4      	b.n	8001e6a <os_obj_updatePrio+0x66>

08001ec0 <os_scheduler>:
 **********************************************************************/
__used static void os_scheduler(){

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <os_scheduler+0xcc>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
__used static void os_scheduler(){
 8001ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(state != OS_SCHEDULER_START) return;
 8001eca:	d13c      	bne.n	8001f46 <os_scheduler+0x86>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__os_disable_irq();
 8001ecc:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9301      	str	r3, [sp, #4]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8001ed2:	f3ef 8309 	mrs	r3, PSP

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 8001ed6:	4c2e      	ldr	r4, [pc, #184]	; (8001f90 <os_scheduler+0xd0>)
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8001ed8:	9301      	str	r3, [sp, #4]
	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 8001eda:	f8d4 8000 	ldr.w	r8, [r4]
 8001ede:	f1b8 0f00 	cmp.w	r8, #0
 8001ee2:	d003      	beq.n	8001eec <os_scheduler+0x2c>
 8001ee4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ee8:	9a01      	ldr	r2, [sp, #4]
 8001eea:	621a      	str	r2, [r3, #32]
	os_list_cell_t* it = os_head.head.next;
 8001eec:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8001f94 <os_scheduler+0xd4>
 8001ef0:	f8da 7000 	ldr.w	r7, [sl]
	os_list_cell_t* it_low = os_cur_task;
 8001ef4:	6826      	ldr	r6, [r4, #0]
	os_list_cell_t* highSide= NULL;
 8001ef6:	2500      	movs	r5, #0
	int8_t highSidePrio = -1;
 8001ef8:	f04f 3bff 	mov.w	fp, #4294967295
	while(it != os_cur_task){
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	429f      	cmp	r7, r3
 8001f00:	d124      	bne.n	8001f4c <os_scheduler+0x8c>
	os_list_cell_t* lowSide = NULL;
 8001f02:	2700      	movs	r7, #0
	int8_t lowSidePrio = -1;
 8001f04:	f04f 39ff 	mov.w	r9, #4294967295
	while(it_low != NULL){
 8001f08:	2e00      	cmp	r6, #0
 8001f0a:	d12b      	bne.n	8001f64 <os_scheduler+0xa4>
	if(lowSide == NULL && highSide == NULL) return NULL;
 8001f0c:	2f00      	cmp	r7, #0
 8001f0e:	d135      	bne.n	8001f7c <os_scheduler+0xbc>
 8001f10:	2d00      	cmp	r5, #0
 8001f12:	d135      	bne.n	8001f80 <os_scheduler+0xc0>
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 8001f14:	6025      	str	r5, [r4, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
			__os_enable_irq();
 8001f16:	b662      	cpsie	i
			os_no_task_ready_cb();
 8001f18:	f7ff fbff 	bl	800171a <os_no_task_ready_cb>
			__os_disable_irq();
 8001f1c:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0e5      	beq.n	8001ef0 <os_scheduler+0x30>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	9301      	str	r3, [sp, #4]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 8001f2a:	9b01      	ldr	r3, [sp, #4]
 8001f2c:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 8001f30:	f1b8 0f00 	cmp.w	r8, #0
 8001f34:	d006      	beq.n	8001f44 <os_scheduler+0x84>
 8001f36:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001f3a:	7e03      	ldrb	r3, [r0, #24]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d101      	bne.n	8001f44 <os_scheduler+0x84>
 8001f40:	f000 f906 	bl	8002150 <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__os_enable_irq();
 8001f44:	b662      	cpsie	i

}
 8001f46:	b003      	add	sp, #12
 8001f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 8001f4c:	68b8      	ldr	r0, [r7, #8]
 8001f4e:	7e03      	ldrb	r3, [r0, #24]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d105      	bne.n	8001f60 <os_scheduler+0xa0>
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 8001f54:	f000 f976 	bl	8002244 <os_task_getPrio>
			if(highSidePrio <= task_prio){
 8001f58:	4558      	cmp	r0, fp
 8001f5a:	bfa4      	itt	ge
 8001f5c:	463d      	movge	r5, r7
 8001f5e:	4683      	movge	fp, r0
		it = it->next;
 8001f60:	683f      	ldr	r7, [r7, #0]
 8001f62:	e7cb      	b.n	8001efc <os_scheduler+0x3c>
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 8001f64:	68b0      	ldr	r0, [r6, #8]
 8001f66:	7e03      	ldrb	r3, [r0, #24]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d105      	bne.n	8001f78 <os_scheduler+0xb8>
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 8001f6c:	f000 f96a 	bl	8002244 <os_task_getPrio>
			if(lowSidePrio <= task_prio ){
 8001f70:	4548      	cmp	r0, r9
 8001f72:	bfa4      	itt	ge
 8001f74:	4637      	movge	r7, r6
 8001f76:	4681      	movge	r9, r0
		it_low = it_low->next;
 8001f78:	6836      	ldr	r6, [r6, #0]
 8001f7a:	e7c5      	b.n	8001f08 <os_scheduler+0x48>
	if(highSide == NULL && lowSide != NULL) return lowSide;
 8001f7c:	b915      	cbnz	r5, 8001f84 <os_scheduler+0xc4>
 8001f7e:	463d      	mov	r5, r7
		os_cur_task = os_round_robin();
 8001f80:	6025      	str	r5, [r4, #0]
 8001f82:	e7cc      	b.n	8001f1e <os_scheduler+0x5e>
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 8001f84:	45cb      	cmp	fp, r9
 8001f86:	dafb      	bge.n	8001f80 <os_scheduler+0xc0>
		os_cur_task = os_round_robin();
 8001f88:	6027      	str	r7, [r4, #0]
 8001f8a:	e7c8      	b.n	8001f1e <os_scheduler+0x5e>
 8001f8c:	200144f8 	.word	0x200144f8
 8001f90:	200144fc 	.word	0x200144fc
 8001f94:	20014d44 	.word	0x20014d44

08001f98 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8001f98:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8001f9c:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8001fa0:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 8001fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 8001fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 8001faa:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 8001fae:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 8001fb0:	f7ff ff86 	bl	8001ec0 <os_scheduler>
	__asm volatile ("pop {lr}");
 8001fb4:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8001fb8:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 8001fbc:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 8001fc0:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8001fc4:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 8001fc6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 8001fca:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 8001fce:	4770      	bx	lr

08001fd0 <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 8001fd0:	b507      	push	{r0, r1, r2, lr}

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 8001fd2:	f7ff fb4f 	bl	8001674 <os_init_get>
 8001fd6:	b1d8      	cbz	r0, 8002010 <os_scheduler_start+0x40>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8001fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	b672      	cpsid	i
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <os_scheduler_start+0x44>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	f000 f935 	bl	8002258 <os_task_must_yeild>
 8001fee:	b130      	cbz	r0, 8001ffe <os_scheduler_start+0x2e>
 8001ff0:	4a09      	ldr	r2, [pc, #36]	; (8002018 <os_scheduler_start+0x48>)
 8001ff2:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 8001ffe:	9b01      	ldr	r3, [sp, #4]
 8002000:	f383 8810 	msr	PRIMASK, r3
 8002004:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 8002008:	2000      	movs	r0, #0
}
 800200a:	b003      	add	sp, #12
 800200c:	f85d fb04 	ldr.w	pc, [sp], #4
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 8002010:	2004      	movs	r0, #4
 8002012:	e7fa      	b.n	800200a <os_scheduler_start+0x3a>
 8002014:	200144f8 	.word	0x200144f8
 8002018:	e000e008 	.word	0xe000e008

0800201c <os_scheduler_state_get>:
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
	return state;
}
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <os_scheduler_state_get+0x8>)
 800201e:	7818      	ldrb	r0, [r3, #0]
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200144f8 	.word	0x200144f8

08002028 <os_task_objTake>:
 *
 **********************************************************************/
static void os_task_objTake(os_handle_t h, os_handle_t takingTask){
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);
}
 8002028:	4770      	bx	lr
	...

0800202c <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 800202c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 800202e:	1e0e      	subs	r6, r1, #0
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 8002030:	4607      	mov	r7, r0
 8002032:	4614      	mov	r4, r2
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 8002034:	db56      	blt.n	80020e4 <os_task_init+0xb8>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 8002036:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 800203a:	d353      	bcc.n	80020e4 <os_task_init+0xb8>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 800203c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002040:	d350      	bcc.n	80020e4 <os_task_init+0xb8>
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 8002042:	4610      	mov	r0, r2
 8002044:	f7ff fb7e 	bl	8001744 <os_heap_alloc>
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002048:	b910      	cbnz	r0, 8002050 <os_task_init+0x24>
 800204a:	2003      	movs	r0, #3
	main_task = (os_handle_t) t;

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
}
 800204c:	b003      	add	sp, #12
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 8002050:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 8002052:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 8002056:	f386 8809 	msr	PSP, r6
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 800205a:	4404      	add	r4, r0
 800205c:	f024 0407 	bic.w	r4, r4, #7
 8002060:	9401      	str	r4, [sp, #4]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 8002062:	9b01      	ldr	r3, [sp, #4]
 8002064:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 8002066:	f386 8808 	msr	MSP, r6
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 800206a:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 800206e:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 8002072:	f386 8814 	msr	CONTROL, r6
	__asm volatile ("pop {r6, lr}");
 8002076:	e8bd 4040 	ldmia.w	sp!, {r6, lr}
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 800207a:	2048      	movs	r0, #72	; 0x48
 800207c:	f7ff fb62 	bl	8001744 <os_heap_alloc>
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8002080:	4604      	mov	r4, r0
 8002082:	2800      	cmp	r0, #0
 8002084:	d0e1      	beq.n	800204a <os_task_init+0x1e>
	t->obj.type				= OS_OBJ_TASK;
 8002086:	2301      	movs	r3, #1
	t->obj.objUpdate		= 0;
 8002088:	2500      	movs	r5, #0
	t->obj.type				= OS_OBJ_TASK;
 800208a:	7003      	strb	r3, [r0, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <os_task_init+0xbc>)
 800208e:	60c3      	str	r3, [r0, #12]
	t->obj.objUpdate		= 0;
 8002090:	7205      	strb	r5, [r0, #8]
	t->obj.blockList		= os_list_init();
 8002092:	f7ff fbff 	bl	8001894 <os_list_init>
	t->obj.obj_take			= &os_task_objTake;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <os_task_init+0xc0>)
 8002098:	6123      	str	r3, [r4, #16]
	t->state	 			= OS_TASK_READY;
 800209a:	2302      	movs	r3, #2
	t->basePriority 		= main_task_priority;
 800209c:	7666      	strb	r6, [r4, #25]
	t->priority		    	= main_task_priority;
 800209e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
	t->obj.blockList		= os_list_init();
 80020a2:	6160      	str	r0, [r4, #20]
	t->obj.name 			= main_name;
 80020a4:	6067      	str	r7, [r4, #4]
	t->state	 			= OS_TASK_READY;
 80020a6:	7623      	strb	r3, [r4, #24]
	t->wakeCoutdown  		= 0;
 80020a8:	e9c4 5507 	strd	r5, r5, [r4, #28]
	t->objWaited			= NULL;
 80020ac:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	t->sizeObjs 			= 0;
 80020b0:	6325      	str	r5, [r4, #48]	; 0x30
	t->retVal				= NULL;
 80020b2:	6425      	str	r5, [r4, #64]	; 0x40
	t->ownedMutex			= os_list_init();
 80020b4:	f7ff fbee 	bl	8001894 <os_list_init>
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 80020b8:	4e0d      	ldr	r6, [pc, #52]	; (80020f0 <os_task_init+0xc4>)
	t->ownedMutex			= os_list_init();
 80020ba:	63e0      	str	r0, [r4, #60]	; 0x3c
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 80020bc:	462a      	mov	r2, r5
 80020be:	4621      	mov	r1, r4
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7ff fc31 	bl	8001928 <os_list_add>
	if(ret != OS_ERR_OK) return ret;
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d1c0      	bne.n	800204c <os_task_init+0x20>
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 80020ca:	4602      	mov	r2, r0
 80020cc:	4621      	mov	r1, r4
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <os_task_init+0xc8>)
 80020d0:	f7ff fc2a 	bl	8001928 <os_list_add>
	if(ret != OS_ERR_OK) return ret;
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d1b9      	bne.n	800204c <os_task_init+0x20>
	os_cur_task = os_head.head.next;
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <os_task_init+0xcc>)
 80020da:	6832      	ldr	r2, [r6, #0]
 80020dc:	601a      	str	r2, [r3, #0]
	main_task = (os_handle_t) t;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <os_task_init+0xd0>)
 80020e0:	601c      	str	r4, [r3, #0]
	return ret;
 80020e2:	e7b3      	b.n	800204c <os_task_init+0x20>
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 80020e4:	2001      	movs	r0, #1
 80020e6:	e7b1      	b.n	800204c <os_task_init+0x20>
 80020e8:	08002441 	.word	0x08002441
 80020ec:	08002029 	.word	0x08002029
 80020f0:	20014d44 	.word	0x20014d44
 80020f4:	20014d24 	.word	0x20014d24
 80020f8:	200144fc 	.word	0x200144fc
 80020fc:	20014d60 	.word	0x20014d60

08002100 <os_task_yeild>:
 **********************************************************************/
void os_task_yeild(){

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <os_task_yeild+0x10>)
 8002102:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 800210e:	4770      	bx	lr
 8002110:	e000e008 	.word	0xe000e008

08002114 <os_task_return>:
os_err_e os_task_return(void* retVal){
 8002114:	b513      	push	{r0, r1, r4, lr}
 8002116:	4604      	mov	r4, r0
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002118:	f7ff ff80 	bl	800201c <os_scheduler_state_get>
 800211c:	2801      	cmp	r0, #1
 800211e:	d111      	bne.n	8002144 <os_task_return+0x30>
	OS_ENTER_CRITICAL();
 8002120:	f3ef 8310 	mrs	r3, PRIMASK
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	b672      	cpsid	i
 8002128:	f3bf 8f6f 	isb	sy
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <os_task_return+0x38>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	7618      	strb	r0, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 8002134:	641c      	str	r4, [r3, #64]	; 0x40
	os_handle_list_updateAndCheck(os_cur_task->element);
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd34 	bl	8001ba4 <os_handle_list_updateAndCheck>
		os_task_yeild();
 800213c:	f7ff ffe0 	bl	8002100 <os_task_yeild>
		__os_enable_irq();
 8002140:	b662      	cpsie	i
 8002142:	e7fb      	b.n	800213c <os_task_return+0x28>
}
 8002144:	2004      	movs	r0, #4
 8002146:	b002      	add	sp, #8
 8002148:	bd10      	pop	{r4, pc}
 800214a:	bf00      	nop
 800214c:	200144fc 	.word	0x200144fc

08002150 <os_task_delete>:
os_err_e os_task_delete(os_handle_t h){
 8002150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002152:	4604      	mov	r4, r0
	os_list_cell_t* list = os_list_search(&os_head, h);
 8002154:	4601      	mov	r1, r0
 8002156:	4838      	ldr	r0, [pc, #224]	; (8002238 <os_task_delete+0xe8>)
 8002158:	f7ff fba9 	bl	80018ae <os_list_search>
	if(t == NULL) return OS_ERR_BAD_ARG;
 800215c:	2c00      	cmp	r4, #0
 800215e:	d069      	beq.n	8002234 <os_task_delete+0xe4>
	if(list == NULL) return OS_ERR_INVALID;
 8002160:	2800      	cmp	r0, #0
 8002162:	d065      	beq.n	8002230 <os_task_delete+0xe0>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 8002164:	7823      	ldrb	r3, [r4, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d164      	bne.n	8002234 <os_task_delete+0xe4>
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 800216a:	4d34      	ldr	r5, [pc, #208]	; (800223c <os_task_delete+0xec>)
 800216c:	682a      	ldr	r2, [r5, #0]
 800216e:	6892      	ldr	r2, [r2, #8]
 8002170:	42a2      	cmp	r2, r4
 8002172:	d014      	beq.n	800219e <os_task_delete+0x4e>
	OS_ENTER_CRITICAL();
 8002174:	f3ef 8310 	mrs	r3, PRIMASK
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	b672      	cpsid	i
 800217c:	f3bf 8f6f 	isb	sy
	t->state = OS_TASK_ENDED;
 8002180:	2301      	movs	r3, #1
 8002182:	7623      	strb	r3, [r4, #24]
	os_handle_list_updateAndCheck(h);
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff fd0d 	bl	8001ba4 <os_handle_list_updateAndCheck>
	if(h == os_cur_task->element){
 800218a:	682b      	ldr	r3, [r5, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	429c      	cmp	r4, r3
 8002190:	d10b      	bne.n	80021aa <os_task_delete+0x5a>
		t->state = OS_TASK_DELETING;
 8002192:	2304      	movs	r3, #4
 8002194:	7623      	strb	r3, [r4, #24]
			os_task_yeild();
 8002196:	f7ff ffb3 	bl	8002100 <os_task_yeild>
			__os_enable_irq();
 800219a:	b662      	cpsie	i
 800219c:	e7fb      	b.n	8002196 <os_task_delete+0x46>
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 800219e:	f7ff ff3d 	bl	800201c <os_scheduler_state_get>
 80021a2:	2801      	cmp	r0, #1
 80021a4:	d0e6      	beq.n	8002174 <os_task_delete+0x24>
 80021a6:	2004      	movs	r0, #4
 80021a8:	e027      	b.n	80021fa <os_task_delete+0xaa>
	if( t->objWaited != NULL) {
 80021aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d13d      	bne.n	800222c <os_task_delete+0xdc>
	os_list_remove(&os_obj_head, h);
 80021b0:	4621      	mov	r1, r4
 80021b2:	4823      	ldr	r0, [pc, #140]	; (8002240 <os_task_delete+0xf0>)
 80021b4:	f7ff fbf3 	bl	800199e <os_list_remove>
	os_list_remove(&os_head, h);
 80021b8:	4621      	mov	r1, r4
 80021ba:	481f      	ldr	r0, [pc, #124]	; (8002238 <os_task_delete+0xe8>)
 80021bc:	f7ff fbef 	bl	800199e <os_list_remove>
	os_list_clear(h->blockList);
 80021c0:	6960      	ldr	r0, [r4, #20]
 80021c2:	f7ff fc1f 	bl	8001a04 <os_list_clear>
	os_list_clear(t->ownedMutex);
 80021c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80021c8:	f7ff fc1c 	bl	8001a04 <os_list_clear>
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 80021cc:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80021d0:	1ac0      	subs	r0, r0, r3
 80021d2:	f7ff fb17 	bl	8001804 <os_heap_free>
	t->objWaited = NULL;
 80021d6:	2500      	movs	r5, #0
	t->state = OS_TASK_ENDED;
 80021d8:	2301      	movs	r3, #1
 80021da:	7623      	strb	r3, [r4, #24]
	t->sizeObjs = 0;
 80021dc:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
	t->pStack = 0;
 80021e0:	6225      	str	r5, [r4, #32]
	t->stackSize = 0;
 80021e2:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	t->wakeCoutdown = 0;
 80021e6:	61e5      	str	r5, [r4, #28]
	os_heap_free(h);
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff fb0b 	bl	8001804 <os_heap_free>
	OS_EXIT_CRITICAL();
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	f383 8810 	msr	PRIMASK, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	4628      	mov	r0, r5
}
 80021fa:	b003      	add	sp, #12
 80021fc:	bd30      	pop	{r4, r5, pc}
			if(t->objWaited[i] == NULL) continue;
 80021fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002200:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002204:	b16b      	cbz	r3, 8002222 <os_task_delete+0xd2>
			os_list_remove(t->objWaited[i]->blockList, h);
 8002206:	4621      	mov	r1, r4
 8002208:	6958      	ldr	r0, [r3, #20]
 800220a:	f7ff fbc8 	bl	800199e <os_list_remove>
			os_obj_updatePrio(t->objWaited[i]);
 800220e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002210:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002214:	f7ff fdf6 	bl	8001e04 <os_obj_updatePrio>
			os_handle_list_updateAndCheck(t->objWaited[i]);
 8002218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800221a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800221e:	f7ff fcc1 	bl	8001ba4 <os_handle_list_updateAndCheck>
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8002222:	3501      	adds	r5, #1
 8002224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002226:	429d      	cmp	r5, r3
 8002228:	d3e9      	bcc.n	80021fe <os_task_delete+0xae>
 800222a:	e7c1      	b.n	80021b0 <os_task_delete+0x60>
 800222c:	2500      	movs	r5, #0
 800222e:	e7f9      	b.n	8002224 <os_task_delete+0xd4>
	if(list == NULL) return OS_ERR_INVALID;
 8002230:	2002      	movs	r0, #2
 8002232:	e7e2      	b.n	80021fa <os_task_delete+0xaa>
	if(t == NULL) return OS_ERR_BAD_ARG;
 8002234:	2001      	movs	r0, #1
 8002236:	e7e0      	b.n	80021fa <os_task_delete+0xaa>
 8002238:	20014d44 	.word	0x20014d44
 800223c:	200144fc 	.word	0x200144fc
 8002240:	20014d24 	.word	0x20014d24

08002244 <os_task_getPrio>:
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 8002244:	b128      	cbz	r0, 8002252 <os_task_getPrio+0xe>
	if(h->type != OS_OBJ_TASK) return -1;
 8002246:	7803      	ldrb	r3, [r0, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d102      	bne.n	8002252 <os_task_getPrio+0xe>

	return t->priority;
 800224c:	f990 0044 	ldrsb.w	r0, [r0, #68]	; 0x44
 8002250:	4770      	bx	lr
	if(t == NULL) return -1;
 8002252:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002256:	4770      	bx	lr

08002258 <os_task_must_yeild>:
bool os_task_must_yeild(){
 8002258:	b513      	push	{r0, r1, r4, lr}
	OS_CRITICAL_SECTION(
 800225a:	f3ef 8310 	mrs	r3, PRIMASK
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	b672      	cpsid	i
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <os_task_must_yeild+0x54>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <os_task_must_yeild+0x58>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b163      	cbz	r3, 800228a <os_task_must_yeild+0x32>
 8002270:	6898      	ldr	r0, [r3, #8]
 8002272:	f7ff ffe7 	bl	8002244 <os_task_getPrio>
 8002276:	4601      	mov	r1, r0
 8002278:	b952      	cbnz	r2, 8002290 <os_task_must_yeild+0x38>
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	f383 8810 	msr	PRIMASK, r3
 8002280:	f3bf 8f6f 	isb	sy
	return false;
 8002284:	4610      	mov	r0, r2
}
 8002286:	b002      	add	sp, #8
 8002288:	bd10      	pop	{r4, pc}
	OS_CRITICAL_SECTION(
 800228a:	f04f 31ff 	mov.w	r1, #4294967295
 800228e:	e7f3      	b.n	8002278 <os_task_must_yeild+0x20>
 8002290:	6894      	ldr	r4, [r2, #8]
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff ffd6 	bl	8002244 <os_task_getPrio>
 8002298:	7e23      	ldrb	r3, [r4, #24]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d101      	bne.n	80022a2 <os_task_must_yeild+0x4a>
 800229e:	4281      	cmp	r1, r0
 80022a0:	db01      	blt.n	80022a6 <os_task_must_yeild+0x4e>
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	e7e8      	b.n	8002278 <os_task_must_yeild+0x20>
 80022a6:	2001      	movs	r0, #1
 80022a8:	e7ed      	b.n	8002286 <os_task_must_yeild+0x2e>
 80022aa:	bf00      	nop
 80022ac:	20014d44 	.word	0x20014d44
 80022b0:	200144fc 	.word	0x200144fc

080022b4 <os_task_create>:
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), int8_t priority, uint32_t stack_size, void* arg){
 80022b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80022bc:	468b      	mov	fp, r1
 80022be:	4690      	mov	r8, r2
 80022c0:	469a      	mov	sl, r3
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 80022c2:	4607      	mov	r7, r0
 80022c4:	2800      	cmp	r0, #0
 80022c6:	f000 8090 	beq.w	80023ea <os_task_create+0x136>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	f000 808d 	beq.w	80023ea <os_task_create+0x136>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f2c0 808a 	blt.w	80023ea <os_task_create+0x136>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 80022d6:	f5b9 7fc0 	cmp.w	r9, #384	; 0x180
 80022da:	f0c0 8086 	bcc.w	80023ea <os_task_create+0x136>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 80022de:	f7ff f9c9 	bl	8001674 <os_init_get>
 80022e2:	2800      	cmp	r0, #0
 80022e4:	f000 8083 	beq.w	80023ee <os_task_create+0x13a>
	if(name != NULL){
 80022e8:	f1bb 0f00 	cmp.w	fp, #0
 80022ec:	d00b      	beq.n	8002306 <os_task_create+0x52>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_TASK, name);
 80022ee:	465a      	mov	r2, fp
 80022f0:	2101      	movs	r1, #1
 80022f2:	4840      	ldr	r0, [pc, #256]	; (80023f4 <os_task_create+0x140>)
 80022f4:	f7ff faf2 	bl	80018dc <os_handle_list_searchByName>
		if(obj != NULL){
 80022f8:	b128      	cbz	r0, 8002306 <os_task_create+0x52>
			*h = obj->element;
 80022fa:	6883      	ldr	r3, [r0, #8]
 80022fc:	603b      	str	r3, [r7, #0]
			return OS_ERR_OK;
 80022fe:	2500      	movs	r5, #0
}
 8002300:	4628      	mov	r0, r5
 8002302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 8002306:	2048      	movs	r0, #72	; 0x48
 8002308:	f7ff fa1c 	bl	8001744 <os_heap_alloc>
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 800230c:	4604      	mov	r4, r0
 800230e:	b908      	cbnz	r0, 8002314 <os_task_create+0x60>
 8002310:	2503      	movs	r5, #3
 8002312:	e7f5      	b.n	8002300 <os_task_create+0x4c>
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 8002314:	4648      	mov	r0, r9
 8002316:	f7ff fa15 	bl	8001744 <os_heap_alloc>
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 800231a:	4606      	mov	r6, r0
 800231c:	2800      	cmp	r0, #0
 800231e:	d0f7      	beq.n	8002310 <os_task_create+0x5c>
	t->obj.type			= OS_OBJ_TASK;
 8002320:	2301      	movs	r3, #1
	t->obj.objUpdate	= 0;
 8002322:	2500      	movs	r5, #0
	t->obj.type			= OS_OBJ_TASK;
 8002324:	7023      	strb	r3, [r4, #0]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <os_task_create+0x144>)
	t->obj.objUpdate	= 0;
 8002328:	7225      	strb	r5, [r4, #8]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 800232a:	60e3      	str	r3, [r4, #12]
	t->obj.blockList	= os_list_init();
 800232c:	f7ff fab2 	bl	8001894 <os_list_init>
	t->stackBase		= (stk + stack_size);
 8002330:	444e      	add	r6, r9
	t->obj.obj_take		= &os_task_objTake;
 8002332:	4b32      	ldr	r3, [pc, #200]	; (80023fc <os_task_create+0x148>)
 8002334:	6123      	str	r3, [r4, #16]
	t->stackSize 		= stack_size;
 8002336:	e9c4 9609 	strd	r9, r6, [r4, #36]	; 0x24
	t->state			= OS_TASK_READY;
 800233a:	2302      	movs	r3, #2
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 800233c:	f026 0607 	bic.w	r6, r6, #7
	t->state			= OS_TASK_READY;
 8002340:	7623      	strb	r3, [r4, #24]
	t->wakeCoutdown	 	= 0;
 8002342:	61e5      	str	r5, [r4, #28]
	t->sizeObjs 		= 0;
 8002344:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
	t->retVal			= NULL;
 8002348:	6425      	str	r5, [r4, #64]	; 0x40
	t->obj.blockList	= os_list_init();
 800234a:	6160      	str	r0, [r4, #20]
	t->obj.name			= (char*) name;
 800234c:	f8c4 b004 	str.w	fp, [r4, #4]
	t->basePriority		= priority;
 8002350:	f884 a019 	strb.w	sl, [r4, #25]
	t->priority		    = priority;
 8002354:	f884 a044 	strb.w	sl, [r4, #68]	; 0x44
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 8002358:	6226      	str	r6, [r4, #32]
	t->ownedMutex		= os_list_init();
 800235a:	f7ff fa9b 	bl	8001894 <os_list_init>
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 800235e:	6a23      	ldr	r3, [r4, #32]
	t->ownedMutex		= os_list_init();
 8002360:	63e0      	str	r0, [r4, #60]	; 0x3c
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 8002362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	*--t->pStack = (uint32_t) fn;				//Return
 8002366:	e943 8202 	strd	r8, r2, [r3, #-8]
	*--t->pStack = (uint32_t) &os_task_return;  //LR
 800236a:	4a25      	ldr	r2, [pc, #148]	; (8002400 <os_task_create+0x14c>)
	*--t->pStack = (uint32_t) 0;			 	//R1
 800236c:	f843 5c1c 	str.w	r5, [r3, #-28]
	*--t->pStack = (uint32_t) 0;				//R12
 8002370:	e943 5204 	strd	r5, r2, [r3, #-16]
	*--t->pStack = (uint32_t) arg;			 	//R0 (argument)
 8002374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002376:	f843 2c20 	str.w	r2, [r3, #-32]
	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 800237a:	f06f 0202 	mvn.w	r2, #2
	*--t->pStack = (uint32_t) 0;			 	//R11
 800237e:	e943 520a 	strd	r5, r2, [r3, #-40]	; 0x28
	*--t->pStack = (uint32_t) 0;				//R4
 8002382:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
	*--t->pStack = (uint32_t) 0;			 	//R2
 8002386:	e943 5506 	strd	r5, r5, [r3, #-24]
	*--t->pStack = (uint32_t) 0; 			 	//R9
 800238a:	e943 550c 	strd	r5, r5, [r3, #-48]	; 0x30
	*--t->pStack = (uint32_t) 0;				//R7
 800238e:	e943 550e 	strd	r5, r5, [r3, #-56]	; 0x38
	*--t->pStack = (uint32_t) 0;				//R5
 8002392:	e943 5510 	strd	r5, r5, [r3, #-64]	; 0x40
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8002396:	4621      	mov	r1, r4
	*--t->pStack = (uint32_t) 0;				//R4
 8002398:	6222      	str	r2, [r4, #32]
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 800239a:	481a      	ldr	r0, [pc, #104]	; (8002404 <os_task_create+0x150>)
	*--t->pStack = (uint32_t) 0;				//R4
 800239c:	f843 5c44 	str.w	r5, [r3, #-68]
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 80023a0:	462a      	mov	r2, r5
 80023a2:	f7ff fac1 	bl	8001928 <os_list_add>
	if(err != OS_ERR_OK) return err;
 80023a6:	4605      	mov	r5, r0
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d1a9      	bne.n	8002300 <os_task_create+0x4c>
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 80023ac:	4602      	mov	r2, r0
 80023ae:	4621      	mov	r1, r4
 80023b0:	4810      	ldr	r0, [pc, #64]	; (80023f4 <os_task_create+0x140>)
 80023b2:	f7ff fab9 	bl	8001928 <os_list_add>
	if(ret != OS_ERR_OK) return ret;
 80023b6:	4605      	mov	r5, r0
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d1a1      	bne.n	8002300 <os_task_create+0x4c>
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff ff41 	bl	8002244 <os_task_getPrio>
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <os_task_create+0x154>)
 80023c4:	681b      	ldr	r3, [r3, #0]
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 80023c6:	4602      	mov	r2, r0
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80023c8:	b163      	cbz	r3, 80023e4 <os_task_create+0x130>
 80023ca:	6898      	ldr	r0, [r3, #8]
 80023cc:	f7ff ff3a 	bl	8002244 <os_task_getPrio>
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 80023d0:	4290      	cmp	r0, r2
 80023d2:	da05      	bge.n	80023e0 <os_task_create+0x12c>
 80023d4:	f7ff fe22 	bl	800201c <os_scheduler_state_get>
 80023d8:	2801      	cmp	r0, #1
 80023da:	d101      	bne.n	80023e0 <os_task_create+0x12c>
 80023dc:	f7ff fe90 	bl	8002100 <os_task_yeild>
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 80023e0:	603c      	str	r4, [r7, #0]
	return err;
 80023e2:	e78d      	b.n	8002300 <os_task_create+0x4c>
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	e7f2      	b.n	80023d0 <os_task_create+0x11c>
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 80023ea:	2501      	movs	r5, #1
 80023ec:	e788      	b.n	8002300 <os_task_create+0x4c>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 80023ee:	2504      	movs	r5, #4
 80023f0:	e786      	b.n	8002300 <os_task_create+0x4c>
 80023f2:	bf00      	nop
 80023f4:	20014d24 	.word	0x20014d24
 80023f8:	08002441 	.word	0x08002441
 80023fc:	08002029 	.word	0x08002029
 8002400:	08002115 	.word	0x08002115
 8002404:	20014d44 	.word	0x20014d44
 8002408:	200144fc 	.word	0x200144fc

0800240c <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 800240c:	b510      	push	{r4, lr}
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 800240e:	4604      	mov	r4, r0
 8002410:	b908      	cbnz	r0, 8002416 <os_task_getState+0xa>
 8002412:	2000      	movs	r0, #0
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;

	return state;
}
 8002414:	bd10      	pop	{r4, pc}
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 8002416:	7803      	ldrb	r3, [r0, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d1fa      	bne.n	8002412 <os_task_getState+0x6>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 800241c:	4601      	mov	r1, r0
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <os_task_getState+0x30>)
 8002420:	f7ff fa45 	bl	80018ae <os_list_search>
 8002424:	2800      	cmp	r0, #0
 8002426:	d0f4      	beq.n	8002412 <os_task_getState+0x6>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 8002428:	7e20      	ldrb	r0, [r4, #24]
 800242a:	2804      	cmp	r0, #4
 800242c:	d0f1      	beq.n	8002412 <os_task_getState+0x6>
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 800242e:	2802      	cmp	r0, #2
 8002430:	d1f0      	bne.n	8002414 <os_task_getState+0x8>
 8002432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf18      	it	ne
 8002438:	2003      	movne	r0, #3
 800243a:	e7eb      	b.n	8002414 <os_task_getState+0x8>
 800243c:	20014d44 	.word	0x20014d44

08002440 <os_task_getFreeCount>:
static uint32_t os_task_getFreeCount(os_handle_t h){
 8002440:	b508      	push	{r3, lr}
	if(h == NULL) return 0;
 8002442:	b160      	cbz	r0, 800245e <os_task_getFreeCount+0x1e>
	if(h->type != OS_OBJ_TASK) return 0;
 8002444:	7803      	ldrb	r3, [r0, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d109      	bne.n	800245e <os_task_getFreeCount+0x1e>
	os_task_state_e state = os_task_getState(h);
 800244a:	f7ff ffdf 	bl	800240c <os_task_getState>
	return task_ended ? OS_OBJ_COUNT_INF : 0;
 800244e:	2804      	cmp	r0, #4
 8002450:	bf18      	it	ne
 8002452:	2801      	cmpne	r0, #1
 8002454:	bf94      	ite	ls
 8002456:	2001      	movls	r0, #1
 8002458:	2000      	movhi	r0, #0
 800245a:	4240      	negs	r0, r0
}
 800245c:	bd08      	pop	{r3, pc}
	if(h == NULL) return 0;
 800245e:	2000      	movs	r0, #0
 8002460:	e7fc      	b.n	800245c <os_task_getFreeCount+0x1c>
	...

08002464 <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 8002464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002468:	4607      	mov	r7, r0

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800246a:	f3ef 8310 	mrs	r3, PRIMASK
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	b672      	cpsid	i
 8002472:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 8002476:	4a21      	ldr	r2, [pc, #132]	; (80024fc <os_tick+0x98>)

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
	os_list_cell_t* it = os_head.head.next;
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8002478:	4d21      	ldr	r5, [pc, #132]	; (8002500 <os_tick+0x9c>)
	os_ticks_ms += ms_inc;
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	4403      	add	r3, r0
 800247e:	6013      	str	r3, [r2, #0]
	os_list_cell_t* it = os_head.head.next;
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <os_tick+0xa0>)
 8002482:	681c      	ldr	r4, [r3, #0]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	b1bb      	cbz	r3, 80024b8 <os_tick+0x54>
 8002488:	6898      	ldr	r0, [r3, #8]
 800248a:	f7ff fedb 	bl	8002244 <os_task_getPrio>
 800248e:	4680      	mov	r8, r0
	uint8_t pend_req = 0;
 8002490:	2600      	movs	r6, #0
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 8002492:	f04f 0902 	mov.w	r9, #2
	while(it != NULL){
 8002496:	b994      	cbnz	r4, 80024be <os_tick+0x5a>
		it = it->next;
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8002498:	2e01      	cmp	r6, #1
 800249a:	d105      	bne.n	80024a8 <os_tick+0x44>
 800249c:	f7ff fdbe 	bl	800201c <os_scheduler_state_get>
 80024a0:	2801      	cmp	r0, #1
 80024a2:	d101      	bne.n	80024a8 <os_tick+0x44>
 80024a4:	f7ff fe2c 	bl	8002100 <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 80024a8:	9b01      	ldr	r3, [sp, #4]
 80024aa:	f383 8810 	msr	PRIMASK, r3
 80024ae:	f3bf 8f6f 	isb	sy
	return;
}
 80024b2:	b003      	add	sp, #12
 80024b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 80024b8:	f04f 38ff 	mov.w	r8, #4294967295
 80024bc:	e7e8      	b.n	8002490 <os_tick+0x2c>
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 80024be:	68a0      	ldr	r0, [r4, #8]
 80024c0:	69c3      	ldr	r3, [r0, #28]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	3203      	adds	r2, #3
 80024c6:	d804      	bhi.n	80024d2 <os_tick+0x6e>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 80024c8:	42bb      	cmp	r3, r7
 80024ca:	bf2c      	ite	cs
 80024cc:	1bdb      	subcs	r3, r3, r7
 80024ce:	2300      	movcc	r3, #0
 80024d0:	61c3      	str	r3, [r0, #28]
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 80024d2:	69c3      	ldr	r3, [r0, #28]
 80024d4:	b923      	cbnz	r3, 80024e0 <os_tick+0x7c>
 80024d6:	7e03      	ldrb	r3, [r0, #24]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	bf08      	it	eq
 80024dc:	f880 9018 	strbeq.w	r9, [r0, #24]
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 80024e0:	7e03      	ldrb	r3, [r0, #24]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d107      	bne.n	80024f6 <os_tick+0x92>
			int8_t task_prio = os_task_getPrio(it->element);
 80024e6:	f7ff fead 	bl	8002244 <os_task_getPrio>
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 80024ea:	4580      	cmp	r8, r0
 80024ec:	dc03      	bgt.n	80024f6 <os_tick+0x92>
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	bf18      	it	ne
 80024f4:	2601      	movne	r6, #1
		it = it->next;
 80024f6:	6824      	ldr	r4, [r4, #0]
 80024f8:	e7cd      	b.n	8002496 <os_tick+0x32>
 80024fa:	bf00      	nop
 80024fc:	20014500 	.word	0x20014500
 8002500:	200144fc 	.word	0x200144fc
 8002504:	20014d44 	.word	0x20014d44

08002508 <os_flash_write>:
 * @param size_t len 		: [in] Size of the data buffer
 *
 * @return int32_t : <0 if error. Otherwise the number of bytes written
 *
 **********************************************************************/
int32_t os_flash_write(uint32_t addr, uint8_t buffer[], size_t len){
 8002508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800250c:	4680      	mov	r8, r0
 800250e:	468a      	mov	sl, r1

	/* Check arguments
	 ------------------------------------------------------*/
	if(len == 0) return -2;
 8002510:	4691      	mov	r9, r2
 8002512:	b1ca      	cbz	r2, 8002548 <os_flash_write+0x40>
	if(buffer == NULL) return -2;
 8002514:	b1c1      	cbz	r1, 8002548 <os_flash_write+0x40>
	if(addr < FLASH_BASE_ADDR) return -2;
 8002516:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800251a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800251e:	d213      	bcs.n	8002548 <os_flash_write+0x40>
	if(addr >= FLASH_MAX_ADDR) return -2;

	/* Wait for last operation
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8002520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002524:	f004 fa6c 	bl	8006a00 <FLASH_WaitForLastOperation>
	ASSERT(ret == HAL_OK);
 8002528:	b188      	cbz	r0, 800254e <os_flash_write+0x46>
 800252a:	2227      	movs	r2, #39	; 0x27
		return -1;

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
	ASSERT(ret == HAL_OK);
 800252c:	493c      	ldr	r1, [pc, #240]	; (8002620 <os_flash_write+0x118>)
 800252e:	483d      	ldr	r0, [pc, #244]	; (8002624 <os_flash_write+0x11c>)
 8002530:	f005 fd7e 	bl	8008030 <iprintf>
	if(ret != HAL_OK)
		return -1;
 8002534:	f04f 35ff 	mov.w	r5, #4294967295
	/* Lock flash again and return error or the amount of bytes
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Lock();
	ASSERT(ret == HAL_OK);
	return err == 1 ? -1 : pos;
}
 8002538:	4628      	mov	r0, r5
 800253a:	b003      	add	sp, #12
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(ret == HAL_OK);
 8002540:	222e      	movs	r2, #46	; 0x2e
 8002542:	e7f3      	b.n	800252c <os_flash_write+0x24>
	bool err = 0;
 8002544:	46a1      	mov	r9, r4
 8002546:	e04a      	b.n	80025de <os_flash_write+0xd6>
	if(len == 0) return -2;
 8002548:	f06f 0501 	mvn.w	r5, #1
 800254c:	e7f4      	b.n	8002538 <os_flash_write+0x30>
	ret = HAL_FLASH_Unlock();
 800254e:	f004 fa3b 	bl	80069c8 <HAL_FLASH_Unlock>
	ASSERT(ret == HAL_OK);
 8002552:	2800      	cmp	r0, #0
 8002554:	d1f4      	bne.n	8002540 <os_flash_write+0x38>
	int32_t pos = 0;
 8002556:	4605      	mov	r5, r0
		uint64_t data = 0;
 8002558:	2600      	movs	r6, #0
 800255a:	2700      	movs	r7, #0
		writePermitted = ( (addr + 1) <= FLASH_MAX_ADDR ) 				   ? 1 : writePermitted;
 800255c:	f108 0401 	add.w	r4, r8, #1
 8002560:	f1b4 6f01 	cmp.w	r4, #135266304	; 0x8100000
 8002564:	bf8c      	ite	hi
 8002566:	2400      	movhi	r4, #0
 8002568:	2401      	movls	r4, #1
		writePermitted = ( (addr % 2) == 0 && addr + 2 <= FLASH_MAX_ADDR ) ? 2 : writePermitted;
 800256a:	f018 0f01 	tst.w	r8, #1
 800256e:	d105      	bne.n	800257c <os_flash_write+0x74>
 8002570:	f108 0302 	add.w	r3, r8, #2
 8002574:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002578:	bf98      	it	ls
 800257a:	2402      	movls	r4, #2
		writePermitted = ( (addr % 4) == 0 && addr + 4 <= FLASH_MAX_ADDR ) ? 4 : writePermitted;
 800257c:	f018 0f03 	tst.w	r8, #3
 8002580:	d105      	bne.n	800258e <os_flash_write+0x86>
 8002582:	f108 0304 	add.w	r3, r8, #4
 8002586:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800258a:	bf98      	it	ls
 800258c:	2404      	movls	r4, #4
		uint32_t lenToWrite = writePermitted < len ? writePermitted : len;
 800258e:	454c      	cmp	r4, r9
 8002590:	bf28      	it	cs
 8002592:	464c      	movcs	r4, r9
		lenToWrite = lenToWrite == 3 ? 2 : lenToWrite;
 8002594:	2c03      	cmp	r4, #3
 8002596:	d030      	beq.n	80025fa <os_flash_write+0xf2>
		if(lenToWrite == 0 || len == 0) break;
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0d3      	beq.n	8002544 <os_flash_write+0x3c>
 800259c:	f1b9 0f00 	cmp.w	r9, #0
 80025a0:	d01d      	beq.n	80025de <os_flash_write+0xd6>
			 	 writeFlag = lenToWrite == 2 ? FLASH_TYPEPROGRAM_HALFWORD : writeFlag;
 80025a2:	2c02      	cmp	r4, #2
 80025a4:	d02d      	beq.n	8002602 <os_flash_write+0xfa>
 80025a6:	2c04      	cmp	r4, #4
 80025a8:	bf0c      	ite	eq
 80025aa:	f04f 0b02 	moveq.w	fp, #2
 80025ae:	f04f 0b00 	movne.w	fp, #0
		uint64_t data = 0;
 80025b2:	a802      	add	r0, sp, #8
		memcpy(&data, &buffer[pos], lenToWrite);
 80025b4:	4622      	mov	r2, r4
 80025b6:	eb0a 0105 	add.w	r1, sl, r5
		uint64_t data = 0;
 80025ba:	e960 6702 	strd	r6, r7, [r0, #-8]!
		memcpy(&data, &buffer[pos], lenToWrite);
 80025be:	f005 f9b4 	bl	800792a <memcpy>
		ret = HAL_FLASH_Program(writeFlag, addr, data);
 80025c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80025c6:	4641      	mov	r1, r8
 80025c8:	4658      	mov	r0, fp
 80025ca:	f004 fa43 	bl	8006a54 <HAL_FLASH_Program>
		ASSERT(ret == HAL_OK);
 80025ce:	b1d8      	cbz	r0, 8002608 <os_flash_write+0x100>
 80025d0:	2256      	movs	r2, #86	; 0x56
		ASSERT(ret == HAL_OK);
 80025d2:	4913      	ldr	r1, [pc, #76]	; (8002620 <os_flash_write+0x118>)
 80025d4:	4813      	ldr	r0, [pc, #76]	; (8002624 <os_flash_write+0x11c>)
 80025d6:	f005 fd2b 	bl	8008030 <iprintf>
			err = 1;
 80025da:	f04f 0901 	mov.w	r9, #1
	ret = HAL_FLASH_Lock();
 80025de:	f004 fa05 	bl	80069ec <HAL_FLASH_Lock>
	ASSERT(ret == HAL_OK);
 80025e2:	b120      	cbz	r0, 80025ee <os_flash_write+0xe6>
 80025e4:	226f      	movs	r2, #111	; 0x6f
 80025e6:	490e      	ldr	r1, [pc, #56]	; (8002620 <os_flash_write+0x118>)
 80025e8:	480e      	ldr	r0, [pc, #56]	; (8002624 <os_flash_write+0x11c>)
 80025ea:	f005 fd21 	bl	8008030 <iprintf>
	return err == 1 ? -1 : pos;
 80025ee:	f1b9 0f00 	cmp.w	r9, #0
 80025f2:	bf18      	it	ne
 80025f4:	f04f 35ff 	movne.w	r5, #4294967295
 80025f8:	e79e      	b.n	8002538 <os_flash_write+0x30>
		if(lenToWrite == 0 || len == 0) break;
 80025fa:	f1b9 0f00 	cmp.w	r9, #0
 80025fe:	d0ee      	beq.n	80025de <os_flash_write+0xd6>
 8002600:	2402      	movs	r4, #2
 8002602:	f04f 0b01 	mov.w	fp, #1
 8002606:	e7d4      	b.n	80025b2 <os_flash_write+0xaa>
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8002608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		pos += (int32_t)lenToWrite; //Counts the number of bytes actually written
 800260c:	4425      	add	r5, r4
		addr += lenToWrite; //Moves to the next address
 800260e:	44a0      	add	r8, r4
		len -= lenToWrite; //reduces length
 8002610:	eba9 0904 	sub.w	r9, r9, r4
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8002614:	f004 f9f4 	bl	8006a00 <FLASH_WaitForLastOperation>
		ASSERT(ret == HAL_OK);
 8002618:	2800      	cmp	r0, #0
 800261a:	d09f      	beq.n	800255c <os_flash_write+0x54>
 800261c:	2265      	movs	r2, #101	; 0x65
 800261e:	e7d8      	b.n	80025d2 <os_flash_write+0xca>
 8002620:	08009058 	.word	0x08009058
 8002624:	08008c28 	.word	0x08008c28

08002628 <os_flash_read>:
 * @param size_t len 		: [ in] Size of the data buffer
 *
 * @return int32_t : <0 if error. Otherwise the number of read bytes
 *
 **********************************************************************/
int32_t os_flash_read(uint32_t addr, uint8_t buffer[], size_t len){
 8002628:	b510      	push	{r4, lr}
 800262a:	4603      	mov	r3, r0

	/* Argument check
	 ------------------------------------------------------*/
	if(len == 0) return -2;
 800262c:	4614      	mov	r4, r2
int32_t os_flash_read(uint32_t addr, uint8_t buffer[], size_t len){
 800262e:	4608      	mov	r0, r1
	if(len == 0) return -2;
 8002630:	b18a      	cbz	r2, 8002656 <os_flash_read+0x2e>
	if(buffer == NULL) return -2;
 8002632:	b181      	cbz	r1, 8002656 <os_flash_read+0x2e>
	if(addr < FLASH_BASE_ADDR) return -2;
 8002634:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8002638:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800263c:	d20b      	bcs.n	8002656 <os_flash_read+0x2e>
	if(addr >= FLASH_MAX_ADDR) return -2;

	/* Check border and calculates the amout of data to read
	 ------------------------------------------------------*/
	size_t readBytes = len;
	if(addr + len > FLASH_MAX_ADDR){
 800263e:	18e2      	adds	r2, r4, r3
 8002640:	f1b2 6f01 	cmp.w	r2, #135266304	; 0x8100000
 8002644:	bf88      	it	hi
 8002646:	f1c3 6401 	rsbhi	r4, r3, #135266304	; 0x8100000
		readBytes -= addr + len - FLASH_MAX_ADDR;
	}

	/* Copy data into buffer
	 ------------------------------------------------------*/
	memcpy(buffer, (void*)addr, readBytes);
 800264a:	4622      	mov	r2, r4
 800264c:	4619      	mov	r1, r3
 800264e:	f005 f96c 	bl	800792a <memcpy>

	/* Return the amount of bytes
	 ------------------------------------------------------*/
	return (int32_t)readBytes;
 8002652:	4620      	mov	r0, r4
}
 8002654:	bd10      	pop	{r4, pc}
	if(len == 0) return -2;
 8002656:	f06f 0001 	mvn.w	r0, #1
 800265a:	e7fb      	b.n	8002654 <os_flash_read+0x2c>

0800265c <os_flash_erase>:
 **********************************************************************/
int32_t os_flash_erase(uint32_t addrBeg, uint32_t addrEnd){

	/* Check arguments
	 ------------------------------------------------------*/
	if(addrBeg < FLASH_BASE_ADDR) return -2;
 800265c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8002660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
int32_t os_flash_erase(uint32_t addrBeg, uint32_t addrEnd){
 8002664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002668:	4604      	mov	r4, r0
 800266a:	460e      	mov	r6, r1
	if(addrBeg < FLASH_BASE_ADDR) return -2;
 800266c:	d23a      	bcs.n	80026e4 <os_flash_erase+0x88>
	if(addrBeg >= FLASH_MAX_ADDR) return -2;
	if(addrEnd < FLASH_BASE_ADDR) return -2;
 800266e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002672:	d337      	bcc.n	80026e4 <os_flash_erase+0x88>
	if(addrBeg > addrEnd) return -2;
 8002674:	4288      	cmp	r0, r1
 8002676:	d835      	bhi.n	80026e4 <os_flash_erase+0x88>

	/* Wait for operation to end
	 ------------------------------------------------------*/
	HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(1000);
 8002678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800267c:	f004 f9c0 	bl	8006a00 <FLASH_WaitForLastOperation>
	ASSERT(ret == HAL_OK);
 8002680:	b398      	cbz	r0, 80026ea <os_flash_erase+0x8e>
 8002682:	22b2      	movs	r2, #178	; 0xb2
		return -1;

	/* Unlock flash
	 ------------------------------------------------------*/
	ret = HAL_FLASH_Unlock();
	ASSERT(ret == HAL_OK);
 8002684:	4948      	ldr	r1, [pc, #288]	; (80027a8 <os_flash_erase+0x14c>)
 8002686:	4849      	ldr	r0, [pc, #292]	; (80027ac <os_flash_erase+0x150>)
 8002688:	f005 fcd2 	bl	8008030 <iprintf>
	if(ret != HAL_OK)
		return -1;
 800268c:	f04f 35ff 	mov.w	r5, #4294967295
	if(ret != HAL_OK){
		error = 1;
	}

	return error == 1 ? -1 : sectNum;
}
 8002690:	4628      	mov	r0, r5
 8002692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(ret == HAL_OK);
 8002696:	22b9      	movs	r2, #185	; 0xb9
 8002698:	e7f4      	b.n	8002684 <os_flash_erase+0x28>
			Sector = 0;
 800269a:	2000      	movs	r0, #0
			addrCur += 16*1024;
 800269c:	4644      	mov	r4, r8
 800269e:	e068      	b.n	8002772 <os_flash_erase+0x116>
			Sector = 1;
 80026a0:	2001      	movs	r0, #1
			addrCur += 16*1024;
 80026a2:	463c      	mov	r4, r7
 80026a4:	e065      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  2;
 80026a6:	2002      	movs	r0, #2
			addrCur += 16*1024;
 80026a8:	4c41      	ldr	r4, [pc, #260]	; (80027b0 <os_flash_erase+0x154>)
 80026aa:	e062      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  3;
 80026ac:	2003      	movs	r0, #3
			addrCur += 16*1024;
 80026ae:	4c41      	ldr	r4, [pc, #260]	; (80027b4 <os_flash_erase+0x158>)
 80026b0:	e05f      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  4;
 80026b2:	2004      	movs	r0, #4
			addrCur += 64*1024;
 80026b4:	4c40      	ldr	r4, [pc, #256]	; (80027b8 <os_flash_erase+0x15c>)
 80026b6:	e05c      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  5;
 80026b8:	2005      	movs	r0, #5
			addrCur += 128*1024;
 80026ba:	4c40      	ldr	r4, [pc, #256]	; (80027bc <os_flash_erase+0x160>)
 80026bc:	e059      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  6;
 80026be:	2006      	movs	r0, #6
			addrCur += 128*1024;
 80026c0:	4c3f      	ldr	r4, [pc, #252]	; (80027c0 <os_flash_erase+0x164>)
 80026c2:	e056      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  7;
 80026c4:	2007      	movs	r0, #7
			addrCur += 128*1024;
 80026c6:	4c3f      	ldr	r4, [pc, #252]	; (80027c4 <os_flash_erase+0x168>)
 80026c8:	e053      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  8;
 80026ca:	2008      	movs	r0, #8
			addrCur += 128*1024;
 80026cc:	4c3e      	ldr	r4, [pc, #248]	; (80027c8 <os_flash_erase+0x16c>)
 80026ce:	e050      	b.n	8002772 <os_flash_erase+0x116>
			Sector =  9;
 80026d0:	2009      	movs	r0, #9
			addrCur += 128*1024;
 80026d2:	4c3e      	ldr	r4, [pc, #248]	; (80027cc <os_flash_erase+0x170>)
 80026d4:	e04d      	b.n	8002772 <os_flash_erase+0x116>
	while(addrCur <= addrEnd && addrCur < FLASH_MAX_ADDR){
 80026d6:	42b4      	cmp	r4, r6
 80026d8:	d802      	bhi.n	80026e0 <os_flash_erase+0x84>
 80026da:	f1b4 6f01 	cmp.w	r4, #135266304	; 0x8100000
 80026de:	d10c      	bne.n	80026fa <os_flash_erase+0x9e>
	bool error = 0;
 80026e0:	4604      	mov	r4, r0
 80026e2:	e056      	b.n	8002792 <os_flash_erase+0x136>
	if(addrBeg < FLASH_BASE_ADDR) return -2;
 80026e4:	f06f 0501 	mvn.w	r5, #1
 80026e8:	e7d2      	b.n	8002690 <os_flash_erase+0x34>
	ret = HAL_FLASH_Unlock();
 80026ea:	f004 f96d 	bl	80069c8 <HAL_FLASH_Unlock>
	ASSERT(ret == HAL_OK);
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d1d1      	bne.n	8002696 <os_flash_erase+0x3a>
			addrCur += 16*1024;
 80026f2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80027dc <os_flash_erase+0x180>
			addrCur += 16*1024;
 80026f6:	4f36      	ldr	r7, [pc, #216]	; (80027d0 <os_flash_erase+0x174>)
	int32_t sectNum = 0;
 80026f8:	4605      	mov	r5, r0
		if(0x08000000 <= addrCur && addrCur <= 0x08003FFF){
 80026fa:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80026fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
		sectNum++;
 8002702:	f105 0501 	add.w	r5, r5, #1
		if(0x08000000 <= addrCur && addrCur <= 0x08003FFF){
 8002706:	d3c8      	bcc.n	800269a <os_flash_erase+0x3e>
		else if(0x08004000 <= addrCur && addrCur <= 0x08007FFF) {
 8002708:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
 800270c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002710:	d3c6      	bcc.n	80026a0 <os_flash_erase+0x44>
		else if(0x08008000 <= addrCur && addrCur <= 0x0800BFFF) {
 8002712:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8002716:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800271a:	d3c4      	bcc.n	80026a6 <os_flash_erase+0x4a>
		else if(0x0800C000 <= addrCur && addrCur <= 0x0800FFFF) {
 800271c:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8002720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002724:	d3c2      	bcc.n	80026ac <os_flash_erase+0x50>
		else if(0x08010000 <= addrCur && addrCur <= 0x0801FFFF) {
 8002726:	f104 4477 	add.w	r4, r4, #4143972352	; 0xf7000000
 800272a:	f504 037f 	add.w	r3, r4, #16711680	; 0xff0000
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002732:	d3be      	bcc.n	80026b2 <os_flash_erase+0x56>
		else if(0x08020000 <= addrCur && addrCur <= 0x0803FFFF) {
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <os_flash_erase+0x178>)
 8002736:	f504 027e 	add.w	r2, r4, #16646144	; 0xfe0000
 800273a:	429a      	cmp	r2, r3
 800273c:	d9bc      	bls.n	80026b8 <os_flash_erase+0x5c>
		else if(0x08040000 <= addrCur && addrCur <= 0x0805FFFF) {
 800273e:	f504 027c 	add.w	r2, r4, #16515072	; 0xfc0000
 8002742:	429a      	cmp	r2, r3
 8002744:	d9bb      	bls.n	80026be <os_flash_erase+0x62>
		else if(0x08060000 <= addrCur && addrCur <= 0x0807FFFF) {
 8002746:	f504 027a 	add.w	r2, r4, #16384000	; 0xfa0000
 800274a:	429a      	cmp	r2, r3
 800274c:	d9ba      	bls.n	80026c4 <os_flash_erase+0x68>
		else if(0x08080000 <= addrCur && addrCur <= 0x0809FFFF) {
 800274e:	f504 0278 	add.w	r2, r4, #16252928	; 0xf80000
 8002752:	429a      	cmp	r2, r3
 8002754:	d9b9      	bls.n	80026ca <os_flash_erase+0x6e>
		else if(0x080A0000 <= addrCur && addrCur <= 0x080BFFFF) {
 8002756:	f504 0276 	add.w	r2, r4, #16121856	; 0xf60000
 800275a:	429a      	cmp	r2, r3
 800275c:	d9b8      	bls.n	80026d0 <os_flash_erase+0x74>
		else if(0x080C0000 <= addrCur && addrCur <= 0x080DFFFF) {
 800275e:	f504 0474 	add.w	r4, r4, #15990784	; 0xf40000
			Sector =  11;
 8002762:	429c      	cmp	r4, r3
 8002764:	bf98      	it	ls
 8002766:	200a      	movls	r0, #10
 8002768:	4c1b      	ldr	r4, [pc, #108]	; (80027d8 <os_flash_erase+0x17c>)
 800276a:	bf84      	itt	hi
 800276c:	200b      	movhi	r0, #11
 800276e:	f04f 6401 	movhi.w	r4, #135266304	; 0x8100000
		FLASH_Erase_Sector(Sector, FLASH_VOLTAGE_RANGE_3);
 8002772:	2102      	movs	r1, #2
 8002774:	f004 f9b4 	bl	8006ae0 <FLASH_Erase_Sector>
		HAL_StatusTypeDef ret = FLASH_WaitForLastOperation(10000);
 8002778:	f242 7010 	movw	r0, #10000	; 0x2710
 800277c:	f004 f940 	bl	8006a00 <FLASH_WaitForLastOperation>
		ASSERT(ret == HAL_OK);
 8002780:	2800      	cmp	r0, #0
 8002782:	d0a8      	beq.n	80026d6 <os_flash_erase+0x7a>
 8002784:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <os_flash_erase+0x14c>)
 800278a:	4808      	ldr	r0, [pc, #32]	; (80027ac <os_flash_erase+0x150>)
 800278c:	f005 fc50 	bl	8008030 <iprintf>
			error = 1;
 8002790:	2401      	movs	r4, #1
	ret = HAL_FLASH_Lock();
 8002792:	f004 f92b 	bl	80069ec <HAL_FLASH_Lock>
	ASSERT(ret == HAL_OK);
 8002796:	b110      	cbz	r0, 800279e <os_flash_erase+0x142>
 8002798:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800279c:	e772      	b.n	8002684 <os_flash_erase+0x28>
	return error == 1 ? -1 : sectNum;
 800279e:	2c00      	cmp	r4, #0
 80027a0:	bf18      	it	ne
 80027a2:	f04f 35ff 	movne.w	r5, #4294967295
 80027a6:	e773      	b.n	8002690 <os_flash_erase+0x34>
 80027a8:	08009058 	.word	0x08009058
 80027ac:	08008c28 	.word	0x08008c28
 80027b0:	0800c000 	.word	0x0800c000
 80027b4:	08010000 	.word	0x08010000
 80027b8:	08020000 	.word	0x08020000
 80027bc:	08040000 	.word	0x08040000
 80027c0:	08060000 	.word	0x08060000
 80027c4:	08080000 	.word	0x08080000
 80027c8:	080a0000 	.word	0x080a0000
 80027cc:	080c0000 	.word	0x080c0000
 80027d0:	08008000 	.word	0x08008000
 80027d4:	0001ffff 	.word	0x0001ffff
 80027d8:	080e0000 	.word	0x080e0000
 80027dc:	08004000 	.word	0x08004000

080027e0 <lfs_pair_isnull>:
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	d004      	beq.n	80027f0 <lfs_pair_isnull+0x10>
 80027e6:	6840      	ldr	r0, [r0, #4]
 80027e8:	1c43      	adds	r3, r0, #1
 80027ea:	4258      	negs	r0, r3
 80027ec:	4158      	adcs	r0, r3
 80027ee:	4770      	bx	lr
 80027f0:	2001      	movs	r0, #1
}
 80027f2:	4770      	bx	lr

080027f4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80027f4:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80027f6:	680b      	ldr	r3, [r1, #0]
 80027f8:	6804      	ldr	r4, [r0, #0]
 80027fa:	429c      	cmp	r4, r3
 80027fc:	d009      	beq.n	8002812 <lfs_pair_cmp+0x1e>
 80027fe:	6840      	ldr	r0, [r0, #4]
 8002800:	684a      	ldr	r2, [r1, #4]
 8002802:	4290      	cmp	r0, r2
 8002804:	d005      	beq.n	8002812 <lfs_pair_cmp+0x1e>
 8002806:	4294      	cmp	r4, r2
 8002808:	d003      	beq.n	8002812 <lfs_pair_cmp+0x1e>
 800280a:	1a18      	subs	r0, r3, r0
 800280c:	bf18      	it	ne
 800280e:	2001      	movne	r0, #1
             paira[0] == pairb[1] || paira[1] == pairb[0]);
}
 8002810:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002812:	2000      	movs	r0, #0
 8002814:	e7fc      	b.n	8002810 <lfs_pair_cmp+0x1c>

08002816 <lfs_tag_dsize>:
static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
    return !(tag & 0x80000000);
}

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002816:	f340 0309 	sbfx	r3, r0, #0, #10
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	bf08      	it	eq
 8002820:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
 8002822:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 8002826:	3004      	adds	r0, #4
 8002828:	4770      	bx	lr

0800282a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800282a:	b510      	push	{r4, lr}
 800282c:	1f03      	subs	r3, r0, #4
 800282e:	3904      	subs	r1, #4
 8002830:	3008      	adds	r0, #8
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8002832:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8002836:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
 800283a:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800283c:	ea82 0204 	eor.w	r2, r2, r4
 8002840:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002842:	d1f6      	bne.n	8002832 <lfs_gstate_xor+0x8>
    }
}
 8002844:	bd10      	pop	{r4, pc}

08002846 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
 8002846:	6803      	ldr	r3, [r0, #0]
 8002848:	b933      	cbnz	r3, 8002858 <lfs_gstate_iszero+0x12>
 800284a:	6842      	ldr	r2, [r0, #4]
 800284c:	b922      	cbnz	r2, 8002858 <lfs_gstate_iszero+0x12>
 800284e:	6880      	ldr	r0, [r0, #8]
 8002850:	fab0 f080 	clz	r0, r0
 8002854:	0940      	lsrs	r0, r0, #5
 8002856:	4770      	bx	lr
            return false;
 8002858:	2000      	movs	r0, #0
 800285a:	4770      	bx	lr

0800285c <lfs_gstate_hasmovehere>:
    return lfs_tag_type1(a->tag);
}
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800285c:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
 800285e:	6803      	ldr	r3, [r0, #0]
 8002860:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8002862:	f413 63e0 	ands.w	r3, r3, #1792	; 0x700
 8002866:	d006      	beq.n	8002876 <lfs_gstate_hasmovehere+0x1a>
 8002868:	3004      	adds	r0, #4
 800286a:	f7ff ffc3 	bl	80027f4 <lfs_pair_cmp>
 800286e:	fab0 f080 	clz	r0, r0
 8002872:	0940      	lsrs	r0, r0, #5
}
 8002874:	bd08      	pop	{r3, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8002876:	4618      	mov	r0, r3
 8002878:	e7fc      	b.n	8002874 <lfs_gstate_hasmovehere+0x18>

0800287a <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800287a:	b900      	cbnz	r0, 800287e <lfs_mlist_isopen+0x4>
 800287c:	4770      	bx	lr
        if (*p == (struct lfs_mlist*)node) {
 800287e:	4288      	cmp	r0, r1
 8002880:	d001      	beq.n	8002886 <lfs_mlist_isopen+0xc>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8002882:	6800      	ldr	r0, [r0, #0]
 8002884:	e7f9      	b.n	800287a <lfs_mlist_isopen>
            return true;
 8002886:	2001      	movs	r0, #1
        }
    }

    return false;
}
 8002888:	4770      	bx	lr

0800288a <lfs_alloc_lookahead>:
/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800288a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
 8002894:	fbb1 f3f2 	udiv	r3, r1, r2
 8002898:	fb02 1113 	mls	r1, r2, r3, r1

    if (off < lfs->free.size) {
 800289c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800289e:	428b      	cmp	r3, r1
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80028a0:	b510      	push	{r4, lr}
    if (off < lfs->free.size) {
 80028a2:	d90b      	bls.n	80028bc <lfs_alloc_lookahead+0x32>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80028a4:	094c      	lsrs	r4, r1, #5
 80028a6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80028a8:	2301      	movs	r3, #1
 80028aa:	f001 011f 	and.w	r1, r1, #31
 80028ae:	fa03 f101 	lsl.w	r1, r3, r1
 80028b2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80028b6:	430b      	orrs	r3, r1
 80028b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    }

    return 0;
}
 80028bc:	2000      	movs	r0, #0
 80028be:	bd10      	pop	{r4, pc}

080028c0 <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <lfs_dir_traverse_filter+0x60>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80028c2:	6803      	ldr	r3, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 80028c4:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80028c6:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 80028ca:	4c16      	ldr	r4, [pc, #88]	; (8002924 <lfs_dir_traverse_filter+0x64>)
    if ((mask & tag) == (mask & *filtertag) ||
 80028cc:	ea83 0501 	eor.w	r5, r3, r1
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80028d0:	bf18      	it	ne
 80028d2:	4614      	movne	r4, r2
    if ((mask & tag) == (mask & *filtertag) ||
 80028d4:	4225      	tst	r5, r4
 80028d6:	d00d      	beq.n	80028f4 <lfs_dir_traverse_filter+0x34>
    return ((int32_t)(tag << 22) >> 22) == -1;
 80028d8:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 80028dc:	3401      	adds	r4, #1
 80028de:	d009      	beq.n	80028f4 <lfs_dir_traverse_filter+0x34>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80028e0:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80028e4:	4a10      	ldr	r2, [pc, #64]	; (8002928 <lfs_dir_traverse_filter+0x68>)
 80028e6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80028e8:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
 80028ec:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80028f0:	4294      	cmp	r4, r2
 80028f2:	d103      	bne.n	80028fc <lfs_dir_traverse_filter+0x3c>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80028f4:	2300      	movs	r3, #0
 80028f6:	6003      	str	r3, [r0, #0]
        return true;
 80028f8:	2001      	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
 80028fa:	bd30      	pop	{r4, r5, pc}
    return (tag & 0x70000000) >> 20;
 80028fc:	0d0a      	lsrs	r2, r1, #20
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80028fe:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
 8002902:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002906:	d109      	bne.n	800291c <lfs_dir_traverse_filter+0x5c>
 8002908:	f3c3 2489 	ubfx	r4, r3, #10, #10
 800290c:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8002910:	428c      	cmp	r4, r1
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002912:	bf22      	ittt	cs
 8002914:	b252      	sxtbcs	r2, r2
 8002916:	eb03 2382 	addcs.w	r3, r3, r2, lsl #10
 800291a:	6003      	strcs	r3, [r0, #0]
    return false;
 800291c:	2000      	movs	r0, #0
 800291e:	e7ec      	b.n	80028fa <lfs_dir_traverse_filter+0x3a>
 8002920:	7ffffc00 	.word	0x7ffffc00
 8002924:	700ffc00 	.word	0x700ffc00
 8002928:	000ffc00 	.word	0x000ffc00

0800292c <lfs_dir_commit_size>:
    return 0;
}
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800292c:	4602      	mov	r2, r0
 800292e:	b508      	push	{r3, lr}
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8002930:	4608      	mov	r0, r1
 8002932:	f7ff ff70 	bl	8002816 <lfs_tag_dsize>
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	4418      	add	r0, r3
 800293a:	6010      	str	r0, [r2, #0]
    return 0;
}
 800293c:	2000      	movs	r0, #0
 800293e:	bd08      	pop	{r3, pc}

08002940 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 8002940:	6803      	ldr	r3, [r0, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	6003      	str	r3, [r0, #0]
    return 0;
}
 8002946:	2000      	movs	r0, #0
 8002948:	4770      	bx	lr

0800294a <lfs_deinit>:
    if (!lfs->cfg->read_buffer) {
 800294a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
static int lfs_deinit(lfs_t *lfs) {
 800294e:	b510      	push	{r4, lr}
 8002950:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 8002952:	b913      	cbnz	r3, 800295a <lfs_deinit+0x10>
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
 8002954:	68c0      	ldr	r0, [r0, #12]
 8002956:	f004 ffbf 	bl	80078d8 <free>
    if (!lfs->cfg->prog_buffer) {
 800295a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	b913      	cbnz	r3, 8002966 <lfs_deinit+0x1c>
 8002960:	69e0      	ldr	r0, [r4, #28]
 8002962:	f004 ffb9 	bl	80078d8 <free>
    if (!lfs->cfg->lookahead_buffer) {
 8002966:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	b913      	cbnz	r3, 8002972 <lfs_deinit+0x28>
 800296c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800296e:	f004 ffb3 	bl	80078d8 <free>
}
 8002972:	2000      	movs	r0, #0
 8002974:	bd10      	pop	{r4, pc}

08002976 <lfs_cache_zero.isra.17>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8002976:	b510      	push	{r4, lr}
 8002978:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800297a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800297c:	68e0      	ldr	r0, [r4, #12]
 800297e:	21ff      	movs	r1, #255	; 0xff
 8002980:	f004 ffde 	bl	8007940 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	6023      	str	r3, [r4, #0]
}
 800298a:	bd10      	pop	{r4, pc}

0800298c <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4604      	mov	r4, r0
 8002990:	460d      	mov	r5, r1
    lfs->cfg = cfg;
 8002992:	66a1      	str	r1, [r4, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8002994:	6949      	ldr	r1, [r1, #20]
 8002996:	b931      	cbnz	r1, 80029a6 <lfs_init+0x1a>
 8002998:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <lfs_init+0x1a0>)
 800299a:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <lfs_init+0x1a4>)
 800299c:	f640 7147 	movw	r1, #3911	; 0xf47
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80029a0:	4864      	ldr	r0, [pc, #400]	; (8002b34 <lfs_init+0x1a8>)
 80029a2:	f004 ff25 	bl	80077f0 <__assert_func>
 80029a6:	69aa      	ldr	r2, [r5, #24]
 80029a8:	b922      	cbnz	r2, 80029b4 <lfs_init+0x28>
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <lfs_init+0x1ac>)
 80029ac:	4a60      	ldr	r2, [pc, #384]	; (8002b30 <lfs_init+0x1a4>)
 80029ae:	f640 7148 	movw	r1, #3912	; 0xf48
 80029b2:	e7f5      	b.n	80029a0 <lfs_init+0x14>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80029b4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80029b6:	b920      	cbnz	r0, 80029c2 <lfs_init+0x36>
 80029b8:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <lfs_init+0x1b0>)
 80029ba:	4a5d      	ldr	r2, [pc, #372]	; (8002b30 <lfs_init+0x1a4>)
 80029bc:	f640 7149 	movw	r1, #3913	; 0xf49
 80029c0:	e7ee      	b.n	80029a0 <lfs_init+0x14>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80029c2:	fbb0 f3f1 	udiv	r3, r0, r1
 80029c6:	fb01 0313 	mls	r3, r1, r3, r0
 80029ca:	b123      	cbz	r3, 80029d6 <lfs_init+0x4a>
 80029cc:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <lfs_init+0x1b4>)
 80029ce:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <lfs_init+0x1a4>)
 80029d0:	f640 714d 	movw	r1, #3917	; 0xf4d
 80029d4:	e7e4      	b.n	80029a0 <lfs_init+0x14>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80029d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80029da:	fb02 0313 	mls	r3, r2, r3, r0
 80029de:	b123      	cbz	r3, 80029ea <lfs_init+0x5e>
 80029e0:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <lfs_init+0x1b8>)
 80029e2:	4a53      	ldr	r2, [pc, #332]	; (8002b30 <lfs_init+0x1a4>)
 80029e4:	f640 714e 	movw	r1, #3918	; 0xf4e
 80029e8:	e7da      	b.n	80029a0 <lfs_init+0x14>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80029ea:	69ea      	ldr	r2, [r5, #28]
 80029ec:	fbb2 f3f0 	udiv	r3, r2, r0
 80029f0:	fb00 2313 	mls	r3, r0, r3, r2
 80029f4:	b123      	cbz	r3, 8002a00 <lfs_init+0x74>
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <lfs_init+0x1bc>)
 80029f8:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <lfs_init+0x1a4>)
 80029fa:	f640 714f 	movw	r1, #3919	; 0xf4f
 80029fe:	e7cf      	b.n	80029a0 <lfs_init+0x14>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8002a00:	f1a2 0108 	sub.w	r1, r2, #8
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	fbb3 f3f1 	udiv	r3, r3, r1
    return (uint32_t)(32 - __builtin_clz(a-1));
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	f1c3 0320 	rsb	r3, r3, #32
 8002a16:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8002a1a:	d204      	bcs.n	8002a26 <lfs_init+0x9a>
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <lfs_init+0x1c0>)
 8002a1e:	4a44      	ldr	r2, [pc, #272]	; (8002b30 <lfs_init+0x1a4>)
 8002a20:	f640 7153 	movw	r1, #3923	; 0xf53
 8002a24:	e7bc      	b.n	80029a0 <lfs_init+0x14>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8002a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002a28:	b923      	cbnz	r3, 8002a34 <lfs_init+0xa8>
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <lfs_init+0x1c4>)
 8002a2c:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <lfs_init+0x1a4>)
 8002a2e:	f640 715b 	movw	r1, #3931	; 0xf5b
 8002a32:	e7b5      	b.n	80029a0 <lfs_init+0x14>
    if (lfs->cfg->read_buffer) {
 8002a34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a36:	b1a3      	cbz	r3, 8002a62 <lfs_init+0xd6>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8002a38:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 8002a3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a3c:	b1e3      	cbz	r3, 8002a78 <lfs_init+0xec>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8002a3e:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 8002a40:	4628      	mov	r0, r5
 8002a42:	4621      	mov	r1, r4
 8002a44:	f7ff ff97 	bl	8002976 <lfs_cache_zero.isra.17>
    lfs_cache_zero(lfs, &lfs->pcache);
 8002a48:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002a4a:	f104 0110 	add.w	r1, r4, #16
 8002a4e:	f7ff ff92 	bl	8002976 <lfs_cache_zero.isra.17>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8002a52:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002a54:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002a56:	b9b0      	cbnz	r0, 8002a86 <lfs_init+0xfa>
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <lfs_init+0x1c8>)
 8002a5a:	4a35      	ldr	r2, [pc, #212]	; (8002b30 <lfs_init+0x1a4>)
 8002a5c:	f640 7179 	movw	r1, #3961	; 0xf79
 8002a60:	e79e      	b.n	80029a0 <lfs_init+0x14>
    return malloc(size);
 8002a62:	f004 ff31 	bl	80078c8 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8002a66:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d1e6      	bne.n	8002a3a <lfs_init+0xae>
    lfs_deinit(lfs);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff ff6c 	bl	800294a <lfs_deinit>
    return err;
 8002a72:	f06f 000b 	mvn.w	r0, #11
 8002a76:	e057      	b.n	8002b28 <lfs_init+0x19c>
 8002a78:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002a7a:	f004 ff25 	bl	80078c8 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8002a7e:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1dd      	bne.n	8002a40 <lfs_init+0xb4>
 8002a84:	e7f2      	b.n	8002a6c <lfs_init+0xe0>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8002a86:	0741      	lsls	r1, r0, #29
 8002a88:	d102      	bne.n	8002a90 <lfs_init+0x104>
 8002a8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a8c:	079a      	lsls	r2, r3, #30
 8002a8e:	d004      	beq.n	8002a9a <lfs_init+0x10e>
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <lfs_init+0x1cc>)
 8002a92:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <lfs_init+0x1a4>)
 8002a94:	f640 717b 	movw	r1, #3963	; 0xf7b
 8002a98:	e782      	b.n	80029a0 <lfs_init+0x14>
    if (lfs->cfg->lookahead_buffer) {
 8002a9a:	b143      	cbz	r3, 8002aae <lfs_init+0x122>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8002a9c:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8002a9e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002aa0:	2bff      	cmp	r3, #255	; 0xff
 8002aa2:	d90a      	bls.n	8002aba <lfs_init+0x12e>
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <lfs_init+0x1d0>)
 8002aa6:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <lfs_init+0x1a4>)
 8002aa8:	f640 7187 	movw	r1, #3975	; 0xf87
 8002aac:	e778      	b.n	80029a0 <lfs_init+0x14>
 8002aae:	f004 ff0b 	bl	80078c8 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8002ab2:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d1f2      	bne.n	8002a9e <lfs_init+0x112>
 8002ab8:	e7d8      	b.n	8002a6c <lfs_init+0xe0>
    if (!lfs->name_max) {
 8002aba:	b143      	cbz	r3, 8002ace <lfs_init+0x142>
        lfs->name_max = LFS_NAME_MAX;
 8002abc:	66e3      	str	r3, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8002abe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da06      	bge.n	8002ad2 <lfs_init+0x146>
 8002ac4:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <lfs_init+0x1d4>)
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <lfs_init+0x1a4>)
 8002ac8:	f640 718d 	movw	r1, #3981	; 0xf8d
 8002acc:	e768      	b.n	80029a0 <lfs_init+0x14>
        lfs->name_max = LFS_NAME_MAX;
 8002ace:	23ff      	movs	r3, #255	; 0xff
 8002ad0:	e7f4      	b.n	8002abc <lfs_init+0x130>
        lfs->file_max = LFS_FILE_MAX;
 8002ad2:	bf08      	it	eq
 8002ad4:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8002ad8:	6723      	str	r3, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8002ada:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002adc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d904      	bls.n	8002aee <lfs_init+0x162>
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <lfs_init+0x1d8>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <lfs_init+0x1a4>)
 8002ae8:	f640 7193 	movw	r1, #3987	; 0xf93
 8002aec:	e758      	b.n	80029a0 <lfs_init+0x14>
    lfs->attr_max = lfs->cfg->attr_max;
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf08      	it	eq
 8002af2:	4613      	moveq	r3, r2
 8002af4:	6763      	str	r3, [r4, #116]	; 0x74
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8002af6:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8002af8:	69eb      	ldr	r3, [r5, #28]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d904      	bls.n	8002b08 <lfs_init+0x17c>
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <lfs_init+0x1dc>)
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <lfs_init+0x1a4>)
 8002b02:	f640 7199 	movw	r1, #3993	; 0xf99
 8002b06:	e74b      	b.n	80029a0 <lfs_init+0x14>
    lfs->mlist = NULL;
 8002b08:	2000      	movs	r0, #0
    lfs->root[0] = LFS_BLOCK_NULL;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->root[1] = LFS_BLOCK_NULL;
 8002b0e:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->seed = 0;
 8002b12:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
    lfs->gdisk = (lfs_gstate_t){0};
 8002b16:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
    lfs->gstate = (lfs_gstate_t){0};
 8002b1a:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
    lfs->gdelta = (lfs_gstate_t){0};
 8002b1e:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    lfs->gdisk = (lfs_gstate_t){0};
 8002b22:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
 8002b24:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 8002b26:	6520      	str	r0, [r4, #80]	; 0x50
}
 8002b28:	bd38      	pop	{r3, r4, r5, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08009665 	.word	0x08009665
 8002b30:	08009116 	.word	0x08009116
 8002b34:	0800967e 	.word	0x0800967e
 8002b38:	08009699 	.word	0x08009699
 8002b3c:	080096b2 	.word	0x080096b2
 8002b40:	080096cc 	.word	0x080096cc
 8002b44:	080096fc 	.word	0x080096fc
 8002b48:	0800972c 	.word	0x0800972c
 8002b4c:	0800975d 	.word	0x0800975d
 8002b50:	080097a9 	.word	0x080097a9
 8002b54:	080097c5 	.word	0x080097c5
 8002b58:	080097e2 	.word	0x080097e2
 8002b5c:	08009836 	.word	0x08009836
 8002b60:	08009850 	.word	0x08009850
 8002b64:	08009871 	.word	0x08009871
 8002b68:	0800988c 	.word	0x0800988c

08002b6c <lfs_bd_erase.isra.18>:
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002b6c:	6a02      	ldr	r2, [r0, #32]
 8002b6e:	428a      	cmp	r2, r1
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8002b70:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002b72:	d805      	bhi.n	8002b80 <lfs_bd_erase.isra.18+0x14>
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <lfs_bd_erase.isra.18+0x28>)
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <lfs_bd_erase.isra.18+0x2c>)
 8002b78:	21fe      	movs	r1, #254	; 0xfe
    LFS_ASSERT(err <= 0);
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <lfs_bd_erase.isra.18+0x30>)
 8002b7c:	f004 fe38 	bl	80077f0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002b80:	68c3      	ldr	r3, [r0, #12]
 8002b82:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 8002b84:	2800      	cmp	r0, #0
 8002b86:	dd04      	ble.n	8002b92 <lfs_bd_erase.isra.18+0x26>
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <lfs_bd_erase.isra.18+0x34>)
 8002b8a:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <lfs_bd_erase.isra.18+0x2c>)
 8002b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b90:	e7f3      	b.n	8002b7a <lfs_bd_erase.isra.18+0xe>
}
 8002b92:	bd08      	pop	{r3, pc}
 8002b94:	08009209 	.word	0x08009209
 8002b98:	08009094 	.word	0x08009094
 8002b9c:	0800967e 	.word	0x0800967e
 8002ba0:	080091bc 	.word	0x080091bc

08002ba4 <lfs_fs_preporphans.isra.20>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8002ba4:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8002ba6:	6803      	ldr	r3, [r0, #0]
    return tag & 0x000003ff;
 8002ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8002bac:	b942      	cbnz	r2, 8002bc0 <lfs_fs_preporphans.isra.20+0x1c>
 8002bae:	2900      	cmp	r1, #0
 8002bb0:	da06      	bge.n	8002bc0 <lfs_fs_preporphans.isra.20+0x1c>
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <lfs_fs_preporphans.isra.20+0x38>)
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <lfs_fs_preporphans.isra.20+0x3c>)
 8002bb6:	480b      	ldr	r0, [pc, #44]	; (8002be4 <lfs_fs_preporphans.isra.20+0x40>)
 8002bb8:	f241 114d 	movw	r1, #4429	; 0x114d
 8002bbc:	f004 fe18 	bl	80077f0 <__assert_func>
    lfs->gstate.tag += orphans;
 8002bc0:	4419      	add	r1, r3
    return tag & 0x000003ff;
 8002bc2:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 8002bc6:	3300      	adds	r3, #0
 8002bc8:	bf18      	it	ne
 8002bca:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8002bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002bd0:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8002bd4:	6001      	str	r1, [r0, #0]
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd08      	pop	{r3, pc}
 8002bda:	bf00      	nop
 8002bdc:	08009633 	.word	0x08009633
 8002be0:	0800911f 	.word	0x0800911f
 8002be4:	0800967e 	.word	0x0800967e

08002be8 <lfs_ctz_index.isra.22>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8002bea:	69c5      	ldr	r5, [r0, #28]
    lfs_off_t size = *off;
 8002bec:	680e      	ldr	r6, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8002bee:	3d08      	subs	r5, #8
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8002bf0:	460f      	mov	r7, r1
    lfs_off_t i = size / b;
 8002bf2:	fbb6 f0f5 	udiv	r0, r6, r5
    if (i == 0) {
 8002bf6:	b180      	cbz	r0, 8002c1a <lfs_ctz_index.isra.22+0x32>
    return (uint32_t)__builtin_popcount(a);
 8002bf8:	3801      	subs	r0, #1
 8002bfa:	f7fd fb69 	bl	80002d0 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8002bfe:	1c84      	adds	r4, r0, #2
 8002c00:	eba6 0484 	sub.w	r4, r6, r4, lsl #2
 8002c04:	fbb4 f4f5 	udiv	r4, r4, r5
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7fd fb61 	bl	80002d0 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
 8002c0e:	fb04 6515 	mls	r5, r4, r5, r6
 8002c12:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 8002c16:	603d      	str	r5, [r7, #0]
    return i;
 8002c18:	4620      	mov	r0, r4
}
 8002c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c1c <lfs_bd_read.isra.23>:
static int lfs_bd_read(lfs_t *lfs,
 8002c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c20:	4690      	mov	r8, r2
 8002c22:	b085      	sub	sp, #20
    if (block >= lfs->cfg->block_count ||
 8002c24:	6802      	ldr	r2, [r0, #0]
static int lfs_bd_read(lfs_t *lfs,
 8002c26:	9303      	str	r3, [sp, #12]
 8002c28:	e9dd 940e 	ldrd	r9, r4, [sp, #56]	; 0x38
    if (block >= lfs->cfg->block_count ||
 8002c2c:	6a13      	ldr	r3, [r2, #32]
static int lfs_bd_read(lfs_t *lfs,
 8002c2e:	9002      	str	r0, [sp, #8]
    if (block >= lfs->cfg->block_count ||
 8002c30:	454b      	cmp	r3, r9
static int lfs_bd_read(lfs_t *lfs,
 8002c32:	468a      	mov	sl, r1
 8002c34:	e9dd 7610 	ldrd	r7, r6, [sp, #64]	; 0x40
    if (block >= lfs->cfg->block_count ||
 8002c38:	d903      	bls.n	8002c42 <lfs_bd_read.isra.23+0x26>
 8002c3a:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
 8002c3c:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d922      	bls.n	8002c88 <lfs_bd_read.isra.23+0x6c>
        return LFS_ERR_CORRUPT;
 8002c42:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8002c46:	e063      	b.n	8002d10 <lfs_bd_read.isra.23+0xf4>
        if (pcache && block == pcache->block &&
 8002c48:	f1ba 0f00 	cmp.w	sl, #0
 8002c4c:	d03f      	beq.n	8002cce <lfs_bd_read.isra.23+0xb2>
 8002c4e:	f8da 3000 	ldr.w	r3, [sl]
 8002c52:	4599      	cmp	r9, r3
 8002c54:	d13b      	bne.n	8002cce <lfs_bd_read.isra.23+0xb2>
                off < pcache->off + pcache->size) {
 8002c56:	e9da 5301 	ldrd	r5, r3, [sl, #4]
 8002c5a:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
 8002c5e:	45a3      	cmp	fp, r4
 8002c60:	d935      	bls.n	8002cce <lfs_bd_read.isra.23+0xb2>
            if (off >= pcache->off) {
 8002c62:	42a5      	cmp	r5, r4
 8002c64:	d814      	bhi.n	8002c90 <lfs_bd_read.isra.23+0x74>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002c66:	ebab 0b04 	sub.w	fp, fp, r4
    return (a < b) ? a : b;
 8002c6a:	45b3      	cmp	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002c6c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8002c70:	bf28      	it	cs
 8002c72:	46b3      	movcs	fp, r6
 8002c74:	1b65      	subs	r5, r4, r5
 8002c76:	4638      	mov	r0, r7
 8002c78:	465a      	mov	r2, fp
 8002c7a:	4429      	add	r1, r5
 8002c7c:	f004 fe55 	bl	800792a <memcpy>
                data += diff;
 8002c80:	445f      	add	r7, fp
                off += diff;
 8002c82:	445c      	add	r4, fp
                size -= diff;
 8002c84:	eba6 060b 	sub.w	r6, r6, fp
    while (size > 0) {
 8002c88:	2e00      	cmp	r6, #0
 8002c8a:	d1dd      	bne.n	8002c48 <lfs_bd_read.isra.23+0x2c>
    return 0;
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	e03f      	b.n	8002d10 <lfs_bd_read.isra.23+0xf4>
            diff = lfs_min(diff, pcache->off-off);
 8002c90:	1b2d      	subs	r5, r5, r4
 8002c92:	42b5      	cmp	r5, r6
 8002c94:	bf28      	it	cs
 8002c96:	4635      	movcs	r5, r6
        if (block == rcache->block &&
 8002c98:	f8d8 3000 	ldr.w	r3, [r8]
 8002c9c:	4599      	cmp	r9, r3
 8002c9e:	d11c      	bne.n	8002cda <lfs_bd_read.isra.23+0xbe>
                off < rcache->off + rcache->size) {
 8002ca0:	e9d8 1301 	ldrd	r1, r3, [r8, #4]
 8002ca4:	440b      	add	r3, r1
        if (block == rcache->block &&
 8002ca6:	429c      	cmp	r4, r3
 8002ca8:	d217      	bcs.n	8002cda <lfs_bd_read.isra.23+0xbe>
            if (off >= rcache->off) {
 8002caa:	428c      	cmp	r4, r1
 8002cac:	d311      	bcc.n	8002cd2 <lfs_bd_read.isra.23+0xb6>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002cae:	1b1b      	subs	r3, r3, r4
 8002cb0:	429d      	cmp	r5, r3
 8002cb2:	bf28      	it	cs
 8002cb4:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002cba:	1a61      	subs	r1, r4, r1
 8002cbc:	462a      	mov	r2, r5
 8002cbe:	4419      	add	r1, r3
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	f004 fe32 	bl	800792a <memcpy>
            data += diff;
 8002cc6:	442f      	add	r7, r5
            off += diff;
 8002cc8:	442c      	add	r4, r5
            size -= diff;
 8002cca:	1b76      	subs	r6, r6, r5
 8002ccc:	e7dc      	b.n	8002c88 <lfs_bd_read.isra.23+0x6c>
        if (pcache && block == pcache->block &&
 8002cce:	4635      	mov	r5, r6
 8002cd0:	e7e2      	b.n	8002c98 <lfs_bd_read.isra.23+0x7c>
            diff = lfs_min(diff, rcache->off-off);
 8002cd2:	1b09      	subs	r1, r1, r4
 8002cd4:	428d      	cmp	r5, r1
 8002cd6:	bf28      	it	cs
 8002cd8:	460d      	movcs	r5, r1
 8002cda:	9b02      	ldr	r3, [sp, #8]
 8002cdc:	6818      	ldr	r0, [r3, #0]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002cde:	9b03      	ldr	r3, [sp, #12]
 8002ce0:	42b3      	cmp	r3, r6
 8002ce2:	d818      	bhi.n	8002d16 <lfs_bd_read.isra.23+0xfa>
 8002ce4:	6943      	ldr	r3, [r0, #20]
 8002ce6:	fbb4 f2f3 	udiv	r2, r4, r3
 8002cea:	fb03 4212 	mls	r2, r3, r2, r4
 8002cee:	b992      	cbnz	r2, 8002d16 <lfs_bd_read.isra.23+0xfa>
 8002cf0:	429e      	cmp	r6, r3
 8002cf2:	d310      	bcc.n	8002d16 <lfs_bd_read.isra.23+0xfa>
    return a - (a % alignment);
 8002cf4:	fbb5 f2f3 	udiv	r2, r5, r3
 8002cf8:	fb03 5312 	mls	r3, r3, r2, r5
 8002cfc:	1aed      	subs	r5, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002cfe:	9500      	str	r5, [sp, #0]
 8002d00:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8002d04:	463b      	mov	r3, r7
 8002d06:	4622      	mov	r2, r4
 8002d08:	4649      	mov	r1, r9
 8002d0a:	47d8      	blx	fp
            if (err) {
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d0da      	beq.n	8002cc6 <lfs_bd_read.isra.23+0xaa>
}
 8002d10:	b005      	add	sp, #20
 8002d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002d16:	6a03      	ldr	r3, [r0, #32]
 8002d18:	4599      	cmp	r9, r3
 8002d1a:	d305      	bcc.n	8002d28 <lfs_bd_read.isra.23+0x10c>
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <lfs_bd_read.isra.23+0x168>)
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <lfs_bd_read.isra.23+0x16c>)
 8002d20:	216a      	movs	r1, #106	; 0x6a
        LFS_ASSERT(err <= 0);
 8002d22:	481a      	ldr	r0, [pc, #104]	; (8002d8c <lfs_bd_read.isra.23+0x170>)
 8002d24:	f004 fd64 	bl	80077f0 <__assert_func>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002d28:	6941      	ldr	r1, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 8002d2a:	9d03      	ldr	r5, [sp, #12]
    return a - (a % alignment);
 8002d2c:	fbb4 f2f1 	udiv	r2, r4, r1
    return lfs_aligndown(a + alignment-1, alignment);
 8002d30:	1e4b      	subs	r3, r1, #1
 8002d32:	442b      	add	r3, r5
 8002d34:	4423      	add	r3, r4
    return a - (a % alignment);
 8002d36:	fb01 4212 	mls	r2, r1, r2, r4
 8002d3a:	fbb3 f5f1 	udiv	r5, r3, r1
 8002d3e:	fb01 3115 	mls	r1, r1, r5, r3
 8002d42:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 8002d44:	69c1      	ldr	r1, [r0, #28]
        rcache->block = block;
 8002d46:	f8c8 9000 	str.w	r9, [r8]
    return a - (a % alignment);
 8002d4a:	1aa2      	subs	r2, r4, r2
        rcache->size = lfs_min(
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	bf94      	ite	ls
 8002d50:	ebc2 0303 	rsbls	r3, r2, r3
 8002d54:	ebc2 0301 	rsbhi	r3, r2, r1
    return (a < b) ? a : b;
 8002d58:	6a81      	ldr	r1, [r0, #40]	; 0x28
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002d5a:	f8c8 2004 	str.w	r2, [r8, #4]
 8002d5e:	428b      	cmp	r3, r1
 8002d60:	bf28      	it	cs
 8002d62:	460b      	movcs	r3, r1
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002d64:	9300      	str	r3, [sp, #0]
        rcache->size = lfs_min(
 8002d66:	f8c8 3008 	str.w	r3, [r8, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002d6a:	6845      	ldr	r5, [r0, #4]
 8002d6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002d70:	4649      	mov	r1, r9
 8002d72:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 8002d74:	2800      	cmp	r0, #0
 8002d76:	dd03      	ble.n	8002d80 <lfs_bd_read.isra.23+0x164>
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <lfs_bd_read.isra.23+0x174>)
 8002d7a:	4a03      	ldr	r2, [pc, #12]	; (8002d88 <lfs_bd_read.isra.23+0x16c>)
 8002d7c:	2175      	movs	r1, #117	; 0x75
 8002d7e:	e7d0      	b.n	8002d22 <lfs_bd_read.isra.23+0x106>
        if (err) {
 8002d80:	d082      	beq.n	8002c88 <lfs_bd_read.isra.23+0x6c>
 8002d82:	e7c5      	b.n	8002d10 <lfs_bd_read.isra.23+0xf4>
 8002d84:	08009209 	.word	0x08009209
 8002d88:	08009063 	.word	0x08009063
 8002d8c:	0800967e 	.word	0x0800967e
 8002d90:	080091bc 	.word	0x080091bc

08002d94 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8002d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d98:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
 8002d9a:	e9d1 6303 	ldrd	r6, r3, [r1, #12]
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	4607      	mov	r7, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002da2:	303c      	adds	r0, #60	; 0x3c
    lfs_tag_t ntag = dir->etag;
 8002da4:	9307      	str	r3, [sp, #28]
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8002da6:	4688      	mov	r8, r1
 8002da8:	9205      	str	r2, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002daa:	f7ff fd57 	bl	800285c <lfs_gstate_hasmovehere>
 8002dae:	9b05      	ldr	r3, [sp, #20]
 8002db0:	f3c3 2989 	ubfx	r9, r3, #10, #10
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d07e      	beq.n	8002eb6 <lfs_dir_getslice+0x122>
 8002db8:	f1b9 0f00 	cmp.w	r9, #0
 8002dbc:	d07d      	beq.n	8002eba <lfs_dir_getslice+0x126>
    return (tag & 0x000ffc00) >> 10;
 8002dbe:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <lfs_dir_getslice+0x12c>)
            lfs_tag_id(gmask) != 0 &&
 8002dc2:	f3c4 2489 	ubfx	r4, r4, #10, #10
 8002dc6:	f3ca 2089 	ubfx	r0, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
 8002dca:	4284      	cmp	r4, r0
 8002dcc:	bf94      	ite	ls
 8002dce:	461c      	movls	r4, r3
 8002dd0:	2400      	movhi	r4, #0
 8002dd2:	f107 0b68 	add.w	fp, r7, #104	; 0x68
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002dd6:	9d07      	ldr	r5, [sp, #28]
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f7ff fd1c 	bl	8002816 <lfs_tag_dsize>
 8002dde:	1d03      	adds	r3, r0, #4
 8002de0:	42b3      	cmp	r3, r6
 8002de2:	d833      	bhi.n	8002e4c <lfs_dir_getslice+0xb8>
        off -= lfs_tag_dsize(ntag);
 8002de4:	1a36      	subs	r6, r6, r0
        int err = lfs_bd_read(lfs,
 8002de6:	aa07      	add	r2, sp, #28
 8002de8:	2304      	movs	r3, #4
 8002dea:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8002dee:	f8d8 2000 	ldr.w	r2, [r8]
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	9303      	str	r3, [sp, #12]
 8002df6:	463a      	mov	r2, r7
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4658      	mov	r0, fp
 8002dfc:	f7ff ff0e 	bl	8002c1c <lfs_bd_read.isra.23>
        if (err) {
 8002e00:	bb30      	cbnz	r0, 8002e50 <lfs_dir_getslice+0xbc>
    return __builtin_bswap32(a);
 8002e02:	9b07      	ldr	r3, [sp, #28]
 8002e04:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8002e06:	406b      	eors	r3, r5
 8002e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e0c:	9307      	str	r3, [sp, #28]
        if (lfs_tag_id(gmask) != 0 &&
 8002e0e:	f1b9 0f00 	cmp.w	r9, #0
 8002e12:	d023      	beq.n	8002e5c <lfs_dir_getslice+0xc8>
    return (tag & 0x70000000) >> 20;
 8002e14:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
 8002e16:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d11d      	bne.n	8002e5c <lfs_dir_getslice+0xc8>
 8002e20:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002e24:	f3c3 2089 	ubfx	r0, r3, #10, #10
 8002e28:	f3c5 2189 	ubfx	r1, r5, #10, #10
 8002e2c:	4288      	cmp	r0, r1
 8002e2e:	d315      	bcc.n	8002e5c <lfs_dir_getslice+0xc8>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e38:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e3c:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8002e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e48:	42ab      	cmp	r3, r5
 8002e4a:	d104      	bne.n	8002e56 <lfs_dir_getslice+0xc2>
                return LFS_ERR_NOENT;
 8002e4c:	f06f 0001 	mvn.w	r0, #1
}
 8002e50:	b009      	add	sp, #36	; 0x24
 8002e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002e56:	b252      	sxtb	r2, r2
 8002e58:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8002e5c:	ebaa 0104 	sub.w	r1, sl, r4
 8002e60:	9b05      	ldr	r3, [sp, #20]
 8002e62:	4069      	eors	r1, r5
 8002e64:	4019      	ands	r1, r3
 8002e66:	d1b6      	bne.n	8002dd6 <lfs_dir_getslice+0x42>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002e68:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	d0ed      	beq.n	8002e4c <lfs_dir_getslice+0xb8>
    return (a < b) ? a : b;
 8002e70:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return tag & 0x000003ff;
 8002e72:	f3c5 0909 	ubfx	r9, r5, #0, #10
 8002e76:	4599      	cmp	r9, r3
 8002e78:	bf28      	it	cs
 8002e7a:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
 8002e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e82:	f8cd 900c 	str.w	r9, [sp, #12]
 8002e86:	3304      	adds	r3, #4
 8002e88:	441e      	add	r6, r3
 8002e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	9601      	str	r6, [sp, #4]
 8002e92:	464b      	mov	r3, r9
 8002e94:	463a      	mov	r2, r7
 8002e96:	4658      	mov	r0, fp
 8002e98:	f7ff fec0 	bl	8002c1c <lfs_bd_read.isra.23>
            if (err) {
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d1d7      	bne.n	8002e50 <lfs_dir_getslice+0xbc>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8002ea0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ea2:	eba3 0209 	sub.w	r2, r3, r9
 8002ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	eb03 0009 	add.w	r0, r3, r9
 8002eae:	f004 fd47 	bl	8007940 <memset>
            return tag + gdiff;
 8002eb2:	1960      	adds	r0, r4, r5
 8002eb4:	e7cc      	b.n	8002e50 <lfs_dir_getslice+0xbc>
    lfs_stag_t gdiff = 0;
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	e78b      	b.n	8002dd2 <lfs_dir_getslice+0x3e>
 8002eba:	464c      	mov	r4, r9
 8002ebc:	e789      	b.n	8002dd2 <lfs_dir_getslice+0x3e>
 8002ebe:	bf00      	nop
 8002ec0:	fffffc00 	.word	0xfffffc00

08002ec4 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8002ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
 8002ec6:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8002eca:	9402      	str	r4, [sp, #8]
 8002ecc:	9c06      	ldr	r4, [sp, #24]
 8002ece:	9401      	str	r4, [sp, #4]
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	9400      	str	r4, [sp, #0]
 8002ed4:	f7ff ff5e 	bl	8002d94 <lfs_dir_getslice>
}
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd10      	pop	{r4, pc}

08002edc <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 8002edc:	b530      	push	{r4, r5, lr}
 8002ede:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002ee0:	ac03      	add	r4, sp, #12
        lfs_gstate_t *gstate) {
 8002ee2:	4615      	mov	r5, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002ee4:	9400      	str	r4, [sp, #0]
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <lfs_dir_getgstate+0x2c>)
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <lfs_dir_getgstate+0x30>)
 8002eea:	f7ff ffeb 	bl	8002ec4 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	da04      	bge.n	8002efc <lfs_dir_getgstate+0x20>
 8002ef2:	1c83      	adds	r3, r0, #2
    return 0;
 8002ef4:	bf08      	it	eq
 8002ef6:	2000      	moveq	r0, #0
}
 8002ef8:	b007      	add	sp, #28
 8002efa:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
 8002efc:	4628      	mov	r0, r5
 8002efe:	4621      	mov	r1, r4
 8002f00:	f7ff fc93 	bl	800282a <lfs_gstate_xor>
    return 0;
 8002f04:	2000      	movs	r0, #0
 8002f06:	e7f7      	b.n	8002ef8 <lfs_dir_getgstate+0x1c>
 8002f08:	7ff0000c 	.word	0x7ff0000c
 8002f0c:	7ff00000 	.word	0x7ff00000

08002f10 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8002f10:	b530      	push	{r4, r5, lr}
 8002f12:	4613      	mov	r3, r2
 8002f14:	b087      	sub	sp, #28
    lfs_t *lfs = find->lfs;
 8002f16:	6802      	ldr	r2, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8002f18:	4605      	mov	r5, r0
    int err = lfs_bd_read(lfs,
 8002f1a:	ac04      	add	r4, sp, #16
 8002f1c:	2008      	movs	r0, #8
 8002f1e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8002f20:	9003      	str	r0, [sp, #12]
 8002f22:	9402      	str	r4, [sp, #8]
 8002f24:	6858      	ldr	r0, [r3, #4]
 8002f26:	9001      	str	r0, [sp, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	69cb      	ldr	r3, [r1, #28]
 8002f2e:	f102 0068 	add.w	r0, r2, #104	; 0x68
 8002f32:	f102 0110 	add.w	r1, r2, #16
 8002f36:	f7ff fe71 	bl	8002c1c <lfs_bd_read.isra.23>
    if (err) {
 8002f3a:	b930      	cbnz	r0, 8002f4a <lfs_fs_parent_match+0x3a>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8002f3c:	1d29      	adds	r1, r5, #4
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff fc58 	bl	80027f4 <lfs_pair_cmp>
 8002f44:	3000      	adds	r0, #0
 8002f46:	bf18      	it	ne
 8002f48:	2001      	movne	r0, #1
}
 8002f4a:	b007      	add	sp, #28
 8002f4c:	bd30      	pop	{r4, r5, pc}
	...

08002f50 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f54:	b097      	sub	sp, #92	; 0x5c
 8002f56:	4616      	mov	r6, r2
 8002f58:	930b      	str	r3, [sp, #44]	; 0x2c
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002f5e:	6a12      	ldr	r2, [r2, #32]
 8002f60:	4293      	cmp	r3, r2
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002f62:	4607      	mov	r7, r0
 8002f64:	460c      	mov	r4, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8002f66:	f080 81e7 	bcs.w	8003338 <lfs_dir_fetchmatch+0x3e8>
 8002f6a:	6871      	ldr	r1, [r6, #4]
 8002f6c:	428a      	cmp	r2, r1
 8002f6e:	f240 81e3 	bls.w	8003338 <lfs_dir_fetchmatch+0x3e8>
 8002f72:	f100 0268 	add.w	r2, r0, #104	; 0x68
    uint32_t revs[2] = {0, 0};
 8002f76:	2100      	movs	r1, #0
 8002f78:	9204      	str	r2, [sp, #16]
        int err = lfs_bd_read(lfs,
 8002f7a:	f04f 0804 	mov.w	r8, #4
 8002f7e:	aa10      	add	r2, sp, #64	; 0x40
 8002f80:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4602      	mov	r2, r0
 8002f88:	4643      	mov	r3, r8
 8002f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f8e:	9804      	ldr	r0, [sp, #16]
    uint32_t revs[2] = {0, 0};
 8002f90:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
        int err = lfs_bd_read(lfs,
 8002f94:	f7ff fe42 	bl	8002c1c <lfs_bd_read.isra.23>
 8002f98:	4643      	mov	r3, r8
        if (err && err != LFS_ERR_CORRUPT) {
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	b118      	cbz	r0, 8002fa6 <lfs_dir_fetchmatch+0x56>
 8002f9e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8002fa2:	f040 818a 	bne.w	80032ba <lfs_dir_fetchmatch+0x36a>
        int err = lfs_bd_read(lfs,
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	f04f 0800 	mov.w	r8, #0
 8002fac:	ab11      	add	r3, sp, #68	; 0x44
 8002fae:	9302      	str	r3, [sp, #8]
 8002fb0:	f8cd 8004 	str.w	r8, [sp, #4]
 8002fb4:	6873      	ldr	r3, [r6, #4]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	463a      	mov	r2, r7
 8002fba:	2304      	movs	r3, #4
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	9804      	ldr	r0, [sp, #16]
 8002fc0:	f7ff fe2c 	bl	8002c1c <lfs_bd_read.isra.23>
        if (err && err != LFS_ERR_CORRUPT) {
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d04e      	beq.n	8003068 <lfs_dir_fetchmatch+0x118>
 8002fca:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8002fce:	f040 8174 	bne.w	80032ba <lfs_dir_fetchmatch+0x36a>
    dir->pair[0] = pair[(r+0)%2];
 8002fd2:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
 8002fd6:	6023      	str	r3, [r4, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002fd8:	f088 0301 	eor.w	r3, r8, #1
 8002fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8002fde:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002fe2:	6063      	str	r3, [r4, #4]
    dir->rev = revs[(r+0)%2];
 8002fe4:	ab16      	add	r3, sp, #88	; 0x58
 8002fe6:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    dir->off = 0; // nonzero = found some commits
 8002fea:	2202      	movs	r2, #2
    dir->rev = revs[(r+0)%2];
 8002fec:	f858 3c18 	ldr.w	r3, [r8, #-24]
 8002ff0:	60a3      	str	r3, [r4, #8]
    dir->off = 0; // nonzero = found some commits
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60e3      	str	r3, [r4, #12]
 8002ff6:	920a      	str	r2, [sp, #40]	; 0x28
    lfs_stag_t besttag = -1;
 8002ff8:	f04f 35ff 	mov.w	r5, #4294967295
        bool tempsplit = false;
 8002ffc:	9308      	str	r3, [sp, #32]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002ffe:	4ab1      	ldr	r2, [pc, #708]	; (80032c4 <lfs_dir_fetchmatch+0x374>)
 8003000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003004:	ab12      	add	r3, sp, #72	; 0x48
 8003006:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800300a:	2204      	movs	r2, #4
 800300c:	f104 0108 	add.w	r1, r4, #8
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f003 f8b0 	bl	8006178 <lfs_crc>
        bool tempsplit = false;
 8003018:	2300      	movs	r3, #0
 800301a:	9307      	str	r3, [sp, #28]
        uint16_t tempcount = 0;
 800301c:	9305      	str	r3, [sp, #20]
        lfs_tag_t ptag = 0xffffffff;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003022:	900d      	str	r0, [sp, #52]	; 0x34
 8003024:	46a8      	mov	r8, r5
        lfs_tag_t ptag = 0xffffffff;
 8003026:	9306      	str	r3, [sp, #24]
        lfs_off_t off = 0;
 8003028:	f04f 0a00 	mov.w	sl, #0
            off += lfs_tag_dsize(ptag);
 800302c:	9806      	ldr	r0, [sp, #24]
 800302e:	f7ff fbf2 	bl	8002816 <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
 8003032:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
            off += lfs_tag_dsize(ptag);
 8003036:	4482      	add	sl, r0
            int err = lfs_bd_read(lfs,
 8003038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	9200      	str	r2, [sp, #0]
 800303e:	e9cd ab01 	strd	sl, fp, [sp, #4]
 8003042:	f04f 0904 	mov.w	r9, #4
 8003046:	f8cd 900c 	str.w	r9, [sp, #12]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	9804      	ldr	r0, [sp, #16]
 800304e:	463a      	mov	r2, r7
 8003050:	2100      	movs	r1, #0
 8003052:	f7ff fde3 	bl	8002c1c <lfs_bd_read.isra.23>
            if (err) {
 8003056:	4606      	mov	r6, r0
 8003058:	b1a8      	cbz	r0, 8003086 <lfs_dir_fetchmatch+0x136>
                    if (err == LFS_ERR_CORRUPT) {
 800305a:	f116 0f54 	cmn.w	r6, #84	; 0x54
 800305e:	f040 812b 	bne.w	80032b8 <lfs_dir_fetchmatch+0x368>
                        dir->erased = false;
 8003062:	9b08      	ldr	r3, [sp, #32]
 8003064:	75a3      	strb	r3, [r4, #22]
 8003066:	e032      	b.n	80030ce <lfs_dir_fetchmatch+0x17e>
    return (int)(unsigned)(a - b);
 8003068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800306c:	eba3 0802 	sub.w	r8, r3, r2
        if (err != LFS_ERR_CORRUPT &&
 8003070:	f1b8 0f00 	cmp.w	r8, #0
 8003074:	bfd4      	ite	le
 8003076:	f04f 0800 	movle.w	r8, #0
 800307a:	f04f 0801 	movgt.w	r8, #1
 800307e:	e7a8      	b.n	8002fd2 <lfs_dir_fetchmatch+0x82>
 8003080:	2301      	movs	r3, #1
 8003082:	930a      	str	r3, [sp, #40]	; 0x28
 8003084:	e7bb      	b.n	8002ffe <lfs_dir_fetchmatch+0xae>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003086:	464a      	mov	r2, r9
 8003088:	4659      	mov	r1, fp
 800308a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800308c:	f003 f874 	bl	8006178 <lfs_crc>
    return __builtin_bswap32(a);
 8003090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            tag = lfs_frombe32(tag) ^ ptag;
 8003092:	9a06      	ldr	r2, [sp, #24]
            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003094:	900d      	str	r0, [sp, #52]	; 0x34
 8003096:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
 8003098:	ea82 0b03 	eor.w	fp, r2, r3
            if (!lfs_tag_isvalid(tag)) {
 800309c:	f1bb 0f00 	cmp.w	fp, #0
            tag = lfs_frombe32(tag) ^ ptag;
 80030a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
            if (!lfs_tag_isvalid(tag)) {
 80030a4:	da2e      	bge.n	8003104 <lfs_dir_fetchmatch+0x1b4>
    return (tag & 0x70000000) >> 20;
 80030a6:	ea4f 5a12 	mov.w	sl, r2, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80030aa:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
 80030ae:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
 80030b2:	d109      	bne.n	80030c8 <lfs_dir_fetchmatch+0x178>
                        dir->off % lfs->cfg->prog_size == 0);
 80030b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b6:	68e2      	ldr	r2, [r4, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80030be:	fb03 2616 	mls	r6, r3, r6, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80030c2:	fab6 f686 	clz	r6, r6
 80030c6:	0976      	lsrs	r6, r6, #5
 80030c8:	f006 0601 	and.w	r6, r6, #1
 80030cc:	75a6      	strb	r6, [r4, #22]
        if (dir->off > 0) {
 80030ce:	68e3      	ldr	r3, [r4, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8119 	beq.w	8003308 <lfs_dir_fetchmatch+0x3b8>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80030d6:	4621      	mov	r1, r4
 80030d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80030dc:	f7ff fbbe 	bl	800285c <lfs_gstate_hasmovehere>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f000 80fc 	beq.w	80032de <lfs_dir_fetchmatch+0x38e>
    return (tag & 0x000ffc00) >> 10;
 80030e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e8:	f3c5 2289 	ubfx	r2, r5, #10, #10
 80030ec:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f040 80ed 	bne.w	80032d0 <lfs_dir_fetchmatch+0x380>
                    besttag |= 0x80000000;
 80030f6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
            if (id) {
 80030fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 80f0 	bne.w	80032e2 <lfs_dir_fetchmatch+0x392>
 8003102:	e0f8      	b.n	80032f6 <lfs_dir_fetchmatch+0x3a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8003104:	4658      	mov	r0, fp
 8003106:	f7ff fb86 	bl	8002816 <lfs_tag_dsize>
 800310a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4450      	add	r0, sl
 8003110:	4298      	cmp	r0, r3
 8003112:	d8a6      	bhi.n	8003062 <lfs_dir_fetchmatch+0x112>
    return (tag & 0x70000000) >> 20;
 8003114:	ea4f 521b 	mov.w	r2, fp, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8003118:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800311c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003120:	d13d      	bne.n	800319e <lfs_dir_fetchmatch+0x24e>
                err = lfs_bd_read(lfs,
 8003122:	aa0f      	add	r2, sp, #60	; 0x3c
 8003124:	9202      	str	r2, [sp, #8]
 8003126:	f10a 0204 	add.w	r2, sl, #4
 800312a:	9201      	str	r2, [sp, #4]
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	9200      	str	r2, [sp, #0]
 8003130:	4631      	mov	r1, r6
 8003132:	f8cd 900c 	str.w	r9, [sp, #12]
 8003136:	463a      	mov	r2, r7
 8003138:	9804      	ldr	r0, [sp, #16]
 800313a:	f7ff fd6f 	bl	8002c1c <lfs_bd_read.isra.23>
                if (err) {
 800313e:	4606      	mov	r6, r0
 8003140:	2800      	cmp	r0, #0
 8003142:	d18a      	bne.n	800305a <lfs_dir_fetchmatch+0x10a>
                if (crc != dcrc) {
 8003144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003148:	429a      	cmp	r2, r3
 800314a:	d18a      	bne.n	8003062 <lfs_dir_fetchmatch+0x112>
    return (tag & 0x0ff00000) >> 20;
 800314c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800314e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    return (tag & 0x0ff00000) >> 20;
 8003150:	0d1b      	lsrs	r3, r3, #20
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003152:	464a      	mov	r2, r9
 8003154:	a90d      	add	r1, sp, #52	; 0x34
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003156:	ea8b 7bc3 	eor.w	fp, fp, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800315a:	f003 f80d 	bl	8006178 <lfs_crc>
 800315e:	62f8      	str	r0, [r7, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 8003160:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003162:	f7ff fb58 	bl	8002816 <lfs_tag_dsize>
                dir->count = tempcount;
 8003166:	9b05      	ldr	r3, [sp, #20]
 8003168:	82a3      	strh	r3, [r4, #20]
                dir->tail[0] = temptail[0];
 800316a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800316c:	61a3      	str	r3, [r4, #24]
                dir->off = off + lfs_tag_dsize(tag);
 800316e:	4450      	add	r0, sl
                dir->tail[1] = temptail[1];
 8003170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003172:	61e3      	str	r3, [r4, #28]
                dir->etag = ptag;
 8003174:	e9c4 0b03 	strd	r0, fp, [r4, #12]
                dir->split = tempsplit;
 8003178:	9b07      	ldr	r3, [sp, #28]
 800317a:	75e3      	strb	r3, [r4, #23]
                crc = 0xffffffff;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	930d      	str	r3, [sp, #52]	; 0x34
 8003182:	4643      	mov	r3, r8
 8003184:	4645      	mov	r5, r8
 8003186:	f8cd b018 	str.w	fp, [sp, #24]
 800318a:	4698      	mov	r8, r3
 800318c:	e74e      	b.n	800302c <lfs_dir_fetchmatch+0xdc>
                crc = lfs_crc(crc, &dat, 1);
 800318e:	2201      	movs	r2, #1
 8003190:	a90f      	add	r1, sp, #60	; 0x3c
 8003192:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003194:	f002 fff0 	bl	8006178 <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003198:	f109 0901 	add.w	r9, r9, #1
                crc = lfs_crc(crc, &dat, 1);
 800319c:	900d      	str	r0, [sp, #52]	; 0x34
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800319e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80031a0:	f7ff fb39 	bl	8002816 <lfs_tag_dsize>
 80031a4:	4548      	cmp	r0, r9
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	d916      	bls.n	80031d8 <lfs_dir_fetchmatch+0x288>
                err = lfs_bd_read(lfs,
 80031aa:	2101      	movs	r1, #1
 80031ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031ae:	9103      	str	r1, [sp, #12]
 80031b0:	a90f      	add	r1, sp, #60	; 0x3c
 80031b2:	9102      	str	r1, [sp, #8]
 80031b4:	eb09 010a 	add.w	r1, r9, sl
 80031b8:	e9cd 3100 	strd	r3, r1, [sp]
 80031bc:	9804      	ldr	r0, [sp, #16]
 80031be:	69d3      	ldr	r3, [r2, #28]
 80031c0:	2100      	movs	r1, #0
 80031c2:	463a      	mov	r2, r7
 80031c4:	f7ff fd2a 	bl	8002c1c <lfs_bd_read.isra.23>
                if (err) {
 80031c8:	4606      	mov	r6, r0
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d0df      	beq.n	800318e <lfs_dir_fetchmatch+0x23e>
                    if (err == LFS_ERR_CORRUPT) {
 80031ce:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80031d2:	d171      	bne.n	80032b8 <lfs_dir_fetchmatch+0x368>
                        dir->erased = false;
 80031d4:	9b08      	ldr	r3, [sp, #32]
 80031d6:	75a3      	strb	r3, [r4, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80031d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    return (tag & 0x70000000) >> 20;
 80031da:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80031dc:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
 80031e0:	d11e      	bne.n	8003220 <lfs_dir_fetchmatch+0x2d0>
                if (lfs_tag_id(tag) >= tempcount) {
 80031e2:	9a05      	ldr	r2, [sp, #20]
    return (tag & 0x000ffc00) >> 10;
 80031e4:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d801      	bhi.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
                    tempcount = lfs_tag_id(tag) + 1;
 80031ec:	3301      	adds	r3, #1
 80031ee:	9305      	str	r3, [sp, #20]
            if ((fmask & tag) == (fmask & ftag)) {
 80031f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80031f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	404a      	eors	r2, r1
 80031fa:	4202      	tst	r2, r0
 80031fc:	d10d      	bne.n	800321a <lfs_dir_fetchmatch+0x2ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80031fe:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
 8003200:	f10a 0304 	add.w	r3, sl, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003204:	9315      	str	r3, [sp, #84]	; 0x54
 8003206:	aa14      	add	r2, sp, #80	; 0x50
 8003208:	e9dd 3022 	ldrd	r3, r0, [sp, #136]	; 0x88
 800320c:	4798      	blx	r3
                if (res < 0) {
 800320e:	1e06      	subs	r6, r0, #0
 8003210:	f6ff af23 	blt.w	800305a <lfs_dir_fetchmatch+0x10a>
 8003214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                if (res == LFS_CMP_EQ) {
 8003216:	d13c      	bne.n	8003292 <lfs_dir_fetchmatch+0x342>
                    tempbesttag = tag;
 8003218:	4698      	mov	r8, r3
 800321a:	4643      	mov	r3, r8
 800321c:	46a8      	mov	r8, r5
 800321e:	e7b1      	b.n	8003184 <lfs_dir_fetchmatch+0x234>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8003220:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003224:	d11c      	bne.n	8003260 <lfs_dir_fetchmatch+0x310>
                tempcount += lfs_tag_splice(tag);
 8003226:	9905      	ldr	r1, [sp, #20]
    return (int8_t)lfs_tag_chunk(tag);
 8003228:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
 800322a:	4411      	add	r1, r2
 800322c:	b289      	uxth	r1, r1
 800322e:	9105      	str	r1, [sp, #20]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003230:	4925      	ldr	r1, [pc, #148]	; (80032c8 <lfs_dir_fetchmatch+0x378>)
 8003232:	ea08 0101 	and.w	r1, r8, r1
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003236:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
 800323a:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800323e:	428b      	cmp	r3, r1
 8003240:	d102      	bne.n	8003248 <lfs_dir_fetchmatch+0x2f8>
                    tempbesttag |= 0x80000000;
 8003242:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
 8003246:	e7d3      	b.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
                } else if (tempbesttag != -1 &&
 8003248:	f1b8 3fff 	cmp.w	r8, #4294967295
 800324c:	d0d0      	beq.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
 800324e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8003252:	f3c8 2189 	ubfx	r1, r8, #10, #10
 8003256:	428b      	cmp	r3, r1
 8003258:	d8ca      	bhi.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800325a:	eb08 2882 	add.w	r8, r8, r2, lsl #10
 800325e:	e7c7      	b.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003260:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8003264:	d1c4      	bne.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003266:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
 800326a:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800326c:	9307      	str	r3, [sp, #28]
                err = lfs_bd_read(lfs,
 800326e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003270:	9203      	str	r2, [sp, #12]
 8003272:	aa12      	add	r2, sp, #72	; 0x48
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	f10a 0204 	add.w	r2, sl, #4
 800327a:	9201      	str	r2, [sp, #4]
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	9200      	str	r2, [sp, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	9804      	ldr	r0, [sp, #16]
 8003284:	463a      	mov	r2, r7
 8003286:	2100      	movs	r1, #0
 8003288:	f7ff fcc8 	bl	8002c1c <lfs_bd_read.isra.23>
                    if (err == LFS_ERR_CORRUPT) {
 800328c:	3054      	adds	r0, #84	; 0x54
 800328e:	d1af      	bne.n	80031f0 <lfs_dir_fetchmatch+0x2a0>
 8003290:	e6e7      	b.n	8003062 <lfs_dir_fetchmatch+0x112>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003292:	490e      	ldr	r1, [pc, #56]	; (80032cc <lfs_dir_fetchmatch+0x37c>)
 8003294:	ea88 0203 	eor.w	r2, r8, r3
 8003298:	420a      	tst	r2, r1
 800329a:	d00a      	beq.n	80032b2 <lfs_dir_fetchmatch+0x362>
                } else if (res == LFS_CMP_GT &&
 800329c:	2e02      	cmp	r6, #2
 800329e:	d1bc      	bne.n	800321a <lfs_dir_fetchmatch+0x2ca>
 80032a0:	f3c8 2289 	ubfx	r2, r8, #10, #10
 80032a4:	f3c3 2189 	ubfx	r1, r3, #10, #10
 80032a8:	428a      	cmp	r2, r1
 80032aa:	d3b6      	bcc.n	800321a <lfs_dir_fetchmatch+0x2ca>
                    tempbesttag = tag | 0x80000000;
 80032ac:	f043 4800 	orr.w	r8, r3, #2147483648	; 0x80000000
 80032b0:	e7b3      	b.n	800321a <lfs_dir_fetchmatch+0x2ca>
                    tempbesttag = -1;
 80032b2:	f04f 38ff 	mov.w	r8, #4294967295
 80032b6:	e7b0      	b.n	800321a <lfs_dir_fetchmatch+0x2ca>
                return err;
 80032b8:	4635      	mov	r5, r6
}
 80032ba:	4628      	mov	r0, r5
 80032bc:	b017      	add	sp, #92	; 0x5c
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c2:	bf00      	nop
 80032c4:	08008a6c 	.word	0x08008a6c
 80032c8:	000ffc00 	.word	0x000ffc00
 80032cc:	7ffffc00 	.word	0x7ffffc00
                } else if (besttag != -1 &&
 80032d0:	1c69      	adds	r1, r5, #1
 80032d2:	f43f af12 	beq.w	80030fa <lfs_dir_fetchmatch+0x1aa>
 80032d6:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
 80032d8:	bf88      	it	hi
 80032da:	f5a5 6580 	subhi.w	r5, r5, #1024	; 0x400
            if (id) {
 80032de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032e0:	b13b      	cbz	r3, 80032f2 <lfs_dir_fetchmatch+0x3a2>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80032e2:	8aa2      	ldrh	r2, [r4, #20]
 80032e4:	f3c5 2389 	ubfx	r3, r5, #10, #10
    return (a < b) ? a : b;
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bf28      	it	cs
 80032ec:	4613      	movcs	r3, r2
 80032ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032f0:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
 80032f2:	2d00      	cmp	r5, #0
 80032f4:	dae1      	bge.n	80032ba <lfs_dir_fetchmatch+0x36a>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80032f6:	8aa3      	ldrh	r3, [r4, #20]
 80032f8:	f3c5 2589 	ubfx	r5, r5, #10, #10
                return LFS_ERR_NOENT;
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	bf94      	ite	ls
 8003300:	2500      	movls	r5, #0
 8003302:	f06f 0501 	mvnhi.w	r5, #1
 8003306:	e7d8      	b.n	80032ba <lfs_dir_fetchmatch+0x36a>
        dir->rev = revs[(r+1)%2];
 8003308:	9909      	ldr	r1, [sp, #36]	; 0x24
 800330a:	a816      	add	r0, sp, #88	; 0x58
 800330c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    pair[0] = pair[1];
 8003310:	e9d4 2300 	ldrd	r2, r3, [r4]
        dir->rev = revs[(r+1)%2];
 8003314:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8003318:	60a1      	str	r1, [r4, #8]
    for (int i = 0; i < 2; i++) {
 800331a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800331c:	2901      	cmp	r1, #1
    pair[1] = t;
 800331e:	e9c4 3200 	strd	r3, r2, [r4]
    for (int i = 0; i < 2; i++) {
 8003322:	f47f aead 	bne.w	8003080 <lfs_dir_fetchmatch+0x130>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8003326:	4906      	ldr	r1, [pc, #24]	; (8003340 <lfs_dir_fetchmatch+0x3f0>)
 8003328:	4806      	ldr	r0, [pc, #24]	; (8003344 <lfs_dir_fetchmatch+0x3f4>)
 800332a:	e9cd 2100 	strd	r2, r1, [sp]
 800332e:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8003332:	4905      	ldr	r1, [pc, #20]	; (8003348 <lfs_dir_fetchmatch+0x3f8>)
 8003334:	f004 fe7c 	bl	8008030 <iprintf>
        return LFS_ERR_CORRUPT;
 8003338:	f06f 0553 	mvn.w	r5, #83	; 0x53
 800333c:	e7bd      	b.n	80032ba <lfs_dir_fetchmatch+0x36a>
 800333e:	bf00      	nop
 8003340:	08008b74 	.word	0x08008b74
 8003344:	080092ca 	.word	0x080092ca
 8003348:	0800967e 	.word	0x0800967e

0800334c <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 800334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
 8003350:	2301      	movs	r3, #1
 8003352:	2400      	movs	r4, #0
 8003354:	e9c2 4306 	strd	r4, r3, [r2, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8003358:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80033bc <lfs_fs_parent+0x70>
 800335c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80033c0 <lfs_fs_parent+0x74>
 8003360:	f8df a060 	ldr.w	sl, [pc, #96]	; 80033c4 <lfs_fs_parent+0x78>
        lfs_mdir_t *parent) {
 8003364:	b088      	sub	sp, #32
 8003366:	4606      	mov	r6, r0
 8003368:	460f      	mov	r7, r1
 800336a:	4615      	mov	r5, r2
    while (!lfs_pair_isnull(parent->tail)) {
 800336c:	f105 0218 	add.w	r2, r5, #24
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff fa35 	bl	80027e0 <lfs_pair_isnull>
 8003376:	b110      	cbz	r0, 800337e <lfs_fs_parent+0x32>
    return LFS_ERR_NOENT;
 8003378:	f06f 0001 	mvn.w	r0, #1
 800337c:	e018      	b.n	80033b0 <lfs_fs_parent+0x64>
        if (cycle >= lfs->cfg->block_count/2) {
 800337e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8003386:	d216      	bcs.n	80033b6 <lfs_fs_parent+0x6a>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9306      	str	r3, [sp, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8003390:	ab05      	add	r3, sp, #20
 8003392:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8003396:	e9cd 9000 	strd	r9, r0, [sp]
 800339a:	4653      	mov	r3, sl
 800339c:	4629      	mov	r1, r5
 800339e:	4630      	mov	r0, r6
        cycle += 1;
 80033a0:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80033a2:	9605      	str	r6, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80033a4:	f7ff fdd4 	bl	8002f50 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0df      	beq.n	800336c <lfs_fs_parent+0x20>
 80033ac:	1c83      	adds	r3, r0, #2
 80033ae:	d0dd      	beq.n	800336c <lfs_fs_parent+0x20>
}
 80033b0:	b008      	add	sp, #32
 80033b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
 80033b6:	f06f 0053 	mvn.w	r0, #83	; 0x53
 80033ba:	e7f9      	b.n	80033b0 <lfs_fs_parent+0x64>
 80033bc:	08002f11 	.word	0x08002f11
 80033c0:	20000008 	.word	0x20000008
 80033c4:	7ff003ff 	.word	0x7ff003ff

080033c8 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80033c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80033ca:	2300      	movs	r3, #0
 80033cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f7ff fdba 	bl	8002f50 <lfs_dir_fetchmatch>
}
 80033dc:	b005      	add	sp, #20
 80033de:	f85d fb04 	ldr.w	pc, [sp], #4

080033e2 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80033e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	2400      	movs	r4, #0
 80033ea:	e9c2 4306 	strd	r4, r3, [r2, #24]
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80033ee:	4607      	mov	r7, r0
 80033f0:	4688      	mov	r8, r1
 80033f2:	4615      	mov	r5, r2
    while (!lfs_pair_isnull(pdir->tail)) {
 80033f4:	f102 0618 	add.w	r6, r2, #24
 80033f8:	4630      	mov	r0, r6
 80033fa:	f7ff f9f1 	bl	80027e0 <lfs_pair_isnull>
 80033fe:	b110      	cbz	r0, 8003406 <lfs_fs_pred+0x24>
    return LFS_ERR_NOENT;
 8003400:	f06f 0001 	mvn.w	r0, #1
 8003404:	e011      	b.n	800342a <lfs_fs_pred+0x48>
        if (cycle >= lfs->cfg->block_count/2) {
 8003406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 800340e:	d20e      	bcs.n	800342e <lfs_fs_pred+0x4c>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8003410:	4641      	mov	r1, r8
 8003412:	4630      	mov	r0, r6
        cycle += 1;
 8003414:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8003416:	f7ff f9ed 	bl	80027f4 <lfs_pair_cmp>
 800341a:	b130      	cbz	r0, 800342a <lfs_fs_pred+0x48>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800341c:	4632      	mov	r2, r6
 800341e:	4629      	mov	r1, r5
 8003420:	4638      	mov	r0, r7
 8003422:	f7ff ffd1 	bl	80033c8 <lfs_dir_fetch>
        if (err) {
 8003426:	2800      	cmp	r0, #0
 8003428:	d0e6      	beq.n	80033f8 <lfs_fs_pred+0x16>
}
 800342a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
 800342e:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003432:	e7fa      	b.n	800342a <lfs_fs_pred+0x48>

08003434 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 8003434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003438:	b08d      	sub	sp, #52	; 0x34
 800343a:	4680      	mov	r8, r0
 800343c:	460e      	mov	r6, r1
 800343e:	9206      	str	r2, [sp, #24]
    const char *name = *path;
 8003440:	6814      	ldr	r4, [r2, #0]
    if (id) {
 8003442:	9305      	str	r3, [sp, #20]
 8003444:	b11b      	cbz	r3, 800344e <lfs_dir_find+0x1a>
        *id = 0x3ff;
 8003446:	9a05      	ldr	r2, [sp, #20]
 8003448:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800344c:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 800344e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8003452:	61b3      	str	r3, [r6, #24]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003454:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003584 <lfs_dir_find+0x150>
    dir->tail[1] = lfs->root[1];
 8003458:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800345c:	61f3      	str	r3, [r6, #28]
        name += strspn(name, "/");
 800345e:	4944      	ldr	r1, [pc, #272]	; (8003570 <lfs_dir_find+0x13c>)
 8003460:	4620      	mov	r0, r4
 8003462:	f004 fe34 	bl	80080ce <strspn>
 8003466:	1825      	adds	r5, r4, r0
 8003468:	4682      	mov	sl, r0
        lfs_size_t namelen = strcspn(name, "/");
 800346a:	4941      	ldr	r1, [pc, #260]	; (8003570 <lfs_dir_find+0x13c>)
 800346c:	4628      	mov	r0, r5
 800346e:	f004 fe1c 	bl	80080aa <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8003472:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
 8003474:	4607      	mov	r7, r0
 8003476:	eb05 0900 	add.w	r9, r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800347a:	d105      	bne.n	8003488 <lfs_dir_find+0x54>
 800347c:	f814 200a 	ldrb.w	r2, [r4, sl]
 8003480:	2a2e      	cmp	r2, #46	; 0x2e
 8003482:	d10a      	bne.n	800349a <lfs_dir_find+0x66>
            name += namelen;
 8003484:	464c      	mov	r4, r9
            goto nextname;
 8003486:	e7ea      	b.n	800345e <lfs_dir_find+0x2a>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8003488:	2802      	cmp	r0, #2
 800348a:	d106      	bne.n	800349a <lfs_dir_find+0x66>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800348c:	4602      	mov	r2, r0
 800348e:	4939      	ldr	r1, [pc, #228]	; (8003574 <lfs_dir_find+0x140>)
 8003490:	4628      	mov	r0, r5
 8003492:	f004 fa3b 	bl	800790c <memcmp>
 8003496:	2800      	cmp	r0, #0
 8003498:	d0f4      	beq.n	8003484 <lfs_dir_find+0x50>
        const char *suffix = name + namelen;
 800349a:	464c      	mov	r4, r9
        int depth = 1;
 800349c:	f04f 0a01 	mov.w	sl, #1
            suffix += strspn(suffix, "/");
 80034a0:	4933      	ldr	r1, [pc, #204]	; (8003570 <lfs_dir_find+0x13c>)
 80034a2:	4648      	mov	r0, r9
 80034a4:	f004 fe13 	bl	80080ce <strspn>
 80034a8:	4481      	add	r9, r0
            sufflen = strcspn(suffix, "/");
 80034aa:	4931      	ldr	r1, [pc, #196]	; (8003570 <lfs_dir_find+0x13c>)
 80034ac:	4648      	mov	r0, r9
 80034ae:	f004 fdfc 	bl	80080aa <strcspn>
            if (sufflen == 0) {
 80034b2:	4603      	mov	r3, r0
 80034b4:	b198      	cbz	r0, 80034de <lfs_dir_find+0xaa>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80034b6:	2802      	cmp	r0, #2
 80034b8:	d10d      	bne.n	80034d6 <lfs_dir_find+0xa2>
 80034ba:	4602      	mov	r2, r0
 80034bc:	9007      	str	r0, [sp, #28]
 80034be:	492d      	ldr	r1, [pc, #180]	; (8003574 <lfs_dir_find+0x140>)
 80034c0:	4648      	mov	r0, r9
 80034c2:	f004 fa23 	bl	800790c <memcmp>
 80034c6:	9b07      	ldr	r3, [sp, #28]
 80034c8:	b928      	cbnz	r0, 80034d6 <lfs_dir_find+0xa2>
                if (depth == 0) {
 80034ca:	f1ba 0a01 	subs.w	sl, sl, #1
 80034ce:	d104      	bne.n	80034da <lfs_dir_find+0xa6>
                    name = suffix + sufflen;
 80034d0:	f109 0402 	add.w	r4, r9, #2
                    goto nextname;
 80034d4:	e7c3      	b.n	800345e <lfs_dir_find+0x2a>
                depth += 1;
 80034d6:	f10a 0a01 	add.w	sl, sl, #1
            suffix += sufflen;
 80034da:	4499      	add	r9, r3
            suffix += strspn(suffix, "/");
 80034dc:	e7e0      	b.n	80034a0 <lfs_dir_find+0x6c>
        if (name[0] == '\0') {
 80034de:	782a      	ldrb	r2, [r5, #0]
 80034e0:	2a00      	cmp	r2, #0
 80034e2:	d03e      	beq.n	8003562 <lfs_dir_find+0x12e>
        *path = name;
 80034e4:	9b06      	ldr	r3, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 80034e6:	ea4f 521b 	mov.w	r2, fp, lsr #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80034ea:	2a02      	cmp	r2, #2
        *path = name;
 80034ec:	601d      	str	r5, [r3, #0]
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80034ee:	d13c      	bne.n	800356a <lfs_dir_find+0x136>
    return (tag & 0x000ffc00) >> 10;
 80034f0:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 80034f4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80034f8:	4293      	cmp	r3, r2
 80034fa:	f106 0918 	add.w	r9, r6, #24
 80034fe:	d123      	bne.n	8003548 <lfs_dir_find+0x114>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003500:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
 8003504:	212f      	movs	r1, #47	; 0x2f
 8003506:	4628      	mov	r0, r5
 8003508:	f004 fdba 	bl	8008080 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800350c:	9b05      	ldr	r3, [sp, #20]
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <lfs_dir_find+0x144>)
 8003510:	f8cd a00c 	str.w	sl, [sp, #12]
 8003514:	2800      	cmp	r0, #0
 8003516:	bf18      	it	ne
 8003518:	2300      	movne	r3, #0
 800351a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800351e:	9700      	str	r7, [sp, #0]
 8003520:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8003524:	464a      	mov	r2, r9
 8003526:	4631      	mov	r1, r6
 8003528:	4640      	mov	r0, r8
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800352a:	e9cd 8509 	strd	r8, r5, [sp, #36]	; 0x24
 800352e:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003530:	f7ff fd0e 	bl	8002f50 <lfs_dir_fetchmatch>
            if (tag < 0) {
 8003534:	f1b0 0b00 	subs.w	fp, r0, #0
 8003538:	db13      	blt.n	8003562 <lfs_dir_find+0x12e>
            if (tag) {
 800353a:	d190      	bne.n	800345e <lfs_dir_find+0x2a>
            if (!dir->split) {
 800353c:	7df3      	ldrb	r3, [r6, #23]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e0      	bne.n	8003504 <lfs_dir_find+0xd0>
                return LFS_ERR_NOENT;
 8003542:	f06f 0b01 	mvn.w	fp, #1
 8003546:	e00c      	b.n	8003562 <lfs_dir_find+0x12e>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003548:	4a0c      	ldr	r2, [pc, #48]	; (800357c <lfs_dir_find+0x148>)
 800354a:	f8cd 9000 	str.w	r9, [sp]
 800354e:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8003552:	4631      	mov	r1, r6
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <lfs_dir_find+0x14c>)
 8003556:	4640      	mov	r0, r8
 8003558:	f7ff fcb4 	bl	8002ec4 <lfs_dir_get>
            if (res < 0) {
 800355c:	f1b0 0b00 	subs.w	fp, r0, #0
 8003560:	dace      	bge.n	8003500 <lfs_dir_find+0xcc>
}
 8003562:	4658      	mov	r0, fp
 8003564:	b00d      	add	sp, #52	; 0x34
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
 800356a:	f06f 0b13 	mvn.w	fp, #19
 800356e:	e7f8      	b.n	8003562 <lfs_dir_find+0x12e>
 8003570:	08009300 	.word	0x08009300
 8003574:	08009302 	.word	0x08009302
 8003578:	08003bb7 	.word	0x08003bb7
 800357c:	20000008 	.word	0x20000008
 8003580:	700ffc00 	.word	0x700ffc00
 8003584:	002ffc00 	.word	0x002ffc00

08003588 <lfs_ctz_traverse.part.25>:
static int lfs_ctz_traverse(lfs_t *lfs,
 8003588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	461e      	mov	r6, r3
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8003590:	e9dd 3810 	ldrd	r3, r8, [sp, #64]	; 0x40
static int lfs_ctz_traverse(lfs_t *lfs,
 8003594:	4689      	mov	r9, r1
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8003596:	4607      	mov	r7, r0
 8003598:	a908      	add	r1, sp, #32
 800359a:	3b01      	subs	r3, #1
 800359c:	f841 3d0c 	str.w	r3, [r1, #-12]!
 80035a0:	f857 0f68 	ldr.w	r0, [r7, #104]!
static int lfs_ctz_traverse(lfs_t *lfs,
 80035a4:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80035a6:	f7ff fb1f 	bl	8002be8 <lfs_ctz_index.isra.22>
 80035aa:	4605      	mov	r5, r0
        int err = cb(data, head);
 80035ac:	4631      	mov	r1, r6
 80035ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80035b0:	47c0      	blx	r8
        if (err) {
 80035b2:	4602      	mov	r2, r0
 80035b4:	bb10      	cbnz	r0, 80035fc <lfs_ctz_traverse.part.25+0x74>
        if (index == 0) {
 80035b6:	b30d      	cbz	r5, 80035fc <lfs_ctz_traverse.part.25+0x74>
        int count = 2 - (index & 1);
 80035b8:	f005 0401 	and.w	r4, r5, #1
 80035bc:	f1c4 0402 	rsb	r4, r4, #2
                pcache, rcache, count*sizeof(head),
 80035c0:	00a3      	lsls	r3, r4, #2
        err = lfs_bd_read(lfs,
 80035c2:	a906      	add	r1, sp, #24
 80035c4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80035c8:	4652      	mov	r2, sl
 80035ca:	9303      	str	r3, [sp, #12]
 80035cc:	9600      	str	r6, [sp, #0]
 80035ce:	4649      	mov	r1, r9
 80035d0:	4638      	mov	r0, r7
 80035d2:	f7ff fb23 	bl	8002c1c <lfs_bd_read.isra.23>
        if (err) {
 80035d6:	4602      	mov	r2, r0
 80035d8:	b980      	cbnz	r0, 80035fc <lfs_ctz_traverse.part.25+0x74>
        for (int i = 0; i < count-1; i++) {
 80035da:	1e66      	subs	r6, r4, #1
 80035dc:	4296      	cmp	r6, r2
 80035de:	dc06      	bgt.n	80035ee <lfs_ctz_traverse.part.25+0x66>
        head = heads[count-1];
 80035e0:	ab08      	add	r3, sp, #32
 80035e2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        index -= count;
 80035e6:	1b2d      	subs	r5, r5, r4
        head = heads[count-1];
 80035e8:	f856 6c08 	ldr.w	r6, [r6, #-8]
 80035ec:	e7de      	b.n	80035ac <lfs_ctz_traverse.part.25+0x24>
            err = cb(data, heads[i]);
 80035ee:	9906      	ldr	r1, [sp, #24]
 80035f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80035f2:	47c0      	blx	r8
        for (int i = 0; i < count-1; i++) {
 80035f4:	2201      	movs	r2, #1
            if (err) {
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d0f0      	beq.n	80035dc <lfs_ctz_traverse.part.25+0x54>
            err = cb(data, heads[i]);
 80035fa:	4602      	mov	r2, r0
}
 80035fc:	4610      	mov	r0, r2
 80035fe:	b008      	add	sp, #32
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003604 <lfs_dir_getinfo.part.34>:
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	461c      	mov	r4, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8003608:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
 800360a:	b085      	sub	sp, #20
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800360c:	0296      	lsls	r6, r2, #10
 800360e:	3301      	adds	r3, #1
 8003610:	f104 0208 	add.w	r2, r4, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8003614:	9200      	str	r2, [sp, #0]
 8003616:	4333      	orrs	r3, r6
 8003618:	4a13      	ldr	r2, [pc, #76]	; (8003668 <lfs_dir_getinfo.part.34+0x64>)
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
 800361a:	4605      	mov	r5, r0
 800361c:	460f      	mov	r7, r1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800361e:	f7ff fc51 	bl	8002ec4 <lfs_dir_get>
    if (tag < 0) {
 8003622:	2800      	cmp	r0, #0
 8003624:	db16      	blt.n	8003654 <lfs_dir_getinfo.part.34+0x50>
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003626:	ab02      	add	r3, sp, #8
    return (tag & 0x7ff00000) >> 20;
 8003628:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
    info->type = lfs_tag_type3(tag);
 8003630:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003632:	f043 0308 	orr.w	r3, r3, #8
 8003636:	4a0d      	ldr	r2, [pc, #52]	; (800366c <lfs_dir_getinfo.part.34+0x68>)
 8003638:	4639      	mov	r1, r7
 800363a:	4628      	mov	r0, r5
 800363c:	f7ff fc42 	bl	8002ec4 <lfs_dir_get>
    if (tag < 0) {
 8003640:	2800      	cmp	r0, #0
 8003642:	db07      	blt.n	8003654 <lfs_dir_getinfo.part.34+0x50>
    return (tag & 0x7ff00000) >> 20;
 8003644:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8003646:	f240 2202 	movw	r2, #514	; 0x202
 800364a:	4293      	cmp	r3, r2
 800364c:	d104      	bne.n	8003658 <lfs_dir_getinfo.part.34+0x54>
        info->size = ctz.size;
 800364e:	9b03      	ldr	r3, [sp, #12]
 8003650:	6063      	str	r3, [r4, #4]
    return 0;
 8003652:	2000      	movs	r0, #0
}
 8003654:	b005      	add	sp, #20
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8003658:	f240 2201 	movw	r2, #513	; 0x201
 800365c:	4293      	cmp	r3, r2
    return tag & 0x000003ff;
 800365e:	bf04      	itt	eq
 8003660:	f3c0 0009 	ubfxeq	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 8003664:	6060      	streq	r0, [r4, #4]
 8003666:	e7f4      	b.n	8003652 <lfs_dir_getinfo.part.34+0x4e>
 8003668:	780ffc00 	.word	0x780ffc00
 800366c:	700ffc00 	.word	0x700ffc00

08003670 <lfs_ctz_find.constprop.35>:
static int lfs_ctz_find(lfs_t *lfs,
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	b089      	sub	sp, #36	; 0x24
 8003676:	4605      	mov	r5, r0
 8003678:	4689      	mov	r9, r1
 800367a:	9205      	str	r2, [sp, #20]
 800367c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (size == 0) {
 800367e:	b943      	cbnz	r3, 8003692 <lfs_ctz_find.constprop.35+0x22>
        *block = LFS_BLOCK_NULL;
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	603a      	str	r2, [r7, #0]
    *off = pos;
 8003686:	9a14      	ldr	r2, [sp, #80]	; 0x50
    return 0;
 8003688:	2000      	movs	r0, #0
    *off = pos;
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	b009      	add	sp, #36	; 0x24
 800368e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8003692:	a908      	add	r1, sp, #32
 8003694:	3b01      	subs	r3, #1
 8003696:	f841 3d04 	str.w	r3, [r1, #-4]!
 800369a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800369c:	f7ff faa4 	bl	8002be8 <lfs_ctz_index.isra.22>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80036a0:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80036a2:	4606      	mov	r6, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80036a4:	f855 0f68 	ldr.w	r0, [r5, #104]!
 80036a8:	f7ff fa9e 	bl	8002be8 <lfs_ctz_index.isra.22>
        int err = lfs_bd_read(lfs,
 80036ac:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80036b0:	4680      	mov	r8, r0
        int err = lfs_bd_read(lfs,
 80036b2:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
 80036b6:	45b0      	cmp	r8, r6
 80036b8:	9a05      	ldr	r2, [sp, #20]
 80036ba:	d302      	bcc.n	80036c2 <lfs_ctz_find.constprop.35+0x52>
    *block = head;
 80036bc:	603a      	str	r2, [r7, #0]
    *off = pos;
 80036be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036c0:	e7e1      	b.n	8003686 <lfs_ctz_find.constprop.35+0x16>
                lfs_npw2(current-target+1) - 1,
 80036c2:	eba6 0408 	sub.w	r4, r6, r8
    return (uint32_t)(32 - __builtin_clz(a-1));
 80036c6:	fab4 f484 	clz	r4, r4
    return (uint32_t)__builtin_ctz(a);
 80036ca:	fa96 f3a6 	rbit	r3, r6
 80036ce:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
 80036d2:	f1c4 041f 	rsb	r4, r4, #31
    return (a < b) ? a : b;
 80036d6:	429c      	cmp	r4, r3
 80036d8:	bf28      	it	cs
 80036da:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 80036dc:	00a3      	lsls	r3, r4, #2
 80036de:	e9cd 2300 	strd	r2, r3, [sp]
 80036e2:	e9cd ba02 	strd	fp, sl, [sp, #8]
 80036e6:	2304      	movs	r3, #4
 80036e8:	464a      	mov	r2, r9
 80036ea:	2100      	movs	r1, #0
 80036ec:	4628      	mov	r0, r5
 80036ee:	f7ff fa95 	bl	8002c1c <lfs_bd_read.isra.23>
        if (err) {
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1ca      	bne.n	800368c <lfs_ctz_find.constprop.35+0x1c>
        current -= 1 << skip;
 80036f6:	2301      	movs	r3, #1
 80036f8:	fa03 f404 	lsl.w	r4, r3, r4
 80036fc:	1b36      	subs	r6, r6, r4
 80036fe:	e7da      	b.n	80036b6 <lfs_ctz_find.constprop.35+0x46>

08003700 <lfs_dir_getread.part.26.constprop.37>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	b087      	sub	sp, #28
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003706:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80037ac <lfs_dir_getread.part.26.constprop.37+0xac>
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 800370a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800370c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800370e:	4607      	mov	r7, r0
 8003710:	4688      	mov	r8, r1
 8003712:	4615      	mov	r5, r2
        rcache->block = LFS_BLOCK_INLINE;
 8003714:	f06f 0901 	mvn.w	r9, #1
    return lfs_aligndown(a + alignment-1, alignment);
 8003718:	f103 3aff 	add.w	sl, r3, #4294967295
    while (size > 0) {
 800371c:	b90e      	cbnz	r6, 8003722 <lfs_dir_getread.part.26.constprop.37+0x22>
    return 0;
 800371e:	4630      	mov	r0, r6
 8003720:	e041      	b.n	80037a6 <lfs_dir_getread.part.26.constprop.37+0xa6>
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	68e8      	ldr	r0, [r5, #12]
 8003726:	3302      	adds	r3, #2
 8003728:	d118      	bne.n	800375c <lfs_dir_getread.part.26.constprop.37+0x5c>
                off < rcache->off + rcache->size) {
 800372a:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 800372e:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003730:	429c      	cmp	r4, r3
 8003732:	d213      	bcs.n	800375c <lfs_dir_getread.part.26.constprop.37+0x5c>
            if (off >= rcache->off) {
 8003734:	428c      	cmp	r4, r1
 8003736:	d311      	bcc.n	800375c <lfs_dir_getread.part.26.constprop.37+0x5c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003738:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 800373a:	42b3      	cmp	r3, r6
 800373c:	bf28      	it	cs
 800373e:	4633      	movcs	r3, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003740:	1a61      	subs	r1, r4, r1
 8003742:	461a      	mov	r2, r3
 8003744:	4401      	add	r1, r0
 8003746:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003748:	9305      	str	r3, [sp, #20]
 800374a:	f004 f8ee 	bl	800792a <memcpy>
                data += diff;
 800374e:	9b05      	ldr	r3, [sp, #20]
 8003750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003752:	441a      	add	r2, r3
 8003754:	9212      	str	r2, [sp, #72]	; 0x48
                off += diff;
 8003756:	441c      	add	r4, r3
                size -= diff;
 8003758:	1af6      	subs	r6, r6, r3
 800375a:	e7df      	b.n	800371c <lfs_dir_getread.part.26.constprop.37+0x1c>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800375c:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
        rcache->block = LFS_BLOCK_INLINE;
 8003760:	f8c5 9000 	str.w	r9, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003764:	f8dc 1014 	ldr.w	r1, [ip, #20]
    return a - (a % alignment);
 8003768:	fbb4 f2f1 	udiv	r2, r4, r1
    return lfs_aligndown(a + alignment-1, alignment);
 800376c:	eb0a 0301 	add.w	r3, sl, r1
 8003770:	4423      	add	r3, r4
    return a - (a % alignment);
 8003772:	fb01 4212 	mls	r2, r1, r2, r4
 8003776:	fbb3 fef1 	udiv	lr, r3, r1
 800377a:	fb01 311e 	mls	r1, r1, lr, r3
 800377e:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 8003780:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8003784:	428b      	cmp	r3, r1
 8003786:	bf28      	it	cs
 8003788:	460b      	movcs	r3, r1
    return a - (a % alignment);
 800378a:	1aa2      	subs	r2, r4, r2
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800378c:	e9cd 0301 	strd	r0, r3, [sp, #4]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003790:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003792:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003794:	9200      	str	r2, [sp, #0]
 8003796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003798:	465a      	mov	r2, fp
 800379a:	4641      	mov	r1, r8
 800379c:	4638      	mov	r0, r7
 800379e:	f7ff faf9 	bl	8002d94 <lfs_dir_getslice>
        if (err < 0) {
 80037a2:	2800      	cmp	r0, #0
 80037a4:	daba      	bge.n	800371c <lfs_dir_getread.part.26.constprop.37+0x1c>
}
 80037a6:	b007      	add	sp, #28
 80037a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ac:	fff7fc00 	.word	0xfff7fc00

080037b0 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	4691      	mov	r9, r2
    if (file->pos >= file->ctz.size) {
 80037b6:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80037b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80037ba:	4296      	cmp	r6, r2
        void *buffer, lfs_size_t size) {
 80037bc:	b085      	sub	sp, #20
 80037be:	4607      	mov	r7, r0
 80037c0:	460c      	mov	r4, r1
    if (file->pos >= file->ctz.size) {
 80037c2:	d264      	bcs.n	800388e <lfs_file_flushedread+0xde>
    size = lfs_min(size, file->ctz.size - file->pos);
 80037c4:	1b96      	subs	r6, r2, r6
    return (a < b) ? a : b;
 80037c6:	429e      	cmp	r6, r3
 80037c8:	bf28      	it	cs
 80037ca:	461e      	movcs	r6, r3
            int err = lfs_dir_getread(lfs, &file->m,
 80037cc:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8003898 <lfs_file_flushedread+0xe8>
    nsize = size;
 80037d0:	46b0      	mov	r8, r6
 80037d2:	f101 0a40 	add.w	sl, r1, #64	; 0x40
    while (nsize > 0) {
 80037d6:	f1b8 0f00 	cmp.w	r8, #0
 80037da:	d101      	bne.n	80037e0 <lfs_file_flushedread+0x30>
    return size;
 80037dc:	4630      	mov	r0, r6
 80037de:	e018      	b.n	8003812 <lfs_file_flushedread+0x62>
        if (!(file->flags & LFS_F_READING) ||
 80037e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80037e2:	0351      	lsls	r1, r2, #13
 80037e4:	d504      	bpl.n	80037f0 <lfs_file_flushedread+0x40>
                file->off == lfs->cfg->block_size) {
 80037e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
 80037e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4299      	cmp	r1, r3
 80037ee:	d11b      	bne.n	8003828 <lfs_file_flushedread+0x78>
            if (!(file->flags & LFS_F_INLINE)) {
 80037f0:	02d2      	lsls	r2, r2, #11
 80037f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037f4:	d410      	bmi.n	8003818 <lfs_file_flushedread+0x68>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80037f6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80037fa:	9202      	str	r2, [sp, #8]
 80037fc:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8003800:	e9cd 3200 	strd	r3, r2, [sp]
 8003804:	4651      	mov	r1, sl
 8003806:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800380a:	4638      	mov	r0, r7
 800380c:	f7ff ff30 	bl	8003670 <lfs_ctz_find.constprop.35>
                if (err) {
 8003810:	b130      	cbz	r0, 8003820 <lfs_file_flushedread+0x70>
}
 8003812:	b005      	add	sp, #20
 8003814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                file->block = LFS_BLOCK_INLINE;
 8003818:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
 800381c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            file->flags |= LFS_F_READING;
 8003820:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003826:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8003828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800382c:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
 800382e:	6b21      	ldr	r1, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8003830:	1a9d      	subs	r5, r3, r2
 8003832:	4545      	cmp	r5, r8
 8003834:	bf28      	it	cs
 8003836:	4645      	movcs	r5, r8
        if (file->flags & LFS_F_INLINE) {
 8003838:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 800383c:	d01c      	beq.n	8003878 <lfs_file_flushedread+0xc8>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800383e:	88a0      	ldrh	r0, [r4, #4]
    if (off+size > lfs->cfg->block_size) {
 8003840:	eb02 0c05 	add.w	ip, r2, r5
 8003844:	4563      	cmp	r3, ip
            int err = lfs_dir_getread(lfs, &file->m,
 8003846:	f104 0108 	add.w	r1, r4, #8
 800384a:	ea4b 2080 	orr.w	r0, fp, r0, lsl #10
    if (off+size > lfs->cfg->block_size) {
 800384e:	d320      	bcc.n	8003892 <lfs_file_flushedread+0xe2>
 8003850:	e9cd 0200 	strd	r0, r2, [sp]
 8003854:	e9cd 9502 	strd	r9, r5, [sp, #8]
 8003858:	4652      	mov	r2, sl
 800385a:	4638      	mov	r0, r7
 800385c:	f7ff ff50 	bl	8003700 <lfs_dir_getread.part.26.constprop.37>
            if (err) {
 8003860:	2800      	cmp	r0, #0
 8003862:	d1d6      	bne.n	8003812 <lfs_file_flushedread+0x62>
        file->pos += diff;
 8003864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003866:	442b      	add	r3, r5
 8003868:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800386a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800386c:	442b      	add	r3, r5
 800386e:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 8003870:	44a9      	add	r9, r5
        nsize -= diff;
 8003872:	eba8 0805 	sub.w	r8, r8, r5
 8003876:	e7ae      	b.n	80037d6 <lfs_file_flushedread+0x26>
            int err = lfs_bd_read(lfs,
 8003878:	9201      	str	r2, [sp, #4]
 800387a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800387c:	9200      	str	r2, [sp, #0]
 800387e:	e9cd 9502 	strd	r9, r5, [sp, #8]
 8003882:	4652      	mov	r2, sl
 8003884:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003888:	f7ff f9c8 	bl	8002c1c <lfs_bd_read.isra.23>
 800388c:	e7e8      	b.n	8003860 <lfs_file_flushedread+0xb0>
        return 0;
 800388e:	2000      	movs	r0, #0
 8003890:	e7bf      	b.n	8003812 <lfs_file_flushedread+0x62>
        return LFS_ERR_CORRUPT;
 8003892:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003896:	e7bc      	b.n	8003812 <lfs_file_flushedread+0x62>
 8003898:	20100000 	.word	0x20100000

0800389c <lfs_dir_traverse.constprop.39>:
static int lfs_dir_traverse(lfs_t *lfs,
 800389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b0ab      	sub	sp, #172	; 0xac
 80038a2:	469a      	mov	sl, r3
 80038a4:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 80038a8:	9305      	str	r3, [sp, #20]
    unsigned sp = 0;
 80038aa:	2600      	movs	r6, #0
static int lfs_dir_traverse(lfs_t *lfs,
 80038ac:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80038b0:	f8bd 90dc 	ldrh.w	r9, [sp, #220]	; 0xdc
 80038b4:	9006      	str	r0, [sp, #24]
 80038b6:	468b      	mov	fp, r1
 80038b8:	9304      	str	r3, [sp, #16]
    unsigned sp = 0;
 80038ba:	4637      	mov	r7, r6
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80038bc:	4650      	mov	r0, sl
 80038be:	f7fe ffaa 	bl	8002816 <lfs_tag_dsize>
 80038c2:	f8db 300c 	ldr.w	r3, [fp, #12]
 80038c6:	eb00 0802 	add.w	r8, r0, r2
 80038ca:	4598      	cmp	r8, r3
 80038cc:	d238      	bcs.n	8003940 <lfs_dir_traverse.constprop.39+0xa4>
                int err = lfs_bd_read(lfs,
 80038ce:	aa09      	add	r2, sp, #36	; 0x24
 80038d0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80038d4:	2304      	movs	r3, #4
 80038d6:	9303      	str	r3, [sp, #12]
 80038d8:	f8db 2000 	ldr.w	r2, [fp]
 80038dc:	9200      	str	r2, [sp, #0]
 80038de:	9a06      	ldr	r2, [sp, #24]
 80038e0:	4610      	mov	r0, r2
 80038e2:	2100      	movs	r1, #0
 80038e4:	3068      	adds	r0, #104	; 0x68
 80038e6:	f7ff f999 	bl	8002c1c <lfs_bd_read.isra.23>
                if (err) {
 80038ea:	2800      	cmp	r0, #0
 80038ec:	f040 8122 	bne.w	8003b34 <lfs_dir_traverse.constprop.39+0x298>
    return __builtin_bswap32(a);
 80038f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f2:	ba1b      	rev	r3, r3
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80038f4:	ea8a 0a03 	eor.w	sl, sl, r3
                disk.block = dir->pair[0];
 80038f8:	f8db 3000 	ldr.w	r3, [fp]
 80038fc:	930a      	str	r3, [sp, #40]	; 0x28
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80038fe:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
                disk.off = off+sizeof(lfs_tag_t);
 8003902:	f108 0304 	add.w	r3, r8, #4
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003906:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                disk.off = off+sizeof(lfs_tag_t);
 800390a:	930b      	str	r3, [sp, #44]	; 0x2c
                buffer = &disk;
 800390c:	ad0a      	add	r5, sp, #40	; 0x28
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800390e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8003910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003916:	0d1b      	lsrs	r3, r3, #20
 8003918:	ea81 0407 	eor.w	r4, r1, r7
 800391c:	051b      	lsls	r3, r3, #20
 800391e:	401c      	ands	r4, r3
 8003920:	d151      	bne.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
            if (lfs_tag_id(tmask) != 0) {
 8003922:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8003924:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a8 	beq.w	8003a7e <lfs_dir_traverse.constprop.39+0x1e2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800392e:	2e02      	cmp	r6, #2
 8003930:	d916      	bls.n	8003960 <lfs_dir_traverse.constprop.39+0xc4>
 8003932:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <lfs_dir_traverse.constprop.39+0x2a0>)
 8003934:	4a82      	ldr	r2, [pc, #520]	; (8003b40 <lfs_dir_traverse.constprop.39+0x2a4>)
 8003936:	4883      	ldr	r0, [pc, #524]	; (8003b44 <lfs_dir_traverse.constprop.39+0x2a8>)
 8003938:	f240 314d 	movw	r1, #845	; 0x34d
 800393c:	f003 ff58 	bl	80077f0 <__assert_func>
            } else if (attrcount > 0) {
 8003940:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8003942:	2b00      	cmp	r3, #0
 8003944:	f340 80f4 	ble.w	8003b30 <lfs_dir_traverse.constprop.39+0x294>
                tag = attrs[0].tag;
 8003948:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	9309      	str	r3, [sp, #36]	; 0x24
                buffer = attrs[0].buffer;
 800394e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8003950:	685d      	ldr	r5, [r3, #4]
                attrs += 1;
 8003952:	3308      	adds	r3, #8
 8003954:	9334      	str	r3, [sp, #208]	; 0xd0
                attrcount -= 1;
 8003956:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8003958:	3b01      	subs	r3, #1
 800395a:	9335      	str	r3, [sp, #212]	; 0xd4
 800395c:	4690      	mov	r8, r2
 800395e:	e7d6      	b.n	800390e <lfs_dir_traverse.constprop.39+0x72>
                stack[sp] = (struct lfs_dir_traverse){
 8003960:	223c      	movs	r2, #60	; 0x3c
 8003962:	4372      	muls	r2, r6
 8003964:	ab2a      	add	r3, sp, #168	; 0xa8
 8003966:	4413      	add	r3, r2
 8003968:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800396a:	f843 0c6c 	str.w	r0, [r3, #-108]
 800396e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8003970:	f843 0c68 	str.w	r0, [r3, #-104]
 8003974:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8003976:	f823 9c5c 	strh.w	r9, [r3, #-92]
 800397a:	e943 0719 	strd	r0, r7, [r3, #-100]	; 0x64
 800397e:	9805      	ldr	r0, [sp, #20]
 8003980:	f823 0c5a 	strh.w	r0, [r3, #-90]
 8003984:	9804      	ldr	r0, [sp, #16]
 8003986:	f823 0c58 	strh.w	r0, [r3, #-88]
 800398a:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800398c:	f843 0c54 	str.w	r0, [r3, #-84]
 8003990:	983b      	ldr	r0, [sp, #236]	; 0xec
 8003992:	f843 ac70 	str.w	sl, [r3, #-112]
 8003996:	e943 0114 	strd	r0, r1, [r3, #-80]	; 0x50
 800399a:	a90a      	add	r1, sp, #40	; 0x28
 800399c:	c903      	ldmia	r1, {r0, r1}
 800399e:	f843 5c48 	str.w	r5, [r3, #-72]
 80039a2:	e943 b81e 	strd	fp, r8, [r3, #-120]	; 0x78
 80039a6:	3b44      	subs	r3, #68	; 0x44
 80039a8:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 80039ac:	ab2a      	add	r3, sp, #168	; 0xa8
 80039ae:	441a      	add	r2, r3
 80039b0:	f1a2 034c 	sub.w	r3, r2, #76	; 0x4c
                end = 0;
 80039b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
                data = &stack[sp-1].tag;
 80039b8:	933b      	str	r3, [sp, #236]	; 0xec
                cb = lfs_dir_traverse_filter;
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <lfs_dir_traverse.constprop.39+0x2ac>)
                tmask = 0;
 80039bc:	9436      	str	r4, [sp, #216]	; 0xd8
                sp += 1;
 80039be:	3601      	adds	r6, #1
                ttag = 0;
 80039c0:	4627      	mov	r7, r4
                cb = lfs_dir_traverse_filter;
 80039c2:	933a      	str	r3, [sp, #232]	; 0xe8
                begin = 0;
 80039c4:	46a1      	mov	r9, r4
            off = 0;
 80039c6:	4642      	mov	r2, r8
 80039c8:	e778      	b.n	80038bc <lfs_dir_traverse.constprop.39+0x20>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80039ca:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80039ce:	d11d      	bne.n	8003a0c <lfs_dir_traverse.constprop.39+0x170>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80039d0:	2400      	movs	r4, #0
 80039d2:	9909      	ldr	r1, [sp, #36]	; 0x24
    return tag & 0x000003ff;
 80039d4:	f3c1 0309 	ubfx	r3, r1, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80039d8:	429c      	cmp	r4, r3
 80039da:	d2f4      	bcs.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80039dc:	9b04      	ldr	r3, [sp, #16]
 80039de:	686a      	ldr	r2, [r5, #4]
 80039e0:	f3c1 2189 	ubfx	r1, r1, #10, #10
 80039e4:	4419      	add	r1, r3
 80039e6:	68ab      	ldr	r3, [r5, #8]
 80039e8:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
 80039ec:	782b      	ldrb	r3, [r5, #0]
 80039ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80039f2:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
 80039f6:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
 80039fa:	4798      	blx	r3
                if (res < 0) {
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f2c0 8099 	blt.w	8003b34 <lfs_dir_traverse.constprop.39+0x298>
 8003a02:	f105 050c 	add.w	r5, r5, #12
                if (res) {
 8003a06:	d1de      	bne.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003a08:	3401      	adds	r4, #1
 8003a0a:	e7e2      	b.n	80039d2 <lfs_dir_traverse.constprop.39+0x136>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8003a0c:	9904      	ldr	r1, [sp, #16]
 8003a0e:	462a      	mov	r2, r5
 8003a10:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 8003a14:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
 8003a18:	4798      	blx	r3
            if (res < 0) {
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	f2c0 808a 	blt.w	8003b34 <lfs_dir_traverse.constprop.39+0x298>
            if (res) {
 8003a20:	d0d1      	beq.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
    if (sp > 0) {
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	f000 8086 	beq.w	8003b34 <lfs_dir_traverse.constprop.39+0x298>
        dir         = stack[sp-1].dir;
 8003a28:	aa2a      	add	r2, sp, #168	; 0xa8
 8003a2a:	3e01      	subs	r6, #1
 8003a2c:	233c      	movs	r3, #60	; 0x3c
 8003a2e:	fb03 2306 	mla	r3, r3, r6, r2
        attrs       = stack[sp-1].attrs;
 8003a32:	e953 a21c 	ldrd	sl, r2, [r3, #-112]	; 0x70
 8003a36:	9234      	str	r2, [sp, #208]	; 0xd0
        attrcount   = stack[sp-1].attrcount;
 8003a38:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8003a3c:	9235      	str	r2, [sp, #212]	; 0xd4
        tmask       = stack[sp-1].tmask;
 8003a3e:	f853 2c64 	ldr.w	r2, [r3, #-100]
 8003a42:	9236      	str	r2, [sp, #216]	; 0xd8
        end         = stack[sp-1].end;
 8003a44:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 8003a48:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 8003a4a:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 8003a4e:	9204      	str	r2, [sp, #16]
        cb          = stack[sp-1].cb;
 8003a50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003a54:	923a      	str	r2, [sp, #232]	; 0xe8
        data        = stack[sp-1].data;
 8003a56:	f853 2c50 	ldr.w	r2, [r3, #-80]
        ttag        = stack[sp-1].ttag;
 8003a5a:	f853 7c60 	ldr.w	r7, [r3, #-96]
        begin       = stack[sp-1].begin;
 8003a5e:	f833 9c5c 	ldrh.w	r9, [r3, #-92]
        buffer      = stack[sp-1].buffer;
 8003a62:	f853 5c48 	ldr.w	r5, [r3, #-72]
        data        = stack[sp-1].data;
 8003a66:	923b      	str	r2, [sp, #236]	; 0xec
        off         = stack[sp-1].off;
 8003a68:	e953 b81e 	ldrd	fp, r8, [r3, #-120]	; 0x78
        tag         = stack[sp-1].tag;
 8003a6c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003a70:	9209      	str	r2, [sp, #36]	; 0x24
        disk        = stack[sp-1].disk;
 8003a72:	3b44      	subs	r3, #68	; 0x44
 8003a74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a78:	aa0a      	add	r2, sp, #40	; 0x28
 8003a7a:	e882 0003 	stmia.w	r2, {r0, r1}
        if (lfs_tag_id(tmask) != 0 &&
 8003a7e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8003a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a82:	f3c2 2289 	ubfx	r2, r2, #10, #10
 8003a86:	b132      	cbz	r2, 8003a96 <lfs_dir_traverse.constprop.39+0x1fa>
    return (tag & 0x000ffc00) >> 10;
 8003a88:	f3c3 2289 	ubfx	r2, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 8003a8c:	454a      	cmp	r2, r9
 8003a8e:	d39a      	bcc.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003a90:	9905      	ldr	r1, [sp, #20]
 8003a92:	428a      	cmp	r2, r1
 8003a94:	d297      	bcs.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
    return (tag & 0x7ff00000) >> 20;
 8003a96:	f3c3 520a 	ubfx	r2, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d093      	beq.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003a9e:	f240 1101 	movw	r1, #257	; 0x101
 8003aa2:	428a      	cmp	r2, r1
 8003aa4:	d191      	bne.n	80039ca <lfs_dir_traverse.constprop.39+0x12e>
 8003aa6:	9307      	str	r3, [sp, #28]
            if (cb == lfs_dir_traverse_filter) {
 8003aa8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <lfs_dir_traverse.constprop.39+0x2ac>)
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d089      	beq.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
            stack[sp] = (struct lfs_dir_traverse){
 8003ab2:	223c      	movs	r2, #60	; 0x3c
 8003ab4:	ab2a      	add	r3, sp, #168	; 0xa8
 8003ab6:	fb02 3406 	mla	r4, r2, r6, r3
 8003aba:	2100      	movs	r1, #0
 8003abc:	f1a4 0078 	sub.w	r0, r4, #120	; 0x78
 8003ac0:	f003 ff3e 	bl	8007940 <memset>
 8003ac4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8003ac6:	f844 3c6c 	str.w	r3, [r4, #-108]
 8003aca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8003acc:	f844 3c68 	str.w	r3, [r4, #-104]
 8003ad0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8003ad2:	f824 9c5c 	strh.w	r9, [r4, #-92]
 8003ad6:	e944 3719 	strd	r3, r7, [r4, #-100]	; 0x64
 8003ada:	9b05      	ldr	r3, [sp, #20]
 8003adc:	f824 3c5a 	strh.w	r3, [r4, #-90]
 8003ae0:	9b04      	ldr	r3, [sp, #16]
 8003ae2:	f824 3c58 	strh.w	r3, [r4, #-88]
 8003ae6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003ae8:	f844 3c54 	str.w	r3, [r4, #-84]
 8003aec:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003aee:	f844 3c50 	str.w	r3, [r4, #-80]
            uint16_t fromid = lfs_tag_size(tag);
 8003af2:	9b07      	ldr	r3, [sp, #28]
            stack[sp] = (struct lfs_dir_traverse){
 8003af4:	f844 ac70 	str.w	sl, [r4, #-112]
            uint16_t fromid = lfs_tag_size(tag);
 8003af8:	f3c3 0909 	ubfx	r9, r3, #0, #10
            end = fromid+1;
 8003afc:	f109 0201 	add.w	r2, r9, #1
 8003b00:	9205      	str	r2, [sp, #20]
    return (tag & 0x000ffc00) >> 10;
 8003b02:	f3c3 2389 	ubfx	r3, r3, #10, #10
            diff = toid-fromid+diff;
 8003b06:	9a04      	ldr	r2, [sp, #16]
 8003b08:	eba3 0309 	sub.w	r3, r3, r9
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b21b      	sxth	r3, r3
            attrcount = 0;
 8003b10:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <lfs_dir_traverse.constprop.39+0x2b0>)
            diff = toid-fromid+diff;
 8003b12:	9304      	str	r3, [sp, #16]
            attrcount = 0;
 8003b14:	2300      	movs	r3, #0
            stack[sp] = (struct lfs_dir_traverse){
 8003b16:	e944 b81e 	strd	fp, r8, [r4, #-120]	; 0x78
            sp += 1;
 8003b1a:	3601      	adds	r6, #1
            dir = buffer;
 8003b1c:	46ab      	mov	fp, r5
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8003b1e:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
            attrcount = 0;
 8003b22:	e9cd 3235 	strd	r3, r2, [sp, #212]	; 0xd4
            attrs = NULL;
 8003b26:	9334      	str	r3, [sp, #208]	; 0xd0
            ptag = 0xffffffff;
 8003b28:	f04f 3aff 	mov.w	sl, #4294967295
            off = 0;
 8003b2c:	4698      	mov	r8, r3
 8003b2e:	e74a      	b.n	80039c6 <lfs_dir_traverse.constprop.39+0x12a>
                res = 0;
 8003b30:	2000      	movs	r0, #0
 8003b32:	e776      	b.n	8003a22 <lfs_dir_traverse.constprop.39+0x186>
}
 8003b34:	b02b      	add	sp, #172	; 0xac
 8003b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08009481 	.word	0x08009481
 8003b40:	080090a1 	.word	0x080090a1
 8003b44:	0800967e 	.word	0x0800967e
 8003b48:	080028c1 	.word	0x080028c1
 8003b4c:	600ffc00 	.word	0x600ffc00

08003b50 <lfs_bd_cmp.constprop.41>:
static int lfs_bd_cmp(lfs_t *lfs,
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	b087      	sub	sp, #28
 8003b56:	4689      	mov	r9, r1
 8003b58:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003b5a:	4692      	mov	sl, r2
 8003b5c:	461f      	mov	r7, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003b5e:	2400      	movs	r4, #0
        int res = lfs_bd_read(lfs,
 8003b60:	f100 0b68 	add.w	fp, r0, #104	; 0x68
 8003b64:	f10d 0810 	add.w	r8, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d801      	bhi.n	8003b70 <lfs_bd_cmp.constprop.41+0x20>
    return LFS_CMP_EQ;
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e01b      	b.n	8003ba8 <lfs_bd_cmp.constprop.41+0x58>
        diff = lfs_min(size-i, sizeof(dat));
 8003b70:	1b35      	subs	r5, r6, r4
        int res = lfs_bd_read(lfs,
 8003b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return (a < b) ? a : b;
 8003b74:	2d08      	cmp	r5, #8
 8003b76:	bf28      	it	cs
 8003b78:	2508      	movcs	r5, #8
 8003b7a:	18e3      	adds	r3, r4, r3
 8003b7c:	e9cd 7300 	strd	r7, r3, [sp]
 8003b80:	e9cd 8502 	strd	r8, r5, [sp, #8]
 8003b84:	ebaa 0304 	sub.w	r3, sl, r4
 8003b88:	464a      	mov	r2, r9
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4658      	mov	r0, fp
 8003b8e:	f7ff f845 	bl	8002c1c <lfs_bd_read.isra.23>
        if (res) {
 8003b92:	b948      	cbnz	r0, 8003ba8 <lfs_bd_cmp.constprop.41+0x58>
        res = memcmp(dat, data + i, diff);
 8003b94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b96:	462a      	mov	r2, r5
 8003b98:	1919      	adds	r1, r3, r4
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f003 feb6 	bl	800790c <memcmp>
        if (res) {
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d004      	beq.n	8003bae <lfs_bd_cmp.constprop.41+0x5e>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8003ba4:	db05      	blt.n	8003bb2 <lfs_bd_cmp.constprop.41+0x62>
 8003ba6:	2002      	movs	r0, #2
}
 8003ba8:	b007      	add	sp, #28
 8003baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003bae:	442c      	add	r4, r5
 8003bb0:	e7da      	b.n	8003b68 <lfs_bd_cmp.constprop.41+0x18>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	e7f8      	b.n	8003ba8 <lfs_bd_cmp.constprop.41+0x58>

08003bb6 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 8003bb6:	b530      	push	{r4, r5, lr}
 8003bb8:	4604      	mov	r4, r0
    return tag & 0x000003ff;
 8003bba:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8003bbe:	68a3      	ldr	r3, [r4, #8]
    int res = lfs_bd_cmp(lfs,
 8003bc0:	6821      	ldr	r1, [r4, #0]
        lfs_tag_t tag, const void *buffer) {
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	42ab      	cmp	r3, r5
 8003bc6:	bf28      	it	cs
 8003bc8:	462b      	movcs	r3, r5
 8003bca:	4610      	mov	r0, r2
    int res = lfs_bd_cmp(lfs,
 8003bcc:	9302      	str	r3, [sp, #8]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	6843      	ldr	r3, [r0, #4]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	6803      	ldr	r3, [r0, #0]
 8003bda:	4608      	mov	r0, r1
 8003bdc:	f7ff ffb8 	bl	8003b50 <lfs_bd_cmp.constprop.41>
    if (res != LFS_CMP_EQ) {
 8003be0:	b928      	cbnz	r0, 8003bee <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	d002      	beq.n	8003bee <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003be8:	bf2c      	ite	cs
 8003bea:	2002      	movcs	r0, #2
 8003bec:	2001      	movcc	r0, #1
}
 8003bee:	b005      	add	sp, #20
 8003bf0:	bd30      	pop	{r4, r5, pc}
	...

08003bf4 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bf8:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003bfa:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003bfc:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003bfe:	1c8b      	adds	r3, r1, #2
 8003c00:	2b01      	cmp	r3, #1
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003c02:	b085      	sub	sp, #20
 8003c04:	4606      	mov	r6, r0
 8003c06:	4617      	mov	r7, r2
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003c08:	d93f      	bls.n	8003c8a <lfs_bd_flush+0x96>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8003c0a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003c0c:	6a03      	ldr	r3, [r0, #32]
 8003c0e:	4299      	cmp	r1, r3
 8003c10:	d305      	bcc.n	8003c1e <lfs_bd_flush+0x2a>
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <lfs_bd_flush+0xa0>)
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <lfs_bd_flush+0xa4>)
 8003c16:	219d      	movs	r1, #157	; 0x9d
        LFS_ASSERT(err <= 0);
 8003c18:	4820      	ldr	r0, [pc, #128]	; (8003c9c <lfs_bd_flush+0xa8>)
 8003c1a:	f003 fde9 	bl	80077f0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8003c1e:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8003c20:	68ac      	ldr	r4, [r5, #8]
 8003c22:	4414      	add	r4, r2
 8003c24:	3c01      	subs	r4, #1
    return a - (a % alignment);
 8003c26:	fbb4 f3f2 	udiv	r3, r4, r2
 8003c2a:	fb02 4313 	mls	r3, r2, r3, r4
 8003c2e:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003c30:	9400      	str	r4, [sp, #0]
 8003c32:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8003c36:	68eb      	ldr	r3, [r5, #12]
 8003c38:	686a      	ldr	r2, [r5, #4]
 8003c3a:	47c8      	blx	r9
        LFS_ASSERT(err <= 0);
 8003c3c:	f1b0 0900 	subs.w	r9, r0, #0
 8003c40:	dd03      	ble.n	8003c4a <lfs_bd_flush+0x56>
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <lfs_bd_flush+0xac>)
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <lfs_bd_flush+0xa4>)
 8003c46:	21a1      	movs	r1, #161	; 0xa1
 8003c48:	e7e6      	b.n	8003c18 <lfs_bd_flush+0x24>
        if (err) {
 8003c4a:	d106      	bne.n	8003c5a <lfs_bd_flush+0x66>
        if (validate) {
 8003c4c:	f1b8 0f00 	cmp.w	r8, #0
 8003c50:	d107      	bne.n	8003c62 <lfs_bd_flush+0x6e>
        lfs_cache_zero(lfs, pcache);
 8003c52:	4629      	mov	r1, r5
 8003c54:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8003c56:	f7fe fe8e 	bl	8002976 <lfs_cache_zero.isra.17>
}
 8003c5a:	4648      	mov	r0, r9
 8003c5c:	b005      	add	sp, #20
 8003c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rcache->block = LFS_BLOCK_NULL;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
 8003c68:	68eb      	ldr	r3, [r5, #12]
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	686b      	ldr	r3, [r5, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	9402      	str	r4, [sp, #8]
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	4622      	mov	r2, r4
 8003c76:	4639      	mov	r1, r7
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7ff ff69 	bl	8003b50 <lfs_bd_cmp.constprop.41>
            if (res < 0) {
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	db06      	blt.n	8003c90 <lfs_bd_flush+0x9c>
            if (res != LFS_CMP_EQ) {
 8003c82:	d0e6      	beq.n	8003c52 <lfs_bd_flush+0x5e>
                return LFS_ERR_CORRUPT;
 8003c84:	f06f 0953 	mvn.w	r9, #83	; 0x53
 8003c88:	e7e7      	b.n	8003c5a <lfs_bd_flush+0x66>
    return 0;
 8003c8a:	f04f 0900 	mov.w	r9, #0
 8003c8e:	e7e4      	b.n	8003c5a <lfs_bd_flush+0x66>
 8003c90:	4681      	mov	r9, r0
 8003c92:	e7e2      	b.n	8003c5a <lfs_bd_flush+0x66>
 8003c94:	080091c5 	.word	0x080091c5
 8003c98:	0800906f 	.word	0x0800906f
 8003c9c:	0800967e 	.word	0x0800967e
 8003ca0:	080091bc 	.word	0x080091bc

08003ca4 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 8003ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	e9dd 840c 	ldrd	r8, r4, [sp, #48]	; 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8003cac:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
 8003cb0:	4691      	mov	r9, r2
 8003cb2:	4607      	mov	r7, r0
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	469a      	mov	sl, r3
 8003cb8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003cba:	6e82      	ldr	r2, [r0, #104]	; 0x68
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8003cbc:	d008      	beq.n	8003cd0 <lfs_bd_prog+0x2c>
 8003cbe:	6a13      	ldr	r3, [r2, #32]
 8003cc0:	4543      	cmp	r3, r8
 8003cc2:	d805      	bhi.n	8003cd0 <lfs_bd_prog+0x2c>
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <lfs_bd_prog+0xd0>)
 8003cc6:	4a2c      	ldr	r2, [pc, #176]	; (8003d78 <lfs_bd_prog+0xd4>)
 8003cc8:	21d2      	movs	r1, #210	; 0xd2
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8003cca:	482c      	ldr	r0, [pc, #176]	; (8003d7c <lfs_bd_prog+0xd8>)
 8003ccc:	f003 fd90 	bl	80077f0 <__assert_func>
 8003cd0:	69d2      	ldr	r2, [r2, #28]
 8003cd2:	19a3      	adds	r3, r4, r6
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d804      	bhi.n	8003ce2 <lfs_bd_prog+0x3e>
        pcache->size = 0;
 8003cd8:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
 8003cdc:	b92e      	cbnz	r6, 8003cea <lfs_bd_prog+0x46>
    return 0;
 8003cde:	4630      	mov	r0, r6
 8003ce0:	e033      	b.n	8003d4a <lfs_bd_prog+0xa6>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <lfs_bd_prog+0xdc>)
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <lfs_bd_prog+0xd4>)
 8003ce6:	21d3      	movs	r1, #211	; 0xd3
 8003ce8:	e7ef      	b.n	8003cca <lfs_bd_prog+0x26>
        if (block == pcache->block &&
 8003cea:	682a      	ldr	r2, [r5, #0]
 8003cec:	4590      	cmp	r8, r2
 8003cee:	d12f      	bne.n	8003d50 <lfs_bd_prog+0xac>
                off >= pcache->off &&
 8003cf0:	6868      	ldr	r0, [r5, #4]
        if (block == pcache->block &&
 8003cf2:	42a0      	cmp	r0, r4
 8003cf4:	d82c      	bhi.n	8003d50 <lfs_bd_prog+0xac>
                off < pcache->off + lfs->cfg->cache_size) {
 8003cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	4403      	add	r3, r0
                off >= pcache->off &&
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d227      	bcs.n	8003d50 <lfs_bd_prog+0xac>
            lfs_size_t diff = lfs_min(size,
 8003d00:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 8003d02:	42b3      	cmp	r3, r6
 8003d04:	bf28      	it	cs
 8003d06:	4633      	movcs	r3, r6
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8003d08:	461a      	mov	r2, r3
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	68eb      	ldr	r3, [r5, #12]
 8003d0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003d10:	1a20      	subs	r0, r4, r0
 8003d12:	4418      	add	r0, r3
 8003d14:	f003 fe09 	bl	800792a <memcpy>
            data += diff;
 8003d18:	9b01      	ldr	r3, [sp, #4]
 8003d1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            off += diff;
 8003d1c:	441c      	add	r4, r3
            data += diff;
 8003d1e:	441a      	add	r2, r3
            size -= diff;
 8003d20:	1af6      	subs	r6, r6, r3
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003d22:	686b      	ldr	r3, [r5, #4]
            data += diff;
 8003d24:	920e      	str	r2, [sp, #56]	; 0x38
    return (a > b) ? a : b;
 8003d26:	68aa      	ldr	r2, [r5, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003d28:	1ae3      	subs	r3, r4, r3
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	bf38      	it	cc
 8003d2e:	4613      	movcc	r3, r2
            if (pcache->size == lfs->cfg->cache_size) {
 8003d30:	6eba      	ldr	r2, [r7, #104]	; 0x68
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003d32:	60ab      	str	r3, [r5, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8003d34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d1d0      	bne.n	8003cdc <lfs_bd_prog+0x38>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8003d3a:	4653      	mov	r3, sl
 8003d3c:	464a      	mov	r2, r9
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4638      	mov	r0, r7
 8003d42:	f7ff ff57 	bl	8003bf4 <lfs_bd_flush>
                if (err) {
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0c8      	beq.n	8003cdc <lfs_bd_prog+0x38>
}
 8003d4a:	b003      	add	sp, #12
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8003d50:	3201      	adds	r2, #1
 8003d52:	d003      	beq.n	8003d5c <lfs_bd_prog+0xb8>
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <lfs_bd_prog+0xe0>)
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <lfs_bd_prog+0xd4>)
 8003d58:	21f0      	movs	r1, #240	; 0xf0
 8003d5a:	e7b6      	b.n	8003cca <lfs_bd_prog+0x26>
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8003d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        pcache->block = block;
 8003d5e:	f8c5 8000 	str.w	r8, [r5]
    return a - (a % alignment);
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	fbb4 f3f2 	udiv	r3, r4, r2
 8003d68:	fb02 4313 	mls	r3, r2, r3, r4
 8003d6c:	1ae3      	subs	r3, r4, r3
        pcache->size = 0;
 8003d6e:	e9c5 3b01 	strd	r3, fp, [r5, #4]
 8003d72:	e7b3      	b.n	8003cdc <lfs_bd_prog+0x38>
 8003d74:	080091eb 	.word	0x080091eb
 8003d78:	08009088 	.word	0x08009088
 8003d7c:	0800967e 	.word	0x0800967e
 8003d80:	08009227 	.word	0x08009227
 8003d84:	0800924a 	.word	0x0800924a

08003d88 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 8003d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8a:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
 8003d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
 8003d90:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 8003d92:	684b      	ldr	r3, [r1, #4]
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	680b      	ldr	r3, [r1, #0]
 8003d98:	9300      	str	r3, [sp, #0]
        const void *buffer, lfs_size_t size) {
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4602      	mov	r2, r0
 8003da2:	f100 0110 	add.w	r1, r0, #16
 8003da6:	f7ff ff7d 	bl	8003ca4 <lfs_bd_prog>
    if (err) {
 8003daa:	4606      	mov	r6, r0
 8003dac:	b940      	cbnz	r0, 8003dc0 <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003dae:	462a      	mov	r2, r5
 8003db0:	4639      	mov	r1, r7
 8003db2:	68e0      	ldr	r0, [r4, #12]
 8003db4:	f002 f9e0 	bl	8006178 <lfs_crc>
    commit->off += size;
 8003db8:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003dba:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 8003dbc:	442b      	add	r3, r5
 8003dbe:	6063      	str	r3, [r4, #4]
}
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	b005      	add	sp, #20
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dc6 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 8003dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	4680      	mov	r8, r0
 8003dcc:	b089      	sub	sp, #36	; 0x24
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003dce:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
 8003dd0:	4617      	mov	r7, r2
 8003dd2:	4699      	mov	r9, r3
 8003dd4:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003dd6:	f7fe fd1e 	bl	8002816 <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
 8003dda:	684b      	ldr	r3, [r1, #4]
 8003ddc:	694a      	ldr	r2, [r1, #20]
 8003dde:	4403      	add	r3, r0
 8003de0:	4293      	cmp	r3, r2
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003de2:	4606      	mov	r6, r0
    if (commit->off + dsize > commit->end) {
 8003de4:	d842      	bhi.n	8003e6c <lfs_dir_commitattr+0xa6>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003de6:	688b      	ldr	r3, [r1, #8]
 8003de8:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8003dec:	aa08      	add	r2, sp, #32
 8003dee:	ea8a 0303 	eor.w	r3, sl, r3
    return __builtin_bswap32(a);
 8003df2:	ba1b      	rev	r3, r3
 8003df4:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8003df8:	4640      	mov	r0, r8
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	f7ff ffc4 	bl	8003d88 <lfs_dir_commitprog>
    if (err) {
 8003e00:	4605      	mov	r5, r0
 8003e02:	b960      	cbnz	r0, 8003e1e <lfs_dir_commitattr+0x58>
    if (!(tag & 0x80000000)) {
 8003e04:	2f00      	cmp	r7, #0
 8003e06:	f1a6 0604 	sub.w	r6, r6, #4
 8003e0a:	db28      	blt.n	8003e5e <lfs_dir_commitattr+0x98>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8003e0c:	4633      	mov	r3, r6
 8003e0e:	464a      	mov	r2, r9
 8003e10:	4621      	mov	r1, r4
 8003e12:	4640      	mov	r0, r8
 8003e14:	f7ff ffb8 	bl	8003d88 <lfs_dir_commitprog>
        if (err) {
 8003e18:	bb58      	cbnz	r0, 8003e72 <lfs_dir_commitattr+0xac>
    commit->ptag = tag & 0x7fffffff;
 8003e1a:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8003e1e:	4628      	mov	r0, r5
 8003e20:	b009      	add	sp, #36	; 0x24
 8003e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = lfs_bd_read(lfs,
 8003e26:	2301      	movs	r3, #1
 8003e28:	e9cd b302 	strd	fp, r3, [sp, #8]
 8003e2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003e30:	9805      	ldr	r0, [sp, #20]
 8003e32:	443b      	add	r3, r7
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	f8d9 3000 	ldr.w	r3, [r9]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	1bf3      	subs	r3, r6, r7
 8003e40:	2100      	movs	r1, #0
 8003e42:	f7fe feeb 	bl	8002c1c <lfs_bd_read.isra.23>
            if (err) {
 8003e46:	b9a0      	cbnz	r0, 8003e72 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003e48:	2301      	movs	r3, #1
 8003e4a:	465a      	mov	r2, fp
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4640      	mov	r0, r8
 8003e50:	f7ff ff9a 	bl	8003d88 <lfs_dir_commitprog>
            if (err) {
 8003e54:	b968      	cbnz	r0, 8003e72 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003e56:	3701      	adds	r7, #1
 8003e58:	42b7      	cmp	r7, r6
 8003e5a:	d3e4      	bcc.n	8003e26 <lfs_dir_commitattr+0x60>
 8003e5c:	e7dd      	b.n	8003e1a <lfs_dir_commitattr+0x54>
            err = lfs_bd_read(lfs,
 8003e5e:	f108 0368 	add.w	r3, r8, #104	; 0x68
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003e62:	4607      	mov	r7, r0
            err = lfs_bd_read(lfs,
 8003e64:	9305      	str	r3, [sp, #20]
 8003e66:	f10d 0b1b 	add.w	fp, sp, #27
 8003e6a:	e7f5      	b.n	8003e58 <lfs_dir_commitattr+0x92>
        return LFS_ERR_NOSPC;
 8003e6c:	f06f 051b 	mvn.w	r5, #27
 8003e70:	e7d5      	b.n	8003e1e <lfs_dir_commitattr+0x58>
 8003e72:	4605      	mov	r5, r0
 8003e74:	e7d3      	b.n	8003e1e <lfs_dir_commitattr+0x58>

08003e76 <lfs_dir_commit_commit>:
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003e76:	4613      	mov	r3, r2
 8003e78:	460a      	mov	r2, r1
 8003e7a:	e9d0 0100 	ldrd	r0, r1, [r0]
 8003e7e:	f7ff bfa2 	b.w	8003dc6 <lfs_dir_commitattr>
	...

08003e84 <lfs_dir_commitcrc>:
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8003e84:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8003e8a:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8003e8c:	684d      	ldr	r5, [r1, #4]
 8003e8e:	4415      	add	r5, r2
 8003e90:	3507      	adds	r5, #7
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003e92:	b08d      	sub	sp, #52	; 0x34
    return a - (a % alignment);
 8003e94:	fbb5 f3f2 	udiv	r3, r5, r2
 8003e98:	fb02 5313 	mls	r3, r2, r3, r5
 8003e9c:	1aed      	subs	r5, r5, r3
    uint32_t crc1 = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 8003ea2:	469b      	mov	fp, r3
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8003ea4:	f1a5 0308 	sub.w	r3, r5, #8
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	460e      	mov	r6, r1
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8003eac:	9306      	str	r3, [sp, #24]
    while (commit->off < end) {
 8003eae:	6874      	ldr	r4, [r6, #4]
 8003eb0:	42ac      	cmp	r4, r5
 8003eb2:	d319      	bcc.n	8003ee8 <lfs_dir_commitcrc+0x64>
    rcache->block = LFS_BLOCK_NULL;
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8003ebe:	463a      	mov	r2, r7
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	f7ff fe96 	bl	8003bf4 <lfs_bd_flush>
    if (err) {
 8003ec8:	4680      	mov	r8, r0
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	f040 80bf 	bne.w	800404e <lfs_dir_commitcrc+0x1ca>
    err = lfs->cfg->sync(lfs->cfg);
 8003ed0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003ed2:	6903      	ldr	r3, [r0, #16]
 8003ed4:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 8003ed6:	f1b0 0800 	subs.w	r8, r0, #0
 8003eda:	dd73      	ble.n	8003fc4 <lfs_dir_commitcrc+0x140>
 8003edc:	4b5f      	ldr	r3, [pc, #380]	; (800405c <lfs_dir_commitcrc+0x1d8>)
 8003ede:	4a60      	ldr	r2, [pc, #384]	; (8004060 <lfs_dir_commitcrc+0x1dc>)
 8003ee0:	4860      	ldr	r0, [pc, #384]	; (8004064 <lfs_dir_commitcrc+0x1e0>)
 8003ee2:	21c7      	movs	r1, #199	; 0xc7
 8003ee4:	f003 fc84 	bl	80077f0 <__assert_func>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8003ee8:	f104 0a04 	add.w	sl, r4, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8003eec:	eba5 040a 	sub.w	r4, r5, sl
 8003ef0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	bf94      	ite	ls
 8003ef8:	4454      	addls	r4, sl
 8003efa:	eb0a 0403 	addhi.w	r4, sl, r3
        if (noff < end) {
 8003efe:	42ac      	cmp	r4, r5
 8003f00:	d203      	bcs.n	8003f0a <lfs_dir_commitcrc+0x86>
    return (a < b) ? a : b;
 8003f02:	9b06      	ldr	r3, [sp, #24]
 8003f04:	429c      	cmp	r4, r3
 8003f06:	bf28      	it	cs
 8003f08:	461c      	movcs	r4, r3
        lfs_tag_t tag = 0xffffffff;
 8003f0a:	aa0c      	add	r2, sp, #48	; 0x30
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f10:	f842 3d0c 	str.w	r3, [r2, #-12]!
        int err = lfs_bd_read(lfs,
 8003f14:	2304      	movs	r3, #4
 8003f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f1a:	6832      	ldr	r2, [r6, #0]
 8003f1c:	9200      	str	r2, [sp, #0]
 8003f1e:	9401      	str	r4, [sp, #4]
 8003f20:	463a      	mov	r2, r7
 8003f22:	2100      	movs	r1, #0
 8003f24:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003f28:	f7fe fe78 	bl	8002c1c <lfs_bd_read.isra.23>
        if (err && err != LFS_ERR_CORRUPT) {
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	b118      	cbz	r0, 8003f38 <lfs_dir_commitcrc+0xb4>
 8003f30:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003f34:	f040 808b 	bne.w	800404e <lfs_dir_commitcrc+0x1ca>
    return __builtin_bswap32(a);
 8003f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8003f3a:	68f0      	ldr	r0, [r6, #12]
 8003f3c:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
 8003f3e:	ea6f 0903 	mvn.w	r9, r3
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8003f42:	eba4 040a 	sub.w	r4, r4, sl
        bool reset = ~lfs_frombe32(tag) >> 31;
 8003f46:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8003f4a:	f444 247f 	orr.w	r4, r4, #1044480	; 0xff000
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	f444 6440 	orr.w	r4, r4, #3072	; 0xc00
 8003f56:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003f5a:	68b3      	ldr	r3, [r6, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8003f5c:	9409      	str	r4, [sp, #36]	; 0x24
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003f5e:	405c      	eors	r4, r3
 8003f60:	ba23      	rev	r3, r4
 8003f62:	ac0c      	add	r4, sp, #48	; 0x30
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8003f64:	2204      	movs	r2, #4
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003f66:	f844 3d08 	str.w	r3, [r4, #-8]!
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	f002 f904 	bl	8006178 <lfs_crc>
        err = lfs_bd_prog(lfs,
 8003f70:	2308      	movs	r3, #8
 8003f72:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8003f76:	6873      	ldr	r3, [r6, #4]
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	6833      	ldr	r3, [r6, #0]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8003f7c:	60f0      	str	r0, [r6, #12]
        footer[1] = lfs_tole32(commit->crc);
 8003f7e:	900b      	str	r0, [sp, #44]	; 0x2c
        err = lfs_bd_prog(lfs,
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	463a      	mov	r2, r7
 8003f84:	2300      	movs	r3, #0
 8003f86:	f107 0110 	add.w	r1, r7, #16
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	f7ff fe8a 	bl	8003ca4 <lfs_bd_prog>
        if (err) {
 8003f90:	4680      	mov	r8, r0
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d15b      	bne.n	800404e <lfs_dir_commitcrc+0x1ca>
 8003f96:	6871      	ldr	r1, [r6, #4]
        if (off1 == 0) {
 8003f98:	f1bb 0f00 	cmp.w	fp, #0
 8003f9c:	d103      	bne.n	8003fa6 <lfs_dir_commitcrc+0x122>
            crc1 = commit->crc;
 8003f9e:	68f3      	ldr	r3, [r6, #12]
 8003fa0:	9305      	str	r3, [sp, #20]
            off1 = commit->off + sizeof(uint32_t);
 8003fa2:	f101 0b04 	add.w	fp, r1, #4
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8003fa8:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
    return tag & 0x000003ff;
 8003fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003fb0:	3204      	adds	r2, #4
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8003fb2:	ea89 0303 	eor.w	r3, r9, r3
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003fb6:	440a      	add	r2, r1
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8003fb8:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8003fba:	f04f 33ff 	mov.w	r3, #4294967295
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003fbe:	6072      	str	r2, [r6, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8003fc0:	60f3      	str	r3, [r6, #12]
 8003fc2:	e774      	b.n	8003eae <lfs_dir_commitcrc+0x2a>
    if (err) {
 8003fc4:	d143      	bne.n	800404e <lfs_dir_commitcrc+0x1ca>
            err = lfs_bd_read(lfs,
 8003fc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
    lfs_off_t off = commit->begin;
 8003fca:	6934      	ldr	r4, [r6, #16]
            err = lfs_bd_read(lfs,
 8003fcc:	9307      	str	r3, [sp, #28]
    while (off < end) {
 8003fce:	46d9      	mov	r9, fp
 8003fd0:	42ac      	cmp	r4, r5
 8003fd2:	d23c      	bcs.n	800404e <lfs_dir_commitcrc+0x1ca>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003fd4:	f109 0304 	add.w	r3, r9, #4
        uint32_t crc = 0xffffffff;
 8003fd8:	f04f 3aff 	mov.w	sl, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003fdc:	9306      	str	r3, [sp, #24]
 8003fde:	e01a      	b.n	8004016 <lfs_dir_commitcrc+0x192>
            if (i == off1 && crc != crc1) {
 8003fe0:	45a3      	cmp	fp, r4
 8003fe2:	d102      	bne.n	8003fea <lfs_dir_commitcrc+0x166>
 8003fe4:	9b05      	ldr	r3, [sp, #20]
 8003fe6:	4553      	cmp	r3, sl
 8003fe8:	d12e      	bne.n	8004048 <lfs_dir_commitcrc+0x1c4>
            err = lfs_bd_read(lfs,
 8003fea:	2301      	movs	r3, #1
 8003fec:	9303      	str	r3, [sp, #12]
 8003fee:	ab0a      	add	r3, sp, #40	; 0x28
 8003ff0:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003ff4:	6833      	ldr	r3, [r6, #0]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	9b06      	ldr	r3, [sp, #24]
 8003ffa:	9807      	ldr	r0, [sp, #28]
 8003ffc:	1b1b      	subs	r3, r3, r4
 8003ffe:	463a      	mov	r2, r7
 8004000:	2100      	movs	r1, #0
 8004002:	f7fe fe0b 	bl	8002c1c <lfs_bd_read.isra.23>
            if (err) {
 8004006:	bb08      	cbnz	r0, 800404c <lfs_dir_commitcrc+0x1c8>
            crc = lfs_crc(crc, &dat, 1);
 8004008:	4650      	mov	r0, sl
 800400a:	2201      	movs	r2, #1
 800400c:	a90a      	add	r1, sp, #40	; 0x28
 800400e:	f002 f8b3 	bl	8006178 <lfs_crc>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004012:	3401      	adds	r4, #1
            crc = lfs_crc(crc, &dat, 1);
 8004014:	4682      	mov	sl, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004016:	9b06      	ldr	r3, [sp, #24]
 8004018:	42a3      	cmp	r3, r4
 800401a:	d8e1      	bhi.n	8003fe0 <lfs_dir_commitcrc+0x15c>
        if (crc != 0) {
 800401c:	f1ba 0f00 	cmp.w	sl, #0
 8004020:	d119      	bne.n	8004056 <lfs_dir_commitcrc+0x1d2>
        off = lfs_min(end - noff, 0x3fe) + noff;
 8004022:	eba5 0409 	sub.w	r4, r5, r9
 8004026:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800402a:	429c      	cmp	r4, r3
 800402c:	bf94      	ite	ls
 800402e:	444c      	addls	r4, r9
 8004030:	eb09 0403 	addhi.w	r4, r9, r3
        if (off < end) {
 8004034:	42ac      	cmp	r4, r5
 8004036:	d204      	bcs.n	8004042 <lfs_dir_commitcrc+0x1be>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8004038:	f1a5 0308 	sub.w	r3, r5, #8
    return (a < b) ? a : b;
 800403c:	429c      	cmp	r4, r3
 800403e:	bf28      	it	cs
 8004040:	461c      	movcs	r4, r3
        noff = off + sizeof(uint32_t);
 8004042:	f104 0904 	add.w	r9, r4, #4
 8004046:	e7c3      	b.n	8003fd0 <lfs_dir_commitcrc+0x14c>
                return LFS_ERR_CORRUPT;
 8004048:	f06f 0053 	mvn.w	r0, #83	; 0x53
 800404c:	4680      	mov	r8, r0
}
 800404e:	4640      	mov	r0, r8
 8004050:	b00d      	add	sp, #52	; 0x34
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
 8004056:	f06f 0853 	mvn.w	r8, #83	; 0x53
 800405a:	e7f8      	b.n	800404e <lfs_dir_commitcrc+0x1ca>
 800405c:	080091bc 	.word	0x080091bc
 8004060:	0800907c 	.word	0x0800907c
 8004064:	0800967e 	.word	0x0800967e

08004068 <lfs_fs_rawtraverse>:
        bool includeorphans) {
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	b08f      	sub	sp, #60	; 0x3c
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004074:	2100      	movs	r1, #0
 8004076:	221c      	movs	r2, #28
 8004078:	a806      	add	r0, sp, #24
        bool includeorphans) {
 800407a:	4699      	mov	r9, r3
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800407c:	f8df a138 	ldr.w	sl, [pc, #312]	; 80041b8 <lfs_fs_rawtraverse+0x150>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004080:	f003 fc5e 	bl	8007940 <memset>
 8004084:	2301      	movs	r3, #1
 8004086:	930d      	str	r3, [sp, #52]	; 0x34
    lfs_block_t cycle = 0;
 8004088:	f04f 0800 	mov.w	r8, #0
    while (!lfs_pair_isnull(dir.tail)) {
 800408c:	a80c      	add	r0, sp, #48	; 0x30
 800408e:	f7fe fba7 	bl	80027e0 <lfs_pair_isnull>
 8004092:	b120      	cbz	r0, 800409e <lfs_fs_rawtraverse+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004094:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004096:	2f00      	cmp	r7, #0
 8004098:	d158      	bne.n	800414c <lfs_fs_rawtraverse+0xe4>
    return 0;
 800409a:	4638      	mov	r0, r7
 800409c:	e044      	b.n	8004128 <lfs_fs_rawtraverse+0xc0>
        if (cycle >= lfs->cfg->block_count/2) {
 800409e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
 80040a6:	f080 8082 	bcs.w	80041ae <lfs_fs_rawtraverse+0x146>
            int err = cb(data, dir.tail[i]);
 80040aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040ac:	4630      	mov	r0, r6
        cycle += 1;
 80040ae:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
 80040b2:	47a8      	blx	r5
            if (err) {
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d137      	bne.n	8004128 <lfs_fs_rawtraverse+0xc0>
            int err = cb(data, dir.tail[i]);
 80040b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040ba:	4630      	mov	r0, r6
 80040bc:	47a8      	blx	r5
            if (err) {
 80040be:	2800      	cmp	r0, #0
 80040c0:	d132      	bne.n	8004128 <lfs_fs_rawtraverse+0xc0>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80040c2:	aa0c      	add	r2, sp, #48	; 0x30
 80040c4:	a906      	add	r1, sp, #24
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff f97e 	bl	80033c8 <lfs_dir_fetch>
        if (err) {
 80040cc:	bb60      	cbnz	r0, 8004128 <lfs_fs_rawtraverse+0xc0>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80040ce:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80041bc <lfs_fs_rawtraverse+0x154>
 80040d2:	4607      	mov	r7, r0
        for (uint16_t id = 0; id < dir.count; id++) {
 80040d4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80040d8:	b2bb      	uxth	r3, r7
 80040da:	429a      	cmp	r2, r3
 80040dc:	d9d6      	bls.n	800408c <lfs_fs_rawtraverse+0x24>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80040de:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <lfs_fs_rawtraverse+0x14c>)
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80040e0:	aa04      	add	r2, sp, #16
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80040e2:	ea03 2387 	and.w	r3, r3, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80040e6:	9200      	str	r2, [sp, #0]
 80040e8:	ea43 030b 	orr.w	r3, r3, fp
 80040ec:	4652      	mov	r2, sl
 80040ee:	a906      	add	r1, sp, #24
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7fe fee7 	bl	8002ec4 <lfs_dir_get>
            if (tag < 0) {
 80040f6:	2800      	cmp	r0, #0
 80040f8:	da03      	bge.n	8004102 <lfs_fs_rawtraverse+0x9a>
                if (tag == LFS_ERR_NOENT) {
 80040fa:	1c83      	adds	r3, r0, #2
 80040fc:	d114      	bne.n	8004128 <lfs_fs_rawtraverse+0xc0>
 80040fe:	3701      	adds	r7, #1
 8004100:	e7e8      	b.n	80040d4 <lfs_fs_rawtraverse+0x6c>
    return (tag & 0x7ff00000) >> 20;
 8004102:	0d00      	lsrs	r0, r0, #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8004104:	f240 2302 	movw	r3, #514	; 0x202
 8004108:	4298      	cmp	r0, r3
 800410a:	d110      	bne.n	800412e <lfs_fs_rawtraverse+0xc6>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800410c:	9b05      	ldr	r3, [sp, #20]
    if (size == 0) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f5      	beq.n	80040fe <lfs_fs_rawtraverse+0x96>
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004118:	9b04      	ldr	r3, [sp, #16]
 800411a:	4622      	mov	r2, r4
 800411c:	2100      	movs	r1, #0
 800411e:	4620      	mov	r0, r4
 8004120:	f7ff fa32 	bl	8003588 <lfs_ctz_traverse.part.25>
                    if (err) {
 8004124:	2800      	cmp	r0, #0
 8004126:	d0ea      	beq.n	80040fe <lfs_fs_rawtraverse+0x96>
}
 8004128:	b00f      	add	sp, #60	; 0x3c
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans &&
 800412e:	f1b9 0f00 	cmp.w	r9, #0
 8004132:	d0e4      	beq.n	80040fe <lfs_fs_rawtraverse+0x96>
 8004134:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004138:	d1e1      	bne.n	80040fe <lfs_fs_rawtraverse+0x96>
                    err = cb(data, (&ctz.head)[i]);
 800413a:	9904      	ldr	r1, [sp, #16]
 800413c:	4630      	mov	r0, r6
 800413e:	47a8      	blx	r5
                    if (err) {
 8004140:	2800      	cmp	r0, #0
 8004142:	d1f1      	bne.n	8004128 <lfs_fs_rawtraverse+0xc0>
                    err = cb(data, (&ctz.head)[i]);
 8004144:	9905      	ldr	r1, [sp, #20]
 8004146:	4630      	mov	r0, r6
 8004148:	47a8      	blx	r5
 800414a:	e7eb      	b.n	8004124 <lfs_fs_rawtraverse+0xbc>
        if (f->type != LFS_TYPE_REG) {
 800414c:	79bb      	ldrb	r3, [r7, #6]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d001      	beq.n	8004156 <lfs_fs_rawtraverse+0xee>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004152:	683f      	ldr	r7, [r7, #0]
 8004154:	e79f      	b.n	8004096 <lfs_fs_rawtraverse+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d015      	beq.n	800418e <lfs_fs_rawtraverse+0x126>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 8004168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416c:	d1f1      	bne.n	8004152 <lfs_fs_rawtraverse+0xea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    if (size == 0) {
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ee      	beq.n	8004152 <lfs_fs_rawtraverse+0xea>
 8004174:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	4622      	mov	r2, r4
 800417e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff fa00 	bl	8003588 <lfs_ctz_traverse.part.25>
            if (err) {
 8004188:	2800      	cmp	r0, #0
 800418a:	d0e2      	beq.n	8004152 <lfs_fs_rawtraverse+0xea>
 800418c:	e7cc      	b.n	8004128 <lfs_fs_rawtraverse+0xc0>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (size == 0) {
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0e6      	beq.n	8004162 <lfs_fs_rawtraverse+0xfa>
 8004194:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	4622      	mov	r2, r4
 800419e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7ff f9f0 	bl	8003588 <lfs_ctz_traverse.part.25>
            if (err) {
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0da      	beq.n	8004162 <lfs_fs_rawtraverse+0xfa>
 80041ac:	e7bc      	b.n	8004128 <lfs_fs_rawtraverse+0xc0>
            return LFS_ERR_CORRUPT;
 80041ae:	f06f 0053 	mvn.w	r0, #83	; 0x53
 80041b2:	e7b9      	b.n	8004128 <lfs_fs_rawtraverse+0xc0>
 80041b4:	03fffc00 	.word	0x03fffc00
 80041b8:	700ffc00 	.word	0x700ffc00
 80041bc:	20000008 	.word	0x20000008

080041c0 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80041c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80041c4:	4d36      	ldr	r5, [pc, #216]	; (80042a0 <lfs_alloc+0xe0>)
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80041c6:	4604      	mov	r4, r0
 80041c8:	460e      	mov	r6, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80041ca:	2701      	movs	r7, #1
        while (lfs->free.i != lfs->free.size) {
 80041cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ce:	e9d4 2117 	ldrd	r2, r1, [r4, #92]	; 0x5c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10e      	bne.n	80041f4 <lfs_alloc+0x34>
 80041d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80041d8:	4413      	add	r3, r2
        if (lfs->free.ack == 0) {
 80041da:	2900      	cmp	r1, #0
 80041dc:	d13a      	bne.n	8004254 <lfs_alloc+0x94>
            LFS_ERROR("No more free space %"PRIu32,
 80041de:	4a31      	ldr	r2, [pc, #196]	; (80042a4 <lfs_alloc+0xe4>)
 80041e0:	9200      	str	r2, [sp, #0]
 80041e2:	4931      	ldr	r1, [pc, #196]	; (80042a8 <lfs_alloc+0xe8>)
 80041e4:	4831      	ldr	r0, [pc, #196]	; (80042ac <lfs_alloc+0xec>)
 80041e6:	f240 2247 	movw	r2, #583	; 0x247
 80041ea:	f003 ff21 	bl	8008030 <iprintf>
            return LFS_ERR_NOSPC;
 80041ee:	f06f 001b 	mvn.w	r0, #27
 80041f2:	e026      	b.n	8004242 <lfs_alloc+0x82>
            lfs->free.ack -= 1;
 80041f4:	3901      	subs	r1, #1
            lfs->free.i += 1;
 80041f6:	1c50      	adds	r0, r2, #1
            lfs->free.ack -= 1;
 80041f8:	6621      	str	r1, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80041fa:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 80041fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
            lfs->free.i += 1;
 8004200:	65e0      	str	r0, [r4, #92]	; 0x5c
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004202:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8004206:	f002 001f 	and.w	r0, r2, #31
 800420a:	fa07 f000 	lsl.w	r0, r7, r0
 800420e:	ea10 0f0c 	tst.w	r0, ip
 8004212:	d1dc      	bne.n	80041ce <lfs_alloc+0xe>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8004214:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004216:	441a      	add	r2, r3
 8004218:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800421a:	6a18      	ldr	r0, [r3, #32]
 800421c:	fbb2 f3f0 	udiv	r3, r2, r0
 8004220:	fb00 2213 	mls	r2, r0, r3, r2
 8004224:	6032      	str	r2, [r6, #0]
                while (lfs->free.i != lfs->free.size &&
 8004226:	6da6      	ldr	r6, [r4, #88]	; 0x58
                            & (1U << (lfs->free.i % 32)))) {
 8004228:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
 800422a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800422c:	42b3      	cmp	r3, r6
 800422e:	d035      	beq.n	800429c <lfs_alloc+0xdc>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004230:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
 8004232:	f003 001f 	and.w	r0, r3, #31
 8004236:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800423a:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
 800423e:	4010      	ands	r0, r2
 8004240:	d102      	bne.n	8004248 <lfs_alloc+0x88>
}
 8004242:	b002      	add	sp, #8
 8004244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    lfs->free.i += 1;
 8004248:	3301      	adds	r3, #1
 800424a:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800424c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800424e:	3b01      	subs	r3, #1
 8004250:	6623      	str	r3, [r4, #96]	; 0x60
 8004252:	e7ea      	b.n	800422a <lfs_alloc+0x6a>
                % lfs->cfg->block_count;
 8004254:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004256:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800425a:	fbb3 f2fc 	udiv	r2, r3, ip
 800425e:	fb0c 3312 	mls	r3, ip, r2, r3
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004262:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004264:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.i = 0;
 8004266:	f04f 0800 	mov.w	r8, #0
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800426a:	00d3      	lsls	r3, r2, #3
 800426c:	428b      	cmp	r3, r1
 800426e:	bf94      	ite	ls
 8004270:	65a3      	strls	r3, [r4, #88]	; 0x58
 8004272:	65a1      	strhi	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 8004274:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004278:	4641      	mov	r1, r8
 800427a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800427c:	f003 fb60 	bl	8007940 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8004280:	2301      	movs	r3, #1
 8004282:	4622      	mov	r2, r4
 8004284:	4629      	mov	r1, r5
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff feee 	bl	8004068 <lfs_fs_rawtraverse>
        if (err) {
 800428c:	2800      	cmp	r0, #0
 800428e:	d09d      	beq.n	80041cc <lfs_alloc+0xc>
    lfs->free.ack = lfs->cfg->block_count;
 8004290:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	6623      	str	r3, [r4, #96]	; 0x60
    lfs->free.i = 0;
 8004296:	e9c4 8816 	strd	r8, r8, [r4, #88]	; 0x58
 800429a:	e7d2      	b.n	8004242 <lfs_alloc+0x82>
                return 0;
 800429c:	2000      	movs	r0, #0
 800429e:	e7d0      	b.n	8004242 <lfs_alloc+0x82>
 80042a0:	0800288b 	.word	0x0800288b
 80042a4:	08008b74 	.word	0x08008b74
 80042a8:	0800967e 	.word	0x0800967e
 80042ac:	08009194 	.word	0x08009194

080042b0 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80042b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80042b2:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80042b4:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80042b6:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80042b8:	f7ff ff82 	bl	80041c0 <lfs_alloc>
        if (err) {
 80042bc:	4605      	mov	r5, r0
 80042be:	bb98      	cbnz	r0, 8004328 <lfs_dir_alloc+0x78>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80042c0:	4621      	mov	r1, r4
 80042c2:	4630      	mov	r0, r6
 80042c4:	f7ff ff7c 	bl	80041c0 <lfs_alloc>
        if (err) {
 80042c8:	4605      	mov	r5, r0
 80042ca:	bb68      	cbnz	r0, 8004328 <lfs_dir_alloc+0x78>
    dir->rev = 0;
 80042cc:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
 80042ce:	2304      	movs	r3, #4
    dir->rev = 0;
 80042d0:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
 80042d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	9001      	str	r0, [sp, #4]
 80042dc:	9200      	str	r2, [sp, #0]
 80042de:	4601      	mov	r1, r0
 80042e0:	4632      	mov	r2, r6
 80042e2:	f106 0068 	add.w	r0, r6, #104	; 0x68
 80042e6:	f7fe fc99 	bl	8002c1c <lfs_bd_read.isra.23>
    if (err && err != LFS_ERR_CORRUPT) {
 80042ea:	b110      	cbz	r0, 80042f2 <lfs_dir_alloc+0x42>
 80042ec:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80042f0:	d11d      	bne.n	800432e <lfs_dir_alloc+0x7e>
    if (lfs->cfg->block_cycles > 0) {
 80042f2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 80042f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	dd0b      	ble.n	8004312 <lfs_dir_alloc+0x62>
    return lfs_aligndown(a + alignment-1, alignment);
 80042fa:	68a3      	ldr	r3, [r4, #8]
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80042fc:	3201      	adds	r2, #1
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	4413      	add	r3, r2
    return a - (a % alignment);
 8004306:	fbb3 f1f2 	udiv	r1, r3, r2
 800430a:	fb02 3211 	mls	r2, r2, r1, r3
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	2304      	movs	r3, #4
    dir->tail[1] = LFS_BLOCK_NULL;
 8004318:	e9c4 2206 	strd	r2, r2, [r4, #24]
    dir->etag = 0xffffffff;
 800431c:	e9c4 3203 	strd	r3, r2, [r4, #12]
    dir->count = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	82a3      	strh	r3, [r4, #20]
    dir->erased = false;
 8004324:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 8004326:	75e3      	strb	r3, [r4, #23]
}
 8004328:	4628      	mov	r0, r5
 800432a:	b004      	add	sp, #16
 800432c:	bd70      	pop	{r4, r5, r6, pc}
 800432e:	4605      	mov	r5, r0
 8004330:	e7fa      	b.n	8004328 <lfs_dir_alloc+0x78>
	...

08004334 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                err = lfs_dir_getread(lfs, &file->m,
 8004338:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8004458 <lfs_file_relocate+0x124>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800433c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800445c <lfs_file_relocate+0x128>
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004340:	b087      	sub	sp, #28
 8004342:	4604      	mov	r4, r0
 8004344:	460d      	mov	r5, r1
        int err = lfs_alloc(lfs, &nblock);
 8004346:	a905      	add	r1, sp, #20
 8004348:	4620      	mov	r0, r4
 800434a:	f7ff ff39 	bl	80041c0 <lfs_alloc>
        if (err) {
 800434e:	4607      	mov	r7, r0
 8004350:	b948      	cbnz	r0, 8004366 <lfs_file_relocate+0x32>
        err = lfs_bd_erase(lfs, nblock);
 8004352:	9905      	ldr	r1, [sp, #20]
 8004354:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004356:	f7fe fc09 	bl	8002b6c <lfs_bd_erase.isra.18>
        if (err) {
 800435a:	4607      	mov	r7, r0
 800435c:	2800      	cmp	r0, #0
 800435e:	d064      	beq.n	800442a <lfs_file_relocate+0xf6>
            if (err == LFS_ERR_CORRUPT) {
 8004360:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004364:	d067      	beq.n	8004436 <lfs_file_relocate+0x102>
}
 8004366:	4638      	mov	r0, r7
 8004368:	b007      	add	sp, #28
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
 800436e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004370:	02d2      	lsls	r2, r2, #11
 8004372:	eba3 0306 	sub.w	r3, r3, r6
 8004376:	d52b      	bpl.n	80043d0 <lfs_file_relocate+0x9c>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8004378:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
 800437a:	ea4a 2e82 	orr.w	lr, sl, r2, lsl #10
    if (off+size > lfs->cfg->block_size) {
 800437e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004380:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8004384:	1c70      	adds	r0, r6, #1
 8004386:	4584      	cmp	ip, r0
                err = lfs_dir_getread(lfs, &file->m,
 8004388:	f105 0108 	add.w	r1, r5, #8
    if (off+size > lfs->cfg->block_size) {
 800438c:	d34a      	bcc.n	8004424 <lfs_file_relocate+0xf0>
 800438e:	2001      	movs	r0, #1
 8004390:	9003      	str	r0, [sp, #12]
 8004392:	f10d 0013 	add.w	r0, sp, #19
 8004396:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800439a:	f8cd e000 	str.w	lr, [sp]
 800439e:	4642      	mov	r2, r8
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7ff f9ad 	bl	8003700 <lfs_dir_getread.part.26.constprop.37>
                if (err) {
 80043a6:	b988      	cbnz	r0, 80043cc <lfs_file_relocate+0x98>
            err = lfs_bd_prog(lfs,
 80043a8:	f10d 0213 	add.w	r2, sp, #19
 80043ac:	2301      	movs	r3, #1
 80043ae:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80043b2:	9a05      	ldr	r2, [sp, #20]
 80043b4:	9200      	str	r2, [sp, #0]
 80043b6:	9303      	str	r3, [sp, #12]
 80043b8:	4622      	mov	r2, r4
 80043ba:	f104 0110 	add.w	r1, r4, #16
 80043be:	4620      	mov	r0, r4
 80043c0:	f7ff fc70 	bl	8003ca4 <lfs_bd_prog>
            if (err) {
 80043c4:	b190      	cbz	r0, 80043ec <lfs_file_relocate+0xb8>
                if (err == LFS_ERR_CORRUPT) {
 80043c6:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80043ca:	d034      	beq.n	8004436 <lfs_file_relocate+0x102>
                    return err;
 80043cc:	4607      	mov	r7, r0
 80043ce:	e7ca      	b.n	8004366 <lfs_file_relocate+0x32>
                err = lfs_bd_read(lfs,
 80043d0:	2201      	movs	r2, #1
 80043d2:	9203      	str	r2, [sp, #12]
 80043d4:	f10d 0213 	add.w	r2, sp, #19
 80043d8:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80043dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80043de:	9200      	str	r2, [sp, #0]
 80043e0:	4641      	mov	r1, r8
 80043e2:	4622      	mov	r2, r4
 80043e4:	4658      	mov	r0, fp
 80043e6:	f7fe fc19 	bl	8002c1c <lfs_bd_read.isra.23>
 80043ea:	e7dc      	b.n	80043a6 <lfs_file_relocate+0x72>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80043ec:	3601      	adds	r6, #1
 80043ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80043f0:	42b3      	cmp	r3, r6
 80043f2:	d8bc      	bhi.n	800436e <lfs_file_relocate+0x3a>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80043f4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80043f6:	69e1      	ldr	r1, [r4, #28]
 80043f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80043fc:	f003 fa95 	bl	800792a <memcpy>
        file->cache.block = lfs->pcache.block;
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8004404:	6963      	ldr	r3, [r4, #20]
 8004406:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8004408:	69a3      	ldr	r3, [r4, #24]
 800440a:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800440c:	f104 0110 	add.w	r1, r4, #16
 8004410:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004412:	f7fe fab0 	bl	8002976 <lfs_cache_zero.isra.17>
        file->block = nblock;
 8004416:	9b05      	ldr	r3, [sp, #20]
 8004418:	63ab      	str	r3, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800441a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800441c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004420:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
 8004422:	e7a0      	b.n	8004366 <lfs_file_relocate+0x32>
        return LFS_ERR_CORRUPT;
 8004424:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8004428:	e7d0      	b.n	80043cc <lfs_file_relocate+0x98>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800442a:	4606      	mov	r6, r0
 800442c:	f105 0840 	add.w	r8, r5, #64	; 0x40
                err = lfs_bd_read(lfs,
 8004430:	f104 0b68 	add.w	fp, r4, #104	; 0x68
 8004434:	e7db      	b.n	80043ee <lfs_file_relocate+0xba>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004436:	9b05      	ldr	r3, [sp, #20]
 8004438:	f8cd 9000 	str.w	r9, [sp]
 800443c:	f640 4211 	movw	r2, #3089	; 0xc11
 8004440:	4903      	ldr	r1, [pc, #12]	; (8004450 <lfs_file_relocate+0x11c>)
 8004442:	4804      	ldr	r0, [pc, #16]	; (8004454 <lfs_file_relocate+0x120>)
 8004444:	f003 fdf4 	bl	8008030 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	6123      	str	r3, [r4, #16]
    while (true) {
 800444e:	e77a      	b.n	8004346 <lfs_file_relocate+0x12>
 8004450:	0800967e 	.word	0x0800967e
 8004454:	08009519 	.word	0x08009519
 8004458:	20100000 	.word	0x20100000
 800445c:	08008b74 	.word	0x08008b74

08004460 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	b09b      	sub	sp, #108	; 0x6c
 8004466:	e9cd 2308 	strd	r2, r3, [sp, #32]
    return (lfs->cfg->block_cycles > 0
 800446a:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800446c:	f8bd 8094 	ldrh.w	r8, [sp, #148]	; 0x94
    return (lfs->cfg->block_cycles > 0
 8004470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004472:	688b      	ldr	r3, [r1, #8]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004474:	f8bd b098 	ldrh.w	fp, [sp, #152]	; 0x98
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8004478:	2a00      	cmp	r2, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800447a:	4604      	mov	r4, r0
 800447c:	460d      	mov	r5, r1
 800447e:	f103 0301 	add.w	r3, r3, #1
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8004482:	dc03      	bgt.n	800448c <lfs_dir_compact+0x2c>
    dir->rev += 1;
 8004484:	608b      	str	r3, [r1, #8]
 8004486:	2600      	movs	r6, #0
    bool relocated = false;
 8004488:	4637      	mov	r7, r6
 800448a:	e014      	b.n	80044b6 <lfs_dir_compact+0x56>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800448c:	3201      	adds	r2, #1
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	fbb3 f1f2 	udiv	r1, r3, r2
 8004496:	fb02 3211 	mls	r2, r2, r1, r3
    dir->rev += 1;
 800449a:	60ab      	str	r3, [r5, #8]
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800449c:	2a00      	cmp	r2, #0
 800449e:	d1f2      	bne.n	8004486 <lfs_dir_compact+0x26>
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80044a0:	2601      	movs	r6, #1
 80044a2:	a90b      	add	r1, sp, #44	; 0x2c
 80044a4:	4628      	mov	r0, r5
 80044a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80044a8:	960c      	str	r6, [sp, #48]	; 0x30
 80044aa:	f7fe f9a3 	bl	80027f4 <lfs_pair_cmp>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	f040 80c3 	bne.w	800463a <lfs_dir_compact+0x1da>
    bool relocated = false;
 80044b4:	4607      	mov	r7, r0
                .end = (lfs->cfg->metadata_max ?
 80044b6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                .block = dir->pair[1],
 80044b8:	6869      	ldr	r1, [r5, #4]
            struct lfs_commit commit = {
 80044ba:	9114      	str	r1, [sp, #80]	; 0x50
 80044bc:	2300      	movs	r3, #0
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
 80044c6:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
                .end = (lfs->cfg->metadata_max ?
 80044ca:	6c83      	ldr	r3, [r0, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80044cc:	b1d3      	cbz	r3, 8004504 <lfs_dir_compact+0xa4>
 80044ce:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80044d0:	9319      	str	r3, [sp, #100]	; 0x64
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80044d2:	f7fe fb4b 	bl	8002b6c <lfs_bd_erase.isra.18>
            if (err) {
 80044d6:	b1b8      	cbz	r0, 8004508 <lfs_dir_compact+0xa8>
                if (err == LFS_ERR_CORRUPT) {
 80044d8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80044dc:	f040 80aa 	bne.w	8004634 <lfs_dir_compact+0x1d4>
    rcache->block = LFS_BLOCK_NULL;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	6123      	str	r3, [r4, #16]
        if (!tired) {
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	f040 80aa 	bne.w	8004640 <lfs_dir_compact+0x1e0>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80044ec:	4b67      	ldr	r3, [pc, #412]	; (800468c <lfs_dir_compact+0x22c>)
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f240 725d 	movw	r2, #1885	; 0x75d
 80044f4:	686b      	ldr	r3, [r5, #4]
 80044f6:	4966      	ldr	r1, [pc, #408]	; (8004690 <lfs_dir_compact+0x230>)
 80044f8:	4866      	ldr	r0, [pc, #408]	; (8004694 <lfs_dir_compact+0x234>)
 80044fa:	f003 fd99 	bl	8008030 <iprintf>
 80044fe:	e09f      	b.n	8004640 <lfs_dir_compact+0x1e0>
        tired = false;
 8004500:	4606      	mov	r6, r0
 8004502:	e7d8      	b.n	80044b6 <lfs_dir_compact+0x56>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004504:	69c3      	ldr	r3, [r0, #28]
 8004506:	e7e2      	b.n	80044ce <lfs_dir_compact+0x6e>
            err = lfs_dir_commitprog(lfs, &commit,
 8004508:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 800450c:	2304      	movs	r3, #4
 800450e:	f105 0208 	add.w	r2, r5, #8
 8004512:	4649      	mov	r1, r9
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff fc37 	bl	8003d88 <lfs_dir_commitprog>
            if (err) {
 800451a:	2800      	cmp	r0, #0
 800451c:	d1dc      	bne.n	80044d8 <lfs_dir_compact+0x78>
            err = lfs_dir_traverse(lfs,
 800451e:	ab0d      	add	r3, sp, #52	; 0x34
 8004520:	9307      	str	r3, [sp, #28]
 8004522:	4b5d      	ldr	r3, [pc, #372]	; (8004698 <lfs_dir_compact+0x238>)
 8004524:	9306      	str	r3, [sp, #24]
 8004526:	f1c8 0300 	rsb	r3, r8, #0
 800452a:	b21b      	sxth	r3, r3
 800452c:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004530:	4b5a      	ldr	r3, [pc, #360]	; (800469c <lfs_dir_compact+0x23c>)
 8004532:	9302      	str	r3, [sp, #8]
 8004534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	9b08      	ldr	r3, [sp, #32]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	4602      	mov	r2, r0
 800453e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	9924      	ldr	r1, [sp, #144]	; 0x90
 8004548:	4620      	mov	r0, r4
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800454a:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
            err = lfs_dir_traverse(lfs,
 800454e:	f7ff f9a5 	bl	800389c <lfs_dir_traverse.constprop.39>
            if (err) {
 8004552:	2800      	cmp	r0, #0
 8004554:	d1c0      	bne.n	80044d8 <lfs_dir_compact+0x78>
            if (!lfs_pair_isnull(dir->tail)) {
 8004556:	f105 0118 	add.w	r1, r5, #24
 800455a:	4608      	mov	r0, r1
 800455c:	f7fe f940 	bl	80027e0 <lfs_pair_isnull>
 8004560:	b960      	cbnz	r0, 800457c <lfs_dir_compact+0x11c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8004562:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
 8004564:	460b      	mov	r3, r1
 8004566:	494e      	ldr	r1, [pc, #312]	; (80046a0 <lfs_dir_compact+0x240>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8004568:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 800456c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8004570:	4620      	mov	r0, r4
 8004572:	4649      	mov	r1, r9
 8004574:	f7ff fc27 	bl	8003dc6 <lfs_dir_commitattr>
                if (err) {
 8004578:	2800      	cmp	r0, #0
 800457a:	d1ad      	bne.n	80044d8 <lfs_dir_compact+0x78>
            lfs_gstate_t delta = {0};
 800457c:	2300      	movs	r3, #0
 800457e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8004582:	9313      	str	r3, [sp, #76]	; 0x4c
            if (!relocated) {
 8004584:	b94f      	cbnz	r7, 800459a <lfs_dir_compact+0x13a>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8004586:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800458a:	a811      	add	r0, sp, #68	; 0x44
 800458c:	f7fe f94d 	bl	800282a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8004590:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004594:	a811      	add	r0, sp, #68	; 0x44
 8004596:	f7fe f948 	bl	800282a <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800459a:	f104 0a48 	add.w	sl, r4, #72	; 0x48
 800459e:	4651      	mov	r1, sl
 80045a0:	a811      	add	r0, sp, #68	; 0x44
 80045a2:	f7fe f942 	bl	800282a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80045a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045a8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045ac:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80045b0:	aa11      	add	r2, sp, #68	; 0x44
 80045b2:	4629      	mov	r1, r5
 80045b4:	4620      	mov	r0, r4
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80045b6:	9311      	str	r3, [sp, #68]	; 0x44
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80045b8:	f7fe fc90 	bl	8002edc <lfs_dir_getgstate>
            if (err) {
 80045bc:	2800      	cmp	r0, #0
 80045be:	d139      	bne.n	8004634 <lfs_dir_compact+0x1d4>
            if (!lfs_gstate_iszero(&delta)) {
 80045c0:	a811      	add	r0, sp, #68	; 0x44
 80045c2:	f7fe f940 	bl	8002846 <lfs_gstate_iszero>
 80045c6:	b940      	cbnz	r0, 80045da <lfs_dir_compact+0x17a>
                err = lfs_dir_commitattr(lfs, &commit,
 80045c8:	ab11      	add	r3, sp, #68	; 0x44
 80045ca:	4a36      	ldr	r2, [pc, #216]	; (80046a4 <lfs_dir_compact+0x244>)
 80045cc:	4649      	mov	r1, r9
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff fbf9 	bl	8003dc6 <lfs_dir_commitattr>
                if (err) {
 80045d4:	2800      	cmp	r0, #0
 80045d6:	f47f af7f 	bne.w	80044d8 <lfs_dir_compact+0x78>
            err = lfs_dir_commitcrc(lfs, &commit);
 80045da:	4649      	mov	r1, r9
 80045dc:	4620      	mov	r0, r4
 80045de:	f7ff fc51 	bl	8003e84 <lfs_dir_commitcrc>
            if (err) {
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f47f af78 	bne.w	80044d8 <lfs_dir_compact+0x78>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80045e8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80045ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	fbb2 f3f1 	udiv	r3, r2, r1
 80045f2:	fb01 2313 	mls	r3, r1, r3, r2
 80045f6:	b133      	cbz	r3, 8004606 <lfs_dir_compact+0x1a6>
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <lfs_dir_compact+0x248>)
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <lfs_dir_compact+0x24c>)
 80045fc:	4824      	ldr	r0, [pc, #144]	; (8004690 <lfs_dir_compact+0x230>)
 80045fe:	f240 714b 	movw	r1, #1867	; 0x74b
 8004602:	f003 f8f5 	bl	80077f0 <__assert_func>
    pair[0] = pair[1];
 8004606:	e9d5 1000 	ldrd	r1, r0, [r5]
            dir->off = commit.off;
 800460a:	60ea      	str	r2, [r5, #12]
            dir->count = end - begin;
 800460c:	ebab 0808 	sub.w	r8, fp, r8
            dir->etag = commit.ptag;
 8004610:	9a16      	ldr	r2, [sp, #88]	; 0x58
            dir->count = end - begin;
 8004612:	f8a5 8014 	strh.w	r8, [r5, #20]
    pair[1] = t;
 8004616:	e9c5 0100 	strd	r0, r1, [r5]
            dir->etag = commit.ptag;
 800461a:	612a      	str	r2, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 800461c:	64a3      	str	r3, [r4, #72]	; 0x48
 800461e:	e9ca 3301 	strd	r3, r3, [sl, #4]
            if (!relocated) {
 8004622:	b937      	cbnz	r7, 8004632 <lfs_dir_compact+0x1d2>
                lfs->gdisk = lfs->gstate;
 8004624:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004628:	3430      	adds	r4, #48	; 0x30
 800462a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800462e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 8004632:	4638      	mov	r0, r7
}
 8004634:	b01b      	add	sp, #108	; 0x6c
 8004636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rcache->block = LFS_BLOCK_NULL;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004640:	f04f 0900 	mov.w	r9, #0
 8004644:	2701      	movs	r7, #1
 8004646:	a90f      	add	r1, sp, #60	; 0x3c
 8004648:	4628      	mov	r0, r5
 800464a:	e9cd 970f 	strd	r9, r7, [sp, #60]	; 0x3c
 800464e:	f7fe f8d1 	bl	80027f4 <lfs_pair_cmp>
 8004652:	b958      	cbnz	r0, 800466c <lfs_dir_compact+0x20c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8004654:	4b0d      	ldr	r3, [pc, #52]	; (800468c <lfs_dir_compact+0x22c>)
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	f240 7263 	movw	r2, #1891	; 0x763
 800465c:	686b      	ldr	r3, [r5, #4]
 800465e:	490c      	ldr	r1, [pc, #48]	; (8004690 <lfs_dir_compact+0x230>)
 8004660:	4813      	ldr	r0, [pc, #76]	; (80046b0 <lfs_dir_compact+0x250>)
 8004662:	f003 fce5 	bl	8008030 <iprintf>
            return LFS_ERR_NOSPC;
 8004666:	f06f 001b 	mvn.w	r0, #27
 800466a:	e7e3      	b.n	8004634 <lfs_dir_compact+0x1d4>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800466c:	1d29      	adds	r1, r5, #4
 800466e:	4620      	mov	r0, r4
 8004670:	f7ff fda6 	bl	80041c0 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8004674:	2800      	cmp	r0, #0
 8004676:	f43f af43 	beq.w	8004500 <lfs_dir_compact+0xa0>
 800467a:	f110 0f1c 	cmn.w	r0, #28
 800467e:	d1d9      	bne.n	8004634 <lfs_dir_compact+0x1d4>
 8004680:	2e00      	cmp	r6, #0
 8004682:	d0d7      	beq.n	8004634 <lfs_dir_compact+0x1d4>
        relocated = true;
 8004684:	4637      	mov	r7, r6
        tired = false;
 8004686:	464e      	mov	r6, r9
 8004688:	e715      	b.n	80044b6 <lfs_dir_compact+0x56>
 800468a:	bf00      	nop
 800468c:	08008b74 	.word	0x08008b74
 8004690:	0800967e 	.word	0x0800967e
 8004694:	08009519 	.word	0x08009519
 8004698:	08003e77 	.word	0x08003e77
 800469c:	400ffc00 	.word	0x400ffc00
 80046a0:	000ffc08 	.word	0x000ffc08
 80046a4:	7ffffc0c 	.word	0x7ffffc0c
 80046a8:	0800926d 	.word	0x0800926d
 80046ac:	080090b2 	.word	0x080090b2
 80046b0:	08009293 	.word	0x08009293

080046b4 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80046b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046b8:	b08d      	sub	sp, #52	; 0x34
 80046ba:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
 80046bc:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80046be:	4605      	mov	r5, r0
 80046c0:	4617      	mov	r7, r2
 80046c2:	4698      	mov	r8, r3
 80046c4:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 80046c8:	f7ff fdf2 	bl	80042b0 <lfs_dir_alloc>
    if (err) {
 80046cc:	4606      	mov	r6, r0
 80046ce:	bb38      	cbnz	r0, 8004720 <lfs_dir_split+0x6c>
    tail.split = dir->split;
 80046d0:	7de3      	ldrb	r3, [r4, #23]
 80046d2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80046d6:	69a3      	ldr	r3, [r4, #24]
 80046d8:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80046da:	69e3      	ldr	r3, [r4, #28]
 80046dc:	930b      	str	r3, [sp, #44]	; 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80046de:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80046e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80046e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	463a      	mov	r2, r7
 80046ec:	4643      	mov	r3, r8
 80046ee:	a904      	add	r1, sp, #16
 80046f0:	4628      	mov	r0, r5
 80046f2:	f7ff feb5 	bl	8004460 <lfs_dir_compact>
    if (res < 0) {
 80046f6:	2800      	cmp	r0, #0
 80046f8:	db16      	blt.n	8004728 <lfs_dir_split+0x74>
    dir->tail[0] = tail.pair[0];
 80046fa:	f8dd 8010 	ldr.w	r8, [sp, #16]
    dir->tail[1] = tail.pair[1];
 80046fe:	9f05      	ldr	r7, [sp, #20]
    dir->tail[0] = tail.pair[0];
 8004700:	f8c4 8018 	str.w	r8, [r4, #24]
    dir->split = true;
 8004704:	2301      	movs	r3, #1
    dir->tail[1] = tail.pair[1];
 8004706:	61e7      	str	r7, [r4, #28]
    dir->split = true;
 8004708:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800470a:	f105 0120 	add.w	r1, r5, #32
 800470e:	4620      	mov	r0, r4
 8004710:	f7fe f870 	bl	80027f4 <lfs_pair_cmp>
 8004714:	b920      	cbnz	r0, 8004720 <lfs_dir_split+0x6c>
 8004716:	f1b9 0f00 	cmp.w	r9, #0
 800471a:	d101      	bne.n	8004720 <lfs_dir_split+0x6c>
        lfs->root[1] = tail.pair[1];
 800471c:	e9c5 8708 	strd	r8, r7, [r5, #32]
}
 8004720:	4630      	mov	r0, r6
 8004722:	b00d      	add	sp, #52	; 0x34
 8004724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004728:	4606      	mov	r6, r0
 800472a:	e7f9      	b.n	8004720 <lfs_dir_split+0x6c>

0800472c <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800472c:	b507      	push	{r0, r1, r2, lr}
    lfs_size_t size = 0;
 800472e:	aa02      	add	r2, sp, #8
 8004730:	2300      	movs	r3, #0
 8004732:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8004736:	4904      	ldr	r1, [pc, #16]	; (8004748 <lfs_fs_rawsize+0x1c>)
 8004738:	f7ff fc96 	bl	8004068 <lfs_fs_rawtraverse>
    if (err) {
 800473c:	b900      	cbnz	r0, 8004740 <lfs_fs_rawsize+0x14>
        return err;
    }

    return size;
 800473e:	9801      	ldr	r0, [sp, #4]
}
 8004740:	b003      	add	sp, #12
 8004742:	f85d fb04 	ldr.w	pc, [sp], #4
 8004746:	bf00      	nop
 8004748:	08002941 	.word	0x08002941

0800474c <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 800474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004750:	b097      	sub	sp, #92	; 0x5c
    for (int i = 0; i < attrcount; i++) {
 8004752:	2700      	movs	r7, #0
        lfs_mdir_t *pdir) {
 8004754:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004758:	9208      	str	r2, [sp, #32]
 800475a:	4606      	mov	r6, r0
 800475c:	460d      	mov	r5, r1
 800475e:	469b      	mov	fp, r3
    bool hasdelete = false;
 8004760:	4638      	mov	r0, r7
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8004762:	f240 4401 	movw	r4, #1025	; 0x401
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004766:	f240 4cff 	movw	ip, #1279	; 0x4ff
    for (int i = 0; i < attrcount; i++) {
 800476a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800476c:	429f      	cmp	r7, r3
 800476e:	f040 8088 	bne.w	8004882 <lfs_dir_relocatingcommit+0x136>
    if (hasdelete && dir->count == 0) {
 8004772:	2800      	cmp	r0, #0
 8004774:	f040 80b1 	bne.w	80048da <lfs_dir_relocatingcommit+0x18e>
    if (dir->erased) {
 8004778:	7dab      	ldrb	r3, [r5, #22]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 80ce 	bne.w	800491c <lfs_dir_relocatingcommit+0x1d0>
    rcache->block = LFS_BLOCK_NULL;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8004784:	f8b5 9014 	ldrh.w	r9, [r5, #20]
    rcache->block = LFS_BLOCK_NULL;
 8004788:	6133      	str	r3, [r6, #16]
        lfs_size_t split = begin;
 800478a:	f04f 0800 	mov.w	r8, #0
        while (end - split > 1) {
 800478e:	eba9 0a08 	sub.w	sl, r9, r8
 8004792:	f1ba 0f01 	cmp.w	sl, #1
 8004796:	f200 8171 	bhi.w	8004a7c <lfs_dir_relocatingcommit+0x330>
        if (split == begin) {
 800479a:	f1b8 0f00 	cmp.w	r8, #0
 800479e:	d01c      	beq.n	80047da <lfs_dir_relocatingcommit+0x8e>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80047a0:	fa1f f888 	uxth.w	r8, r8
 80047a4:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80047a8:	9500      	str	r5, [sp, #0]
 80047aa:	463b      	mov	r3, r7
 80047ac:	465a      	mov	r2, fp
 80047ae:	4629      	mov	r1, r5
 80047b0:	4630      	mov	r0, r6
 80047b2:	f7ff ff7f 	bl	80046b4 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 80047b6:	4604      	mov	r4, r0
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f000 8146 	beq.w	8004a4a <lfs_dir_relocatingcommit+0x2fe>
 80047be:	f110 0f1c 	cmn.w	r0, #28
 80047c2:	d15a      	bne.n	800487a <lfs_dir_relocatingcommit+0x12e>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80047c4:	4ba2      	ldr	r3, [pc, #648]	; (8004a50 <lfs_dir_relocatingcommit+0x304>)
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	686b      	ldr	r3, [r5, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	f240 72ad 	movw	r2, #1965	; 0x7ad
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	49a0      	ldr	r1, [pc, #640]	; (8004a54 <lfs_dir_relocatingcommit+0x308>)
 80047d4:	48a0      	ldr	r0, [pc, #640]	; (8004a58 <lfs_dir_relocatingcommit+0x30c>)
 80047d6:	f003 fc2b 	bl	8008030 <iprintf>
    return (lfs->cfg->block_cycles > 0
 80047da:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dd3f      	ble.n	8004862 <lfs_dir_relocatingcommit+0x116>
 80047e2:	68a9      	ldr	r1, [r5, #8]
 80047e4:	3301      	adds	r3, #1
 80047e6:	3101      	adds	r1, #1
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	fbb1 f2f3 	udiv	r2, r1, r3
 80047f0:	fb03 1312 	mls	r3, r3, r2, r1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d134      	bne.n	8004862 <lfs_dir_relocatingcommit+0x116>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80047f8:	9310      	str	r3, [sp, #64]	; 0x40
 80047fa:	a910      	add	r1, sp, #64	; 0x40
 80047fc:	2301      	movs	r3, #1
 80047fe:	4628      	mov	r0, r5
 8004800:	9311      	str	r3, [sp, #68]	; 0x44
 8004802:	f7fd fff7 	bl	80027f4 <lfs_pair_cmp>
 8004806:	4682      	mov	sl, r0
 8004808:	bb58      	cbnz	r0, 8004862 <lfs_dir_relocatingcommit+0x116>
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff ff8e 	bl	800472c <lfs_fs_rawsize>
        if (size < 0) {
 8004810:	1e04      	subs	r4, r0, #0
 8004812:	db78      	blt.n	8004906 <lfs_dir_relocatingcommit+0x1ba>
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8004814:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 800481c:	d221      	bcs.n	8004862 <lfs_dir_relocatingcommit+0x116>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800481e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8004a50 <lfs_dir_relocatingcommit+0x304>
 8004822:	68ab      	ldr	r3, [r5, #8]
 8004824:	498b      	ldr	r1, [pc, #556]	; (8004a54 <lfs_dir_relocatingcommit+0x308>)
 8004826:	f8cd 8000 	str.w	r8, [sp]
 800482a:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800482e:	488b      	ldr	r0, [pc, #556]	; (8004a5c <lfs_dir_relocatingcommit+0x310>)
 8004830:	f003 fbfe 	bl	8008030 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004834:	e9cd a901 	strd	sl, r9, [sp, #4]
 8004838:	9500      	str	r5, [sp, #0]
 800483a:	463b      	mov	r3, r7
 800483c:	465a      	mov	r2, fp
 800483e:	4629      	mov	r1, r5
 8004840:	4630      	mov	r0, r6
 8004842:	f7ff ff37 	bl	80046b4 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 8004846:	4604      	mov	r4, r0
 8004848:	2800      	cmp	r0, #0
 800484a:	f000 8153 	beq.w	8004af4 <lfs_dir_relocatingcommit+0x3a8>
 800484e:	f110 0f1c 	cmn.w	r0, #28
 8004852:	d112      	bne.n	800487a <lfs_dir_relocatingcommit+0x12e>
                LFS_WARN("Unable to expand superblock");
 8004854:	4643      	mov	r3, r8
 8004856:	f240 72ca 	movw	r2, #1994	; 0x7ca
 800485a:	497e      	ldr	r1, [pc, #504]	; (8004a54 <lfs_dir_relocatingcommit+0x308>)
 800485c:	4880      	ldr	r0, [pc, #512]	; (8004a60 <lfs_dir_relocatingcommit+0x314>)
 800485e:	f003 fbe7 	bl	8008030 <iprintf>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8004862:	2300      	movs	r3, #0
 8004864:	e9cd 5300 	strd	r5, r3, [sp]
 8004868:	f8cd 9008 	str.w	r9, [sp, #8]
 800486c:	463b      	mov	r3, r7
 800486e:	465a      	mov	r2, fp
 8004870:	4629      	mov	r1, r5
 8004872:	4630      	mov	r0, r6
 8004874:	f7ff fdf4 	bl	8004460 <lfs_dir_compact>
 8004878:	4604      	mov	r4, r0
    if (state < 0) {
 800487a:	2c00      	cmp	r4, #0
 800487c:	f280 80cd 	bge.w	8004a1a <lfs_dir_relocatingcommit+0x2ce>
 8004880:	e041      	b.n	8004906 <lfs_dir_relocatingcommit+0x1ba>
    return (tag & 0x7ff00000) >> 20;
 8004882:	f85b 3037 	ldr.w	r3, [fp, r7, lsl #3]
 8004886:	0d1b      	lsrs	r3, r3, #20
 8004888:	b299      	uxth	r1, r3
 800488a:	f3c1 0e0a 	ubfx	lr, r1, #0, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800488e:	45a6      	cmp	lr, r4
 8004890:	d104      	bne.n	800489c <lfs_dir_relocatingcommit+0x150>
            dir->count += 1;
 8004892:	8aab      	ldrh	r3, [r5, #20]
 8004894:	3301      	adds	r3, #1
 8004896:	82ab      	strh	r3, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
 8004898:	3701      	adds	r7, #1
 800489a:	e766      	b.n	800476a <lfs_dir_relocatingcommit+0x1e>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800489c:	45e6      	cmp	lr, ip
 800489e:	d10c      	bne.n	80048ba <lfs_dir_relocatingcommit+0x16e>
            LFS_ASSERT(dir->count > 0);
 80048a0:	8aab      	ldrh	r3, [r5, #20]
 80048a2:	b933      	cbnz	r3, 80048b2 <lfs_dir_relocatingcommit+0x166>
 80048a4:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <lfs_dir_relocatingcommit+0x318>)
 80048a6:	4a70      	ldr	r2, [pc, #448]	; (8004a68 <lfs_dir_relocatingcommit+0x31c>)
 80048a8:	f240 71e2 	movw	r1, #2018	; 0x7e2
        LFS_ASSERT(pdir);
 80048ac:	4869      	ldr	r0, [pc, #420]	; (8004a54 <lfs_dir_relocatingcommit+0x308>)
 80048ae:	f002 ff9f 	bl	80077f0 <__assert_func>
            dir->count -= 1;
 80048b2:	3b01      	subs	r3, #1
 80048b4:	82ab      	strh	r3, [r5, #20]
            hasdelete = true;
 80048b6:	2001      	movs	r0, #1
 80048b8:	e7ee      	b.n	8004898 <lfs_dir_relocatingcommit+0x14c>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80048ba:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
 80048be:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80048c2:	d1e9      	bne.n	8004898 <lfs_dir_relocatingcommit+0x14c>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80048c4:	eb0b 01c7 	add.w	r1, fp, r7, lsl #3
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80048c8:	f003 0301 	and.w	r3, r3, #1
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80048cc:	684a      	ldr	r2, [r1, #4]
 80048ce:	6811      	ldr	r1, [r2, #0]
 80048d0:	61a9      	str	r1, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80048d2:	6851      	ldr	r1, [r2, #4]
 80048d4:	61e9      	str	r1, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80048d6:	75eb      	strb	r3, [r5, #23]
 80048d8:	e7de      	b.n	8004898 <lfs_dir_relocatingcommit+0x14c>
    if (hasdelete && dir->count == 0) {
 80048da:	8aab      	ldrh	r3, [r5, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f47f af4b 	bne.w	8004778 <lfs_dir_relocatingcommit+0x2c>
        LFS_ASSERT(pdir);
 80048e2:	f1b8 0f00 	cmp.w	r8, #0
 80048e6:	d104      	bne.n	80048f2 <lfs_dir_relocatingcommit+0x1a6>
 80048e8:	4b60      	ldr	r3, [pc, #384]	; (8004a6c <lfs_dir_relocatingcommit+0x320>)
 80048ea:	4a5f      	ldr	r2, [pc, #380]	; (8004a68 <lfs_dir_relocatingcommit+0x31c>)
 80048ec:	f240 71ef 	movw	r1, #2031	; 0x7ef
 80048f0:	e7dc      	b.n	80048ac <lfs_dir_relocatingcommit+0x160>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80048f2:	4642      	mov	r2, r8
 80048f4:	4629      	mov	r1, r5
 80048f6:	4630      	mov	r0, r6
 80048f8:	f7fe fd73 	bl	80033e2 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 80048fc:	4604      	mov	r4, r0
 80048fe:	b130      	cbz	r0, 800490e <lfs_dir_relocatingcommit+0x1c2>
 8004900:	1c83      	adds	r3, r0, #2
 8004902:	f43f af39 	beq.w	8004778 <lfs_dir_relocatingcommit+0x2c>
}
 8004906:	4620      	mov	r0, r4
 8004908:	b017      	add	sp, #92	; 0x5c
 800490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err != LFS_ERR_NOENT && pdir->split) {
 800490e:	f898 3017 	ldrb.w	r3, [r8, #23]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f43f af30 	beq.w	8004778 <lfs_dir_relocatingcommit+0x2c>
            state = LFS_OK_DROPPED;
 8004918:	2402      	movs	r4, #2
 800491a:	e07e      	b.n	8004a1a <lfs_dir_relocatingcommit+0x2ce>
            .off = dir->off,
 800491c:	68ea      	ldr	r2, [r5, #12]
            .end = (lfs->cfg->metadata_max ?
 800491e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
        struct lfs_commit commit = {
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	9310      	str	r3, [sp, #64]	; 0x40
 8004924:	f04f 31ff 	mov.w	r1, #4294967295
 8004928:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
            .end = (lfs->cfg->metadata_max ?
 800492c:	6c81      	ldr	r1, [r0, #72]	; 0x48
            .ptag = dir->etag,
 800492e:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
 8004930:	9211      	str	r2, [sp, #68]	; 0x44
 8004932:	9312      	str	r3, [sp, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004934:	b1f9      	cbz	r1, 8004976 <lfs_dir_relocatingcommit+0x22a>
 8004936:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 8004938:	9115      	str	r1, [sp, #84]	; 0x54
        int err = lfs_dir_traverse(lfs,
 800493a:	a90b      	add	r1, sp, #44	; 0x2c
 800493c:	9107      	str	r1, [sp, #28]
 800493e:	494c      	ldr	r1, [pc, #304]	; (8004a70 <lfs_dir_relocatingcommit+0x324>)
 8004940:	9106      	str	r1, [sp, #24]
 8004942:	2100      	movs	r1, #0
 8004944:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004948:	e9cd 1102 	strd	r1, r1, [sp, #8]
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800494c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
        int err = lfs_dir_traverse(lfs,
 8004950:	e9cd b700 	strd	fp, r7, [sp]
 8004954:	4629      	mov	r1, r5
 8004956:	4630      	mov	r0, r6
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004958:	960b      	str	r6, [sp, #44]	; 0x2c
 800495a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
        int err = lfs_dir_traverse(lfs,
 800495e:	f7fe ff9d 	bl	800389c <lfs_dir_traverse.constprop.39>
        if (err) {
 8004962:	4604      	mov	r4, r0
 8004964:	b148      	cbz	r0, 800497a <lfs_dir_relocatingcommit+0x22e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004966:	f114 0f1c 	cmn.w	r4, #28
 800496a:	f43f af09 	beq.w	8004780 <lfs_dir_relocatingcommit+0x34>
 800496e:	f114 0f54 	cmn.w	r4, #84	; 0x54
 8004972:	d1c8      	bne.n	8004906 <lfs_dir_relocatingcommit+0x1ba>
 8004974:	e704      	b.n	8004780 <lfs_dir_relocatingcommit+0x34>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004976:	69c1      	ldr	r1, [r0, #28]
 8004978:	e7dd      	b.n	8004936 <lfs_dir_relocatingcommit+0x1ea>
        lfs_gstate_xor(&delta, &lfs->gstate);
 800497a:	f106 0930 	add.w	r9, r6, #48	; 0x30
        lfs_gstate_t delta = {0};
 800497e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 8004982:	900f      	str	r0, [sp, #60]	; 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004984:	4649      	mov	r1, r9
 8004986:	a80d      	add	r0, sp, #52	; 0x34
 8004988:	f7fd ff4f 	bl	800282a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800498c:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8004990:	4619      	mov	r1, r3
 8004992:	a80d      	add	r0, sp, #52	; 0x34
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004994:	f106 0a48 	add.w	sl, r6, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004998:	9309      	str	r3, [sp, #36]	; 0x24
 800499a:	f7fd ff46 	bl	800282a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800499e:	a80d      	add	r0, sp, #52	; 0x34
 80049a0:	4651      	mov	r1, sl
 80049a2:	f7fd ff42 	bl	800282a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80049a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049a8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ac:	f023 0303 	bic.w	r3, r3, #3
        if (!lfs_gstate_iszero(&delta)) {
 80049b0:	a80d      	add	r0, sp, #52	; 0x34
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80049b2:	930d      	str	r3, [sp, #52]	; 0x34
        if (!lfs_gstate_iszero(&delta)) {
 80049b4:	f7fd ff47 	bl	8002846 <lfs_gstate_iszero>
 80049b8:	b980      	cbnz	r0, 80049dc <lfs_dir_relocatingcommit+0x290>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80049ba:	aa0d      	add	r2, sp, #52	; 0x34
 80049bc:	4629      	mov	r1, r5
 80049be:	4630      	mov	r0, r6
 80049c0:	f7fe fa8c 	bl	8002edc <lfs_dir_getgstate>
            if (err) {
 80049c4:	4604      	mov	r4, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d19d      	bne.n	8004906 <lfs_dir_relocatingcommit+0x1ba>
            err = lfs_dir_commitattr(lfs, &commit,
 80049ca:	ab0d      	add	r3, sp, #52	; 0x34
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <lfs_dir_relocatingcommit+0x328>)
 80049ce:	4641      	mov	r1, r8
 80049d0:	4630      	mov	r0, r6
 80049d2:	f7ff f9f8 	bl	8003dc6 <lfs_dir_commitattr>
            if (err) {
 80049d6:	4604      	mov	r4, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1c4      	bne.n	8004966 <lfs_dir_relocatingcommit+0x21a>
        err = lfs_dir_commitcrc(lfs, &commit);
 80049dc:	4641      	mov	r1, r8
 80049de:	4630      	mov	r0, r6
 80049e0:	f7ff fa50 	bl	8003e84 <lfs_dir_commitcrc>
        if (err) {
 80049e4:	4604      	mov	r4, r0
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d1bd      	bne.n	8004966 <lfs_dir_relocatingcommit+0x21a>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80049ea:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 80049ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049ee:	6991      	ldr	r1, [r2, #24]
 80049f0:	fbb3 f2f1 	udiv	r2, r3, r1
 80049f4:	fb01 3212 	mls	r2, r1, r2, r3
 80049f8:	b122      	cbz	r2, 8004a04 <lfs_dir_relocatingcommit+0x2b8>
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <lfs_dir_relocatingcommit+0x32c>)
 80049fc:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <lfs_dir_relocatingcommit+0x31c>)
 80049fe:	f640 0139 	movw	r1, #2105	; 0x839
 8004a02:	e753      	b.n	80048ac <lfs_dir_relocatingcommit+0x160>
        lfs->gdisk = lfs->gstate;
 8004a04:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
        dir->off = commit.off;
 8004a08:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
 8004a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a0c:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
 8004a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004a14:	64b4      	str	r4, [r6, #72]	; 0x48
 8004a16:	e9ca 4401 	strd	r4, r4, [sl, #4]
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004a1a:	9b08      	ldr	r3, [sp, #32]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004a1c:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	930d      	str	r3, [sp, #52]	; 0x34
 8004a24:	9b08      	ldr	r3, [sp, #32]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	930e      	str	r3, [sp, #56]	; 0x38
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004a2a:	f1b8 0f00 	cmp.w	r8, #0
 8004a2e:	f43f af6a 	beq.w	8004906 <lfs_dir_relocatingcommit+0x1ba>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8004a32:	f108 0908 	add.w	r9, r8, #8
 8004a36:	a90d      	add	r1, sp, #52	; 0x34
 8004a38:	4648      	mov	r0, r9
 8004a3a:	f7fd fedb 	bl	80027f4 <lfs_pair_cmp>
 8004a3e:	4682      	mov	sl, r0
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d059      	beq.n	8004af8 <lfs_dir_relocatingcommit+0x3ac>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004a44:	f8d8 8000 	ldr.w	r8, [r8]
 8004a48:	e7ef      	b.n	8004a2a <lfs_dir_relocatingcommit+0x2de>
            end = split;
 8004a4a:	46c1      	mov	r9, r8
 8004a4c:	e69d      	b.n	800478a <lfs_dir_relocatingcommit+0x3e>
 8004a4e:	bf00      	nop
 8004a50:	08008b74 	.word	0x08008b74
 8004a54:	0800967e 	.word	0x0800967e
 8004a58:	080093f5 	.word	0x080093f5
 8004a5c:	08009424 	.word	0x08009424
 8004a60:	08009455 	.word	0x08009455
 8004a64:	080093e1 	.word	0x080093e1
 8004a68:	080090c2 	.word	0x080090c2
 8004a6c:	080093f0 	.word	0x080093f0
 8004a70:	08003e77 	.word	0x08003e77
 8004a74:	7ffffc0c 	.word	0x7ffffc0c
 8004a78:	0800926d 	.word	0x0800926d
            lfs_size_t size = 0;
 8004a7c:	ab16      	add	r3, sp, #88	; 0x58
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f843 2d18 	str.w	r2, [r3, #-24]!
            int err = lfs_dir_traverse(lfs,
 8004a84:	fa1f f288 	uxth.w	r2, r8
 8004a88:	9307      	str	r3, [sp, #28]
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <lfs_dir_relocatingcommit+0x468>)
 8004a8c:	9306      	str	r3, [sp, #24]
 8004a8e:	4253      	negs	r3, r2
 8004a90:	b21b      	sxth	r3, r3
 8004a92:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8004a96:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <lfs_dir_relocatingcommit+0x46c>)
 8004a98:	9203      	str	r2, [sp, #12]
 8004a9a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8004a9e:	f8cd b000 	str.w	fp, [sp]
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7fe fef6 	bl	800389c <lfs_dir_traverse.constprop.39>
            if (err) {
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f47f aee1 	bne.w	800487a <lfs_dir_relocatingcommit+0x12e>
            if (end - split < 0xff
 8004ab8:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
 8004abc:	d815      	bhi.n	8004aea <lfs_dir_relocatingcommit+0x39e>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8004abe:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8004ac0:	69d1      	ldr	r1, [r2, #28]
                            (lfs->cfg->metadata_max
 8004ac2:	6c93      	ldr	r3, [r2, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8004ac4:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
 8004ac8:	b193      	cbz	r3, 8004af0 <lfs_dir_relocatingcommit+0x3a4>
 8004aca:	0859      	lsrs	r1, r3, #1
 8004acc:	6994      	ldr	r4, [r2, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8004ace:	1e62      	subs	r2, r4, #1
 8004ad0:	1853      	adds	r3, r2, r1
    return a - (a % alignment);
 8004ad2:	fbb3 f2f4 	udiv	r2, r3, r4
 8004ad6:	fb04 3212 	mls	r2, r4, r2, r3
 8004ada:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
 8004adc:	4283      	cmp	r3, r0
 8004ade:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ae0:	bf28      	it	cs
 8004ae2:	4603      	movcs	r3, r0
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	f4bf ae58 	bcs.w	800479a <lfs_dir_relocatingcommit+0x4e>
            split = split + ((end - split) / 2);
 8004aea:	eb08 085a 	add.w	r8, r8, sl, lsr #1
 8004aee:	e64e      	b.n	800478e <lfs_dir_relocatingcommit+0x42>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8004af0:	0849      	lsrs	r1, r1, #1
 8004af2:	e7eb      	b.n	8004acc <lfs_dir_relocatingcommit+0x380>
                end = begin;
 8004af4:	4681      	mov	r9, r0
 8004af6:	e6b4      	b.n	8004862 <lfs_dir_relocatingcommit+0x116>
            d->m = *dir;
 8004af8:	46ae      	mov	lr, r5
 8004afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004afe:	46cc      	mov	ip, r9
 8004b00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004b04:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8004b08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004b0c:	9b08      	ldr	r3, [sp, #32]
 8004b0e:	4599      	cmp	r9, r3
 8004b10:	d007      	beq.n	8004b22 <lfs_dir_relocatingcommit+0x3d6>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004b12:	f240 4001 	movw	r0, #1025	; 0x401
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8004b16:	f04f 31ff 	mov.w	r1, #4294967295
                for (int i = 0; i < attrcount; i++) {
 8004b1a:	4557      	cmp	r7, sl
 8004b1c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004b20:	d117      	bne.n	8004b52 <lfs_dir_relocatingcommit+0x406>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004b22:	f108 0a20 	add.w	sl, r8, #32
            while (d->id >= d->m.count && d->m.split) {
 8004b26:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004b2a:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d388      	bcc.n	8004a44 <lfs_dir_relocatingcommit+0x2f8>
 8004b32:	f898 101f 	ldrb.w	r1, [r8, #31]
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d084      	beq.n	8004a44 <lfs_dir_relocatingcommit+0x2f8>
                d->id -= d->m.count;
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004b40:	4652      	mov	r2, sl
 8004b42:	4649      	mov	r1, r9
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7fe fc3f 	bl	80033c8 <lfs_dir_fetch>
                if (err) {
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0eb      	beq.n	8004b26 <lfs_dir_relocatingcommit+0x3da>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004b4e:	4604      	mov	r4, r0
 8004b50:	e6d9      	b.n	8004906 <lfs_dir_relocatingcommit+0x1ba>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004b52:	f85b 203a 	ldr.w	r2, [fp, sl, lsl #3]
 8004b56:	f240 4eff 	movw	lr, #1279	; 0x4ff
    return (tag & 0x7ff00000) >> 20;
 8004b5a:	f3c2 5c0a 	ubfx	ip, r2, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004b5e:	45f4      	cmp	ip, lr
 8004b60:	d116      	bne.n	8004b90 <lfs_dir_relocatingcommit+0x444>
    return (tag & 0x000ffc00) >> 10;
 8004b62:	f3c2 2289 	ubfx	r2, r2, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d104      	bne.n	8004b74 <lfs_dir_relocatingcommit+0x428>
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004b6a:	e9c8 1102 	strd	r1, r1, [r8, #8]
                for (int i = 0; i < attrcount; i++) {
 8004b6e:	f10a 0a01 	add.w	sl, sl, #1
 8004b72:	e7d2      	b.n	8004b1a <lfs_dir_relocatingcommit+0x3ce>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004b74:	d9fb      	bls.n	8004b6e <lfs_dir_relocatingcommit+0x422>
                        d->id -= 1;
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004b7c:	f898 3006 	ldrb.w	r3, [r8, #6]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d1f4      	bne.n	8004b6e <lfs_dir_relocatingcommit+0x422>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004b84:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
                            ((lfs_dir_t*)d)->pos += 1;
 8004b8a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8004b8e:	e7ee      	b.n	8004b6e <lfs_dir_relocatingcommit+0x422>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004b90:	4584      	cmp	ip, r0
 8004b92:	d1ec      	bne.n	8004b6e <lfs_dir_relocatingcommit+0x422>
 8004b94:	f3c2 2289 	ubfx	r2, r2, #10, #10
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d3e8      	bcc.n	8004b6e <lfs_dir_relocatingcommit+0x422>
                        d->id += 1;
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004ba2:	f898 3006 	ldrb.w	r3, [r8, #6]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d1e1      	bne.n	8004b6e <lfs_dir_relocatingcommit+0x422>
                            ((lfs_dir_t*)d)->pos += 1;
 8004baa:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004bae:	3301      	adds	r3, #1
 8004bb0:	e7eb      	b.n	8004b8a <lfs_dir_relocatingcommit+0x43e>
 8004bb2:	bf00      	nop
 8004bb4:	0800292d 	.word	0x0800292d
 8004bb8:	400ffc00 	.word	0x400ffc00

08004bbc <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	b08f      	sub	sp, #60	; 0x3c
 8004bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    if ((file->flags & LFS_F_INLINE) &&
 8004bc6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
 8004bc8:	460c      	mov	r4, r1
    if ((file->flags & LFS_F_INLINE) &&
 8004bca:	02d9      	lsls	r1, r3, #11
        const void *buffer, lfs_size_t size) {
 8004bcc:	4606      	mov	r6, r0
    if ((file->flags & LFS_F_INLINE) &&
 8004bce:	d523      	bpl.n	8004c18 <lfs_file_flushedwrite+0x5c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8004bd0:	9b06      	ldr	r3, [sp, #24]
 8004bd2:	6b65      	ldr	r5, [r4, #52]	; 0x34
                lfs->cfg->cache_size,
 8004bd4:	6eb1      	ldr	r1, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
 8004bd6:	18e8      	adds	r0, r5, r3
    return (a > b) ? a : b;
 8004bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_min(0x3fe, lfs_min(
 8004bda:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	bf38      	it	cc
 8004be0:	4618      	movcc	r0, r3
                (lfs->cfg->metadata_max ?
 8004be2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8004be4:	b1fb      	cbz	r3, 8004c26 <lfs_file_flushedwrite+0x6a>
    return (a < b) ? a : b;
 8004be6:	f240 37fe 	movw	r7, #1022	; 0x3fe
 8004bea:	42ba      	cmp	r2, r7
 8004bec:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8004bf0:	bf28      	it	cs
 8004bf2:	463a      	movcs	r2, r7
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf28      	it	cs
 8004bf8:	4613      	movcs	r3, r2
    if ((file->flags & LFS_F_INLINE) &&
 8004bfa:	4283      	cmp	r3, r0
 8004bfc:	d20c      	bcs.n	8004c18 <lfs_file_flushedwrite+0x5c>
    lfs->free.ack = lfs->cfg->block_count;
 8004bfe:	6a0b      	ldr	r3, [r1, #32]
    file->off = file->pos;
 8004c00:	63e5      	str	r5, [r4, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
 8004c02:	4621      	mov	r1, r4
    lfs->free.ack = lfs->cfg->block_count;
 8004c04:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7ff fb94 	bl	8004334 <lfs_file_relocate>
 8004c0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if (err) {
 8004c0e:	4605      	mov	r5, r0
 8004c10:	bb68      	cbnz	r0, 8004c6e <lfs_file_flushedwrite+0xb2>
    file->flags &= ~LFS_F_INLINE;
 8004c12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c16:	6323      	str	r3, [r4, #48]	; 0x30
            for (lfs_off_t i = 0; i < skips; i++) {
 8004c18:	f8dd b018 	ldr.w	fp, [sp, #24]
    while (nsize > 0) {
 8004c1c:	f1bb 0f00 	cmp.w	fp, #0
 8004c20:	d103      	bne.n	8004c2a <lfs_file_flushedwrite+0x6e>
    return size;
 8004c22:	9d06      	ldr	r5, [sp, #24]
 8004c24:	e026      	b.n	8004c74 <lfs_file_flushedwrite+0xb8>
            lfs_min(0x3fe, lfs_min(
 8004c26:	69cb      	ldr	r3, [r1, #28]
 8004c28:	e7dd      	b.n	8004be6 <lfs_file_flushedwrite+0x2a>
        if (!(file->flags & LFS_F_WRITING) ||
 8004c2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c2c:	f412 3100 	ands.w	r1, r2, #131072	; 0x20000
 8004c30:	d004      	beq.n	8004c3c <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8004c32:	6eb3      	ldr	r3, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
 8004c34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	4298      	cmp	r0, r3
 8004c3a:	d153      	bne.n	8004ce4 <lfs_file_flushedwrite+0x128>
            if (!(file->flags & LFS_F_INLINE)) {
 8004c3c:	02d2      	lsls	r2, r2, #11
 8004c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c40:	f100 80f2 	bmi.w	8004e28 <lfs_file_flushedwrite+0x26c>
 8004c44:	f104 0a40 	add.w	sl, r4, #64	; 0x40
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8004c48:	b9e1      	cbnz	r1, 8004c84 <lfs_file_flushedwrite+0xc8>
 8004c4a:	b1db      	cbz	r3, 8004c84 <lfs_file_flushedwrite+0xc8>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8004c4c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8004c50:	9202      	str	r2, [sp, #8]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8004c58:	9201      	str	r2, [sp, #4]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7fe fd04 	bl	8003670 <lfs_ctz_find.constprop.35>
                    if (err) {
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b138      	cbz	r0, 8004c7c <lfs_file_flushedwrite+0xc0>
                file->flags |= LFS_F_ERRED;
 8004c6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c72:	6323      	str	r3, [r4, #48]	; 0x30
}
 8004c74:	4628      	mov	r0, r5
 8004c76:	b00f      	add	sp, #60	; 0x3c
 8004c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    lfs_cache_zero(lfs, &file->cache);
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004c80:	f7fd fe79 	bl	8002976 <lfs_cache_zero.isra.17>
    lfs->free.ack = lfs->cfg->block_count;
 8004c84:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8004c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c8c:	9307      	str	r3, [sp, #28]
 8004c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c90:	9304      	str	r3, [sp, #16]
        int err = lfs_alloc(lfs, &nblock);
 8004c92:	a90b      	add	r1, sp, #44	; 0x2c
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7ff fa93 	bl	80041c0 <lfs_alloc>
        if (err) {
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d1e5      	bne.n	8004c6c <lfs_file_flushedwrite+0xb0>
            err = lfs_bd_erase(lfs, nblock);
 8004ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ca2:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004ca4:	f7fd ff62 	bl	8002b6c <lfs_bd_erase.isra.18>
            if (err) {
 8004ca8:	4605      	mov	r5, r0
 8004caa:	b178      	cbz	r0, 8004ccc <lfs_file_flushedwrite+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 8004cac:	f115 0f54 	cmn.w	r5, #84	; 0x54
 8004cb0:	d1dc      	bne.n	8004c6c <lfs_file_flushedwrite+0xb0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004cb2:	4b66      	ldr	r3, [pc, #408]	; (8004e4c <lfs_file_flushedwrite+0x290>)
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f640 22dd 	movw	r2, #2781	; 0xadd
 8004cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cbc:	4964      	ldr	r1, [pc, #400]	; (8004e50 <lfs_file_flushedwrite+0x294>)
 8004cbe:	4865      	ldr	r0, [pc, #404]	; (8004e54 <lfs_file_flushedwrite+0x298>)
 8004cc0:	f003 f9b6 	bl	8008030 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	6423      	str	r3, [r4, #64]	; 0x40
 8004cca:	e7e2      	b.n	8004c92 <lfs_file_flushedwrite+0xd6>
            if (size == 0) {
 8004ccc:	9b04      	ldr	r3, [sp, #16]
 8004cce:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d12c      	bne.n	8004d2e <lfs_file_flushedwrite+0x172>
                *block = nblock;
 8004cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cd6:	63a3      	str	r3, [r4, #56]	; 0x38
                *off = 0;
 8004cd8:	9b04      	ldr	r3, [sp, #16]
                file->off = file->pos;
 8004cda:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 8004cdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce2:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8004ce4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8004ce6:	69df      	ldr	r7, [r3, #28]
 8004ce8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cea:	1aff      	subs	r7, r7, r3
 8004cec:	455f      	cmp	r7, fp
 8004cee:	bf28      	it	cs
 8004cf0:	465f      	movcs	r7, fp
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8004cf2:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8004cf6:	9b05      	ldr	r3, [sp, #20]
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	9703      	str	r7, [sp, #12]
 8004d04:	2301      	movs	r3, #1
 8004d06:	4632      	mov	r2, r6
 8004d08:	4641      	mov	r1, r8
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f7fe ffca 	bl	8003ca4 <lfs_bd_prog>
            if (err) {
 8004d10:	4605      	mov	r5, r0
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f000 808b 	beq.w	8004e2e <lfs_file_flushedwrite+0x272>
                if (err == LFS_ERR_CORRUPT) {
 8004d18:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004d1c:	d1a6      	bne.n	8004c6c <lfs_file_flushedwrite+0xb0>
            err = lfs_file_relocate(lfs, file);
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff fb07 	bl	8004334 <lfs_file_relocate>
            if (err) {
 8004d26:	4605      	mov	r5, r0
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0e4      	beq.n	8004cf6 <lfs_file_flushedwrite+0x13a>
 8004d2c:	e79e      	b.n	8004c6c <lfs_file_flushedwrite+0xb0>
            lfs_size_t noff = size - 1;
 8004d2e:	9b04      	ldr	r3, [sp, #16]
 8004d30:	a90e      	add	r1, sp, #56	; 0x38
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f841 3d08 	str.w	r3, [r1, #-8]!
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004d38:	f7fd ff56 	bl	8002be8 <lfs_ctz_index.isra.22>
            if (noff != lfs->cfg->block_size) {
 8004d3c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            noff = noff + 1;
 8004d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if (noff != lfs->cfg->block_size) {
 8004d40:	69d2      	ldr	r2, [r2, #28]
            noff = noff + 1;
 8004d42:	3301      	adds	r3, #1
            if (noff != lfs->cfg->block_size) {
 8004d44:	4293      	cmp	r3, r2
            noff = noff + 1;
 8004d46:	930c      	str	r3, [sp, #48]	; 0x30
            if (noff != lfs->cfg->block_size) {
 8004d48:	d155      	bne.n	8004df6 <lfs_file_flushedwrite+0x23a>
            index += 1;
 8004d4a:	1c47      	adds	r7, r0, #1
    return (uint32_t)__builtin_ctz(a);
 8004d4c:	fa97 f7a7 	rbit	r7, r7
 8004d50:	fab7 f787 	clz	r7, r7
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004d54:	1c7b      	adds	r3, r7, #1
            lfs_block_t nhead = head;
 8004d56:	f10d 0938 	add.w	r9, sp, #56	; 0x38
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004d5a:	9308      	str	r3, [sp, #32]
            lfs_block_t nhead = head;
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	f849 3d04 	str.w	r3, [r9, #-4]!
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d62:	46a8      	mov	r8, r5
 8004d64:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8004d68:	9309      	str	r3, [sp, #36]	; 0x24
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8004d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4632      	mov	r2, r6
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7fe ff90 	bl	8003ca4 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 8004d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (err) {
 8004d86:	4605      	mov	r5, r0
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d18f      	bne.n	8004cac <lfs_file_flushedwrite+0xf0>
                if (i != skips-1) {
 8004d8c:	4547      	cmp	r7, r8
 8004d8e:	d13a      	bne.n	8004e06 <lfs_file_flushedwrite+0x24a>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d90:	9b08      	ldr	r3, [sp, #32]
 8004d92:	f108 0801 	add.w	r8, r8, #1
 8004d96:	4543      	cmp	r3, r8
 8004d98:	d8e4      	bhi.n	8004d64 <lfs_file_flushedwrite+0x1a8>
            *block = nblock;
 8004d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d9c:	63a3      	str	r3, [r4, #56]	; 0x38
            *off = 4*skips;
 8004d9e:	9b08      	ldr	r3, [sp, #32]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	e79a      	b.n	8004cda <lfs_file_flushedwrite+0x11e>
                    err = lfs_bd_read(lfs,
 8004da4:	9a07      	ldr	r2, [sp, #28]
 8004da6:	9200      	str	r2, [sp, #0]
 8004da8:	e9cd 7902 	strd	r7, r9, [sp, #8]
 8004dac:	f8cd 8004 	str.w	r8, [sp, #4]
 8004db0:	eba3 0308 	sub.w	r3, r3, r8
 8004db4:	4632      	mov	r2, r6
 8004db6:	2100      	movs	r1, #0
 8004db8:	9808      	ldr	r0, [sp, #32]
 8004dba:	f7fd ff2f 	bl	8002c1c <lfs_bd_read.isra.23>
                    if (err) {
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f47f af53 	bne.w	8004c6c <lfs_file_flushedwrite+0xb0>
                    err = lfs_bd_prog(lfs,
 8004dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	e9cd 7902 	strd	r7, r9, [sp, #8]
 8004dce:	f8cd 8004 	str.w	r8, [sp, #4]
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f7fe ff63 	bl	8003ca4 <lfs_bd_prog>
                    if (err) {
 8004dde:	4605      	mov	r5, r0
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f47f af63 	bne.w	8004cac <lfs_file_flushedwrite+0xf0>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dec:	4543      	cmp	r3, r8
 8004dee:	d8d9      	bhi.n	8004da4 <lfs_file_flushedwrite+0x1e8>
                *block = nblock;
 8004df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                file->block = LFS_BLOCK_INLINE;
 8004df2:	63a2      	str	r2, [r4, #56]	; 0x38
 8004df4:	e771      	b.n	8004cda <lfs_file_flushedwrite+0x11e>
                    err = lfs_bd_read(lfs,
 8004df6:	f106 0368 	add.w	r3, r6, #104	; 0x68
                for (lfs_off_t i = 0; i < noff; i++) {
 8004dfa:	46a8      	mov	r8, r5
                    err = lfs_bd_read(lfs,
 8004dfc:	9308      	str	r3, [sp, #32]
 8004dfe:	f04f 0901 	mov.w	r9, #1
 8004e02:	af0d      	add	r7, sp, #52	; 0x34
 8004e04:	e7f1      	b.n	8004dea <lfs_file_flushedwrite+0x22e>
                    err = lfs_bd_read(lfs,
 8004e06:	2204      	movs	r2, #4
 8004e08:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8004e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0e:	4601      	mov	r1, r0
 8004e10:	e9cd 3200 	strd	r3, r2, [sp]
 8004e14:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8004e18:	2304      	movs	r3, #4
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	f7fd fefe 	bl	8002c1c <lfs_bd_read.isra.23>
                    if (err) {
 8004e20:	4605      	mov	r5, r0
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d0b4      	beq.n	8004d90 <lfs_file_flushedwrite+0x1d4>
 8004e26:	e721      	b.n	8004c6c <lfs_file_flushedwrite+0xb0>
                file->block = LFS_BLOCK_INLINE;
 8004e28:	f06f 0201 	mvn.w	r2, #1
 8004e2c:	e7e1      	b.n	8004df2 <lfs_file_flushedwrite+0x236>
        file->pos += diff;
 8004e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e30:	443b      	add	r3, r7
 8004e32:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 8004e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e36:	443b      	add	r3, r7
 8004e38:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 8004e3a:	9b05      	ldr	r3, [sp, #20]
 8004e3c:	443b      	add	r3, r7
 8004e3e:	9305      	str	r3, [sp, #20]
    lfs->free.ack = lfs->cfg->block_count;
 8004e40:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	6633      	str	r3, [r6, #96]	; 0x60
        nsize -= diff;
 8004e46:	ebab 0b07 	sub.w	fp, fp, r7
 8004e4a:	e6e7      	b.n	8004c1c <lfs_file_flushedwrite+0x60>
 8004e4c:	08008b74 	.word	0x08008b74
 8004e50:	0800967e 	.word	0x0800967e
 8004e54:	08009519 	.word	0x08009519

08004e58 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (file->flags & LFS_F_READING) {
 8004e5c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004e5e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 8004e60:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004e62:	b099      	sub	sp, #100	; 0x64
 8004e64:	4605      	mov	r5, r0
    if (file->flags & LFS_F_READING) {
 8004e66:	d508      	bpl.n	8004e7a <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 8004e68:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
 8004e6a:	bf58      	it	pl
 8004e6c:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
 8004e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
 8004e74:	bf58      	it	pl
 8004e76:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 8004e78:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 8004e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e7c:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 8004e80:	d039      	beq.n	8004ef6 <lfs_file_flush+0x9e>
        if (!(file->flags & LFS_F_INLINE)) {
 8004e82:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
 8004e86:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004e88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
 8004e8a:	d14e      	bne.n	8004f2a <lfs_file_flush+0xd2>
            lfs_file_t orig = {
 8004e8c:	2254      	movs	r2, #84	; 0x54
 8004e8e:	a803      	add	r0, sp, #12
 8004e90:	f002 fd56 	bl	8007940 <memset>
 8004e94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e96:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
 8004ea0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ea4:	af13      	add	r7, sp, #76	; 0x4c
 8004ea6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 8004eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8004eae:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
 8004eb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d321      	bcc.n	8004efc <lfs_file_flush+0xa4>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8004eb8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8004f50 <lfs_file_flush+0xf8>
 8004ebc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004f54 <lfs_file_flush+0xfc>
 8004ec0:	4f22      	ldr	r7, [pc, #136]	; (8004f4c <lfs_file_flush+0xf4>)
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f7fe fe92 	bl	8003bf4 <lfs_bd_flush>
                if (err) {
 8004ed0:	b378      	cbz	r0, 8004f32 <lfs_file_flush+0xda>
                    if (err == LFS_ERR_CORRUPT) {
 8004ed2:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004ed6:	d10e      	bne.n	8004ef6 <lfs_file_flush+0x9e>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8004ed8:	4641      	mov	r1, r8
 8004eda:	f8cd 9000 	str.w	r9, [sp]
 8004ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ee0:	f44f 6246 	mov.w	r2, #3168	; 0xc60
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f003 f8a3 	bl	8008030 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8004eea:	4621      	mov	r1, r4
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7ff fa21 	bl	8004334 <lfs_file_relocate>
                if (err) {
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d0e5      	beq.n	8004ec2 <lfs_file_flush+0x6a>
}
 8004ef6:	b019      	add	sp, #100	; 0x64
 8004ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8004efc:	2301      	movs	r3, #1
 8004efe:	f10d 020b 	add.w	r2, sp, #11
 8004f02:	a903      	add	r1, sp, #12
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7fe fc53 	bl	80037b0 <lfs_file_flushedread>
                if (res < 0) {
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	dbf3      	blt.n	8004ef6 <lfs_file_flush+0x9e>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f10d 020b 	add.w	r2, sp, #11
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff fe50 	bl	8004bbc <lfs_file_flushedwrite>
                if (res < 0) {
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	dbea      	blt.n	8004ef6 <lfs_file_flush+0x9e>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	d0c4      	beq.n	8004eb0 <lfs_file_flush+0x58>
    rcache->block = LFS_BLOCK_NULL;
 8004f26:	9713      	str	r7, [sp, #76]	; 0x4c
 8004f28:	e7c1      	b.n	8004eae <lfs_file_flush+0x56>
            file->pos = lfs_max(file->pos, file->ctz.size);
 8004f2a:	42be      	cmp	r6, r7
 8004f2c:	bf2c      	ite	cs
 8004f2e:	6366      	strcs	r6, [r4, #52]	; 0x34
 8004f30:	6367      	strcc	r7, [r4, #52]	; 0x34
        file->ctz.head = file->block;
 8004f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f34:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 8004f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f38:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8004f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        file->pos = pos;
 8004f44:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
    return 0;
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e7d4      	b.n	8004ef6 <lfs_file_flush+0x9e>
 8004f4c:	08009519 	.word	0x08009519
 8004f50:	08008b74 	.word	0x08008b74
 8004f54:	0800967e 	.word	0x0800967e

08004f58 <lfs_file_rawseek>:
        lfs_soff_t off, int whence) {
 8004f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	460d      	mov	r5, r1
    lfs_off_t npos = file->pos;
 8004f5e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
 8004f60:	b943      	cbnz	r3, 8004f74 <lfs_file_rawseek+0x1c>
        npos = off;
 8004f62:	4614      	mov	r4, r2
    if (npos > lfs->file_max) {
 8004f64:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	d308      	bcc.n	8004f7c <lfs_file_rawseek+0x24>
    if (file->pos == npos) {
 8004f6a:	4284      	cmp	r4, r0
 8004f6c:	d116      	bne.n	8004f9c <lfs_file_rawseek+0x44>
    return npos;
 8004f6e:	4620      	mov	r0, r4
}
 8004f70:	b003      	add	sp, #12
 8004f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d104      	bne.n	8004f82 <lfs_file_rawseek+0x2a>
        if ((lfs_soff_t)file->pos + off < 0) {
 8004f78:	1884      	adds	r4, r0, r2
        if (res < 0) {
 8004f7a:	d5f3      	bpl.n	8004f64 <lfs_file_rawseek+0xc>
            return LFS_ERR_INVAL;
 8004f7c:	f06f 0015 	mvn.w	r0, #21
 8004f80:	e7f6      	b.n	8004f70 <lfs_file_rawseek+0x18>
    } else if (whence == LFS_SEEK_END) {
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d108      	bne.n	8004f98 <lfs_file_rawseek+0x40>
    if (file->flags & LFS_F_WRITING) {
 8004f86:	e9d1 430b 	ldrd	r4, r3, [r1, #44]	; 0x2c
 8004f8a:	0399      	lsls	r1, r3, #14
 8004f8c:	d502      	bpl.n	8004f94 <lfs_file_rawseek+0x3c>
    return (a > b) ? a : b;
 8004f8e:	4284      	cmp	r4, r0
 8004f90:	bf38      	it	cc
 8004f92:	4604      	movcc	r4, r0
        if (res < 0) {
 8004f94:	1914      	adds	r4, r2, r4
 8004f96:	e7f0      	b.n	8004f7a <lfs_file_rawseek+0x22>
    lfs_off_t npos = file->pos;
 8004f98:	4604      	mov	r4, r0
 8004f9a:	e7e3      	b.n	8004f64 <lfs_file_rawseek+0xc>
        !(file->flags & LFS_F_WRITING)
 8004f9c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    if (
 8004f9e:	039b      	lsls	r3, r3, #14
 8004fa0:	d419      	bmi.n	8004fd6 <lfs_file_rawseek+0x7e>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8004fa2:	a902      	add	r1, sp, #8
 8004fa4:	f841 0d08 	str.w	r0, [r1, #-8]!
 8004fa8:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004faa:	f7fd fe1d 	bl	8002be8 <lfs_ctz_index.isra.22>
        lfs_off_t noff = npos;
 8004fae:	a902      	add	r1, sp, #8
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8004fb0:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 8004fb2:	f841 4d04 	str.w	r4, [r1, #-4]!
        int nindex = lfs_ctz_index(lfs, &noff);
 8004fb6:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004fb8:	f7fd fe16 	bl	8002be8 <lfs_ctz_index.isra.22>
        if (oindex == nindex
 8004fbc:	4287      	cmp	r7, r0
 8004fbe:	d10a      	bne.n	8004fd6 <lfs_file_rawseek+0x7e>
                && noff >= file->cache.off
 8004fc0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004fc2:	9a01      	ldr	r2, [sp, #4]
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d806      	bhi.n	8004fd6 <lfs_file_rawseek+0x7e>
                && noff < file->cache.off + file->cache.size) {
 8004fc8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004fca:	440b      	add	r3, r1
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d202      	bcs.n	8004fd6 <lfs_file_rawseek+0x7e>
            file->pos = npos;
 8004fd0:	636c      	str	r4, [r5, #52]	; 0x34
            file->off = noff;
 8004fd2:	63ea      	str	r2, [r5, #60]	; 0x3c
 8004fd4:	e7cb      	b.n	8004f6e <lfs_file_rawseek+0x16>
    int err = lfs_file_flush(lfs, file);
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f7ff ff3d 	bl	8004e58 <lfs_file_flush>
    if (err) {
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d1c6      	bne.n	8004f70 <lfs_file_rawseek+0x18>
    file->pos = npos;
 8004fe2:	636c      	str	r4, [r5, #52]	; 0x34
 8004fe4:	e7c3      	b.n	8004f6e <lfs_file_rawseek+0x16>
	...

08004fe8 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004fec:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
 8004fee:	b0a5      	sub	sp, #148	; 0x94
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	4688      	mov	r8, r1
 8004ff4:	4691      	mov	r9, r2
 8004ff6:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	d168      	bne.n	80050ce <lfs_dir_orphaningcommit+0xe6>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8005000:	9306      	str	r3, [sp, #24]
    lfs_mdir_t ldir = *dir;
 8005002:	4646      	mov	r6, r8
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005004:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005008:	9307      	str	r3, [sp, #28]
    lfs_mdir_t ldir = *dir;
 800500a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800500c:	ad14      	add	r5, sp, #80	; 0x50
 800500e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005010:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005014:	af14      	add	r7, sp, #80	; 0x50
 8005016:	ae1c      	add	r6, sp, #112	; 0x70
    lfs_mdir_t ldir = *dir;
 8005018:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800501c:	e9cd a600 	strd	sl, r6, [sp]
 8005020:	464b      	mov	r3, r9
 8005022:	4642      	mov	r2, r8
 8005024:	4639      	mov	r1, r7
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff fb90 	bl	800474c <lfs_dir_relocatingcommit>
    if (state < 0) {
 800502c:	1e05      	subs	r5, r0, #0
 800502e:	db79      	blt.n	8005124 <lfs_dir_orphaningcommit+0x13c>
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8005030:	a906      	add	r1, sp, #24
 8005032:	4640      	mov	r0, r8
 8005034:	f7fd fbde 	bl	80027f4 <lfs_pair_cmp>
 8005038:	b948      	cbnz	r0, 800504e <lfs_dir_orphaningcommit+0x66>
        *dir = ldir;
 800503a:	46be      	mov	lr, r7
 800503c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005040:	46c4      	mov	ip, r8
 8005042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005046:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800504a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 800504e:	2d02      	cmp	r5, #2
 8005050:	d12c      	bne.n	80050ac <lfs_dir_orphaningcommit+0xc4>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8005052:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8005056:	4641      	mov	r1, r8
 8005058:	4620      	mov	r0, r4
 800505a:	f7fd ff3f 	bl	8002edc <lfs_dir_getgstate>
        if (err) {
 800505e:	4605      	mov	r5, r0
 8005060:	2800      	cmp	r0, #0
 8005062:	d15f      	bne.n	8005124 <lfs_dir_orphaningcommit+0x13c>
        lpair[0] = pdir.pair[0];
 8005064:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005066:	9306      	str	r3, [sp, #24]
        lpair[1] = pdir.pair[1];
 8005068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800506a:	9307      	str	r3, [sp, #28]
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800506c:	f898 3017 	ldrb.w	r3, [r8, #23]
 8005070:	9001      	str	r0, [sp, #4]
 8005072:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8005076:	4bb1      	ldr	r3, [pc, #708]	; (800533c <lfs_dir_orphaningcommit+0x354>)
 8005078:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800507c:	9308      	str	r3, [sp, #32]
        lfs_pair_tole32(dir->tail);
 800507e:	f108 0318 	add.w	r3, r8, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005082:	9309      	str	r3, [sp, #36]	; 0x24
 8005084:	2301      	movs	r3, #1
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	aa06      	add	r2, sp, #24
 800508a:	ab08      	add	r3, sp, #32
 800508c:	4631      	mov	r1, r6
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff fb5c 	bl	800474c <lfs_dir_relocatingcommit>
        if (state < 0) {
 8005094:	1e05      	subs	r5, r0, #0
 8005096:	db45      	blt.n	8005124 <lfs_dir_orphaningcommit+0x13c>
        ldir = pdir;
 8005098:	46b6      	mov	lr, r6
 800509a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800509e:	46bc      	mov	ip, r7
 80050a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050a4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80050a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            ldir = pdir;
 80050ac:	2300      	movs	r3, #0
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80050ae:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800535c <lfs_dir_orphaningcommit+0x374>
 80050b2:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8005358 <lfs_dir_orphaningcommit+0x370>
            ldir = pdir;
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	46a9      	mov	r9, r5
    while (state == LFS_OK_RELOCATED) {
 80050ba:	f1b9 0f01 	cmp.w	r9, #1
 80050be:	f000 80a7 	beq.w	8005210 <lfs_dir_orphaningcommit+0x228>
    return orphans ? LFS_OK_ORPHANED : 0;
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf0c      	ite	eq
 80050c8:	2500      	moveq	r5, #0
 80050ca:	2503      	movne	r5, #3
 80050cc:	e02a      	b.n	8005124 <lfs_dir_orphaningcommit+0x13c>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80050ce:	f106 0008 	add.w	r0, r6, #8
 80050d2:	4540      	cmp	r0, r8
 80050d4:	d101      	bne.n	80050da <lfs_dir_orphaningcommit+0xf2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80050d6:	6836      	ldr	r6, [r6, #0]
 80050d8:	e78e      	b.n	8004ff8 <lfs_dir_orphaningcommit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80050da:	4641      	mov	r1, r8
 80050dc:	f7fd fb8a 	bl	80027f4 <lfs_pair_cmp>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d1f8      	bne.n	80050d6 <lfs_dir_orphaningcommit+0xee>
 80050e4:	79b3      	ldrb	r3, [r6, #6]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d1f5      	bne.n	80050d6 <lfs_dir_orphaningcommit+0xee>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80050ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80050ec:	02da      	lsls	r2, r3, #11
 80050ee:	d5f2      	bpl.n	80050d6 <lfs_dir_orphaningcommit+0xee>
                f->ctz.size > lfs->cfg->cache_size) {
 80050f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80050f2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80050f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f6:	4291      	cmp	r1, r2
 80050f8:	d9ed      	bls.n	80050d6 <lfs_dir_orphaningcommit+0xee>
    file->off = file->pos;
 80050fa:	6b72      	ldr	r2, [r6, #52]	; 0x34
    lfs->free.ack = lfs->cfg->block_count;
 80050fc:	6a1b      	ldr	r3, [r3, #32]
    file->off = file->pos;
 80050fe:	63f2      	str	r2, [r6, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
 8005100:	4631      	mov	r1, r6
    lfs->free.ack = lfs->cfg->block_count;
 8005102:	6623      	str	r3, [r4, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
 8005104:	4620      	mov	r0, r4
 8005106:	f7ff f915 	bl	8004334 <lfs_file_relocate>
    if (err) {
 800510a:	4605      	mov	r5, r0
 800510c:	b950      	cbnz	r0, 8005124 <lfs_dir_orphaningcommit+0x13c>
    file->flags &= ~LFS_F_INLINE;
 800510e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005110:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005114:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
 8005116:	4631      	mov	r1, r6
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff fe9d 	bl	8004e58 <lfs_file_flush>
            if (err) {
 800511e:	4605      	mov	r5, r0
 8005120:	2800      	cmp	r0, #0
 8005122:	d0d8      	beq.n	80050d6 <lfs_dir_orphaningcommit+0xee>
}
 8005124:	4628      	mov	r0, r5
 8005126:	b025      	add	sp, #148	; 0x94
 8005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800512c:	f105 0108 	add.w	r1, r5, #8
 8005130:	a806      	add	r0, sp, #24
 8005132:	f7fd fb5f 	bl	80027f4 <lfs_pair_cmp>
 8005136:	b908      	cbnz	r0, 800513c <lfs_dir_orphaningcommit+0x154>
                d->m.pair[1] = ldir.pair[1];
 8005138:	e9c5 9802 	strd	r9, r8, [r5, #8]
            if (d->type == LFS_TYPE_DIR &&
 800513c:	79ab      	ldrb	r3, [r5, #6]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <lfs_dir_orphaningcommit+0x16a>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8005142:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8005146:	a806      	add	r0, sp, #24
 8005148:	f7fd fb54 	bl	80027f4 <lfs_pair_cmp>
            if (d->type == LFS_TYPE_DIR &&
 800514c:	b908      	cbnz	r0, 8005152 <lfs_dir_orphaningcommit+0x16a>
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800514e:	e9c5 980b 	strd	r9, r8, [r5, #44]	; 0x2c
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005152:	682d      	ldr	r5, [r5, #0]
 8005154:	e076      	b.n	8005244 <lfs_dir_orphaningcommit+0x25c>
 8005156:	f104 0330 	add.w	r3, r4, #48	; 0x30
            int err = lfs_fs_preporphans(lfs, +1);
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	f7fd fd20 	bl	8002ba4 <lfs_fs_preporphans.isra.20>
            if (err) {
 8005164:	4681      	mov	r9, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	f040 8098 	bne.w	800529c <lfs_dir_orphaningcommit+0x2b4>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800516c:	9b05      	ldr	r3, [sp, #20]
 800516e:	4631      	mov	r1, r6
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd fb73 	bl	800285c <lfs_gstate_hasmovehere>
 8005176:	2800      	cmp	r0, #0
 8005178:	f000 808a 	beq.w	8005290 <lfs_dir_orphaningcommit+0x2a8>
    return (tag & 0x000ffc00) >> 10;
 800517c:	6b23      	ldr	r3, [r4, #48]	; 0x30
                LFS_DEBUG("Fixing move while relocating "
 800517e:	4870      	ldr	r0, [pc, #448]	; (8005340 <lfs_dir_orphaningcommit+0x358>)
    return (tag & 0x000ffc00) >> 10;
 8005180:	f3c3 2989 	ubfx	r9, r3, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 8005184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f640 02f2 	movw	r2, #2290	; 0x8f2
 800518c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800518e:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8005192:	4659      	mov	r1, fp
 8005194:	f002 ff4c 	bl	8008030 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005198:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800519a:	4b6a      	ldr	r3, [pc, #424]	; (8005344 <lfs_dir_orphaningcommit+0x35c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800519c:	63a5      	str	r5, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800519e:	4013      	ands	r3, r2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80051a0:	e9c4 350c 	strd	r3, r5, [r4, #48]	; 0x30
                if (moveid < lfs_tag_id(tag)) {
 80051a4:	f3c8 2389 	ubfx	r3, r8, #10, #10
 80051a8:	454b      	cmp	r3, r9
 80051aa:	d975      	bls.n	8005298 <lfs_dir_orphaningcommit+0x2b0>
                    tag -= LFS_MKTAG(0, 1, 0);
 80051ac:	f5a8 6280 	sub.w	r2, r8, #1024	; 0x400
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80051b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80051b2:	930a      	str	r3, [sp, #40]	; 0x28
 80051b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051b6:	930b      	str	r3, [sp, #44]	; 0x2c
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80051b8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80051bc:	4599      	cmp	r9, r3
 80051be:	bf18      	it	ne
 80051c0:	4b61      	ldrne	r3, [pc, #388]	; (8005348 <lfs_dir_orphaningcommit+0x360>)
 80051c2:	970f      	str	r7, [sp, #60]	; 0x3c
 80051c4:	bf14      	ite	ne
 80051c6:	ea43 2389 	orrne.w	r3, r3, r9, lsl #10
 80051ca:	2300      	moveq	r3, #0
 80051cc:	930c      	str	r3, [sp, #48]	; 0x30
 80051ce:	2300      	movs	r3, #0
 80051d0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	2302      	movs	r3, #2
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	aa0a      	add	r2, sp, #40	; 0x28
 80051dc:	ab0c      	add	r3, sp, #48	; 0x30
 80051de:	4631      	mov	r1, r6
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff fab3 	bl	800474c <lfs_dir_relocatingcommit>
            if (state < 0) {
 80051e6:	f1b0 0900 	subs.w	r9, r0, #0
 80051ea:	db57      	blt.n	800529c <lfs_dir_orphaningcommit+0x2b4>
            if (state == LFS_OK_RELOCATED) {
 80051ec:	f1b9 0f01 	cmp.w	r9, #1
 80051f0:	d139      	bne.n	8005266 <lfs_dir_orphaningcommit+0x27e>
                lpair[0] = ppair[0];
 80051f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f4:	9306      	str	r3, [sp, #24]
                ldir = pdir;
 80051f6:	46b4      	mov	ip, r6
                lpair[1] = ppair[1];
 80051f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051fa:	9307      	str	r3, [sp, #28]
                ldir = pdir;
 80051fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005200:	463d      	mov	r5, r7
 8005202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005204:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8005208:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                orphans = true;
 800520c:	f8cd 9010 	str.w	r9, [sp, #16]
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8005210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005212:	9302      	str	r3, [sp, #8]
 8005214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	9b07      	ldr	r3, [sp, #28]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8005220:	9b06      	ldr	r3, [sp, #24]
 8005222:	f8cd a00c 	str.w	sl, [sp, #12]
 8005226:	4659      	mov	r1, fp
 8005228:	4848      	ldr	r0, [pc, #288]	; (800534c <lfs_dir_orphaningcommit+0x364>)
 800522a:	f002 ff01 	bl	8008030 <iprintf>
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800522e:	f104 0120 	add.w	r1, r4, #32
 8005232:	a806      	add	r0, sp, #24
 8005234:	f7fd fade 	bl	80027f4 <lfs_pair_cmp>
 8005238:	e9dd 9814 	ldrd	r9, r8, [sp, #80]	; 0x50
 800523c:	b908      	cbnz	r0, 8005242 <lfs_dir_orphaningcommit+0x25a>
            lfs->root[1] = ldir.pair[1];
 800523e:	e9c4 9808 	strd	r9, r8, [r4, #32]
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005242:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005244:	2d00      	cmp	r5, #0
 8005246:	f47f af71 	bne.w	800512c <lfs_dir_orphaningcommit+0x144>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800524a:	4632      	mov	r2, r6
 800524c:	a906      	add	r1, sp, #24
 800524e:	4620      	mov	r0, r4
 8005250:	f7fe f87c 	bl	800334c <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005254:	f1b0 0800 	subs.w	r8, r0, #0
 8005258:	f6bf af7d 	bge.w	8005156 <lfs_dir_orphaningcommit+0x16e>
 800525c:	f118 0f02 	cmn.w	r8, #2
 8005260:	f040 8094 	bne.w	800538c <lfs_dir_orphaningcommit+0x3a4>
        state = 0;
 8005264:	46a9      	mov	r9, r5
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8005266:	4632      	mov	r2, r6
 8005268:	a906      	add	r1, sp, #24
 800526a:	4620      	mov	r0, r4
 800526c:	f7fe f8b9 	bl	80033e2 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 8005270:	4605      	mov	r5, r0
 8005272:	b1a8      	cbz	r0, 80052a0 <lfs_dir_orphaningcommit+0x2b8>
 8005274:	1c83      	adds	r3, r0, #2
 8005276:	f47f af55 	bne.w	8005124 <lfs_dir_orphaningcommit+0x13c>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800527a:	f118 0f02 	cmn.w	r8, #2
 800527e:	f43f af1c 	beq.w	80050ba <lfs_dir_orphaningcommit+0xd2>
 8005282:	4b33      	ldr	r3, [pc, #204]	; (8005350 <lfs_dir_orphaningcommit+0x368>)
 8005284:	4a33      	ldr	r2, [pc, #204]	; (8005354 <lfs_dir_orphaningcommit+0x36c>)
 8005286:	4834      	ldr	r0, [pc, #208]	; (8005358 <lfs_dir_orphaningcommit+0x370>)
 8005288:	f640 1113 	movw	r1, #2323	; 0x913
 800528c:	f002 fab0 	bl	80077f0 <__assert_func>
 8005290:	4642      	mov	r2, r8
            uint16_t moveid = 0x3ff;
 8005292:	f240 39ff 	movw	r9, #1023	; 0x3ff
 8005296:	e78b      	b.n	80051b0 <lfs_dir_orphaningcommit+0x1c8>
 8005298:	4642      	mov	r2, r8
 800529a:	e789      	b.n	80051b0 <lfs_dir_orphaningcommit+0x1c8>
                return err;
 800529c:	464d      	mov	r5, r9
 800529e:	e741      	b.n	8005124 <lfs_dir_orphaningcommit+0x13c>
    return tag & 0x000003ff;
 80052a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a6:	f104 0930 	add.w	r9, r4, #48	; 0x30
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d13a      	bne.n	8005324 <lfs_dir_orphaningcommit+0x33c>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80052ae:	4631      	mov	r1, r6
 80052b0:	4648      	mov	r0, r9
 80052b2:	f7fd fad3 	bl	800285c <lfs_gstate_hasmovehere>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d152      	bne.n	8005360 <lfs_dir_orphaningcommit+0x378>
            uint16_t moveid = 0x3ff;
 80052ba:	f240 35ff 	movw	r5, #1023	; 0x3ff
            lpair[0] = pdir.pair[0];
 80052be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80052c0:	9306      	str	r3, [sp, #24]
            lpair[1] = pdir.pair[1];
 80052c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052c4:	9307      	str	r3, [sp, #28]
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80052c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80052ca:	429d      	cmp	r5, r3
 80052cc:	bf1c      	itt	ne
 80052ce:	4b1e      	ldrne	r3, [pc, #120]	; (8005348 <lfs_dir_orphaningcommit+0x360>)
 80052d0:	ea43 2585 	orrne.w	r5, r3, r5, lsl #10
 80052d4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
 80052d8:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <lfs_dir_orphaningcommit+0x354>)
 80052de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
 80052ea:	f04f 0302 	mov.w	r3, #2
 80052ee:	bf08      	it	eq
 80052f0:	2500      	moveq	r5, #0
 80052f2:	9111      	str	r1, [sp, #68]	; 0x44
 80052f4:	9101      	str	r1, [sp, #4]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	aa06      	add	r2, sp, #24
 80052fa:	ab10      	add	r3, sp, #64	; 0x40
 80052fc:	4631      	mov	r1, r6
 80052fe:	4620      	mov	r0, r4
 8005300:	9510      	str	r5, [sp, #64]	; 0x40
 8005302:	f7ff fa23 	bl	800474c <lfs_dir_relocatingcommit>
            if (state < 0) {
 8005306:	1e05      	subs	r5, r0, #0
 8005308:	f6ff af0c 	blt.w	8005124 <lfs_dir_orphaningcommit+0x13c>
            ldir = pdir;
 800530c:	46b6      	mov	lr, r6
 800530e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005312:	46bc      	mov	ip, r7
 8005314:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005318:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800531c:	46a9      	mov	r9, r5
 800531e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005322:	e6ca      	b.n	80050ba <lfs_dir_orphaningcommit+0xd2>
        bool hasparent = (tag != LFS_ERR_NOENT);
 8005324:	f118 0102 	adds.w	r1, r8, #2
 8005328:	bf18      	it	ne
 800532a:	2101      	movne	r1, #1
                err = lfs_fs_preporphans(lfs, -hasparent);
 800532c:	4249      	negs	r1, r1
 800532e:	4648      	mov	r0, r9
 8005330:	f7fd fc38 	bl	8002ba4 <lfs_fs_preporphans.isra.20>
                if (err) {
 8005334:	4605      	mov	r5, r0
 8005336:	2800      	cmp	r0, #0
 8005338:	d0b9      	beq.n	80052ae <lfs_dir_orphaningcommit+0x2c6>
 800533a:	e6f3      	b.n	8005124 <lfs_dir_orphaningcommit+0x13c>
 800533c:	000ffc08 	.word	0x000ffc08
 8005340:	08009378 	.word	0x08009378
 8005344:	800003ff 	.word	0x800003ff
 8005348:	4ff00000 	.word	0x4ff00000
 800534c:	0800933b 	.word	0x0800933b
 8005350:	080093bc 	.word	0x080093bc
 8005354:	080090db 	.word	0x080090db
 8005358:	0800967e 	.word	0x0800967e
 800535c:	08008b74 	.word	0x08008b74
    return (tag & 0x000ffc00) >> 10;
 8005360:	6b25      	ldr	r5, [r4, #48]	; 0x30
                LFS_DEBUG("Fixing move while relocating "
 8005362:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005364:	9300      	str	r3, [sp, #0]
    return (tag & 0x000ffc00) >> 10;
 8005366:	f3c5 2589 	ubfx	r5, r5, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 800536a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800536c:	4808      	ldr	r0, [pc, #32]	; (8005390 <lfs_dir_orphaningcommit+0x3a8>)
 800536e:	f640 1226 	movw	r2, #2342	; 0x926
 8005372:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8005376:	4659      	mov	r1, fp
 8005378:	f002 fe5a 	bl	8008030 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800537c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <lfs_dir_orphaningcommit+0x3ac>)
 8005380:	4013      	ands	r3, r2
 8005382:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8005384:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8005386:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800538a:	e798      	b.n	80052be <lfs_dir_orphaningcommit+0x2d6>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800538c:	4645      	mov	r5, r8
 800538e:	e6c9      	b.n	8005124 <lfs_dir_orphaningcommit+0x13c>
 8005390:	08009378 	.word	0x08009378
 8005394:	800003ff 	.word	0x800003ff

08005398 <lfs_fs_deorphan.part.29>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800539c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005534 <lfs_fs_deorphan.part.29+0x19c>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80053a0:	f8df a194 	ldr.w	sl, [pc, #404]	; 8005538 <lfs_fs_deorphan.part.29+0x1a0>
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80053a4:	b0a5      	sub	sp, #148	; 0x94
 80053a6:	4604      	mov	r4, r0
 80053a8:	4688      	mov	r8, r1
    int8_t found = 0;
 80053aa:	2600      	movs	r6, #0
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80053ac:	221c      	movs	r2, #28
 80053ae:	2100      	movs	r1, #0
 80053b0:	a80c      	add	r0, sp, #48	; 0x30
 80053b2:	f002 fac5 	bl	8007940 <memset>
                        LFS_DEBUG("Fixing half-orphan "
 80053b6:	4f57      	ldr	r7, [pc, #348]	; (8005514 <lfs_fs_deorphan.part.29+0x17c>)
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80053b8:	2301      	movs	r3, #1
 80053ba:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80053be:	9313      	str	r3, [sp, #76]	; 0x4c
        while (!lfs_pair_isnull(pdir.tail)) {
 80053c0:	a812      	add	r0, sp, #72	; 0x48
 80053c2:	f7fd fa0d 	bl	80027e0 <lfs_pair_isnull>
 80053c6:	b160      	cbz	r0, 80053e2 <lfs_fs_deorphan.part.29+0x4a>
    return (a < b) ? a : b;
 80053c8:	4620      	mov	r0, r4
 80053ca:	f810 1f30 	ldrb.w	r1, [r0, #48]!
 80053ce:	428e      	cmp	r6, r1
 80053d0:	bf28      	it	cs
 80053d2:	460e      	movcs	r6, r1
    return lfs_fs_preporphans(lfs, -lfs_min(
 80053d4:	4271      	negs	r1, r6
 80053d6:	b249      	sxtb	r1, r1
 80053d8:	f7fd fbe4 	bl	8002ba4 <lfs_fs_preporphans.isra.20>
}
 80053dc:	b025      	add	sp, #148	; 0x94
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80053e2:	aa12      	add	r2, sp, #72	; 0x48
 80053e4:	a914      	add	r1, sp, #80	; 0x50
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7fd ffee 	bl	80033c8 <lfs_dir_fetch>
            if (err) {
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1f5      	bne.n	80053dc <lfs_fs_deorphan.part.29+0x44>
            if (!pdir.split) {
 80053f0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 8081 	bne.w	80054fc <lfs_fs_deorphan.part.29+0x164>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80053fa:	aa1c      	add	r2, sp, #112	; 0x70
 80053fc:	a912      	add	r1, sp, #72	; 0x48
 80053fe:	4620      	mov	r0, r4
 8005400:	f7fd ffa4 	bl	800334c <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005404:	2800      	cmp	r0, #0
 8005406:	da2d      	bge.n	8005464 <lfs_fs_deorphan.part.29+0xcc>
 8005408:	1c83      	adds	r3, r0, #2
 800540a:	d1e7      	bne.n	80053dc <lfs_fs_deorphan.part.29+0x44>
                if (tag == LFS_ERR_NOENT && powerloss) {
 800540c:	f1b8 0f00 	cmp.w	r8, #0
 8005410:	d074      	beq.n	80054fc <lfs_fs_deorphan.part.29+0x164>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8005412:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f241 12a3 	movw	r2, #4515	; 0x11a3
 800541a:	493f      	ldr	r1, [pc, #252]	; (8005518 <lfs_fs_deorphan.part.29+0x180>)
 800541c:	9701      	str	r7, [sp, #4]
 800541e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005420:	483e      	ldr	r0, [pc, #248]	; (800551c <lfs_fs_deorphan.part.29+0x184>)
 8005422:	f002 fe05 	bl	8008030 <iprintf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8005426:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800542a:	a914      	add	r1, sp, #80	; 0x50
 800542c:	4620      	mov	r0, r4
 800542e:	f7fd fd55 	bl	8002edc <lfs_dir_getgstate>
                    if (err) {
 8005432:	2800      	cmp	r0, #0
 8005434:	d1d2      	bne.n	80053dc <lfs_fs_deorphan.part.29+0x44>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8005436:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800543a:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <lfs_fs_deorphan.part.29+0x188>)
 8005440:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005444:	9306      	str	r3, [sp, #24]
 8005446:	ab1a      	add	r3, sp, #104	; 0x68
 8005448:	9307      	str	r3, [sp, #28]
 800544a:	aa06      	add	r2, sp, #24
 800544c:	2301      	movs	r3, #1
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800544e:	a90c      	add	r1, sp, #48	; 0x30
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff fdc9 	bl	8004fe8 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 8005456:	2800      	cmp	r0, #0
 8005458:	dbc0      	blt.n	80053dc <lfs_fs_deorphan.part.29+0x44>
                        found += 1;
 800545a:	3601      	adds	r6, #1
                        if (state == LFS_OK_ORPHANED) {
 800545c:	2803      	cmp	r0, #3
                        found += 1;
 800545e:	b276      	sxtb	r6, r6
                        if (state == LFS_OK_ORPHANED) {
 8005460:	d0a4      	beq.n	80053ac <lfs_fs_deorphan.part.29+0x14>
 8005462:	e7ad      	b.n	80053c0 <lfs_fs_deorphan.part.29+0x28>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8005464:	ad04      	add	r5, sp, #16
 8005466:	4603      	mov	r3, r0
 8005468:	9500      	str	r5, [sp, #0]
 800546a:	464a      	mov	r2, r9
 800546c:	a91c      	add	r1, sp, #112	; 0x70
 800546e:	4620      	mov	r0, r4
 8005470:	f7fd fd28 	bl	8002ec4 <lfs_dir_get>
                    if (state < 0) {
 8005474:	2800      	cmp	r0, #0
 8005476:	dbb1      	blt.n	80053dc <lfs_fs_deorphan.part.29+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8005478:	9904      	ldr	r1, [sp, #16]
 800547a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800547c:	9805      	ldr	r0, [sp, #20]
 800547e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005480:	4299      	cmp	r1, r3
 8005482:	d11a      	bne.n	80054ba <lfs_fs_deorphan.part.29+0x122>
 8005484:	4290      	cmp	r0, r2
                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8005486:	d039      	beq.n	80054fc <lfs_fs_deorphan.part.29+0x164>
                        LFS_DEBUG("Fixing half-orphan "
 8005488:	e9cd 2100 	strd	r2, r1, [sp]
 800548c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8005490:	4921      	ldr	r1, [pc, #132]	; (8005518 <lfs_fs_deorphan.part.29+0x180>)
 8005492:	4824      	ldr	r0, [pc, #144]	; (8005524 <lfs_fs_deorphan.part.29+0x18c>)
 8005494:	f241 12ce 	movw	r2, #4558	; 0x11ce
 8005498:	f002 fdca 	bl	8008030 <iprintf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800549c:	a90c      	add	r1, sp, #48	; 0x30
 800549e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80054a2:	f7fd f9db 	bl	800285c <lfs_gstate_hasmovehere>
 80054a6:	b960      	cbnz	r0, 80054c2 <lfs_fs_deorphan.part.29+0x12a>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80054a8:	2300      	movs	r3, #0
 80054aa:	9308      	str	r3, [sp, #32]
 80054ac:	2300      	movs	r3, #0
 80054ae:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 80054b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80054b4:	2302      	movs	r3, #2
 80054b6:	aa08      	add	r2, sp, #32
 80054b8:	e7c9      	b.n	800544e <lfs_fs_deorphan.part.29+0xb6>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80054ba:	4291      	cmp	r1, r2
 80054bc:	d1e4      	bne.n	8005488 <lfs_fs_deorphan.part.29+0xf0>
                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80054be:	4283      	cmp	r3, r0
 80054c0:	e7e1      	b.n	8005486 <lfs_fs_deorphan.part.29+0xee>
    return (tag & 0x000ffc00) >> 10;
 80054c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
                            LFS_DEBUG("Fixing move while fixing orphans "
 80054c4:	4914      	ldr	r1, [pc, #80]	; (8005518 <lfs_fs_deorphan.part.29+0x180>)
 80054c6:	4818      	ldr	r0, [pc, #96]	; (8005528 <lfs_fs_deorphan.part.29+0x190>)
    return (tag & 0x000ffc00) >> 10;
 80054c8:	f3c3 2b89 	ubfx	fp, r3, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 80054cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f241 12d8 	movw	r2, #4568	; 0x11d8
 80054d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054d6:	e9cd b701 	strd	fp, r7, [sp, #4]
 80054da:	f002 fda9 	bl	8008030 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80054de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <lfs_fs_deorphan.part.29+0x194>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80054e6:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80054e8:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80054ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80054f0:	459b      	cmp	fp, r3
 80054f2:	d0d9      	beq.n	80054a8 <lfs_fs_deorphan.part.29+0x110>
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <lfs_fs_deorphan.part.29+0x198>)
 80054f6:	ea43 238b 	orr.w	r3, r3, fp, lsl #10
 80054fa:	e7d6      	b.n	80054aa <lfs_fs_deorphan.part.29+0x112>
            pdir = dir;
 80054fc:	ad14      	add	r5, sp, #80	; 0x50
 80054fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005500:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8005504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800550c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005510:	e756      	b.n	80053c0 <lfs_fs_deorphan.part.29+0x28>
 8005512:	bf00      	nop
 8005514:	08008b74 	.word	0x08008b74
 8005518:	0800967e 	.word	0x0800967e
 800551c:	08009546 	.word	0x08009546
 8005520:	000ffc08 	.word	0x000ffc08
 8005524:	08009574 	.word	0x08009574
 8005528:	080095b9 	.word	0x080095b9
 800552c:	800003ff 	.word	0x800003ff
 8005530:	4ff00000 	.word	0x4ff00000
 8005534:	7ffffc00 	.word	0x7ffffc00
 8005538:	600ffc08 	.word	0x600ffc08

0800553c <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 800553c:	b510      	push	{r4, lr}
 800553e:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8005540:	f7ff fd52 	bl	8004fe8 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 8005544:	2800      	cmp	r0, #0
 8005546:	db0a      	blt.n	800555e <lfs_dir_commit+0x22>
    if (orphans) {
 8005548:	d009      	beq.n	800555e <lfs_dir_commit+0x22>
    return tag & 0x000003ff;
 800554a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800554c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8005550:	b128      	cbz	r0, 800555e <lfs_dir_commit+0x22>
 8005552:	4620      	mov	r0, r4
 8005554:	2100      	movs	r1, #0
}
 8005556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800555a:	f7ff bf1d 	b.w	8005398 <lfs_fs_deorphan.part.29>
 800555e:	bd10      	pop	{r4, pc}

08005560 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8005560:	b530      	push	{r4, r5, lr}
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8005562:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 8005564:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8005566:	f412 6fe0 	tst.w	r2, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800556a:	b08f      	sub	sp, #60	; 0x3c
 800556c:	4604      	mov	r4, r0
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800556e:	d106      	bne.n	800557e <lfs_fs_forceconsistency+0x1e>
    return tag & 0x000003ff;
 8005570:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005572:	f3c0 0009 	ubfx	r0, r0, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8005576:	2800      	cmp	r0, #0
 8005578:	d12f      	bne.n	80055da <lfs_fs_forceconsistency+0x7a>
}
 800557a:	b00f      	add	sp, #60	; 0x3c
 800557c:	bd30      	pop	{r4, r5, pc}
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <lfs_fs_forceconsistency+0x84>)
 8005580:	9202      	str	r2, [sp, #8]
 8005582:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	f241 126a 	movw	r2, #4458	; 0x116a
 8005592:	f855 3f40 	ldr.w	r3, [r5, #64]!
 8005596:	4914      	ldr	r1, [pc, #80]	; (80055e8 <lfs_fs_forceconsistency+0x88>)
 8005598:	4814      	ldr	r0, [pc, #80]	; (80055ec <lfs_fs_forceconsistency+0x8c>)
 800559a:	f002 fd49 	bl	8008030 <iprintf>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800559e:	462a      	mov	r2, r5
 80055a0:	a906      	add	r1, sp, #24
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7fd ff10 	bl	80033c8 <lfs_dir_fetch>
    if (err) {
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1e6      	bne.n	800557a <lfs_fs_forceconsistency+0x1a>
    return (tag & 0x000ffc00) >> 10;
 80055ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80055ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80055b0:	63a0      	str	r0, [r4, #56]	; 0x38
    return (tag & 0x000ffc00) >> 10;
 80055b2:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <lfs_fs_forceconsistency+0x90>)
 80055b8:	400b      	ands	r3, r1
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80055ba:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <lfs_fs_forceconsistency+0x94>)
 80055c0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80055c4:	e9cd 3004 	strd	r3, r0, [sp, #16]
 80055c8:	aa04      	add	r2, sp, #16
 80055ca:	2301      	movs	r3, #1
 80055cc:	a906      	add	r1, sp, #24
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7ff ffb4 	bl	800553c <lfs_dir_commit>
    if (err) {
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d0cb      	beq.n	8005570 <lfs_fs_forceconsistency+0x10>
 80055d8:	e7cf      	b.n	800557a <lfs_fs_forceconsistency+0x1a>
 80055da:	2101      	movs	r1, #1
 80055dc:	4620      	mov	r0, r4
 80055de:	f7ff fedb 	bl	8005398 <lfs_fs_deorphan.part.29>
 80055e2:	e7ca      	b.n	800557a <lfs_fs_forceconsistency+0x1a>
 80055e4:	08008b74 	.word	0x08008b74
 80055e8:	0800967e 	.word	0x0800967e
 80055ec:	08009601 	.word	0x08009601
 80055f0:	800003ff 	.word	0x800003ff
 80055f4:	4ff00000 	.word	0x4ff00000

080055f8 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80055f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055fa:	4614      	mov	r4, r2
 80055fc:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80055fe:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8005602:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8005604:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8005606:	f7fd fc69 	bl	8002edc <lfs_dir_getgstate>
    if (err) {
 800560a:	b970      	cbnz	r0, 800562a <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800560c:	7de3      	ldrb	r3, [r4, #23]
 800560e:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <lfs_dir_drop+0x38>)
 8005614:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005618:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
 800561a:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800561c:	2301      	movs	r3, #1
 800561e:	466a      	mov	r2, sp
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	9401      	str	r4, [sp, #4]
 8005626:	f7ff ff89 	bl	800553c <lfs_dir_commit>
}
 800562a:	b002      	add	sp, #8
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	bf00      	nop
 8005630:	000ffc08 	.word	0x000ffc08

08005634 <lfs_file_rawsync>:
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8005634:	b570      	push	{r4, r5, r6, lr}
    if (file->flags & LFS_F_ERRED) {
 8005636:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005638:	031e      	lsls	r6, r3, #12
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800563a:	b086      	sub	sp, #24
 800563c:	4605      	mov	r5, r0
 800563e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_ERRED) {
 8005640:	d502      	bpl.n	8005648 <lfs_file_rawsync+0x14>
        return 0;
 8005642:	2000      	movs	r0, #0
}
 8005644:	b006      	add	sp, #24
 8005646:	bd70      	pop	{r4, r5, r6, pc}
    int err = lfs_file_flush(lfs, file);
 8005648:	f7ff fc06 	bl	8004e58 <lfs_file_flush>
 800564c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (err) {
 800564e:	b118      	cbz	r0, 8005658 <lfs_file_rawsync+0x24>
        file->flags |= LFS_F_ERRED;
 8005650:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005654:	6322      	str	r2, [r4, #48]	; 0x30
        return err;
 8005656:	e7f5      	b.n	8005644 <lfs_file_rawsync+0x10>
    if ((file->flags & LFS_F_DIRTY) &&
 8005658:	03d1      	lsls	r1, r2, #15
 800565a:	d5f2      	bpl.n	8005642 <lfs_file_rawsync+0xe>
            !lfs_pair_isnull(file->m.pair)) {
 800565c:	f104 0608 	add.w	r6, r4, #8
 8005660:	4630      	mov	r0, r6
 8005662:	f7fd f8bd 	bl	80027e0 <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
 8005666:	2800      	cmp	r0, #0
 8005668:	d1eb      	bne.n	8005642 <lfs_file_rawsync+0xe>
        if (file->flags & LFS_F_INLINE) {
 800566a:	02d3      	lsls	r3, r2, #11
 800566c:	d51e      	bpl.n	80056ac <lfs_file_rawsync+0x78>
            buffer = file->cache.buffer;
 800566e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            size = file->ctz.size;
 8005670:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 8005672:	f240 2001 	movw	r0, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005676:	88a1      	ldrh	r1, [r4, #4]
 8005678:	0289      	lsls	r1, r1, #10
 800567a:	430a      	orrs	r2, r1
 800567c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005680:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005684:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005686:	6893      	ldr	r3, [r2, #8]
 8005688:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800568c:	430b      	orrs	r3, r1
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	6853      	ldr	r3, [r2, #4]
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	aa02      	add	r2, sp, #8
 8005696:	2302      	movs	r3, #2
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	f7ff ff4e 	bl	800553c <lfs_dir_commit>
 80056a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (err) {
 80056a2:	b170      	cbz	r0, 80056c2 <lfs_file_rawsync+0x8e>
            file->flags |= LFS_F_ERRED;
 80056a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
        file->flags &= ~LFS_F_DIRTY;
 80056a8:	6323      	str	r3, [r4, #48]	; 0x30
 80056aa:	e7cb      	b.n	8005644 <lfs_file_rawsync+0x10>
            ctz = file->ctz;
 80056ac:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80056b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056b4:	466b      	mov	r3, sp
 80056b6:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 80056ba:	2208      	movs	r2, #8
            type = LFS_TYPE_CTZSTRUCT;
 80056bc:	f240 2002 	movw	r0, #514	; 0x202
 80056c0:	e7d9      	b.n	8005676 <lfs_file_rawsync+0x42>
        file->flags &= ~LFS_F_DIRTY;
 80056c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c6:	e7ef      	b.n	80056a8 <lfs_file_rawsync+0x74>

080056c8 <lfs_file_rawclose>:
static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4605      	mov	r5, r0
 80056cc:	460c      	mov	r4, r1
    int err = lfs_file_rawsync(lfs, file);
 80056ce:	f7ff ffb1 	bl	8005634 <lfs_file_rawsync>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80056d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    int err = lfs_file_rawsync(lfs, file);
 80056d4:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80056d6:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80056da:	b11b      	cbz	r3, 80056e4 <lfs_file_rawclose+0x1c>
        if (*p == mlist) {
 80056dc:	429c      	cmp	r4, r3
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	d108      	bne.n	80056f4 <lfs_file_rawclose+0x2c>
            *p = (*p)->next;
 80056e2:	6011      	str	r1, [r2, #0]
    if (!file->cfg->buffer) {
 80056e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	b913      	cbnz	r3, 80056f0 <lfs_file_rawclose+0x28>
    free(p);
 80056ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80056ec:	f002 f8f4 	bl	80078d8 <free>
}
 80056f0:	4630      	mov	r0, r6
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80056f4:	461a      	mov	r2, r3
 80056f6:	460b      	mov	r3, r1
 80056f8:	e7ef      	b.n	80056da <lfs_file_rawclose+0x12>
	...

080056fc <lfs_file_rawopencfg>:
        const struct lfs_file_config *cfg) {
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	b08a      	sub	sp, #40	; 0x28
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005702:	f013 0f02 	tst.w	r3, #2
        const struct lfs_file_config *cfg) {
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	9203      	str	r2, [sp, #12]
 800570c:	4698      	mov	r8, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800570e:	d123      	bne.n	8005758 <lfs_file_rawopencfg+0x5c>
    file->cfg = cfg;
 8005710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005712:	6523      	str	r3, [r4, #80]	; 0x50
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005714:	f104 0708 	add.w	r7, r4, #8
    file->pos = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
 800571c:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
 800571e:	64e3      	str	r3, [r4, #76]	; 0x4c
    file->flags = flags;
 8005720:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005724:	1d23      	adds	r3, r4, #4
 8005726:	aa03      	add	r2, sp, #12
 8005728:	4639      	mov	r1, r7
 800572a:	4630      	mov	r0, r6
 800572c:	f7fd fe82 	bl	8003434 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8005730:	1e05      	subs	r5, r0, #0
 8005732:	da1a      	bge.n	800576a <lfs_file_rawopencfg+0x6e>
 8005734:	1cab      	adds	r3, r5, #2
 8005736:	d106      	bne.n	8005746 <lfs_file_rawopencfg+0x4a>
 8005738:	88a2      	ldrh	r2, [r4, #4]
 800573a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800573e:	429a      	cmp	r2, r3
 8005740:	d113      	bne.n	800576a <lfs_file_rawopencfg+0x6e>
        err = tag;
 8005742:	f06f 0501 	mvn.w	r5, #1
    file->flags |= LFS_F_ERRED;
 8005746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800574c:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
 800574e:	4621      	mov	r1, r4
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff ffb9 	bl	80056c8 <lfs_file_rawclose>
    return err;
 8005756:	e004      	b.n	8005762 <lfs_file_rawopencfg+0x66>
        int err = lfs_fs_forceconsistency(lfs);
 8005758:	f7ff ff02 	bl	8005560 <lfs_fs_forceconsistency>
        if (err) {
 800575c:	4605      	mov	r5, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	d0d6      	beq.n	8005710 <lfs_file_rawopencfg+0x14>
}
 8005762:	4628      	mov	r0, r5
 8005764:	b00a      	add	sp, #40	; 0x28
 8005766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file->type = LFS_TYPE_REG;
 800576a:	2301      	movs	r3, #1
 800576c:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
 800576e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005770:	6023      	str	r3, [r4, #0]
    if (tag == LFS_ERR_NOENT) {
 8005772:	1ca8      	adds	r0, r5, #2
    lfs->mlist = mlist;
 8005774:	62b4      	str	r4, [r6, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
 8005776:	d149      	bne.n	800580c <lfs_file_rawopencfg+0x110>
        if (!(flags & LFS_O_CREAT)) {
 8005778:	f418 7f80 	tst.w	r8, #256	; 0x100
 800577c:	d0e1      	beq.n	8005742 <lfs_file_rawopencfg+0x46>
        lfs_size_t nlen = strlen(path);
 800577e:	9d03      	ldr	r5, [sp, #12]
 8005780:	4628      	mov	r0, r5
 8005782:	f7fa fd2f 	bl	80001e4 <strlen>
        if (nlen > lfs->name_max) {
 8005786:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8005788:	4283      	cmp	r3, r0
 800578a:	d202      	bcs.n	8005792 <lfs_file_rawopencfg+0x96>
            err = LFS_ERR_NAMETOOLONG;
 800578c:	f06f 0523 	mvn.w	r5, #35	; 0x23
 8005790:	e7d9      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005792:	88a3      	ldrh	r3, [r4, #4]
 8005794:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8005934 <lfs_file_rawopencfg+0x238>
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800579e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057a2:	9204      	str	r2, [sp, #16]
 80057a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057a8:	2100      	movs	r1, #0
 80057aa:	4310      	orrs	r0, r2
 80057ac:	ea43 0308 	orr.w	r3, r3, r8
 80057b0:	e9cd 0506 	strd	r0, r5, [sp, #24]
 80057b4:	e9cd 3108 	strd	r3, r1, [sp, #32]
 80057b8:	9105      	str	r1, [sp, #20]
 80057ba:	2303      	movs	r3, #3
 80057bc:	aa04      	add	r2, sp, #16
 80057be:	4639      	mov	r1, r7
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff febb 	bl	800553c <lfs_dir_commit>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80057c6:	f110 0f1c 	cmn.w	r0, #28
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80057ca:	4605      	mov	r5, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80057cc:	d0de      	beq.n	800578c <lfs_file_rawopencfg+0x90>
        if (err) {
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d1b9      	bne.n	8005746 <lfs_file_rawopencfg+0x4a>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80057d2:	4645      	mov	r5, r8
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80057d4:	f8df a160 	ldr.w	sl, [pc, #352]	; 8005938 <lfs_file_rawopencfg+0x23c>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80057d8:	f04f 0800 	mov.w	r8, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80057dc:	f04f 090c 	mov.w	r9, #12
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80057e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	4542      	cmp	r2, r8
 80057e6:	d838      	bhi.n	800585a <lfs_file_rawopencfg+0x15e>
    if (file->cfg->buffer) {
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8d6 8068 	ldr.w	r8, [r6, #104]	; 0x68
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d063      	beq.n	80058ba <lfs_file_rawopencfg+0x1be>
        file->cache.buffer = file->cfg->buffer;
 80057f2:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
 80057f4:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80057f8:	4640      	mov	r0, r8
 80057fa:	f7fd f8bc 	bl	8002976 <lfs_cache_zero.isra.17>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80057fe:	f240 2301 	movw	r3, #513	; 0x201
 8005802:	ebb3 5f15 	cmp.w	r3, r5, lsr #20
 8005806:	d062      	beq.n	80058ce <lfs_file_rawopencfg+0x1d2>
    return 0;
 8005808:	2500      	movs	r5, #0
 800580a:	e7aa      	b.n	8005762 <lfs_file_rawopencfg+0x66>
    } else if (flags & LFS_O_EXCL) {
 800580c:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005810:	f040 8085 	bne.w	800591e <lfs_file_rawopencfg+0x222>
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005814:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005818:	2d01      	cmp	r5, #1
 800581a:	f040 8083 	bne.w	8005924 <lfs_file_rawopencfg+0x228>
 800581e:	88a3      	ldrh	r3, [r4, #4]
    } else if (flags & LFS_O_TRUNC) {
 8005820:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8005824:	ea4f 2383 	mov.w	r3, r3, lsl #10
 8005828:	d008      	beq.n	800583c <lfs_file_rawopencfg+0x140>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800582a:	f043 5500 	orr.w	r5, r3, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
 800582e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005834:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
 8005838:	6323      	str	r3, [r4, #48]	; 0x30
 800583a:	e7cb      	b.n	80057d4 <lfs_file_rawopencfg+0xd8>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800583c:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005844:	9200      	str	r2, [sp, #0]
 8005846:	f043 0308 	orr.w	r3, r3, #8
 800584a:	4a39      	ldr	r2, [pc, #228]	; (8005930 <lfs_file_rawopencfg+0x234>)
 800584c:	4639      	mov	r1, r7
 800584e:	4630      	mov	r0, r6
 8005850:	f7fd fb38 	bl	8002ec4 <lfs_dir_get>
        if (tag < 0) {
 8005854:	1e05      	subs	r5, r0, #0
 8005856:	dabd      	bge.n	80057d4 <lfs_file_rawopencfg+0xd8>
 8005858:	e775      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800585a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800585c:	07d1      	lsls	r1, r2, #31
 800585e:	d405      	bmi.n	800586c <lfs_file_rawopencfg+0x170>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005860:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005862:	079a      	lsls	r2, r3, #30
 8005864:	d41d      	bmi.n	80058a2 <lfs_file_rawopencfg+0x1a6>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005866:	f108 0801 	add.w	r8, r8, #1
 800586a:	e7b9      	b.n	80057e0 <lfs_file_rawopencfg+0xe4>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800586c:	6858      	ldr	r0, [r3, #4]
 800586e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8005872:	fb09 f208 	mul.w	r2, r9, r8
 8005876:	1881      	adds	r1, r0, r2
 8005878:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800587a:	688b      	ldr	r3, [r1, #8]
 800587c:	6849      	ldr	r1, [r1, #4]
 800587e:	9100      	str	r1, [sp, #0]
 8005880:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005884:	f502 7240 	add.w	r2, r2, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005888:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800588c:	4639      	mov	r1, r7
 800588e:	4652      	mov	r2, sl
 8005890:	4630      	mov	r0, r6
 8005892:	f7fd fb17 	bl	8002ec4 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005896:	2800      	cmp	r0, #0
 8005898:	dae2      	bge.n	8005860 <lfs_file_rawopencfg+0x164>
 800589a:	1c83      	adds	r3, r0, #2
 800589c:	d0e0      	beq.n	8005860 <lfs_file_rawopencfg+0x164>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800589e:	4605      	mov	r5, r0
 80058a0:	e751      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80058a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80058a4:	6852      	ldr	r2, [r2, #4]
 80058a6:	fb09 2208 	mla	r2, r9, r8, r2
 80058aa:	6891      	ldr	r1, [r2, #8]
 80058ac:	6f72      	ldr	r2, [r6, #116]	; 0x74
 80058ae:	4291      	cmp	r1, r2
 80058b0:	d83b      	bhi.n	800592a <lfs_file_rawopencfg+0x22e>
            file->flags |= LFS_F_DIRTY;
 80058b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b6:	6323      	str	r3, [r4, #48]	; 0x30
 80058b8:	e7d5      	b.n	8005866 <lfs_file_rawopencfg+0x16a>
    return malloc(size);
 80058ba:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80058be:	f002 f803 	bl	80078c8 <malloc>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80058c2:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d195      	bne.n	80057f4 <lfs_file_rawopencfg+0xf8>
            err = LFS_ERR_NOMEM;
 80058c8:	f06f 050b 	mvn.w	r5, #11
 80058cc:	e73b      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
        file->ctz.head = LFS_BLOCK_INLINE;
 80058ce:	f06f 0301 	mvn.w	r3, #1
 80058d2:	62a3      	str	r3, [r4, #40]	; 0x28
        file->cache.block = file->ctz.head;
 80058d4:	6423      	str	r3, [r4, #64]	; 0x40
        file->cache.off = 0;
 80058d6:	2300      	movs	r3, #0
        file->flags |= LFS_F_INLINE;
 80058d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        file->cache.off = 0;
 80058da:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80058dc:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    return tag & 0x000003ff;
 80058de:	f3c5 0509 	ubfx	r5, r5, #0, #10
        file->flags |= LFS_F_INLINE;
 80058e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
        file->cache.size = lfs->cfg->cache_size;
 80058e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80058e8:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80058ea:	6322      	str	r2, [r4, #48]	; 0x30
        file->cache.size = lfs->cfg->cache_size;
 80058ec:	64a1      	str	r1, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	d08a      	beq.n	8005808 <lfs_file_rawopencfg+0x10c>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80058f2:	88a2      	ldrh	r2, [r4, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80058f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80058f6:	9300      	str	r3, [sp, #0]
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80058f8:	0292      	lsls	r2, r2, #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80058fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80058fe:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8005902:	4299      	cmp	r1, r3
 8005904:	bf94      	ite	ls
 8005906:	ea42 0301 	orrls.w	r3, r2, r1
 800590a:	4313      	orrhi	r3, r2
 800590c:	4630      	mov	r0, r6
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <lfs_file_rawopencfg+0x234>)
 8005910:	4639      	mov	r1, r7
 8005912:	f7fd fad7 	bl	8002ec4 <lfs_dir_get>
            if (res < 0) {
 8005916:	1e05      	subs	r5, r0, #0
 8005918:	f6bf af76 	bge.w	8005808 <lfs_file_rawopencfg+0x10c>
 800591c:	e713      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
        err = LFS_ERR_EXIST;
 800591e:	f06f 0510 	mvn.w	r5, #16
 8005922:	e710      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
        err = LFS_ERR_ISDIR;
 8005924:	f06f 0514 	mvn.w	r5, #20
 8005928:	e70d      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
                err = LFS_ERR_NOSPC;
 800592a:	f06f 051b 	mvn.w	r5, #27
 800592e:	e70a      	b.n	8005746 <lfs_file_rawopencfg+0x4a>
 8005930:	700ffc00 	.word	0x700ffc00
 8005934:	20100000 	.word	0x20100000
 8005938:	7ffffc00 	.word	0x7ffffc00

0800593c <lfs_file_rawwrite>:
        const void *buffer, lfs_size_t size) {
 800593c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005940:	4698      	mov	r8, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005942:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005944:	079d      	lsls	r5, r3, #30
        const void *buffer, lfs_size_t size) {
 8005946:	4606      	mov	r6, r0
 8005948:	460c      	mov	r4, r1
 800594a:	4691      	mov	r9, r2
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800594c:	d406      	bmi.n	800595c <lfs_file_rawwrite+0x20>
 800594e:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <lfs_file_rawwrite+0x9c>)
 8005950:	4a22      	ldr	r2, [pc, #136]	; (80059dc <lfs_file_rawwrite+0xa0>)
 8005952:	4823      	ldr	r0, [pc, #140]	; (80059e0 <lfs_file_rawwrite+0xa4>)
 8005954:	f640 5156 	movw	r1, #3414	; 0xd56
 8005958:	f001 ff4a 	bl	80077f0 <__assert_func>
    if (file->flags & LFS_F_READING) {
 800595c:	035a      	lsls	r2, r3, #13
 800595e:	d418      	bmi.n	8005992 <lfs_file_rawwrite+0x56>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005960:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005962:	052b      	lsls	r3, r5, #20
 8005964:	d41c      	bmi.n	80059a0 <lfs_file_rawwrite+0x64>
    if (file->pos + size > lfs->file_max) {
 8005966:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8005968:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800596a:	eb07 0108 	add.w	r1, r7, r8
 800596e:	4291      	cmp	r1, r2
 8005970:	d82f      	bhi.n	80059d2 <lfs_file_rawwrite+0x96>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005972:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
 8005976:	d019      	beq.n	80059ac <lfs_file_rawwrite+0x70>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005978:	4643      	mov	r3, r8
 800597a:	464a      	mov	r2, r9
 800597c:	4621      	mov	r1, r4
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff f91c 	bl	8004bbc <lfs_file_flushedwrite>
    if (nsize < 0) {
 8005984:	2800      	cmp	r0, #0
 8005986:	db08      	blt.n	800599a <lfs_file_rawwrite+0x5e>
    file->flags &= ~LFS_F_ERRED;
 8005988:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800598a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800598e:	6323      	str	r3, [r4, #48]	; 0x30
    return nsize;
 8005990:	e003      	b.n	800599a <lfs_file_rawwrite+0x5e>
        int err = lfs_file_flush(lfs, file);
 8005992:	f7ff fa61 	bl	8004e58 <lfs_file_flush>
        if (err) {
 8005996:	2800      	cmp	r0, #0
 8005998:	d0e2      	beq.n	8005960 <lfs_file_rawwrite+0x24>
}
 800599a:	b003      	add	sp, #12
 800599c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80059a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80059a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059a4:	428a      	cmp	r2, r1
        file->pos = file->ctz.size;
 80059a6:	bf88      	it	hi
 80059a8:	6362      	strhi	r2, [r4, #52]	; 0x34
 80059aa:	e7dc      	b.n	8005966 <lfs_file_rawwrite+0x2a>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80059ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059ae:	429f      	cmp	r7, r3
 80059b0:	d9e2      	bls.n	8005978 <lfs_file_rawwrite+0x3c>
        file->pos = file->ctz.size;
 80059b2:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 80059b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059b6:	429f      	cmp	r7, r3
 80059b8:	d9de      	bls.n	8005978 <lfs_file_rawwrite+0x3c>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80059ba:	2301      	movs	r3, #1
 80059bc:	f10d 0207 	add.w	r2, sp, #7
 80059c0:	4621      	mov	r1, r4
 80059c2:	4630      	mov	r0, r6
 80059c4:	f88d 5007 	strb.w	r5, [sp, #7]
 80059c8:	f7ff f8f8 	bl	8004bbc <lfs_file_flushedwrite>
            if (res < 0) {
 80059cc:	2800      	cmp	r0, #0
 80059ce:	daf1      	bge.n	80059b4 <lfs_file_rawwrite+0x78>
 80059d0:	e7e3      	b.n	800599a <lfs_file_rawwrite+0x5e>
        return LFS_ERR_FBIG;
 80059d2:	f06f 001a 	mvn.w	r0, #26
 80059d6:	e7e0      	b.n	800599a <lfs_file_rawwrite+0x5e>
 80059d8:	080094bf 	.word	0x080094bf
 80059dc:	08009104 	.word	0x08009104
 80059e0:	0800967e 	.word	0x0800967e

080059e4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80059e4:	b530      	push	{r4, r5, lr}
 80059e6:	b097      	sub	sp, #92	; 0x5c
 80059e8:	4605      	mov	r5, r0
        err = lfs_init(lfs, cfg);
 80059ea:	f7fc ffcf 	bl	800298c <lfs_init>
        if (err) {
 80059ee:	4604      	mov	r4, r0
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d14e      	bne.n	8005a92 <lfs_format+0xae>
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80059f4:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80059f6:	4601      	mov	r1, r0
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80059fc:	f001 ffa0 	bl	8007940 <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005a00:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
 8005a02:	656c      	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	00db      	lsls	r3, r3, #3
    lfs->free.ack = lfs->cfg->block_count;
 8005a0a:	e9c5 4217 	strd	r4, r2, [r5, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	bf94      	ite	ls
 8005a12:	65ab      	strls	r3, [r5, #88]	; 0x58
 8005a14:	65aa      	strhi	r2, [r5, #88]	; 0x58
        err = lfs_dir_alloc(lfs, &root);
 8005a16:	a90e      	add	r1, sp, #56	; 0x38
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f7fe fc49 	bl	80042b0 <lfs_dir_alloc>
        if (err) {
 8005a1e:	4604      	mov	r4, r0
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d133      	bne.n	8005a8c <lfs_format+0xa8>
        lfs_superblock_t superblock = {
 8005a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a28:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
 8005a2a:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs_superblock_t superblock = {
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005a38:	9306      	str	r3, [sp, #24]
 8005a3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005a3c:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <lfs_format+0xb4>)
        lfs_superblock_t superblock = {
 8005a40:	9203      	str	r2, [sp, #12]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005a42:	e9cd 3008 	strd	r3, r0, [sp, #32]
 8005a46:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <lfs_format+0xb8>)
 8005a48:	930a      	str	r3, [sp, #40]	; 0x28
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <lfs_format+0xbc>)
 8005a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a4e:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <lfs_format+0xc0>)
 8005a50:	930c      	str	r3, [sp, #48]	; 0x30
 8005a52:	ab02      	add	r3, sp, #8
 8005a54:	930d      	str	r3, [sp, #52]	; 0x34
 8005a56:	aa08      	add	r2, sp, #32
 8005a58:	2303      	movs	r3, #3
 8005a5a:	a90e      	add	r1, sp, #56	; 0x38
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f7ff fd6d 	bl	800553c <lfs_dir_commit>
        if (err) {
 8005a62:	4604      	mov	r4, r0
 8005a64:	b990      	cbnz	r0, 8005a8c <lfs_format+0xa8>
        root.erased = false;
 8005a66:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	a90e      	add	r1, sp, #56	; 0x38
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff fd63 	bl	800553c <lfs_dir_commit>
        if (err) {
 8005a76:	4604      	mov	r4, r0
 8005a78:	b940      	cbnz	r0, 8005a8c <lfs_format+0xa8>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8005a7a:	9000      	str	r0, [sp, #0]
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	466a      	mov	r2, sp
 8005a80:	a90e      	add	r1, sp, #56	; 0x38
 8005a82:	4628      	mov	r0, r5
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	f7fd fc9f 	bl	80033c8 <lfs_dir_fetch>
 8005a8a:	4604      	mov	r4, r0
    lfs_deinit(lfs);
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f7fc ff5c 	bl	800294a <lfs_deinit>
    err = lfs_rawformat(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8005a92:	4620      	mov	r0, r4
 8005a94:	b017      	add	sp, #92	; 0x5c
 8005a96:	bd30      	pop	{r4, r5, pc}
 8005a98:	40100000 	.word	0x40100000
 8005a9c:	0ff00008 	.word	0x0ff00008
 8005aa0:	0800953d 	.word	0x0800953d
 8005aa4:	20100018 	.word	0x20100018

08005aa8 <lfs_unmount>:
    return lfs_deinit(lfs);
 8005aa8:	f7fc bf4f 	b.w	800294a <lfs_deinit>

08005aac <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8005aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	b096      	sub	sp, #88	; 0x58
 8005ab2:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 8005ab4:	f7fc ff6a 	bl	800298c <lfs_init>
    if (err) {
 8005ab8:	4606      	mov	r6, r0
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d141      	bne.n	8005b42 <lfs_mount+0x96>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8005abe:	4601      	mov	r1, r0
 8005ac0:	221c      	movs	r2, #28
 8005ac2:	a80e      	add	r0, sp, #56	; 0x38
 8005ac4:	f001 ff3c 	bl	8007940 <memset>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005ac8:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8005ca0 <lfs_mount+0x1f4>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8005acc:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8005ca4 <lfs_mount+0x1f8>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8005ad0:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8005ca8 <lfs_mount+0x1fc>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	9315      	str	r3, [sp, #84]	; 0x54
    lfs_block_t cycle = 0;
 8005ad8:	4637      	mov	r7, r6
    while (!lfs_pair_isnull(dir.tail)) {
 8005ada:	a814      	add	r0, sp, #80	; 0x50
 8005adc:	f7fc fe80 	bl	80027e0 <lfs_pair_isnull>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d032      	beq.n	8005b4a <lfs_mount+0x9e>
    if (lfs_pair_isnull(lfs->root)) {
 8005ae4:	f104 0020 	add.w	r0, r4, #32
 8005ae8:	f7fc fe7a 	bl	80027e0 <lfs_pair_isnull>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d169      	bne.n	8005bc4 <lfs_mount+0x118>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8005af0:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8005af4:	4628      	mov	r0, r5
 8005af6:	f7fc fea6 	bl	8002846 <lfs_gstate_iszero>
 8005afa:	b960      	cbnz	r0, 8005b16 <lfs_mount+0x6a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8005afc:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <lfs_mount+0x1c8>)
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	f241 027d 	movw	r2, #4221	; 0x107d
 8005b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b0e:	495a      	ldr	r1, [pc, #360]	; (8005c78 <lfs_mount+0x1cc>)
 8005b10:	485a      	ldr	r0, [pc, #360]	; (8005c7c <lfs_mount+0x1d0>)
 8005b12:	f002 fa8d 	bl	8008030 <iprintf>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8005b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005b1c:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8005b1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b22:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8005b2a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005b2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	fbb1 f2f3 	udiv	r2, r1, r3
 8005b34:	fb03 1212 	mls	r2, r3, r2, r1
 8005b38:	6562      	str	r2, [r4, #84]	; 0x54
    lfs->free.size = 0;
 8005b3a:	2200      	movs	r2, #0
    lfs->free.i = 0;
 8005b3c:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
    lfs->free.ack = lfs->cfg->block_count;
 8005b40:	6623      	str	r3, [r4, #96]	; 0x60
    err = lfs_rawmount(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8005b42:	4630      	mov	r0, r6
 8005b44:	b016      	add	sp, #88	; 0x58
 8005b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (cycle >= lfs->cfg->block_count/2) {
 8005b4a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	ebb7 0f53 	cmp.w	r7, r3, lsr #1
 8005b52:	f080 808c 	bcs.w	8005c6e <lfs_mount+0x1c2>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005b56:	2308      	movs	r3, #8
 8005b58:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8005b5a:	ab05      	add	r3, sp, #20
 8005b5c:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8005b60:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <lfs_mount+0x1d4>)
 8005b62:	9001      	str	r0, [sp, #4]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	aa14      	add	r2, sp, #80	; 0x50
 8005b68:	4b46      	ldr	r3, [pc, #280]	; (8005c84 <lfs_mount+0x1d8>)
 8005b6a:	a90e      	add	r1, sp, #56	; 0x38
 8005b6c:	4620      	mov	r0, r4
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005b6e:	e9cd 4805 	strd	r4, r8, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8005b72:	f7fd f9ed 	bl	8002f50 <lfs_dir_fetchmatch>
        if (tag < 0) {
 8005b76:	1e05      	subs	r5, r0, #0
        cycle += 1;
 8005b78:	f107 0701 	add.w	r7, r7, #1
        if (tag < 0) {
 8005b7c:	db72      	blt.n	8005c64 <lfs_mount+0x1b8>
        if (tag && !lfs_tag_isdelete(tag)) {
 8005b7e:	d067      	beq.n	8005c50 <lfs_mount+0x1a4>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8005b80:	f345 0509 	sbfx	r5, r5, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 8005b84:	3501      	adds	r5, #1
 8005b86:	d063      	beq.n	8005c50 <lfs_mount+0x1a4>
            lfs->root[0] = dir.pair[0];
 8005b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b8a:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 8005b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b8e:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8005b90:	ab08      	add	r3, sp, #32
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4a3b      	ldr	r2, [pc, #236]	; (8005c84 <lfs_mount+0x1d8>)
 8005b96:	4653      	mov	r3, sl
 8005b98:	a90e      	add	r1, sp, #56	; 0x38
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f7fd f992 	bl	8002ec4 <lfs_dir_get>
            if (tag < 0) {
 8005ba0:	1e05      	subs	r5, r0, #0
 8005ba2:	db5f      	blt.n	8005c64 <lfs_mount+0x1b8>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8005ba4:	9a08      	ldr	r2, [sp, #32]
 8005ba6:	0c13      	lsrs	r3, r2, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8005ba8:	2b02      	cmp	r3, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8005baa:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8005bac:	d100      	bne.n	8005bb0 <lfs_mount+0x104>
 8005bae:	b161      	cbz	r1, 8005bca <lfs_mount+0x11e>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8005bb0:	4930      	ldr	r1, [pc, #192]	; (8005c74 <lfs_mount+0x1c8>)
 8005bb2:	9101      	str	r1, [sp, #4]
 8005bb4:	b292      	uxth	r2, r2
 8005bb6:	4930      	ldr	r1, [pc, #192]	; (8005c78 <lfs_mount+0x1cc>)
 8005bb8:	4833      	ldr	r0, [pc, #204]	; (8005c88 <lfs_mount+0x1dc>)
 8005bba:	9200      	str	r2, [sp, #0]
 8005bbc:	f241 0235 	movw	r2, #4149	; 0x1035
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8005bc0:	f002 fa36 	bl	8008030 <iprintf>
        err = LFS_ERR_INVAL;
 8005bc4:	f06f 0515 	mvn.w	r5, #21
 8005bc8:	e04c      	b.n	8005c64 <lfs_mount+0x1b8>
            if (superblock.name_max) {
 8005bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bcc:	b15b      	cbz	r3, 8005be6 <lfs_mount+0x13a>
                if (superblock.name_max > lfs->name_max) {
 8005bce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d907      	bls.n	8005be4 <lfs_mount+0x138>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8005bd4:	4927      	ldr	r1, [pc, #156]	; (8005c74 <lfs_mount+0x1c8>)
 8005bd6:	482d      	ldr	r0, [pc, #180]	; (8005c8c <lfs_mount+0x1e0>)
 8005bd8:	e9cd 2100 	strd	r2, r1, [sp]
 8005bdc:	f241 023e 	movw	r2, #4158	; 0x103e
 8005be0:	4925      	ldr	r1, [pc, #148]	; (8005c78 <lfs_mount+0x1cc>)
 8005be2:	e7ed      	b.n	8005bc0 <lfs_mount+0x114>
                lfs->name_max = superblock.name_max;
 8005be4:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 8005be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be8:	b15b      	cbz	r3, 8005c02 <lfs_mount+0x156>
                if (superblock.file_max > lfs->file_max) {
 8005bea:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d907      	bls.n	8005c00 <lfs_mount+0x154>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8005bf0:	4920      	ldr	r1, [pc, #128]	; (8005c74 <lfs_mount+0x1c8>)
 8005bf2:	4827      	ldr	r0, [pc, #156]	; (8005c90 <lfs_mount+0x1e4>)
 8005bf4:	e9cd 2100 	strd	r2, r1, [sp]
 8005bf8:	f241 0249 	movw	r2, #4169	; 0x1049
 8005bfc:	491e      	ldr	r1, [pc, #120]	; (8005c78 <lfs_mount+0x1cc>)
 8005bfe:	e7df      	b.n	8005bc0 <lfs_mount+0x114>
                lfs->file_max = superblock.file_max;
 8005c00:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 8005c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c04:	b15b      	cbz	r3, 8005c1e <lfs_mount+0x172>
                if (superblock.attr_max > lfs->attr_max) {
 8005c06:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d907      	bls.n	8005c1c <lfs_mount+0x170>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8005c0c:	4919      	ldr	r1, [pc, #100]	; (8005c74 <lfs_mount+0x1c8>)
 8005c0e:	4821      	ldr	r0, [pc, #132]	; (8005c94 <lfs_mount+0x1e8>)
 8005c10:	e9cd 2100 	strd	r2, r1, [sp]
 8005c14:	f241 0254 	movw	r2, #4180	; 0x1054
 8005c18:	4917      	ldr	r1, [pc, #92]	; (8005c78 <lfs_mount+0x1cc>)
 8005c1a:	e7d1      	b.n	8005bc0 <lfs_mount+0x114>
                lfs->attr_max = superblock.attr_max;
 8005c1c:	6763      	str	r3, [r4, #116]	; 0x74
            if (superblock.block_count != lfs->cfg->block_count) {
 8005c1e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	6a11      	ldr	r1, [r2, #32]
 8005c24:	428b      	cmp	r3, r1
 8005c26:	d007      	beq.n	8005c38 <lfs_mount+0x18c>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <lfs_mount+0x1c8>)
 8005c2a:	481b      	ldr	r0, [pc, #108]	; (8005c98 <lfs_mount+0x1ec>)
 8005c2c:	e9cd 1200 	strd	r1, r2, [sp]
 8005c30:	f241 025e 	movw	r2, #4190	; 0x105e
 8005c34:	4910      	ldr	r1, [pc, #64]	; (8005c78 <lfs_mount+0x1cc>)
 8005c36:	e7c3      	b.n	8005bc0 <lfs_mount+0x114>
            if (superblock.block_size != lfs->cfg->block_size) {
 8005c38:	69d2      	ldr	r2, [r2, #28]
 8005c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c3c:	4291      	cmp	r1, r2
 8005c3e:	d007      	beq.n	8005c50 <lfs_mount+0x1a4>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8005c40:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <lfs_mount+0x1c8>)
 8005c42:	490d      	ldr	r1, [pc, #52]	; (8005c78 <lfs_mount+0x1cc>)
 8005c44:	4815      	ldr	r0, [pc, #84]	; (8005c9c <lfs_mount+0x1f0>)
 8005c46:	e9cd 3200 	strd	r3, r2, [sp]
 8005c4a:	f241 0265 	movw	r2, #4197	; 0x1065
 8005c4e:	e7b7      	b.n	8005bc0 <lfs_mount+0x114>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8005c50:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8005c54:	a90e      	add	r1, sp, #56	; 0x38
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7fd f940 	bl	8002edc <lfs_dir_getgstate>
        if (err) {
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f43f af3b 	beq.w	8005ada <lfs_mount+0x2e>
    lfs_rawunmount(lfs);
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7ff ff1f 	bl	8005aa8 <lfs_unmount>
    return err;
 8005c6a:	462e      	mov	r6, r5
 8005c6c:	e769      	b.n	8005b42 <lfs_mount+0x96>
            err = LFS_ERR_CORRUPT;
 8005c6e:	f06f 0553 	mvn.w	r5, #83	; 0x53
 8005c72:	e7f7      	b.n	8005c64 <lfs_mount+0x1b8>
 8005c74:	08008b74 	.word	0x08008b74
 8005c78:	0800967e 	.word	0x0800967e
 8005c7c:	080099de 	.word	0x080099de
 8005c80:	0ff00008 	.word	0x0ff00008
 8005c84:	7ffffc00 	.word	0x7ffffc00
 8005c88:	080098bb 	.word	0x080098bb
 8005c8c:	080098e5 	.word	0x080098e5
 8005c90:	08009917 	.word	0x08009917
 8005c94:	08009949 	.word	0x08009949
 8005c98:	0800997b 	.word	0x0800997b
 8005c9c:	080099ad 	.word	0x080099ad
 8005ca0:	0800953d 	.word	0x0800953d
 8005ca4:	08003bb7 	.word	0x08003bb7
 8005ca8:	20100018 	.word	0x20100018

08005cac <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8005cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cae:	b099      	sub	sp, #100	; 0x64
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 8005cb4:	f7ff fc54 	bl	8005560 <lfs_fs_forceconsistency>
    if (err) {
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d15f      	bne.n	8005d7c <lfs_remove+0xd0>
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	aa03      	add	r2, sp, #12
 8005cc0:	a906      	add	r1, sp, #24
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7fd fbb6 	bl	8003434 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	db57      	blt.n	8005d7c <lfs_remove+0xd0>
    return (tag & 0x000ffc00) >> 10;
 8005ccc:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8005cd0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d053      	beq.n	8005d80 <lfs_remove+0xd4>
    return (tag & 0x7ff00000) >> 20;
 8005cd8:	0d07      	lsrs	r7, r0, #20
    dir.next = lfs->mlist;
 8005cda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005cdc:	920e      	str	r2, [sp, #56]	; 0x38
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8005cde:	2f02      	cmp	r7, #2
 8005ce0:	ea4f 2583 	mov.w	r5, r3, lsl #10
 8005ce4:	ae04      	add	r6, sp, #16
 8005ce6:	d122      	bne.n	8005d2e <lfs_remove+0x82>
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8005ce8:	f045 5300 	orr.w	r3, r5, #536870912	; 0x20000000
 8005cec:	9600      	str	r6, [sp, #0]
 8005cee:	f043 0308 	orr.w	r3, r3, #8
 8005cf2:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <lfs_remove+0xdc>)
 8005cf4:	a906      	add	r1, sp, #24
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7fd f8e4 	bl	8002ec4 <lfs_dir_get>
        if (res < 0) {
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	db3d      	blt.n	8005d7c <lfs_remove+0xd0>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8005d00:	4632      	mov	r2, r6
 8005d02:	a910      	add	r1, sp, #64	; 0x40
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7fd fb5f 	bl	80033c8 <lfs_dir_fetch>
        if (err) {
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d136      	bne.n	8005d7c <lfs_remove+0xd0>
        if (dir.m.count > 0 || dir.m.split) {
 8005d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d10:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
 8005d14:	d130      	bne.n	8005d78 <lfs_remove+0xcc>
        err = lfs_fs_preporphans(lfs, +1);
 8005d16:	2101      	movs	r1, #1
 8005d18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005d1c:	f7fc ff42 	bl	8002ba4 <lfs_fs_preporphans.isra.20>
        if (err) {
 8005d20:	bb60      	cbnz	r0, 8005d7c <lfs_remove+0xd0>
        lfs->mlist = &dir;
 8005d22:	ab0e      	add	r3, sp, #56	; 0x38
        dir.type = 0;
 8005d24:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        dir.id = 0;
 8005d28:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        lfs->mlist = &dir;
 8005d2c:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
 8005d34:	9305      	str	r3, [sp, #20]
 8005d36:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	a906      	add	r1, sp, #24
 8005d40:	4620      	mov	r0, r4
 8005d42:	9504      	str	r5, [sp, #16]
 8005d44:	f7ff fbfa 	bl	800553c <lfs_dir_commit>
 8005d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lfs->mlist = dir.next;
 8005d4a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (err) {
 8005d4c:	b9b0      	cbnz	r0, 8005d7c <lfs_remove+0xd0>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8005d4e:	2f02      	cmp	r7, #2
 8005d50:	d114      	bne.n	8005d7c <lfs_remove+0xd0>
        err = lfs_fs_preporphans(lfs, -1);
 8005d52:	f04f 31ff 	mov.w	r1, #4294967295
 8005d56:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005d5a:	f7fc ff23 	bl	8002ba4 <lfs_fs_preporphans.isra.20>
        if (err) {
 8005d5e:	b968      	cbnz	r0, 8005d7c <lfs_remove+0xd0>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8005d60:	aa06      	add	r2, sp, #24
 8005d62:	a910      	add	r1, sp, #64	; 0x40
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7fd fb3c 	bl	80033e2 <lfs_fs_pred>
        if (err) {
 8005d6a:	b938      	cbnz	r0, 8005d7c <lfs_remove+0xd0>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8005d6c:	aa10      	add	r2, sp, #64	; 0x40
 8005d6e:	a906      	add	r1, sp, #24
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff fc41 	bl	80055f8 <lfs_dir_drop>
 8005d76:	e001      	b.n	8005d7c <lfs_remove+0xd0>
            return LFS_ERR_NOTEMPTY;
 8005d78:	f06f 0026 	mvn.w	r0, #38	; 0x26
    err = lfs_rawremove(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8005d7c:	b019      	add	sp, #100	; 0x64
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8005d80:	f06f 0015 	mvn.w	r0, #21
 8005d84:	e7fa      	b.n	8005d7c <lfs_remove+0xd0>
 8005d86:	bf00      	nop
 8005d88:	700ffc00 	.word	0x700ffc00

08005d8c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8005d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d8e:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005d90:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8005d92:	460d      	mov	r5, r1
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005d94:	f7fc fd71 	bl	800287a <lfs_mlist_isopen>
 8005d98:	b130      	cbz	r0, 8005da8 <lfs_file_open+0x1c>
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <lfs_file_open+0x2c>)
 8005d9c:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <lfs_file_open+0x30>)
 8005d9e:	4808      	ldr	r0, [pc, #32]	; (8005dc0 <lfs_file_open+0x34>)
 8005da0:	f241 5167 	movw	r1, #5479	; 0x1567
 8005da4:	f001 fd24 	bl	80077f0 <__assert_func>
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8005da8:	4906      	ldr	r1, [pc, #24]	; (8005dc4 <lfs_file_open+0x38>)
 8005daa:	9100      	str	r1, [sp, #0]
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7ff fca4 	bl	80056fc <lfs_file_rawopencfg>
    err = lfs_file_rawopen(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8005db4:	b003      	add	sp, #12
 8005db6:	bd30      	pop	{r4, r5, pc}
 8005db8:	08009488 	.word	0x08009488
 8005dbc:	08009132 	.word	0x08009132
 8005dc0:	0800967e 	.word	0x0800967e
 8005dc4:	08009188 	.word	0x08009188

08005dc8 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8005dc8:	b508      	push	{r3, lr}
 8005dca:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005dcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005dce:	f7fc fd54 	bl	800287a <lfs_mlist_isopen>
 8005dd2:	b930      	cbnz	r0, 8005de2 <lfs_file_close+0x1a>
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <lfs_file_close+0x24>)
 8005dd6:	4a06      	ldr	r2, [pc, #24]	; (8005df0 <lfs_file_close+0x28>)
 8005dd8:	4806      	ldr	r0, [pc, #24]	; (8005df4 <lfs_file_close+0x2c>)
 8005dda:	f241 518b 	movw	r1, #5515	; 0x158b
 8005dde:	f001 fd07 	bl	80077f0 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8005de2:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8005de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawclose(lfs, file);
 8005de8:	f7ff bc6e 	b.w	80056c8 <lfs_file_rawclose>
 8005dec:	08009489 	.word	0x08009489
 8005df0:	08009140 	.word	0x08009140
 8005df4:	0800967e 	.word	0x0800967e

08005df8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005dfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
        void *buffer, lfs_size_t size) {
 8005e00:	460d      	mov	r5, r1
 8005e02:	4616      	mov	r6, r2
 8005e04:	461f      	mov	r7, r3
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005e06:	f7fc fd38 	bl	800287a <lfs_mlist_isopen>
 8005e0a:	b930      	cbnz	r0, 8005e1a <lfs_file_read+0x22>
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <lfs_file_read+0x54>)
 8005e0e:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <lfs_file_read+0x58>)
 8005e10:	f241 51ad 	movw	r1, #5549	; 0x15ad
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005e14:	480f      	ldr	r0, [pc, #60]	; (8005e54 <lfs_file_read+0x5c>)
 8005e16:	f001 fceb 	bl	80077f0 <__assert_func>
 8005e1a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005e1c:	07da      	lsls	r2, r3, #31
 8005e1e:	d404      	bmi.n	8005e2a <lfs_file_read+0x32>
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <lfs_file_read+0x60>)
 8005e22:	4a0e      	ldr	r2, [pc, #56]	; (8005e5c <lfs_file_read+0x64>)
 8005e24:	f640 41eb 	movw	r1, #3307	; 0xceb
 8005e28:	e7f4      	b.n	8005e14 <lfs_file_read+0x1c>
    if (file->flags & LFS_F_WRITING) {
 8005e2a:	039b      	lsls	r3, r3, #14
 8005e2c:	d407      	bmi.n	8005e3e <lfs_file_read+0x46>
    return lfs_file_flushedread(lfs, file, buffer, size);
 8005e2e:	463b      	mov	r3, r7
 8005e30:	4632      	mov	r2, r6
 8005e32:	4629      	mov	r1, r5
 8005e34:	4620      	mov	r0, r4
    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lfs_file_flushedread(lfs, file, buffer, size);
 8005e3a:	f7fd bcb9 	b.w	80037b0 <lfs_file_flushedread>
        int err = lfs_file_flush(lfs, file);
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f7ff f80a 	bl	8004e58 <lfs_file_flush>
        if (err) {
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0f2      	beq.n	8005e2e <lfs_file_read+0x36>
}
 8005e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e4c:	08009489 	.word	0x08009489
 8005e50:	0800914f 	.word	0x0800914f
 8005e54:	0800967e 	.word	0x0800967e
 8005e58:	080094ec 	.word	0x080094ec
 8005e5c:	080090f3 	.word	0x080090f3

08005e60 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005e64:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005e66:	f7fc fd08 	bl	800287a <lfs_mlist_isopen>
 8005e6a:	b930      	cbnz	r0, 8005e7a <lfs_file_write+0x1a>
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <lfs_file_write+0x24>)
 8005e6e:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <lfs_file_write+0x28>)
 8005e70:	4806      	ldr	r0, [pc, #24]	; (8005e8c <lfs_file_write+0x2c>)
 8005e72:	f241 51bf 	movw	r1, #5567	; 0x15bf
 8005e76:	f001 fcbb 	bl	80077f0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8005e7a:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8005e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8005e80:	f7ff bd5c 	b.w	800593c <lfs_file_rawwrite>
 8005e84:	08009489 	.word	0x08009489
 8005e88:	0800915d 	.word	0x0800915d
 8005e8c:	0800967e 	.word	0x0800967e

08005e90 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8005e94:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005e96:	f7fc fcf0 	bl	800287a <lfs_mlist_isopen>
 8005e9a:	b930      	cbnz	r0, 8005eaa <lfs_file_seek+0x1a>
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <lfs_file_seek+0x24>)
 8005e9e:	4a06      	ldr	r2, [pc, #24]	; (8005eb8 <lfs_file_seek+0x28>)
 8005ea0:	4806      	ldr	r0, [pc, #24]	; (8005ebc <lfs_file_seek+0x2c>)
 8005ea2:	f241 51d1 	movw	r1, #5585	; 0x15d1
 8005ea6:	f001 fca3 	bl	80077f0 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8005eaa:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8005eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8005eb0:	f7ff b852 	b.w	8004f58 <lfs_file_rawseek>
 8005eb4:	08009489 	.word	0x08009489
 8005eb8:	0800916c 	.word	0x0800916c
 8005ebc:	0800967e 	.word	0x0800967e

08005ec0 <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	b087      	sub	sp, #28
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8005ec6:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8005ec8:	460c      	mov	r4, r1
 8005eca:	4616      	mov	r6, r2
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8005ecc:	f7fc fcd5 	bl	800287a <lfs_mlist_isopen>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	b130      	cbz	r0, 8005ee2 <lfs_dir_open+0x22>
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <lfs_dir_open+0x98>)
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <lfs_dir_open+0x9c>)
 8005ed8:	4821      	ldr	r0, [pc, #132]	; (8005f60 <lfs_dir_open+0xa0>)
 8005eda:	f241 612e 	movw	r1, #5678	; 0x162e
 8005ede:	f001 fc87 	bl	80077f0 <__assert_func>
 8005ee2:	aa06      	add	r2, sp, #24
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	f842 6d0c 	str.w	r6, [r2, #-12]!
 8005eea:	f101 0608 	add.w	r6, r1, #8
 8005eee:	4631      	mov	r1, r6
 8005ef0:	f7fd faa0 	bl	8003434 <lfs_dir_find>
    if (tag < 0) {
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	db2a      	blt.n	8005f4e <lfs_dir_open+0x8e>
    return (tag & 0x7ff00000) >> 20;
 8005ef8:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d129      	bne.n	8005f52 <lfs_dir_open+0x92>
    return (tag & 0x000ffc00) >> 10;
 8005efe:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 8005f02:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005f06:	4298      	cmp	r0, r3
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	d115      	bne.n	8005f38 <lfs_dir_open+0x78>
        pair[0] = lfs->root[0];
 8005f0c:	6a2b      	ldr	r3, [r5, #32]
 8005f0e:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 8005f10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f12:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8005f14:	463a      	mov	r2, r7
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7fd fa55 	bl	80033c8 <lfs_dir_fetch>
    if (err) {
 8005f1e:	b9b0      	cbnz	r0, 8005f4e <lfs_dir_open+0x8e>
    dir->head[0] = dir->m.pair[0];
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8005f24:	68e3      	ldr	r3, [r4, #12]
 8005f26:	6323      	str	r3, [r4, #48]	; 0x30
    dir->type = LFS_TYPE_DIR;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
 8005f2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dir->id = 0;
 8005f2e:	80a0      	strh	r0, [r4, #4]
    dir->pos = 0;
 8005f30:	62a0      	str	r0, [r4, #40]	; 0x28
    mlist->next = lfs->mlist;
 8005f32:	6023      	str	r3, [r4, #0]
    lfs->mlist = mlist;
 8005f34:	62ac      	str	r4, [r5, #40]	; 0x28
 8005f36:	e00a      	b.n	8005f4e <lfs_dir_open+0x8e>
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <lfs_dir_open+0xa4>)
 8005f3a:	9700      	str	r7, [sp, #0]
 8005f3c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <lfs_dir_open+0xa8>)
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	f7fc ffbd 	bl	8002ec4 <lfs_dir_get>
        if (res < 0) {
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	dae2      	bge.n	8005f14 <lfs_dir_open+0x54>
    err = lfs_dir_rawopen(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8005f4e:	b007      	add	sp, #28
 8005f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LFS_ERR_NOTDIR;
 8005f52:	f06f 0013 	mvn.w	r0, #19
 8005f56:	e7fa      	b.n	8005f4e <lfs_dir_open+0x8e>
 8005f58:	08009305 	.word	0x08009305
 8005f5c:	0800917a 	.word	0x0800917a
 8005f60:	0800967e 	.word	0x0800967e
 8005f64:	20000008 	.word	0x20000008
 8005f68:	700ffc00 	.word	0x700ffc00

08005f6c <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8005f6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f6e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8005f72:	b11b      	cbz	r3, 8005f7c <lfs_dir_close+0x10>
        if (*p == mlist) {
 8005f74:	4299      	cmp	r1, r3
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	d102      	bne.n	8005f80 <lfs_dir_close+0x14>
            *p = (*p)->next;
 8005f7a:	6010      	str	r0, [r2, #0]
    err = lfs_dir_rawclose(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	4770      	bx	lr
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	e7f5      	b.n	8005f72 <lfs_dir_close+0x6>
	...

08005f88 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	4616      	mov	r6, r2
 8005f90:	4607      	mov	r7, r0
    memset(info, 0, sizeof(*info));
 8005f92:	f44f 7284 	mov.w	r2, #264	; 0x108
 8005f96:	2100      	movs	r1, #0
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f001 fcd1 	bl	8007940 <memset>
    if (dir->pos == 0) {
 8005f9e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005fa0:	b95c      	cbnz	r4, 8005fba <lfs_dir_read+0x32>
        info->type = LFS_TYPE_DIR;
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
 8005faa:	4921      	ldr	r1, [pc, #132]	; (8006030 <lfs_dir_read+0xa8>)
        strcpy(info->name, "..");
 8005fac:	f002 f875 	bl	800809a <strcpy>
    dir->pos += 1;
 8005fb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	62ab      	str	r3, [r5, #40]	; 0x28
    return true;
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	e037      	b.n	800602a <lfs_dir_read+0xa2>
    } else if (dir->pos == 1) {
 8005fba:	2c01      	cmp	r4, #1
 8005fbc:	d026      	beq.n	800600c <lfs_dir_read+0x84>
        strcpy(info->name, "/");
 8005fbe:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006038 <lfs_dir_read+0xb0>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8005fc2:	f105 0820 	add.w	r8, r5, #32
 8005fc6:	f105 0408 	add.w	r4, r5, #8
        if (dir->id == dir->m.count) {
 8005fca:	88aa      	ldrh	r2, [r5, #4]
 8005fcc:	8bab      	ldrh	r3, [r5, #28]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d108      	bne.n	8005fe4 <lfs_dir_read+0x5c>
            if (!dir->m.split) {
 8005fd2:	7fe8      	ldrb	r0, [r5, #31]
 8005fd4:	b348      	cbz	r0, 800602a <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f7fd f9f4 	bl	80033c8 <lfs_dir_fetch>
            if (err) {
 8005fe0:	bb18      	cbnz	r0, 800602a <lfs_dir_read+0xa2>
            dir->id = 0;
 8005fe2:	80a8      	strh	r0, [r5, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8005fe4:	88aa      	ldrh	r2, [r5, #4]
    if (id == 0x3ff) {
 8005fe6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d114      	bne.n	8006018 <lfs_dir_read+0x90>
        strcpy(info->name, "/");
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f106 0008 	add.w	r0, r6, #8
 8005ff4:	f002 f851 	bl	800809a <strcpy>
        info->type = LFS_TYPE_DIR;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	7033      	strb	r3, [r6, #0]
        return 0;
 8005ffc:	2000      	movs	r0, #0
        dir->id += 1;
 8005ffe:	88ab      	ldrh	r3, [r5, #4]
        if (err != LFS_ERR_NOENT) {
 8006000:	3002      	adds	r0, #2
        dir->id += 1;
 8006002:	f103 0301 	add.w	r3, r3, #1
 8006006:	80ab      	strh	r3, [r5, #4]
        if (err != LFS_ERR_NOENT) {
 8006008:	d0df      	beq.n	8005fca <lfs_dir_read+0x42>
 800600a:	e7d1      	b.n	8005fb0 <lfs_dir_read+0x28>
        info->type = LFS_TYPE_DIR;
 800600c:	4630      	mov	r0, r6
 800600e:	2302      	movs	r3, #2
 8006010:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
 8006014:	4907      	ldr	r1, [pc, #28]	; (8006034 <lfs_dir_read+0xac>)
 8006016:	e7c9      	b.n	8005fac <lfs_dir_read+0x24>
 8006018:	4633      	mov	r3, r6
 800601a:	4621      	mov	r1, r4
 800601c:	4638      	mov	r0, r7
 800601e:	f7fd faf1 	bl	8003604 <lfs_dir_getinfo.part.34>
        if (err && err != LFS_ERR_NOENT) {
 8006022:	2800      	cmp	r0, #0
 8006024:	d0eb      	beq.n	8005ffe <lfs_dir_read+0x76>
 8006026:	1c83      	adds	r3, r0, #2
 8006028:	d0e9      	beq.n	8005ffe <lfs_dir_read+0x76>
    err = lfs_dir_rawread(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 800602a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602e:	bf00      	nop
 8006030:	08009303 	.word	0x08009303
 8006034:	08009302 	.word	0x08009302
 8006038:	08009300 	.word	0x08009300

0800603c <lfs_flash_sync>:
 *
 * @return int : 0 if OK, != 0 if problem
 **********************************************************************/
static int lfs_flash_sync(const struct lfs_config *c){
	return 0;
}
 800603c:	2000      	movs	r0, #0
 800603e:	4770      	bx	lr

08006040 <lfs_flash_erase>:
	uint32_t addr = block * SECTOR_SIZE + LFS_BASE_ADDR;
 8006040:	4809      	ldr	r0, [pc, #36]	; (8006068 <lfs_flash_erase+0x28>)
 8006042:	eb00 4041 	add.w	r0, r0, r1, lsl #17
	int32_t ret = os_flash_erase(addr, addr + SECTOR_SIZE - 1);
 8006046:	f500 31ff 	add.w	r1, r0, #130560	; 0x1fe00
static int lfs_flash_erase(const struct lfs_config *c, lfs_block_t block){
 800604a:	b510      	push	{r4, lr}
	int32_t ret = os_flash_erase(addr, addr + SECTOR_SIZE - 1);
 800604c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8006050:	f7fc fb04 	bl	800265c <os_flash_erase>
	ASSERT(ret >= 0);
 8006054:	1e04      	subs	r4, r0, #0
 8006056:	da04      	bge.n	8006062 <lfs_flash_erase+0x22>
 8006058:	2271      	movs	r2, #113	; 0x71
 800605a:	4904      	ldr	r1, [pc, #16]	; (800606c <lfs_flash_erase+0x2c>)
 800605c:	4804      	ldr	r0, [pc, #16]	; (8006070 <lfs_flash_erase+0x30>)
 800605e:	f001 ffe7 	bl	8008030 <iprintf>
}
 8006062:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 8006066:	bd10      	pop	{r4, pc}
 8006068:	08060000 	.word	0x08060000
 800606c:	08009a16 	.word	0x08009a16
 8006070:	08008c28 	.word	0x08008c28

08006074 <lfs_flash_write>:
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 8006074:	4809      	ldr	r0, [pc, #36]	; (800609c <lfs_flash_write+0x28>)
static int lfs_flash_write(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8006076:	b510      	push	{r4, lr}
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 8006078:	4410      	add	r0, r2
 800607a:	eb00 4041 	add.w	r0, r0, r1, lsl #17
	int32_t ret = os_flash_write(addr, (uint8_t*)buffer, size);
 800607e:	9a02      	ldr	r2, [sp, #8]
 8006080:	4619      	mov	r1, r3
 8006082:	f7fc fa41 	bl	8002508 <os_flash_write>
	ASSERT(ret >= 0);
 8006086:	1e04      	subs	r4, r0, #0
 8006088:	da04      	bge.n	8006094 <lfs_flash_write+0x20>
 800608a:	2259      	movs	r2, #89	; 0x59
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <lfs_flash_write+0x2c>)
 800608e:	4805      	ldr	r0, [pc, #20]	; (80060a4 <lfs_flash_write+0x30>)
 8006090:	f001 ffce 	bl	8008030 <iprintf>
}
 8006094:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 8006098:	bd10      	pop	{r4, pc}
 800609a:	bf00      	nop
 800609c:	08060000 	.word	0x08060000
 80060a0:	08009a16 	.word	0x08009a16
 80060a4:	08008c28 	.word	0x08008c28

080060a8 <lfs_flash_read>:
static int lfs_flash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 80060a8:	b538      	push	{r3, r4, r5, lr}
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 80060aa:	4d0e      	ldr	r5, [pc, #56]	; (80060e4 <lfs_flash_read+0x3c>)
static int lfs_flash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 80060ac:	9c04      	ldr	r4, [sp, #16]
	uint32_t addr = block * SECTOR_SIZE + off + LFS_BASE_ADDR;
 80060ae:	442a      	add	r2, r5
 80060b0:	eb02 4041 	add.w	r0, r2, r1, lsl #17
	if(size == 0) return -5;
 80060b4:	b194      	cbz	r4, 80060dc <lfs_flash_read+0x34>
	if(addr < LFS_BASE_ADDR) return -5;
 80060b6:	4285      	cmp	r5, r0
 80060b8:	d810      	bhi.n	80060dc <lfs_flash_read+0x34>
	if(addr >= LFS_END_ADDR) return -5;
 80060ba:	4a0b      	ldr	r2, [pc, #44]	; (80060e8 <lfs_flash_read+0x40>)
 80060bc:	4290      	cmp	r0, r2
 80060be:	d20d      	bcs.n	80060dc <lfs_flash_read+0x34>
	int32_t ret = os_flash_read(addr, buffer, size);
 80060c0:	4622      	mov	r2, r4
 80060c2:	4619      	mov	r1, r3
 80060c4:	f7fc fab0 	bl	8002628 <os_flash_read>
	ASSERT(ret >= 0);
 80060c8:	1e04      	subs	r4, r0, #0
 80060ca:	da04      	bge.n	80060d6 <lfs_flash_read+0x2e>
 80060cc:	223e      	movs	r2, #62	; 0x3e
 80060ce:	4907      	ldr	r1, [pc, #28]	; (80060ec <lfs_flash_read+0x44>)
 80060d0:	4807      	ldr	r0, [pc, #28]	; (80060f0 <lfs_flash_read+0x48>)
 80060d2:	f001 ffad 	bl	8008030 <iprintf>
	return ret < 0 ? (int)ret : 0;
 80060d6:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
 80060da:	bd38      	pop	{r3, r4, r5, pc}
	if(size == 0) return -5;
 80060dc:	f06f 0004 	mvn.w	r0, #4
 80060e0:	e7fb      	b.n	80060da <lfs_flash_read+0x32>
 80060e2:	bf00      	nop
 80060e4:	08060000 	.word	0x08060000
 80060e8:	08100000 	.word	0x08100000
 80060ec:	08009a16 	.word	0x08009a16
 80060f0:	08008c28 	.word	0x08008c28

080060f4 <os_lfs_init>:
 * LFS Init
 *
 * @brief This function initializes the file system
 *
 **********************************************************************/
void os_lfs_init(){
 80060f4:	b510      	push	{r4, lr}

	/* Calculate sector size and number of sector using the pieces of information given by the linker
	 ------------------------------------------------*/
	lfs_cfg.block_size = SECTOR_SIZE;
 80060f6:	4c19      	ldr	r4, [pc, #100]	; (800615c <os_lfs_init+0x68>)
	lfs_cfg.block_count = (uint32_t)LFS_BASE_SIZE/SECTOR_SIZE;

	/* Try to mount the file system
	 ------------------------------------------------*/
    int err = lfs_mount(&lfs, &lfs_cfg);
 80060f8:	4819      	ldr	r0, [pc, #100]	; (8006160 <os_lfs_init+0x6c>)
	lfs_cfg.block_size = SECTOR_SIZE;
 80060fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060fe:	61e3      	str	r3, [r4, #28]
	lfs_cfg.block_count = (uint32_t)LFS_BASE_SIZE/SECTOR_SIZE;
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <os_lfs_init+0x70>)
    int err = lfs_mount(&lfs, &lfs_cfg);
 8006102:	4621      	mov	r1, r4
	lfs_cfg.block_count = (uint32_t)LFS_BASE_SIZE/SECTOR_SIZE;
 8006104:	0c5b      	lsrs	r3, r3, #17
 8006106:	6223      	str	r3, [r4, #32]
    int err = lfs_mount(&lfs, &lfs_cfg);
 8006108:	f7ff fcd0 	bl	8005aac <lfs_mount>
    if(err < 0){
 800610c:	1e03      	subs	r3, r0, #0
 800610e:	da23      	bge.n	8006158 <os_lfs_init+0x64>

    	PRINTLN("LFS mount fail %d", err);
 8006110:	22df      	movs	r2, #223	; 0xdf
 8006112:	4915      	ldr	r1, [pc, #84]	; (8006168 <os_lfs_init+0x74>)
 8006114:	4815      	ldr	r0, [pc, #84]	; (800616c <os_lfs_init+0x78>)
 8006116:	f001 ff8b 	bl	8008030 <iprintf>

    	/* Reformat if we can't mount the filesystem
    	 * this should only happen on the first boot
    	 ------------------------------------------------*/
        err = lfs_format(&lfs, &lfs_cfg);
 800611a:	4621      	mov	r1, r4
 800611c:	4810      	ldr	r0, [pc, #64]	; (8006160 <os_lfs_init+0x6c>)
 800611e:	f7ff fc61 	bl	80059e4 <lfs_format>
        if(err < 0){
 8006122:	1e03      	subs	r3, r0, #0
 8006124:	da04      	bge.n	8006130 <os_lfs_init+0x3c>
        	PRINTLN("LFS format fail %d", err);
 8006126:	22e6      	movs	r2, #230	; 0xe6
 8006128:	490f      	ldr	r1, [pc, #60]	; (8006168 <os_lfs_init+0x74>)
 800612a:	4811      	ldr	r0, [pc, #68]	; (8006170 <os_lfs_init+0x7c>)
 800612c:	f001 ff80 	bl	8008030 <iprintf>
        }

    	/* Try to mount the file system again
    	 ------------------------------------------------*/
        err = lfs_mount(&lfs, &lfs_cfg);
 8006130:	490a      	ldr	r1, [pc, #40]	; (800615c <os_lfs_init+0x68>)
 8006132:	480b      	ldr	r0, [pc, #44]	; (8006160 <os_lfs_init+0x6c>)
 8006134:	f7ff fcba 	bl	8005aac <lfs_mount>
        if(err < 0){
 8006138:	1e03      	subs	r3, r0, #0
 800613a:	da06      	bge.n	800614a <os_lfs_init+0x56>
        	PRINTLN("LFS mount fail %d", err);
 800613c:	22ed      	movs	r2, #237	; 0xed
 800613e:	490a      	ldr	r1, [pc, #40]	; (8006168 <os_lfs_init+0x74>)
 8006140:	480a      	ldr	r0, [pc, #40]	; (800616c <os_lfs_init+0x78>)
	 ------------------------------------------------*/
    else{
    	PRINTLN("LFS Mount OK");
    }

}
 8006142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        	PRINTLN("LFS mount fail %d", err);
 8006146:	f001 bf73 	b.w	8008030 <iprintf>
        	PRINTLN("LFS Mount OK");
 800614a:	22f1      	movs	r2, #241	; 0xf1
    	PRINTLN("LFS Mount OK");
 800614c:	4906      	ldr	r1, [pc, #24]	; (8006168 <os_lfs_init+0x74>)
 800614e:	4809      	ldr	r0, [pc, #36]	; (8006174 <os_lfs_init+0x80>)
}
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	PRINTLN("LFS Mount OK");
 8006154:	f001 bf6c 	b.w	8008030 <iprintf>
 8006158:	22f8      	movs	r2, #248	; 0xf8
 800615a:	e7f7      	b.n	800614c <os_lfs_init+0x58>
 800615c:	200001c8 	.word	0x200001c8
 8006160:	20014d64 	.word	0x20014d64
 8006164:	000a0000 	.word	0x000a0000
 8006168:	08009a16 	.word	0x08009a16
 800616c:	08009a20 	.word	0x08009a20
 8006170:	08009a3e 	.word	0x08009a3e
 8006174:	08009a5d 	.word	0x08009a5d

08006178 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8006178:	b530      	push	{r4, r5, lr}
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800617a:	4d0c      	ldr	r5, [pc, #48]	; (80061ac <lfs_crc+0x34>)
 800617c:	440a      	add	r2, r1
    for (size_t i = 0; i < size; i++) {
 800617e:	4291      	cmp	r1, r2
 8006180:	d100      	bne.n	8006184 <lfs_crc+0xc>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
 8006182:	bd30      	pop	{r4, r5, pc}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8006184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006188:	ea83 0400 	eor.w	r4, r3, r0
 800618c:	f004 040f 	and.w	r4, r4, #15
 8006190:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8006194:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8006198:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80061a4:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
 80061a8:	e7e9      	b.n	800617e <lfs_crc+0x6>
 80061aa:	bf00      	nop
 80061ac:	08009a78 	.word	0x08009a78

080061b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80061b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b6:	2214      	movs	r2, #20
 80061b8:	2100      	movs	r1, #0
 80061ba:	a807      	add	r0, sp, #28
 80061bc:	f001 fbc0 	bl	8007940 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061c0:	2400      	movs	r4, #0
 80061c2:	4b4c      	ldr	r3, [pc, #304]	; (80062f4 <MX_GPIO_Init+0x144>)
 80061c4:	9401      	str	r4, [sp, #4]
 80061c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80061c8:	4e4b      	ldr	r6, [pc, #300]	; (80062f8 <MX_GPIO_Init+0x148>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80061ca:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006310 <MX_GPIO_Init+0x160>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061ce:	f042 0210 	orr.w	r2, r2, #16
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
 80061d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d6:	f002 0210 	and.w	r2, r2, #16
 80061da:	9201      	str	r2, [sp, #4]
 80061dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061de:	9402      	str	r4, [sp, #8]
 80061e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e2:	f042 0204 	orr.w	r2, r2, #4
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
 80061e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ea:	f002 0204 	and.w	r2, r2, #4
 80061ee:	9202      	str	r2, [sp, #8]
 80061f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061f2:	9403      	str	r4, [sp, #12]
 80061f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
 80061fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006202:	9203      	str	r2, [sp, #12]
 8006204:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006206:	9404      	str	r4, [sp, #16]
 8006208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
 8006210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006212:	f002 0201 	and.w	r2, r2, #1
 8006216:	9204      	str	r2, [sp, #16]
 8006218:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800621a:	9405      	str	r4, [sp, #20]
 800621c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621e:	f042 0202 	orr.w	r2, r2, #2
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
 8006224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006226:	f002 0202 	and.w	r2, r2, #2
 800622a:	9205      	str	r2, [sp, #20]
 800622c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800622e:	9406      	str	r4, [sp, #24]
 8006230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006232:	f042 0208 	orr.w	r2, r2, #8
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800623e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006240:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8006242:	4630      	mov	r0, r6
 8006244:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006248:	2503      	movs	r5, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800624a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800624c:	f000 fd4e 	bl	8006cec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006250:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006254:	a907      	add	r1, sp, #28
 8006256:	4829      	ldr	r0, [pc, #164]	; (80062fc <MX_GPIO_Init+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006258:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800625a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800625e:	f000 fc65 	bl	8006b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8006262:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006266:	a907      	add	r1, sp, #28
 8006268:	4825      	ldr	r0, [pc, #148]	; (8006300 <MX_GPIO_Init+0x150>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800626c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006270:	f000 fc5c 	bl	8006b2c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006274:	a907      	add	r1, sp, #28
 8006276:	4823      	ldr	r0, [pc, #140]	; (8006304 <MX_GPIO_Init+0x154>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006278:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800627a:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800627e:	f000 fc55 	bl	8006b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006282:	4b21      	ldr	r3, [pc, #132]	; (8006308 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006284:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006286:	2701      	movs	r7, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006288:	a907      	add	r1, sp, #28
 800628a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800628c:	e9cd 7307 	strd	r7, r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006290:	f000 fc4c 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8006294:	f649 73fe 	movw	r3, #40958	; 0x9ffe
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006298:	a907      	add	r1, sp, #28
 800629a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800629c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a2:	f000 fc43 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80062a6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062aa:	a907      	add	r1, sp, #28
 80062ac:	4817      	ldr	r0, [pc, #92]	; (800630c <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062b0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b4:	f000 fc3a 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80062b8:	f640 73ff 	movw	r3, #4095	; 0xfff
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062bc:	a907      	add	r1, sp, #28
 80062be:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062c0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062c6:	f000 fc31 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80062ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062ce:	a907      	add	r1, sp, #28
 80062d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062d2:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062da:	f000 fc27 	bl	8006b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80062de:	4622      	mov	r2, r4
 80062e0:	210f      	movs	r1, #15
 80062e2:	2006      	movs	r0, #6
 80062e4:	f000 fa92 	bl	800680c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80062e8:	2006      	movs	r0, #6
 80062ea:	f000 fac3 	bl	8006874 <HAL_NVIC_EnableIRQ>

}
 80062ee:	b00c      	add	sp, #48	; 0x30
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f4:	40023800 	.word	0x40023800
 80062f8:	40020c00 	.word	0x40020c00
 80062fc:	40021000 	.word	0x40021000
 8006300:	40020800 	.word	0x40020800
 8006304:	40021c00 	.word	0x40021c00
 8006308:	10110000 	.word	0x10110000
 800630c:	40020400 	.word	0x40020400
 8006310:	40020000 	.word	0x40020000

08006314 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8006314:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006316:	2414      	movs	r4, #20
{
 8006318:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800631a:	4622      	mov	r2, r4
 800631c:	2100      	movs	r1, #0
 800631e:	a809      	add	r0, sp, #36	; 0x24
 8006320:	f001 fb0e 	bl	8007940 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006324:	4622      	mov	r2, r4
 8006326:	2100      	movs	r1, #0
 8006328:	a803      	add	r0, sp, #12
 800632a:	f001 fb09 	bl	8007940 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800632e:	2500      	movs	r5, #0
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <SystemClock_Config+0x88>)
 8006332:	9501      	str	r5, [sp, #4]
 8006334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006346:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <SystemClock_Config+0x8c>)
 8006348:	9502      	str	r5, [sp, #8]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006358:	9302      	str	r3, [sp, #8]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800635a:	2201      	movs	r2, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800635c:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800635e:	2310      	movs	r3, #16
 8006360:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 84;
 8006364:	2108      	movs	r1, #8
 8006366:	2354      	movs	r3, #84	; 0x54
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006368:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLN = 84;
 800636a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800636e:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8006370:	2307      	movs	r3, #7
 8006372:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006374:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006376:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800637a:	9412      	str	r4, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800637c:	f000 fcc8 	bl	8006d10 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006380:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006382:	e9cd 3403 	strd	r3, r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006386:	4621      	mov	r1, r4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800638c:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800638e:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006390:	e9cd 3506 	strd	r3, r5, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006394:	f000 fe90 	bl	80070b8 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
}
 8006398:	b015      	add	sp, #84	; 0x54
 800639a:	bd30      	pop	{r4, r5, pc}
 800639c:	40023800 	.word	0x40023800
 80063a0:	40007000 	.word	0x40007000

080063a4 <main>:
{
 80063a4:	b507      	push	{r0, r1, r2, lr}
	HAL_Init();
 80063a6:	f000 f9f3 	bl	8006790 <HAL_Init>
	SystemClock_Config();
 80063aa:	f7ff ffb3 	bl	8006314 <SystemClock_Config>
	MX_GPIO_Init();
 80063ae:	f7ff feff 	bl	80061b0 <MX_GPIO_Init>
	MX_TIM13_Init();
 80063b2:	f000 f8f9 	bl	80065a8 <MX_TIM13_Init>
	MX_USART3_UART_Init();
 80063b6:	f000 f937 	bl	8006628 <MX_USART3_UART_Init>
	cli_init();
 80063ba:	f7fa ff03 	bl	80011c4 <cli_init>
	PRINTLN("Periph Init Finished");
 80063be:	2260      	movs	r2, #96	; 0x60
 80063c0:	490e      	ldr	r1, [pc, #56]	; (80063fc <main+0x58>)
 80063c2:	480f      	ldr	r0, [pc, #60]	; (8006400 <main+0x5c>)
 80063c4:	f001 fe34 	bl	8008030 <iprintf>
	ASSERT(os_init("main", 10, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 80063c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063cc:	9200      	str	r2, [sp, #0]
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <main+0x60>)
 80063d0:	480d      	ldr	r0, [pc, #52]	; (8006408 <main+0x64>)
 80063d2:	210a      	movs	r1, #10
 80063d4:	f7fb f954 	bl	8001680 <os_init>
 80063d8:	b120      	cbz	r0, 80063e4 <main+0x40>
 80063da:	2261      	movs	r2, #97	; 0x61
 80063dc:	4907      	ldr	r1, [pc, #28]	; (80063fc <main+0x58>)
 80063de:	480b      	ldr	r0, [pc, #44]	; (800640c <main+0x68>)
 80063e0:	f001 fe26 	bl	8008030 <iprintf>
	os_scheduler_start();
 80063e4:	f7fb fdf4 	bl	8001fd0 <os_scheduler_start>
	PRINTLN("Init OS finished");
 80063e8:	2264      	movs	r2, #100	; 0x64
 80063ea:	4904      	ldr	r1, [pc, #16]	; (80063fc <main+0x58>)
 80063ec:	4808      	ldr	r0, [pc, #32]	; (8006410 <main+0x6c>)
 80063ee:	f001 fe1f 	bl	8008030 <iprintf>
	os_lfs_init();
 80063f2:	f7ff fe7f 	bl	80060f4 <os_lfs_init>
		cli_process();
 80063f6:	f7fa fef1 	bl	80011dc <cli_process>
 80063fa:	e7fc      	b.n	80063f6 <main+0x52>
 80063fc:	08009ab8 	.word	0x08009ab8
 8006400:	08009abf 	.word	0x08009abf
 8006404:	08009ae0 	.word	0x08009ae0
 8006408:	08008c0d 	.word	0x08008c0d
 800640c:	08008c28 	.word	0x08008c28
 8006410:	08009ae5 	.word	0x08009ae5

08006414 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006414:	4770      	bx	lr
	...

08006418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006418:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641a:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <HAL_MspInit+0x7c>)
 800641c:	2400      	movs	r4, #0
 800641e:	9400      	str	r4, [sp, #0]
 8006420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006426:	645a      	str	r2, [r3, #68]	; 0x44
 8006428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800642e:	9200      	str	r2, [sp, #0]
 8006430:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	9401      	str	r4, [sp, #4]
 8006434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006442:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8006444:	4622      	mov	r2, r4
 8006446:	210f      	movs	r1, #15
 8006448:	f06f 000b 	mvn.w	r0, #11
  __HAL_RCC_PWR_CLK_ENABLE();
 800644c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 800644e:	f000 f9dd 	bl	800680c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8006452:	4622      	mov	r2, r4
 8006454:	210f      	movs	r1, #15
 8006456:	f06f 000a 	mvn.w	r0, #10
 800645a:	f000 f9d7 	bl	800680c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800645e:	4622      	mov	r2, r4
 8006460:	210f      	movs	r1, #15
 8006462:	f06f 0009 	mvn.w	r0, #9
 8006466:	f000 f9d1 	bl	800680c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800646a:	4622      	mov	r2, r4
 800646c:	210f      	movs	r1, #15
 800646e:	f06f 0004 	mvn.w	r0, #4
 8006472:	f000 f9cb 	bl	800680c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8006476:	4622      	mov	r2, r4
 8006478:	210f      	movs	r1, #15
 800647a:	f06f 0003 	mvn.w	r0, #3
 800647e:	f000 f9c5 	bl	800680c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006482:	4622      	mov	r2, r4
 8006484:	210f      	movs	r1, #15
 8006486:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800648a:	b002      	add	sp, #8
 800648c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006490:	f000 b9bc 	b.w	800680c <HAL_NVIC_SetPriority>
 8006494:	40023800 	.word	0x40023800

08006498 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006498:	4770      	bx	lr

0800649a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800649a:	e7fe      	b.n	800649a <HardFault_Handler>

0800649c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800649c:	e7fe      	b.n	800649c <MemManage_Handler>

0800649e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800649e:	e7fe      	b.n	800649e <BusFault_Handler>

080064a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064a0:	e7fe      	b.n	80064a0 <UsageFault_Handler>

080064a2 <SVC_Handler>:
 80064a2:	4770      	bx	lr

080064a4 <DebugMon_Handler>:
 80064a4:	4770      	bx	lr

080064a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064a6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064a8:	f000 f98c 	bl	80067c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 80064ac:	2001      	movs	r0, #1
  /* USER CODE END SysTick_IRQn 1 */
}
 80064ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  os_tick(1);
 80064b2:	f7fb bfd7 	b.w	8002464 <os_tick>

080064b6 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80064b6:	2001      	movs	r0, #1
 80064b8:	f000 bc1e 	b.w	8006cf8 <HAL_GPIO_EXTI_IRQHandler>

080064bc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80064bc:	4801      	ldr	r0, [pc, #4]	; (80064c4 <USART3_IRQHandler+0x8>)
 80064be:	f001 b8ed 	b.w	800769c <HAL_UART_IRQHandler>
 80064c2:	bf00      	nop
 80064c4:	20014e1c 	.word	0x20014e1c

080064c8 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;


int __io_putchar(int ch){
 80064c8:	b507      	push	{r0, r1, r2, lr}
 80064ca:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80064cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
int __io_putchar(int ch){
 80064d0:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80064d4:	2201      	movs	r2, #1
 80064d6:	4803      	ldr	r0, [pc, #12]	; (80064e4 <__io_putchar+0x1c>)
 80064d8:	f001 f820 	bl	800751c <HAL_UART_Transmit>
	return 0;
}
 80064dc:	2000      	movs	r0, #0
 80064de:	b003      	add	sp, #12
 80064e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80064e4:	20014e1c 	.word	0x20014e1c

080064e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80064e8:	2001      	movs	r0, #1
 80064ea:	4770      	bx	lr

080064ec <_kill>:

int _kill(int pid, int sig)
{
 80064ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80064ee:	f001 f99d 	bl	800782c <__errno>
 80064f2:	2316      	movs	r3, #22
 80064f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	bd08      	pop	{r3, pc}

080064fc <_exit>:

void _exit (int status)
{
 80064fc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80064fe:	f001 f995 	bl	800782c <__errno>
 8006502:	2316      	movs	r3, #22
 8006504:	6003      	str	r3, [r0, #0]
 8006506:	e7fe      	b.n	8006506 <_exit+0xa>

08006508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	460e      	mov	r6, r1
 800650c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800650e:	460c      	mov	r4, r1
 8006510:	1ba3      	subs	r3, r4, r6
 8006512:	429d      	cmp	r5, r3
 8006514:	dc01      	bgt.n	800651a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8006516:	4628      	mov	r0, r5
 8006518:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800651a:	f3af 8000 	nop.w
 800651e:	f804 0b01 	strb.w	r0, [r4], #1
 8006522:	e7f5      	b.n	8006510 <_read+0x8>

08006524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	460e      	mov	r6, r1
 8006528:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800652a:	460c      	mov	r4, r1
 800652c:	1ba3      	subs	r3, r4, r6
 800652e:	429d      	cmp	r5, r3
 8006530:	dc01      	bgt.n	8006536 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8006532:	4628      	mov	r0, r5
 8006534:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8006536:	f814 0b01 	ldrb.w	r0, [r4], #1
 800653a:	f7ff ffc5 	bl	80064c8 <__io_putchar>
 800653e:	e7f5      	b.n	800652c <_write+0x8>

08006540 <_close>:

int _close(int file)
{
	return -1;
}
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	4770      	bx	lr

08006546 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800654a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800654c:	2000      	movs	r0, #0
 800654e:	4770      	bx	lr

08006550 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006550:	2001      	movs	r0, #1
 8006552:	4770      	bx	lr

08006554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006554:	2000      	movs	r0, #0
 8006556:	4770      	bx	lr

08006558 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006558:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <_sbrk+0x2c>)
 800655c:	6819      	ldr	r1, [r3, #0]
{
 800655e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8006560:	b909      	cbnz	r1, 8006566 <_sbrk+0xe>
		heap_end = &end;
 8006562:	4909      	ldr	r1, [pc, #36]	; (8006588 <_sbrk+0x30>)
 8006564:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8006566:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006568:	4669      	mov	r1, sp
 800656a:	4402      	add	r2, r0
 800656c:	428a      	cmp	r2, r1
 800656e:	d906      	bls.n	800657e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8006570:	f001 f95c 	bl	800782c <__errno>
 8006574:	230c      	movs	r3, #12
 8006576:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800657c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800657e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8006580:	e7fc      	b.n	800657c <_sbrk+0x24>
 8006582:	bf00      	nop
 8006584:	20014d18 	.word	0x20014d18
 8006588:	20014e88 	.word	0x20014e88

0800658c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <SystemInit+0x18>)
 800658e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006592:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800659a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800659e:	609a      	str	r2, [r3, #8]
#endif
}
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <MX_TIM13_Init>:

/* TIM13 init function */
void MX_TIM13_Init(void)
{

  htim13.Instance = TIM13;
 80065a8:	480d      	ldr	r0, [pc, #52]	; (80065e0 <MX_TIM13_Init+0x38>)
  htim13.Init.Prescaler = 0;
 80065aa:	4a0e      	ldr	r2, [pc, #56]	; (80065e4 <MX_TIM13_Init+0x3c>)
{
 80065ac:	b508      	push	{r3, lr}
  htim13.Init.Prescaler = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e9c0 2300 	strd	r2, r3, [r0]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim13.Init.Period = 0xFFFF;
 80065b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065b8:	6083      	str	r3, [r0, #8]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065ba:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065be:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80065c0:	f000 fe9c 	bl	80072fc <HAL_TIM_Base_Init>
 80065c4:	b108      	cbz	r0, 80065ca <MX_TIM13_Init+0x22>
  {
    Error_Handler();
 80065c6:	f7ff ff25 	bl	8006414 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 80065ca:	2108      	movs	r1, #8
 80065cc:	4804      	ldr	r0, [pc, #16]	; (80065e0 <MX_TIM13_Init+0x38>)
 80065ce:	f000 feaf 	bl	8007330 <HAL_TIM_OnePulse_Init>
 80065d2:	b118      	cbz	r0, 80065dc <MX_TIM13_Init+0x34>
  {
    Error_Handler();
  }

}
 80065d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80065d8:	f7ff bf1c 	b.w	8006414 <Error_Handler>
}
 80065dc:	bd08      	pop	{r3, pc}
 80065de:	bf00      	nop
 80065e0:	20014ddc 	.word	0x20014ddc
 80065e4:	40001c00 	.word	0x40001c00

080065e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM13)
 80065e8:	6802      	ldr	r2, [r0, #0]
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_TIM_Base_MspInit+0x28>)
 80065ec:	429a      	cmp	r2, r3
{
 80065ee:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM13)
 80065f0:	d10b      	bne.n	800660a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <HAL_TIM_Base_MspInit+0x2c>)
 80065f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800660a:	b002      	add	sp, #8
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40001c00 	.word	0x40001c00
 8006614:	40023800 	.word	0x40023800

08006618 <HAL_UART_RxCpltCallback>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart == &USART_CLI){
 8006618:	4b02      	ldr	r3, [pc, #8]	; (8006624 <HAL_UART_RxCpltCallback+0xc>)
 800661a:	4283      	cmp	r3, r0
 800661c:	d101      	bne.n	8006622 <HAL_UART_RxCpltCallback+0xa>
		cli_rcv_char_cb_irq();
 800661e:	f7fa bdbd 	b.w	800119c <cli_rcv_char_cb_irq>
	}
}
 8006622:	4770      	bx	lr
 8006624:	20014e1c 	.word	0x20014e1c

08006628 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8006628:	480b      	ldr	r0, [pc, #44]	; (8006658 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800662a:	4a0c      	ldr	r2, [pc, #48]	; (800665c <MX_USART3_UART_Init+0x34>)
{
 800662c:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 800662e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006632:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006636:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006638:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800663a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 800663e:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006640:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006644:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006646:	f000 ff3b 	bl	80074c0 <HAL_UART_Init>
 800664a:	b118      	cbz	r0, 8006654 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800664c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006650:	f7ff bee0 	b.w	8006414 <Error_Handler>
}
 8006654:	bd08      	pop	{r3, pc}
 8006656:	bf00      	nop
 8006658:	20014e1c 	.word	0x20014e1c
 800665c:	40004800 	.word	0x40004800

08006660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006662:	4604      	mov	r4, r0
 8006664:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006666:	2214      	movs	r2, #20
 8006668:	2100      	movs	r1, #0
 800666a:	a803      	add	r0, sp, #12
 800666c:	f001 f968 	bl	8007940 <memset>
  if(uartHandle->Instance==USART3)
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	4b1e      	ldr	r3, [pc, #120]	; (80066ec <HAL_UART_MspInit+0x8c>)
 8006674:	429a      	cmp	r2, r3
 8006676:	d137      	bne.n	80066e8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006678:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800667c:	2400      	movs	r4, #0
 800667e:	9401      	str	r4, [sp, #4]
 8006680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006682:	481b      	ldr	r0, [pc, #108]	; (80066f0 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006684:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
 800668a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800668c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006694:	9402      	str	r4, [sp, #8]
 8006696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006698:	f042 0204 	orr.w	r2, r2, #4
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a8:	2702      	movs	r7, #2
 80066aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066ae:	2603      	movs	r6, #3
 80066b0:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066b8:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066bc:	f000 fa36 	bl	8006b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80066c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066ca:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066cc:	4808      	ldr	r0, [pc, #32]	; (80066f0 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066ce:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d0:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066d4:	f000 fa2a 	bl	8006b2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 80066d8:	2027      	movs	r0, #39	; 0x27
 80066da:	4622      	mov	r2, r4
 80066dc:	210f      	movs	r1, #15
 80066de:	f000 f895 	bl	800680c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80066e2:	2027      	movs	r0, #39	; 0x27
 80066e4:	f000 f8c6 	bl	8006874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80066e8:	b009      	add	sp, #36	; 0x24
 80066ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ec:	40004800 	.word	0x40004800
 80066f0:	40020800 	.word	0x40020800

080066f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80066f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800672c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80066f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80066fa:	e003      	b.n	8006704 <LoopCopyDataInit>

080066fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80066fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006700:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006702:	3104      	adds	r1, #4

08006704 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006704:	480b      	ldr	r0, [pc, #44]	; (8006734 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006708:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800670a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800670c:	d3f6      	bcc.n	80066fc <CopyDataInit>
  ldr  r2, =_sbss
 800670e:	4a0b      	ldr	r2, [pc, #44]	; (800673c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006710:	e002      	b.n	8006718 <LoopFillZerobss>

08006712 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006712:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006714:	f842 3b04 	str.w	r3, [r2], #4

08006718 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006718:	4b09      	ldr	r3, [pc, #36]	; (8006740 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800671a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800671c:	d3f9      	bcc.n	8006712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800671e:	f7ff ff35 	bl	800658c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006722:	f001 f89b 	bl	800785c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006726:	f7ff fe3d 	bl	80063a4 <main>
  bx  lr    
 800672a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800672c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006730:	08009d08 	.word	0x08009d08
  ldr  r0, =_sdata
 8006734:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006738:	200003f0 	.word	0x200003f0
  ldr  r2, =_sbss
 800673c:	200003f0 	.word	0x200003f0
  ldr  r3, = _ebss
 8006740:	20014e84 	.word	0x20014e84

08006744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006744:	e7fe      	b.n	8006744 <ADC_IRQHandler>
	...

08006748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006748:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800674a:	4a0e      	ldr	r2, [pc, #56]	; (8006784 <HAL_InitTick+0x3c>)
 800674c:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <HAL_InitTick+0x40>)
{
 800674e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006750:	7818      	ldrb	r0, [r3, #0]
 8006752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006756:	fbb3 f3f0 	udiv	r3, r3, r0
 800675a:	6810      	ldr	r0, [r2, #0]
 800675c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006760:	f000 f896 	bl	8006890 <HAL_SYSTICK_Config>
 8006764:	4604      	mov	r4, r0
 8006766:	b958      	cbnz	r0, 8006780 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006768:	2d0f      	cmp	r5, #15
 800676a:	d809      	bhi.n	8006780 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800676c:	4602      	mov	r2, r0
 800676e:	4629      	mov	r1, r5
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	f000 f84a 	bl	800680c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <HAL_InitTick+0x44>)
 800677a:	4620      	mov	r0, r4
 800677c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800677e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006780:	2001      	movs	r0, #1
 8006782:	e7fc      	b.n	800677e <HAL_InitTick+0x36>
 8006784:	20000214 	.word	0x20000214
 8006788:	20000218 	.word	0x20000218
 800678c:	2000021c 	.word	0x2000021c

08006790 <HAL_Init>:
{
 8006790:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_Init+0x30>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800679a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067aa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067ac:	2003      	movs	r0, #3
 80067ae:	f000 f81b 	bl	80067e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80067b2:	200f      	movs	r0, #15
 80067b4:	f7ff ffc8 	bl	8006748 <HAL_InitTick>
  HAL_MspInit();
 80067b8:	f7ff fe2e 	bl	8006418 <HAL_MspInit>
}
 80067bc:	2000      	movs	r0, #0
 80067be:	bd08      	pop	{r3, pc}
 80067c0:	40023c00 	.word	0x40023c00

080067c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80067c4:	4a03      	ldr	r2, [pc, #12]	; (80067d4 <HAL_IncTick+0x10>)
 80067c6:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <HAL_IncTick+0x14>)
 80067c8:	6811      	ldr	r1, [r2, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	440b      	add	r3, r1
 80067ce:	6013      	str	r3, [r2, #0]
}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20014e5c 	.word	0x20014e5c
 80067d8:	20000218 	.word	0x20000218

080067dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80067dc:	4b01      	ldr	r3, [pc, #4]	; (80067e4 <HAL_GetTick+0x8>)
 80067de:	6818      	ldr	r0, [r3, #0]
}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20014e5c 	.word	0x20014e5c

080067e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067e8:	4a07      	ldr	r2, [pc, #28]	; (8006808 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80067ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067f8:	0200      	lsls	r0, r0, #8
 80067fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8006802:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006804:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006806:	4770      	bx	lr
 8006808:	e000ed00 	.word	0xe000ed00

0800680c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800680c:	4b17      	ldr	r3, [pc, #92]	; (800686c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800680e:	b570      	push	{r4, r5, r6, lr}
 8006810:	68dc      	ldr	r4, [r3, #12]
 8006812:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006816:	f1c4 0507 	rsb	r5, r4, #7
 800681a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006820:	bf28      	it	cs
 8006822:	2504      	movcs	r5, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006824:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006828:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800682a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800682e:	bf8c      	ite	hi
 8006830:	3c03      	subhi	r4, #3
 8006832:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006834:	ea21 0303 	bic.w	r3, r1, r3
 8006838:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800683a:	fa06 f404 	lsl.w	r4, r6, r4
 800683e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8006842:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006844:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006848:	bfa8      	it	ge
 800684a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800684e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006852:	bfbc      	itt	lt
 8006854:	f000 000f 	andlt.w	r0, r0, #15
 8006858:	4a05      	ldrlt	r2, [pc, #20]	; (8006870 <HAL_NVIC_SetPriority+0x64>)
 800685a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800685c:	bfaa      	itet	ge
 800685e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006862:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006864:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	bf00      	nop
 800686c:	e000ed00 	.word	0xe000ed00
 8006870:	e000ed14 	.word	0xe000ed14

08006874 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006874:	2800      	cmp	r0, #0
 8006876:	db08      	blt.n	800688a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006878:	0942      	lsrs	r2, r0, #5
 800687a:	2301      	movs	r3, #1
 800687c:	f000 001f 	and.w	r0, r0, #31
 8006880:	fa03 f000 	lsl.w	r0, r3, r0
 8006884:	4b01      	ldr	r3, [pc, #4]	; (800688c <HAL_NVIC_EnableIRQ+0x18>)
 8006886:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800688a:	4770      	bx	lr
 800688c:	e000e100 	.word	0xe000e100

08006890 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006890:	3801      	subs	r0, #1
 8006892:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006896:	d20a      	bcs.n	80068ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689a:	4a07      	ldr	r2, [pc, #28]	; (80068b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800689c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689e:	21f0      	movs	r1, #240	; 0xf0
 80068a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80068ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	e000e010 	.word	0xe000e010
 80068b8:	e000ed00 	.word	0xe000ed00

080068bc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d003      	beq.n	80068cc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80068c8:	2001      	movs	r0, #1
 80068ca:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068cc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80068ce:	2305      	movs	r3, #5
 80068d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80068d4:	6813      	ldr	r3, [r2, #0]
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068dc:	2000      	movs	r0, #0
}
 80068de:	4770      	bx	lr

080068e0 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068e0:	4909      	ldr	r1, [pc, #36]	; (8006908 <FLASH_Program_DoubleWord+0x28>)
{
 80068e2:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068e4:	690c      	ldr	r4, [r1, #16]
 80068e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80068ea:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80068ec:	690c      	ldr	r4, [r1, #16]
 80068ee:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80068f2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068f4:	690c      	ldr	r4, [r1, #16]
 80068f6:	f044 0401 	orr.w	r4, r4, #1
 80068fa:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80068fc:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80068fe:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006902:	6043      	str	r3, [r0, #4]
}
 8006904:	bd10      	pop	{r4, pc}
 8006906:	bf00      	nop
 8006908:	40023c00 	.word	0x40023c00

0800690c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800690c:	4b07      	ldr	r3, [pc, #28]	; (800692c <FLASH_Program_Word+0x20>)
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006914:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800691c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	f042 0201 	orr.w	r2, r2, #1
 8006924:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8006926:	6001      	str	r1, [r0, #0]
}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40023c00 	.word	0x40023c00

08006930 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <FLASH_Program_HalfWord+0x20>)
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006938:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006940:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800694a:	8001      	strh	r1, [r0, #0]
}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40023c00 	.word	0x40023c00

08006954 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006954:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <FLASH_SetErrorCode+0x6c>)
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	06d2      	lsls	r2, r2, #27
 800695a:	d506      	bpl.n	800696a <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800695c:	4919      	ldr	r1, [pc, #100]	; (80069c4 <FLASH_SetErrorCode+0x70>)
 800695e:	69ca      	ldr	r2, [r1, #28]
 8006960:	f042 0210 	orr.w	r2, r2, #16
 8006964:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006966:	2210      	movs	r2, #16
 8006968:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	0690      	lsls	r0, r2, #26
 800696e:	d506      	bpl.n	800697e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006970:	4914      	ldr	r1, [pc, #80]	; (80069c4 <FLASH_SetErrorCode+0x70>)
 8006972:	69ca      	ldr	r2, [r1, #28]
 8006974:	f042 0208 	orr.w	r2, r2, #8
 8006978:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800697a:	2220      	movs	r2, #32
 800697c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800697e:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <FLASH_SetErrorCode+0x6c>)
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	0651      	lsls	r1, r2, #25
 8006984:	d506      	bpl.n	8006994 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006986:	490f      	ldr	r1, [pc, #60]	; (80069c4 <FLASH_SetErrorCode+0x70>)
 8006988:	69ca      	ldr	r2, [r1, #28]
 800698a:	f042 0204 	orr.w	r2, r2, #4
 800698e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006990:	2240      	movs	r2, #64	; 0x40
 8006992:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	0612      	lsls	r2, r2, #24
 8006998:	d506      	bpl.n	80069a8 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800699a:	490a      	ldr	r1, [pc, #40]	; (80069c4 <FLASH_SetErrorCode+0x70>)
 800699c:	69ca      	ldr	r2, [r1, #28]
 800699e:	f042 0202 	orr.w	r2, r2, #2
 80069a2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80069a4:	2280      	movs	r2, #128	; 0x80
 80069a6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80069a8:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <FLASH_SetErrorCode+0x6c>)
 80069aa:	68d3      	ldr	r3, [r2, #12]
 80069ac:	079b      	lsls	r3, r3, #30
 80069ae:	d506      	bpl.n	80069be <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80069b0:	4904      	ldr	r1, [pc, #16]	; (80069c4 <FLASH_SetErrorCode+0x70>)
 80069b2:	69cb      	ldr	r3, [r1, #28]
 80069b4:	f043 0320 	orr.w	r3, r3, #32
 80069b8:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80069ba:	2302      	movs	r3, #2
 80069bc:	60d3      	str	r3, [r2, #12]
  }
}
 80069be:	4770      	bx	lr
 80069c0:	40023c00 	.word	0x40023c00
 80069c4:	20014e60 	.word	0x20014e60

080069c8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <HAL_FLASH_Unlock+0x1c>)
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80069ce:	bfbf      	itttt	lt
 80069d0:	4a05      	ldrlt	r2, [pc, #20]	; (80069e8 <HAL_FLASH_Unlock+0x20>)
 80069d2:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80069d4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80069d8:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80069da:	bfba      	itte	lt
 80069dc:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	0fc0      	lsrlt	r0, r0, #31
 80069e0:	2000      	movge	r0, #0
}
 80069e2:	4770      	bx	lr
 80069e4:	40023c00 	.word	0x40023c00
 80069e8:	45670123 	.word	0x45670123

080069ec <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80069ec:	4a03      	ldr	r2, [pc, #12]	; (80069fc <HAL_FLASH_Lock+0x10>)
 80069ee:	6913      	ldr	r3, [r2, #16]
 80069f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	6113      	str	r3, [r2, #16]
}
 80069f6:	2000      	movs	r0, #0
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40023c00 	.word	0x40023c00

08006a00 <FLASH_WaitForLastOperation>:
{ 
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006a04:	4c12      	ldr	r4, [pc, #72]	; (8006a50 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a06:	2200      	movs	r2, #0
{ 
 8006a08:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a0a:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8006a0c:	f7ff fee6 	bl	80067dc <HAL_GetTick>
 8006a10:	4626      	mov	r6, r4
 8006a12:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006a14:	68e3      	ldr	r3, [r4, #12]
 8006a16:	03da      	lsls	r2, r3, #15
 8006a18:	d40c      	bmi.n	8006a34 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a1e:	bf44      	itt	mi
 8006a20:	2301      	movmi	r3, #1
 8006a22:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006a24:	68f0      	ldr	r0, [r6, #12]
 8006a26:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8006a2a:	d007      	beq.n	8006a3c <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8006a2c:	f7ff ff92 	bl	8006954 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006a30:	2001      	movs	r0, #1
 8006a32:	e003      	b.n	8006a3c <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8006a34:	1c69      	adds	r1, r5, #1
 8006a36:	d0ed      	beq.n	8006a14 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006a38:	b90d      	cbnz	r5, 8006a3e <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8006a3a:	2003      	movs	r0, #3
}  
 8006a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006a3e:	f7ff fecd 	bl	80067dc <HAL_GetTick>
 8006a42:	1bc0      	subs	r0, r0, r7
 8006a44:	42a8      	cmp	r0, r5
 8006a46:	d9e5      	bls.n	8006a14 <FLASH_WaitForLastOperation+0x14>
 8006a48:	e7f7      	b.n	8006a3a <FLASH_WaitForLastOperation+0x3a>
 8006a4a:	bf00      	nop
 8006a4c:	20014e60 	.word	0x20014e60
 8006a50:	40023c00 	.word	0x40023c00

08006a54 <HAL_FLASH_Program>:
{
 8006a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8006a58:	4d1f      	ldr	r5, [pc, #124]	; (8006ad8 <HAL_FLASH_Program+0x84>)
{
 8006a5a:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8006a5c:	7e2b      	ldrb	r3, [r5, #24]
 8006a5e:	2b01      	cmp	r3, #1
{
 8006a60:	4607      	mov	r7, r0
 8006a62:	460e      	mov	r6, r1
 8006a64:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8006a66:	d035      	beq.n	8006ad4 <HAL_FLASH_Program+0x80>
 8006a68:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a6a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8006a6e:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a70:	f7ff ffc6 	bl	8006a00 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8006a74:	b9b0      	cbnz	r0, 8006aa4 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006a76:	b9cf      	cbnz	r7, 8006aac <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a78:	4b18      	ldr	r3, [pc, #96]	; (8006adc <HAL_FLASH_Program+0x88>)
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a80:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a86:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006a88:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8006a90:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a96:	f7ff ffb3 	bl	8006a00 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8006a9a:	4a10      	ldr	r2, [pc, #64]	; (8006adc <HAL_FLASH_Program+0x88>)
 8006a9c:	6913      	ldr	r3, [r2, #16]
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	762b      	strb	r3, [r5, #24]
}
 8006aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006aac:	2f01      	cmp	r7, #1
 8006aae:	d104      	bne.n	8006aba <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006ab0:	b2a1      	uxth	r1, r4
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7ff ff3c 	bl	8006930 <FLASH_Program_HalfWord>
 8006ab8:	e7eb      	b.n	8006a92 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006aba:	2f02      	cmp	r7, #2
 8006abc:	d104      	bne.n	8006ac8 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff ff23 	bl	800690c <FLASH_Program_Word>
 8006ac6:	e7e4      	b.n	8006a92 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4643      	mov	r3, r8
 8006acc:	4630      	mov	r0, r6
 8006ace:	f7ff ff07 	bl	80068e0 <FLASH_Program_DoubleWord>
 8006ad2:	e7de      	b.n	8006a92 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8006ad4:	2002      	movs	r0, #2
 8006ad6:	e7e7      	b.n	8006aa8 <HAL_FLASH_Program+0x54>
 8006ad8:	20014e60 	.word	0x20014e60
 8006adc:	40023c00 	.word	0x40023c00

08006ae0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006ae0:	b139      	cbz	r1, 8006af2 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006ae2:	2901      	cmp	r1, #1
 8006ae4:	d01c      	beq.n	8006b20 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006ae6:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006ae8:	bf0c      	ite	eq
 8006aea:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8006aee:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <FLASH_Erase_Sector+0x48>)
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006afa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	4311      	orrs	r1, r2
 8006b00:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006b08:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	f042 0202 	orr.w	r2, r2, #2
 8006b10:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8006b14:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b1c:	611a      	str	r2, [r3, #16]
}
 8006b1e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b24:	e7e5      	b.n	8006af2 <FLASH_Erase_Sector+0x12>
 8006b26:	bf00      	nop
 8006b28:	40023c00 	.word	0x40023c00

08006b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b32:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b34:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006ce4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b38:	4a68      	ldr	r2, [pc, #416]	; (8006cdc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b3a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8006ce8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b3e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b40:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8006b42:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b44:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8006b46:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b48:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8006b4a:	42ac      	cmp	r4, r5
 8006b4c:	f040 80b0 	bne.w	8006cb0 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b50:	684c      	ldr	r4, [r1, #4]
 8006b52:	f024 0c10 	bic.w	ip, r4, #16
 8006b56:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006b5a:	2603      	movs	r6, #3
 8006b5c:	f10c 37ff 	add.w	r7, ip, #4294967295
 8006b60:	fa06 f60e 	lsl.w	r6, r6, lr
 8006b64:	2f01      	cmp	r7, #1
 8006b66:	ea6f 0606 	mvn.w	r6, r6
 8006b6a:	d811      	bhi.n	8006b90 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8006b6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b6e:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b72:	68cf      	ldr	r7, [r1, #12]
 8006b74:	fa07 f70e 	lsl.w	r7, r7, lr
 8006b78:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006b7c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006b7e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b80:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006b84:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8006b88:	409f      	lsls	r7, r3
 8006b8a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8006b8e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006b90:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b92:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b96:	688f      	ldr	r7, [r1, #8]
 8006b98:	fa07 f70e 	lsl.w	r7, r7, lr
 8006b9c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ba0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8006ba4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ba6:	d116      	bne.n	8006bd6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8006ba8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8006bac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bb0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006bb4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bb8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8006bbc:	f04f 0c0f 	mov.w	ip, #15
 8006bc0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8006bc4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bc8:	690f      	ldr	r7, [r1, #16]
 8006bca:	fa07 f70b 	lsl.w	r7, r7, fp
 8006bce:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006bd2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8006bd6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bd8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bda:	f004 0703 	and.w	r7, r4, #3
 8006bde:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006be2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8006be6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006be8:	00e6      	lsls	r6, r4, #3
 8006bea:	d561      	bpl.n	8006cb0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bec:	f04f 0b00 	mov.w	fp, #0
 8006bf0:	f8cd b00c 	str.w	fp, [sp, #12]
 8006bf4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bf8:	4e39      	ldr	r6, [pc, #228]	; (8006ce0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bfa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8006bfe:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8006c02:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8006c06:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8006c0a:	9703      	str	r7, [sp, #12]
 8006c0c:	9f03      	ldr	r7, [sp, #12]
 8006c0e:	f023 0703 	bic.w	r7, r3, #3
 8006c12:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8006c16:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c1a:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006c1e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c22:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006c26:	f04f 0c0f 	mov.w	ip, #15
 8006c2a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c2e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c30:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c34:	d043      	beq.n	8006cbe <HAL_GPIO_Init+0x192>
 8006c36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c3a:	42b0      	cmp	r0, r6
 8006c3c:	d041      	beq.n	8006cc2 <HAL_GPIO_Init+0x196>
 8006c3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c42:	42b0      	cmp	r0, r6
 8006c44:	d03f      	beq.n	8006cc6 <HAL_GPIO_Init+0x19a>
 8006c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c4a:	42b0      	cmp	r0, r6
 8006c4c:	d03d      	beq.n	8006cca <HAL_GPIO_Init+0x19e>
 8006c4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c52:	42b0      	cmp	r0, r6
 8006c54:	d03b      	beq.n	8006cce <HAL_GPIO_Init+0x1a2>
 8006c56:	4548      	cmp	r0, r9
 8006c58:	d03b      	beq.n	8006cd2 <HAL_GPIO_Init+0x1a6>
 8006c5a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006c5e:	42b0      	cmp	r0, r6
 8006c60:	d039      	beq.n	8006cd6 <HAL_GPIO_Init+0x1aa>
 8006c62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c66:	42b0      	cmp	r0, r6
 8006c68:	bf14      	ite	ne
 8006c6a:	2608      	movne	r6, #8
 8006c6c:	2607      	moveq	r6, #7
 8006c6e:	fa06 f60e 	lsl.w	r6, r6, lr
 8006c72:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c76:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8006c78:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8006c7a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c7c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8006c80:	bf0c      	ite	eq
 8006c82:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8006c84:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8006c86:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8006c88:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c8a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8006c8e:	bf0c      	ite	eq
 8006c90:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8006c92:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8006c94:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c96:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c98:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8006c9c:	bf0c      	ite	eq
 8006c9e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8006ca0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8006ca2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8006ca4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ca6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8006ca8:	bf54      	ite	pl
 8006caa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8006cac:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8006cae:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	f47f af45 	bne.w	8006b42 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8006cb8:	b005      	add	sp, #20
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cbe:	465e      	mov	r6, fp
 8006cc0:	e7d5      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cc2:	2601      	movs	r6, #1
 8006cc4:	e7d3      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cc6:	2602      	movs	r6, #2
 8006cc8:	e7d1      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cca:	2603      	movs	r6, #3
 8006ccc:	e7cf      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cce:	2604      	movs	r6, #4
 8006cd0:	e7cd      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cd2:	2605      	movs	r6, #5
 8006cd4:	e7cb      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cd6:	2606      	movs	r6, #6
 8006cd8:	e7c9      	b.n	8006c6e <HAL_GPIO_Init+0x142>
 8006cda:	bf00      	nop
 8006cdc:	40013c00 	.word	0x40013c00
 8006ce0:	40020000 	.word	0x40020000
 8006ce4:	40023800 	.word	0x40023800
 8006ce8:	40021400 	.word	0x40021400

08006cec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cec:	b10a      	cbz	r2, 8006cf2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cee:	6181      	str	r1, [r0, #24]
  }
}
 8006cf0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cf2:	0409      	lsls	r1, r1, #16
 8006cf4:	e7fb      	b.n	8006cee <HAL_GPIO_WritePin+0x2>

08006cf6 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8006cf8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006cfa:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8006cfc:	6959      	ldr	r1, [r3, #20]
 8006cfe:	4201      	tst	r1, r0
 8006d00:	d002      	beq.n	8006d08 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d02:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d04:	f7ff fff7 	bl	8006cf6 <HAL_GPIO_EXTI_Callback>
}
 8006d08:	bd08      	pop	{r3, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40013c00 	.word	0x40013c00

08006d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d14:	4604      	mov	r4, r0
 8006d16:	b908      	cbnz	r0, 8006d1c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8006d18:	2001      	movs	r0, #1
 8006d1a:	e03f      	b.n	8006d9c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1c:	6803      	ldr	r3, [r0, #0]
 8006d1e:	07dd      	lsls	r5, r3, #31
 8006d20:	d410      	bmi.n	8006d44 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	0798      	lsls	r0, r3, #30
 8006d26:	d45a      	bmi.n	8006dde <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	071a      	lsls	r2, r3, #28
 8006d2c:	f100 809c 	bmi.w	8006e68 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	075b      	lsls	r3, r3, #29
 8006d34:	f100 80ba 	bmi.w	8006eac <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d38:	69a0      	ldr	r0, [r4, #24]
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	f040 811b 	bne.w	8006f76 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006d40:	2000      	movs	r0, #0
 8006d42:	e02b      	b.n	8006d9c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d44:	4ba7      	ldr	r3, [pc, #668]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	f002 020c 	and.w	r2, r2, #12
 8006d4c:	2a04      	cmp	r2, #4
 8006d4e:	d007      	beq.n	8006d60 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d56:	2a08      	cmp	r2, #8
 8006d58:	d10a      	bne.n	8006d70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	0259      	lsls	r1, r3, #9
 8006d5e:	d507      	bpl.n	8006d70 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d60:	4ba0      	ldr	r3, [pc, #640]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	039a      	lsls	r2, r3, #14
 8006d66:	d5dc      	bpl.n	8006d22 <HAL_RCC_OscConfig+0x12>
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d9      	bne.n	8006d22 <HAL_RCC_OscConfig+0x12>
 8006d6e:	e7d3      	b.n	8006d18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	4d9c      	ldr	r5, [pc, #624]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d78:	d113      	bne.n	8006da2 <HAL_RCC_OscConfig+0x92>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006d82:	f7ff fd2b 	bl	80067dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d86:	4d97      	ldr	r5, [pc, #604]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8006d88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	039b      	lsls	r3, r3, #14
 8006d8e:	d4c8      	bmi.n	8006d22 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d90:	f7ff fd24 	bl	80067dc <HAL_GetTick>
 8006d94:	1b80      	subs	r0, r0, r6
 8006d96:	2864      	cmp	r0, #100	; 0x64
 8006d98:	d9f7      	bls.n	8006d8a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8006d9a:	2003      	movs	r0, #3
}
 8006d9c:	b002      	add	sp, #8
 8006d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da6:	d104      	bne.n	8006db2 <HAL_RCC_OscConfig+0xa2>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	e7e3      	b.n	8006d7a <HAL_RCC_OscConfig+0x6a>
 8006db2:	682a      	ldr	r2, [r5, #0]
 8006db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006db8:	602a      	str	r2, [r5, #0]
 8006dba:	682a      	ldr	r2, [r5, #0]
 8006dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dc0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1dd      	bne.n	8006d82 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8006dc6:	f7ff fd09 	bl	80067dc <HAL_GetTick>
 8006dca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	039f      	lsls	r7, r3, #14
 8006dd0:	d5a7      	bpl.n	8006d22 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd2:	f7ff fd03 	bl	80067dc <HAL_GetTick>
 8006dd6:	1b80      	subs	r0, r0, r6
 8006dd8:	2864      	cmp	r0, #100	; 0x64
 8006dda:	d9f7      	bls.n	8006dcc <HAL_RCC_OscConfig+0xbc>
 8006ddc:	e7dd      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dde:	4b81      	ldr	r3, [pc, #516]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	f012 0f0c 	tst.w	r2, #12
 8006de6:	d007      	beq.n	8006df8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dee:	2a08      	cmp	r2, #8
 8006df0:	d111      	bne.n	8006e16 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	025e      	lsls	r6, r3, #9
 8006df6:	d40e      	bmi.n	8006e16 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006df8:	4b7a      	ldr	r3, [pc, #488]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	0795      	lsls	r5, r2, #30
 8006dfe:	d502      	bpl.n	8006e06 <HAL_RCC_OscConfig+0xf6>
 8006e00:	68e2      	ldr	r2, [r4, #12]
 8006e02:	2a01      	cmp	r2, #1
 8006e04:	d188      	bne.n	8006d18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	6921      	ldr	r1, [r4, #16]
 8006e0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006e0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006e12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e14:	e788      	b.n	8006d28 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e16:	68e2      	ldr	r2, [r4, #12]
 8006e18:	4b73      	ldr	r3, [pc, #460]	; (8006fe8 <HAL_RCC_OscConfig+0x2d8>)
 8006e1a:	b1b2      	cbz	r2, 8006e4a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e20:	f7ff fcdc 	bl	80067dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e24:	4d6f      	ldr	r5, [pc, #444]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8006e26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	0798      	lsls	r0, r3, #30
 8006e2c:	d507      	bpl.n	8006e3e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006e36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	e774      	b.n	8006d28 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e3e:	f7ff fccd 	bl	80067dc <HAL_GetTick>
 8006e42:	1b80      	subs	r0, r0, r6
 8006e44:	2802      	cmp	r0, #2
 8006e46:	d9ef      	bls.n	8006e28 <HAL_RCC_OscConfig+0x118>
 8006e48:	e7a7      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8006e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e4c:	f7ff fcc6 	bl	80067dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e50:	4d64      	ldr	r5, [pc, #400]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8006e52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	0799      	lsls	r1, r3, #30
 8006e58:	f57f af66 	bpl.w	8006d28 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5c:	f7ff fcbe 	bl	80067dc <HAL_GetTick>
 8006e60:	1b80      	subs	r0, r0, r6
 8006e62:	2802      	cmp	r0, #2
 8006e64:	d9f6      	bls.n	8006e54 <HAL_RCC_OscConfig+0x144>
 8006e66:	e798      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e68:	6962      	ldr	r2, [r4, #20]
 8006e6a:	4b60      	ldr	r3, [pc, #384]	; (8006fec <HAL_RCC_OscConfig+0x2dc>)
 8006e6c:	b17a      	cbz	r2, 8006e8e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006e72:	f7ff fcb3 	bl	80067dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e76:	4d5b      	ldr	r5, [pc, #364]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006e78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006e7c:	079f      	lsls	r7, r3, #30
 8006e7e:	f53f af57 	bmi.w	8006d30 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e82:	f7ff fcab 	bl	80067dc <HAL_GetTick>
 8006e86:	1b80      	subs	r0, r0, r6
 8006e88:	2802      	cmp	r0, #2
 8006e8a:	d9f6      	bls.n	8006e7a <HAL_RCC_OscConfig+0x16a>
 8006e8c:	e785      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8006e8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006e90:	f7ff fca4 	bl	80067dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e94:	4d53      	ldr	r5, [pc, #332]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006e96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006e9a:	0798      	lsls	r0, r3, #30
 8006e9c:	f57f af48 	bpl.w	8006d30 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7ff fc9c 	bl	80067dc <HAL_GetTick>
 8006ea4:	1b80      	subs	r0, r0, r6
 8006ea6:	2802      	cmp	r0, #2
 8006ea8:	d9f6      	bls.n	8006e98 <HAL_RCC_OscConfig+0x188>
 8006eaa:	e776      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eac:	4b4d      	ldr	r3, [pc, #308]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8006eb4:	d128      	bne.n	8006f08 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006eca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ecc:	4d48      	ldr	r5, [pc, #288]	; (8006ff0 <HAL_RCC_OscConfig+0x2e0>)
 8006ece:	682b      	ldr	r3, [r5, #0]
 8006ed0:	05d9      	lsls	r1, r3, #23
 8006ed2:	d51b      	bpl.n	8006f0c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed4:	68a3      	ldr	r3, [r4, #8]
 8006ed6:	4d43      	ldr	r5, [pc, #268]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d127      	bne.n	8006f2c <HAL_RCC_OscConfig+0x21c>
 8006edc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006ee4:	f7ff fc7a 	bl	80067dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee8:	4d3e      	ldr	r5, [pc, #248]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006eea:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006ef2:	079b      	lsls	r3, r3, #30
 8006ef4:	d539      	bpl.n	8006f6a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	f43f af1e 	beq.w	8006d38 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efc:	4a39      	ldr	r2, [pc, #228]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006efe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6413      	str	r3, [r2, #64]	; 0x40
 8006f06:	e717      	b.n	8006d38 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006f08:	2600      	movs	r6, #0
 8006f0a:	e7df      	b.n	8006ecc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006f14:	f7ff fc62 	bl	80067dc <HAL_GetTick>
 8006f18:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	05da      	lsls	r2, r3, #23
 8006f1e:	d4d9      	bmi.n	8006ed4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f20:	f7ff fc5c 	bl	80067dc <HAL_GetTick>
 8006f24:	1bc0      	subs	r0, r0, r7
 8006f26:	2802      	cmp	r0, #2
 8006f28:	d9f7      	bls.n	8006f1a <HAL_RCC_OscConfig+0x20a>
 8006f2a:	e736      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d104      	bne.n	8006f3a <HAL_RCC_OscConfig+0x22a>
 8006f30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006f32:	f043 0304 	orr.w	r3, r3, #4
 8006f36:	672b      	str	r3, [r5, #112]	; 0x70
 8006f38:	e7d0      	b.n	8006edc <HAL_RCC_OscConfig+0x1cc>
 8006f3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	672a      	str	r2, [r5, #112]	; 0x70
 8006f42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006f44:	f022 0204 	bic.w	r2, r2, #4
 8006f48:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ca      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8006f4e:	f7ff fc45 	bl	80067dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f52:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006f56:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006f5a:	0798      	lsls	r0, r3, #30
 8006f5c:	d5cb      	bpl.n	8006ef6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f5e:	f7ff fc3d 	bl	80067dc <HAL_GetTick>
 8006f62:	1bc0      	subs	r0, r0, r7
 8006f64:	4540      	cmp	r0, r8
 8006f66:	d9f7      	bls.n	8006f58 <HAL_RCC_OscConfig+0x248>
 8006f68:	e717      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f6a:	f7ff fc37 	bl	80067dc <HAL_GetTick>
 8006f6e:	1bc0      	subs	r0, r0, r7
 8006f70:	4540      	cmp	r0, r8
 8006f72:	d9bd      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x1e0>
 8006f74:	e711      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f76:	4d1b      	ldr	r5, [pc, #108]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
 8006f78:	68ab      	ldr	r3, [r5, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d047      	beq.n	8007012 <HAL_RCC_OscConfig+0x302>
 8006f82:	4e1c      	ldr	r6, [pc, #112]	; (8006ff4 <HAL_RCC_OscConfig+0x2e4>)
 8006f84:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006f88:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f8a:	d135      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8006f8c:	f7ff fc26 	bl	80067dc <HAL_GetTick>
 8006f90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	0199      	lsls	r1, r3, #6
 8006f96:	d41e      	bmi.n	8006fd6 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f98:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fa0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006fa4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006fa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006faa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fac:	4c0d      	ldr	r4, [pc, #52]	; (8006fe4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fae:	0852      	lsrs	r2, r2, #1
 8006fb0:	3a01      	subs	r2, #1
 8006fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006fb8:	2301      	movs	r3, #1
 8006fba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006fbc:	f7ff fc0e 	bl	80067dc <HAL_GetTick>
 8006fc0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	019a      	lsls	r2, r3, #6
 8006fc6:	f53f aebb 	bmi.w	8006d40 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fca:	f7ff fc07 	bl	80067dc <HAL_GetTick>
 8006fce:	1b40      	subs	r0, r0, r5
 8006fd0:	2802      	cmp	r0, #2
 8006fd2:	d9f6      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x2b2>
 8006fd4:	e6e1      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fd6:	f7ff fc01 	bl	80067dc <HAL_GetTick>
 8006fda:	1bc0      	subs	r0, r0, r7
 8006fdc:	2802      	cmp	r0, #2
 8006fde:	d9d8      	bls.n	8006f92 <HAL_RCC_OscConfig+0x282>
 8006fe0:	e6db      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	42470000 	.word	0x42470000
 8006fec:	42470e80 	.word	0x42470e80
 8006ff0:	40007000 	.word	0x40007000
 8006ff4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8006ff8:	f7ff fbf0 	bl	80067dc <HAL_GetTick>
 8006ffc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	019b      	lsls	r3, r3, #6
 8007002:	f57f ae9d 	bpl.w	8006d40 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007006:	f7ff fbe9 	bl	80067dc <HAL_GetTick>
 800700a:	1b00      	subs	r0, r0, r4
 800700c:	2802      	cmp	r0, #2
 800700e:	d9f6      	bls.n	8006ffe <HAL_RCC_OscConfig+0x2ee>
 8007010:	e6c3      	b.n	8006d9a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007012:	2801      	cmp	r0, #1
 8007014:	f43f aec2 	beq.w	8006d9c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8007018:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	69e3      	ldr	r3, [r4, #28]
 800701c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8007020:	429a      	cmp	r2, r3
 8007022:	f47f ae79 	bne.w	8006d18 <HAL_RCC_OscConfig+0x8>
 8007026:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007028:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702c:	4293      	cmp	r3, r2
 800702e:	f47f ae73 	bne.w	8006d18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007038:	4003      	ands	r3, r0
 800703a:	4293      	cmp	r3, r2
 800703c:	f47f ae6c 	bne.w	8006d18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007040:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007042:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007046:	4293      	cmp	r3, r2
 8007048:	f47f ae66 	bne.w	8006d18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800704c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800704e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8007052:	1ac0      	subs	r0, r0, r3
 8007054:	bf18      	it	ne
 8007056:	2001      	movne	r0, #1
 8007058:	e6a0      	b.n	8006d9c <HAL_RCC_OscConfig+0x8c>
 800705a:	bf00      	nop

0800705c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800705c:	4913      	ldr	r1, [pc, #76]	; (80070ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800705e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007060:	688b      	ldr	r3, [r1, #8]
 8007062:	f003 030c 	and.w	r3, r3, #12
 8007066:	2b04      	cmp	r3, #4
 8007068:	d003      	beq.n	8007072 <HAL_RCC_GetSysClockFreq+0x16>
 800706a:	2b08      	cmp	r3, #8
 800706c:	d003      	beq.n	8007076 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800706e:	4810      	ldr	r0, [pc, #64]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8007070:	e000      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8007072:	4810      	ldr	r0, [pc, #64]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8007074:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007076:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007078:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800707a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800707c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007080:	bf14      	ite	ne
 8007082:	480c      	ldrne	r0, [pc, #48]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007084:	480a      	ldreq	r0, [pc, #40]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007086:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800708a:	bf18      	it	ne
 800708c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800708e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007092:	fba1 0100 	umull	r0, r1, r1, r0
 8007096:	f7f9 f903 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <HAL_RCC_GetSysClockFreq+0x50>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80070a2:	3301      	adds	r3, #1
 80070a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80070a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80070aa:	e7e3      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x18>
 80070ac:	40023800 	.word	0x40023800
 80070b0:	00f42400 	.word	0x00f42400
 80070b4:	007a1200 	.word	0x007a1200

080070b8 <HAL_RCC_ClockConfig>:
{
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80070be:	4604      	mov	r4, r0
 80070c0:	b910      	cbnz	r0, 80070c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80070c2:	2001      	movs	r0, #1
}
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070c8:	4b43      	ldr	r3, [pc, #268]	; (80071d8 <HAL_RCC_ClockConfig+0x120>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f002 020f 	and.w	r2, r2, #15
 80070d0:	428a      	cmp	r2, r1
 80070d2:	d328      	bcc.n	8007126 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d4:	6821      	ldr	r1, [r4, #0]
 80070d6:	078f      	lsls	r7, r1, #30
 80070d8:	d42d      	bmi.n	8007136 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070da:	07c8      	lsls	r0, r1, #31
 80070dc:	d440      	bmi.n	8007160 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070de:	4b3e      	ldr	r3, [pc, #248]	; (80071d8 <HAL_RCC_ClockConfig+0x120>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f002 020f 	and.w	r2, r2, #15
 80070e6:	42aa      	cmp	r2, r5
 80070e8:	d865      	bhi.n	80071b6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	0751      	lsls	r1, r2, #29
 80070ee:	d46b      	bmi.n	80071c8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f0:	0713      	lsls	r3, r2, #28
 80070f2:	d507      	bpl.n	8007104 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f4:	4a39      	ldr	r2, [pc, #228]	; (80071dc <HAL_RCC_ClockConfig+0x124>)
 80070f6:	6921      	ldr	r1, [r4, #16]
 80070f8:	6893      	ldr	r3, [r2, #8]
 80070fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80070fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007102:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007104:	f7ff ffaa 	bl	800705c <HAL_RCC_GetSysClockFreq>
 8007108:	4b34      	ldr	r3, [pc, #208]	; (80071dc <HAL_RCC_ClockConfig+0x124>)
 800710a:	4a35      	ldr	r2, [pc, #212]	; (80071e0 <HAL_RCC_ClockConfig+0x128>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	40d8      	lsrs	r0, r3
 8007116:	4b33      	ldr	r3, [pc, #204]	; (80071e4 <HAL_RCC_ClockConfig+0x12c>)
 8007118:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800711a:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <HAL_RCC_ClockConfig+0x130>)
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	f7ff fb13 	bl	8006748 <HAL_InitTick>
  return HAL_OK;
 8007122:	2000      	movs	r0, #0
 8007124:	e7ce      	b.n	80070c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007126:	b2ca      	uxtb	r2, r1
 8007128:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	428b      	cmp	r3, r1
 8007132:	d1c6      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xa>
 8007134:	e7ce      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1c>
 8007136:	4b29      	ldr	r3, [pc, #164]	; (80071dc <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007138:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800713c:	bf1e      	ittt	ne
 800713e:	689a      	ldrne	r2, [r3, #8]
 8007140:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8007144:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007146:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007148:	bf42      	ittt	mi
 800714a:	689a      	ldrmi	r2, [r3, #8]
 800714c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8007150:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68a0      	ldr	r0, [r4, #8]
 8007156:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800715a:	4302      	orrs	r2, r0
 800715c:	609a      	str	r2, [r3, #8]
 800715e:	e7bc      	b.n	80070da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007160:	6862      	ldr	r2, [r4, #4]
 8007162:	4b1e      	ldr	r3, [pc, #120]	; (80071dc <HAL_RCC_ClockConfig+0x124>)
 8007164:	2a01      	cmp	r2, #1
 8007166:	d11c      	bne.n	80071a2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716e:	d0a8      	beq.n	80070c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007170:	4e1a      	ldr	r6, [pc, #104]	; (80071dc <HAL_RCC_ClockConfig+0x124>)
 8007172:	68b3      	ldr	r3, [r6, #8]
 8007174:	f023 0303 	bic.w	r3, r3, #3
 8007178:	4313      	orrs	r3, r2
 800717a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800717c:	f7ff fb2e 	bl	80067dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007180:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007184:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	68b3      	ldr	r3, [r6, #8]
 8007188:	6862      	ldr	r2, [r4, #4]
 800718a:	f003 030c 	and.w	r3, r3, #12
 800718e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007192:	d0a4      	beq.n	80070de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007194:	f7ff fb22 	bl	80067dc <HAL_GetTick>
 8007198:	1bc0      	subs	r0, r0, r7
 800719a:	4540      	cmp	r0, r8
 800719c:	d9f3      	bls.n	8007186 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800719e:	2003      	movs	r0, #3
 80071a0:	e790      	b.n	80070c4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a2:	1e91      	subs	r1, r2, #2
 80071a4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a8:	d802      	bhi.n	80071b0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80071ae:	e7de      	b.n	800716e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b0:	f013 0f02 	tst.w	r3, #2
 80071b4:	e7db      	b.n	800716e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b6:	b2ea      	uxtb	r2, r5
 80071b8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	f47f af7e 	bne.w	80070c2 <HAL_RCC_ClockConfig+0xa>
 80071c6:	e790      	b.n	80070ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <HAL_RCC_ClockConfig+0x124>)
 80071ca:	68e0      	ldr	r0, [r4, #12]
 80071cc:	688b      	ldr	r3, [r1, #8]
 80071ce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80071d2:	4303      	orrs	r3, r0
 80071d4:	608b      	str	r3, [r1, #8]
 80071d6:	e78b      	b.n	80070f0 <HAL_RCC_ClockConfig+0x38>
 80071d8:	40023c00 	.word	0x40023c00
 80071dc:	40023800 	.word	0x40023800
 80071e0:	08009b02 	.word	0x08009b02
 80071e4:	20000214 	.word	0x20000214
 80071e8:	2000021c 	.word	0x2000021c

080071ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071ec:	4b04      	ldr	r3, [pc, #16]	; (8007200 <HAL_RCC_GetPCLK1Freq+0x14>)
 80071ee:	4a05      	ldr	r2, [pc, #20]	; (8007204 <HAL_RCC_GetPCLK1Freq+0x18>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80071f6:	5cd3      	ldrb	r3, [r2, r3]
 80071f8:	4a03      	ldr	r2, [pc, #12]	; (8007208 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80071fa:	6810      	ldr	r0, [r2, #0]
}
 80071fc:	40d8      	lsrs	r0, r3
 80071fe:	4770      	bx	lr
 8007200:	40023800 	.word	0x40023800
 8007204:	08009b12 	.word	0x08009b12
 8007208:	20000214 	.word	0x20000214

0800720c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <HAL_RCC_GetPCLK2Freq+0x14>)
 800720e:	4a05      	ldr	r2, [pc, #20]	; (8007224 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007216:	5cd3      	ldrb	r3, [r2, r3]
 8007218:	4a03      	ldr	r2, [pc, #12]	; (8007228 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800721a:	6810      	ldr	r0, [r2, #0]
}
 800721c:	40d8      	lsrs	r0, r3
 800721e:	4770      	bx	lr
 8007220:	40023800 	.word	0x40023800
 8007224:	08009b12 	.word	0x08009b12
 8007228:	20000214 	.word	0x20000214

0800722c <HAL_TIM_OnePulse_MspInit>:
 800722c:	4770      	bx	lr
	...

08007230 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007230:	4a30      	ldr	r2, [pc, #192]	; (80072f4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8007232:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007234:	4290      	cmp	r0, r2
 8007236:	d012      	beq.n	800725e <TIM_Base_SetConfig+0x2e>
 8007238:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800723c:	d00f      	beq.n	800725e <TIM_Base_SetConfig+0x2e>
 800723e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007242:	4290      	cmp	r0, r2
 8007244:	d00b      	beq.n	800725e <TIM_Base_SetConfig+0x2e>
 8007246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800724a:	4290      	cmp	r0, r2
 800724c:	d007      	beq.n	800725e <TIM_Base_SetConfig+0x2e>
 800724e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007252:	4290      	cmp	r0, r2
 8007254:	d003      	beq.n	800725e <TIM_Base_SetConfig+0x2e>
 8007256:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800725a:	4290      	cmp	r0, r2
 800725c:	d119      	bne.n	8007292 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800725e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007264:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007266:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <TIM_Base_SetConfig+0xc4>)
 8007268:	4290      	cmp	r0, r2
 800726a:	d029      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 800726c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007270:	d026      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 8007272:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007276:	4290      	cmp	r0, r2
 8007278:	d022      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 800727a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800727e:	4290      	cmp	r0, r2
 8007280:	d01e      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 8007282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007286:	4290      	cmp	r0, r2
 8007288:	d01a      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 800728a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800728e:	4290      	cmp	r0, r2
 8007290:	d016      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 8007292:	4a19      	ldr	r2, [pc, #100]	; (80072f8 <TIM_Base_SetConfig+0xc8>)
 8007294:	4290      	cmp	r0, r2
 8007296:	d013      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 8007298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800729c:	4290      	cmp	r0, r2
 800729e:	d00f      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 80072a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072a4:	4290      	cmp	r0, r2
 80072a6:	d00b      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 80072a8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80072ac:	4290      	cmp	r0, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 80072b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072b4:	4290      	cmp	r0, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_Base_SetConfig+0x90>
 80072b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072bc:	4290      	cmp	r0, r2
 80072be:	d103      	bne.n	80072c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072c0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80072c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072c6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c8:	694a      	ldr	r2, [r1, #20]
 80072ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ce:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80072d0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d2:	688b      	ldr	r3, [r1, #8]
 80072d4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d6:	680b      	ldr	r3, [r1, #0]
 80072d8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <TIM_Base_SetConfig+0xc4>)
 80072dc:	4298      	cmp	r0, r3
 80072de:	d003      	beq.n	80072e8 <TIM_Base_SetConfig+0xb8>
 80072e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072e4:	4298      	cmp	r0, r3
 80072e6:	d101      	bne.n	80072ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072e8:	690b      	ldr	r3, [r1, #16]
 80072ea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072ec:	2301      	movs	r3, #1
 80072ee:	6143      	str	r3, [r0, #20]
}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40014000 	.word	0x40014000

080072fc <HAL_TIM_Base_Init>:
{
 80072fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80072fe:	4604      	mov	r4, r0
 8007300:	b1a0      	cbz	r0, 800732c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007302:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800730a:	b91b      	cbnz	r3, 8007314 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800730c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007310:	f7ff f96a 	bl	80065e8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	2302      	movs	r3, #2
 8007316:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731a:	6820      	ldr	r0, [r4, #0]
 800731c:	1d21      	adds	r1, r4, #4
 800731e:	f7ff ff87 	bl	8007230 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007322:	2301      	movs	r3, #1
 8007324:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007328:	2000      	movs	r0, #0
}
 800732a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800732c:	2001      	movs	r0, #1
 800732e:	e7fc      	b.n	800732a <HAL_TIM_Base_Init+0x2e>

08007330 <HAL_TIM_OnePulse_Init>:
{
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	460d      	mov	r5, r1
  if (htim == NULL)
 8007334:	4604      	mov	r4, r0
 8007336:	b1e0      	cbz	r0, 8007372 <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007338:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800733c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007340:	b91b      	cbnz	r3, 800734a <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 8007342:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8007346:	f7ff ff71 	bl	800722c <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800734a:	2302      	movs	r3, #2
 800734c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007350:	1d21      	adds	r1, r4, #4
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	f7ff ff6c 	bl	8007230 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	f022 0208 	bic.w	r2, r2, #8
 8007360:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	4329      	orrs	r1, r5
 8007366:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007368:	2301      	movs	r3, #1
 800736a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800736e:	2000      	movs	r0, #0
}
 8007370:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007372:	2001      	movs	r0, #1
 8007374:	e7fc      	b.n	8007370 <HAL_TIM_OnePulse_Init+0x40>

08007376 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007376:	6803      	ldr	r3, [r0, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800737e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	695a      	ldr	r2, [r3, #20]
 8007382:	f022 0201 	bic.w	r2, r2, #1
 8007386:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007388:	2320      	movs	r3, #32
 800738a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800738e:	4770      	bx	lr

08007390 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007390:	6803      	ldr	r3, [r0, #0]
 8007392:	68c1      	ldr	r1, [r0, #12]
 8007394:	691a      	ldr	r2, [r3, #16]
{
 8007396:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 800739c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800739e:	430a      	orrs	r2, r1
 80073a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073a2:	6925      	ldr	r5, [r4, #16]
 80073a4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073a6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073a8:	69c0      	ldr	r0, [r0, #28]
 80073aa:	432a      	orrs	r2, r5
 80073ac:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80073ae:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80073b4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80073ba:	430a      	orrs	r2, r1
 80073bc:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	69a1      	ldr	r1, [r4, #24]
 80073c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80073c6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073cc:	615a      	str	r2, [r3, #20]
 80073ce:	4a26      	ldr	r2, [pc, #152]	; (8007468 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d0:	d129      	bne.n	8007426 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <UART_SetConfig+0x4e>
 80073d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073da:	4293      	cmp	r3, r2
 80073dc:	d120      	bne.n	8007420 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073de:	f7ff ff15 	bl	800720c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073e2:	6862      	ldr	r2, [r4, #4]
 80073e4:	2600      	movs	r6, #0
 80073e6:	1892      	adds	r2, r2, r2
 80073e8:	f04f 0119 	mov.w	r1, #25
 80073ec:	eb46 0306 	adc.w	r3, r6, r6
 80073f0:	fba0 0101 	umull	r0, r1, r0, r1
 80073f4:	f7f8 ff54 	bl	80002a0 <__aeabi_uldivmod>
 80073f8:	2164      	movs	r1, #100	; 0x64
 80073fa:	fbb0 f5f1 	udiv	r5, r0, r1
 80073fe:	fb01 0315 	mls	r3, r1, r5, r0
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	3332      	adds	r3, #50	; 0x32
 8007406:	fbb3 f3f1 	udiv	r3, r3, r1
 800740a:	f003 0207 	and.w	r2, r3, #7
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8007416:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800741a:	4413      	add	r3, r2
 800741c:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800741e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8007420:	f7ff fee4 	bl	80071ec <HAL_RCC_GetPCLK1Freq>
 8007424:	e7dd      	b.n	80073e2 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007426:	4293      	cmp	r3, r2
 8007428:	d002      	beq.n	8007430 <UART_SetConfig+0xa0>
 800742a:	4a10      	ldr	r2, [pc, #64]	; (800746c <UART_SetConfig+0xdc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d117      	bne.n	8007460 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7ff feec 	bl	800720c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007434:	6863      	ldr	r3, [r4, #4]
 8007436:	2119      	movs	r1, #25
 8007438:	009a      	lsls	r2, r3, #2
 800743a:	fba0 0101 	umull	r0, r1, r0, r1
 800743e:	0f9b      	lsrs	r3, r3, #30
 8007440:	f7f8 ff2e 	bl	80002a0 <__aeabi_uldivmod>
 8007444:	2264      	movs	r2, #100	; 0x64
 8007446:	fbb0 f1f2 	udiv	r1, r0, r2
 800744a:	fb02 0311 	mls	r3, r2, r1, r0
 800744e:	6824      	ldr	r4, [r4, #0]
 8007450:	011b      	lsls	r3, r3, #4
 8007452:	3332      	adds	r3, #50	; 0x32
 8007454:	fbb3 f3f2 	udiv	r3, r3, r2
 8007458:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800745c:	60a3      	str	r3, [r4, #8]
}
 800745e:	e7de      	b.n	800741e <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007460:	f7ff fec4 	bl	80071ec <HAL_RCC_GetPCLK1Freq>
 8007464:	e7e6      	b.n	8007434 <UART_SetConfig+0xa4>
 8007466:	bf00      	nop
 8007468:	40011000 	.word	0x40011000
 800746c:	40011400 	.word	0x40011400

08007470 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	4604      	mov	r4, r0
 8007474:	460e      	mov	r6, r1
 8007476:	4617      	mov	r7, r2
 8007478:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747a:	6821      	ldr	r1, [r4, #0]
 800747c:	680b      	ldr	r3, [r1, #0]
 800747e:	ea36 0303 	bics.w	r3, r6, r3
 8007482:	d101      	bne.n	8007488 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8007484:	2000      	movs	r0, #0
 8007486:	e014      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8007488:	1c6b      	adds	r3, r5, #1
 800748a:	d0f7      	beq.n	800747c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800748c:	b995      	cbnz	r5, 80074b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007496:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	695a      	ldr	r2, [r3, #20]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80074a0:	2320      	movs	r3, #32
 80074a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80074a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80074aa:	2300      	movs	r3, #0
 80074ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80074b0:	2003      	movs	r0, #3
}
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074b4:	f7ff f992 	bl	80067dc <HAL_GetTick>
 80074b8:	1bc0      	subs	r0, r0, r7
 80074ba:	4285      	cmp	r5, r0
 80074bc:	d2dd      	bcs.n	800747a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80074be:	e7e6      	b.n	800748e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080074c0 <HAL_UART_Init>:
{
 80074c0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80074c2:	4604      	mov	r4, r0
 80074c4:	b340      	cbz	r0, 8007518 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80074c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80074ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074ce:	b91b      	cbnz	r3, 80074d8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80074d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80074d4:	f7ff f8c4 	bl	8006660 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80074d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80074da:	2324      	movs	r3, #36	; 0x24
 80074dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80074e0:	68d3      	ldr	r3, [r2, #12]
 80074e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff ff51 	bl	8007390 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074fe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007506:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800750a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800750e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007512:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007516:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007518:	2001      	movs	r0, #1
 800751a:	e7fc      	b.n	8007516 <HAL_UART_Init+0x56>

0800751c <HAL_UART_Transmit>:
{
 800751c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007520:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007522:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007526:	2b20      	cmp	r3, #32
{
 8007528:	4604      	mov	r4, r0
 800752a:	460d      	mov	r5, r1
 800752c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800752e:	d14f      	bne.n	80075d0 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8007530:	2900      	cmp	r1, #0
 8007532:	d04b      	beq.n	80075cc <HAL_UART_Transmit+0xb0>
 8007534:	2a00      	cmp	r2, #0
 8007536:	d049      	beq.n	80075cc <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8007538:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800753c:	2b01      	cmp	r3, #1
 800753e:	d047      	beq.n	80075d0 <HAL_UART_Transmit+0xb4>
 8007540:	2301      	movs	r3, #1
 8007542:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007546:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800754a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007550:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8007554:	f7ff f942 	bl	80067dc <HAL_GetTick>
    huart->TxXferSize = Size;
 8007558:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800755c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800755e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8007562:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8007566:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007568:	b29b      	uxth	r3, r3
 800756a:	b953      	cbnz	r3, 8007582 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800756c:	463b      	mov	r3, r7
 800756e:	4632      	mov	r2, r6
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	4620      	mov	r0, r4
 8007574:	f7ff ff7c 	bl	8007470 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8007578:	b998      	cbnz	r0, 80075a2 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800757a:	2320      	movs	r3, #32
 800757c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8007580:	e010      	b.n	80075a4 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 8007582:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007584:	3b01      	subs	r3, #1
 8007586:	b29b      	uxth	r3, r3
 8007588:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800758a:	68a3      	ldr	r3, [r4, #8]
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007590:	4632      	mov	r2, r6
 8007592:	463b      	mov	r3, r7
 8007594:	f04f 0180 	mov.w	r1, #128	; 0x80
 8007598:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800759a:	d10e      	bne.n	80075ba <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800759c:	f7ff ff68 	bl	8007470 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80075a0:	b110      	cbz	r0, 80075a8 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 80075a2:	2003      	movs	r0, #3
}
 80075a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80075a8:	882b      	ldrh	r3, [r5, #0]
 80075aa:	6822      	ldr	r2, [r4, #0]
 80075ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b0:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	b943      	cbnz	r3, 80075c8 <HAL_UART_Transmit+0xac>
          pData += 2U;
 80075b6:	3502      	adds	r5, #2
 80075b8:	e7d5      	b.n	8007566 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ba:	f7ff ff59 	bl	8007470 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d1ef      	bne.n	80075a2 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	782a      	ldrb	r2, [r5, #0]
 80075c6:	605a      	str	r2, [r3, #4]
 80075c8:	3501      	adds	r5, #1
 80075ca:	e7cc      	b.n	8007566 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80075cc:	2001      	movs	r0, #1
 80075ce:	e7e9      	b.n	80075a4 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 80075d0:	2002      	movs	r0, #2
 80075d2:	e7e7      	b.n	80075a4 <HAL_UART_Transmit+0x88>

080075d4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80075d4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d120      	bne.n	800761e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80075dc:	b1e9      	cbz	r1, 800761a <HAL_UART_Receive_IT+0x46>
 80075de:	b1e2      	cbz	r2, 800761a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80075e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d01a      	beq.n	800761e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80075e8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80075ea:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ec:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075ee:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075f2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075f6:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80075f8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075fa:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80075fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007600:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007604:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007606:	6951      	ldr	r1, [r2, #20]
 8007608:	f041 0101 	orr.w	r1, r1, #1
 800760c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800760e:	68d1      	ldr	r1, [r2, #12]
 8007610:	f041 0120 	orr.w	r1, r1, #32
 8007614:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8007616:	4618      	mov	r0, r3
 8007618:	4770      	bx	lr
      return HAL_ERROR;
 800761a:	2001      	movs	r0, #1
 800761c:	4770      	bx	lr
    return HAL_BUSY;
 800761e:	2002      	movs	r0, #2
}
 8007620:	4770      	bx	lr

08007622 <HAL_UART_TxCpltCallback>:
 8007622:	4770      	bx	lr

08007624 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007624:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007628:	2b22      	cmp	r3, #34	; 0x22
{
 800762a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800762c:	d133      	bne.n	8007696 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800762e:	6881      	ldr	r1, [r0, #8]
 8007630:	6904      	ldr	r4, [r0, #16]
 8007632:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007634:	6802      	ldr	r2, [r0, #0]
 8007636:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800763a:	d123      	bne.n	8007684 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800763c:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800763e:	b9ec      	cbnz	r4, 800767c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007644:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8007648:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800764a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800764c:	3c01      	subs	r4, #1
 800764e:	b2a4      	uxth	r4, r4
 8007650:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8007652:	b98c      	cbnz	r4, 8007678 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007654:	6803      	ldr	r3, [r0, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	f022 0220 	bic.w	r2, r2, #32
 800765c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007664:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800766e:	2320      	movs	r3, #32
 8007670:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8007674:	f7fe ffd0 	bl	8006618 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8007678:	2000      	movs	r0, #0
 800767a:	e00d      	b.n	8007698 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	f823 2b01 	strh.w	r2, [r3], #1
 8007682:	e7e1      	b.n	8007648 <UART_Receive_IT+0x24>
 8007684:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007686:	6852      	ldr	r2, [r2, #4]
 8007688:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800768a:	b90c      	cbnz	r4, 8007690 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e7dc      	b.n	800764a <UART_Receive_IT+0x26>
 8007690:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007694:	e7fa      	b.n	800768c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8007696:	2002      	movs	r0, #2
}
 8007698:	bd10      	pop	{r4, pc}

0800769a <HAL_UART_ErrorCallback>:
 800769a:	4770      	bx	lr

0800769c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800769c:	6803      	ldr	r3, [r0, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076a0:	68d9      	ldr	r1, [r3, #12]
{
 80076a2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80076a4:	0716      	lsls	r6, r2, #28
{
 80076a6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80076aa:	d107      	bne.n	80076bc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ac:	0696      	lsls	r6, r2, #26
 80076ae:	d55a      	bpl.n	8007766 <HAL_UART_IRQHandler+0xca>
 80076b0:	068d      	lsls	r5, r1, #26
 80076b2:	d558      	bpl.n	8007766 <HAL_UART_IRQHandler+0xca>
}
 80076b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80076b8:	f7ff bfb4 	b.w	8007624 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076bc:	f015 0501 	ands.w	r5, r5, #1
 80076c0:	d102      	bne.n	80076c8 <HAL_UART_IRQHandler+0x2c>
 80076c2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80076c6:	d04e      	beq.n	8007766 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076c8:	07d0      	lsls	r0, r2, #31
 80076ca:	d505      	bpl.n	80076d8 <HAL_UART_IRQHandler+0x3c>
 80076cc:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ce:	bf42      	ittt	mi
 80076d0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80076d2:	f043 0301 	orrmi.w	r3, r3, #1
 80076d6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076d8:	0756      	lsls	r6, r2, #29
 80076da:	d504      	bpl.n	80076e6 <HAL_UART_IRQHandler+0x4a>
 80076dc:	b11d      	cbz	r5, 80076e6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076e0:	f043 0302 	orr.w	r3, r3, #2
 80076e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e6:	0790      	lsls	r0, r2, #30
 80076e8:	d504      	bpl.n	80076f4 <HAL_UART_IRQHandler+0x58>
 80076ea:	b11d      	cbz	r5, 80076f4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076ee:	f043 0304 	orr.w	r3, r3, #4
 80076f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80076f4:	0713      	lsls	r3, r2, #28
 80076f6:	d506      	bpl.n	8007706 <HAL_UART_IRQHandler+0x6a>
 80076f8:	068e      	lsls	r6, r1, #26
 80076fa:	d400      	bmi.n	80076fe <HAL_UART_IRQHandler+0x62>
 80076fc:	b11d      	cbz	r5, 8007706 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007700:	f043 0308 	orr.w	r3, r3, #8
 8007704:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007708:	b343      	cbz	r3, 800775c <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800770a:	0695      	lsls	r5, r2, #26
 800770c:	d504      	bpl.n	8007718 <HAL_UART_IRQHandler+0x7c>
 800770e:	0688      	lsls	r0, r1, #26
 8007710:	d502      	bpl.n	8007718 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff ff86 	bl	8007624 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800771c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800771e:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8007720:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007722:	d402      	bmi.n	800772a <HAL_UART_IRQHandler+0x8e>
 8007724:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8007728:	d019      	beq.n	800775e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800772a:	f7ff fe24 	bl	8007376 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	0652      	lsls	r2, r2, #25
 8007734:	d50f      	bpl.n	8007756 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007738:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800773e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007740:	b148      	cbz	r0, 8007756 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <HAL_UART_IRQHandler+0x140>)
 8007744:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007746:	f7ff f8b9 	bl	80068bc <HAL_DMA_Abort_IT>
 800774a:	b138      	cbz	r0, 800775c <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800774c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800774e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007752:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007754:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff ff9f 	bl	800769a <HAL_UART_ErrorCallback>
}
 800775c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800775e:	f7ff ff9c 	bl	800769a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007764:	e7fa      	b.n	800775c <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007766:	0616      	lsls	r6, r2, #24
 8007768:	d528      	bpl.n	80077bc <HAL_UART_IRQHandler+0x120>
 800776a:	060d      	lsls	r5, r1, #24
 800776c:	d526      	bpl.n	80077bc <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800776e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007772:	2a21      	cmp	r2, #33	; 0x21
 8007774:	d1f2      	bne.n	800775c <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007776:	68a1      	ldr	r1, [r4, #8]
 8007778:	6a22      	ldr	r2, [r4, #32]
 800777a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800777e:	d118      	bne.n	80077b2 <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007780:	8811      	ldrh	r1, [r2, #0]
 8007782:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007786:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007788:	6921      	ldr	r1, [r4, #16]
 800778a:	b981      	cbnz	r1, 80077ae <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 800778c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800778e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007790:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007792:	3a01      	subs	r2, #1
 8007794:	b292      	uxth	r2, r2
 8007796:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007798:	2a00      	cmp	r2, #0
 800779a:	d1df      	bne.n	800775c <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077a2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077aa:	60da      	str	r2, [r3, #12]
 80077ac:	e7d6      	b.n	800775c <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 80077ae:	3201      	adds	r2, #1
 80077b0:	e7ed      	b.n	800778e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077b2:	1c51      	adds	r1, r2, #1
 80077b4:	6221      	str	r1, [r4, #32]
 80077b6:	7812      	ldrb	r2, [r2, #0]
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	e7e9      	b.n	8007790 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077bc:	0650      	lsls	r0, r2, #25
 80077be:	d5cd      	bpl.n	800775c <HAL_UART_IRQHandler+0xc0>
 80077c0:	064a      	lsls	r2, r1, #25
 80077c2:	d5cb      	bpl.n	800775c <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ca:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80077cc:	2320      	movs	r3, #32
 80077ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff ff25 	bl	8007622 <HAL_UART_TxCpltCallback>
 80077d8:	e7c0      	b.n	800775c <HAL_UART_IRQHandler+0xc0>
 80077da:	bf00      	nop
 80077dc:	080077e1 	.word	0x080077e1

080077e0 <UART_DMAAbortOnError>:
{
 80077e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077e8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80077ea:	f7ff ff56 	bl	800769a <HAL_UART_ErrorCallback>
}
 80077ee:	bd08      	pop	{r3, pc}

080077f0 <__assert_func>:
 80077f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077f2:	461c      	mov	r4, r3
 80077f4:	4b09      	ldr	r3, [pc, #36]	; (800781c <__assert_func+0x2c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4605      	mov	r5, r0
 80077fa:	68d8      	ldr	r0, [r3, #12]
 80077fc:	b152      	cbz	r2, 8007814 <__assert_func+0x24>
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <__assert_func+0x30>)
 8007800:	9100      	str	r1, [sp, #0]
 8007802:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007806:	4907      	ldr	r1, [pc, #28]	; (8007824 <__assert_func+0x34>)
 8007808:	462b      	mov	r3, r5
 800780a:	4622      	mov	r2, r4
 800780c:	f000 f814 	bl	8007838 <fiprintf>
 8007810:	f000 fe3a 	bl	8008488 <abort>
 8007814:	4b04      	ldr	r3, [pc, #16]	; (8007828 <__assert_func+0x38>)
 8007816:	461a      	mov	r2, r3
 8007818:	e7f2      	b.n	8007800 <__assert_func+0x10>
 800781a:	bf00      	nop
 800781c:	20000220 	.word	0x20000220
 8007820:	08009b1a 	.word	0x08009b1a
 8007824:	08009b27 	.word	0x08009b27
 8007828:	08008b74 	.word	0x08008b74

0800782c <__errno>:
 800782c:	4b01      	ldr	r3, [pc, #4]	; (8007834 <__errno+0x8>)
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000220 	.word	0x20000220

08007838 <fiprintf>:
 8007838:	b40e      	push	{r1, r2, r3}
 800783a:	b503      	push	{r0, r1, lr}
 800783c:	4601      	mov	r1, r0
 800783e:	ab03      	add	r3, sp, #12
 8007840:	4805      	ldr	r0, [pc, #20]	; (8007858 <fiprintf+0x20>)
 8007842:	f853 2b04 	ldr.w	r2, [r3], #4
 8007846:	6800      	ldr	r0, [r0, #0]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	f000 f953 	bl	8007af4 <_vfiprintf_r>
 800784e:	b002      	add	sp, #8
 8007850:	f85d eb04 	ldr.w	lr, [sp], #4
 8007854:	b003      	add	sp, #12
 8007856:	4770      	bx	lr
 8007858:	20000220 	.word	0x20000220

0800785c <__libc_init_array>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	4e0d      	ldr	r6, [pc, #52]	; (8007894 <__libc_init_array+0x38>)
 8007860:	4c0d      	ldr	r4, [pc, #52]	; (8007898 <__libc_init_array+0x3c>)
 8007862:	1ba4      	subs	r4, r4, r6
 8007864:	10a4      	asrs	r4, r4, #2
 8007866:	2500      	movs	r5, #0
 8007868:	42a5      	cmp	r5, r4
 800786a:	d109      	bne.n	8007880 <__libc_init_array+0x24>
 800786c:	4e0b      	ldr	r6, [pc, #44]	; (800789c <__libc_init_array+0x40>)
 800786e:	4c0c      	ldr	r4, [pc, #48]	; (80078a0 <__libc_init_array+0x44>)
 8007870:	f001 f8e2 	bl	8008a38 <_init>
 8007874:	1ba4      	subs	r4, r4, r6
 8007876:	10a4      	asrs	r4, r4, #2
 8007878:	2500      	movs	r5, #0
 800787a:	42a5      	cmp	r5, r4
 800787c:	d105      	bne.n	800788a <__libc_init_array+0x2e>
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007884:	4798      	blx	r3
 8007886:	3501      	adds	r5, #1
 8007888:	e7ee      	b.n	8007868 <__libc_init_array+0xc>
 800788a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800788e:	4798      	blx	r3
 8007890:	3501      	adds	r5, #1
 8007892:	e7f2      	b.n	800787a <__libc_init_array+0x1e>
 8007894:	08009d00 	.word	0x08009d00
 8007898:	08009d00 	.word	0x08009d00
 800789c:	08009d00 	.word	0x08009d00
 80078a0:	08009d04 	.word	0x08009d04

080078a4 <__locale_ctype_ptr_l>:
 80078a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80078a8:	4770      	bx	lr
	...

080078ac <__locale_ctype_ptr>:
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <__locale_ctype_ptr+0x14>)
 80078ae:	4a05      	ldr	r2, [pc, #20]	; (80078c4 <__locale_ctype_ptr+0x18>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf08      	it	eq
 80078b8:	4613      	moveq	r3, r2
 80078ba:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80078be:	4770      	bx	lr
 80078c0:	20000220 	.word	0x20000220
 80078c4:	20000284 	.word	0x20000284

080078c8 <malloc>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <malloc+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f000 b88d 	b.w	80079ec <_malloc_r>
 80078d2:	bf00      	nop
 80078d4:	20000220 	.word	0x20000220

080078d8 <free>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <free+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f000 b837 	b.w	8007950 <_free_r>
 80078e2:	bf00      	nop
 80078e4:	20000220 	.word	0x20000220

080078e8 <__ascii_mbtowc>:
 80078e8:	b082      	sub	sp, #8
 80078ea:	b901      	cbnz	r1, 80078ee <__ascii_mbtowc+0x6>
 80078ec:	a901      	add	r1, sp, #4
 80078ee:	b142      	cbz	r2, 8007902 <__ascii_mbtowc+0x1a>
 80078f0:	b14b      	cbz	r3, 8007906 <__ascii_mbtowc+0x1e>
 80078f2:	7813      	ldrb	r3, [r2, #0]
 80078f4:	600b      	str	r3, [r1, #0]
 80078f6:	7812      	ldrb	r2, [r2, #0]
 80078f8:	1c10      	adds	r0, r2, #0
 80078fa:	bf18      	it	ne
 80078fc:	2001      	movne	r0, #1
 80078fe:	b002      	add	sp, #8
 8007900:	4770      	bx	lr
 8007902:	4610      	mov	r0, r2
 8007904:	e7fb      	b.n	80078fe <__ascii_mbtowc+0x16>
 8007906:	f06f 0001 	mvn.w	r0, #1
 800790a:	e7f8      	b.n	80078fe <__ascii_mbtowc+0x16>

0800790c <memcmp>:
 800790c:	b530      	push	{r4, r5, lr}
 800790e:	2400      	movs	r4, #0
 8007910:	42a2      	cmp	r2, r4
 8007912:	d101      	bne.n	8007918 <memcmp+0xc>
 8007914:	2000      	movs	r0, #0
 8007916:	e007      	b.n	8007928 <memcmp+0x1c>
 8007918:	5d03      	ldrb	r3, [r0, r4]
 800791a:	3401      	adds	r4, #1
 800791c:	190d      	adds	r5, r1, r4
 800791e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007922:	42ab      	cmp	r3, r5
 8007924:	d0f4      	beq.n	8007910 <memcmp+0x4>
 8007926:	1b58      	subs	r0, r3, r5
 8007928:	bd30      	pop	{r4, r5, pc}

0800792a <memcpy>:
 800792a:	b510      	push	{r4, lr}
 800792c:	1e43      	subs	r3, r0, #1
 800792e:	440a      	add	r2, r1
 8007930:	4291      	cmp	r1, r2
 8007932:	d100      	bne.n	8007936 <memcpy+0xc>
 8007934:	bd10      	pop	{r4, pc}
 8007936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793e:	e7f7      	b.n	8007930 <memcpy+0x6>

08007940 <memset>:
 8007940:	4402      	add	r2, r0
 8007942:	4603      	mov	r3, r0
 8007944:	4293      	cmp	r3, r2
 8007946:	d100      	bne.n	800794a <memset+0xa>
 8007948:	4770      	bx	lr
 800794a:	f803 1b01 	strb.w	r1, [r3], #1
 800794e:	e7f9      	b.n	8007944 <memset+0x4>

08007950 <_free_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4605      	mov	r5, r0
 8007954:	2900      	cmp	r1, #0
 8007956:	d045      	beq.n	80079e4 <_free_r+0x94>
 8007958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800795c:	1f0c      	subs	r4, r1, #4
 800795e:	2b00      	cmp	r3, #0
 8007960:	bfb8      	it	lt
 8007962:	18e4      	addlt	r4, r4, r3
 8007964:	f000 ff76 	bl	8008854 <__malloc_lock>
 8007968:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <_free_r+0x98>)
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	4610      	mov	r0, r2
 800796e:	b933      	cbnz	r3, 800797e <_free_r+0x2e>
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	6014      	str	r4, [r2, #0]
 8007974:	4628      	mov	r0, r5
 8007976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800797a:	f000 bf6c 	b.w	8008856 <__malloc_unlock>
 800797e:	42a3      	cmp	r3, r4
 8007980:	d90c      	bls.n	800799c <_free_r+0x4c>
 8007982:	6821      	ldr	r1, [r4, #0]
 8007984:	1862      	adds	r2, r4, r1
 8007986:	4293      	cmp	r3, r2
 8007988:	bf04      	itt	eq
 800798a:	681a      	ldreq	r2, [r3, #0]
 800798c:	685b      	ldreq	r3, [r3, #4]
 800798e:	6063      	str	r3, [r4, #4]
 8007990:	bf04      	itt	eq
 8007992:	1852      	addeq	r2, r2, r1
 8007994:	6022      	streq	r2, [r4, #0]
 8007996:	6004      	str	r4, [r0, #0]
 8007998:	e7ec      	b.n	8007974 <_free_r+0x24>
 800799a:	4613      	mov	r3, r2
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	b10a      	cbz	r2, 80079a4 <_free_r+0x54>
 80079a0:	42a2      	cmp	r2, r4
 80079a2:	d9fa      	bls.n	800799a <_free_r+0x4a>
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	1858      	adds	r0, r3, r1
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d10b      	bne.n	80079c4 <_free_r+0x74>
 80079ac:	6820      	ldr	r0, [r4, #0]
 80079ae:	4401      	add	r1, r0
 80079b0:	1858      	adds	r0, r3, r1
 80079b2:	4282      	cmp	r2, r0
 80079b4:	6019      	str	r1, [r3, #0]
 80079b6:	d1dd      	bne.n	8007974 <_free_r+0x24>
 80079b8:	6810      	ldr	r0, [r2, #0]
 80079ba:	6852      	ldr	r2, [r2, #4]
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	4401      	add	r1, r0
 80079c0:	6019      	str	r1, [r3, #0]
 80079c2:	e7d7      	b.n	8007974 <_free_r+0x24>
 80079c4:	d902      	bls.n	80079cc <_free_r+0x7c>
 80079c6:	230c      	movs	r3, #12
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	e7d3      	b.n	8007974 <_free_r+0x24>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	1821      	adds	r1, r4, r0
 80079d0:	428a      	cmp	r2, r1
 80079d2:	bf04      	itt	eq
 80079d4:	6811      	ldreq	r1, [r2, #0]
 80079d6:	6852      	ldreq	r2, [r2, #4]
 80079d8:	6062      	str	r2, [r4, #4]
 80079da:	bf04      	itt	eq
 80079dc:	1809      	addeq	r1, r1, r0
 80079de:	6021      	streq	r1, [r4, #0]
 80079e0:	605c      	str	r4, [r3, #4]
 80079e2:	e7c7      	b.n	8007974 <_free_r+0x24>
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	bf00      	nop
 80079e8:	20014d1c 	.word	0x20014d1c

080079ec <_malloc_r>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	1ccd      	adds	r5, r1, #3
 80079f0:	f025 0503 	bic.w	r5, r5, #3
 80079f4:	3508      	adds	r5, #8
 80079f6:	2d0c      	cmp	r5, #12
 80079f8:	bf38      	it	cc
 80079fa:	250c      	movcc	r5, #12
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	4606      	mov	r6, r0
 8007a00:	db01      	blt.n	8007a06 <_malloc_r+0x1a>
 8007a02:	42a9      	cmp	r1, r5
 8007a04:	d903      	bls.n	8007a0e <_malloc_r+0x22>
 8007a06:	230c      	movs	r3, #12
 8007a08:	6033      	str	r3, [r6, #0]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
 8007a0e:	f000 ff21 	bl	8008854 <__malloc_lock>
 8007a12:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <_malloc_r+0xac>)
 8007a14:	6814      	ldr	r4, [r2, #0]
 8007a16:	4621      	mov	r1, r4
 8007a18:	b991      	cbnz	r1, 8007a40 <_malloc_r+0x54>
 8007a1a:	4c20      	ldr	r4, [pc, #128]	; (8007a9c <_malloc_r+0xb0>)
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	b91b      	cbnz	r3, 8007a28 <_malloc_r+0x3c>
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 fb1d 	bl	8008060 <_sbrk_r>
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f000 fb18 	bl	8008060 <_sbrk_r>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d124      	bne.n	8007a7e <_malloc_r+0x92>
 8007a34:	230c      	movs	r3, #12
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f000 ff0c 	bl	8008856 <__malloc_unlock>
 8007a3e:	e7e4      	b.n	8007a0a <_malloc_r+0x1e>
 8007a40:	680b      	ldr	r3, [r1, #0]
 8007a42:	1b5b      	subs	r3, r3, r5
 8007a44:	d418      	bmi.n	8007a78 <_malloc_r+0x8c>
 8007a46:	2b0b      	cmp	r3, #11
 8007a48:	d90f      	bls.n	8007a6a <_malloc_r+0x7e>
 8007a4a:	600b      	str	r3, [r1, #0]
 8007a4c:	50cd      	str	r5, [r1, r3]
 8007a4e:	18cc      	adds	r4, r1, r3
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 ff00 	bl	8008856 <__malloc_unlock>
 8007a56:	f104 000b 	add.w	r0, r4, #11
 8007a5a:	1d23      	adds	r3, r4, #4
 8007a5c:	f020 0007 	bic.w	r0, r0, #7
 8007a60:	1ac3      	subs	r3, r0, r3
 8007a62:	d0d3      	beq.n	8007a0c <_malloc_r+0x20>
 8007a64:	425a      	negs	r2, r3
 8007a66:	50e2      	str	r2, [r4, r3]
 8007a68:	e7d0      	b.n	8007a0c <_malloc_r+0x20>
 8007a6a:	428c      	cmp	r4, r1
 8007a6c:	684b      	ldr	r3, [r1, #4]
 8007a6e:	bf16      	itet	ne
 8007a70:	6063      	strne	r3, [r4, #4]
 8007a72:	6013      	streq	r3, [r2, #0]
 8007a74:	460c      	movne	r4, r1
 8007a76:	e7eb      	b.n	8007a50 <_malloc_r+0x64>
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6849      	ldr	r1, [r1, #4]
 8007a7c:	e7cc      	b.n	8007a18 <_malloc_r+0x2c>
 8007a7e:	1cc4      	adds	r4, r0, #3
 8007a80:	f024 0403 	bic.w	r4, r4, #3
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d005      	beq.n	8007a94 <_malloc_r+0xa8>
 8007a88:	1a21      	subs	r1, r4, r0
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 fae8 	bl	8008060 <_sbrk_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	d0cf      	beq.n	8007a34 <_malloc_r+0x48>
 8007a94:	6025      	str	r5, [r4, #0]
 8007a96:	e7db      	b.n	8007a50 <_malloc_r+0x64>
 8007a98:	20014d1c 	.word	0x20014d1c
 8007a9c:	20014d20 	.word	0x20014d20

08007aa0 <__sfputc_r>:
 8007aa0:	6893      	ldr	r3, [r2, #8]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	b410      	push	{r4}
 8007aa8:	6093      	str	r3, [r2, #8]
 8007aaa:	da08      	bge.n	8007abe <__sfputc_r+0x1e>
 8007aac:	6994      	ldr	r4, [r2, #24]
 8007aae:	42a3      	cmp	r3, r4
 8007ab0:	db01      	blt.n	8007ab6 <__sfputc_r+0x16>
 8007ab2:	290a      	cmp	r1, #10
 8007ab4:	d103      	bne.n	8007abe <__sfputc_r+0x1e>
 8007ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aba:	f000 bc17 	b.w	80082ec <__swbuf_r>
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	1c58      	adds	r0, r3, #1
 8007ac2:	6010      	str	r0, [r2, #0]
 8007ac4:	7019      	strb	r1, [r3, #0]
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <__sfputs_r>:
 8007ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	18d5      	adds	r5, r2, r3
 8007ad8:	42ac      	cmp	r4, r5
 8007ada:	d101      	bne.n	8007ae0 <__sfputs_r+0x12>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e007      	b.n	8007af0 <__sfputs_r+0x22>
 8007ae0:	463a      	mov	r2, r7
 8007ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7ff ffda 	bl	8007aa0 <__sfputc_r>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d1f3      	bne.n	8007ad8 <__sfputs_r+0xa>
 8007af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007af4 <_vfiprintf_r>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	460c      	mov	r4, r1
 8007afa:	b09d      	sub	sp, #116	; 0x74
 8007afc:	4617      	mov	r7, r2
 8007afe:	461d      	mov	r5, r3
 8007b00:	4606      	mov	r6, r0
 8007b02:	b118      	cbz	r0, 8007b0c <_vfiprintf_r+0x18>
 8007b04:	6983      	ldr	r3, [r0, #24]
 8007b06:	b90b      	cbnz	r3, 8007b0c <_vfiprintf_r+0x18>
 8007b08:	f000 fdb6 	bl	8008678 <__sinit>
 8007b0c:	4b7c      	ldr	r3, [pc, #496]	; (8007d00 <_vfiprintf_r+0x20c>)
 8007b0e:	429c      	cmp	r4, r3
 8007b10:	d158      	bne.n	8007bc4 <_vfiprintf_r+0xd0>
 8007b12:	6874      	ldr	r4, [r6, #4]
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	0718      	lsls	r0, r3, #28
 8007b18:	d55e      	bpl.n	8007bd8 <_vfiprintf_r+0xe4>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d05b      	beq.n	8007bd8 <_vfiprintf_r+0xe4>
 8007b20:	2300      	movs	r3, #0
 8007b22:	9309      	str	r3, [sp, #36]	; 0x24
 8007b24:	2320      	movs	r3, #32
 8007b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b2a:	2330      	movs	r3, #48	; 0x30
 8007b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b30:	9503      	str	r5, [sp, #12]
 8007b32:	f04f 0b01 	mov.w	fp, #1
 8007b36:	46b8      	mov	r8, r7
 8007b38:	4645      	mov	r5, r8
 8007b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b3e:	b10b      	cbz	r3, 8007b44 <_vfiprintf_r+0x50>
 8007b40:	2b25      	cmp	r3, #37	; 0x25
 8007b42:	d154      	bne.n	8007bee <_vfiprintf_r+0xfa>
 8007b44:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b48:	d00b      	beq.n	8007b62 <_vfiprintf_r+0x6e>
 8007b4a:	4653      	mov	r3, sl
 8007b4c:	463a      	mov	r2, r7
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff ffbc 	bl	8007ace <__sfputs_r>
 8007b56:	3001      	adds	r0, #1
 8007b58:	f000 80c2 	beq.w	8007ce0 <_vfiprintf_r+0x1ec>
 8007b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5e:	4453      	add	r3, sl
 8007b60:	9309      	str	r3, [sp, #36]	; 0x24
 8007b62:	f898 3000 	ldrb.w	r3, [r8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80ba 	beq.w	8007ce0 <_vfiprintf_r+0x1ec>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	9307      	str	r3, [sp, #28]
 8007b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b80:	46a8      	mov	r8, r5
 8007b82:	2205      	movs	r2, #5
 8007b84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007b88:	485e      	ldr	r0, [pc, #376]	; (8007d04 <_vfiprintf_r+0x210>)
 8007b8a:	f7f8 fb39 	bl	8000200 <memchr>
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	bb78      	cbnz	r0, 8007bf2 <_vfiprintf_r+0xfe>
 8007b92:	06d9      	lsls	r1, r3, #27
 8007b94:	bf44      	itt	mi
 8007b96:	2220      	movmi	r2, #32
 8007b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b9c:	071a      	lsls	r2, r3, #28
 8007b9e:	bf44      	itt	mi
 8007ba0:	222b      	movmi	r2, #43	; 0x2b
 8007ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ba6:	782a      	ldrb	r2, [r5, #0]
 8007ba8:	2a2a      	cmp	r2, #42	; 0x2a
 8007baa:	d02a      	beq.n	8007c02 <_vfiprintf_r+0x10e>
 8007bac:	9a07      	ldr	r2, [sp, #28]
 8007bae:	46a8      	mov	r8, r5
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	250a      	movs	r5, #10
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bba:	3b30      	subs	r3, #48	; 0x30
 8007bbc:	2b09      	cmp	r3, #9
 8007bbe:	d969      	bls.n	8007c94 <_vfiprintf_r+0x1a0>
 8007bc0:	b360      	cbz	r0, 8007c1c <_vfiprintf_r+0x128>
 8007bc2:	e024      	b.n	8007c0e <_vfiprintf_r+0x11a>
 8007bc4:	4b50      	ldr	r3, [pc, #320]	; (8007d08 <_vfiprintf_r+0x214>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d101      	bne.n	8007bce <_vfiprintf_r+0xda>
 8007bca:	68b4      	ldr	r4, [r6, #8]
 8007bcc:	e7a2      	b.n	8007b14 <_vfiprintf_r+0x20>
 8007bce:	4b4f      	ldr	r3, [pc, #316]	; (8007d0c <_vfiprintf_r+0x218>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	bf08      	it	eq
 8007bd4:	68f4      	ldreq	r4, [r6, #12]
 8007bd6:	e79d      	b.n	8007b14 <_vfiprintf_r+0x20>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 fbe6 	bl	80083ac <__swsetup_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d09d      	beq.n	8007b20 <_vfiprintf_r+0x2c>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	b01d      	add	sp, #116	; 0x74
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	46a8      	mov	r8, r5
 8007bf0:	e7a2      	b.n	8007b38 <_vfiprintf_r+0x44>
 8007bf2:	4a44      	ldr	r2, [pc, #272]	; (8007d04 <_vfiprintf_r+0x210>)
 8007bf4:	1a80      	subs	r0, r0, r2
 8007bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8007bfa:	4318      	orrs	r0, r3
 8007bfc:	9004      	str	r0, [sp, #16]
 8007bfe:	4645      	mov	r5, r8
 8007c00:	e7be      	b.n	8007b80 <_vfiprintf_r+0x8c>
 8007c02:	9a03      	ldr	r2, [sp, #12]
 8007c04:	1d11      	adds	r1, r2, #4
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	9103      	str	r1, [sp, #12]
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	db01      	blt.n	8007c12 <_vfiprintf_r+0x11e>
 8007c0e:	9207      	str	r2, [sp, #28]
 8007c10:	e004      	b.n	8007c1c <_vfiprintf_r+0x128>
 8007c12:	4252      	negs	r2, r2
 8007c14:	f043 0302 	orr.w	r3, r3, #2
 8007c18:	9207      	str	r2, [sp, #28]
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	f898 3000 	ldrb.w	r3, [r8]
 8007c20:	2b2e      	cmp	r3, #46	; 0x2e
 8007c22:	d10e      	bne.n	8007c42 <_vfiprintf_r+0x14e>
 8007c24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c28:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2a:	d138      	bne.n	8007c9e <_vfiprintf_r+0x1aa>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	9203      	str	r2, [sp, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfb8      	it	lt
 8007c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c3c:	f108 0802 	add.w	r8, r8, #2
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	4d33      	ldr	r5, [pc, #204]	; (8007d10 <_vfiprintf_r+0x21c>)
 8007c44:	f898 1000 	ldrb.w	r1, [r8]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7f8 fad8 	bl	8000200 <memchr>
 8007c50:	b140      	cbz	r0, 8007c64 <_vfiprintf_r+0x170>
 8007c52:	2340      	movs	r3, #64	; 0x40
 8007c54:	1b40      	subs	r0, r0, r5
 8007c56:	fa03 f000 	lsl.w	r0, r3, r0
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	4303      	orrs	r3, r0
 8007c5e:	f108 0801 	add.w	r8, r8, #1
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	f898 1000 	ldrb.w	r1, [r8]
 8007c68:	482a      	ldr	r0, [pc, #168]	; (8007d14 <_vfiprintf_r+0x220>)
 8007c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6e:	2206      	movs	r2, #6
 8007c70:	f108 0701 	add.w	r7, r8, #1
 8007c74:	f7f8 fac4 	bl	8000200 <memchr>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d037      	beq.n	8007cec <_vfiprintf_r+0x1f8>
 8007c7c:	4b26      	ldr	r3, [pc, #152]	; (8007d18 <_vfiprintf_r+0x224>)
 8007c7e:	bb1b      	cbnz	r3, 8007cc8 <_vfiprintf_r+0x1d4>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	3307      	adds	r3, #7
 8007c84:	f023 0307 	bic.w	r3, r3, #7
 8007c88:	3308      	adds	r3, #8
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8e:	444b      	add	r3, r9
 8007c90:	9309      	str	r3, [sp, #36]	; 0x24
 8007c92:	e750      	b.n	8007b36 <_vfiprintf_r+0x42>
 8007c94:	fb05 3202 	mla	r2, r5, r2, r3
 8007c98:	2001      	movs	r0, #1
 8007c9a:	4688      	mov	r8, r1
 8007c9c:	e78a      	b.n	8007bb4 <_vfiprintf_r+0xc0>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f108 0801 	add.w	r8, r8, #1
 8007ca4:	9305      	str	r3, [sp, #20]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	250a      	movs	r5, #10
 8007caa:	4640      	mov	r0, r8
 8007cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cb0:	3a30      	subs	r2, #48	; 0x30
 8007cb2:	2a09      	cmp	r2, #9
 8007cb4:	d903      	bls.n	8007cbe <_vfiprintf_r+0x1ca>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0c3      	beq.n	8007c42 <_vfiprintf_r+0x14e>
 8007cba:	9105      	str	r1, [sp, #20]
 8007cbc:	e7c1      	b.n	8007c42 <_vfiprintf_r+0x14e>
 8007cbe:	fb05 2101 	mla	r1, r5, r1, r2
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	e7f0      	b.n	8007caa <_vfiprintf_r+0x1b6>
 8007cc8:	ab03      	add	r3, sp, #12
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <_vfiprintf_r+0x228>)
 8007cd0:	a904      	add	r1, sp, #16
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f3af 8000 	nop.w
 8007cd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cdc:	4681      	mov	r9, r0
 8007cde:	d1d5      	bne.n	8007c8c <_vfiprintf_r+0x198>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	065b      	lsls	r3, r3, #25
 8007ce4:	f53f af7e 	bmi.w	8007be4 <_vfiprintf_r+0xf0>
 8007ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cea:	e77d      	b.n	8007be8 <_vfiprintf_r+0xf4>
 8007cec:	ab03      	add	r3, sp, #12
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <_vfiprintf_r+0x228>)
 8007cf4:	a904      	add	r1, sp, #16
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 f888 	bl	8007e0c <_printf_i>
 8007cfc:	e7ec      	b.n	8007cd8 <_vfiprintf_r+0x1e4>
 8007cfe:	bf00      	nop
 8007d00:	08009cb8 	.word	0x08009cb8
 8007d04:	08009b62 	.word	0x08009b62
 8007d08:	08009cd8 	.word	0x08009cd8
 8007d0c:	08009c98 	.word	0x08009c98
 8007d10:	08009b68 	.word	0x08009b68
 8007d14:	08009b6c 	.word	0x08009b6c
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	08007acf 	.word	0x08007acf

08007d20 <_printf_common>:
 8007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	4691      	mov	r9, r2
 8007d26:	461f      	mov	r7, r3
 8007d28:	688a      	ldr	r2, [r1, #8]
 8007d2a:	690b      	ldr	r3, [r1, #16]
 8007d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d30:	4293      	cmp	r3, r2
 8007d32:	bfb8      	it	lt
 8007d34:	4613      	movlt	r3, r2
 8007d36:	f8c9 3000 	str.w	r3, [r9]
 8007d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	b112      	cbz	r2, 8007d4a <_printf_common+0x2a>
 8007d44:	3301      	adds	r3, #1
 8007d46:	f8c9 3000 	str.w	r3, [r9]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	0699      	lsls	r1, r3, #26
 8007d4e:	bf42      	ittt	mi
 8007d50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d54:	3302      	addmi	r3, #2
 8007d56:	f8c9 3000 	strmi.w	r3, [r9]
 8007d5a:	6825      	ldr	r5, [r4, #0]
 8007d5c:	f015 0506 	ands.w	r5, r5, #6
 8007d60:	d107      	bne.n	8007d72 <_printf_common+0x52>
 8007d62:	f104 0a19 	add.w	sl, r4, #25
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	f8d9 2000 	ldr.w	r2, [r9]
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	42ab      	cmp	r3, r5
 8007d70:	dc28      	bgt.n	8007dc4 <_printf_common+0xa4>
 8007d72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	3300      	adds	r3, #0
 8007d7a:	bf18      	it	ne
 8007d7c:	2301      	movne	r3, #1
 8007d7e:	0692      	lsls	r2, r2, #26
 8007d80:	d42d      	bmi.n	8007dde <_printf_common+0xbe>
 8007d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d86:	4639      	mov	r1, r7
 8007d88:	4630      	mov	r0, r6
 8007d8a:	47c0      	blx	r8
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d020      	beq.n	8007dd2 <_printf_common+0xb2>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	68e5      	ldr	r5, [r4, #12]
 8007d94:	f8d9 2000 	ldr.w	r2, [r9]
 8007d98:	f003 0306 	and.w	r3, r3, #6
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	bf08      	it	eq
 8007da0:	1aad      	subeq	r5, r5, r2
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	bf0c      	ite	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	2500      	movne	r5, #0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bfc4      	itt	gt
 8007db2:	1a9b      	subgt	r3, r3, r2
 8007db4:	18ed      	addgt	r5, r5, r3
 8007db6:	f04f 0900 	mov.w	r9, #0
 8007dba:	341a      	adds	r4, #26
 8007dbc:	454d      	cmp	r5, r9
 8007dbe:	d11a      	bne.n	8007df6 <_printf_common+0xd6>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e008      	b.n	8007dd6 <_printf_common+0xb6>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4630      	mov	r0, r6
 8007dcc:	47c0      	blx	r8
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d103      	bne.n	8007dda <_printf_common+0xba>
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	3501      	adds	r5, #1
 8007ddc:	e7c3      	b.n	8007d66 <_printf_common+0x46>
 8007dde:	18e1      	adds	r1, r4, r3
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	2030      	movs	r0, #48	; 0x30
 8007de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de8:	4422      	add	r2, r4
 8007dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007df2:	3302      	adds	r3, #2
 8007df4:	e7c5      	b.n	8007d82 <_printf_common+0x62>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	47c0      	blx	r8
 8007e00:	3001      	adds	r0, #1
 8007e02:	d0e6      	beq.n	8007dd2 <_printf_common+0xb2>
 8007e04:	f109 0901 	add.w	r9, r9, #1
 8007e08:	e7d8      	b.n	8007dbc <_printf_common+0x9c>
	...

08007e0c <_printf_i>:
 8007e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e14:	460c      	mov	r4, r1
 8007e16:	7e09      	ldrb	r1, [r1, #24]
 8007e18:	b085      	sub	sp, #20
 8007e1a:	296e      	cmp	r1, #110	; 0x6e
 8007e1c:	4617      	mov	r7, r2
 8007e1e:	4606      	mov	r6, r0
 8007e20:	4698      	mov	r8, r3
 8007e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e24:	f000 80b3 	beq.w	8007f8e <_printf_i+0x182>
 8007e28:	d822      	bhi.n	8007e70 <_printf_i+0x64>
 8007e2a:	2963      	cmp	r1, #99	; 0x63
 8007e2c:	d036      	beq.n	8007e9c <_printf_i+0x90>
 8007e2e:	d80a      	bhi.n	8007e46 <_printf_i+0x3a>
 8007e30:	2900      	cmp	r1, #0
 8007e32:	f000 80b9 	beq.w	8007fa8 <_printf_i+0x19c>
 8007e36:	2958      	cmp	r1, #88	; 0x58
 8007e38:	f000 8083 	beq.w	8007f42 <_printf_i+0x136>
 8007e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e44:	e032      	b.n	8007eac <_printf_i+0xa0>
 8007e46:	2964      	cmp	r1, #100	; 0x64
 8007e48:	d001      	beq.n	8007e4e <_printf_i+0x42>
 8007e4a:	2969      	cmp	r1, #105	; 0x69
 8007e4c:	d1f6      	bne.n	8007e3c <_printf_i+0x30>
 8007e4e:	6820      	ldr	r0, [r4, #0]
 8007e50:	6813      	ldr	r3, [r2, #0]
 8007e52:	0605      	lsls	r5, r0, #24
 8007e54:	f103 0104 	add.w	r1, r3, #4
 8007e58:	d52a      	bpl.n	8007eb0 <_printf_i+0xa4>
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da03      	bge.n	8007e6a <_printf_i+0x5e>
 8007e62:	222d      	movs	r2, #45	; 0x2d
 8007e64:	425b      	negs	r3, r3
 8007e66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e6a:	486f      	ldr	r0, [pc, #444]	; (8008028 <_printf_i+0x21c>)
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	e039      	b.n	8007ee4 <_printf_i+0xd8>
 8007e70:	2973      	cmp	r1, #115	; 0x73
 8007e72:	f000 809d 	beq.w	8007fb0 <_printf_i+0x1a4>
 8007e76:	d808      	bhi.n	8007e8a <_printf_i+0x7e>
 8007e78:	296f      	cmp	r1, #111	; 0x6f
 8007e7a:	d020      	beq.n	8007ebe <_printf_i+0xb2>
 8007e7c:	2970      	cmp	r1, #112	; 0x70
 8007e7e:	d1dd      	bne.n	8007e3c <_printf_i+0x30>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	f043 0320 	orr.w	r3, r3, #32
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	e003      	b.n	8007e92 <_printf_i+0x86>
 8007e8a:	2975      	cmp	r1, #117	; 0x75
 8007e8c:	d017      	beq.n	8007ebe <_printf_i+0xb2>
 8007e8e:	2978      	cmp	r1, #120	; 0x78
 8007e90:	d1d4      	bne.n	8007e3c <_printf_i+0x30>
 8007e92:	2378      	movs	r3, #120	; 0x78
 8007e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e98:	4864      	ldr	r0, [pc, #400]	; (800802c <_printf_i+0x220>)
 8007e9a:	e055      	b.n	8007f48 <_printf_i+0x13c>
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	1d19      	adds	r1, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6011      	str	r1, [r2, #0]
 8007ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eac:	2301      	movs	r3, #1
 8007eae:	e08c      	b.n	8007fca <_printf_i+0x1be>
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6011      	str	r1, [r2, #0]
 8007eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eb8:	bf18      	it	ne
 8007eba:	b21b      	sxthne	r3, r3
 8007ebc:	e7cf      	b.n	8007e5e <_printf_i+0x52>
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	6825      	ldr	r5, [r4, #0]
 8007ec2:	1d18      	adds	r0, r3, #4
 8007ec4:	6010      	str	r0, [r2, #0]
 8007ec6:	0628      	lsls	r0, r5, #24
 8007ec8:	d501      	bpl.n	8007ece <_printf_i+0xc2>
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	e002      	b.n	8007ed4 <_printf_i+0xc8>
 8007ece:	0668      	lsls	r0, r5, #25
 8007ed0:	d5fb      	bpl.n	8007eca <_printf_i+0xbe>
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	4854      	ldr	r0, [pc, #336]	; (8008028 <_printf_i+0x21c>)
 8007ed6:	296f      	cmp	r1, #111	; 0x6f
 8007ed8:	bf14      	ite	ne
 8007eda:	220a      	movne	r2, #10
 8007edc:	2208      	moveq	r2, #8
 8007ede:	2100      	movs	r1, #0
 8007ee0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ee4:	6865      	ldr	r5, [r4, #4]
 8007ee6:	60a5      	str	r5, [r4, #8]
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	f2c0 8095 	blt.w	8008018 <_printf_i+0x20c>
 8007eee:	6821      	ldr	r1, [r4, #0]
 8007ef0:	f021 0104 	bic.w	r1, r1, #4
 8007ef4:	6021      	str	r1, [r4, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d13d      	bne.n	8007f76 <_printf_i+0x16a>
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	f040 808e 	bne.w	800801c <_printf_i+0x210>
 8007f00:	4665      	mov	r5, ip
 8007f02:	2a08      	cmp	r2, #8
 8007f04:	d10b      	bne.n	8007f1e <_printf_i+0x112>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	07db      	lsls	r3, r3, #31
 8007f0a:	d508      	bpl.n	8007f1e <_printf_i+0x112>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	bfde      	ittt	le
 8007f14:	2330      	movle	r3, #48	; 0x30
 8007f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f1e:	ebac 0305 	sub.w	r3, ip, r5
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	f8cd 8000 	str.w	r8, [sp]
 8007f28:	463b      	mov	r3, r7
 8007f2a:	aa03      	add	r2, sp, #12
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7ff fef6 	bl	8007d20 <_printf_common>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d14d      	bne.n	8007fd4 <_printf_i+0x1c8>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b005      	add	sp, #20
 8007f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f42:	4839      	ldr	r0, [pc, #228]	; (8008028 <_printf_i+0x21c>)
 8007f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f48:	6813      	ldr	r3, [r2, #0]
 8007f4a:	6821      	ldr	r1, [r4, #0]
 8007f4c:	1d1d      	adds	r5, r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6015      	str	r5, [r2, #0]
 8007f52:	060a      	lsls	r2, r1, #24
 8007f54:	d50b      	bpl.n	8007f6e <_printf_i+0x162>
 8007f56:	07ca      	lsls	r2, r1, #31
 8007f58:	bf44      	itt	mi
 8007f5a:	f041 0120 	orrmi.w	r1, r1, #32
 8007f5e:	6021      	strmi	r1, [r4, #0]
 8007f60:	b91b      	cbnz	r3, 8007f6a <_printf_i+0x15e>
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	f022 0220 	bic.w	r2, r2, #32
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	e7b7      	b.n	8007ede <_printf_i+0xd2>
 8007f6e:	064d      	lsls	r5, r1, #25
 8007f70:	bf48      	it	mi
 8007f72:	b29b      	uxthmi	r3, r3
 8007f74:	e7ef      	b.n	8007f56 <_printf_i+0x14a>
 8007f76:	4665      	mov	r5, ip
 8007f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f7c:	fb02 3311 	mls	r3, r2, r1, r3
 8007f80:	5cc3      	ldrb	r3, [r0, r3]
 8007f82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f86:	460b      	mov	r3, r1
 8007f88:	2900      	cmp	r1, #0
 8007f8a:	d1f5      	bne.n	8007f78 <_printf_i+0x16c>
 8007f8c:	e7b9      	b.n	8007f02 <_printf_i+0xf6>
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	6825      	ldr	r5, [r4, #0]
 8007f92:	6961      	ldr	r1, [r4, #20]
 8007f94:	1d18      	adds	r0, r3, #4
 8007f96:	6010      	str	r0, [r2, #0]
 8007f98:	0628      	lsls	r0, r5, #24
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	d501      	bpl.n	8007fa2 <_printf_i+0x196>
 8007f9e:	6019      	str	r1, [r3, #0]
 8007fa0:	e002      	b.n	8007fa8 <_printf_i+0x19c>
 8007fa2:	066a      	lsls	r2, r5, #25
 8007fa4:	d5fb      	bpl.n	8007f9e <_printf_i+0x192>
 8007fa6:	8019      	strh	r1, [r3, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	4665      	mov	r5, ip
 8007fae:	e7b9      	b.n	8007f24 <_printf_i+0x118>
 8007fb0:	6813      	ldr	r3, [r2, #0]
 8007fb2:	1d19      	adds	r1, r3, #4
 8007fb4:	6011      	str	r1, [r2, #0]
 8007fb6:	681d      	ldr	r5, [r3, #0]
 8007fb8:	6862      	ldr	r2, [r4, #4]
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f7f8 f91f 	bl	8000200 <memchr>
 8007fc2:	b108      	cbz	r0, 8007fc8 <_printf_i+0x1bc>
 8007fc4:	1b40      	subs	r0, r0, r5
 8007fc6:	6060      	str	r0, [r4, #4]
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd2:	e7a7      	b.n	8007f24 <_printf_i+0x118>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4630      	mov	r0, r6
 8007fdc:	47c0      	blx	r8
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d0aa      	beq.n	8007f38 <_printf_i+0x12c>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	079b      	lsls	r3, r3, #30
 8007fe6:	d413      	bmi.n	8008010 <_printf_i+0x204>
 8007fe8:	68e0      	ldr	r0, [r4, #12]
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	4298      	cmp	r0, r3
 8007fee:	bfb8      	it	lt
 8007ff0:	4618      	movlt	r0, r3
 8007ff2:	e7a3      	b.n	8007f3c <_printf_i+0x130>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	464a      	mov	r2, r9
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	47c0      	blx	r8
 8007ffe:	3001      	adds	r0, #1
 8008000:	d09a      	beq.n	8007f38 <_printf_i+0x12c>
 8008002:	3501      	adds	r5, #1
 8008004:	68e3      	ldr	r3, [r4, #12]
 8008006:	9a03      	ldr	r2, [sp, #12]
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	42ab      	cmp	r3, r5
 800800c:	dcf2      	bgt.n	8007ff4 <_printf_i+0x1e8>
 800800e:	e7eb      	b.n	8007fe8 <_printf_i+0x1dc>
 8008010:	2500      	movs	r5, #0
 8008012:	f104 0919 	add.w	r9, r4, #25
 8008016:	e7f5      	b.n	8008004 <_printf_i+0x1f8>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1ac      	bne.n	8007f76 <_printf_i+0x16a>
 800801c:	7803      	ldrb	r3, [r0, #0]
 800801e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008026:	e76c      	b.n	8007f02 <_printf_i+0xf6>
 8008028:	08009b73 	.word	0x08009b73
 800802c:	08009b84 	.word	0x08009b84

08008030 <iprintf>:
 8008030:	b40f      	push	{r0, r1, r2, r3}
 8008032:	4b0a      	ldr	r3, [pc, #40]	; (800805c <iprintf+0x2c>)
 8008034:	b513      	push	{r0, r1, r4, lr}
 8008036:	681c      	ldr	r4, [r3, #0]
 8008038:	b124      	cbz	r4, 8008044 <iprintf+0x14>
 800803a:	69a3      	ldr	r3, [r4, #24]
 800803c:	b913      	cbnz	r3, 8008044 <iprintf+0x14>
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fb1a 	bl	8008678 <__sinit>
 8008044:	ab05      	add	r3, sp, #20
 8008046:	9a04      	ldr	r2, [sp, #16]
 8008048:	68a1      	ldr	r1, [r4, #8]
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	4620      	mov	r0, r4
 800804e:	f7ff fd51 	bl	8007af4 <_vfiprintf_r>
 8008052:	b002      	add	sp, #8
 8008054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008058:	b004      	add	sp, #16
 800805a:	4770      	bx	lr
 800805c:	20000220 	.word	0x20000220

08008060 <_sbrk_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4c06      	ldr	r4, [pc, #24]	; (800807c <_sbrk_r+0x1c>)
 8008064:	2300      	movs	r3, #0
 8008066:	4605      	mov	r5, r0
 8008068:	4608      	mov	r0, r1
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	f7fe fa74 	bl	8006558 <_sbrk>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_sbrk_r+0x1a>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	b103      	cbz	r3, 800807a <_sbrk_r+0x1a>
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20014e80 	.word	0x20014e80

08008080 <strchr>:
 8008080:	b2c9      	uxtb	r1, r1
 8008082:	4603      	mov	r3, r0
 8008084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008088:	b11a      	cbz	r2, 8008092 <strchr+0x12>
 800808a:	428a      	cmp	r2, r1
 800808c:	d1f9      	bne.n	8008082 <strchr+0x2>
 800808e:	4618      	mov	r0, r3
 8008090:	4770      	bx	lr
 8008092:	2900      	cmp	r1, #0
 8008094:	bf18      	it	ne
 8008096:	2300      	movne	r3, #0
 8008098:	e7f9      	b.n	800808e <strchr+0xe>

0800809a <strcpy>:
 800809a:	4603      	mov	r3, r0
 800809c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080a0:	f803 2b01 	strb.w	r2, [r3], #1
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d1f9      	bne.n	800809c <strcpy+0x2>
 80080a8:	4770      	bx	lr

080080aa <strcspn>:
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	4603      	mov	r3, r0
 80080ae:	461a      	mov	r2, r3
 80080b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080b4:	b14d      	cbz	r5, 80080ca <strcspn+0x20>
 80080b6:	1e4c      	subs	r4, r1, #1
 80080b8:	e001      	b.n	80080be <strcspn+0x14>
 80080ba:	42ae      	cmp	r6, r5
 80080bc:	d005      	beq.n	80080ca <strcspn+0x20>
 80080be:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	d1f9      	bne.n	80080ba <strcspn+0x10>
 80080c6:	4613      	mov	r3, r2
 80080c8:	e7f1      	b.n	80080ae <strcspn+0x4>
 80080ca:	1a18      	subs	r0, r3, r0
 80080cc:	bd70      	pop	{r4, r5, r6, pc}

080080ce <strspn>:
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080d8:	b13d      	cbz	r5, 80080ea <strspn+0x1c>
 80080da:	1e4c      	subs	r4, r1, #1
 80080dc:	e001      	b.n	80080e2 <strspn+0x14>
 80080de:	42ae      	cmp	r6, r5
 80080e0:	d005      	beq.n	80080ee <strspn+0x20>
 80080e2:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d1f9      	bne.n	80080de <strspn+0x10>
 80080ea:	1a18      	subs	r0, r3, r0
 80080ec:	bd70      	pop	{r4, r5, r6, pc}
 80080ee:	4613      	mov	r3, r2
 80080f0:	e7ef      	b.n	80080d2 <strspn+0x4>
	...

080080f4 <strtok>:
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <strtok+0x50>)
 80080f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fa:	681d      	ldr	r5, [r3, #0]
 80080fc:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	b9b4      	cbnz	r4, 8008132 <strtok+0x3e>
 8008104:	2050      	movs	r0, #80	; 0x50
 8008106:	f7ff fbdf 	bl	80078c8 <malloc>
 800810a:	65a8      	str	r0, [r5, #88]	; 0x58
 800810c:	e9c0 4400 	strd	r4, r4, [r0]
 8008110:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008114:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008118:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800811c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008120:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008124:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008128:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800812c:	6184      	str	r4, [r0, #24]
 800812e:	7704      	strb	r4, [r0, #28]
 8008130:	6244      	str	r4, [r0, #36]	; 0x24
 8008132:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008134:	4639      	mov	r1, r7
 8008136:	4630      	mov	r0, r6
 8008138:	2301      	movs	r3, #1
 800813a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813e:	f000 b803 	b.w	8008148 <__strtok_r>
 8008142:	bf00      	nop
 8008144:	20000220 	.word	0x20000220

08008148 <__strtok_r>:
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	b918      	cbnz	r0, 8008154 <__strtok_r+0xc>
 800814c:	6810      	ldr	r0, [r2, #0]
 800814e:	b908      	cbnz	r0, 8008154 <__strtok_r+0xc>
 8008150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008152:	4620      	mov	r0, r4
 8008154:	4604      	mov	r4, r0
 8008156:	460f      	mov	r7, r1
 8008158:	f814 5b01 	ldrb.w	r5, [r4], #1
 800815c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008160:	b91e      	cbnz	r6, 800816a <__strtok_r+0x22>
 8008162:	b96d      	cbnz	r5, 8008180 <__strtok_r+0x38>
 8008164:	6015      	str	r5, [r2, #0]
 8008166:	4628      	mov	r0, r5
 8008168:	e7f2      	b.n	8008150 <__strtok_r+0x8>
 800816a:	42b5      	cmp	r5, r6
 800816c:	d1f6      	bne.n	800815c <__strtok_r+0x14>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1ef      	bne.n	8008152 <__strtok_r+0xa>
 8008172:	6014      	str	r4, [r2, #0]
 8008174:	7003      	strb	r3, [r0, #0]
 8008176:	e7eb      	b.n	8008150 <__strtok_r+0x8>
 8008178:	462b      	mov	r3, r5
 800817a:	e00d      	b.n	8008198 <__strtok_r+0x50>
 800817c:	b926      	cbnz	r6, 8008188 <__strtok_r+0x40>
 800817e:	461c      	mov	r4, r3
 8008180:	4623      	mov	r3, r4
 8008182:	460f      	mov	r7, r1
 8008184:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008188:	f817 6b01 	ldrb.w	r6, [r7], #1
 800818c:	42b5      	cmp	r5, r6
 800818e:	d1f5      	bne.n	800817c <__strtok_r+0x34>
 8008190:	2d00      	cmp	r5, #0
 8008192:	d0f1      	beq.n	8008178 <__strtok_r+0x30>
 8008194:	2100      	movs	r1, #0
 8008196:	7021      	strb	r1, [r4, #0]
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e7d9      	b.n	8008150 <__strtok_r+0x8>

0800819c <_strtol_l.isra.0>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	4680      	mov	r8, r0
 80081a2:	4689      	mov	r9, r1
 80081a4:	4692      	mov	sl, r2
 80081a6:	461e      	mov	r6, r3
 80081a8:	460f      	mov	r7, r1
 80081aa:	463d      	mov	r5, r7
 80081ac:	9808      	ldr	r0, [sp, #32]
 80081ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b2:	f7ff fb77 	bl	80078a4 <__locale_ctype_ptr_l>
 80081b6:	4420      	add	r0, r4
 80081b8:	7843      	ldrb	r3, [r0, #1]
 80081ba:	f013 0308 	ands.w	r3, r3, #8
 80081be:	d132      	bne.n	8008226 <_strtol_l.isra.0+0x8a>
 80081c0:	2c2d      	cmp	r4, #45	; 0x2d
 80081c2:	d132      	bne.n	800822a <_strtol_l.isra.0+0x8e>
 80081c4:	787c      	ldrb	r4, [r7, #1]
 80081c6:	1cbd      	adds	r5, r7, #2
 80081c8:	2201      	movs	r2, #1
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d05d      	beq.n	800828a <_strtol_l.isra.0+0xee>
 80081ce:	2e10      	cmp	r6, #16
 80081d0:	d109      	bne.n	80081e6 <_strtol_l.isra.0+0x4a>
 80081d2:	2c30      	cmp	r4, #48	; 0x30
 80081d4:	d107      	bne.n	80081e6 <_strtol_l.isra.0+0x4a>
 80081d6:	782b      	ldrb	r3, [r5, #0]
 80081d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081dc:	2b58      	cmp	r3, #88	; 0x58
 80081de:	d14f      	bne.n	8008280 <_strtol_l.isra.0+0xe4>
 80081e0:	786c      	ldrb	r4, [r5, #1]
 80081e2:	2610      	movs	r6, #16
 80081e4:	3502      	adds	r5, #2
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	bf14      	ite	ne
 80081ea:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80081ee:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80081f2:	2700      	movs	r7, #0
 80081f4:	fbb1 fcf6 	udiv	ip, r1, r6
 80081f8:	4638      	mov	r0, r7
 80081fa:	fb06 1e1c 	mls	lr, r6, ip, r1
 80081fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008202:	2b09      	cmp	r3, #9
 8008204:	d817      	bhi.n	8008236 <_strtol_l.isra.0+0x9a>
 8008206:	461c      	mov	r4, r3
 8008208:	42a6      	cmp	r6, r4
 800820a:	dd23      	ble.n	8008254 <_strtol_l.isra.0+0xb8>
 800820c:	1c7b      	adds	r3, r7, #1
 800820e:	d007      	beq.n	8008220 <_strtol_l.isra.0+0x84>
 8008210:	4584      	cmp	ip, r0
 8008212:	d31c      	bcc.n	800824e <_strtol_l.isra.0+0xb2>
 8008214:	d101      	bne.n	800821a <_strtol_l.isra.0+0x7e>
 8008216:	45a6      	cmp	lr, r4
 8008218:	db19      	blt.n	800824e <_strtol_l.isra.0+0xb2>
 800821a:	fb00 4006 	mla	r0, r0, r6, r4
 800821e:	2701      	movs	r7, #1
 8008220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008224:	e7eb      	b.n	80081fe <_strtol_l.isra.0+0x62>
 8008226:	462f      	mov	r7, r5
 8008228:	e7bf      	b.n	80081aa <_strtol_l.isra.0+0xe>
 800822a:	2c2b      	cmp	r4, #43	; 0x2b
 800822c:	bf04      	itt	eq
 800822e:	1cbd      	addeq	r5, r7, #2
 8008230:	787c      	ldrbeq	r4, [r7, #1]
 8008232:	461a      	mov	r2, r3
 8008234:	e7c9      	b.n	80081ca <_strtol_l.isra.0+0x2e>
 8008236:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800823a:	2b19      	cmp	r3, #25
 800823c:	d801      	bhi.n	8008242 <_strtol_l.isra.0+0xa6>
 800823e:	3c37      	subs	r4, #55	; 0x37
 8008240:	e7e2      	b.n	8008208 <_strtol_l.isra.0+0x6c>
 8008242:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008246:	2b19      	cmp	r3, #25
 8008248:	d804      	bhi.n	8008254 <_strtol_l.isra.0+0xb8>
 800824a:	3c57      	subs	r4, #87	; 0x57
 800824c:	e7dc      	b.n	8008208 <_strtol_l.isra.0+0x6c>
 800824e:	f04f 37ff 	mov.w	r7, #4294967295
 8008252:	e7e5      	b.n	8008220 <_strtol_l.isra.0+0x84>
 8008254:	1c7b      	adds	r3, r7, #1
 8008256:	d108      	bne.n	800826a <_strtol_l.isra.0+0xce>
 8008258:	2322      	movs	r3, #34	; 0x22
 800825a:	f8c8 3000 	str.w	r3, [r8]
 800825e:	4608      	mov	r0, r1
 8008260:	f1ba 0f00 	cmp.w	sl, #0
 8008264:	d107      	bne.n	8008276 <_strtol_l.isra.0+0xda>
 8008266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826a:	b102      	cbz	r2, 800826e <_strtol_l.isra.0+0xd2>
 800826c:	4240      	negs	r0, r0
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	d0f8      	beq.n	8008266 <_strtol_l.isra.0+0xca>
 8008274:	b10f      	cbz	r7, 800827a <_strtol_l.isra.0+0xde>
 8008276:	f105 39ff 	add.w	r9, r5, #4294967295
 800827a:	f8ca 9000 	str.w	r9, [sl]
 800827e:	e7f2      	b.n	8008266 <_strtol_l.isra.0+0xca>
 8008280:	2430      	movs	r4, #48	; 0x30
 8008282:	2e00      	cmp	r6, #0
 8008284:	d1af      	bne.n	80081e6 <_strtol_l.isra.0+0x4a>
 8008286:	2608      	movs	r6, #8
 8008288:	e7ad      	b.n	80081e6 <_strtol_l.isra.0+0x4a>
 800828a:	2c30      	cmp	r4, #48	; 0x30
 800828c:	d0a3      	beq.n	80081d6 <_strtol_l.isra.0+0x3a>
 800828e:	260a      	movs	r6, #10
 8008290:	e7a9      	b.n	80081e6 <_strtol_l.isra.0+0x4a>
	...

08008294 <strtol>:
 8008294:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <strtol+0x24>)
 8008296:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008298:	681c      	ldr	r4, [r3, #0]
 800829a:	4d08      	ldr	r5, [pc, #32]	; (80082bc <strtol+0x28>)
 800829c:	6a23      	ldr	r3, [r4, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf08      	it	eq
 80082a2:	462b      	moveq	r3, r5
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	4613      	mov	r3, r2
 80082a8:	460a      	mov	r2, r1
 80082aa:	4601      	mov	r1, r0
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7ff ff75 	bl	800819c <_strtol_l.isra.0>
 80082b2:	b003      	add	sp, #12
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	bf00      	nop
 80082b8:	20000220 	.word	0x20000220
 80082bc:	20000284 	.word	0x20000284

080082c0 <viprintf>:
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <viprintf+0x28>)
 80082c2:	b570      	push	{r4, r5, r6, lr}
 80082c4:	681c      	ldr	r4, [r3, #0]
 80082c6:	4605      	mov	r5, r0
 80082c8:	460e      	mov	r6, r1
 80082ca:	b124      	cbz	r4, 80082d6 <viprintf+0x16>
 80082cc:	69a3      	ldr	r3, [r4, #24]
 80082ce:	b913      	cbnz	r3, 80082d6 <viprintf+0x16>
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 f9d1 	bl	8008678 <__sinit>
 80082d6:	4633      	mov	r3, r6
 80082d8:	462a      	mov	r2, r5
 80082da:	68a1      	ldr	r1, [r4, #8]
 80082dc:	4620      	mov	r0, r4
 80082de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082e2:	f7ff bc07 	b.w	8007af4 <_vfiprintf_r>
 80082e6:	bf00      	nop
 80082e8:	20000220 	.word	0x20000220

080082ec <__swbuf_r>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	460e      	mov	r6, r1
 80082f0:	4614      	mov	r4, r2
 80082f2:	4605      	mov	r5, r0
 80082f4:	b118      	cbz	r0, 80082fe <__swbuf_r+0x12>
 80082f6:	6983      	ldr	r3, [r0, #24]
 80082f8:	b90b      	cbnz	r3, 80082fe <__swbuf_r+0x12>
 80082fa:	f000 f9bd 	bl	8008678 <__sinit>
 80082fe:	4b21      	ldr	r3, [pc, #132]	; (8008384 <__swbuf_r+0x98>)
 8008300:	429c      	cmp	r4, r3
 8008302:	d12a      	bne.n	800835a <__swbuf_r+0x6e>
 8008304:	686c      	ldr	r4, [r5, #4]
 8008306:	69a3      	ldr	r3, [r4, #24]
 8008308:	60a3      	str	r3, [r4, #8]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	071a      	lsls	r2, r3, #28
 800830e:	d52e      	bpl.n	800836e <__swbuf_r+0x82>
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	b363      	cbz	r3, 800836e <__swbuf_r+0x82>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	1ac0      	subs	r0, r0, r3
 800831a:	6963      	ldr	r3, [r4, #20]
 800831c:	b2f6      	uxtb	r6, r6
 800831e:	4283      	cmp	r3, r0
 8008320:	4637      	mov	r7, r6
 8008322:	dc04      	bgt.n	800832e <__swbuf_r+0x42>
 8008324:	4621      	mov	r1, r4
 8008326:	4628      	mov	r0, r5
 8008328:	f000 f93c 	bl	80085a4 <_fflush_r>
 800832c:	bb28      	cbnz	r0, 800837a <__swbuf_r+0x8e>
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	3b01      	subs	r3, #1
 8008332:	60a3      	str	r3, [r4, #8]
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	6022      	str	r2, [r4, #0]
 800833a:	701e      	strb	r6, [r3, #0]
 800833c:	6963      	ldr	r3, [r4, #20]
 800833e:	3001      	adds	r0, #1
 8008340:	4283      	cmp	r3, r0
 8008342:	d004      	beq.n	800834e <__swbuf_r+0x62>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	07db      	lsls	r3, r3, #31
 8008348:	d519      	bpl.n	800837e <__swbuf_r+0x92>
 800834a:	2e0a      	cmp	r6, #10
 800834c:	d117      	bne.n	800837e <__swbuf_r+0x92>
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 f927 	bl	80085a4 <_fflush_r>
 8008356:	b190      	cbz	r0, 800837e <__swbuf_r+0x92>
 8008358:	e00f      	b.n	800837a <__swbuf_r+0x8e>
 800835a:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <__swbuf_r+0x9c>)
 800835c:	429c      	cmp	r4, r3
 800835e:	d101      	bne.n	8008364 <__swbuf_r+0x78>
 8008360:	68ac      	ldr	r4, [r5, #8]
 8008362:	e7d0      	b.n	8008306 <__swbuf_r+0x1a>
 8008364:	4b09      	ldr	r3, [pc, #36]	; (800838c <__swbuf_r+0xa0>)
 8008366:	429c      	cmp	r4, r3
 8008368:	bf08      	it	eq
 800836a:	68ec      	ldreq	r4, [r5, #12]
 800836c:	e7cb      	b.n	8008306 <__swbuf_r+0x1a>
 800836e:	4621      	mov	r1, r4
 8008370:	4628      	mov	r0, r5
 8008372:	f000 f81b 	bl	80083ac <__swsetup_r>
 8008376:	2800      	cmp	r0, #0
 8008378:	d0cc      	beq.n	8008314 <__swbuf_r+0x28>
 800837a:	f04f 37ff 	mov.w	r7, #4294967295
 800837e:	4638      	mov	r0, r7
 8008380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008382:	bf00      	nop
 8008384:	08009cb8 	.word	0x08009cb8
 8008388:	08009cd8 	.word	0x08009cd8
 800838c:	08009c98 	.word	0x08009c98

08008390 <__ascii_wctomb>:
 8008390:	b149      	cbz	r1, 80083a6 <__ascii_wctomb+0x16>
 8008392:	2aff      	cmp	r2, #255	; 0xff
 8008394:	bf85      	ittet	hi
 8008396:	238a      	movhi	r3, #138	; 0x8a
 8008398:	6003      	strhi	r3, [r0, #0]
 800839a:	700a      	strbls	r2, [r1, #0]
 800839c:	f04f 30ff 	movhi.w	r0, #4294967295
 80083a0:	bf98      	it	ls
 80083a2:	2001      	movls	r0, #1
 80083a4:	4770      	bx	lr
 80083a6:	4608      	mov	r0, r1
 80083a8:	4770      	bx	lr
	...

080083ac <__swsetup_r>:
 80083ac:	4b32      	ldr	r3, [pc, #200]	; (8008478 <__swsetup_r+0xcc>)
 80083ae:	b570      	push	{r4, r5, r6, lr}
 80083b0:	681d      	ldr	r5, [r3, #0]
 80083b2:	4606      	mov	r6, r0
 80083b4:	460c      	mov	r4, r1
 80083b6:	b125      	cbz	r5, 80083c2 <__swsetup_r+0x16>
 80083b8:	69ab      	ldr	r3, [r5, #24]
 80083ba:	b913      	cbnz	r3, 80083c2 <__swsetup_r+0x16>
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 f95b 	bl	8008678 <__sinit>
 80083c2:	4b2e      	ldr	r3, [pc, #184]	; (800847c <__swsetup_r+0xd0>)
 80083c4:	429c      	cmp	r4, r3
 80083c6:	d10f      	bne.n	80083e8 <__swsetup_r+0x3c>
 80083c8:	686c      	ldr	r4, [r5, #4]
 80083ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	0715      	lsls	r5, r2, #28
 80083d2:	d42c      	bmi.n	800842e <__swsetup_r+0x82>
 80083d4:	06d0      	lsls	r0, r2, #27
 80083d6:	d411      	bmi.n	80083fc <__swsetup_r+0x50>
 80083d8:	2209      	movs	r2, #9
 80083da:	6032      	str	r2, [r6, #0]
 80083dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	e03e      	b.n	8008466 <__swsetup_r+0xba>
 80083e8:	4b25      	ldr	r3, [pc, #148]	; (8008480 <__swsetup_r+0xd4>)
 80083ea:	429c      	cmp	r4, r3
 80083ec:	d101      	bne.n	80083f2 <__swsetup_r+0x46>
 80083ee:	68ac      	ldr	r4, [r5, #8]
 80083f0:	e7eb      	b.n	80083ca <__swsetup_r+0x1e>
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <__swsetup_r+0xd8>)
 80083f4:	429c      	cmp	r4, r3
 80083f6:	bf08      	it	eq
 80083f8:	68ec      	ldreq	r4, [r5, #12]
 80083fa:	e7e6      	b.n	80083ca <__swsetup_r+0x1e>
 80083fc:	0751      	lsls	r1, r2, #29
 80083fe:	d512      	bpl.n	8008426 <__swsetup_r+0x7a>
 8008400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008402:	b141      	cbz	r1, 8008416 <__swsetup_r+0x6a>
 8008404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008408:	4299      	cmp	r1, r3
 800840a:	d002      	beq.n	8008412 <__swsetup_r+0x66>
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff fa9f 	bl	8007950 <_free_r>
 8008412:	2300      	movs	r3, #0
 8008414:	6363      	str	r3, [r4, #52]	; 0x34
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	2300      	movs	r3, #0
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f043 0308 	orr.w	r3, r3, #8
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	b94b      	cbnz	r3, 8008446 <__swsetup_r+0x9a>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843c:	d003      	beq.n	8008446 <__swsetup_r+0x9a>
 800843e:	4621      	mov	r1, r4
 8008440:	4630      	mov	r0, r6
 8008442:	f000 f9c7 	bl	80087d4 <__smakebuf_r>
 8008446:	89a2      	ldrh	r2, [r4, #12]
 8008448:	f012 0301 	ands.w	r3, r2, #1
 800844c:	d00c      	beq.n	8008468 <__swsetup_r+0xbc>
 800844e:	2300      	movs	r3, #0
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	6963      	ldr	r3, [r4, #20]
 8008454:	425b      	negs	r3, r3
 8008456:	61a3      	str	r3, [r4, #24]
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	b953      	cbnz	r3, 8008472 <__swsetup_r+0xc6>
 800845c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008460:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008464:	d1ba      	bne.n	80083dc <__swsetup_r+0x30>
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	0792      	lsls	r2, r2, #30
 800846a:	bf58      	it	pl
 800846c:	6963      	ldrpl	r3, [r4, #20]
 800846e:	60a3      	str	r3, [r4, #8]
 8008470:	e7f2      	b.n	8008458 <__swsetup_r+0xac>
 8008472:	2000      	movs	r0, #0
 8008474:	e7f7      	b.n	8008466 <__swsetup_r+0xba>
 8008476:	bf00      	nop
 8008478:	20000220 	.word	0x20000220
 800847c:	08009cb8 	.word	0x08009cb8
 8008480:	08009cd8 	.word	0x08009cd8
 8008484:	08009c98 	.word	0x08009c98

08008488 <abort>:
 8008488:	b508      	push	{r3, lr}
 800848a:	2006      	movs	r0, #6
 800848c:	f000 fa0c 	bl	80088a8 <raise>
 8008490:	2001      	movs	r0, #1
 8008492:	f7fe f833 	bl	80064fc <_exit>
	...

08008498 <__sflush_r>:
 8008498:	898a      	ldrh	r2, [r1, #12]
 800849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849e:	4605      	mov	r5, r0
 80084a0:	0710      	lsls	r0, r2, #28
 80084a2:	460c      	mov	r4, r1
 80084a4:	d458      	bmi.n	8008558 <__sflush_r+0xc0>
 80084a6:	684b      	ldr	r3, [r1, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc05      	bgt.n	80084b8 <__sflush_r+0x20>
 80084ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	dc02      	bgt.n	80084b8 <__sflush_r+0x20>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	d0f9      	beq.n	80084b2 <__sflush_r+0x1a>
 80084be:	2300      	movs	r3, #0
 80084c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084c4:	682f      	ldr	r7, [r5, #0]
 80084c6:	6a21      	ldr	r1, [r4, #32]
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	d032      	beq.n	8008532 <__sflush_r+0x9a>
 80084cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	075a      	lsls	r2, r3, #29
 80084d2:	d505      	bpl.n	80084e0 <__sflush_r+0x48>
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	1ac0      	subs	r0, r0, r3
 80084d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084da:	b10b      	cbz	r3, 80084e0 <__sflush_r+0x48>
 80084dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084de:	1ac0      	subs	r0, r0, r3
 80084e0:	2300      	movs	r3, #0
 80084e2:	4602      	mov	r2, r0
 80084e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084e6:	6a21      	ldr	r1, [r4, #32]
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b0      	blx	r6
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	d106      	bne.n	8008500 <__sflush_r+0x68>
 80084f2:	6829      	ldr	r1, [r5, #0]
 80084f4:	291d      	cmp	r1, #29
 80084f6:	d848      	bhi.n	800858a <__sflush_r+0xf2>
 80084f8:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <__sflush_r+0x108>)
 80084fa:	40ca      	lsrs	r2, r1
 80084fc:	07d6      	lsls	r6, r2, #31
 80084fe:	d544      	bpl.n	800858a <__sflush_r+0xf2>
 8008500:	2200      	movs	r2, #0
 8008502:	6062      	str	r2, [r4, #4]
 8008504:	04d9      	lsls	r1, r3, #19
 8008506:	6922      	ldr	r2, [r4, #16]
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	d504      	bpl.n	8008516 <__sflush_r+0x7e>
 800850c:	1c42      	adds	r2, r0, #1
 800850e:	d101      	bne.n	8008514 <__sflush_r+0x7c>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b903      	cbnz	r3, 8008516 <__sflush_r+0x7e>
 8008514:	6560      	str	r0, [r4, #84]	; 0x54
 8008516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008518:	602f      	str	r7, [r5, #0]
 800851a:	2900      	cmp	r1, #0
 800851c:	d0c9      	beq.n	80084b2 <__sflush_r+0x1a>
 800851e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008522:	4299      	cmp	r1, r3
 8008524:	d002      	beq.n	800852c <__sflush_r+0x94>
 8008526:	4628      	mov	r0, r5
 8008528:	f7ff fa12 	bl	8007950 <_free_r>
 800852c:	2000      	movs	r0, #0
 800852e:	6360      	str	r0, [r4, #52]	; 0x34
 8008530:	e7c0      	b.n	80084b4 <__sflush_r+0x1c>
 8008532:	2301      	movs	r3, #1
 8008534:	4628      	mov	r0, r5
 8008536:	47b0      	blx	r6
 8008538:	1c41      	adds	r1, r0, #1
 800853a:	d1c8      	bne.n	80084ce <__sflush_r+0x36>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0c5      	beq.n	80084ce <__sflush_r+0x36>
 8008542:	2b1d      	cmp	r3, #29
 8008544:	d001      	beq.n	800854a <__sflush_r+0xb2>
 8008546:	2b16      	cmp	r3, #22
 8008548:	d101      	bne.n	800854e <__sflush_r+0xb6>
 800854a:	602f      	str	r7, [r5, #0]
 800854c:	e7b1      	b.n	80084b2 <__sflush_r+0x1a>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	e7ad      	b.n	80084b4 <__sflush_r+0x1c>
 8008558:	690f      	ldr	r7, [r1, #16]
 800855a:	2f00      	cmp	r7, #0
 800855c:	d0a9      	beq.n	80084b2 <__sflush_r+0x1a>
 800855e:	0793      	lsls	r3, r2, #30
 8008560:	680e      	ldr	r6, [r1, #0]
 8008562:	bf08      	it	eq
 8008564:	694b      	ldreq	r3, [r1, #20]
 8008566:	600f      	str	r7, [r1, #0]
 8008568:	bf18      	it	ne
 800856a:	2300      	movne	r3, #0
 800856c:	eba6 0807 	sub.w	r8, r6, r7
 8008570:	608b      	str	r3, [r1, #8]
 8008572:	f1b8 0f00 	cmp.w	r8, #0
 8008576:	dd9c      	ble.n	80084b2 <__sflush_r+0x1a>
 8008578:	4643      	mov	r3, r8
 800857a:	463a      	mov	r2, r7
 800857c:	6a21      	ldr	r1, [r4, #32]
 800857e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008580:	4628      	mov	r0, r5
 8008582:	47b0      	blx	r6
 8008584:	2800      	cmp	r0, #0
 8008586:	dc06      	bgt.n	8008596 <__sflush_r+0xfe>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	f04f 30ff 	mov.w	r0, #4294967295
 8008594:	e78e      	b.n	80084b4 <__sflush_r+0x1c>
 8008596:	4407      	add	r7, r0
 8008598:	eba8 0800 	sub.w	r8, r8, r0
 800859c:	e7e9      	b.n	8008572 <__sflush_r+0xda>
 800859e:	bf00      	nop
 80085a0:	20400001 	.word	0x20400001

080085a4 <_fflush_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	690b      	ldr	r3, [r1, #16]
 80085a8:	4605      	mov	r5, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	b1db      	cbz	r3, 80085e6 <_fflush_r+0x42>
 80085ae:	b118      	cbz	r0, 80085b8 <_fflush_r+0x14>
 80085b0:	6983      	ldr	r3, [r0, #24]
 80085b2:	b90b      	cbnz	r3, 80085b8 <_fflush_r+0x14>
 80085b4:	f000 f860 	bl	8008678 <__sinit>
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <_fflush_r+0x48>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d109      	bne.n	80085d2 <_fflush_r+0x2e>
 80085be:	686c      	ldr	r4, [r5, #4]
 80085c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085c4:	b17b      	cbz	r3, 80085e6 <_fflush_r+0x42>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ce:	f7ff bf63 	b.w	8008498 <__sflush_r>
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <_fflush_r+0x4c>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	d101      	bne.n	80085dc <_fflush_r+0x38>
 80085d8:	68ac      	ldr	r4, [r5, #8]
 80085da:	e7f1      	b.n	80085c0 <_fflush_r+0x1c>
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <_fflush_r+0x50>)
 80085de:	429c      	cmp	r4, r3
 80085e0:	bf08      	it	eq
 80085e2:	68ec      	ldreq	r4, [r5, #12]
 80085e4:	e7ec      	b.n	80085c0 <_fflush_r+0x1c>
 80085e6:	2000      	movs	r0, #0
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	08009cb8 	.word	0x08009cb8
 80085f0:	08009cd8 	.word	0x08009cd8
 80085f4:	08009c98 	.word	0x08009c98

080085f8 <std>:
 80085f8:	2300      	movs	r3, #0
 80085fa:	b510      	push	{r4, lr}
 80085fc:	4604      	mov	r4, r0
 80085fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008602:	6083      	str	r3, [r0, #8]
 8008604:	8181      	strh	r1, [r0, #12]
 8008606:	6643      	str	r3, [r0, #100]	; 0x64
 8008608:	81c2      	strh	r2, [r0, #14]
 800860a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800860e:	6183      	str	r3, [r0, #24]
 8008610:	4619      	mov	r1, r3
 8008612:	2208      	movs	r2, #8
 8008614:	305c      	adds	r0, #92	; 0x5c
 8008616:	f7ff f993 	bl	8007940 <memset>
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <std+0x38>)
 800861c:	6263      	str	r3, [r4, #36]	; 0x24
 800861e:	4b05      	ldr	r3, [pc, #20]	; (8008634 <std+0x3c>)
 8008620:	62a3      	str	r3, [r4, #40]	; 0x28
 8008622:	4b05      	ldr	r3, [pc, #20]	; (8008638 <std+0x40>)
 8008624:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008626:	4b05      	ldr	r3, [pc, #20]	; (800863c <std+0x44>)
 8008628:	6224      	str	r4, [r4, #32]
 800862a:	6323      	str	r3, [r4, #48]	; 0x30
 800862c:	bd10      	pop	{r4, pc}
 800862e:	bf00      	nop
 8008630:	080088e1 	.word	0x080088e1
 8008634:	08008903 	.word	0x08008903
 8008638:	0800893b 	.word	0x0800893b
 800863c:	0800895f 	.word	0x0800895f

08008640 <_cleanup_r>:
 8008640:	4901      	ldr	r1, [pc, #4]	; (8008648 <_cleanup_r+0x8>)
 8008642:	f000 b885 	b.w	8008750 <_fwalk_reent>
 8008646:	bf00      	nop
 8008648:	080085a5 	.word	0x080085a5

0800864c <__sfmoreglue>:
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	1e4a      	subs	r2, r1, #1
 8008650:	2568      	movs	r5, #104	; 0x68
 8008652:	4355      	muls	r5, r2
 8008654:	460e      	mov	r6, r1
 8008656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800865a:	f7ff f9c7 	bl	80079ec <_malloc_r>
 800865e:	4604      	mov	r4, r0
 8008660:	b140      	cbz	r0, 8008674 <__sfmoreglue+0x28>
 8008662:	2100      	movs	r1, #0
 8008664:	e9c0 1600 	strd	r1, r6, [r0]
 8008668:	300c      	adds	r0, #12
 800866a:	60a0      	str	r0, [r4, #8]
 800866c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008670:	f7ff f966 	bl	8007940 <memset>
 8008674:	4620      	mov	r0, r4
 8008676:	bd70      	pop	{r4, r5, r6, pc}

08008678 <__sinit>:
 8008678:	6983      	ldr	r3, [r0, #24]
 800867a:	b510      	push	{r4, lr}
 800867c:	4604      	mov	r4, r0
 800867e:	bb33      	cbnz	r3, 80086ce <__sinit+0x56>
 8008680:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008684:	6503      	str	r3, [r0, #80]	; 0x50
 8008686:	4b12      	ldr	r3, [pc, #72]	; (80086d0 <__sinit+0x58>)
 8008688:	4a12      	ldr	r2, [pc, #72]	; (80086d4 <__sinit+0x5c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6282      	str	r2, [r0, #40]	; 0x28
 800868e:	4298      	cmp	r0, r3
 8008690:	bf04      	itt	eq
 8008692:	2301      	moveq	r3, #1
 8008694:	6183      	streq	r3, [r0, #24]
 8008696:	f000 f81f 	bl	80086d8 <__sfp>
 800869a:	6060      	str	r0, [r4, #4]
 800869c:	4620      	mov	r0, r4
 800869e:	f000 f81b 	bl	80086d8 <__sfp>
 80086a2:	60a0      	str	r0, [r4, #8]
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f817 	bl	80086d8 <__sfp>
 80086aa:	2200      	movs	r2, #0
 80086ac:	60e0      	str	r0, [r4, #12]
 80086ae:	2104      	movs	r1, #4
 80086b0:	6860      	ldr	r0, [r4, #4]
 80086b2:	f7ff ffa1 	bl	80085f8 <std>
 80086b6:	2201      	movs	r2, #1
 80086b8:	2109      	movs	r1, #9
 80086ba:	68a0      	ldr	r0, [r4, #8]
 80086bc:	f7ff ff9c 	bl	80085f8 <std>
 80086c0:	2202      	movs	r2, #2
 80086c2:	2112      	movs	r1, #18
 80086c4:	68e0      	ldr	r0, [r4, #12]
 80086c6:	f7ff ff97 	bl	80085f8 <std>
 80086ca:	2301      	movs	r3, #1
 80086cc:	61a3      	str	r3, [r4, #24]
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	08009b58 	.word	0x08009b58
 80086d4:	08008641 	.word	0x08008641

080086d8 <__sfp>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	4b1b      	ldr	r3, [pc, #108]	; (8008748 <__sfp+0x70>)
 80086dc:	681e      	ldr	r6, [r3, #0]
 80086de:	69b3      	ldr	r3, [r6, #24]
 80086e0:	4607      	mov	r7, r0
 80086e2:	b913      	cbnz	r3, 80086ea <__sfp+0x12>
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff ffc7 	bl	8008678 <__sinit>
 80086ea:	3648      	adds	r6, #72	; 0x48
 80086ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	d503      	bpl.n	80086fc <__sfp+0x24>
 80086f4:	6833      	ldr	r3, [r6, #0]
 80086f6:	b133      	cbz	r3, 8008706 <__sfp+0x2e>
 80086f8:	6836      	ldr	r6, [r6, #0]
 80086fa:	e7f7      	b.n	80086ec <__sfp+0x14>
 80086fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008700:	b16d      	cbz	r5, 800871e <__sfp+0x46>
 8008702:	3468      	adds	r4, #104	; 0x68
 8008704:	e7f4      	b.n	80086f0 <__sfp+0x18>
 8008706:	2104      	movs	r1, #4
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff ff9f 	bl	800864c <__sfmoreglue>
 800870e:	6030      	str	r0, [r6, #0]
 8008710:	2800      	cmp	r0, #0
 8008712:	d1f1      	bne.n	80086f8 <__sfp+0x20>
 8008714:	230c      	movs	r3, #12
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	4604      	mov	r4, r0
 800871a:	4620      	mov	r0, r4
 800871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871e:	4b0b      	ldr	r3, [pc, #44]	; (800874c <__sfp+0x74>)
 8008720:	6665      	str	r5, [r4, #100]	; 0x64
 8008722:	e9c4 5500 	strd	r5, r5, [r4]
 8008726:	60a5      	str	r5, [r4, #8]
 8008728:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800872c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008730:	2208      	movs	r2, #8
 8008732:	4629      	mov	r1, r5
 8008734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008738:	f7ff f902 	bl	8007940 <memset>
 800873c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008744:	e7e9      	b.n	800871a <__sfp+0x42>
 8008746:	bf00      	nop
 8008748:	08009b58 	.word	0x08009b58
 800874c:	ffff0001 	.word	0xffff0001

08008750 <_fwalk_reent>:
 8008750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800875c:	2600      	movs	r6, #0
 800875e:	b914      	cbnz	r4, 8008766 <_fwalk_reent+0x16>
 8008760:	4630      	mov	r0, r6
 8008762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008766:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800876a:	3f01      	subs	r7, #1
 800876c:	d501      	bpl.n	8008772 <_fwalk_reent+0x22>
 800876e:	6824      	ldr	r4, [r4, #0]
 8008770:	e7f5      	b.n	800875e <_fwalk_reent+0xe>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d907      	bls.n	8008788 <_fwalk_reent+0x38>
 8008778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800877c:	3301      	adds	r3, #1
 800877e:	d003      	beq.n	8008788 <_fwalk_reent+0x38>
 8008780:	4629      	mov	r1, r5
 8008782:	4640      	mov	r0, r8
 8008784:	47c8      	blx	r9
 8008786:	4306      	orrs	r6, r0
 8008788:	3568      	adds	r5, #104	; 0x68
 800878a:	e7ee      	b.n	800876a <_fwalk_reent+0x1a>

0800878c <__swhatbuf_r>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	460e      	mov	r6, r1
 8008790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008794:	2900      	cmp	r1, #0
 8008796:	b096      	sub	sp, #88	; 0x58
 8008798:	4614      	mov	r4, r2
 800879a:	461d      	mov	r5, r3
 800879c:	da07      	bge.n	80087ae <__swhatbuf_r+0x22>
 800879e:	2300      	movs	r3, #0
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	89b3      	ldrh	r3, [r6, #12]
 80087a4:	061a      	lsls	r2, r3, #24
 80087a6:	d410      	bmi.n	80087ca <__swhatbuf_r+0x3e>
 80087a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ac:	e00e      	b.n	80087cc <__swhatbuf_r+0x40>
 80087ae:	466a      	mov	r2, sp
 80087b0:	f000 f8fc 	bl	80089ac <_fstat_r>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	dbf2      	blt.n	800879e <__swhatbuf_r+0x12>
 80087b8:	9a01      	ldr	r2, [sp, #4]
 80087ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087c2:	425a      	negs	r2, r3
 80087c4:	415a      	adcs	r2, r3
 80087c6:	602a      	str	r2, [r5, #0]
 80087c8:	e7ee      	b.n	80087a8 <__swhatbuf_r+0x1c>
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	2000      	movs	r0, #0
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	b016      	add	sp, #88	; 0x58
 80087d2:	bd70      	pop	{r4, r5, r6, pc}

080087d4 <__smakebuf_r>:
 80087d4:	898b      	ldrh	r3, [r1, #12]
 80087d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087d8:	079d      	lsls	r5, r3, #30
 80087da:	4606      	mov	r6, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	d507      	bpl.n	80087f0 <__smakebuf_r+0x1c>
 80087e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	2301      	movs	r3, #1
 80087ea:	6163      	str	r3, [r4, #20]
 80087ec:	b002      	add	sp, #8
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	ab01      	add	r3, sp, #4
 80087f2:	466a      	mov	r2, sp
 80087f4:	f7ff ffca 	bl	800878c <__swhatbuf_r>
 80087f8:	9900      	ldr	r1, [sp, #0]
 80087fa:	4605      	mov	r5, r0
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff f8f5 	bl	80079ec <_malloc_r>
 8008802:	b948      	cbnz	r0, 8008818 <__smakebuf_r+0x44>
 8008804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008808:	059a      	lsls	r2, r3, #22
 800880a:	d4ef      	bmi.n	80087ec <__smakebuf_r+0x18>
 800880c:	f023 0303 	bic.w	r3, r3, #3
 8008810:	f043 0302 	orr.w	r3, r3, #2
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	e7e3      	b.n	80087e0 <__smakebuf_r+0xc>
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <__smakebuf_r+0x7c>)
 800881a:	62b3      	str	r3, [r6, #40]	; 0x28
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	6020      	str	r0, [r4, #0]
 8008820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008824:	81a3      	strh	r3, [r4, #12]
 8008826:	9b00      	ldr	r3, [sp, #0]
 8008828:	6163      	str	r3, [r4, #20]
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	6120      	str	r0, [r4, #16]
 800882e:	b15b      	cbz	r3, 8008848 <__smakebuf_r+0x74>
 8008830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008834:	4630      	mov	r0, r6
 8008836:	f000 f8cb 	bl	80089d0 <_isatty_r>
 800883a:	b128      	cbz	r0, 8008848 <__smakebuf_r+0x74>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f023 0303 	bic.w	r3, r3, #3
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	431d      	orrs	r5, r3
 800884c:	81a5      	strh	r5, [r4, #12]
 800884e:	e7cd      	b.n	80087ec <__smakebuf_r+0x18>
 8008850:	08008641 	.word	0x08008641

08008854 <__malloc_lock>:
 8008854:	4770      	bx	lr

08008856 <__malloc_unlock>:
 8008856:	4770      	bx	lr

08008858 <_raise_r>:
 8008858:	291f      	cmp	r1, #31
 800885a:	b538      	push	{r3, r4, r5, lr}
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	d904      	bls.n	800886c <_raise_r+0x14>
 8008862:	2316      	movs	r3, #22
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800886e:	b112      	cbz	r2, 8008876 <_raise_r+0x1e>
 8008870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008874:	b94b      	cbnz	r3, 800888a <_raise_r+0x32>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f830 	bl	80088dc <_getpid_r>
 800887c:	462a      	mov	r2, r5
 800887e:	4601      	mov	r1, r0
 8008880:	4620      	mov	r0, r4
 8008882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008886:	f000 b817 	b.w	80088b8 <_kill_r>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d00a      	beq.n	80088a4 <_raise_r+0x4c>
 800888e:	1c59      	adds	r1, r3, #1
 8008890:	d103      	bne.n	800889a <_raise_r+0x42>
 8008892:	2316      	movs	r3, #22
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	2001      	movs	r0, #1
 8008898:	e7e7      	b.n	800886a <_raise_r+0x12>
 800889a:	2400      	movs	r4, #0
 800889c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088a0:	4628      	mov	r0, r5
 80088a2:	4798      	blx	r3
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7e0      	b.n	800886a <_raise_r+0x12>

080088a8 <raise>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <raise+0xc>)
 80088aa:	4601      	mov	r1, r0
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f7ff bfd3 	b.w	8008858 <_raise_r>
 80088b2:	bf00      	nop
 80088b4:	20000220 	.word	0x20000220

080088b8 <_kill_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4c07      	ldr	r4, [pc, #28]	; (80088d8 <_kill_r+0x20>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4605      	mov	r5, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	f7fd fe11 	bl	80064ec <_kill>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d102      	bne.n	80088d4 <_kill_r+0x1c>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	b103      	cbz	r3, 80088d4 <_kill_r+0x1c>
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	20014e80 	.word	0x20014e80

080088dc <_getpid_r>:
 80088dc:	f7fd be04 	b.w	80064e8 <_getpid>

080088e0 <__sread>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	460c      	mov	r4, r1
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	f000 f894 	bl	8008a14 <_read_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	bfab      	itete	ge
 80088f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f2:	89a3      	ldrhlt	r3, [r4, #12]
 80088f4:	181b      	addge	r3, r3, r0
 80088f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fa:	bfac      	ite	ge
 80088fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088fe:	81a3      	strhlt	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__swrite>:
 8008902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	461f      	mov	r7, r3
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	05db      	lsls	r3, r3, #23
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4616      	mov	r6, r2
 8008912:	d505      	bpl.n	8008920 <__swrite+0x1e>
 8008914:	2302      	movs	r3, #2
 8008916:	2200      	movs	r2, #0
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	f000 f868 	bl	80089f0 <_lseek_r>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	4632      	mov	r2, r6
 800892e:	463b      	mov	r3, r7
 8008930:	4628      	mov	r0, r5
 8008932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	f000 b817 	b.w	8008968 <_write_r>

0800893a <__sseek>:
 800893a:	b510      	push	{r4, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 f855 	bl	80089f0 <_lseek_r>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	bf15      	itete	ne
 800894c:	6560      	strne	r0, [r4, #84]	; 0x54
 800894e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008956:	81a3      	strheq	r3, [r4, #12]
 8008958:	bf18      	it	ne
 800895a:	81a3      	strhne	r3, [r4, #12]
 800895c:	bd10      	pop	{r4, pc}

0800895e <__sclose>:
 800895e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008962:	f000 b813 	b.w	800898c <_close_r>
	...

08008968 <_write_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4c07      	ldr	r4, [pc, #28]	; (8008988 <_write_r+0x20>)
 800896c:	4605      	mov	r5, r0
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	2200      	movs	r2, #0
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7fd fdd4 	bl	8006524 <_write>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_write_r+0x1e>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	b103      	cbz	r3, 8008986 <_write_r+0x1e>
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20014e80 	.word	0x20014e80

0800898c <_close_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4c06      	ldr	r4, [pc, #24]	; (80089a8 <_close_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4605      	mov	r5, r0
 8008994:	4608      	mov	r0, r1
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	f7fd fdd2 	bl	8006540 <_close>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_close_r+0x1a>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_close_r+0x1a>
 80089a4:	602b      	str	r3, [r5, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20014e80 	.word	0x20014e80

080089ac <_fstat_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4c07      	ldr	r4, [pc, #28]	; (80089cc <_fstat_r+0x20>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4605      	mov	r5, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	f7fd fdc4 	bl	8006546 <_fstat>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	d102      	bne.n	80089c8 <_fstat_r+0x1c>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	b103      	cbz	r3, 80089c8 <_fstat_r+0x1c>
 80089c6:	602b      	str	r3, [r5, #0]
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	20014e80 	.word	0x20014e80

080089d0 <_isatty_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4c06      	ldr	r4, [pc, #24]	; (80089ec <_isatty_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4605      	mov	r5, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	f7fd fdb8 	bl	8006550 <_isatty>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_isatty_r+0x1a>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_isatty_r+0x1a>
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20014e80 	.word	0x20014e80

080089f0 <_lseek_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4c07      	ldr	r4, [pc, #28]	; (8008a10 <_lseek_r+0x20>)
 80089f4:	4605      	mov	r5, r0
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	6022      	str	r2, [r4, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f7fd fda8 	bl	8006554 <_lseek>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_lseek_r+0x1e>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_lseek_r+0x1e>
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20014e80 	.word	0x20014e80

08008a14 <_read_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4c07      	ldr	r4, [pc, #28]	; (8008a34 <_read_r+0x20>)
 8008a18:	4605      	mov	r5, r0
 8008a1a:	4608      	mov	r0, r1
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f7fd fd70 	bl	8006508 <_read>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_read_r+0x1e>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_read_r+0x1e>
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20014e80 	.word	0x20014e80

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
